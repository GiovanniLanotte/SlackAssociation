pull request url html,pull request url,body,commit_id,create at,id,diff_hunk,position,update at,url,html url,user
https://github.com/hyperledger/indy-test-automation/pull/9,https://github.com/hyperledger/indy-test-automation/pull/9,Most probably here should be `assert res3['result']['seqNo'] is not None` instead of second `assert res2['result']['seqNo'] is not None`.,f6db610cf9e48aeaf290e32d46f930b2c45bb510,2019-02-18 15:40:48,257743495,"@@ -0,0 +1,330 @@
+from utils import pool_helper, wallet_helper, nym_helper, get_nym_helper, attrib_helper, get_attrib_helper,\
+    schema_helper, get_schema_helper, cred_def_helper, get_cred_def_helper, revoc_reg_def_helper,\
+    get_revoc_reg_def_helper, revoc_reg_entry_helper, get_revoc_reg_helper, get_revoc_reg_delta_helper,\
+    random_did_and_json, random_seed_and_json
+import pytest
+import json
+from indy import pool, did, ledger, IndyError
+import hashlib
+import time
+
+
+@pytest.mark.parametrize('writer_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR'])
+@pytest.mark.parametrize('reader_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR', None])
+@pytest.mark.asyncio
+async def test_send_and_get_nym_positive(writer_role, reader_role):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    target_did, target_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    writer_did, writer_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    reader_did, reader_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    # Trustee adds NYM writer
+    await nym_helper(pool_handle, wallet_handle, trustee_did, writer_did, writer_vk, None, writer_role)
+    # Trustee adds NYM reader
+    await nym_helper(pool_handle, wallet_handle, trustee_did, reader_did, reader_vk, None, reader_role)
+    # Writer sends NYM
+    res1 = await nym_helper(pool_handle, wallet_handle, writer_did, target_did)
+    time.sleep(1)
+    # Reader gets NYM
+    res2 = await get_nym_helper(pool_handle, wallet_handle, target_did, target_did)
+
+    assert res1['op'] == 'REPLY'
+    assert res2['result']['seqNo'] is not None
+
+    print(res1)
+    print(res2)
+
+
+@pytest.mark.parametrize('submitter_seed', ['{}',
+                                            random_did_and_json()[1],
+                                            random_seed_and_json()[1],
+                                            ])
+@pytest.mark.asyncio
+async def test_send_and_get_nym_negative(submitter_seed):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    target_did, target_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    submitter_did, submitter_vk = await did.create_and_store_my_did(wallet_handle, submitter_seed)
+    trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    # Trustee adds submitter
+    await nym_helper(pool_handle, wallet_handle, trustee_did, submitter_did, submitter_vk)
+    # None role submitter tries to send NYM (rejected) and gets no data about this NYM from ledger
+    res1 = await nym_helper(pool_handle, wallet_handle, submitter_did, target_did)
+    res2 = await get_nym_helper(pool_handle, wallet_handle, submitter_did, target_did)
+
+    assert res1['op'] == 'REJECT'
+    assert res2['result']['seqNo'] is None
+
+    print(res1)
+    print(res2)
+
+
+@pytest.mark.parametrize('xhash, raw, enc, raw_key', [
+    (hashlib.sha256().hexdigest(), None, None, None),
+    (None, json.dumps({'key': 'value'}), None, 'key'),
+    (None, None, 'ENCRYPTED_STRING', None)
+])
+@pytest.mark.asyncio
+async def test_send_and_get_attrib_positive(xhash, raw, enc, raw_key):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    target_did, target_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    submitter_did, submitter_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    await nym_helper(pool_handle, wallet_handle, submitter_did, target_did, target_vk)
+    res1 = await attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw, enc)
+    time.sleep(1)
+    res2 = await get_attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw_key, enc)
+
+    assert res1['op'] == 'REPLY'
+    assert res2['result']['seqNo'] is not None
+
+    print(res1)
+    print(res2)
+
+
+@pytest.mark.parametrize('xhash, raw, enc, error', [
+    (None, None, None, IndyError),
+    (hashlib.sha256().hexdigest(), json.dumps({'key': 'value'}), None, None),
+    (None, json.dumps({'key': 'value'}), 'ENCRYPTED_STRING', None),
+    (hashlib.sha256().hexdigest(), None, 'ENCRYPTED_STRING', None),
+    (hashlib.sha256().hexdigest(), json.dumps({'key': 'value'}), 'ENCRYPTED_STRING', None)
+])
+@pytest.mark.asyncio
+async def test_send_and_get_attrib_negative(xhash, raw, enc, error):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    target_did, target_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    submitter_did, submitter_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    await nym_helper(pool_handle, wallet_handle, submitter_did, target_did, target_vk)
+    if error:
+        with pytest.raises(error):
+            await attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw, enc)
+        with pytest.raises(error):
+            await get_attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw, enc)
+    else:
+        res1 = await attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw, enc)
+        res2 = await get_attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw, enc)
+
+        assert res1['op'] == 'REQNACK'
+        assert res2['op'] == 'REQNACK'
+
+        print(res1)
+        print(res2)
+
+
+@pytest.mark.parametrize('writer_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR'])
+@pytest.mark.parametrize('reader_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR', None])
+@pytest.mark.asyncio
+async def test_send_and_get_schema_positive(writer_role, reader_role):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    writer_did, writer_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    reader_did, reader_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    # Trustee adds SCHEMA writer
+    await nym_helper(pool_handle, wallet_handle, trustee_did, writer_did, writer_vk, None, writer_role)
+    # Trustee adds SCHEMA reader
+    await nym_helper(pool_handle, wallet_handle, trustee_did, reader_did, reader_vk, None, reader_role)
+    # Writer sends SCHEMA
+    schema_id, res1 = await schema_helper(pool_handle, wallet_handle, writer_did,
+                                          'schema1', '1.0', json.dumps([""age"", ""sex"", ""height"", ""name""]))
+    time.sleep(1)
+    # Reader gets SCHEMA
+    res2 = await get_schema_helper(pool_handle, wallet_handle, reader_did, schema_id)
+
+    assert res1['op'] == 'REPLY'
+    assert res2['result']['seqNo'] is not None
+
+    print(res1)
+    print(res2)
+
+
+@pytest.mark.parametrize('schema_name, schema_version, schema_attrs, schema_id, errors', [
+    (None, None, None, None, (AttributeError, AttributeError)),
+    ('', '', '', '', (IndyError, IndyError)),
+    (1, 2, 3, 4, (AttributeError, AttributeError))
+])
+@pytest.mark.asyncio
+async def test_send_and_get_schema_negative(schema_name, schema_version, schema_attrs, schema_id, errors):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    if errors:
+        with pytest.raises(errors[0]):
+            await schema_helper(pool_handle, wallet_handle, trustee_did, schema_name, schema_version, schema_attrs)
+        with pytest.raises(errors[1]):
+            await get_schema_helper(pool_handle, wallet_handle, trustee_did, schema_id)
+    # TODO: get reqnacks from pool
+    else:
+        res1 = await schema_helper(pool_handle, wallet_handle, trustee_did, schema_name, schema_version, schema_attrs)
+        res2 = await get_schema_helper(pool_handle, wallet_handle, trustee_did, schema_id)
+
+        assert res1['op'] == 'REQNACK'
+        assert res2['op'] == 'REQNACK'
+
+        print(res1)
+        print(res2)
+
+
+@pytest.mark.parametrize('writer_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR'])
+@pytest.mark.parametrize('reader_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR', None])
+@pytest.mark.asyncio
+async def test_send_and_get_cred_def_positive(writer_role, reader_role):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    writer_did, writer_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    reader_did, reader_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    # Trustee adds CRED_DEF writer
+    await nym_helper(pool_handle, wallet_handle, trustee_did, writer_did, writer_vk, None, writer_role)
+    # Trustee adds CRED_DEF reader
+    await nym_helper(pool_handle, wallet_handle, trustee_did, reader_did, reader_vk, None, reader_role)
+    schema_id, _ = await schema_helper(pool_handle, wallet_handle, writer_did,
+                                       'schema1', '1.0', json.dumps([""age"", ""sex"", ""height"", ""name""]))
+    time.sleep(1)
+    res = await get_schema_helper(pool_handle, wallet_handle, reader_did, schema_id)
+    schema_id, schema_json = await ledger.parse_get_schema_response(json.dumps(res))
+    cred_def_id, _, res1 = await cred_def_helper(pool_handle, wallet_handle, writer_did, schema_json, 'TAG',
+                                                 None, json.dumps({'support_revocation': False}))
+    time.sleep(1)
+    res2 = await get_cred_def_helper(pool_handle, wallet_handle, reader_did, cred_def_id)
+
+    assert res1['op'] == 'REPLY'
+    assert res2['result']['seqNo'] is not None
+
+    print(res1)
+    print(res2)
+    print(cred_def_id)
+
+
+@pytest.mark.parametrize('schema_json, tag, signature_type, config_json, cred_def_id, errors', [
+    (None, None, None, None, None, (AttributeError, AttributeError)),
+    ('', '', '', '', '', (IndyError, IndyError))
+])
+@pytest.mark.asyncio
+async def test_send_and_get_cred_def_negative(schema_json, tag, signature_type, config_json, cred_def_id, errors):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    if errors:
+        with pytest.raises(errors[0]):
+            await cred_def_helper(
+                pool_handle, wallet_handle, trustee_did, schema_json, tag, signature_type, config_json)
+        with pytest.raises(errors[1]):
+            await get_cred_def_helper(pool_handle, wallet_handle, trustee_did, cred_def_id)
+    # TODO: get reqnacks from pool
+    else:
+        res1 = await cred_def_helper(pool_handle, wallet_handle, trustee_did, schema_json, tag, signature_type,
+                                     config_json)
+        res2 = await get_cred_def_helper(pool_handle, wallet_handle, trustee_did, cred_def_id)
+
+        assert res1['op'] == 'REQNACK'
+        assert res2['op'] == 'REQNACK'
+
+        print(res1)
+        print(res2)
+
+
+@pytest.mark.parametrize('writer_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR'])
+@pytest.mark.parametrize('reader_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR', None])
+@pytest.mark.asyncio
+async def test_send_and_get_revoc_reg_def_positive(writer_role, reader_role):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    writer_did, writer_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    reader_did, reader_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    # Trustee adds REVOC_REG_DEF writer
+    await nym_helper(pool_handle, wallet_handle, trustee_did, writer_did, writer_vk, None, writer_role)
+    # Trustee adds REVOC_REG_DEF reader
+    await nym_helper(pool_handle, wallet_handle, trustee_did, reader_did, reader_vk, None, reader_role)
+    schema_id, _ = await schema_helper(pool_handle, wallet_handle, writer_did,
+                                       'schema1', '1.0', json.dumps([""age"", ""sex"", ""height"", ""name""]))
+    time.sleep(1)
+    res = await get_schema_helper(pool_handle, wallet_handle, reader_did, schema_id)
+    schema_id, schema_json = await ledger.parse_get_schema_response(json.dumps(res))
+    cred_def_id, _, res = await cred_def_helper(pool_handle, wallet_handle, writer_did, schema_json, 'cred_def_tag',
+                                                None, json.dumps({""support_revocation"": True}))
+    revoc_reg_def_id, _, _, res1 = await revoc_reg_def_helper(pool_handle, wallet_handle, writer_did, None,
+                                                              'revoc_def_tag', cred_def_id,
+                                                              json.dumps({'max_cred_num': 1,
+                                                                          'issuance_type': 'ISSUANCE_BY_DEFAULT'}))
+    time.sleep(1)
+    res2 = await get_revoc_reg_def_helper(pool_handle, wallet_handle, reader_did, revoc_reg_def_id)
+
+    assert res1['op'] == 'REPLY'
+    assert res2['result']['seqNo'] is not None
+
+    print(res1)
+    print(res2)
+
+
+@pytest.mark.asyncio
+async def test_send_and_get_revoc_reg_def_negative():
+    pass
+
+
+@pytest.mark.parametrize('writer_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR'])
+@pytest.mark.parametrize('reader_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR', None])
+@pytest.mark.asyncio
+async def test_send_and_get_revoc_reg_entry_positive(writer_role, reader_role):
+    await pool.set_protocol_version(2)
+    timestamp0 = int(time.time())
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    writer_did, writer_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    reader_did, reader_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    # Trustee adds REVOC_REG_ENTRY writer
+    await nym_helper(pool_handle, wallet_handle, trustee_did, writer_did, writer_vk, None, writer_role)
+    # Trustee adds REVOC_REG_ENTRY reader
+    await nym_helper(pool_handle, wallet_handle, trustee_did, reader_did, reader_vk, None, reader_role)
+    schema_id, _ = await schema_helper(pool_handle, wallet_handle, writer_did,
+                                       'schema1', '1.0', json.dumps([""age"", ""sex"", ""height"", ""name""]))
+    time.sleep(1)
+    res = await get_schema_helper(pool_handle, wallet_handle, reader_did, schema_id)
+    schema_id, schema_json = await ledger.parse_get_schema_response(json.dumps(res))
+    cred_def_id, _, res = await cred_def_helper(pool_handle, wallet_handle, writer_did, schema_json, 'cred_def_tag',
+                                                'CL', json.dumps({'support_revocation': True}))
+    revoc_reg_def_id, _, _, res1 = await revoc_reg_entry_helper(pool_handle, wallet_handle, writer_did, 'CL_ACCUM',
+                                                                'revoc_def_tag', cred_def_id,
+                                                                json.dumps({'max_cred_num': 1,
+                                                                            'issuance_type': 'ISSUANCE_BY_DEFAULT'}))
+    timestamp1 = int(time.time())
+    time.sleep(1)
+    res2 = await get_revoc_reg_helper(pool_handle, wallet_handle, reader_did, revoc_reg_def_id, timestamp1)
+    res3 = await get_revoc_reg_delta_helper(pool_handle, wallet_handle, reader_did, revoc_reg_def_id,
+                                            timestamp0, timestamp1)
+
+    assert res1['op'] == 'REPLY'
+    assert res2['result']['seqNo'] is not None
+    assert res2['result']['seqNo'] is not None",,2019-02-20 09:46:27,https://api.github.com/repos/hyperledger/indy-test-automation/pulls/comments/257743495,https://github.com/hyperledger/indy-test-automation/pull/9#discussion_r257743495,ozheregelya
https://github.com/hyperledger/indy-test-automation/pull/9,https://github.com/hyperledger/indy-test-automation/pull/9,"Need to add case for get_attrib when the request is valid and `res2['result']['seqNo'] is None` is expected. 
The same situation with the rest requests.",f6db610cf9e48aeaf290e32d46f930b2c45bb510,2019-02-18 16:09:06,257753997,"@@ -0,0 +1,330 @@
+from utils import pool_helper, wallet_helper, nym_helper, get_nym_helper, attrib_helper, get_attrib_helper,\
+    schema_helper, get_schema_helper, cred_def_helper, get_cred_def_helper, revoc_reg_def_helper,\
+    get_revoc_reg_def_helper, revoc_reg_entry_helper, get_revoc_reg_helper, get_revoc_reg_delta_helper,\
+    random_did_and_json, random_seed_and_json
+import pytest
+import json
+from indy import pool, did, ledger, IndyError
+import hashlib
+import time
+
+
+@pytest.mark.parametrize('writer_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR'])
+@pytest.mark.parametrize('reader_role', ['TRUSTEE', 'STEWARD', 'TRUST_ANCHOR', None])
+@pytest.mark.asyncio
+async def test_send_and_get_nym_positive(writer_role, reader_role):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    target_did, target_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    writer_did, writer_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    reader_did, reader_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    # Trustee adds NYM writer
+    await nym_helper(pool_handle, wallet_handle, trustee_did, writer_did, writer_vk, None, writer_role)
+    # Trustee adds NYM reader
+    await nym_helper(pool_handle, wallet_handle, trustee_did, reader_did, reader_vk, None, reader_role)
+    # Writer sends NYM
+    res1 = await nym_helper(pool_handle, wallet_handle, writer_did, target_did)
+    time.sleep(1)
+    # Reader gets NYM
+    res2 = await get_nym_helper(pool_handle, wallet_handle, target_did, target_did)
+
+    assert res1['op'] == 'REPLY'
+    assert res2['result']['seqNo'] is not None
+
+    print(res1)
+    print(res2)
+
+
+@pytest.mark.parametrize('submitter_seed', ['{}',
+                                            random_did_and_json()[1],
+                                            random_seed_and_json()[1],
+                                            ])
+@pytest.mark.asyncio
+async def test_send_and_get_nym_negative(submitter_seed):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    target_did, target_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    submitter_did, submitter_vk = await did.create_and_store_my_did(wallet_handle, submitter_seed)
+    trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    # Trustee adds submitter
+    await nym_helper(pool_handle, wallet_handle, trustee_did, submitter_did, submitter_vk)
+    # None role submitter tries to send NYM (rejected) and gets no data about this NYM from ledger
+    res1 = await nym_helper(pool_handle, wallet_handle, submitter_did, target_did)
+    res2 = await get_nym_helper(pool_handle, wallet_handle, submitter_did, target_did)
+
+    assert res1['op'] == 'REJECT'
+    assert res2['result']['seqNo'] is None
+
+    print(res1)
+    print(res2)
+
+
+@pytest.mark.parametrize('xhash, raw, enc, raw_key', [
+    (hashlib.sha256().hexdigest(), None, None, None),
+    (None, json.dumps({'key': 'value'}), None, 'key'),
+    (None, None, 'ENCRYPTED_STRING', None)
+])
+@pytest.mark.asyncio
+async def test_send_and_get_attrib_positive(xhash, raw, enc, raw_key):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    target_did, target_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    submitter_did, submitter_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    await nym_helper(pool_handle, wallet_handle, submitter_did, target_did, target_vk)
+    res1 = await attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw, enc)
+    time.sleep(1)
+    res2 = await get_attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw_key, enc)
+
+    assert res1['op'] == 'REPLY'
+    assert res2['result']['seqNo'] is not None
+
+    print(res1)
+    print(res2)
+
+
+@pytest.mark.parametrize('xhash, raw, enc, error', [
+    (None, None, None, IndyError),
+    (hashlib.sha256().hexdigest(), json.dumps({'key': 'value'}), None, None),
+    (None, json.dumps({'key': 'value'}), 'ENCRYPTED_STRING', None),
+    (hashlib.sha256().hexdigest(), None, 'ENCRYPTED_STRING', None),
+    (hashlib.sha256().hexdigest(), json.dumps({'key': 'value'}), 'ENCRYPTED_STRING', None)
+])
+@pytest.mark.asyncio
+async def test_send_and_get_attrib_negative(xhash, raw, enc, error):
+    await pool.set_protocol_version(2)
+    pool_handle, _ = await pool_helper()
+    wallet_handle, _, _ = await wallet_helper()
+    target_did, target_vk = await did.create_and_store_my_did(wallet_handle, '{}')
+    submitter_did, submitter_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+    await nym_helper(pool_handle, wallet_handle, submitter_did, target_did, target_vk)
+    if error:
+        with pytest.raises(error):
+            await attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw, enc)
+        with pytest.raises(error):
+            await get_attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw, enc)
+    else:
+        res1 = await attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw, enc)
+        res2 = await get_attrib_helper(pool_handle, wallet_handle, target_did, target_did, xhash, raw, enc)
+
+        assert res1['op'] == 'REQNACK'
+        assert res2['op'] == 'REQNACK'",,2019-02-20 09:46:27,https://api.github.com/repos/hyperledger/indy-test-automation/pulls/comments/257753997,https://github.com/hyperledger/indy-test-automation/pull/9#discussion_r257753997,ozheregelya
https://github.com/hyperledger/indy-test-automation/pull/6,https://github.com/hyperledger/indy-test-automation/pull/6,It make sense to check if pool can write after upgrade and that transactions which were written before upgrade can be read.,30af5ea5fc8621360e0218ee5c31f173e7961b13,2018-11-29 14:47:49,237515377,"@@ -0,0 +1,72 @@
+from utils import *
+from indy import did
+import pytest
+import hashlib
+import time
+from datetime import datetime, timedelta, timezone
+import json
+import testinfra
+import os
+
+
+@pytest.mark.asyncio
+async def test_pool_upgrade_positive():
+    await pool.set_protocol_version(2)
+    dests = ['Gw6pDLhcBcoQesN72qfotTgFa7cbuqZpkX3Xo6pLhPhv', '8ECVSk179mjsjKRLWiQtssMLgp6EPhWXtaYyStWPSGAb',
+             'DKVxG2fXXTU8yT5N7hGEbXB3dfdAnYv1JczDUHpmDxya', '4PS3EDQ3dW1tci1Bp6543CfuuebjFrg36kLAUcskGfaA',
+             '4SWokCJWJc69Tn74VvLS6t2G2ucvXqM9FDMsWJjmsUxe', 'Cv1Ehj43DDM5ttNBmC6VPpEfwXWwfGktHwjDJsTV5Fz8',
+             'BM8dTooz5uykCbYSAAFwKNkYfT4koomBHsSWHTDtkjhW', '98VysG35LxrutKTNXvhaztPFHnx5u9kHtT7PnUGqDa8x',
+             '6pfbFuX5tx7u3XKz8MNK4BJiHxvEcnGRBs1AQyNaiEQL', 'HaNW78ayPK4b8vTggD4smURBZw7icxJpjZvCMLdUueiN',
+             '2zUsJuF9suBy2iKkcgmm8uoMB6u5Dq2oHoRuchrZbj2N', 'BXV4SXKEJeYQ8XCRHgpw1Xume5ntqALsRhbUYcF85Mse',
+             '71WAtEevzz8aZr8baNJhQCUDLwRhM7LeaErSKNWWKxzn', 'FEUGMFWCSAM725vyH8JZnsitiNUy31NPhugVKb8zDpng',
+             'DPZ8GJ1NyNZGJMU6qQZVuBsumY1aVzvcV4FqQK9Y215x', 'FYDoBrDhfGuSwt39Sgd3DZETihpnXy6SzZBggyD9HMrD',
+             'EMNhsHNsEpuffxCmgC3fpwVj7LgwtSm3riSizCMN6MBo', 'HD1XnVG6jXqGdmFMDTdJk3AoChxaqTfa6zGLkyXTtHwH',
+             'DUGXi5vxRZcrDC8VPZFU6bpiHDMhnWic9tDaoDJv3Bj6', 'D7jphMASPQAD6UFvT2ULjEfYybCJVDzwvfG5ZWJoXa69',
+             '7vcRBffPvKuGQz4F1ThYAo3Ucq3rXgU62enf6d23u8KX', 'DfSoxVHbbdZrAmwTJcRqM2arwUSvK3L6PXjqWHGo58xD',
+             'FTBmYnhxVd8zXZFRzca5WFKh7taW9J573T8pXEWL8Wbb', 'EjZrHfLTBR38d67HasBxpyKRBvrPBJ5RiAMubPWXLxWr',
+             'koKn32jREPYR642DQsFftPoCkTf3XCPcfvc3x9RhRK7'
+             ]
+    init_time = -150
+    version = '1.6.706'
+    name = 'upgrade'+'_'+version+'_'+datetime.now(tz=timezone.utc).strftime('%Y-%m-%dT%H:%M:%S%z')
+    action = 'start'
+    _sha256 = hashlib.sha256().hexdigest()
+    _timeout = 10
+    docker_4_schedule = json.dumps(dict(
+        {dest:
+            datetime.strftime(datetime.now(tz=timezone.utc) + timedelta(minutes=init_time+i*5), '%Y-%m-%dT%H:%M:%S%z')
+         for dest, i in zip(dests[:4], range(len(dests[:4])))}
+    ))
+    aws_25_schedule = json.dumps(dict(
+        {dest:
+            datetime.strftime(datetime.now(tz=timezone.utc) + timedelta(minutes=init_time+i*5), '%Y-%m-%dT%H:%M:%S%z')
+         for dest, i in zip(dests, range(len(dests)))}
+    ))
+    reinstall = False
+    force = True
+    # package = 'indy-node'
+    pool_handle, _ = await pool_helper(path_to_genesis='./aws_genesis')
+    wallet_handle, _, _ = await wallet_helper()
+    trustee_did, trustee_vk = await did.create_and_store_my_did(wallet_handle, json.dumps(
+        {'seed': '000000000000000000000000Trustee1'}))
+
+    req = await ledger.build_pool_upgrade_request(trustee_did, name, version, action, _sha256, _timeout,
+                                                  aws_25_schedule, None, reinstall, force, None)
+    res = json.loads(await ledger.sign_and_submit_request(pool_handle, wallet_handle, trustee_did, req))
+    print(res)
+
+    time.sleep(120)
+
+    docker_4_hosts = [testinfra.get_host('docker://node' + str(i)) for i in range(1, 5)]
+    aws_25_hosts = [testinfra.get_host('ssh://auto_node'+str(i),
+                                       ssh_config='/home/indy/indy-node/pool_automation/auto/.ssh/ssh_config')
+                    for i in range(1, 26)]
+    print(aws_25_hosts)
+    os.chdir('/home/indy/indy-node/pool_automation/auto/.ssh/')
+    outputs = [host.run('dpkg -l | grep indy-node') for host in aws_25_hosts]
+    print(outputs)
+    os.chdir('/home/indy/PycharmProjects/tests')
+    checks = [output.stdout.find(version) for output in outputs]
+    print(checks)
+    for check in checks:
+        assert check is not -1",155,2018-12-07 09:47:19,https://api.github.com/repos/hyperledger/indy-test-automation/pulls/comments/237515377,https://github.com/hyperledger/indy-test-automation/pull/6#discussion_r237515377,ozheregelya
