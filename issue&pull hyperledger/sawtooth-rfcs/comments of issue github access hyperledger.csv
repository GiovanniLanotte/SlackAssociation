url issues,url_api comment,url_html comment,user create comment,body,created_at,updated_at
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/41,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/476234979,https://github.com/hyperledger/sawtooth-rfcs/pull/41#issuecomment-476234979,vaporos,I assume the intent here is to also be removed from the various files in teams/.,2019-03-25 14:59:01,2019-03-25 14:59:01
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/38,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/468806976,https://github.com/hyperledger/sawtooth-rfcs/pull/38#issuecomment-468806976,vaporos,< snarky >Comment about whitespace changes< /snarky >,2019-03-01 20:50:16,2019-03-01 20:50:39
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/38,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/468810543,https://github.com/hyperledger/sawtooth-rfcs/pull/38#issuecomment-468810543,agunde406,@vaporos < snarky >Comment about whitespace changes< /snarky > updated,2019-03-01 21:02:17,2019-03-01 21:02:17
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/37,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/474607225,https://github.com/hyperledger/sawtooth-rfcs/pull/37#issuecomment-474607225,agunde406,"Propose this RFC be merged. Additionally, propose initializing this new component from the current prototype available at https://github.com/bitwiseio/sawtooth-sdk-swift

After approval by the root subteam (for adding the component) and core subteam (for technical review of this RFC and proposed code), this RFC will enter its final comment period. After FCP has ended, a new repository will be created and initialized.

  - [x] Shawn Amundson
  - [x] Tom Barnes
  - [x] Andi Gunderson
~~[ ] Adam Ludvik~~ Removing due to resignation
  - [x] Dan Middleton
  - [x] James Mitchell
  - [x] Kelly Olson
  - [x] Peter Schwarz",2019-03-19 22:20:53,2019-03-28 15:39:21
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/37,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/477652317,https://github.com/hyperledger/sawtooth-rfcs/pull/37#issuecomment-477652317,agunde406,"This RFC has entered the final comment period. If there are no substantive requests for changes by April 4th, 2019 it will be merged.",2019-03-28 15:44:32,2019-03-28 15:44:32
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/34,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/449628777,https://github.com/hyperledger/sawtooth-rfcs/pull/34#issuecomment-449628777,yoni-wolf,"apologize for the mess, started again with only the one initial commit",2018-12-23 11:00:09,2018-12-23 11:00:09
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/34,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/451067969,https://github.com/hyperledger/sawtooth-rfcs/pull/34#issuecomment-451067969,yoni-wolf,"> apologize for the mess, started again with only the one initial commit

@agunde406 can you please restart your review?",2019-01-03 07:01:29,2019-01-03 07:01:29
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/34,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/454672280,https://github.com/hyperledger/sawtooth-rfcs/pull/34#issuecomment-454672280,yoni-wolf,Can we progress with getting this approved?,2019-01-16 06:55:02,2019-01-16 06:55:02
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/34,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/458025007,https://github.com/hyperledger/sawtooth-rfcs/pull/34#issuecomment-458025007,yoni-wolf,Added paging mechanism.,2019-01-28 07:35:41,2019-01-28 07:35:41
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/34,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/460036447,https://github.com/hyperledger/sawtooth-rfcs/pull/34#issuecomment-460036447,yoni-wolf,"@peterschwarz @vaporos @agunde406 @dcmiddle 
Added paging mechanism to address the performance concerns.
[Oron added use case](https://github.com/hyperledger/sawtooth-rfcs/pull/34#discussion_r251311188)  that helps explain why this feature is required.

Can you please review again?
Thanks",2019-02-03 09:29:25,2019-02-03 09:29:25
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/34,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/461438616,https://github.com/hyperledger/sawtooth-rfcs/pull/34#issuecomment-461438616,agunde406,There are still quite a few comments that have not been addressed.,2019-02-07 14:22:33,2019-02-07 14:22:33
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/34,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/466100884,https://github.com/hyperledger/sawtooth-rfcs/pull/34#issuecomment-466100884,duncanjw,"I'm delighted to see this RFC proposed as we hit exactly this problem running a [Sawtooth Workshop](https://s3.eu-west-2.amazonaws.com/btp-website-downloads/Workshops/BTP+Hyperledger+Sawtooth+Application+Developer+Workshop+-+Cyberport+HK.pdf) aimed exclusively at developers in Hong Kong in December.

What was intuitive to the developers when tackling a programming exercise aimed at creating a voting app TP was reading the current set of voters using the voters prefix to determine whether someone registering was in fact already registered when handing a register to vote transaction.

They were baffled when they discovered they couldn't do this.",2019-02-21 17:58:35,2019-02-21 17:59:26
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/34,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/478704908,https://github.com/hyperledger/sawtooth-rfcs/pull/34#issuecomment-478704908,jsmitchell,"> I'm delighted to see this RFC proposed as we hit exactly this problem running a [Sawtooth Workshop](https://s3.eu-west-2.amazonaws.com/btp-website-downloads/Workshops/BTP+Hyperledger+Sawtooth+Application+Developer+Workshop+-+Cyberport+HK.pdf) aimed exclusively at developers in Hong Kong in December.
> 
> What was intuitive to the developers when tackling a programming exercise aimed at creating a voting app TP was reading the current set of voters using the voters prefix to determine whether someone registering was in fact already registered when handing a register to vote transaction.
> 
> They were baffled when they discovered they couldn't do this.

This is an application design issue, and does not require the feature described in this RFC. If the application was designed to store voter registration information at a deterministic location based on information describing the voter, then the existence check becomes an O(1) operation, a direct lookup.",2019-04-01 19:04:20,2019-04-01 19:04:20
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/32,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/443234642,https://github.com/hyperledger/sawtooth-rfcs/pull/32#issuecomment-443234642,dcmiddle,I think this would be a useful addition to the administrative APIs. Main thing to work out are security cosiderations.,2018-11-30 15:16:07,2018-11-30 15:16:07
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/32,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/447813778,https://github.com/hyperledger/sawtooth-rfcs/pull/32#issuecomment-447813778,eugene-babichenko,"Just uploaded an update. Here is what is changed:

- Extended the range of error codes for adding peers.
- Added the description for peers removal.
- Now requests for adding peers are submitted one by one instead of doing that in batches. The rationale behind that is fairly simple. Now this RFC support error codes that are returned after the connection is finished or failed. Because of that we need control over each separate connection and they may fail with different errors.
- Added the description of the permissioning model. This is very basic and I doubt if it should be generalized somehow (added that to the ""Unresloved questions"" section).",2018-12-17 11:30:25,2018-12-17 11:30:25
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/32,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/456274983,https://github.com/hyperledger/sawtooth-rfcs/pull/32#issuecomment-456274983,vaporos,"I like this proposal overall.

I wonder if this truly belongs in the Client* message namespace, or whether we should have an administrative set of messages. This is similar to the question of whether it should be exposed in the REST API, but more fundamentally whether it should be able to be bound to a different port.",2019-01-22 05:23:07,2019-01-22 05:23:07
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/32,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/456792515,https://github.com/hyperledger/sawtooth-rfcs/pull/32#issuecomment-456792515,eugene-babichenko,"I am not sure if we should define a separate namespace here &mdash; this falls beyond the scope of this proposal. I followed the simple logic here: if something does not belong to TPs or consensus engine, this should be in the Client* namespace.

Do you mean by ""to be bound to a different port"" that those messages should be on a different port than `component`?",2019-01-23 12:59:58,2019-01-23 12:59:58
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/32,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/479232628,https://github.com/hyperledger/sawtooth-rfcs/pull/32#issuecomment-479232628,vaporos,"Should the authorization for this feature occur during the connection conversation (see authorization.proto)? I think it may be appropriate to add ADMIN to ""RoleType"" and create an Admin* message namespace in addition to Client*, etc.",2019-04-02 22:25:55,2019-04-02 22:25:55
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/31,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/474610456,https://github.com/hyperledger/sawtooth-rfcs/pull/31#issuecomment-474610456,agunde406,"Propose this RFC be merged. After approval by the core subteam, this RFC will enter its final comment period.

  - [x] Shawn Amundson
  - [x] Andi Gunderson
  - [x] Adam Ludvik
  - [x] Dan Middleton
  - [x] James Mitchell
  - [x] Peter Schwarz",2019-03-19 22:32:28,2019-03-25 18:15:19
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/31,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/476355737,https://github.com/hyperledger/sawtooth-rfcs/pull/31#issuecomment-476355737,agunde406,"This RFC has entered the final comment period. If there are no substantive requests for changes by April 1st, 2019 it will be merged.",2019-03-25 20:03:44,2019-03-25 20:03:44
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/30,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/474610357,https://github.com/hyperledger/sawtooth-rfcs/pull/30#issuecomment-474610357,agunde406,"Propose this RFC be merged. After approval by the core subteam, this RFC will enter its final comment period.

  - [x] Shawn Amundson
  - [x] Andi Gunderson
  - [x] Adam Ludvik
  - [x] Dan Middleton
  - [x] James Mitchell
  - [x] Peter Schwarz",2019-03-19 22:32:04,2019-03-25 18:04:34
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/30,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/476314830,https://github.com/hyperledger/sawtooth-rfcs/pull/30#issuecomment-476314830,dcmiddle,"I previously approved this, but I feel like there was some conversation about using aggregated signatures that either didn't happen or wasn't captured. 
In short, I still agree that as written this would be a useful feature, but I would encourage any developers to consider aggregated signatures in lieu of separate signature fields appended for the n replica votes.",2019-03-25 18:06:20,2019-03-25 18:06:20
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/30,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/476332830,https://github.com/hyperledger/sawtooth-rfcs/pull/30#issuecomment-476332830,ltseeley,"> I previously approved this, but I feel like there was some conversation about using aggregated signatures that either didn't happen or wasn't captured.
> In short, I still agree that as written this would be a useful feature, but I would encourage any developers to consider aggregated signatures in lieu of separate signature fields appended for the n replica votes.

Can you elaborate on what you mean by ""aggregated signatures?"" I don't recall this coming up in previous discussions, but maybe that's because it wasn't captured.",2019-03-25 18:56:03,2019-03-25 18:56:03
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/30,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/476355481,https://github.com/hyperledger/sawtooth-rfcs/pull/30#issuecomment-476355481,agunde406,"This RFC has entered the final comment period. If there are no substantive requests for changes by April 1st, 2019 it will be merged.",2019-03-25 20:03:01,2019-03-25 20:03:01
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/30,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/479204666,https://github.com/hyperledger/sawtooth-rfcs/pull/30#issuecomment-479204666,dcmiddle,"> > I previously approved this, but I feel like there was some conversation about using aggregated signatures that either didn't happen or wasn't captured.
> > In short, I still agree that as written this would be a useful feature, but I would encourage any developers to consider aggregated signatures in lieu of separate signature fields appended for the n replica votes.
> 
> Can you elaborate on what you mean by ""aggregated signatures?"" I don't recall this coming up in previous discussions, but maybe that's because it wasn't captured.

In a nutshell the signatures are added together so you end up carrying a single signature in the final block rather than n signatures. Similarly you verify by adding up the public keys and the aggregated signature will only pass if it is the combination of all the expected signatures. ",2019-04-02 21:12:00,2019-04-02 21:12:00
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/29,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/474609691,https://github.com/hyperledger/sawtooth-rfcs/pull/29#issuecomment-474609691,agunde406,"Propose this RFC be merged. After approval by the core subteam, this RFC will enter its final comment period.

  - [x] Shawn Amundson
  - [x] Andi Gunderson
  - [x] Adam Ludvik
  - [x] Dan Middleton
  - [x] James Mitchell
  - [x] Peter Schwarz",2019-03-19 22:29:40,2019-03-23 00:03:32
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/29,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/475822339,https://github.com/hyperledger/sawtooth-rfcs/pull/29#issuecomment-475822339,agunde406,"This RFC has entered the final comment period. If there are no substantive requests for changes by March 29, 2019 it will be merged.",2019-03-23 00:23:19,2019-03-23 00:23:19
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/25,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/435066779,https://github.com/hyperledger/sawtooth-rfcs/pull/25#issuecomment-435066779,vaporos,"Propose this RFC be merged. After approval by the core subteam, this RFC will enter its final comment period.

- [x] Adam Ludvik @aludvik 
- [x] Andi Gunderson @agunde406 
- [x] Dan Middleton @dcmiddle 
- [x] James Mitchell @jsmitchell 
- [x] Peter Schwarz @peterschwarz 
- [x] Shawn Amundson @vaporos ",2018-11-01 14:56:07,2018-11-01 16:58:38
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/25,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/435141191,https://github.com/hyperledger/sawtooth-rfcs/pull/25#issuecomment-435141191,vaporos,"This RFC has entered the final comment period. If there are no substantive requests for changes by November 8, 2018 it will be merged.",2018-11-01 18:34:28,2018-11-01 18:34:28
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/24,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/419209071,https://github.com/hyperledger/sawtooth-rfcs/pull/24#issuecomment-419209071,vaporos,"Propose this RFC be merged.

After approval by the root team, this RFC will enter its final comment period.

- [X] Shawn Amundson
- [x] Tom Barnes
- [x] Andi Gunderson
- [x] Adam Ludvik
- [x] Dan Middleton
- [x] James Mitchell
- [x] Kelly Olson
- [x] Peter Schwarz",2018-09-06 19:12:07,2018-09-06 20:15:13
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/24,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/419226771,https://github.com/hyperledger/sawtooth-rfcs/pull/24#issuecomment-419226771,vaporos,This RFC has entered FCP and will be merged after Sept 13.,2018-09-06 20:16:36,2018-09-06 20:16:36
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/411248388,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-411248388,vaporos,"Please wrap the text at less than 80 columns and fill out the remaining sections omitting any example text. To pass the DCO check, sign your git commits and re-push. The specific implementation change will need to be described in detail and an explanation of why the change is backward compatible.

I'll add per-line comments after those changes.

A possible implementation approach would be to modify TpRegisterRequest to indicate that the transaction processor desires header bytes.

```
message TpRegisterRequest {
    message TpProcessRequestHeaderStyle {
        STYLE_UNSET,
        EXPANDED,
        RAW
    }

    string family = 1;
    string version = 2;
    repeated string namespaces = 4;
    uint32 max_occupancy = 5;
    TpProcessRequestHeaderStyle process_request_header_style;
}
 ```

With a new field within TpRegisterRequest:

```
message TpProcessRequest {
    TransactionHeader header = 1;  // The transaction header
    bytes payload = 2;  // The transaction payload
    string signature = 3;  // The transaction header_signature
    string context_id = 4; // The context_id for state requests.
    bytes header_raw = 5;
}
```

For EXPANDED, 'header' field would be filled in, for RAW, 'header_raw' would be filled in.

Other topics should be discussed as well, such as why it is not sufficient to do this within the payload itself.

",2018-08-08 00:50:21,2018-08-08 00:50:21
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/428312744,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-428312744,dcmiddle,Thanks for the updates @yoni-wolf. I think you may have a patch ready to go for this. If so could you link to a branch with that change here?,2018-10-09 19:05:36,2018-10-09 19:05:36
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/430511271,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-430511271,yoni-wolf,"attaching, please note this is an implementation i made for our project that only applies for sawtooth c++ sdk, it is not the implementation as requested in this RFC
[serialized_header_cxx.txt](https://github.com/hyperledger/sawtooth-rfcs/files/2486118/serialized_header_cxx.txt)
",2018-10-17 06:54:11,2018-10-17 06:54:11
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/431925943,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-431925943,vaporos,"I am generally supportive of this RFC. We need more scrutiny by the core team with respect to the API changes proposed and backward compatibility concerns.

An observation - we only have a single use case for this, which could probably be solved by separately hashing the contents within the payload:

```
message Payload {
    string contents_sha512 = 1;
    bytes contents = 2;
}
```

Though this particular approach wouldn't cover the header information, that could be included easy enough (without the payload hash, and causing duplication). It would also require application-level support, which is probably its biggest flaw.",2018-10-22 18:28:16,2018-10-22 18:28:16
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/431962341,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-431962341,aludvik,I am good with this.,2018-10-22 20:02:33,2018-10-22 20:02:33
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/440590035,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-440590035,yoni-wolf,"thanks for the review @agunde406 and @aludvik, committed changes based on your comments",2018-11-21 09:11:21,2018-11-21 09:11:21
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/441703955,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-441703955,dcmiddle,"Propose this RFC be merged. After approval by the core subteam, this RFC will enter its final comment period.

- [ ] Adam Ludvik @aludvik
- [x] Andi Gunderson @agunde406
- [x] Dan Middleton @dcmiddle
- [x] James Mitchell @jsmitchell
- [ ] Peter Schwarz @peterschwarz
- [ ] Shawn Amundson @vaporos",2018-11-26 16:29:14,2018-12-17 15:25:51
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/445707463,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-445707463,yoni-wolf,"Thank you @jsmitchell for the review, committed changes based on your comments",2018-12-10 07:00:07,2018-12-10 07:00:07
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/447114525,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-447114525,agunde406,@yoni-wolf your new commit is missing a sign-off,2018-12-13 20:44:57,2018-12-13 20:44:57
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/447882504,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-447882504,dcmiddle,"> Propose this RFC be merged. After approval by the core subteam, this RFC will enter its final comment period.
> 
> * [x]  Adam Ludvik @aludvik
> * [x]  Andi Gunderson @agunde406
> * [x]  Dan Middleton @dcmiddle
> * [x]  James Mitchell @jsmitchell
> * [x]  Peter Schwarz @peterschwarz
> * [x]  Shawn Amundson @vaporos

Re-initiating request for vote following most recent updates. ",2018-12-17 15:21:22,2019-01-02 19:42:18
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/449013810,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-449013810,agunde406,"You are missing sign off on one of your commits. Also, the merge commits should not be included. Instead, you should rebase your branch on master.",2018-12-20 14:18:50,2018-12-20 14:18:50
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/449624452,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-449624452,yoni-wolf,"took me a while to fight with git, removed all the merge commits and added missing sign off",2018-12-23 09:26:55,2018-12-23 09:26:55
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/23,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/450403718,https://github.com/hyperledger/sawtooth-rfcs/pull/23#issuecomment-450403718,dcmiddle,@aludvik just need your check / approval.,2018-12-28 18:16:14,2018-12-28 18:16:14
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/22,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/410857656,https://github.com/hyperledger/sawtooth-rfcs/pull/22#issuecomment-410857656,TomBarnes,"Which JSON-RPC API documentation are we following?  A trivial search identifies these:
https://github.com/ethereum/wiki/wiki/JSON-RPC
https://wiki.parity.io/JSONRPC

I recommend that the RFC identify which  JSON-RPC API documentation the implementation will conform to.",2018-08-06 21:24:20,2018-08-06 21:24:20
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/22,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/410866262,https://github.com/hyperledger/sawtooth-rfcs/pull/22#issuecomment-410866262,knkski,"@TomBarnes: I clarified in the Prior art section which two JSON-RPC API extensions we conform to:

https://github.com/hyperledger/sawtooth-rfcs/pull/22/commits/eeeb62e8065763ed7a61cc63456c76d8620281d2",2018-08-06 21:59:52,2018-08-06 21:59:52
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/22,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/432367309,https://github.com/hyperledger/sawtooth-rfcs/pull/22#issuecomment-432367309,knkski,"Propose this RFC be merged.

After approval by the core team, this RFC will enter its final comment period.

-- Vote moved to below comment due to changes --

",2018-10-23 18:33:05,2018-10-26 16:17:16
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/22,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/433053051,https://github.com/hyperledger/sawtooth-rfcs/pull/22#issuecomment-433053051,dcmiddle,@knkski can you please notify the mail list of the FCP ,2018-10-25 13:34:23,2018-10-25 13:34:23
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/22,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/433462735,https://github.com/hyperledger/sawtooth-rfcs/pull/22#issuecomment-433462735,knkski,"Due to changes to the RFC, calling again for a move to FCP. The change was removing a section about contract chaining. After approval by the core team, this RFC will enter its final comment period.

* [x] Adam Ludvik
* [x] Andi Gunderson
* [x] Dan Middleton
* [x] James Mitchell
* [x] Peter Schwarz
* [x] Shawn Amundson
",2018-10-26 16:16:52,2018-11-02 19:57:55
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/22,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/435361070,https://github.com/hyperledger/sawtooth-rfcs/pull/22#issuecomment-435361070,silasdavis,"LGTM

Had a read over this - I think the intention of the RFC makes sense and the document is clear. I would have some comments on the underlying API being implemented... but I feel that is rather out of scope given this is about broadening compatibility.",2018-11-02 12:21:58,2018-11-02 12:22:13
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/22,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/435491971,https://github.com/hyperledger/sawtooth-rfcs/pull/22#issuecomment-435491971,vaporos,"This RFC has entered the final comment period. If there are no substantive requests for changes by November 9, 2018 it will be merged.",2018-11-02 19:59:33,2018-11-02 19:59:33
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/20,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/418524619,https://github.com/hyperledger/sawtooth-rfcs/pull/20#issuecomment-418524619,hartm,"I have a question about this fork resolution process. Can someone explain why we only need to compare chain lengths (rather than check the total number of ""work"" done on the chain--i.e., incorporate the population estimate)?

Here's my thought process: suppose I controlled a small group of nodes. We could could fork off everything to a side chain and then wait for the ""difficulty"" to go down. In the steady state, due to the population adjustment, we would be adding blocks at the same rate as the main chain. We could let this go on for a while--maybe we would get lucky and accumulate blocks at a slightly (sublinear) rate faster than the main chain. Then, at some point, we could add in a bunch of new members and use these to add much more blocks than expected and try to catch up to the main chain. It's possible there's some mathematical reasoning that says this is impossible, but it's not immediate (and needs to be written up if this is becomes the spec).

Does anyone have an explanation for why this doesn't work? Am I misunderstanding something here? Thanks!",2018-09-04 21:30:18,2018-09-04 21:30:18
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/20,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/418551695,https://github.com/hyperledger/sawtooth-rfcs/pull/20#issuecomment-418551695,cmickeyb,"Working through the logic we developed...

First, every block should contain the raw random number that was generated
in the enclave. NOTE... This is different from PoETv1 where we put the
computed duration in the block. We can put the random number in the block
since all conversion and enforcement of the wait happens in untrusted space
anyway.

Second, just a reminder that there must be a maximum fork length for other
reasons mostly related to how quickly enclaves can be registered. Among
other things, this also prevents ""from the beginning of time"" forks.

Let me just define sum(C, i, j) as the sum of the random numbers in chain C
between blocks i and j.
And lets just call our chains C1 and C2. L1 = length(C1) and L2 =
length(C2). To be clear... these are *VALID* chains which means that the
chain clock through the chain is less than the wall clock. For now use
CC(C1) is chain clock of C1 and WC(C1) is wall clock for C1. For a valid
chain CC(C) < WC(C).

Easy case #1: if L1 == L2, then we prefer the chain with the smaller sum.
For example, if sum(C1,0,L1) < sum(C2,0,L2) then we pick C1.  This is
because the distribution of the random numbers is directly proportional to
the population size, it is sufficient to assume that the chain with the
smaller sum of random numbers was generated by a larger population. You do
not need to worry about population adjustments since the random numbers are
not adjusted for the population. Note... this basic premise kills most of
the the partitioned community attacks.

Now... assume that L1 < L2.

Easy case #2:  if sum(C1, 0, L1) > sum(C2, 0, L1), then again we have an
obvious result (pick C2). That is, up through block L1 (the last in chain
C1), chain C2 has a lower sum of random numbers, then clearly C2 represents
a larger population for a longer time.

Easy case #3: if sum(C1, 0, L1) < sum(C2, 0, L1) and CC(C1) > CC(C2) then
again we have a fairly obvious result (pick C1). The chain clock represents
all of the population adjustments that were made. So C1 over a given time
block, C1 represents the larger population. Again... this should take care
of the rest of the partitioned community attacks.

Hard case: what happens if sum(C1, 0, L1) < sum(C2, 0, L1) and CC(C1) <
CC(C2)? That is, the shorter chain C1 represents (up to block L1, the
length of the shorter chain) a larger population, but C2 covers a larger
time block (i.e. it is more recent). Some things to consider... 1) how far
is the shorter chain's chain clock behind the wall clock? if the shorter
chain's chain clock is close to wall clock (based on expected time of
arrival of the next block), then you should probably pick C1 (the next
block will likely move it back into easy case #3). if the shorter chain's
chain clock is a long way behind the wall clock (or a long way behind
CC(C2), then the shorter chain is likely partitioned (and out of contact or
abandoned). At this point... any reasonable deterministic policy is
probably sufficient.


On Tue, Sep 4, 2018 at 2:30 PM hartm <notifications@github.com> wrote:

> I have a question about this fork resolution process. Can someone explain
> why we only need to compare chain lengths (rather than check the total
> number of ""work"" done on the chain--i.e., incorporate the population
> estimate)?
>
> Here's my thought process: suppose I controlled a small group of nodes. We
> could could fork off everything to a side chain and then wait for the
> ""difficulty"" to go down. In the steady state, due to the population
> adjustment, we would be adding blocks at the same rate as the main chain.
> We could let this go on for a while--maybe we would get lucky and
> accumulate blocks at a slightly (sublinear) rate faster than the main
> chain. Then, at some point, we could add in a bunch of new members and use
> these to add much more blocks than expected and try to catch up to the main
> chain. It's possible there's some mathematical reasoning that says this is
> impossible, but it's not immediate (and needs to be written up if this is
> becomes the spec).
>
> Does anyone have an explanation for why this doesn't work? Am I
> misunderstanding something here? Thanks!
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/hyperledger/sawtooth-rfcs/pull/20#issuecomment-418524619>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAbEUIGbuy7GDBe63yYDN0bjeospqHOqks5uXvDrgaJpZM4VJxU1>
> .
>
",2018-09-04 23:38:35,2018-09-04 23:38:35
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/20,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/419030805,https://github.com/hyperledger/sawtooth-rfcs/pull/20#issuecomment-419030805,hartm,"Thanks for the in-depth explanation Mic.

I guess my point is the following:  since you're storing the randomness of the block winner in the chain, you can compute the population estimate trivially.  Consider the following formula:

W(chain, block_start, block_end) = \sum_{i = block_start}^{block_end} Population_Estimate(block_i).

The function W can be computed (with the current and proposed estimators) solely from the raw random numbers in the enclave, and is probably the most direct measure of ""work"" on a blockchain using PoET that we can possibly manage.

Now consider the following rule for deciding which branch of a fork to take.  Suppose we have two branches:  branch_1 and branch_2, with b_1 and b_2 blocks each, respectively.  Let block number b* be the last block that both have in common.  

We choose branch_1 if:

W(branch_1, b* + 1, b* + b_1) > W(branch_2, b* + 1, b* + b_2) 

and branch_2 otherwise (we can break ties based on equality in some deterministic manner, say based on the randomness of the most recent block).  Note that this functionality exactly agrees with your analysis above and simplifies it considerably, eliminating the need for a case-by-case analysis.

Is there a reason something like this doesn't work?  It seems like a much simpler rule than what you're proposing, and leads us nicely in the direction of provable security (which I care about, obviously).  Thanks!",2018-09-06 09:38:03,2018-09-06 09:38:03
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/19,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/401085990,https://github.com/hyperledger/sawtooth-rfcs/pull/19#issuecomment-401085990,ineffectualproperty,"One more recommended addition for this RFC: can we document how the consensus proof will be stored in the blockchain so that it can be validated by nodes as they are syncing?

See the 'consensus proof' section in this RFC for a PBFT implementation on Ethereum: https://github.com/ethereum/EIPs/issues/650

",2018-06-28 16:01:37,2018-06-28 16:01:37
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/19,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/401129291,https://github.com/hyperledger/sawtooth-rfcs/pull/19#issuecomment-401129291,bridger-herman,Updated text to reflect comments.,2018-06-28 18:26:28,2018-06-28 18:26:28
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/19,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/408436634,https://github.com/hyperledger/sawtooth-rfcs/pull/19#issuecomment-408436634,bridger-herman,"This has been updated once again. The latest version more accurately reflects the prototype algorithm, and adds more information regarding states and state transitions.",2018-07-27 14:32:32,2018-07-27 14:32:32
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/19,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/410344250,https://github.com/hyperledger/sawtooth-rfcs/pull/19#issuecomment-410344250,bridger-herman,Updated again to document how dynamic networking should be handled with PBFT (nodes coming online and syncing),2018-08-03 18:51:09,2018-08-03 18:51:09
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/19,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/422235537,https://github.com/hyperledger/sawtooth-rfcs/pull/19#issuecomment-422235537,vaporos,"Propose this RFC be merged.  Additionally propose initializing this new component from the current prototype available at https://github.com/bitwiseio/sawtooth-pbft.

After approval by the root subteam (for adding the component) and core subteam (for technical review of this RFC and proposed code), this RFC will enter its final comment period. After FCP has ended, a new repository will be created and initialized. Discussion for ongoing development of the new component should occur on RocketChat #sawtooth-consensus-dev.

- [x] Shawn Amundson
- [x] Tom Barnes
- [x] Andi Gunderson
- [x] Adam Ludvik
- [x] Dan Middleton
- [x] James Mitchell
- [x] Kelly Olson
- [x] Peter Schwarz",2018-09-18 02:45:16,2018-09-19 00:25:06
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/19,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/422609546,https://github.com/hyperledger/sawtooth-rfcs/pull/19#issuecomment-422609546,vaporos,"This RFC to has entered the final comment period. If there are no substantive requests for changes by September 25, 2018 it will be merged.",2018-09-19 00:58:42,2018-09-19 00:58:42
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/16,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/412172549,https://github.com/hyperledger/sawtooth-rfcs/pull/16#issuecomment-412172549,delventhalz,"I propose this RFC enter the Final Comment Period. Waiting on approvals from the remainder of the Supply Chain team.

- [x] Zac Delventhal @delventhalz
- [x] Shawn Amundson @vaporos 
- [x] Andi Gunderson @agunde406 
- [x] James Mitchell @jsmitchell 
- [x] Kelly Olson @ineffectualproperty ",2018-08-10 18:48:31,2018-11-14 17:08:43
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/16,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/433044691,https://github.com/hyperledger/sawtooth-rfcs/pull/16#issuecomment-433044691,dcmiddle,@ineffectualproperty looks like waiting on your checkmark ^,2018-10-25 13:12:00,2018-10-25 13:12:00
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/15,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/408175938,https://github.com/hyperledger/sawtooth-rfcs/pull/15#issuecomment-408175938,delventhalz,"I propose this RFC enter the Final Comment Period. Waiting on approvals from the remainder of the Supply Chain team.

- [x] Zac Delventhal @delventhalz
- [x] Shawn Amundson @vaporos 
- [x] Andi Gunderson @agunde406 
- [x] James Mitchell @jsmitchell 
- [x] Kelly Olson @ineffectualproperty ",2018-07-26 17:37:16,2018-07-26 20:24:13
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/15,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/408275585,https://github.com/hyperledger/sawtooth-rfcs/pull/15#issuecomment-408275585,delventhalz,"This proposal to add PropertyTypes to Sawtooth Supply Chain has entered the final comment period. If there are no substantive requests for changes by August 2, 2018 it will be merged.",2018-07-27 00:31:50,2018-07-27 00:31:50
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/14,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/404539813,https://github.com/hyperledger/sawtooth-rfcs/pull/14#issuecomment-404539813,delventhalz,"I propose this RFC enter the Final Comment Period. Waiting on approvals from the remainder of the Supply Chain team.

- [x] Zac Delventhal @delventhalz
- [x] Shawn Amundson @vaporos 
- [x] Andi Gunderson @agunde406 
- [x] James Mitchell @jsmitchell 
- [x] Kelly Olson @ineffectualproperty ",2018-07-12 14:51:51,2018-07-12 18:16:49
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/14,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/404603901,https://github.com/hyperledger/sawtooth-rfcs/pull/14#issuecomment-404603901,delventhalz,"This proposal to remove FishNet and AssetTrack and replace them with a single universal client has entered the final comment period. If there are no substantive changes requested by ~July 26~ **July 19**, it will be merged.

EDIT: Per a correction from @ineffectualproperty, the FCP end date has been moved up one week, as per the governance document:
https://github.com/hyperledger/sawtooth-rfcs/blob/master/text/0006-sawtooth-governance.md#final-comment-period-fcp",2018-07-12 18:18:25,2018-07-12 23:35:24
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/13,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/398537049,https://github.com/hyperledger/sawtooth-rfcs/pull/13#issuecomment-398537049,delventhalz,"I propose this RFC enter the Final Comment Period. Approvals from the Supply Chain team?

- [X] Zac Delventhal @delventhalz
- [x] Shawn Amundson @vaporos 
- [x] Andi Gunderson @agunde406 
- [x] James Mitchell @jsmitchell 
- [x] Kelly Olson @ineffectualproperty 
",2018-06-19 20:37:24,2018-06-28 14:52:40
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/13,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/401093076,https://github.com/hyperledger/sawtooth-rfcs/pull/13#issuecomment-401093076,delventhalz,"This proposal has entered the final comment period, which will end July 12. At that point it will be merged if no significant objections have been raised.",2018-06-28 16:24:17,2018-06-28 16:24:17
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/12,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/391785439,https://github.com/hyperledger/sawtooth-rfcs/pull/12#issuecomment-391785439,aludvik,"Quick general comment, I would be careful with your usage of the word ""valid"". I believe it is good to distinguish between a block's validity status and block's commit status. A block's validity should only depend on deterministic computation, things like signature verification, structure verification, batch validity relative to a state hash, etc. It should not be possible for a block's validity status to change over time. A block's committed status however can and should change over time based on the state of the network and other block's that have been considered.

To be more specific, I would not use ""valid"" in this sentence in the ""Early Arriving blocks"" section: `If the block is invalid i.e. it is an early-arriving block`. I would refer to block's that are dropped immediately because there is something intrinsically wrong with them (like a bad WaitCertificate) as invalid and refer to block's that do not have anything wrong with them but which we are not committing as something else, possibly ""pending"" or just ""valid but not committed"".",2018-05-24 16:53:30,2018-05-24 16:53:30
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/11,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/390245317,https://github.com/hyperledger/sawtooth-rfcs/pull/11#issuecomment-390245317,ineffectualproperty,+1,2018-05-18 15:33:20,2018-05-18 15:33:20
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/11,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/392146489,https://github.com/hyperledger/sawtooth-rfcs/pull/11#issuecomment-392146489,vaporos,"Propose this RFC be merged.

After approval by the root team, this RFC will enter its final comment period.

- [X] Shawn Amundson
- [x] Tom Barnes
- [x] Andi Gunderson
- [x] Adam Ludvik
- [x] Dan Middleton
- [x] James Mitchell
- [x] Kelly Olson
- [x] Peter Schwarz",2018-05-25 18:42:15,2018-05-25 18:45:56
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/11,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/392262461,https://github.com/hyperledger/sawtooth-rfcs/pull/11#issuecomment-392262461,vaporos,"This RFC has entered final comment period, which will end June 8th, at which point this RFC will be merged.",2018-05-26 13:43:35,2018-05-26 13:43:35
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/7,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/383792723,https://github.com/hyperledger/sawtooth-rfcs/pull/7#issuecomment-383792723,vaporos,"Added additional commits which resolve typos, etc.",2018-04-24 03:33:36,2018-04-24 03:33:36
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/7,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/385016119,https://github.com/hyperledger/sawtooth-rfcs/pull/7#issuecomment-385016119,vaporos,Added a commit by @agunde406 which adds a permissioning check to the creation of contract registries.,2018-04-27 16:02:08,2018-04-27 16:02:08
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/7,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/385017010,https://github.com/hyperledger/sawtooth-rfcs/pull/7#issuecomment-385017010,vaporos,Added a commit to address typos found by @agunde406.,2018-04-27 16:05:29,2018-04-27 16:05:29
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/7,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/385417299,https://github.com/hyperledger/sawtooth-rfcs/pull/7#issuecomment-385417299,vaporos,"Add a commit from @RyanLassigBanks to further describe limiting function execution.

Added commits from @agunde406 which address comments from @dcmiddle .",2018-04-30 14:35:59,2018-04-30 14:35:59
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/7,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/385501982,https://github.com/hyperledger/sawtooth-rfcs/pull/7#issuecomment-385501982,vaporos,Added a commit to add more rationale for the versioning system in response to @aludvik 's request.,2018-04-30 19:23:11,2018-04-30 19:23:11
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/7,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/385530627,https://github.com/hyperledger/sawtooth-rfcs/pull/7#issuecomment-385530627,vaporos,Added a commit from @agunde406 but written by @aludvik with wording suggested by @dcmiddle following research by @RyanLassigBanks to clarify the halting problem text.,2018-04-30 21:13:22,2018-04-30 21:24:12
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/7,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/386118697,https://github.com/hyperledger/sawtooth-rfcs/pull/7#issuecomment-386118697,vaporos,"Propose this RFC be merged.

After approval by the root team, this RFC will enter its final comment period.

- [X] Shawn Amundson
- [x] Tom Barnes
- [x] Andi Gunderson
- [x] Adam Ludvik
- [x] Dan Middleton
- [x] James Mitchell
- [x] Kelly Olson
- [x] Peter Schwarz
",2018-05-02 20:57:17,2018-05-04 15:29:09
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/7,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/386122027,https://github.com/hyperledger/sawtooth-rfcs/pull/7#issuecomment-386122027,peterschwarz,"Before merging, you should be sure to add a commit that changes the file name to `0007-...` and add the appropriate links to the document.",2018-05-02 21:09:02,2018-05-02 21:09:02
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/7,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/386478147,https://github.com/hyperledger/sawtooth-rfcs/pull/7#issuecomment-386478147,ineffectualproperty,Approved. As discussed in core-dev and per comments from @dcmiddle and @aludvik it would be good if future documentation could discuss how namespace-to-contract mappings can be made 1:1 and how namespace access and contract code can be made immutable e.g. by setting namespace or contract owner to null values. Only recommended as this is the status quo for smart contract systems like Ethereum.,2018-05-04 00:43:05,2018-05-04 00:43:05
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/7,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/386489755,https://github.com/hyperledger/sawtooth-rfcs/pull/7#issuecomment-386489755,vaporos,"Adding to what @ineffectualproperty suggests, in addition to the documentation on how to accomplish it with this design, we should remain open to changes either as a natural evolution of this design or alternate designs which we could adopt via the RFC process.  It may be good to document some use cases scenarios to use to judge such designs.",2018-05-04 02:16:31,2018-05-04 02:16:31
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/7,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/386651193,https://github.com/hyperledger/sawtooth-rfcs/pull/7#issuecomment-386651193,vaporos,"This RFC has entered final comment period, which will end May 14th (originally stated as May 18th, which was incorrect), at which point this RFC will be merged.",2018-05-04 16:16:30,2018-05-15 01:16:14
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/6,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/375427898,https://github.com/hyperledger/sawtooth-rfcs/pull/6#issuecomment-375427898,aludvik,"Initial Root Team membership will consist of (sorted by last name):
- [x] Shawn Amundson
- [x] Andi Gunderson
- [x] Adam Ludvik
- [x] Dan Middleton
- [x] James Mitchell
- [x] Peter Schwarz
",2018-03-22 19:22:59,2018-05-16 19:05:18
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/6,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/375439842,https://github.com/hyperledger/sawtooth-rfcs/pull/6#issuecomment-375439842,aludvik,"This RFC has already undergone substantial internal discussion and is entering the Final Comment Period immediately. Members of the initial root team, please indicate your approval by adding a reaction to this comment.",2018-03-22 20:05:33,2018-03-22 20:05:33
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/6,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/375440204,https://github.com/hyperledger/sawtooth-rfcs/pull/6#issuecomment-375440204,vaporos,I approve for FCP.,2018-03-22 20:06:54,2018-03-22 20:06:54
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/6,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/375489354,https://github.com/hyperledger/sawtooth-rfcs/pull/6#issuecomment-375489354,TomBarnes,"Where does the core subteam membership get documented?

",2018-03-22 23:20:46,2018-03-22 23:20:46
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/6,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/375490074,https://github.com/hyperledger/sawtooth-rfcs/pull/6#issuecomment-375490074,ineffectualproperty,I'd like to see a broader set on the 'Initial Root Team' beyond code contributors. I have been actively involved in the project since it's inception so would like to have a voice w.r.t. RFCs. I know @TomBarnes has been instrumental in compliance activities and Mic Bowman from the research perspective.,2018-03-22 23:24:50,2018-03-22 23:24:50
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/6,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/375675887,https://github.com/hyperledger/sawtooth-rfcs/pull/6#issuecomment-375675887,aludvik,@TomBarnes @grkvlt The actual set of subteams and their membership rosters will be decided by the root team once it has formed.,2018-03-23 14:06:21,2018-03-23 14:06:21
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/6,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/379359807,https://github.com/hyperledger/sawtooth-rfcs/pull/6#issuecomment-379359807,ineffectualproperty,+1,2018-04-06 19:54:14,2018-04-06 19:54:14
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/6,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/379364737,https://github.com/hyperledger/sawtooth-rfcs/pull/6#issuecomment-379364737,aludvik,"After some further discussion, a few revisions have been made and the new proposed root team is as follows. This RFC will enter the Final Comment Period once all the proposed root team members below give explicit approval in this PR. Following approval from all members, this PR will be merged after 5 business days.

- [x] Shawn Amundson
- [x] Tom Barnes
- [x] Andi Gunderson
- [x] Adam Ludvik
- [x] Dan Middleton
- [x] James Mitchell
- [x] Kelly Olson
- [x] Peter Schwarz
",2018-04-06 20:14:18,2018-04-09 16:38:47
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/6,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/379820953,https://github.com/hyperledger/sawtooth-rfcs/pull/6#issuecomment-379820953,aludvik,This PR has entered the Final Comment Period and will be merged end-of-day Friday.,2018-04-09 16:56:23,2018-04-09 16:56:23
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/4,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/374994433,https://github.com/hyperledger/sawtooth-rfcs/pull/4#issuecomment-374994433,aludvik,Pushed some commits to address @dcmiddle comments,2018-03-21 16:02:05,2018-03-21 16:02:05
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/4,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/422232556,https://github.com/hyperledger/sawtooth-rfcs/pull/4#issuecomment-422232556,vaporos,This RFC should be updated to match the implementation prior to FCP.,2018-09-18 02:26:49,2018-09-18 02:26:49
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/4,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/426695204,https://github.com/hyperledger/sawtooth-rfcs/pull/4#issuecomment-426695204,aludvik,@danintel @kirkwood addressed your comments.,2018-10-03 16:06:01,2018-10-03 16:06:01
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/4,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/430617188,https://github.com/hyperledger/sawtooth-rfcs/pull/4#issuecomment-430617188,dcmiddle,I move that this RFC enter Final Comment Period with a disposition to `merge`.,2018-10-17 12:56:59,2018-10-17 12:56:59
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/4,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/433046253,https://github.com/hyperledger/sawtooth-rfcs/pull/4#issuecomment-433046253,dcmiddle,"Checkboxes for core team:
- [x] Adam Ludvik @aludvik 
- [x] Andi Gunderson @agunde406 
- [x] Dan Middleton @dcmiddle 
- [x] James Mitchell @jsmitchell 
- [x] Peter Schwarz @peterschwarz 
- [x] Shawn Amundson @vaporos 
",2018-10-25 13:16:08,2018-10-26 16:53:02
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/370595641,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-370595641,vaporos,Updated typo in commit message.,2018-03-05 22:48:10,2018-03-05 22:48:10
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/370598116,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-370598116,ryjones,This should probably be a squash commit. I assert the intermediate revisions of these files don't matter.,2018-03-05 22:58:12,2018-03-05 22:58:28
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/370598728,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-370598728,vaporos,The commits make it clear what initially came from the Rust RFCs repository versus what modifications we made in this repository.,2018-03-05 23:00:38,2018-03-05 23:00:38
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/370815434,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-370815434,vaporos,"Pushed fixes to make 0000-template.md more Sawtooth appropriate.  Also wrapped lines at <80 characters in 0000-template.md.

Intentionally not squashing commits as we would do in other repos, in the spirit of the RFC process as described, which forbids squashing on RFC PRs.",2018-03-06 15:19:01,2018-03-06 15:19:01
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/370851318,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-370851318,vaporos,"More Rust RFCs->Sawtooth RFCs text updates.

Wishing I could hide the iteration with squash commits, but resisting.",2018-03-06 16:59:29,2018-03-06 16:59:29
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/370853037,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-370853037,delventhalz,"Looks like all of my comments were on lines that got changed in later commits. For clarity, I will re-add the ones that haven't been addressed.",2018-03-06 17:04:17,2018-03-06 17:04:17
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/370853768,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-370853768,vaporos,"We will be proposing a sub-team/maintainer model as an RFC using this process as part the bootstrap of the process, so all the sub-team stuff is important. This roughly breaks down across repo lines (so supply chain sub-team will differ from the core sub-team, etc.).",2018-03-06 17:06:25,2018-03-06 17:06:25
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/370855293,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-370855293,delventhalz,@vaporos Should we add a subteam for each repo then on line 72 of the Readme?,2018-03-06 17:11:11,2018-03-06 17:11:11
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/370858904,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-370858904,vaporos,Changes to address feedback from @delventhalz added.,2018-03-06 17:21:54,2018-03-06 17:21:54
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/370859892,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-370859892,vaporos,"@delventhalz We will fill in specific rules for core in a subsequent, more focused PR; we include the link here as an example and because we know we have special rules to write up (around API changes, etc.).  We can leave additional sub-team rules (if they exist for that sub-team) to those sub-teams once they have been defined.",2018-03-06 17:24:55,2018-03-06 17:24:55
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/370921343,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-370921343,vaporos,Changed 'feature' to 'change' or 'major change' per Anne's comment.,2018-03-06 20:43:20,2018-03-06 20:43:20
https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/3,https://api.github.com/repos/hyperledger/sawtooth-rfcs/issues/comments/371320894,https://github.com/hyperledger/sawtooth-rfcs/pull/3#issuecomment-371320894,vaporos,Added a commit which adds the security-related items suggested by @TomBarnes .,2018-03-07 23:19:34,2018-03-07 23:19:34
