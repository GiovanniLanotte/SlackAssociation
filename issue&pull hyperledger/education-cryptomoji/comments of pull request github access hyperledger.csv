pull request url html,pull request url,body,commit_id,create at,id,diff_hunk,position,update at,url,html url,user
https://github.com/hyperledger/education-cryptomoji/pull/114,https://github.com/hyperledger/education-cryptomoji/pull/114,Need a blank line at EOF.,d2cfacb85e6f5859a8cb6863602a10d63182ba99,2018-08-28 05:38:01,213188845,"@@ -0,0 +1,3 @@
+{
+  ""presets"": [""env"", ""react""]
+}",,2018-08-28 05:48:55,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/213188845,https://github.com/hyperledger/education-cryptomoji/pull/114#discussion_r213188845,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/114,https://github.com/hyperledger/education-cryptomoji/pull/114,"Wouldn't increasing this number reduce the number of browsers you are supporting, and therefore reduce the amount of transpiling your are doing? Async/await only worked when you reduced how much you transpiled?",d2cfacb85e6f5859a8cb6863602a10d63182ba99,2018-08-28 05:44:00,213189769,"@@ -1,3 +1,17 @@
 {
-  ""presets"": [""env"", ""react""]
-}
\ No newline at end of file
+  ""presets"": [
+    [
+      ""env"",
+      {
+        ""targets"": {
+          ""browsers"": [
+            ""> 5%"",",8,2018-08-28 05:48:55,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/213189769,https://github.com/hyperledger/education-cryptomoji/pull/114#discussion_r213189769,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/114,https://github.com/hyperledger/education-cryptomoji/pull/114,Probably a simpler way of handling this would have been to use a nested `then` chained off of this getSires rather than the wrapping `then` with this `catch` hack. Async/await works too though.,d2cfacb85e6f5859a8cb6863602a10d63182ba99,2018-08-28 05:48:07,213190329,"@@ -9,47 +9,18 @@ export class MojiListItem extends React.Component {
   constructor(props) {
     super(props);
     this.state = {
-      isLoaded: false,
       isSire: false,
       mojiView: null
     };
   }
 
-  componentDidMount() {
-    Promise.resolve(this.props.address)
-      .then(address => {
-        // if it's an address, then get the details
-        if (!!address) {
-          return getMoji(this.props.address);
-        }
-        // otherwise, the details were already passed in
-        return this.props.moji;
-      })
-      .then(moji => {
-        this.setState({
-          mojiView: parseDna(moji.dna).view
-        });
+  async componentDidMount() {
+    let moji = this.props.moji || await getMoji(this.props.address);
+    this.setState({ mojiView: parseDna(moji.dna).view });
 
-        if (moji.isSire) {
-          this.setState({ isSire: true, isLoaded: true });
-          // if we know moji is a sire, break out of the promise chain
-          return Promise.reject('This moji is a sire');
-        } else {
-          return getSires(moji.owner);",33,2018-08-28 05:48:55,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/213190329,https://github.com/hyperledger/education-cryptomoji/pull/114#discussion_r213190329,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/114,https://github.com/hyperledger/education-cryptomoji/pull/114,"Yes, it will reduce the number of browsers that are being supported and reduce the amount of transpiling that's happening. Yes, I could only get `async/await` to work when I reduced how much I transpiled bc I ran into an error in the browser otherwise. My initial research led me to the solution in this PR, but now that I'm thinking more about this courtesy of your PR review, I'm now wondering: ""does `async/await` transpilation support require an extra plugin?""

which (a) would be kinda dumb imo bc isn't that what `babel-preset-env` is supposed to handle? and (b) would be a better solution such that we can support more browsers!

I will create a new issue and see how I can tackle this in a future PR.",d2cfacb85e6f5859a8cb6863602a10d63182ba99,2018-08-29 02:02:21,213524704,"@@ -1,3 +1,17 @@
 {
-  ""presets"": [""env"", ""react""]
-}
\ No newline at end of file
+  ""presets"": [
+    [
+      ""env"",
+      {
+        ""targets"": {
+          ""browsers"": [
+            ""> 5%"",",8,2018-08-29 02:02:22,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/213524704,https://github.com/hyperledger/education-cryptomoji/pull/114#discussion_r213524704,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/114,https://github.com/hyperledger/education-cryptomoji/pull/114,"Good to know! I was super unsure about how to handle it.. I did think of the nested Promises idea, but I fell too deeply into the mindset of ""Promises are designed to prevent the pyramid of doom"" and tried to look for any other solution. Looking back, I'd def say that nested Promises are significantly easier to understand than this wonky ""reject out of the promise chain early"" business.

It makes me wonder though, is there anything in other Promise implementations (eg, Bluebird) that allows for the termination of ""the rest of the Promise chain""? 🤔",d2cfacb85e6f5859a8cb6863602a10d63182ba99,2018-08-29 02:05:19,213525061,"@@ -9,47 +9,18 @@ export class MojiListItem extends React.Component {
   constructor(props) {
     super(props);
     this.state = {
-      isLoaded: false,
       isSire: false,
       mojiView: null
     };
   }
 
-  componentDidMount() {
-    Promise.resolve(this.props.address)
-      .then(address => {
-        // if it's an address, then get the details
-        if (!!address) {
-          return getMoji(this.props.address);
-        }
-        // otherwise, the details were already passed in
-        return this.props.moji;
-      })
-      .then(moji => {
-        this.setState({
-          mojiView: parseDna(moji.dna).view
-        });
+  async componentDidMount() {
+    let moji = this.props.moji || await getMoji(this.props.address);
+    this.setState({ mojiView: parseDna(moji.dna).view });
 
-        if (moji.isSire) {
-          this.setState({ isSire: true, isLoaded: true });
-          // if we know moji is a sire, break out of the promise chain
-          return Promise.reject('This moji is a sire');
-        } else {
-          return getSires(moji.owner);",33,2018-08-29 02:05:19,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/213525061,https://github.com/hyperledger/education-cryptomoji/pull/114#discussion_r213525061,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/114,https://github.com/hyperledger/education-cryptomoji/pull/114,Tracking this at https://github.com/hyperledger/education-cryptomoji/issues/118 now,d2cfacb85e6f5859a8cb6863602a10d63182ba99,2018-08-29 02:16:16,213526374,"@@ -1,3 +1,17 @@
 {
-  ""presets"": [""env"", ""react""]
-}
\ No newline at end of file
+  ""presets"": [
+    [
+      ""env"",
+      {
+        ""targets"": {
+          ""browsers"": [
+            ""> 5%"",",8,2018-08-29 02:16:16,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/213526374,https://github.com/hyperledger/education-cryptomoji/pull/114#discussion_r213526374,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/114,https://github.com/hyperledger/education-cryptomoji/pull/114,"I haven't heard of such a thing, but I wouldn't rule it out. I don't know Bluebird very well at all now that Promises are standard. Another use case I run into sometimes is ""run this after the rest of the promise chain"". Mithril.js does this with its redraw method. There is a built in HTTP library which returns a Promise. So you might call:
```javascript
m.route.get('/some/route')
  .then(storeSomeData)
  .then(updateSomeValues)
  .catch(alertUser);
```
You never call `m.redraw`, but at the conclusion of that Promise chain Mithril automatically calls it, because they built this custom recursive structure that runs a callback after your last `then`. It's super clever, and feels broadly useful.",d2cfacb85e6f5859a8cb6863602a10d63182ba99,2018-08-29 06:08:21,213554424,"@@ -9,47 +9,18 @@ export class MojiListItem extends React.Component {
   constructor(props) {
     super(props);
     this.state = {
-      isLoaded: false,
       isSire: false,
       mojiView: null
     };
   }
 
-  componentDidMount() {
-    Promise.resolve(this.props.address)
-      .then(address => {
-        // if it's an address, then get the details
-        if (!!address) {
-          return getMoji(this.props.address);
-        }
-        // otherwise, the details were already passed in
-        return this.props.moji;
-      })
-      .then(moji => {
-        this.setState({
-          mojiView: parseDna(moji.dna).view
-        });
+  async componentDidMount() {
+    let moji = this.props.moji || await getMoji(this.props.address);
+    this.setState({ mojiView: parseDna(moji.dna).view });
 
-        if (moji.isSire) {
-          this.setState({ isSire: true, isLoaded: true });
-          // if we know moji is a sire, break out of the promise chain
-          return Promise.reject('This moji is a sire');
-        } else {
-          return getSires(moji.owner);",33,2018-08-29 06:09:00,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/213554424,https://github.com/hyperledger/education-cryptomoji/pull/114#discussion_r213554424,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/106,https://github.com/hyperledger/education-cryptomoji/pull/106,Is `mp4` the same as `m4v`? (also mentioned in the `part-one` README),07b09395a364eb8b381bf76182b14205ff6a10a6,2018-07-25 23:16:15,205289939,"@@ -168,14 +168,25 @@ working with Javascript, start with these documents:
 
 ### App Development Lecture
 
-Start with this lecture covering application development on the Sawtooth
-platform. Videos of the lecture will be available soon, but the slides are
-available now in a variety of formats:
+In addition to reviewing the official Sawtooth documentation, watch the
+Cryptomoji video lecture, which covers all the basics of Sawtooth application
+development in detail. It is broken into five parts, the first of which is a
+overview of blockchains generally, which you may have already watched in part
+one. Each part is available as an MP4 file:",11,2018-07-26 12:29:53,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/205289939,https://github.com/hyperledger/education-cryptomoji/pull/106#discussion_r205289939,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/106,https://github.com/hyperledger/education-cryptomoji/pull/106,"M4V files are MP4s with a little extension for optionally adding DRM. VLC output the files in that format for whatever reason. I am going to change the extension, which should make some players happy, and should work fine since there isn't actually any DRM.",07b09395a364eb8b381bf76182b14205ff6a10a6,2018-07-26 12:20:06,205434071,"@@ -168,14 +168,25 @@ working with Javascript, start with these documents:
 
 ### App Development Lecture
 
-Start with this lecture covering application development on the Sawtooth
-platform. Videos of the lecture will be available soon, but the slides are
-available now in a variety of formats:
+In addition to reviewing the official Sawtooth documentation, watch the
+Cryptomoji video lecture, which covers all the basics of Sawtooth application
+development in detail. It is broken into five parts, the first of which is a
+overview of blockchains generally, which you may have already watched in part
+one. Each part is available as an MP4 file:",11,2018-07-26 12:29:53,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/205434071,https://github.com/hyperledger/education-cryptomoji/pull/106#discussion_r205434071,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/103,https://github.com/hyperledger/education-cryptomoji/pull/103,"Not sure if we should include these comments. In theory it should be tested, and if someone can't figure out to switch it to origin when they need to test it, they probably shouldn't be running this script.",e89575f9db5d798203b07b386cd3fdd54ba11b2c,2018-07-07 02:12:01,200799817,"@@ -19,28 +19,42 @@ ROOT_DIR=""$( cd ""$( dirname ""${BASH_SOURCE[0]}"" )"" && pwd )/../""
 CURR_BRANCH=""$( git rev-parse --abbrev-ref HEAD )""
 
 # Pull new staging code
+# when testing, use `git checkout origin/staging`",4,2018-07-07 02:13:47,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/200799817,https://github.com/hyperledger/education-cryptomoji/pull/103#discussion_r200799817,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/99,https://github.com/hyperledger/education-cryptomoji/pull/99,I need to fix `class` to be `className`.,ec29a9f4baf3d98c3fe464a85f1cc13dc385691d,2018-06-28 01:56:48,198689379,"@@ -110,13 +112,22 @@ export class Moji extends React.Component {
           onClick={this.selectSire}
         >Select as Sire</button>
       );
+    } else if (isSire && this.props.publicKey) {
+      // if we're looking at a sire AND we're logged in
+      actionButton = (
+        <BreedDropdownMenu
+          privateKey={this.props.privateKey}
+          publicKey={this.props.publicKey}
+          sire={moji}
+        />
+      );
     }
 
     return (
       <div>
         {actionButton}
-        <h2>{mojiView}</h2>
-        <table>
+        <h2>{mojiView} {' '} {sireIndicator}</h2>
+        <table class=""table"">",,2018-08-15 17:58:26,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/198689379,https://github.com/hyperledger/education-cryptomoji/pull/99#discussion_r198689379,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/99,https://github.com/hyperledger/education-cryptomoji/pull/99,"hm, I can probably simplify the `this.setState` so it doesn't use `prevState`",ec29a9f4baf3d98c3fe464a85f1cc13dc385691d,2018-06-28 01:57:47,198689501,"@@ -78,7 +76,6 @@ export class Moji extends React.Component {
     })
       .then(() => this.setState(prevState => ({",,2018-08-15 17:58:26,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/198689501,https://github.com/hyperledger/education-cryptomoji/pull/99#discussion_r198689501,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,I prefer to give readers a location word to help them find this tab on the page. ,a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-19 14:41:52,196453354,"@@ -7,74 +7,74 @@ to help speed and unify development.
 
 This project uses GitHub issues to track bugs, enhancements, and other tasks.
 
-To create a new Issue:
+To create a new issue:
 
 1. Click on the
 [Issues tab](https://github.com/hyperledger/education-cryptobunnies/issues)
-underneath the name of this repo above.
+underneath the name of this repo.",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196453354,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196453354,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"I don't feel like ""short phrase"" has the same meaning as ""concise label""",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-19 14:44:38,196454463,"@@ -7,74 +7,74 @@ to help speed and unify development.
 
 This project uses GitHub issues to track bugs, enhancements, and other tasks.
 
-To create a new Issue:
+To create a new issue:
 
 1. Click on the
 [Issues tab](https://github.com/hyperledger/education-cryptobunnies/issues)
-underneath the name of this repo above.
+underneath the name of this repo.
 2. Click on the
 [New Issue button](https://github.com/hyperledger/education-cryptobunnies/issues/new)
 on the right side of the page.
 3. Enter a title and description for the issue.
 4. If applicable, select a label on the right side (such as ""bug"").
 5. Click _""Submit new issue""_.
 
-The title should be a concise label identifying the bug or feature, while the
-_""Leave a comment""_ section below should contain a description with as much
-detail as possible. For bugs or typos this might include:
+The title should be a short phrase that identifies the bug or feature. The",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196454463,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196454463,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"Suggest:
""it is somewhat unusual"" -> ""somewhat unusual is""

""it is"" implies to me that the reader already knows master is not the main branch, but this is where we are introducing that information.",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-19 14:52:42,196457906,"@@ -7,74 +7,74 @@ to help speed and unify development.
 
 This project uses GitHub issues to track bugs, enhancements, and other tasks.
 
-To create a new Issue:
+To create a new issue:
 
 1. Click on the
 [Issues tab](https://github.com/hyperledger/education-cryptobunnies/issues)
-underneath the name of this repo above.
+underneath the name of this repo.
 2. Click on the
 [New Issue button](https://github.com/hyperledger/education-cryptobunnies/issues/new)
 on the right side of the page.
 3. Enter a title and description for the issue.
 4. If applicable, select a label on the right side (such as ""bug"").
 5. Click _""Submit new issue""_.
 
-The title should be a concise label identifying the bug or feature, while the
-_""Leave a comment""_ section below should contain a description with as much
-detail as possible. For bugs or typos this might include:
+The title should be a short phrase that identifies the bug or feature. The
+_""Leave a comment""_ section should contain a description with as much
+detail as possible. For bugs or typos, this description might include:
 
-- The specific behavior, and what behavior you expected
-- What steps someone else could take to reproduce the bug
+- Specific behavior for the bug and what behavior you expected
+- Steps someone else could take to reproduce the bug
 - Any console logs or other diagnostic information
-- Filenames and line numbers if possible (especially for typos)
+- Filenames and line numbers, if possible (especially for typos)
 
 ## Making Code Contributions
 
 Like many projects on GitHub, contributions should be submitted by creating a
-fork of the repo, making some changes there, and then submitting them back as a
+fork of the repo, making some changes there, and then submitting them as a
 Pull Request for review. You will find a detailed explanation of this workflow
-below. While we are open to any help you'd like to give, if you are looking for
-a good place to start, you might checkout the _Issues_ page and see if there is
+below. We are open to any help you'd like to give, but if you are looking for
+a good place to start, you might check out the _Issues_ page to see if there is
 anything labeled ""help wanted"" that you could tackle.
 
 ### Submitting Pull Requests
 
-While the fork to PR process is common, somewhat more unusual is that `master`
+While the fork-to-PR process is common, it is somewhat unusual that `master`",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196457906,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196457906,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,The _complete_ PR process?,a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-19 14:53:09,196458062,"@@ -7,74 +7,74 @@ to help speed and unify development.
 
 This project uses GitHub issues to track bugs, enhancements, and other tasks.
 
-To create a new Issue:
+To create a new issue:
 
 1. Click on the
 [Issues tab](https://github.com/hyperledger/education-cryptobunnies/issues)
-underneath the name of this repo above.
+underneath the name of this repo.
 2. Click on the
 [New Issue button](https://github.com/hyperledger/education-cryptobunnies/issues/new)
 on the right side of the page.
 3. Enter a title and description for the issue.
 4. If applicable, select a label on the right side (such as ""bug"").
 5. Click _""Submit new issue""_.
 
-The title should be a concise label identifying the bug or feature, while the
-_""Leave a comment""_ section below should contain a description with as much
-detail as possible. For bugs or typos this might include:
+The title should be a short phrase that identifies the bug or feature. The
+_""Leave a comment""_ section should contain a description with as much
+detail as possible. For bugs or typos, this description might include:
 
-- The specific behavior, and what behavior you expected
-- What steps someone else could take to reproduce the bug
+- Specific behavior for the bug and what behavior you expected
+- Steps someone else could take to reproduce the bug
 - Any console logs or other diagnostic information
-- Filenames and line numbers if possible (especially for typos)
+- Filenames and line numbers, if possible (especially for typos)
 
 ## Making Code Contributions
 
 Like many projects on GitHub, contributions should be submitted by creating a
-fork of the repo, making some changes there, and then submitting them back as a
+fork of the repo, making some changes there, and then submitting them as a
 Pull Request for review. You will find a detailed explanation of this workflow
-below. While we are open to any help you'd like to give, if you are looking for
-a good place to start, you might checkout the _Issues_ page and see if there is
+below. We are open to any help you'd like to give, but if you are looking for
+a good place to start, you might check out the _Issues_ page to see if there is
 anything labeled ""help wanted"" that you could tackle.
 
 ### Submitting Pull Requests
 
-While the fork to PR process is common, somewhat more unusual is that `master`
+While the fork-to-PR process is common, it is somewhat unusual that `master`
 is _not_ the branch you should make a PR against. In this repo, master is not
 the source of truth, but a collection of generated stub functions for students
 to fill out. The original source of this code is actually in the `staging`
-branch, and you should submit _all_ PRs against this branch.
+branch, so you should submit _all_ PRs against this branch.
 
-The detailed process is as follows:
+The PR process is as follows:",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196458062,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196458062,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"""This directory"" -> ""Part two""",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-19 15:34:59,196475422,"@@ -60,15 +60,15 @@ instructions specific to your OS to setup whatever tools you need to run
 Docker is a virtualization tool that makes it easy to deploy code in a variety
 of environments. Dockerfiles create ""images"" with all the dependencies your
 code needs installed. From these images, you can create, run, and destroy
-individual ""containers"" at will. This is in effect like having every component
-running on it's own virtual computer which you can reset to factory settings at
-any time. It's a profoundly useful tool which takes a little getting used to,
+individual ""containers"" at will. This is, in effect, like having every component
+running on its own virtual computer which you can reset to factory settings at
+any time. It's a profoundly useful tool that takes a little getting used to,
 but is worth getting familiar with.
 
 ### Components
 
-Included in this directory is a [docker-compose](docker-compose.yaml) file. It
-includes the instructions Docker needs to start up multiple components and
+This directory includes a [docker-compose](docker-compose.yaml) file. It",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196475422,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196475422,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"I would drop this change. It's overly wordy for a quick reference table, and the term transaction processor is defined elsewhere).",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-19 15:39:22,196477107,"@@ -77,28 +77,28 @@ source code and some prepackaged Sawtooth components downloaded from
 | ------------- | --------------------- | --------- | ------------------------
 | validator     | tcp://localhost:4004  | DockerHub | Validates blocks and transactions
 | rest-api      | http://localhost:8008 | DockerHub | Provides blockchain via HTTP/JSON
-| processor     | --                    | custom    | The core smart contract logic for your app
-| client        | http://localhost:3000 | custom    | Your front-end, served from `client/public/`
+| processor     | --                    | custom    | Your transaction processor (the core smart contract logic for your app)",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196477107,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196477107,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"Using everything feels redundant here. If ""Once running"" is too vague, perhaps we can just vary up the word choice or something. Perhaps ""Once all the components are running"".",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-19 15:43:25,196478705,"@@ -77,28 +77,28 @@ source code and some prepackaged Sawtooth components downloaded from
 | ------------- | --------------------- | --------- | ------------------------
 | validator     | tcp://localhost:4004  | DockerHub | Validates blocks and transactions
 | rest-api      | http://localhost:8008 | DockerHub | Provides blockchain via HTTP/JSON
-| processor     | --                    | custom    | The core smart contract logic for your app
-| client        | http://localhost:3000 | custom    | Your front-end, served from `client/public/`
+| processor     | --                    | custom    | Your transaction processor (the core smart contract logic for your app)
+| client        | http://localhost:3000 | custom    | Your front end, served from `client/public/`
 | shell         | --                    | DockerHub | Environment for running Sawtooth commands
 | settings-tp   | --                    | DockerHub | Built-in Sawtooth transaction processor
 
 ### Start/Stop Commands
 
-First you will use the `docker-compose up` command to start all components.
+First, you will use the `docker-compose up` command to start all components.
 Note that this might take as long as 30 minutes the first time you run it
-(later runs will be much faster, more like 30 seconds). If you are in the same
-directory as the `docker-compose.yaml` file, the `up` command will find it by
-default and you won't need to provide any other parameters:
+(later runs will be much faster; more like 30 seconds). If you are in the same
+directory as the `docker-compose.yaml` file, the `up` command will find the file
+by default, so you won't need to provide any other parameters:
 
 ```bash
 cd code/part-two/
 docker-compose up
 ```
 
-This builds and starts up _everything_ defined in your compose file. Once
-running, you can then stop it all with the keyboard shortcut: `ctrl-C`. If you
-want to stop _and_ destroy every container (they will be rebuilt on your next
-`up`) use the command:
+This builds and starts _everything_ defined in your compose file. Once
+everything is running, you can then stop it all with the keyboard shortcut",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196478705,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196478705,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"""for building them"" loses the context of what is usually a strictly ordered set of tests. I think it is important to communicate specifically that there are no order requirements between the client and processor.",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-19 15:47:33,196480237,"@@ -166,43 +166,43 @@ working with Javascript, start with these documents:
 - Architecture
     * [Global State](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/global_state.html)
     * [Transactions and Batches](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/transactions_and_batches.html)
-    * [The REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
+    * [REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
 - The Javascript SDK
     * [Building and Submitting Transactions](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_submit_tutorial_js.html)
     * [Transaction Processor Tutorial](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_TP_tutorial_js.html)
 
 ## The Project
 
-When building an application on Sawtooth, much of the nitty gritty of running
+When building an application on Sawtooth, much of the nitty-gritty of running
 and validating a blockchain is handled for you. You won't have to verify
-signatures or hashes, or validate blocks, or confirm consensus. Instead, you
+signatures and hashes, validate blocks, or confirm consensus. Instead, you
 must consider how you can break up the functionality of your application into
 discrete transaction payloads, and how these payloads will alter state data.
 The typical Sawtooth workflow looks something like this:
 
-1. The user initializes some action (i.e. _""set 'a' to 1""_)
+1. The user initializes some value (i.e., _""set 'a' to 1""_)
 2. The _client_ takes that action and:
     - encodes it in a payload (maybe simply `{""a"": 1}`)
     - wraps that payload in a signed transaction and batch
     - submits it to the validator
 3. The validator confirms the transaction and batch are valid
 4. The _transaction processor_ receives the payload and:
     - decodes it
-    - verifies it is a valid action (i.e. 'a' _can_ be set to 1)
+    - verifies it is a valid action (i.e., 'a' _can_ be set to 1)
     - modifies state in a way that satisfies the action
       (perhaps address _...000000a_ becomes `1`)
 5. Later, the client might read that state, and decode it for display
 
-So all you are responsible for building two components (the client and the
-transaction processor), and for keeping those components in agreement on how to
+So, you are responsible only for building two components (the client and the
+transaction processor) and for keeping those components in agreement on how to
 encode payloads and state. This application-wide logic is typically referred to
-in Sawtooth with the general term: ""transaction family"".
+in Sawtooth with the term ""transaction family"".
 
 For Cryptomoji, the client and processor are each in their own directory, with
-their own tests, and their own READMEs. There is no particular order they need
-to be built in, but we recommended you develop them in parallel based on
-functionality. For example, implement ""collection creation"" on _both_ the
-client and the processor before moving on to ""sire selection"" on _either_.
+their own tests and their own READMEs. There is no particular order for building
+them, but we recommended that you develop them in parallel based on",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196480237,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196480237,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"I'd like to drop this change. ""Space efficient"" is a technical term with a specific meaning.",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-19 15:49:13,196480835,"@@ -240,22 +240,22 @@ Let's answer these questions for _Cryptomoji_.
 
 ### Encoding Data
 
-For simplicity and familiarity we are going to encode both payloads and state
+For simplicity and familiarity, we are going to encode both payloads and state
 data as JSON. To be clear, JSON would _not_ be a great choice in production. It
-is not space efficient, and worse, it is not _deterministic_. Determinism is
-very important when writing state to the blockchain. Many many nodes will be
-attempting to the write the same state. If that state is even slightly
-different (like say, the keys are in a different order), the validators will
+is not efficient with space; worse, it is not _deterministic_. Determinism",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196480835,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196480835,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"""your encoding"" to be consistent with your other changes",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-19 15:51:01,196481511,"@@ -240,22 +240,22 @@ Let's answer these questions for _Cryptomoji_.
 
 ### Encoding Data
 
-For simplicity and familiarity we are going to encode both payloads and state
+For simplicity and familiarity, we are going to encode both payloads and state
 data as JSON. To be clear, JSON would _not_ be a great choice in production. It
-is not space efficient, and worse, it is not _deterministic_. Determinism is
-very important when writing state to the blockchain. Many many nodes will be
-attempting to the write the same state. If that state is even slightly
-different (like say, the keys are in a different order), the validators will
+is not efficient with space; worse, it is not _deterministic_. Determinism
+is very important when writing state to the blockchain. Many many nodes will
+attempt to the write the same state. If that state is even slightly
+different (like, say, the keys are in a different order), the validators will
 think the transactions are invalid.
 
 But JSON is easy and accessible, especially in Javascript. And it is possible
 to [create sorted JSON strings](https://stackoverflow.com/a/16168003/4284401),
-which should solve the determinism issue (at least well enough for our
+which should solve the determinism issue (at least, well enough for our
 purposes). Of course, JSON itself isn't quite enough, because we need _raw
-bytes_ not a string. For byte encoding we are going to use Node's
+bytes_, not a string. For byte encoding, we are going to use Node's
 [Buffers](https://nodejs.org/api/buffer.html) again.
 
-So any sort of encode we do should look something like this:
+So our encoding should look something like this:",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196481511,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196481511,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"""this parsing tool"" -> ""using a parsing tool""",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-19 15:52:08,196482003,"@@ -285,11 +285,11 @@ in order to make the Cryptomoji app work.
 }
 ```
 
-Unique breedable critters. They have a DNA string of 36 hex characters, which a
-parsing tool included with the client will convert into an adorable _kaomoji_
-for display. Aside from storing the identity of their owner, they will also
-include any breeding information they might have. First the identities of their
-parents (breeder/sire), as well as the identities of any children they
+Cryptomoji are unique, breedable critters. Each has a DNA string of 36 hex
+characters, which is converted into an adorable _kaomoji_ for display (this
+parsing tool is included with the client). Aside from storing the identity of",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196482003,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196482003,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"Oops.  Yeah, phrase != label.  But how about ""short label""?  Concise is a fancier word, so it doesn't meet the goal of writing global English (i.e., for non-native speakers).",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-20 17:15:30,196867930,"@@ -7,74 +7,74 @@ to help speed and unify development.
 
 This project uses GitHub issues to track bugs, enhancements, and other tasks.
 
-To create a new Issue:
+To create a new issue:
 
 1. Click on the
 [Issues tab](https://github.com/hyperledger/education-cryptobunnies/issues)
-underneath the name of this repo above.
+underneath the name of this repo.
 2. Click on the
 [New Issue button](https://github.com/hyperledger/education-cryptobunnies/issues/new)
 on the right side of the page.
 3. Enter a title and description for the issue.
 4. If applicable, select a label on the right side (such as ""bug"").
 5. Click _""Submit new issue""_.
 
-The title should be a concise label identifying the bug or feature, while the
-_""Leave a comment""_ section below should contain a description with as much
-detail as possible. For bugs or typos this might include:
+The title should be a short phrase that identifies the bug or feature. The",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196867930,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196867930,chenette
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"Hmm.  I don't see the nuances that you do.  I was trying to simplify the complex grammatical structure of this phrase. How about this variant? 

""While the fork-to-PR process is common, this repo is somewhat unusual because master is _not_ the branch you should make a PR against.""",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-20 17:21:23,196871910,"@@ -7,74 +7,74 @@ to help speed and unify development.
 
 This project uses GitHub issues to track bugs, enhancements, and other tasks.
 
-To create a new Issue:
+To create a new issue:
 
 1. Click on the
 [Issues tab](https://github.com/hyperledger/education-cryptobunnies/issues)
-underneath the name of this repo above.
+underneath the name of this repo.
 2. Click on the
 [New Issue button](https://github.com/hyperledger/education-cryptobunnies/issues/new)
 on the right side of the page.
 3. Enter a title and description for the issue.
 4. If applicable, select a label on the right side (such as ""bug"").
 5. Click _""Submit new issue""_.
 
-The title should be a concise label identifying the bug or feature, while the
-_""Leave a comment""_ section below should contain a description with as much
-detail as possible. For bugs or typos this might include:
+The title should be a short phrase that identifies the bug or feature. The
+_""Leave a comment""_ section should contain a description with as much
+detail as possible. For bugs or typos, this description might include:
 
-- The specific behavior, and what behavior you expected
-- What steps someone else could take to reproduce the bug
+- Specific behavior for the bug and what behavior you expected
+- Steps someone else could take to reproduce the bug
 - Any console logs or other diagnostic information
-- Filenames and line numbers if possible (especially for typos)
+- Filenames and line numbers, if possible (especially for typos)
 
 ## Making Code Contributions
 
 Like many projects on GitHub, contributions should be submitted by creating a
-fork of the repo, making some changes there, and then submitting them back as a
+fork of the repo, making some changes there, and then submitting them as a
 Pull Request for review. You will find a detailed explanation of this workflow
-below. While we are open to any help you'd like to give, if you are looking for
-a good place to start, you might checkout the _Issues_ page and see if there is
+below. We are open to any help you'd like to give, but if you are looking for
+a good place to start, you might check out the _Issues_ page to see if there is
 anything labeled ""help wanted"" that you could tackle.
 
 ### Submitting Pull Requests
 
-While the fork to PR process is common, somewhat more unusual is that `master`
+While the fork-to-PR process is common, it is somewhat unusual that `master`",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196871910,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196871910,chenette
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"I like your suggestion of ""Once all the components are running"". 

P.S. It's not that ""Once running, you ..."" is too vague, it's that this is a classic dangling modifier. It means ""Once you are running"". Isn't English fun?  :-) ",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-20 17:28:26,196877500,"@@ -77,28 +77,28 @@ source code and some prepackaged Sawtooth components downloaded from
 | ------------- | --------------------- | --------- | ------------------------
 | validator     | tcp://localhost:4004  | DockerHub | Validates blocks and transactions
 | rest-api      | http://localhost:8008 | DockerHub | Provides blockchain via HTTP/JSON
-| processor     | --                    | custom    | The core smart contract logic for your app
-| client        | http://localhost:3000 | custom    | Your front-end, served from `client/public/`
+| processor     | --                    | custom    | Your transaction processor (the core smart contract logic for your app)
+| client        | http://localhost:3000 | custom    | Your front end, served from `client/public/`
 | shell         | --                    | DockerHub | Environment for running Sawtooth commands
 | settings-tp   | --                    | DockerHub | Built-in Sawtooth transaction processor
 
 ### Start/Stop Commands
 
-First you will use the `docker-compose up` command to start all components.
+First, you will use the `docker-compose up` command to start all components.
 Note that this might take as long as 30 minutes the first time you run it
-(later runs will be much faster, more like 30 seconds). If you are in the same
-directory as the `docker-compose.yaml` file, the `up` command will find it by
-default and you won't need to provide any other parameters:
+(later runs will be much faster; more like 30 seconds). If you are in the same
+directory as the `docker-compose.yaml` file, the `up` command will find the file
+by default, so you won't need to provide any other parameters:
 
 ```bash
 cd code/part-two/
 docker-compose up
 ```
 
-This builds and starts up _everything_ defined in your compose file. Once
-running, you can then stop it all with the keyboard shortcut: `ctrl-C`. If you
-want to stop _and_ destroy every container (they will be rebuilt on your next
-`up`) use the command:
+This builds and starts _everything_ defined in your compose file. Once
+everything is running, you can then stop it all with the keyboard shortcut",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196877500,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196877500,chenette
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"Hmmm.  My intent was to simplify the sentence structure.  How about clarifying this important info with a rewrite?  I propose: 
  
""You do not have to build the client and processor in any particular order, but we recommend that you develop them in parallel, based on ..."" 

",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-20 17:49:03,196884503,"@@ -166,43 +166,43 @@ working with Javascript, start with these documents:
 - Architecture
     * [Global State](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/global_state.html)
     * [Transactions and Batches](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/transactions_and_batches.html)
-    * [The REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
+    * [REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
 - The Javascript SDK
     * [Building and Submitting Transactions](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_submit_tutorial_js.html)
     * [Transaction Processor Tutorial](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_TP_tutorial_js.html)
 
 ## The Project
 
-When building an application on Sawtooth, much of the nitty gritty of running
+When building an application on Sawtooth, much of the nitty-gritty of running
 and validating a blockchain is handled for you. You won't have to verify
-signatures or hashes, or validate blocks, or confirm consensus. Instead, you
+signatures and hashes, validate blocks, or confirm consensus. Instead, you
 must consider how you can break up the functionality of your application into
 discrete transaction payloads, and how these payloads will alter state data.
 The typical Sawtooth workflow looks something like this:
 
-1. The user initializes some action (i.e. _""set 'a' to 1""_)
+1. The user initializes some value (i.e., _""set 'a' to 1""_)
 2. The _client_ takes that action and:
     - encodes it in a payload (maybe simply `{""a"": 1}`)
     - wraps that payload in a signed transaction and batch
     - submits it to the validator
 3. The validator confirms the transaction and batch are valid
 4. The _transaction processor_ receives the payload and:
     - decodes it
-    - verifies it is a valid action (i.e. 'a' _can_ be set to 1)
+    - verifies it is a valid action (i.e., 'a' _can_ be set to 1)
     - modifies state in a way that satisfies the action
       (perhaps address _...000000a_ becomes `1`)
 5. Later, the client might read that state, and decode it for display
 
-So all you are responsible for building two components (the client and the
-transaction processor), and for keeping those components in agreement on how to
+So, you are responsible only for building two components (the client and the
+transaction processor) and for keeping those components in agreement on how to
 encode payloads and state. This application-wide logic is typically referred to
-in Sawtooth with the general term: ""transaction family"".
+in Sawtooth with the term ""transaction family"".
 
 For Cryptomoji, the client and processor are each in their own directory, with
-their own tests, and their own READMEs. There is no particular order they need
-to be built in, but we recommended you develop them in parallel based on
-functionality. For example, implement ""collection creation"" on _both_ the
-client and the processor before moving on to ""sire selection"" on _either_.
+their own tests and their own READMEs. There is no particular order for building
+them, but we recommended that you develop them in parallel based on",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196884503,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196884503,chenette
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"OK - I'll restore the original version. I changed it so I wouldn't have to research whether ""space efficient"" should be hyphenated, but the phrase is clear enough (even if the punctuation rules aren't).",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-20 17:49:23,196884613,"@@ -240,22 +240,22 @@ Let's answer these questions for _Cryptomoji_.
 
 ### Encoding Data
 
-For simplicity and familiarity we are going to encode both payloads and state
+For simplicity and familiarity, we are going to encode both payloads and state
 data as JSON. To be clear, JSON would _not_ be a great choice in production. It
-is not space efficient, and worse, it is not _deterministic_. Determinism is
-very important when writing state to the blockchain. Many many nodes will be
-attempting to the write the same state. If that state is even slightly
-different (like say, the keys are in a different order), the validators will
+is not efficient with space; worse, it is not _deterministic_. Determinism",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196884613,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196884613,chenette
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,Good catch - thanks!,a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-20 17:49:40,196884702,"@@ -240,22 +240,22 @@ Let's answer these questions for _Cryptomoji_.
 
 ### Encoding Data
 
-For simplicity and familiarity we are going to encode both payloads and state
+For simplicity and familiarity, we are going to encode both payloads and state
 data as JSON. To be clear, JSON would _not_ be a great choice in production. It
-is not space efficient, and worse, it is not _deterministic_. Determinism is
-very important when writing state to the blockchain. Many many nodes will be
-attempting to the write the same state. If that state is even slightly
-different (like say, the keys are in a different order), the validators will
+is not efficient with space; worse, it is not _deterministic_. Determinism
+is very important when writing state to the blockchain. Many many nodes will
+attempt to the write the same state. If that state is even slightly
+different (like, say, the keys are in a different order), the validators will
 think the transactions are invalid.
 
 But JSON is easy and accessible, especially in Javascript. And it is possible
 to [create sorted JSON strings](https://stackoverflow.com/a/16168003/4284401),
-which should solve the determinism issue (at least well enough for our
+which should solve the determinism issue (at least, well enough for our
 purposes). Of course, JSON itself isn't quite enough, because we need _raw
-bytes_ not a string. For byte encoding we are going to use Node's
+bytes_, not a string. For byte encoding, we are going to use Node's
 [Buffers](https://nodejs.org/api/buffer.html) again.
 
-So any sort of encode we do should look something like this:
+So our encoding should look something like this:",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196884702,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196884702,chenette
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"Short isn't _exactly_ what I mean, but I think it's fine.",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-20 18:29:49,196897326,"@@ -7,74 +7,74 @@ to help speed and unify development.
 
 This project uses GitHub issues to track bugs, enhancements, and other tasks.
 
-To create a new Issue:
+To create a new issue:
 
 1. Click on the
 [Issues tab](https://github.com/hyperledger/education-cryptobunnies/issues)
-underneath the name of this repo above.
+underneath the name of this repo.
 2. Click on the
 [New Issue button](https://github.com/hyperledger/education-cryptobunnies/issues/new)
 on the right side of the page.
 3. Enter a title and description for the issue.
 4. If applicable, select a label on the right side (such as ""bug"").
 5. Click _""Submit new issue""_.
 
-The title should be a concise label identifying the bug or feature, while the
-_""Leave a comment""_ section below should contain a description with as much
-detail as possible. For bugs or typos this might include:
+The title should be a short phrase that identifies the bug or feature. The",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196897326,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196897326,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,Perfect. That's the meaning I was hoping to get across.,a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-20 18:31:00,196897666,"@@ -7,74 +7,74 @@ to help speed and unify development.
 
 This project uses GitHub issues to track bugs, enhancements, and other tasks.
 
-To create a new Issue:
+To create a new issue:
 
 1. Click on the
 [Issues tab](https://github.com/hyperledger/education-cryptobunnies/issues)
-underneath the name of this repo above.
+underneath the name of this repo.
 2. Click on the
 [New Issue button](https://github.com/hyperledger/education-cryptobunnies/issues/new)
 on the right side of the page.
 3. Enter a title and description for the issue.
 4. If applicable, select a label on the right side (such as ""bug"").
 5. Click _""Submit new issue""_.
 
-The title should be a concise label identifying the bug or feature, while the
-_""Leave a comment""_ section below should contain a description with as much
-detail as possible. For bugs or typos this might include:
+The title should be a short phrase that identifies the bug or feature. The
+_""Leave a comment""_ section should contain a description with as much
+detail as possible. For bugs or typos, this description might include:
 
-- The specific behavior, and what behavior you expected
-- What steps someone else could take to reproduce the bug
+- Specific behavior for the bug and what behavior you expected
+- Steps someone else could take to reproduce the bug
 - Any console logs or other diagnostic information
-- Filenames and line numbers if possible (especially for typos)
+- Filenames and line numbers, if possible (especially for typos)
 
 ## Making Code Contributions
 
 Like many projects on GitHub, contributions should be submitted by creating a
-fork of the repo, making some changes there, and then submitting them back as a
+fork of the repo, making some changes there, and then submitting them as a
 Pull Request for review. You will find a detailed explanation of this workflow
-below. While we are open to any help you'd like to give, if you are looking for
-a good place to start, you might checkout the _Issues_ page and see if there is
+below. We are open to any help you'd like to give, but if you are looking for
+a good place to start, you might check out the _Issues_ page to see if there is
 anything labeled ""help wanted"" that you could tackle.
 
 ### Submitting Pull Requests
 
-While the fork to PR process is common, somewhat more unusual is that `master`
+While the fork-to-PR process is common, it is somewhat unusual that `master`",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196897666,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196897666,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"The more I look at this sentence, the more I fundamentally hate it. How about a total rewrite:

""You should develop the components in parallel on a feature-by-feature basis.""",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-20 18:39:15,196900453,"@@ -166,43 +166,43 @@ working with Javascript, start with these documents:
 - Architecture
     * [Global State](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/global_state.html)
     * [Transactions and Batches](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/transactions_and_batches.html)
-    * [The REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
+    * [REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
 - The Javascript SDK
     * [Building and Submitting Transactions](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_submit_tutorial_js.html)
     * [Transaction Processor Tutorial](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_TP_tutorial_js.html)
 
 ## The Project
 
-When building an application on Sawtooth, much of the nitty gritty of running
+When building an application on Sawtooth, much of the nitty-gritty of running
 and validating a blockchain is handled for you. You won't have to verify
-signatures or hashes, or validate blocks, or confirm consensus. Instead, you
+signatures and hashes, validate blocks, or confirm consensus. Instead, you
 must consider how you can break up the functionality of your application into
 discrete transaction payloads, and how these payloads will alter state data.
 The typical Sawtooth workflow looks something like this:
 
-1. The user initializes some action (i.e. _""set 'a' to 1""_)
+1. The user initializes some value (i.e., _""set 'a' to 1""_)
 2. The _client_ takes that action and:
     - encodes it in a payload (maybe simply `{""a"": 1}`)
     - wraps that payload in a signed transaction and batch
     - submits it to the validator
 3. The validator confirms the transaction and batch are valid
 4. The _transaction processor_ receives the payload and:
     - decodes it
-    - verifies it is a valid action (i.e. 'a' _can_ be set to 1)
+    - verifies it is a valid action (i.e., 'a' _can_ be set to 1)
     - modifies state in a way that satisfies the action
       (perhaps address _...000000a_ becomes `1`)
 5. Later, the client might read that state, and decode it for display
 
-So all you are responsible for building two components (the client and the
-transaction processor), and for keeping those components in agreement on how to
+So, you are responsible only for building two components (the client and the
+transaction processor) and for keeping those components in agreement on how to
 encode payloads and state. This application-wide logic is typically referred to
-in Sawtooth with the general term: ""transaction family"".
+in Sawtooth with the term ""transaction family"".
 
 For Cryptomoji, the client and processor are each in their own directory, with
-their own tests, and their own READMEs. There is no particular order they need
-to be built in, but we recommended you develop them in parallel based on
-functionality. For example, implement ""collection creation"" on _both_ the
-client and the processor before moving on to ""sire selection"" on _either_.
+their own tests and their own READMEs. There is no particular order for building
+them, but we recommended that you develop them in parallel based on",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196900453,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196900453,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,"Seems like both ""space efficient"" and ""space-efficient"" are acceptable. I have no preference.",a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-20 18:41:11,196901093,"@@ -240,22 +240,22 @@ Let's answer these questions for _Cryptomoji_.
 
 ### Encoding Data
 
-For simplicity and familiarity we are going to encode both payloads and state
+For simplicity and familiarity, we are going to encode both payloads and state
 data as JSON. To be clear, JSON would _not_ be a great choice in production. It
-is not space efficient, and worse, it is not _deterministic_. Determinism is
-very important when writing state to the blockchain. Many many nodes will be
-attempting to the write the same state. If that state is even slightly
-different (like say, the keys are in a different order), the validators will
+is not efficient with space; worse, it is not _deterministic_. Determinism",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196901093,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196901093,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/93,https://github.com/hyperledger/education-cryptomoji/pull/93,Yes - this is much better. I'll make the change.,a5ea26368bfb4a145459699cc3ab87b39ac27bcb,2018-06-20 19:32:58,196915742,"@@ -166,43 +166,43 @@ working with Javascript, start with these documents:
 - Architecture
     * [Global State](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/global_state.html)
     * [Transactions and Batches](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/transactions_and_batches.html)
-    * [The REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
+    * [REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
 - The Javascript SDK
     * [Building and Submitting Transactions](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_submit_tutorial_js.html)
     * [Transaction Processor Tutorial](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_TP_tutorial_js.html)
 
 ## The Project
 
-When building an application on Sawtooth, much of the nitty gritty of running
+When building an application on Sawtooth, much of the nitty-gritty of running
 and validating a blockchain is handled for you. You won't have to verify
-signatures or hashes, or validate blocks, or confirm consensus. Instead, you
+signatures and hashes, validate blocks, or confirm consensus. Instead, you
 must consider how you can break up the functionality of your application into
 discrete transaction payloads, and how these payloads will alter state data.
 The typical Sawtooth workflow looks something like this:
 
-1. The user initializes some action (i.e. _""set 'a' to 1""_)
+1. The user initializes some value (i.e., _""set 'a' to 1""_)
 2. The _client_ takes that action and:
     - encodes it in a payload (maybe simply `{""a"": 1}`)
     - wraps that payload in a signed transaction and batch
     - submits it to the validator
 3. The validator confirms the transaction and batch are valid
 4. The _transaction processor_ receives the payload and:
     - decodes it
-    - verifies it is a valid action (i.e. 'a' _can_ be set to 1)
+    - verifies it is a valid action (i.e., 'a' _can_ be set to 1)
     - modifies state in a way that satisfies the action
       (perhaps address _...000000a_ becomes `1`)
 5. Later, the client might read that state, and decode it for display
 
-So all you are responsible for building two components (the client and the
-transaction processor), and for keeping those components in agreement on how to
+So, you are responsible only for building two components (the client and the
+transaction processor) and for keeping those components in agreement on how to
 encode payloads and state. This application-wide logic is typically referred to
-in Sawtooth with the general term: ""transaction family"".
+in Sawtooth with the term ""transaction family"".
 
 For Cryptomoji, the client and processor are each in their own directory, with
-their own tests, and their own READMEs. There is no particular order they need
-to be built in, but we recommended you develop them in parallel based on
-functionality. For example, implement ""collection creation"" on _both_ the
-client and the processor before moving on to ""sire selection"" on _either_.
+their own tests and their own READMEs. There is no particular order for building
+them, but we recommended that you develop them in parallel based on",,2018-07-12 16:35:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/196915742,https://github.com/hyperledger/education-cryptomoji/pull/93#discussion_r196915742,chenette
https://github.com/hyperledger/education-cryptomoji/pull/91,https://github.com/hyperledger/education-cryptomoji/pull/91,Would it better to collect all necessary props in an arbitrary object first off and then set the state using that object. Just thinking if `isSire` is ever `true` then it will have to rerender the DOM twice. I don't know if it's really necessary or not but just a thought,b0672d358827f252b95ef3f0b0a59677ecb0a738,2018-06-27 06:19:53,198377835,"@@ -2,73 +2,131 @@
 import React from 'react';
 import { Link } from 'react-router-dom';
 
-import { getMoji } from './services/requests';
+import { getMoji, getSires, submitPayloads } from './services/requests';
 import { parseDna } from './services/parse_dna';
 
 export class Moji extends React.Component {
   constructor(props) {
     super(props);
     this.state = {
       address: null,
+      isLoaded: false,
+      isOwner: false,
+      isSire: false,
       moji: null,
       mojiView: null
     };
+    this.selectSire = this.selectSire.bind(this);
   }
 
   static getDerivedStateFromProps(nextProps, prevState) {
-    console.log('GETDERIVEDSTATEFROMPROPS: <Moji />');
     const address = nextProps.match.params.address;
     return {
-      address
+      address,
+      isLoaded: false,
+      isOwner: false,
+      isSire: false,
+      moji: null,
+      mojiView: null
     };
   }
 
   componentDidMount() {
-    console.log('COMPONENTDIDMOUNT: <Moji />');
     this.fetchMoji(this.state.address);
   }
 
   componentDidUpdate(prevProps, prevState) {
-    console.log('COMPONENTDIDUPDATE: <Moji />');
     if (this.state.address !== prevState.address) {
       this.fetchMoji(this.state.address);
     }
   }
 
   fetchMoji(address) {
-    console.log('fetchMoji');
     return getMoji(address)
-      .then(moji => this.setState({
-        moji,
-        mojiView: parseDna(moji.dna).view
-      }))
       .catch(err => {
         console.error(`Fetch moji failed for ${address}`, err);
-        this.setState({ moji: null });
+      })
+      .then(moji => {
+        this.setState({
+          isOwner: moji.owner === this.props.publicKey,
+          moji,
+          mojiView: parseDna(moji.dna).view
+        });
+        return getSires(moji.owner);
+      })
+      .then(sire => {
+        const isSire = sire.address === this.state.address;
+        if (isSire) {
+          this.setState(prevState => ({
+            mojiView: prevState.mojiView + ' 🎩'
+          }));
+        }
+        this.setState({ isSire });",74,2018-06-27 06:19:53,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/198377835,https://github.com/hyperledger/education-cryptomoji/pull/91#discussion_r198377835,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/91,https://github.com/hyperledger/education-cryptomoji/pull/91,Similar to comment above,b0672d358827f252b95ef3f0b0a59677ecb0a738,2018-06-27 06:23:58,198378565,"@@ -19,14 +21,33 @@ export class MojiItem extends React.Component {
         this.setState({
           mojiView: parseDna(moji.dna).view
         });
+        return getSires(moji.owner);
+      })
+      .then(sire => {
+        const isSire = sire.address === this.props.address;
+        if (isSire) {
+          this.setState(prevState => ({
+            mojiView: prevState.mojiView + ' 🎩'
+          }));
+        }
+        this.setState({ isSire });",30,2018-06-27 06:23:58,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/198378565,https://github.com/hyperledger/education-cryptomoji/pull/91#discussion_r198378565,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/91,https://github.com/hyperledger/education-cryptomoji/pull/91,"(Side note: I actually removed lines 59-63 as part of a future PR)

Agreed that it will re-render twice, but afaik (idk how to explicitly test this), it will only be a minor re-render (eg, only 1 new DOM element appearing), and if there were any performance issues, React is supposed to batch up multiple `this.setState`s and render just once anyway.

https://reactjs.org/docs/state-and-lifecycle.html#state-updates-may-be-asynchronous
> React may batch multiple setState() calls into a single update for performance.",b0672d358827f252b95ef3f0b0a59677ecb0a738,2018-06-27 18:01:08,198588570,"@@ -2,73 +2,131 @@
 import React from 'react';
 import { Link } from 'react-router-dom';
 
-import { getMoji } from './services/requests';
+import { getMoji, getSires, submitPayloads } from './services/requests';
 import { parseDna } from './services/parse_dna';
 
 export class Moji extends React.Component {
   constructor(props) {
     super(props);
     this.state = {
       address: null,
+      isLoaded: false,
+      isOwner: false,
+      isSire: false,
       moji: null,
       mojiView: null
     };
+    this.selectSire = this.selectSire.bind(this);
   }
 
   static getDerivedStateFromProps(nextProps, prevState) {
-    console.log('GETDERIVEDSTATEFROMPROPS: <Moji />');
     const address = nextProps.match.params.address;
     return {
-      address
+      address,
+      isLoaded: false,
+      isOwner: false,
+      isSire: false,
+      moji: null,
+      mojiView: null
     };
   }
 
   componentDidMount() {
-    console.log('COMPONENTDIDMOUNT: <Moji />');
     this.fetchMoji(this.state.address);
   }
 
   componentDidUpdate(prevProps, prevState) {
-    console.log('COMPONENTDIDUPDATE: <Moji />');
     if (this.state.address !== prevState.address) {
       this.fetchMoji(this.state.address);
     }
   }
 
   fetchMoji(address) {
-    console.log('fetchMoji');
     return getMoji(address)
-      .then(moji => this.setState({
-        moji,
-        mojiView: parseDna(moji.dna).view
-      }))
       .catch(err => {
         console.error(`Fetch moji failed for ${address}`, err);
-        this.setState({ moji: null });
+      })
+      .then(moji => {
+        this.setState({
+          isOwner: moji.owner === this.props.publicKey,
+          moji,
+          mojiView: parseDna(moji.dna).view
+        });
+        return getSires(moji.owner);
+      })
+      .then(sire => {
+        const isSire = sire.address === this.state.address;
+        if (isSire) {
+          this.setState(prevState => ({
+            mojiView: prevState.mojiView + ' 🎩'
+          }));
+        }
+        this.setState({ isSire });",74,2018-06-27 18:01:08,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/198588570,https://github.com/hyperledger/education-cryptomoji/pull/91#discussion_r198588570,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,rip kaomoji,db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 20:56:15,194886127,"@@ -24,17 +24,14 @@ their work.
 
 ## Prerequisites
 
-Using this project and running its components requires
-[Node 8](https://nodejs.org/) and
+This project requires [Node 8](https://nodejs.org/) and
 [Docker](https://www.docker.com/community-edition).
 
-( ◡‿◡ *)",9,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194886127,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194886127,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"**(minor) Reorder punctuation:** Start with a ""genesis block`.""`

**Add missing word:** This is the only block which won't `be` linked
or
**Replace word:** This is the only block which ~won't~ `isn't` linked",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:01:08,194887637,"@@ -147,11 +147,13 @@ best bet is probably to familiarize yourself with Node's crypto module, in
 particular using it to create SHA-512 hashes. This will come up later when you
 start working with Hyperledger Sawtooth.
 
-Now that you understand hashing, a blockchain should actually be actually
-fairly straightforward. You take some data, you gather it into a ""block"", you
-combine it with the hash of a previous block, and then you create a new hash.
-Now, when more data comes in, bundle it into a new block, combine it with the
-hash from your first block, and generate a new hash. Rinse and repeat.
+Now that you understand hashing, a blockchain should actually be rather
+straightforward. It's just bundles of data linked sequentially by hashes of
+that data. Start with a ""genesis block"". This is the only block which won't linked",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194887637,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194887637,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"**Add punctuation:** Now`,`",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:01:44,194887796,"@@ -172,12 +174,13 @@ hash from your first block, and generate a new hash. Rinse and repeat.
 ]
 ```
 
-Now all of our data is linked to our previous data, all the way back to our
-original ""genesis block"", which is the only block without a previous hash.
-Anyone attempting to modify one block, would also have to modify _every_ block
-that came afterward it in the chain.
+Now all of our data is linked all the way back to our original genesis block.",67,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194887796,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194887796,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,**Add missing word:** `and` generate a new hash.,db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:03:13,194888267,"@@ -147,11 +147,13 @@ best bet is probably to familiarize yourself with Node's crypto module, in
 particular using it to create SHA-512 hashes. This will come up later when you
 start working with Hyperledger Sawtooth.
 
-Now that you understand hashing, a blockchain should actually be actually
-fairly straightforward. You take some data, you gather it into a ""block"", you
-combine it with the hash of a previous block, and then you create a new hash.
-Now, when more data comes in, bundle it into a new block, combine it with the
-hash from your first block, and generate a new hash. Rinse and repeat.
+Now that you understand hashing, a blockchain should actually be rather
+straightforward. It's just bundles of data linked sequentially by hashes of
+that data. Start with a ""genesis block"". This is the only block which won't linked
+to a previous hash. Then, gather some data into a new block, combine it with
+the genesis hash, and create a new hash. Now, when more data comes in, repeat
+the process. Bundle the data into a new block, combine it with a previous hash,
+generate a new hash.",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194888267,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194888267,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"Thoughts on replacing the `.` with `:`?

> Now, when more data comes in, repeat the process`:` `b`undle the data into a new block, combine it with a previous hash, `and` generate a new hash.",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:05:44,194888901,"@@ -147,11 +147,13 @@ best bet is probably to familiarize yourself with Node's crypto module, in
 particular using it to create SHA-512 hashes. This will come up later when you
 start working with Hyperledger Sawtooth.
 
-Now that you understand hashing, a blockchain should actually be actually
-fairly straightforward. You take some data, you gather it into a ""block"", you
-combine it with the hash of a previous block, and then you create a new hash.
-Now, when more data comes in, bundle it into a new block, combine it with the
-hash from your first block, and generate a new hash. Rinse and repeat.
+Now that you understand hashing, a blockchain should actually be rather
+straightforward. It's just bundles of data linked sequentially by hashes of
+that data. Start with a ""genesis block"". This is the only block which won't linked
+to a previous hash. Then, gather some data into a new block, combine it with
+the genesis hash, and create a new hash. Now, when more data comes in, repeat
+the process. Bundle the data into a new block, combine it with a previous hash,",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194888901,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194888901,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"**Avoid ""it will"":** If anyone attempts to tamper with the data in a block, ~it will change~ the hash that gets generated `also changes`.",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:07:38,194889412,"@@ -172,12 +174,13 @@ hash from your first block, and generate a new hash. Rinse and repeat.
 ]
 ```
 
-Now all of our data is linked to our previous data, all the way back to our
-original ""genesis block"", which is the only block without a previous hash.
-Anyone attempting to modify one block, would also have to modify _every_ block
-that came afterward it in the chain.
+Now all of our data is linked all the way back to our original genesis block.
+If anyone attempts to tamper with the data in a block, it will change the hash
+that gets generated. Anyone checking the chain of hashes would immediately see",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194889412,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194889412,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,**Prefer present tense?:** every block that ~came~ `comes` after it.,db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:08:43,194889686,"@@ -172,12 +174,13 @@ hash from your first block, and generate a new hash. Rinse and repeat.
 ]
 ```
 
-Now all of our data is linked to our previous data, all the way back to our
-original ""genesis block"", which is the only block without a previous hash.
-Anyone attempting to modify one block, would also have to modify _every_ block
-that came afterward it in the chain.
+Now all of our data is linked all the way back to our original genesis block.
+If anyone attempts to tamper with the data in a block, it will change the hash
+that gets generated. Anyone checking the chain of hashes would immediately see
+that one does not match. In order to alter old data, you would have to modify
+not only the target block, but _every_ block that came after it.",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194889686,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194889686,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"thoughts on `you get to be your own validator` => `you get to write your own validator`?

Maybe I took it too literally, but my first thought on reading `you get to be your own validator` was ""WOO HOO! I get to be a validator!!! ...how do I get to be my own validator? Oh I guess I'm writing a validator!""",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:20:22,194892715,"@@ -187,12 +190,10 @@ Your blockchain will consist of three related ES6 classes:
 
 **Module:** [validation.js](validation.js)
 
-There are as many ways to validate a blockchain as there are blockchains. It is
-a huge and varied topic. In fact, in Sawtooth the central component is named a
-""validator"", and that is the vast majority what it does. For this section
-though, you get to be your own validator, and finally verify all that
-cryptographic boilerplate you've been including with your blocks and
-transactions.
+Blockchain validation is a huge and varied topic. In Sawtooth, validation is so
+important that the central component is named a ""validator"". For this section,
+you get to be your own validator and finally verify all that cryptographic",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194892715,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194892715,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,**For clarity:** finally verify all ~that~ `of the` cryptographic boilerplate...,db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:22:12,194893215,"@@ -187,12 +190,10 @@ Your blockchain will consist of three related ES6 classes:
 
 **Module:** [validation.js](validation.js)
 
-There are as many ways to validate a blockchain as there are blockchains. It is
-a huge and varied topic. In fact, in Sawtooth the central component is named a
-""validator"", and that is the vast majority what it does. For this section
-though, you get to be your own validator, and finally verify all that
-cryptographic boilerplate you've been including with your blocks and
-transactions.
+Blockchain validation is a huge and varied topic. In Sawtooth, validation is so
+important that the central component is named a ""validator"". For this section,
+you get to be your own validator and finally verify all that cryptographic",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194893215,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194893215,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"thoughts on applying monospace font to ""describe""?

> ...remove the `.skip` from the wrapping `describe` block on Line 14 of...",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:23:31,194893571,"@@ -213,28 +214,28 @@ algorithms, and _Proof of Work_ in particular, you can feel free to move on to
 [part-two](../part-two/README.md) at this point. This section is strictly
 optional.
 
-In order to run the tests for this extra credit, remove the  `.skip` from the
-wrapping describe block on Line 14 of
+To run the tests for this extra credit, remove the  `.skip` from the wrapping
+describe block on Line 14 of",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194893571,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194893571,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,omit comma at end of line (after `blocks`),db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:24:29,194893824,"@@ -213,28 +214,28 @@ algorithms, and _Proof of Work_ in particular, you can feel free to move on to
 [part-two](../part-two/README.md) at this point. This section is strictly
 optional.
 
-In order to run the tests for this extra credit, remove the  `.skip` from the
-wrapping describe block on Line 14 of
+To run the tests for this extra credit, remove the  `.skip` from the wrapping
+describe block on Line 14 of
 [tests/04-ExtraCredit-Mining.js](tests/04-ExtraCredit-Mining.js#L14).
 
 ### 04 Mining
 
 **Module:** [mining.js](mining.js)
 
 All this validation stuff is great, but what is to stop someone from coming in
-and just replacing huge sections of the blockchain with their own _valid_ blocks
-and transactions? That is where _consensus_ comes in. A good consensus
-algorithm like Proof of Work or
+and replacing huge sections of the blockchain with their own _valid_ blocks and
+transactions? That is where _consensus_ comes in. A good consensus algorithm
+like Proof of Work or
 [Proof of Elapsed Time](https://medium.com/kokster/understanding-hyperledger-sawtooth-proof-of-elapsed-time-e0c303577ec1)
 (one of the algorithms available to Sawtooth), feature _Byzantine
 Fault Tolerance_: they not only ensure correctness, but also prevent bad actors
 from taking over the system and rewriting large sections of the blockchain.
 Zulfikar Ramzan does an excellent job of
 [explaining how this works for Bitcoin](https://www.khanacademy.org/economics-finance-domain/core-finance/money-and-banking/bitcoin/v/bitcoin-proof-of-work),
-but the short version is, if you randomize who gets to create new blocks, and
-always select the longest chain available, a bad actor would need to take over
-51% of the network to be effective. In a highly decentralized network, this is
-likely impractical.
+but the short version is that if you randomize who gets to create new blocks,",126,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194893824,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194893824,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"**Omit comma:** It's a profoundly useful tool ~,~ which takes a little getting used to",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:26:41,194894406,"@@ -57,21 +57,20 @@ required to use `docker` and `docker-compose` from your command line.
 
 ## Using Docker
 
-Docker is a virtualization tool that makes it much easier to deploy code in a
-variety of environments, with minimum effort. Dockerfiles create ""images"" with
-all of the dependencies your code needs ready to go. From these images,
-individual ""containers"" can be created, run, and destroyed at will. This is in
-effect like having every component running on it's own virtual computer, which
-you can reset to factory settings at any time, in a matter of seconds. It's a
-profoundly useful tool, which takes a little getting used to, but is worth
-getting familiar with.
+Docker is a virtualization tool that makes it easy to deploy code in a variety
+of environments. Dockerfiles create ""images"" with all the dependencies your
+code needs installed. From these images, you can create, run, and destroy
+individual ""containers"" at will. This is in effect like having every component
+running on it's own virtual computer which you can reset to factory settings at
+any time. It's a profoundly useful tool, which takes a little getting used to,",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194894406,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194894406,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"**Add comma:** Well`,` it comes complete...
**Homophone:** ...it comes complete with ~it's~ `its` own localhost",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:28:37,194894876,"@@ -135,10 +134,10 @@ docker exec -it shell bash
 
 An important note! When you are within a container, you cannot use ""localhost""
 for networking. Remember how each container is like its own little computer?
-Well it is complete with it's own localhost. Thankfully, Docker provide the
-service names from the compose file as URLs. So for example, if you were inside
-the shell container and wanted to get the blocks from the REST API, you would
-run:
+Well it comes complete with it's own localhost. For networking to _other_",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194894876,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194894876,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"> Cryptomoji need to be **divvied up** by who owns them.

I think `divvied up` might confused some people. What do you think about saying something about how cryptomoji need to be `organized` or `sorted` by who owns them?",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:39:26,194897616,"@@ -324,78 +324,49 @@ for a namespace for the transaction family, allowing many families to coexist
 on the same blockchain. The remaining 64 characters are up to each family to
 define.
 
-We will follow this convention with a six character namespace, and some
-sensible rules about how the remaining 64 characters of our state addresses
-should be divvied up.
-
-#### Namespace
-
-For the six character namespace, we'll use the first six characters of a
-SHA-512 hash of the application name, _“cryptomoji”_:
-
-```
-5f4d76
-```
-
-#### Resource Prefix
-
-The next a one byte (two characters) will be a short prefix designating what
-type of resource is stored at the address:
-
-- **Collection:** `00`
-- **Cryptomoji:** `01`
-- **Sire Listing:** `02`
+We will follow this convention with a six character namespace, `5f4d76`,
+generated from the first six characters of a SHA-512 hash of the family name
+_“cryptomoji”_. Each state entity will have their own scheme for how they use
+the remaining 64 characters of their address.
 
 #### Collection
 
-The final 62 characters of a collection’s address will be the first 62
-characters of a SHA-512 hash of its public key.
-
-So for a collection with a public key of
-`034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa`, we get
-a SHA-512 hash, slice off the first 62 characters, combine with our namespace
-prefix above, and end up with:
-
-```
-5f4d76 00 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
-```
-
-_Note that we have added spaces for readability. Actual addresses have no
-spaces._
+| Namespace (6) | Type prefix (2) | Identifier hash (62)
+| ------------- | --------------- | --------------------
+| `5f4d76`      | `00`            | `1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb`
 
-#### Collection Prefix
-
-For both cryptomoji and offers (see [extra credit](#extra-credit)), the next
-eight characters are a prefix for the collection they belong to. These are
-generated from the first eight characters of a SHA-512 hash of the collection’s
+A collection will be stored first under a one byte type prefix: `00`. The
+remaining 62 characters are the first 62 characters of a SHA-512 hash of its
 public key.
 
-So, for the same public key above:
+For example, the hash used to create the address above might be generated like
+this:
 
-```
-1b96dbb5
+```javascript
+createHash('sha512').update('034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa').digest('hex');
+// 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cbee2e9e5c5df5bb65c282f1aaf516cf7cc5a2f7ff592a80cf920e1abaab8d29279f
 ```
 
 #### Cryptomoji
 
-The final 54 characters of a cryptomoji’s address is the first 54 characters of
-a SHA-512 hash of their DNA string. So the address of a cryptomoji with the
-dna `c44b22d96246b0980954f7818567f453039a` would be:
+| Namespace (6) | Type prefix (2) | Collection prefix (8) | Identifier hash (54)
+| ------------- | --------------- | --------------------- | --------------------
+| `5f4d76`      | `01`            | `1b96dbb5`            | `0c8514ab2a7cf361062601716bcd762097e41f9011a5e6f8ff6c5f`
 
-```
-5f4d76 01 1b96dbb5 0c8514ab2a7cf361062601716bcd762097e41f9011a5e6f8ff6c5f
-```
+Cryptomoji need to be divvied up by who owns them. That way you can query a",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194897616,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194897616,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"**Add comma and reword for clarity:** So after a type prefix of 01`,` ~a collection has~ `the next eight characters of a cryptomoji's address are the collection prefix (`the first eight characters from a SHA-512 hash of the owner's public key`)`. The final 54 characters of a cryptomoji's address will the first 54 characters of a SHA-512 hash of their DNA string.",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:44:54,194898877,"@@ -324,78 +324,49 @@ for a namespace for the transaction family, allowing many families to coexist
 on the same blockchain. The remaining 64 characters are up to each family to
 define.
 
-We will follow this convention with a six character namespace, and some
-sensible rules about how the remaining 64 characters of our state addresses
-should be divvied up.
-
-#### Namespace
-
-For the six character namespace, we'll use the first six characters of a
-SHA-512 hash of the application name, _“cryptomoji”_:
-
-```
-5f4d76
-```
-
-#### Resource Prefix
-
-The next a one byte (two characters) will be a short prefix designating what
-type of resource is stored at the address:
-
-- **Collection:** `00`
-- **Cryptomoji:** `01`
-- **Sire Listing:** `02`
+We will follow this convention with a six character namespace, `5f4d76`,
+generated from the first six characters of a SHA-512 hash of the family name
+_“cryptomoji”_. Each state entity will have their own scheme for how they use
+the remaining 64 characters of their address.
 
 #### Collection
 
-The final 62 characters of a collection’s address will be the first 62
-characters of a SHA-512 hash of its public key.
-
-So for a collection with a public key of
-`034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa`, we get
-a SHA-512 hash, slice off the first 62 characters, combine with our namespace
-prefix above, and end up with:
-
-```
-5f4d76 00 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
-```
-
-_Note that we have added spaces for readability. Actual addresses have no
-spaces._
+| Namespace (6) | Type prefix (2) | Identifier hash (62)
+| ------------- | --------------- | --------------------
+| `5f4d76`      | `00`            | `1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb`
 
-#### Collection Prefix
-
-For both cryptomoji and offers (see [extra credit](#extra-credit)), the next
-eight characters are a prefix for the collection they belong to. These are
-generated from the first eight characters of a SHA-512 hash of the collection’s
+A collection will be stored first under a one byte type prefix: `00`. The
+remaining 62 characters are the first 62 characters of a SHA-512 hash of its
 public key.
 
-So, for the same public key above:
+For example, the hash used to create the address above might be generated like
+this:
 
-```
-1b96dbb5
+```javascript
+createHash('sha512').update('034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa').digest('hex');
+// 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cbee2e9e5c5df5bb65c282f1aaf516cf7cc5a2f7ff592a80cf920e1abaab8d29279f
 ```
 
 #### Cryptomoji
 
-The final 54 characters of a cryptomoji’s address is the first 54 characters of
-a SHA-512 hash of their DNA string. So the address of a cryptomoji with the
-dna `c44b22d96246b0980954f7818567f453039a` would be:
+| Namespace (6) | Type prefix (2) | Collection prefix (8) | Identifier hash (54)
+| ------------- | --------------- | --------------------- | --------------------
+| `5f4d76`      | `01`            | `1b96dbb5`            | `0c8514ab2a7cf361062601716bcd762097e41f9011a5e6f8ff6c5f`
 
-```
-5f4d76 01 1b96dbb5 0c8514ab2a7cf361062601716bcd762097e41f9011a5e6f8ff6c5f
-```
+Cryptomoji need to be divvied up by who owns them. That way you can query a
+partial address to get all of the cryptomoji owned by a public key. So after a
+type prefix of `01` a collection has the first eight characters from a SHA-512
+hash of the owner's public key. The final 54 characters of a cryptomoji’s
+address will the first 54 characters of a SHA-512 hash of their DNA string.",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194898877,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194898877,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"**Clarify pronoun:** Since collections are only allowed one sire listing, ~they~ `sire listings` can be stored under a nearly identical address `format as collections, where the identifier hash is the first 62 characters of a SHA-512 hash of its owner's public key`. The only difference will be the type prefix: 02.",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 21:48:51,194899728,"@@ -324,78 +324,49 @@ for a namespace for the transaction family, allowing many families to coexist
 on the same blockchain. The remaining 64 characters are up to each family to
 define.
 
-We will follow this convention with a six character namespace, and some
-sensible rules about how the remaining 64 characters of our state addresses
-should be divvied up.
-
-#### Namespace
-
-For the six character namespace, we'll use the first six characters of a
-SHA-512 hash of the application name, _“cryptomoji”_:
-
-```
-5f4d76
-```
-
-#### Resource Prefix
-
-The next a one byte (two characters) will be a short prefix designating what
-type of resource is stored at the address:
-
-- **Collection:** `00`
-- **Cryptomoji:** `01`
-- **Sire Listing:** `02`
+We will follow this convention with a six character namespace, `5f4d76`,
+generated from the first six characters of a SHA-512 hash of the family name
+_“cryptomoji”_. Each state entity will have their own scheme for how they use
+the remaining 64 characters of their address.
 
 #### Collection
 
-The final 62 characters of a collection’s address will be the first 62
-characters of a SHA-512 hash of its public key.
-
-So for a collection with a public key of
-`034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa`, we get
-a SHA-512 hash, slice off the first 62 characters, combine with our namespace
-prefix above, and end up with:
-
-```
-5f4d76 00 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
-```
-
-_Note that we have added spaces for readability. Actual addresses have no
-spaces._
+| Namespace (6) | Type prefix (2) | Identifier hash (62)
+| ------------- | --------------- | --------------------
+| `5f4d76`      | `00`            | `1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb`
 
-#### Collection Prefix
-
-For both cryptomoji and offers (see [extra credit](#extra-credit)), the next
-eight characters are a prefix for the collection they belong to. These are
-generated from the first eight characters of a SHA-512 hash of the collection’s
+A collection will be stored first under a one byte type prefix: `00`. The
+remaining 62 characters are the first 62 characters of a SHA-512 hash of its
 public key.
 
-So, for the same public key above:
+For example, the hash used to create the address above might be generated like
+this:
 
-```
-1b96dbb5
+```javascript
+createHash('sha512').update('034f355bdcb7cc0af728ef3cceb9615d90684bb5b2ca5f859ab0f0b704075871aa').digest('hex');
+// 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cbee2e9e5c5df5bb65c282f1aaf516cf7cc5a2f7ff592a80cf920e1abaab8d29279f
 ```
 
 #### Cryptomoji
 
-The final 54 characters of a cryptomoji’s address is the first 54 characters of
-a SHA-512 hash of their DNA string. So the address of a cryptomoji with the
-dna `c44b22d96246b0980954f7818567f453039a` would be:
+| Namespace (6) | Type prefix (2) | Collection prefix (8) | Identifier hash (54)
+| ------------- | --------------- | --------------------- | --------------------
+| `5f4d76`      | `01`            | `1b96dbb5`            | `0c8514ab2a7cf361062601716bcd762097e41f9011a5e6f8ff6c5f`
 
-```
-5f4d76 01 1b96dbb5 0c8514ab2a7cf361062601716bcd762097e41f9011a5e6f8ff6c5f
-```
+Cryptomoji need to be divvied up by who owns them. That way you can query a
+partial address to get all of the cryptomoji owned by a public key. So after a
+type prefix of `01` a collection has the first eight characters from a SHA-512
+hash of the owner's public key. The final 54 characters of a cryptomoji’s
+address will the first 54 characters of a SHA-512 hash of their DNA string.
 
 #### Sire Listing
 
-Like collections, the last 62 characters of a sire listing’s address are the
-first 62 characters of a SHA-512 hash of a public key, the sire's owner in this
-case. So our example address would be identical to our example collection, but
-with a different resource prefix:
+| Namespace (6) | Type prefix (2) | Identifier hash (62)
+| ------------- | --------------- | --------------------
+| `5f4d76`      | `02`            | `1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb`
 
-```
-5f4d76 02 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
-```
+Since collections are only allowed one sire listing, they can be stored under a",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194899728,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194899728,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"**Replace ""passed in"" with ""provided"":** signed with the ~passed in~ `provided` private key",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 22:26:22,194907561,"@@ -15,11 +15,11 @@ class Transaction {
    * to set a number of properties, including a Secp256k1 signature.
    *
    * Properties:
-   *   - source: the public key derived from the passed in private key
-   *   - recipient: the passed public key for the recipient
-   *   - amount: the passed in number
+   *   - source: the public key derived from the provided private key
+   *   - recipient: the provided public key for the recipient
+   *   - amount: the provided amount
    *   - signature: a unique signature generated from a combination of the
-   *     other properties, signed by the passed in private key
+   *     other properties, signed with the passed in private key",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194907561,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194907561,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,**Typo:** ~transfered~ `transferred`,db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 22:27:21,194907750,"@@ -143,11 +143,11 @@ class Blockchain {
   }
 
   /**
-   * Accepts a public key and calculates its ""balance"" based on the amounts
-   * transfered in transactions stored in the chain.
+   * Accepts a public key, calculating its ""balance"" based on the amounts
+   * transfered in all transactions stored in the chain.",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194907750,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194907750,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,**Remove extra word:** It creates both ~a~ private and public keys...,db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 22:30:14,194908341,"@@ -48,7 +48,7 @@ export const getPublicKey = privateKey => {
 
 /**
  * This convenience function did not exist in part-one's signing module, but
- * should be simple to implement. It creates both a private and public key,
+ * should be simple to implement. It creates both a private and public keys,",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194908341,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194908341,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"**Add word:** Set validator URL ~,~ `as` the default is not valid in a docker-compose environment",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 22:32:34,194908803,"@@ -5,7 +5,7 @@ const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
 const MojiHandler = require('./handler');
 
 
-// The default validator URL, not valid in a docker-compose environment
+// Set validator URL, the default is not valid in a docker-compose environment",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194908803,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194908803,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"**For discussion:**

I like how Wikipedia mentions _sequence_ and _reproducibility_: https://en.wikipedia.org/wiki/Pseudorandom_number_generator

Thoughts on this wording? (Maybe it's too much?)
> This generator function will return a (seemingly) random number every time it is called. However, the exact same sequence of (seemingly) random numbers can be reproduced from another generator function created with the same seed, making this a _pseudo_ random number generator instead of a truly random number generator.",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-12 22:47:08,194911540,"@@ -2,9 +2,9 @@
 
 /**
  * A function that takes any hex string as a seed, and returns a pseudo-random
- * number generator. This function will return a new seemingly random number
- * every time it is called, but will be identical to any other generator
- * created with the same seed.
+ * number generator. This generator function will return a semi-random number
+ * every time it is called. But the numbers generated will be identical to
+ * those from another generator created with the same seed.",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/194911540,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r194911540,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"I meant it to be a little casual and fun. Though I actually think it is more accurate than saying they are writing a validator. That implies there will be some sort of process. There are only going to be functions, which they would have to run themselves, making them the validator.",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-13 17:03:38,195163078,"@@ -187,12 +190,10 @@ Your blockchain will consist of three related ES6 classes:
 
 **Module:** [validation.js](validation.js)
 
-There are as many ways to validate a blockchain as there are blockchains. It is
-a huge and varied topic. In fact, in Sawtooth the central component is named a
-""validator"", and that is the vast majority what it does. For this section
-though, you get to be your own validator, and finally verify all that
-cryptographic boilerplate you've been including with your blocks and
-transactions.
+Blockchain validation is a huge and varied topic. In Sawtooth, validation is so
+important that the central component is named a ""validator"". For this section,
+you get to be your own validator and finally verify all that cryptographic",,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/195163078,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r195163078,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"Actually, I think this one stays (parenthetical statement).",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-13 17:05:56,195163758,"@@ -213,28 +214,28 @@ algorithms, and _Proof of Work_ in particular, you can feel free to move on to
 [part-two](../part-two/README.md) at this point. This section is strictly
 optional.
 
-In order to run the tests for this extra credit, remove the  `.skip` from the
-wrapping describe block on Line 14 of
+To run the tests for this extra credit, remove the  `.skip` from the wrapping
+describe block on Line 14 of
 [tests/04-ExtraCredit-Mining.js](tests/04-ExtraCredit-Mining.js#L14).
 
 ### 04 Mining
 
 **Module:** [mining.js](mining.js)
 
 All this validation stuff is great, but what is to stop someone from coming in
-and just replacing huge sections of the blockchain with their own _valid_ blocks
-and transactions? That is where _consensus_ comes in. A good consensus
-algorithm like Proof of Work or
+and replacing huge sections of the blockchain with their own _valid_ blocks and
+transactions? That is where _consensus_ comes in. A good consensus algorithm
+like Proof of Work or
 [Proof of Elapsed Time](https://medium.com/kokster/understanding-hyperledger-sawtooth-proof-of-elapsed-time-e0c303577ec1)
 (one of the algorithms available to Sawtooth), feature _Byzantine
 Fault Tolerance_: they not only ensure correctness, but also prevent bad actors
 from taking over the system and rewriting large sections of the blockchain.
 Zulfikar Ramzan does an excellent job of
 [explaining how this works for Bitcoin](https://www.khanacademy.org/economics-finance-domain/core-finance/money-and-banking/bitcoin/v/bitcoin-proof-of-work),
-but the short version is, if you randomize who gets to create new blocks, and
-always select the longest chain available, a bad actor would need to take over
-51% of the network to be effective. In a highly decentralized network, this is
-likely impractical.
+but the short version is that if you randomize who gets to create new blocks,",126,2018-06-13 17:25:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/195163758,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r195163758,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"Maybe I'm wrong, but I feel like this changes the meaning. It would make ""Now"" a little introductory clause like ""So,"" or ""Anyway,"". But the word actually helps define the remainder of the sentence. Now is _when_ all of our data is linked.",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-13 17:28:24,195170772,"@@ -172,12 +174,13 @@ hash from your first block, and generate a new hash. Rinse and repeat.
 ]
 ```
 
-Now all of our data is linked to our previous data, all the way back to our
-original ""genesis block"", which is the only block without a previous hash.
-Anyone attempting to modify one block, would also have to modify _every_ block
-that came afterward it in the chain.
+Now all of our data is linked all the way back to our original genesis block.",67,2018-06-13 17:28:24,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/195170772,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r195170772,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/90,https://github.com/hyperledger/education-cryptomoji/pull/90,"Sadly, one too many. Meant to fit it in somewhere else. `/code/part-two/README.md` is bizarrely lacking in kaomoji. Someone should submit a GitHub Issue.",db1c3959b43146ebf9a1ec46166bf268fd7f048e,2018-06-13 17:29:41,195171200,"@@ -24,17 +24,14 @@ their work.
 
 ## Prerequisites
 
-Using this project and running its components requires
-[Node 8](https://nodejs.org/) and
+This project requires [Node 8](https://nodejs.org/) and
 [Docker](https://www.docker.com/community-edition).
 
-( ◡‿◡ *)",9,2018-06-13 17:29:41,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/195171200,https://github.com/hyperledger/education-cryptomoji/pull/90#discussion_r195171200,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,missing word: familiar **with** current best practices,adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 14:57:23,190619110,"@@ -1 +1,111 @@
-# education-cryptomoji
+# Hyperledger Cryptomoji
+
+This educational curriculum includes a quick intro to blockchains generally,
+before diving into distributed application development by guiding students
+through building their own [Cryptokitties](https://www.cryptokitties.co/about)
+clone built with
+[Hyperledger Sawtooth](https://www.hyperledger.org/projects/sawtooth) and
+Javascript. It follows a bootcamp ""sprint"" format, providing a stub
+application for students to implement themselves and extensive tests to guide
+their work.
+
+＼(＾▽＾)／
+
+
+## Prerequisites
+
+Using this project and running its components requires
+[Node 8](https://nodejs.org/) and
+[Docker](https://www.docker.com/community-edition).
+
+( ◡‿◡ *)
+
+
+## Sections
+
+The curriculum is broken up into two parts. Although they build on one another,
+if you are already familiar with blockchain basics you can likely skip part
+one. For detailed instructions on each section, head to their individual
+READMEs.
+
+### Part One: DIY Blockchain
+
+**README:** [code/part-one/README.md](code/part-one/README.md)
+
+**Duration:** 5-10 hours
+
+**Concepts:**
+- Basic blockchain structure
+- Hashing
+- Signing
+- Consensus
+
+Part one introduces you to general blockchain concepts by walking you through
+building your own. You should walk away with a basic working knowledge of
+hashing, signing, consensus algorithms, and the blockchain data structure
+itself.
+
+＼(〇_ｏ)／
+
+
+### Part Two: Sawtooth Cryptomoji
+
+**README:** [code/part-two/README.md](code/part-two/README.md)
+
+**Duration:** 20-40 hours
+
+**Concepts:**
+- Hyperledger Sawtooth overview
+- Writing clients
+    - Building transactions and batches
+    - Interacting with the Sawtooth REST API
+- Writing Transaction Processors
+    - Reading and writing state
+    - Validating payloads
+
+Part two is the actual Cryptomoji app. It should give you a detailed
+understanding of how to build both clients and Transaction Processors on
+Hyperledger Sawtooth. When you're done you will have a working full-stack
+application ready to be deployed on a Sawtooth blockchain.
+
+(づ￣ ³￣)づ
+
+
+### Solution Code
+
+In addition to the prompts and stub functions in the `master` branch, this repo
+includes a `solution` branch with completed versions of both sections. This is
+intended primarily as a way for students to check their work, and become
+familiar current best practices. If your intention is to complete the sprint,",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190619110,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190619110,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,minor: `it is recommended` => `we recommend`,adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 14:58:24,190619529,"@@ -1 +1,111 @@
-# education-cryptomoji
+# Hyperledger Cryptomoji
+
+This educational curriculum includes a quick intro to blockchains generally,
+before diving into distributed application development by guiding students
+through building their own [Cryptokitties](https://www.cryptokitties.co/about)
+clone built with
+[Hyperledger Sawtooth](https://www.hyperledger.org/projects/sawtooth) and
+Javascript. It follows a bootcamp ""sprint"" format, providing a stub
+application for students to implement themselves and extensive tests to guide
+their work.
+
+＼(＾▽＾)／
+
+
+## Prerequisites
+
+Using this project and running its components requires
+[Node 8](https://nodejs.org/) and
+[Docker](https://www.docker.com/community-edition).
+
+( ◡‿◡ *)
+
+
+## Sections
+
+The curriculum is broken up into two parts. Although they build on one another,
+if you are already familiar with blockchain basics you can likely skip part
+one. For detailed instructions on each section, head to their individual
+READMEs.
+
+### Part One: DIY Blockchain
+
+**README:** [code/part-one/README.md](code/part-one/README.md)
+
+**Duration:** 5-10 hours
+
+**Concepts:**
+- Basic blockchain structure
+- Hashing
+- Signing
+- Consensus
+
+Part one introduces you to general blockchain concepts by walking you through
+building your own. You should walk away with a basic working knowledge of
+hashing, signing, consensus algorithms, and the blockchain data structure
+itself.
+
+＼(〇_ｏ)／
+
+
+### Part Two: Sawtooth Cryptomoji
+
+**README:** [code/part-two/README.md](code/part-two/README.md)
+
+**Duration:** 20-40 hours
+
+**Concepts:**
+- Hyperledger Sawtooth overview
+- Writing clients
+    - Building transactions and batches
+    - Interacting with the Sawtooth REST API
+- Writing Transaction Processors
+    - Reading and writing state
+    - Validating payloads
+
+Part two is the actual Cryptomoji app. It should give you a detailed
+understanding of how to build both clients and Transaction Processors on
+Hyperledger Sawtooth. When you're done you will have a working full-stack
+application ready to be deployed on a Sawtooth blockchain.
+
+(づ￣ ³￣)づ
+
+
+### Solution Code
+
+In addition to the prompts and stub functions in the `master` branch, this repo
+includes a `solution` branch with completed versions of both sections. This is
+intended primarily as a way for students to check their work, and become
+familiar current best practices. If your intention is to complete the sprint,
+it is recommended that you do not use this solution code as a way to get",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190619529,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190619529,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,+1 for showcasing my fav: ಠ_ಠ,adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 15:22:09,190628230,"@@ -1,54 +1,589 @@
 # Part-Two: Cryptomoji
 
-The task for part two, will be to build a working Hyperledger Sawtooth app,
-which will allow the breeding and trading of unique ""cryptomoji"" on the
-blockchain. This app includes a number of components, which can be run using
-[Docker](https://www.docker.com/what-docker). After cloning this repo, follow
-the instructions specific to your OS to install and run whatever components are
-required to use `docker` and `docker-compose` from your command line.
+The task for part two will be to build a working distributed application on
+[Hyperledger Sawtooth](https://www.hyperledger.org/projects/sawtooth), a
+general-purpose enterprise blockchain. This app, will allow users to collect,
+breed, and trade collectible _kaomoji_, strings of characters that look like
+faces such as (ಠ_ಠ), ( ͡° ͜ʖ ͡°), and ᕕ( ᐛ )ᕗ.",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190628230,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190628230,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,"remove extra word:
> with a minimum ~of~ effort",adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 15:46:33,190637537,"@@ -1,54 +1,589 @@
 # Part-Two: Cryptomoji
 
-The task for part two, will be to build a working Hyperledger Sawtooth app,
-which will allow the breeding and trading of unique ""cryptomoji"" on the
-blockchain. This app includes a number of components, which can be run using
-[Docker](https://www.docker.com/what-docker). After cloning this repo, follow
-the instructions specific to your OS to install and run whatever components are
-required to use `docker` and `docker-compose` from your command line.
+The task for part two will be to build a working distributed application on
+[Hyperledger Sawtooth](https://www.hyperledger.org/projects/sawtooth), a
+general-purpose enterprise blockchain. This app, will allow users to collect,
+breed, and trade collectible _kaomoji_, strings of characters that look like
+faces such as (ಠ_ಠ), ( ͡° ͜ʖ ͡°), and ᕕ( ᐛ )ᕗ.
 
-## Components
+Powering your _cryptomoji_, will be a number of components, which will be run
+in individual ""containers"" using [Docker](https://www.docker.com/what-docker).
+After cloning this repo and installing Node, follow the instructions specific
+to your OS to install and run whatever components are required to use `docker`
+and `docker-compose` from your command line.
 
-Each component has its own docker container:
+## Contents
 
-- `validator` - the Sawtooth validator, available at tcp://localhost:4004
-- `rest-api` - the Sawtooth REST API, available at http://localhost:8008
-- `client` - the front end for your app, served out of `client/public`
-to http://localhost:8000
-- `processor` - your transaction processor, located in `processor/`
-- `shell` - a Sawtooth environment for running shell commands
-- `settings-tp` - a built in Sawtooth transaction processor
+- [Using Docker](#using-docker)
+    * [Components](#components)
+    * [Start/Stop Commands](#start-stop-commands)
+    * [Entering a Container](#entering-a-container)
+- [The Curriculum](#the-curriculum)
+    * [Cryptomoji Lecture](#cryptomoji-lecture)
+    * [Sawtooth Documentation](#sawtooth-documentation)
+- [The Project](#the-project)
+    * [Client](#client)
+    * [Transaction Processor](#transaction-processor)
+- [The Design](#the-design)
+    * [Encoding Data](#encoding-data)
+    * [State Entities](#state-entities)
+        - [Cryptomoji](#cryptomoji)
+        - [Collection](#collection)
+        - [Sire Listing](#sire-listing)
+    * [Addressing](#addressing)
+        - [Namespace](#namespace)
+        - [Resource Prefix](#resource-prefix)
+        - [Collection](#collection)
+        - [Collection Prefix](#collection-prefix)
+        - [Cryptomoji](#cryptomoji)
+        - [Sire Listing](#sire-listing)
+    * [Payloads](#payloads)
+        - [Create Collection](#create-collection)
+        - [Select Sire](#select-sire)
+        - [Breed Moji](#breed-moji)
+- [Extra Credit](#extra-credit)
+    * [State Entities](#state-entities)
+        - [Offer](#offer)
+    * [Addressing](#addressing)
+        - [Offer](#offer)
+    * [Payloads](#payloads)
+        - [Create Offer](#create-offer)
+        - [Add Response](#add-response)
+        - [Accept Response](#accept-response)
+        - [Cancel Offer](#cancel-offer)
+        - [Cancel Response](#cancel-response)
+- [Nightmare Mode](#nightmare-mode)
 
-## Docker Commands
+## Using Docker
+
+Docker is a virtualization tool that makes it much easier to deploy code in
+a variety of environments, with a minimum of effort. Dockerfiles create",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190637537,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190637537,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,minor formatting: markdown should be `**Sire Listings:**` instead of `**Sire:** Listings`,adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 16:23:51,190649772,"@@ -1,54 +1,589 @@
 # Part-Two: Cryptomoji
 
-The task for part two, will be to build a working Hyperledger Sawtooth app,
-which will allow the breeding and trading of unique ""cryptomoji"" on the
-blockchain. This app includes a number of components, which can be run using
-[Docker](https://www.docker.com/what-docker). After cloning this repo, follow
-the instructions specific to your OS to install and run whatever components are
-required to use `docker` and `docker-compose` from your command line.
+The task for part two will be to build a working distributed application on
+[Hyperledger Sawtooth](https://www.hyperledger.org/projects/sawtooth), a
+general-purpose enterprise blockchain. This app, will allow users to collect,
+breed, and trade collectible _kaomoji_, strings of characters that look like
+faces such as (ಠ_ಠ), ( ͡° ͜ʖ ͡°), and ᕕ( ᐛ )ᕗ.
 
-## Components
+Powering your _cryptomoji_, will be a number of components, which will be run
+in individual ""containers"" using [Docker](https://www.docker.com/what-docker).
+After cloning this repo and installing Node, follow the instructions specific
+to your OS to install and run whatever components are required to use `docker`
+and `docker-compose` from your command line.
 
-Each component has its own docker container:
+## Contents
 
-- `validator` - the Sawtooth validator, available at tcp://localhost:4004
-- `rest-api` - the Sawtooth REST API, available at http://localhost:8008
-- `client` - the front end for your app, served out of `client/public`
-to http://localhost:8000
-- `processor` - your transaction processor, located in `processor/`
-- `shell` - a Sawtooth environment for running shell commands
-- `settings-tp` - a built in Sawtooth transaction processor
+- [Using Docker](#using-docker)
+    * [Components](#components)
+    * [Start/Stop Commands](#start-stop-commands)
+    * [Entering a Container](#entering-a-container)
+- [The Curriculum](#the-curriculum)
+    * [Cryptomoji Lecture](#cryptomoji-lecture)
+    * [Sawtooth Documentation](#sawtooth-documentation)
+- [The Project](#the-project)
+    * [Client](#client)
+    * [Transaction Processor](#transaction-processor)
+- [The Design](#the-design)
+    * [Encoding Data](#encoding-data)
+    * [State Entities](#state-entities)
+        - [Cryptomoji](#cryptomoji)
+        - [Collection](#collection)
+        - [Sire Listing](#sire-listing)
+    * [Addressing](#addressing)
+        - [Namespace](#namespace)
+        - [Resource Prefix](#resource-prefix)
+        - [Collection](#collection)
+        - [Collection Prefix](#collection-prefix)
+        - [Cryptomoji](#cryptomoji)
+        - [Sire Listing](#sire-listing)
+    * [Payloads](#payloads)
+        - [Create Collection](#create-collection)
+        - [Select Sire](#select-sire)
+        - [Breed Moji](#breed-moji)
+- [Extra Credit](#extra-credit)
+    * [State Entities](#state-entities)
+        - [Offer](#offer)
+    * [Addressing](#addressing)
+        - [Offer](#offer)
+    * [Payloads](#payloads)
+        - [Create Offer](#create-offer)
+        - [Add Response](#add-response)
+        - [Accept Response](#accept-response)
+        - [Cancel Offer](#cancel-offer)
+        - [Cancel Response](#cancel-response)
+- [Nightmare Mode](#nightmare-mode)
 
-## Docker Commands
+## Using Docker
+
+Docker is a virtualization tool that makes it much easier to deploy code in
+a variety of environments, with a minimum of effort. Dockerfiles create
+""images"" with all of the dependencies your code needs ready to go. From these
+images, individual ""containers"" can be created and run at will, and destroyed
+when you are done with them. The effect is like having every component running
+on it's own virtual computer, which you can reset to factory settings at any
+time, in a matter of seconds. It's a profoundly useful tool, which takes a
+little getting used to, but we'll go over the basics here.
+
+### Components
+
+Included in this directory is a [docker-compose](docker-compose.yaml) file. It
+includes all of the instructions Docker needs to start up multiple components
+and network them together. This includes some custom components built from your
+source code, and some prepackaged Sawtooth components downloaded from
+[DockerHub](https://hub.docker.com/search/?isAutomated=0&isOfficial=0&page=1&pullCount=0&q=sawtooth&starCount=0):
+
+| Name          | Endpoint              | Source    | Description
+| ------------- | --------------------- | --------- | ------------------------
+| validator     | tcp://localhost:4004  | DockerHub | Validates blocks and transactions
+| rest-api      | http://localhost:8008 | DockerHub | Provides blockchain via HTTP/JSON
+| processor     | --                    | custom    | The core smart contract logic for your app
+| client        | http://localhost:3000 | custom    | Your front-end, served from `client/public/`
+| shell         | --                    | DockerHub | Environment for running Sawtooth commands
+| settings-tp   | --                    | DockerHub | Built-in Sawtooth transaction processor
+
+### Start/Stop Commands
+
+First you will use Docker's `docker-compose up` command to start all
+components. This will take quite awhile the first time, but afterwards should
+be very fast, no more than a minute. If you are in the same directory as the
+compose file, you don't need to provide it with any other parameters:
 
-To start all components, navigate to the `part-two` directory and use Docker:
 ```bash
 cd code/part-two/
 docker-compose up
 ```
 
-Once running, these components can be stopped using `ctrl-C`, or stopped _and_
-destroyed (they will be rebuilt on your next `up`) with:
+This builds and starts up _everything_ defined in your compose file! Once
+running, you can stop everything with the keyboard shortcut: `ctrl-C`. If you
+want to stop _and_ destroy every container (they will be rebuilt on your next
+`up`) use the command:
+
 ```bash
-docker-compose down
+docker-compose down -v
 ```
 
-You can also stop, start, or restart individual components using their
-container name. For example, with our transaction processor:
+That is really all you need. These commands are the start/stop buttons for your
+app. You can develop just fine by starting things up, making some changes,
+tearing everything down, and then starting it all up again. However, if you
+want for fine-grained control, it is possible to leave everything else running
+but stop, start, or restart an individual component using its container name
+(listed in the table above). For example, with our transaction processor we
+would open a new terminal window and run one of these commands:
+
 ```bash
 docker stop processor
 docker start processor
 docker restart processor
 ```
 
-Finally, if you want to run commands from within a container, you can use the
-`exec`. This is particularly useful when you want to use the bash command in
-the shell container:
+### Entering a Container
+
+There is nothing in the curriculum that would require you to do this, but if
+you are curious, it is possible to _enter_ a running container if you want to
+run commands from within. This is particularly useful with the ""shell""
+container when you want to run
+[Sawtooth CLI](https://sawtooth.hyperledger.org/docs/core/releases/1.0/cli/sawtooth.html)
+commands. You would do this with `exec`, which allows you run any command from
+within a container, and specify `bash` as the command you want to run:
+
 ```bash
 docker exec -it shell bash
 ```
 
-If you need to exit a container terminal, simply use:
+An important note! When you are within a container, you cannot use ""localhost""
+for networking. Remember, each container is its own little computer, complete
+with it's own localhost. Instead, Docker provide the service names from the
+compose file as URLs. So for example, if you were inside the shell container
+and wanted to get the blocks from the REST API, you would run:
+
+```bash
+curl http://rest-api:8008/blocks
+```
+
+Finally, if you need to exit a container, simply use:
+
 ```bash
 exit
 ```
+
+## The Curriculum
+
+### Cryptomoji Lecture
+
+Eventually there will be a video lecture included with this repo, but it has
+not been completed yet. Watch this space.
+
+### Sawtooth Documentation
+
+Sawtooth has in-depth documentation covering many aspects of the platform. It
+can be a little overwhelming at first! For the new distributed app developer
+working with Javascript, start with these documents:
+
+- [Sawtooth Introduction](https://sawtooth.hyperledger.org/docs/core/releases/1.0/introduction.html)
+- Architecture
+    * [Global State](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/global_state.html)
+    * [Transactions and Batches](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/transactions_and_batches.html)
+    * [The REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
+- The Javascript SDK
+    * [Building and Submitting Transactions](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_submit_tutorial_js.html)
+    * [Transaction Processor Tutorial](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_TP_tutorial_js.html)
+
+## The Project
+
+When building an application on Sawtooth, much of the nitty gritty of running
+and validating a blockchain is handled for you. You won't have to verify
+signatures or hashes, or validate blocks, or confirm consensus. Instead, you
+must consider how the logic of your application can be broken up into discrete
+transaction payloads, and how those payloads will alter state data. The typical
+workflow looks something like this:
+
+1. The user initializes some action, i.e. _set 'a' to 1_.
+2. The client takes that action and:
+    - encodes it in a payload, maybe simply `{""a"": 1}`
+    - wraps the payload in a transaction and a batch
+    - submits it to the validator
+3. The validator confirms the transaction and batch are valid
+4. The transaction processor gets the payload and:
+    - decodes it
+    - verifies it is a valid action ('a' _can_ be set to 1)
+    - modifies state in a way that satisfies the action
+      (i.e. address _aaaaaa..._ becomes _000001_)
+5. The client reads state, and decodes the data there for display
+
+You are responsible for generating just two major components (the client and
+the transaction processor), and for keeping those components in agreement on
+how to encode payloads and state. This application-wide logic is typically
+referred to in Sawtooth with the general term: ""transaction family"".
+
+For cryptomoji, each component has their own directory, their own tests, and
+their own READMEs. There is no particular order they need to be built in, but
+it is recommended you develop them in parallel based on functionality. For
+example, implement ""collection"" creation on _both_ the client and the processor
+before moving on to ""sire"" selection on _either_.
+
+For the broad transaction family design, continue reading _this_ README.
+
+### Client
+
+**Directory:** [code/part-two/client/](client/)
+**README:** [code/part-two/client/README.md](client/README.md)
+**Tests:** [code/part-two/client/tests/](client/tests/)
+
+A React/Webpack UI which allows users to create collections of cryptomoji,
+breed them, and (in the extra credit) trade with other users.
+
+### Transaction Processor
+
+**Directory:** [code/part-two/processor/](processor/)
+**README:** [code/part-two/processor/README.md](processor/README.md)
+**Tests:** [code/part-two/processor/tests/](processor/tests/)
+
+A Node.js process which validates payloads sent from the client, writing data
+permanently to the blockchain.
+
+## The Design
+
+There are a few basic questions you need to answer when designing your
+transaction family:
+- What do my transaction payloads look like?
+- What does data stored in state look like?
+- What addresses in state is that data stored under?
+
+So let's answer these questions for _Cryptomoji_.
+
+### Encoding Data
+
+For simplicity and familiarity we are going to encode both payloads and state
+data as JSON. To be clear, JSON would _not_ be a great choice in production. It
+is not space efficient, and worse, it is not _deterministic_. Determinism is
+very important when writing state to the blockchain. Many many nodes will be
+attempting to the write the same state, and if it is slightly different (like
+say, the keys are in a different order), they will think the transactions are
+invalid.
+
+But JSON is easy and accessible, especially in Javascript, and it is possible
+to [create sorted JSON strings](https://stackoverflow.com/a/16168003/4284401),
+which should solve the determinism issue (at least well enough for our
+purposes). Of course, JSON itself isn't quite enough, because we need _raw
+bytes_ not a string. For byte encoding we are going to use Node's
+[Buffers](https://nodejs.org/api/buffer.html) again.
+
+So any sort of encode we do should look something like this:
+
+```javascript
+Buffer.from(JSON.stringify(dataObj, getSortedKeys(dataObj)))
+```
+
+And decoding would look like this:
+
+```javascript
+JSON.parse(dataBytes.toString())
+```
+
+### State Entities
+
+#### Cryptomoji
+
+```json
+{
+    ""dna"": ""<hex string>"",
+    ""owner"": ""<string, public key>"",
+    ""breeder"": ""<string, moji address>"",
+    ""sire"": ""<string, moji address>"",
+    ""bred"": [ ""<strings, moji addresses>"" ],
+    ""sired"": [ ""<strings, moji addresses>"" ]
+}
+```
+
+Unique breedable critters. They have a DNA string of 36 hex characters, which a
+parsing tool included with the client will convert into an adorable _kaomoji_
+for display. Aside from storing the identity of their owner, they will also
+include any breeding information they might have. First the identities of their
+parents (breeder/sire), as well as the identities of any children they
+produced, either in the role of a breeder or a sire (bred/sired).
+
+#### Collection
+
+```json
+{
+    ""key"": ""<string, public key>"",
+    ""moji"": [ ""<strings, moji addresses>"" ]
+}
+```
+
+A collection of cryptomoji owner by a public key. Each new collection will be
+created with three new ""gen 0"" moji with no breeders or sires.
+
+#### Sire Listing
+
+```json
+{
+    ""owner"": ""<string, public key>"",
+    ""sire"": ""<string, moji address>""
+}
+```
+
+Each collection is allowed to select one cryptomoji as their sire. This makes
+it publicly available for other collection to use for breeding.
+
+### Addressing
+
+All state addresses in Sawtooth are 35 bytes long, typically expressed as 70
+hexadecimal characters. By convention, the first six characters are reserved
+for a namespace for the transaction family, allowing many families to coexist
+on the same blockchain. The remaining 64 characters can be used however that
+application prefers.
+
+#### Namespace
+
+For the first six characters, we'll use the first six characters of a SHA-512
+hash of the application name, _“cryptomoji”_:
+
+```
+5f4d76
+```
+
+#### Resource Prefix
+
+Next a one byte (two characters) is a short prefix designating what type of
+resource is stored at the address:
+
+- **Collections:** `00`
+- **Cryptomoji:** `01`
+- **Sire:** Listings `02`",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190649772,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190649772,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,"I think lns 450, 451, 454, 455 should have double quotes around the values if we want to be consistent w/ how we represented this json information previously
```json
{
    ""owner"": ""<string, public key>"",
    ""moji"": [ ""<strings, moji addresses>"" ],
    ""responses"": [
        {
            ""approver"": ""<string, public key>"",
            ""moji"": [ ""<strings, moji addresses>"" ]
        }
    ]
}
```
",adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 16:36:48,190653576,"@@ -1,54 +1,589 @@
 # Part-Two: Cryptomoji
 
-The task for part two, will be to build a working Hyperledger Sawtooth app,
-which will allow the breeding and trading of unique ""cryptomoji"" on the
-blockchain. This app includes a number of components, which can be run using
-[Docker](https://www.docker.com/what-docker). After cloning this repo, follow
-the instructions specific to your OS to install and run whatever components are
-required to use `docker` and `docker-compose` from your command line.
+The task for part two will be to build a working distributed application on
+[Hyperledger Sawtooth](https://www.hyperledger.org/projects/sawtooth), a
+general-purpose enterprise blockchain. This app, will allow users to collect,
+breed, and trade collectible _kaomoji_, strings of characters that look like
+faces such as (ಠ_ಠ), ( ͡° ͜ʖ ͡°), and ᕕ( ᐛ )ᕗ.
 
-## Components
+Powering your _cryptomoji_, will be a number of components, which will be run
+in individual ""containers"" using [Docker](https://www.docker.com/what-docker).
+After cloning this repo and installing Node, follow the instructions specific
+to your OS to install and run whatever components are required to use `docker`
+and `docker-compose` from your command line.
 
-Each component has its own docker container:
+## Contents
 
-- `validator` - the Sawtooth validator, available at tcp://localhost:4004
-- `rest-api` - the Sawtooth REST API, available at http://localhost:8008
-- `client` - the front end for your app, served out of `client/public`
-to http://localhost:8000
-- `processor` - your transaction processor, located in `processor/`
-- `shell` - a Sawtooth environment for running shell commands
-- `settings-tp` - a built in Sawtooth transaction processor
+- [Using Docker](#using-docker)
+    * [Components](#components)
+    * [Start/Stop Commands](#start-stop-commands)
+    * [Entering a Container](#entering-a-container)
+- [The Curriculum](#the-curriculum)
+    * [Cryptomoji Lecture](#cryptomoji-lecture)
+    * [Sawtooth Documentation](#sawtooth-documentation)
+- [The Project](#the-project)
+    * [Client](#client)
+    * [Transaction Processor](#transaction-processor)
+- [The Design](#the-design)
+    * [Encoding Data](#encoding-data)
+    * [State Entities](#state-entities)
+        - [Cryptomoji](#cryptomoji)
+        - [Collection](#collection)
+        - [Sire Listing](#sire-listing)
+    * [Addressing](#addressing)
+        - [Namespace](#namespace)
+        - [Resource Prefix](#resource-prefix)
+        - [Collection](#collection)
+        - [Collection Prefix](#collection-prefix)
+        - [Cryptomoji](#cryptomoji)
+        - [Sire Listing](#sire-listing)
+    * [Payloads](#payloads)
+        - [Create Collection](#create-collection)
+        - [Select Sire](#select-sire)
+        - [Breed Moji](#breed-moji)
+- [Extra Credit](#extra-credit)
+    * [State Entities](#state-entities)
+        - [Offer](#offer)
+    * [Addressing](#addressing)
+        - [Offer](#offer)
+    * [Payloads](#payloads)
+        - [Create Offer](#create-offer)
+        - [Add Response](#add-response)
+        - [Accept Response](#accept-response)
+        - [Cancel Offer](#cancel-offer)
+        - [Cancel Response](#cancel-response)
+- [Nightmare Mode](#nightmare-mode)
 
-## Docker Commands
+## Using Docker
+
+Docker is a virtualization tool that makes it much easier to deploy code in
+a variety of environments, with a minimum of effort. Dockerfiles create
+""images"" with all of the dependencies your code needs ready to go. From these
+images, individual ""containers"" can be created and run at will, and destroyed
+when you are done with them. The effect is like having every component running
+on it's own virtual computer, which you can reset to factory settings at any
+time, in a matter of seconds. It's a profoundly useful tool, which takes a
+little getting used to, but we'll go over the basics here.
+
+### Components
+
+Included in this directory is a [docker-compose](docker-compose.yaml) file. It
+includes all of the instructions Docker needs to start up multiple components
+and network them together. This includes some custom components built from your
+source code, and some prepackaged Sawtooth components downloaded from
+[DockerHub](https://hub.docker.com/search/?isAutomated=0&isOfficial=0&page=1&pullCount=0&q=sawtooth&starCount=0):
+
+| Name          | Endpoint              | Source    | Description
+| ------------- | --------------------- | --------- | ------------------------
+| validator     | tcp://localhost:4004  | DockerHub | Validates blocks and transactions
+| rest-api      | http://localhost:8008 | DockerHub | Provides blockchain via HTTP/JSON
+| processor     | --                    | custom    | The core smart contract logic for your app
+| client        | http://localhost:3000 | custom    | Your front-end, served from `client/public/`
+| shell         | --                    | DockerHub | Environment for running Sawtooth commands
+| settings-tp   | --                    | DockerHub | Built-in Sawtooth transaction processor
+
+### Start/Stop Commands
+
+First you will use Docker's `docker-compose up` command to start all
+components. This will take quite awhile the first time, but afterwards should
+be very fast, no more than a minute. If you are in the same directory as the
+compose file, you don't need to provide it with any other parameters:
 
-To start all components, navigate to the `part-two` directory and use Docker:
 ```bash
 cd code/part-two/
 docker-compose up
 ```
 
-Once running, these components can be stopped using `ctrl-C`, or stopped _and_
-destroyed (they will be rebuilt on your next `up`) with:
+This builds and starts up _everything_ defined in your compose file! Once
+running, you can stop everything with the keyboard shortcut: `ctrl-C`. If you
+want to stop _and_ destroy every container (they will be rebuilt on your next
+`up`) use the command:
+
 ```bash
-docker-compose down
+docker-compose down -v
 ```
 
-You can also stop, start, or restart individual components using their
-container name. For example, with our transaction processor:
+That is really all you need. These commands are the start/stop buttons for your
+app. You can develop just fine by starting things up, making some changes,
+tearing everything down, and then starting it all up again. However, if you
+want for fine-grained control, it is possible to leave everything else running
+but stop, start, or restart an individual component using its container name
+(listed in the table above). For example, with our transaction processor we
+would open a new terminal window and run one of these commands:
+
 ```bash
 docker stop processor
 docker start processor
 docker restart processor
 ```
 
-Finally, if you want to run commands from within a container, you can use the
-`exec`. This is particularly useful when you want to use the bash command in
-the shell container:
+### Entering a Container
+
+There is nothing in the curriculum that would require you to do this, but if
+you are curious, it is possible to _enter_ a running container if you want to
+run commands from within. This is particularly useful with the ""shell""
+container when you want to run
+[Sawtooth CLI](https://sawtooth.hyperledger.org/docs/core/releases/1.0/cli/sawtooth.html)
+commands. You would do this with `exec`, which allows you run any command from
+within a container, and specify `bash` as the command you want to run:
+
 ```bash
 docker exec -it shell bash
 ```
 
-If you need to exit a container terminal, simply use:
+An important note! When you are within a container, you cannot use ""localhost""
+for networking. Remember, each container is its own little computer, complete
+with it's own localhost. Instead, Docker provide the service names from the
+compose file as URLs. So for example, if you were inside the shell container
+and wanted to get the blocks from the REST API, you would run:
+
+```bash
+curl http://rest-api:8008/blocks
+```
+
+Finally, if you need to exit a container, simply use:
+
 ```bash
 exit
 ```
+
+## The Curriculum
+
+### Cryptomoji Lecture
+
+Eventually there will be a video lecture included with this repo, but it has
+not been completed yet. Watch this space.
+
+### Sawtooth Documentation
+
+Sawtooth has in-depth documentation covering many aspects of the platform. It
+can be a little overwhelming at first! For the new distributed app developer
+working with Javascript, start with these documents:
+
+- [Sawtooth Introduction](https://sawtooth.hyperledger.org/docs/core/releases/1.0/introduction.html)
+- Architecture
+    * [Global State](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/global_state.html)
+    * [Transactions and Batches](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/transactions_and_batches.html)
+    * [The REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
+- The Javascript SDK
+    * [Building and Submitting Transactions](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_submit_tutorial_js.html)
+    * [Transaction Processor Tutorial](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_TP_tutorial_js.html)
+
+## The Project
+
+When building an application on Sawtooth, much of the nitty gritty of running
+and validating a blockchain is handled for you. You won't have to verify
+signatures or hashes, or validate blocks, or confirm consensus. Instead, you
+must consider how the logic of your application can be broken up into discrete
+transaction payloads, and how those payloads will alter state data. The typical
+workflow looks something like this:
+
+1. The user initializes some action, i.e. _set 'a' to 1_.
+2. The client takes that action and:
+    - encodes it in a payload, maybe simply `{""a"": 1}`
+    - wraps the payload in a transaction and a batch
+    - submits it to the validator
+3. The validator confirms the transaction and batch are valid
+4. The transaction processor gets the payload and:
+    - decodes it
+    - verifies it is a valid action ('a' _can_ be set to 1)
+    - modifies state in a way that satisfies the action
+      (i.e. address _aaaaaa..._ becomes _000001_)
+5. The client reads state, and decodes the data there for display
+
+You are responsible for generating just two major components (the client and
+the transaction processor), and for keeping those components in agreement on
+how to encode payloads and state. This application-wide logic is typically
+referred to in Sawtooth with the general term: ""transaction family"".
+
+For cryptomoji, each component has their own directory, their own tests, and
+their own READMEs. There is no particular order they need to be built in, but
+it is recommended you develop them in parallel based on functionality. For
+example, implement ""collection"" creation on _both_ the client and the processor
+before moving on to ""sire"" selection on _either_.
+
+For the broad transaction family design, continue reading _this_ README.
+
+### Client
+
+**Directory:** [code/part-two/client/](client/)
+**README:** [code/part-two/client/README.md](client/README.md)
+**Tests:** [code/part-two/client/tests/](client/tests/)
+
+A React/Webpack UI which allows users to create collections of cryptomoji,
+breed them, and (in the extra credit) trade with other users.
+
+### Transaction Processor
+
+**Directory:** [code/part-two/processor/](processor/)
+**README:** [code/part-two/processor/README.md](processor/README.md)
+**Tests:** [code/part-two/processor/tests/](processor/tests/)
+
+A Node.js process which validates payloads sent from the client, writing data
+permanently to the blockchain.
+
+## The Design
+
+There are a few basic questions you need to answer when designing your
+transaction family:
+- What do my transaction payloads look like?
+- What does data stored in state look like?
+- What addresses in state is that data stored under?
+
+So let's answer these questions for _Cryptomoji_.
+
+### Encoding Data
+
+For simplicity and familiarity we are going to encode both payloads and state
+data as JSON. To be clear, JSON would _not_ be a great choice in production. It
+is not space efficient, and worse, it is not _deterministic_. Determinism is
+very important when writing state to the blockchain. Many many nodes will be
+attempting to the write the same state, and if it is slightly different (like
+say, the keys are in a different order), they will think the transactions are
+invalid.
+
+But JSON is easy and accessible, especially in Javascript, and it is possible
+to [create sorted JSON strings](https://stackoverflow.com/a/16168003/4284401),
+which should solve the determinism issue (at least well enough for our
+purposes). Of course, JSON itself isn't quite enough, because we need _raw
+bytes_ not a string. For byte encoding we are going to use Node's
+[Buffers](https://nodejs.org/api/buffer.html) again.
+
+So any sort of encode we do should look something like this:
+
+```javascript
+Buffer.from(JSON.stringify(dataObj, getSortedKeys(dataObj)))
+```
+
+And decoding would look like this:
+
+```javascript
+JSON.parse(dataBytes.toString())
+```
+
+### State Entities
+
+#### Cryptomoji
+
+```json
+{
+    ""dna"": ""<hex string>"",
+    ""owner"": ""<string, public key>"",
+    ""breeder"": ""<string, moji address>"",
+    ""sire"": ""<string, moji address>"",
+    ""bred"": [ ""<strings, moji addresses>"" ],
+    ""sired"": [ ""<strings, moji addresses>"" ]
+}
+```
+
+Unique breedable critters. They have a DNA string of 36 hex characters, which a
+parsing tool included with the client will convert into an adorable _kaomoji_
+for display. Aside from storing the identity of their owner, they will also
+include any breeding information they might have. First the identities of their
+parents (breeder/sire), as well as the identities of any children they
+produced, either in the role of a breeder or a sire (bred/sired).
+
+#### Collection
+
+```json
+{
+    ""key"": ""<string, public key>"",
+    ""moji"": [ ""<strings, moji addresses>"" ]
+}
+```
+
+A collection of cryptomoji owner by a public key. Each new collection will be
+created with three new ""gen 0"" moji with no breeders or sires.
+
+#### Sire Listing
+
+```json
+{
+    ""owner"": ""<string, public key>"",
+    ""sire"": ""<string, moji address>""
+}
+```
+
+Each collection is allowed to select one cryptomoji as their sire. This makes
+it publicly available for other collection to use for breeding.
+
+### Addressing
+
+All state addresses in Sawtooth are 35 bytes long, typically expressed as 70
+hexadecimal characters. By convention, the first six characters are reserved
+for a namespace for the transaction family, allowing many families to coexist
+on the same blockchain. The remaining 64 characters can be used however that
+application prefers.
+
+#### Namespace
+
+For the first six characters, we'll use the first six characters of a SHA-512
+hash of the application name, _“cryptomoji”_:
+
+```
+5f4d76
+```
+
+#### Resource Prefix
+
+Next a one byte (two characters) is a short prefix designating what type of
+resource is stored at the address:
+
+- **Collections:** `00`
+- **Cryptomoji:** `01`
+- **Sire:** Listings `02`
+
+#### Collection
+
+The final 62 characters of a collection’s address are the first 62 characters
+of a SHA-512 hash of its public key.
+
+```
+5f4d76 00 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
+```
+
+_Note that spaces have been added for readability. Actual addresses have no
+spaces._
+
+#### Collection Prefix
+
+For both cryptomoji and offers (see extra credit), the next 8 characters are a
+prefix for the collection they belong to. These are generated from the first
+eight characters of a SHA-512 hash of the collection’s public key.
+
+```
+1b96dbb5
+```
+
+#### Cryptomoji
+
+The final 54 characters of a cryptomoji’s address is the first 54 characters of
+a SHA-512 hash of their DNA string.
+
+```
+5f4d76 01 1b96dbb5 d1dd9beeb54338f0650588247d5b14af9609a59a9df42a61cfa7b7
+```
+
+#### Sire Listing
+
+The last 62 characters of a Sire Listing’s address are the first 62 characters
+of a SHA-512 hash of the owner’s public key.
+
+```
+5f4d76 02 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
+```
+
+### Payloads
+
+Cryptomoji payloads will be objects, each with an `""action""` key that
+designates what event should occur in the transaction processor. Each actions
+will be spelled out by a specific string written in CONSTANT_CASE. Any
+additional data required, will be included in other keys particular to that
+payload.
+
+#### Create Collection
+
+```json
+{
+    ""action"": ""CREATE_COLLECTION""
+}
+```
+
+_Validation:_
+- Signer must not already have a collection
+
+Creates a new collection for the signer of the transaction with three new
+pseudo-random (but deterministic!) cryptomoji. Like other actions, the identity
+of the signer will come from their public key in the transaction header, and so
+is not included in the payload itself.
+
+#### Select Sire
+
+```json
+{
+    ""action"": ""SELECT_SIRE"",
+    ""sire"": ""<string, moji address>""
+}
+```
+
+_Validation:_
+- Signer must have a collection
+- The cryptomoji must exist
+- Signer must own the sire
+
+Lists a cryptomoji as a collection's sire, indicating it is available for other
+collections to breed with. Collections may only have one sire at a time.
+
+#### Breed Moji
+
+```json
+{
+    ""action"": ""BREED_MOJI"",
+    ""sire"": ""<string, moji address>"",
+    ""breeder"": ""<string, moji address>""
+}
+```
+
+_Validation:_
+- Signer must have a collection
+- The cryptomoji must exist
+- Signer must own the breeder
+- Sire must be listed as a sire
+
+Creates a new cryptomoji for the owner of the _breeder_, which is a
+pseudo-random combination of the DNA from the breeder and the sire.
+
+## Extra Credit
+
+For extra credit, add the capability for collections to trade cryptomoji
+between each other. This is harder than it sounds. One user will need to create
+an offer, while others add responses until the offer owner accepts them. This
+is a process that spans multiple transactions, never mind the possibility that
+one party might decide to cancel their offer or response.
+
+### State Entities
+
+#### Offer
+
+```json
+{
+    ""owner"": <string, public key>,
+    ""moji"": [ <strings, moji addresses> ],
+    ""responses"": [
+        {
+            ""approver"": <string, public key>,
+            ""moji"": [ <strings, moji addresses> ]",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190653576,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190653576,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,`due` => `do`?,adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 16:38:00,190653927,"@@ -1,54 +1,589 @@
 # Part-Two: Cryptomoji
 
-The task for part two, will be to build a working Hyperledger Sawtooth app,
-which will allow the breeding and trading of unique ""cryptomoji"" on the
-blockchain. This app includes a number of components, which can be run using
-[Docker](https://www.docker.com/what-docker). After cloning this repo, follow
-the instructions specific to your OS to install and run whatever components are
-required to use `docker` and `docker-compose` from your command line.
+The task for part two will be to build a working distributed application on
+[Hyperledger Sawtooth](https://www.hyperledger.org/projects/sawtooth), a
+general-purpose enterprise blockchain. This app, will allow users to collect,
+breed, and trade collectible _kaomoji_, strings of characters that look like
+faces such as (ಠ_ಠ), ( ͡° ͜ʖ ͡°), and ᕕ( ᐛ )ᕗ.
 
-## Components
+Powering your _cryptomoji_, will be a number of components, which will be run
+in individual ""containers"" using [Docker](https://www.docker.com/what-docker).
+After cloning this repo and installing Node, follow the instructions specific
+to your OS to install and run whatever components are required to use `docker`
+and `docker-compose` from your command line.
 
-Each component has its own docker container:
+## Contents
 
-- `validator` - the Sawtooth validator, available at tcp://localhost:4004
-- `rest-api` - the Sawtooth REST API, available at http://localhost:8008
-- `client` - the front end for your app, served out of `client/public`
-to http://localhost:8000
-- `processor` - your transaction processor, located in `processor/`
-- `shell` - a Sawtooth environment for running shell commands
-- `settings-tp` - a built in Sawtooth transaction processor
+- [Using Docker](#using-docker)
+    * [Components](#components)
+    * [Start/Stop Commands](#start-stop-commands)
+    * [Entering a Container](#entering-a-container)
+- [The Curriculum](#the-curriculum)
+    * [Cryptomoji Lecture](#cryptomoji-lecture)
+    * [Sawtooth Documentation](#sawtooth-documentation)
+- [The Project](#the-project)
+    * [Client](#client)
+    * [Transaction Processor](#transaction-processor)
+- [The Design](#the-design)
+    * [Encoding Data](#encoding-data)
+    * [State Entities](#state-entities)
+        - [Cryptomoji](#cryptomoji)
+        - [Collection](#collection)
+        - [Sire Listing](#sire-listing)
+    * [Addressing](#addressing)
+        - [Namespace](#namespace)
+        - [Resource Prefix](#resource-prefix)
+        - [Collection](#collection)
+        - [Collection Prefix](#collection-prefix)
+        - [Cryptomoji](#cryptomoji)
+        - [Sire Listing](#sire-listing)
+    * [Payloads](#payloads)
+        - [Create Collection](#create-collection)
+        - [Select Sire](#select-sire)
+        - [Breed Moji](#breed-moji)
+- [Extra Credit](#extra-credit)
+    * [State Entities](#state-entities)
+        - [Offer](#offer)
+    * [Addressing](#addressing)
+        - [Offer](#offer)
+    * [Payloads](#payloads)
+        - [Create Offer](#create-offer)
+        - [Add Response](#add-response)
+        - [Accept Response](#accept-response)
+        - [Cancel Offer](#cancel-offer)
+        - [Cancel Response](#cancel-response)
+- [Nightmare Mode](#nightmare-mode)
 
-## Docker Commands
+## Using Docker
+
+Docker is a virtualization tool that makes it much easier to deploy code in
+a variety of environments, with a minimum of effort. Dockerfiles create
+""images"" with all of the dependencies your code needs ready to go. From these
+images, individual ""containers"" can be created and run at will, and destroyed
+when you are done with them. The effect is like having every component running
+on it's own virtual computer, which you can reset to factory settings at any
+time, in a matter of seconds. It's a profoundly useful tool, which takes a
+little getting used to, but we'll go over the basics here.
+
+### Components
+
+Included in this directory is a [docker-compose](docker-compose.yaml) file. It
+includes all of the instructions Docker needs to start up multiple components
+and network them together. This includes some custom components built from your
+source code, and some prepackaged Sawtooth components downloaded from
+[DockerHub](https://hub.docker.com/search/?isAutomated=0&isOfficial=0&page=1&pullCount=0&q=sawtooth&starCount=0):
+
+| Name          | Endpoint              | Source    | Description
+| ------------- | --------------------- | --------- | ------------------------
+| validator     | tcp://localhost:4004  | DockerHub | Validates blocks and transactions
+| rest-api      | http://localhost:8008 | DockerHub | Provides blockchain via HTTP/JSON
+| processor     | --                    | custom    | The core smart contract logic for your app
+| client        | http://localhost:3000 | custom    | Your front-end, served from `client/public/`
+| shell         | --                    | DockerHub | Environment for running Sawtooth commands
+| settings-tp   | --                    | DockerHub | Built-in Sawtooth transaction processor
+
+### Start/Stop Commands
+
+First you will use Docker's `docker-compose up` command to start all
+components. This will take quite awhile the first time, but afterwards should
+be very fast, no more than a minute. If you are in the same directory as the
+compose file, you don't need to provide it with any other parameters:
 
-To start all components, navigate to the `part-two` directory and use Docker:
 ```bash
 cd code/part-two/
 docker-compose up
 ```
 
-Once running, these components can be stopped using `ctrl-C`, or stopped _and_
-destroyed (they will be rebuilt on your next `up`) with:
+This builds and starts up _everything_ defined in your compose file! Once
+running, you can stop everything with the keyboard shortcut: `ctrl-C`. If you
+want to stop _and_ destroy every container (they will be rebuilt on your next
+`up`) use the command:
+
 ```bash
-docker-compose down
+docker-compose down -v
 ```
 
-You can also stop, start, or restart individual components using their
-container name. For example, with our transaction processor:
+That is really all you need. These commands are the start/stop buttons for your
+app. You can develop just fine by starting things up, making some changes,
+tearing everything down, and then starting it all up again. However, if you
+want for fine-grained control, it is possible to leave everything else running
+but stop, start, or restart an individual component using its container name
+(listed in the table above). For example, with our transaction processor we
+would open a new terminal window and run one of these commands:
+
 ```bash
 docker stop processor
 docker start processor
 docker restart processor
 ```
 
-Finally, if you want to run commands from within a container, you can use the
-`exec`. This is particularly useful when you want to use the bash command in
-the shell container:
+### Entering a Container
+
+There is nothing in the curriculum that would require you to do this, but if
+you are curious, it is possible to _enter_ a running container if you want to
+run commands from within. This is particularly useful with the ""shell""
+container when you want to run
+[Sawtooth CLI](https://sawtooth.hyperledger.org/docs/core/releases/1.0/cli/sawtooth.html)
+commands. You would do this with `exec`, which allows you run any command from
+within a container, and specify `bash` as the command you want to run:
+
 ```bash
 docker exec -it shell bash
 ```
 
-If you need to exit a container terminal, simply use:
+An important note! When you are within a container, you cannot use ""localhost""
+for networking. Remember, each container is its own little computer, complete
+with it's own localhost. Instead, Docker provide the service names from the
+compose file as URLs. So for example, if you were inside the shell container
+and wanted to get the blocks from the REST API, you would run:
+
+```bash
+curl http://rest-api:8008/blocks
+```
+
+Finally, if you need to exit a container, simply use:
+
 ```bash
 exit
 ```
+
+## The Curriculum
+
+### Cryptomoji Lecture
+
+Eventually there will be a video lecture included with this repo, but it has
+not been completed yet. Watch this space.
+
+### Sawtooth Documentation
+
+Sawtooth has in-depth documentation covering many aspects of the platform. It
+can be a little overwhelming at first! For the new distributed app developer
+working with Javascript, start with these documents:
+
+- [Sawtooth Introduction](https://sawtooth.hyperledger.org/docs/core/releases/1.0/introduction.html)
+- Architecture
+    * [Global State](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/global_state.html)
+    * [Transactions and Batches](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/transactions_and_batches.html)
+    * [The REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
+- The Javascript SDK
+    * [Building and Submitting Transactions](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_submit_tutorial_js.html)
+    * [Transaction Processor Tutorial](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_TP_tutorial_js.html)
+
+## The Project
+
+When building an application on Sawtooth, much of the nitty gritty of running
+and validating a blockchain is handled for you. You won't have to verify
+signatures or hashes, or validate blocks, or confirm consensus. Instead, you
+must consider how the logic of your application can be broken up into discrete
+transaction payloads, and how those payloads will alter state data. The typical
+workflow looks something like this:
+
+1. The user initializes some action, i.e. _set 'a' to 1_.
+2. The client takes that action and:
+    - encodes it in a payload, maybe simply `{""a"": 1}`
+    - wraps the payload in a transaction and a batch
+    - submits it to the validator
+3. The validator confirms the transaction and batch are valid
+4. The transaction processor gets the payload and:
+    - decodes it
+    - verifies it is a valid action ('a' _can_ be set to 1)
+    - modifies state in a way that satisfies the action
+      (i.e. address _aaaaaa..._ becomes _000001_)
+5. The client reads state, and decodes the data there for display
+
+You are responsible for generating just two major components (the client and
+the transaction processor), and for keeping those components in agreement on
+how to encode payloads and state. This application-wide logic is typically
+referred to in Sawtooth with the general term: ""transaction family"".
+
+For cryptomoji, each component has their own directory, their own tests, and
+their own READMEs. There is no particular order they need to be built in, but
+it is recommended you develop them in parallel based on functionality. For
+example, implement ""collection"" creation on _both_ the client and the processor
+before moving on to ""sire"" selection on _either_.
+
+For the broad transaction family design, continue reading _this_ README.
+
+### Client
+
+**Directory:** [code/part-two/client/](client/)
+**README:** [code/part-two/client/README.md](client/README.md)
+**Tests:** [code/part-two/client/tests/](client/tests/)
+
+A React/Webpack UI which allows users to create collections of cryptomoji,
+breed them, and (in the extra credit) trade with other users.
+
+### Transaction Processor
+
+**Directory:** [code/part-two/processor/](processor/)
+**README:** [code/part-two/processor/README.md](processor/README.md)
+**Tests:** [code/part-two/processor/tests/](processor/tests/)
+
+A Node.js process which validates payloads sent from the client, writing data
+permanently to the blockchain.
+
+## The Design
+
+There are a few basic questions you need to answer when designing your
+transaction family:
+- What do my transaction payloads look like?
+- What does data stored in state look like?
+- What addresses in state is that data stored under?
+
+So let's answer these questions for _Cryptomoji_.
+
+### Encoding Data
+
+For simplicity and familiarity we are going to encode both payloads and state
+data as JSON. To be clear, JSON would _not_ be a great choice in production. It
+is not space efficient, and worse, it is not _deterministic_. Determinism is
+very important when writing state to the blockchain. Many many nodes will be
+attempting to the write the same state, and if it is slightly different (like
+say, the keys are in a different order), they will think the transactions are
+invalid.
+
+But JSON is easy and accessible, especially in Javascript, and it is possible
+to [create sorted JSON strings](https://stackoverflow.com/a/16168003/4284401),
+which should solve the determinism issue (at least well enough for our
+purposes). Of course, JSON itself isn't quite enough, because we need _raw
+bytes_ not a string. For byte encoding we are going to use Node's
+[Buffers](https://nodejs.org/api/buffer.html) again.
+
+So any sort of encode we do should look something like this:
+
+```javascript
+Buffer.from(JSON.stringify(dataObj, getSortedKeys(dataObj)))
+```
+
+And decoding would look like this:
+
+```javascript
+JSON.parse(dataBytes.toString())
+```
+
+### State Entities
+
+#### Cryptomoji
+
+```json
+{
+    ""dna"": ""<hex string>"",
+    ""owner"": ""<string, public key>"",
+    ""breeder"": ""<string, moji address>"",
+    ""sire"": ""<string, moji address>"",
+    ""bred"": [ ""<strings, moji addresses>"" ],
+    ""sired"": [ ""<strings, moji addresses>"" ]
+}
+```
+
+Unique breedable critters. They have a DNA string of 36 hex characters, which a
+parsing tool included with the client will convert into an adorable _kaomoji_
+for display. Aside from storing the identity of their owner, they will also
+include any breeding information they might have. First the identities of their
+parents (breeder/sire), as well as the identities of any children they
+produced, either in the role of a breeder or a sire (bred/sired).
+
+#### Collection
+
+```json
+{
+    ""key"": ""<string, public key>"",
+    ""moji"": [ ""<strings, moji addresses>"" ]
+}
+```
+
+A collection of cryptomoji owner by a public key. Each new collection will be
+created with three new ""gen 0"" moji with no breeders or sires.
+
+#### Sire Listing
+
+```json
+{
+    ""owner"": ""<string, public key>"",
+    ""sire"": ""<string, moji address>""
+}
+```
+
+Each collection is allowed to select one cryptomoji as their sire. This makes
+it publicly available for other collection to use for breeding.
+
+### Addressing
+
+All state addresses in Sawtooth are 35 bytes long, typically expressed as 70
+hexadecimal characters. By convention, the first six characters are reserved
+for a namespace for the transaction family, allowing many families to coexist
+on the same blockchain. The remaining 64 characters can be used however that
+application prefers.
+
+#### Namespace
+
+For the first six characters, we'll use the first six characters of a SHA-512
+hash of the application name, _“cryptomoji”_:
+
+```
+5f4d76
+```
+
+#### Resource Prefix
+
+Next a one byte (two characters) is a short prefix designating what type of
+resource is stored at the address:
+
+- **Collections:** `00`
+- **Cryptomoji:** `01`
+- **Sire:** Listings `02`
+
+#### Collection
+
+The final 62 characters of a collection’s address are the first 62 characters
+of a SHA-512 hash of its public key.
+
+```
+5f4d76 00 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
+```
+
+_Note that spaces have been added for readability. Actual addresses have no
+spaces._
+
+#### Collection Prefix
+
+For both cryptomoji and offers (see extra credit), the next 8 characters are a
+prefix for the collection they belong to. These are generated from the first
+eight characters of a SHA-512 hash of the collection’s public key.
+
+```
+1b96dbb5
+```
+
+#### Cryptomoji
+
+The final 54 characters of a cryptomoji’s address is the first 54 characters of
+a SHA-512 hash of their DNA string.
+
+```
+5f4d76 01 1b96dbb5 d1dd9beeb54338f0650588247d5b14af9609a59a9df42a61cfa7b7
+```
+
+#### Sire Listing
+
+The last 62 characters of a Sire Listing’s address are the first 62 characters
+of a SHA-512 hash of the owner’s public key.
+
+```
+5f4d76 02 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
+```
+
+### Payloads
+
+Cryptomoji payloads will be objects, each with an `""action""` key that
+designates what event should occur in the transaction processor. Each actions
+will be spelled out by a specific string written in CONSTANT_CASE. Any
+additional data required, will be included in other keys particular to that
+payload.
+
+#### Create Collection
+
+```json
+{
+    ""action"": ""CREATE_COLLECTION""
+}
+```
+
+_Validation:_
+- Signer must not already have a collection
+
+Creates a new collection for the signer of the transaction with three new
+pseudo-random (but deterministic!) cryptomoji. Like other actions, the identity
+of the signer will come from their public key in the transaction header, and so
+is not included in the payload itself.
+
+#### Select Sire
+
+```json
+{
+    ""action"": ""SELECT_SIRE"",
+    ""sire"": ""<string, moji address>""
+}
+```
+
+_Validation:_
+- Signer must have a collection
+- The cryptomoji must exist
+- Signer must own the sire
+
+Lists a cryptomoji as a collection's sire, indicating it is available for other
+collections to breed with. Collections may only have one sire at a time.
+
+#### Breed Moji
+
+```json
+{
+    ""action"": ""BREED_MOJI"",
+    ""sire"": ""<string, moji address>"",
+    ""breeder"": ""<string, moji address>""
+}
+```
+
+_Validation:_
+- Signer must have a collection
+- The cryptomoji must exist
+- Signer must own the breeder
+- Sire must be listed as a sire
+
+Creates a new cryptomoji for the owner of the _breeder_, which is a
+pseudo-random combination of the DNA from the breeder and the sire.
+
+## Extra Credit
+
+For extra credit, add the capability for collections to trade cryptomoji
+between each other. This is harder than it sounds. One user will need to create
+an offer, while others add responses until the offer owner accepts them. This
+is a process that spans multiple transactions, never mind the possibility that
+one party might decide to cancel their offer or response.
+
+### State Entities
+
+#### Offer
+
+```json
+{
+    ""owner"": <string, public key>,
+    ""moji"": [ <strings, moji addresses> ],
+    ""responses"": [
+        {
+            ""approver"": <string, public key>,
+            ""moji"": [ <strings, moji addresses> ]
+        }
+    ]
+}
+```
+
+Offers are a way of effectively creating a multi-signer transaction. One user
+creates the offer, and then other users add responses to it. When the offer
+owner sees a response they like, they can accept it, exchanging the cryptomoji.
+
+It is also possible for offer owners to request moji by adding responses to
+their own offer. These responses must then be approved by the moji's owner. Who
+is required to approve a response is stored for convenience on the response
+itself.
+
+### Addressing
+
+#### Offer
+
+An offer's address begins the same way as any other, with the cryptomoji
+namespace and a type prefix (`03` in this case). Afterwards, it uses the same
+eight character owner prefix that cryptomoji due. The final 54 characters is",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190653927,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190653927,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,`characters is` => `characters are`?,adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 16:38:23,190654026,"@@ -1,54 +1,589 @@
 # Part-Two: Cryptomoji
 
-The task for part two, will be to build a working Hyperledger Sawtooth app,
-which will allow the breeding and trading of unique ""cryptomoji"" on the
-blockchain. This app includes a number of components, which can be run using
-[Docker](https://www.docker.com/what-docker). After cloning this repo, follow
-the instructions specific to your OS to install and run whatever components are
-required to use `docker` and `docker-compose` from your command line.
+The task for part two will be to build a working distributed application on
+[Hyperledger Sawtooth](https://www.hyperledger.org/projects/sawtooth), a
+general-purpose enterprise blockchain. This app, will allow users to collect,
+breed, and trade collectible _kaomoji_, strings of characters that look like
+faces such as (ಠ_ಠ), ( ͡° ͜ʖ ͡°), and ᕕ( ᐛ )ᕗ.
 
-## Components
+Powering your _cryptomoji_, will be a number of components, which will be run
+in individual ""containers"" using [Docker](https://www.docker.com/what-docker).
+After cloning this repo and installing Node, follow the instructions specific
+to your OS to install and run whatever components are required to use `docker`
+and `docker-compose` from your command line.
 
-Each component has its own docker container:
+## Contents
 
-- `validator` - the Sawtooth validator, available at tcp://localhost:4004
-- `rest-api` - the Sawtooth REST API, available at http://localhost:8008
-- `client` - the front end for your app, served out of `client/public`
-to http://localhost:8000
-- `processor` - your transaction processor, located in `processor/`
-- `shell` - a Sawtooth environment for running shell commands
-- `settings-tp` - a built in Sawtooth transaction processor
+- [Using Docker](#using-docker)
+    * [Components](#components)
+    * [Start/Stop Commands](#start-stop-commands)
+    * [Entering a Container](#entering-a-container)
+- [The Curriculum](#the-curriculum)
+    * [Cryptomoji Lecture](#cryptomoji-lecture)
+    * [Sawtooth Documentation](#sawtooth-documentation)
+- [The Project](#the-project)
+    * [Client](#client)
+    * [Transaction Processor](#transaction-processor)
+- [The Design](#the-design)
+    * [Encoding Data](#encoding-data)
+    * [State Entities](#state-entities)
+        - [Cryptomoji](#cryptomoji)
+        - [Collection](#collection)
+        - [Sire Listing](#sire-listing)
+    * [Addressing](#addressing)
+        - [Namespace](#namespace)
+        - [Resource Prefix](#resource-prefix)
+        - [Collection](#collection)
+        - [Collection Prefix](#collection-prefix)
+        - [Cryptomoji](#cryptomoji)
+        - [Sire Listing](#sire-listing)
+    * [Payloads](#payloads)
+        - [Create Collection](#create-collection)
+        - [Select Sire](#select-sire)
+        - [Breed Moji](#breed-moji)
+- [Extra Credit](#extra-credit)
+    * [State Entities](#state-entities)
+        - [Offer](#offer)
+    * [Addressing](#addressing)
+        - [Offer](#offer)
+    * [Payloads](#payloads)
+        - [Create Offer](#create-offer)
+        - [Add Response](#add-response)
+        - [Accept Response](#accept-response)
+        - [Cancel Offer](#cancel-offer)
+        - [Cancel Response](#cancel-response)
+- [Nightmare Mode](#nightmare-mode)
 
-## Docker Commands
+## Using Docker
+
+Docker is a virtualization tool that makes it much easier to deploy code in
+a variety of environments, with a minimum of effort. Dockerfiles create
+""images"" with all of the dependencies your code needs ready to go. From these
+images, individual ""containers"" can be created and run at will, and destroyed
+when you are done with them. The effect is like having every component running
+on it's own virtual computer, which you can reset to factory settings at any
+time, in a matter of seconds. It's a profoundly useful tool, which takes a
+little getting used to, but we'll go over the basics here.
+
+### Components
+
+Included in this directory is a [docker-compose](docker-compose.yaml) file. It
+includes all of the instructions Docker needs to start up multiple components
+and network them together. This includes some custom components built from your
+source code, and some prepackaged Sawtooth components downloaded from
+[DockerHub](https://hub.docker.com/search/?isAutomated=0&isOfficial=0&page=1&pullCount=0&q=sawtooth&starCount=0):
+
+| Name          | Endpoint              | Source    | Description
+| ------------- | --------------------- | --------- | ------------------------
+| validator     | tcp://localhost:4004  | DockerHub | Validates blocks and transactions
+| rest-api      | http://localhost:8008 | DockerHub | Provides blockchain via HTTP/JSON
+| processor     | --                    | custom    | The core smart contract logic for your app
+| client        | http://localhost:3000 | custom    | Your front-end, served from `client/public/`
+| shell         | --                    | DockerHub | Environment for running Sawtooth commands
+| settings-tp   | --                    | DockerHub | Built-in Sawtooth transaction processor
+
+### Start/Stop Commands
+
+First you will use Docker's `docker-compose up` command to start all
+components. This will take quite awhile the first time, but afterwards should
+be very fast, no more than a minute. If you are in the same directory as the
+compose file, you don't need to provide it with any other parameters:
 
-To start all components, navigate to the `part-two` directory and use Docker:
 ```bash
 cd code/part-two/
 docker-compose up
 ```
 
-Once running, these components can be stopped using `ctrl-C`, or stopped _and_
-destroyed (they will be rebuilt on your next `up`) with:
+This builds and starts up _everything_ defined in your compose file! Once
+running, you can stop everything with the keyboard shortcut: `ctrl-C`. If you
+want to stop _and_ destroy every container (they will be rebuilt on your next
+`up`) use the command:
+
 ```bash
-docker-compose down
+docker-compose down -v
 ```
 
-You can also stop, start, or restart individual components using their
-container name. For example, with our transaction processor:
+That is really all you need. These commands are the start/stop buttons for your
+app. You can develop just fine by starting things up, making some changes,
+tearing everything down, and then starting it all up again. However, if you
+want for fine-grained control, it is possible to leave everything else running
+but stop, start, or restart an individual component using its container name
+(listed in the table above). For example, with our transaction processor we
+would open a new terminal window and run one of these commands:
+
 ```bash
 docker stop processor
 docker start processor
 docker restart processor
 ```
 
-Finally, if you want to run commands from within a container, you can use the
-`exec`. This is particularly useful when you want to use the bash command in
-the shell container:
+### Entering a Container
+
+There is nothing in the curriculum that would require you to do this, but if
+you are curious, it is possible to _enter_ a running container if you want to
+run commands from within. This is particularly useful with the ""shell""
+container when you want to run
+[Sawtooth CLI](https://sawtooth.hyperledger.org/docs/core/releases/1.0/cli/sawtooth.html)
+commands. You would do this with `exec`, which allows you run any command from
+within a container, and specify `bash` as the command you want to run:
+
 ```bash
 docker exec -it shell bash
 ```
 
-If you need to exit a container terminal, simply use:
+An important note! When you are within a container, you cannot use ""localhost""
+for networking. Remember, each container is its own little computer, complete
+with it's own localhost. Instead, Docker provide the service names from the
+compose file as URLs. So for example, if you were inside the shell container
+and wanted to get the blocks from the REST API, you would run:
+
+```bash
+curl http://rest-api:8008/blocks
+```
+
+Finally, if you need to exit a container, simply use:
+
 ```bash
 exit
 ```
+
+## The Curriculum
+
+### Cryptomoji Lecture
+
+Eventually there will be a video lecture included with this repo, but it has
+not been completed yet. Watch this space.
+
+### Sawtooth Documentation
+
+Sawtooth has in-depth documentation covering many aspects of the platform. It
+can be a little overwhelming at first! For the new distributed app developer
+working with Javascript, start with these documents:
+
+- [Sawtooth Introduction](https://sawtooth.hyperledger.org/docs/core/releases/1.0/introduction.html)
+- Architecture
+    * [Global State](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/global_state.html)
+    * [Transactions and Batches](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/transactions_and_batches.html)
+    * [The REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
+- The Javascript SDK
+    * [Building and Submitting Transactions](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_submit_tutorial_js.html)
+    * [Transaction Processor Tutorial](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_TP_tutorial_js.html)
+
+## The Project
+
+When building an application on Sawtooth, much of the nitty gritty of running
+and validating a blockchain is handled for you. You won't have to verify
+signatures or hashes, or validate blocks, or confirm consensus. Instead, you
+must consider how the logic of your application can be broken up into discrete
+transaction payloads, and how those payloads will alter state data. The typical
+workflow looks something like this:
+
+1. The user initializes some action, i.e. _set 'a' to 1_.
+2. The client takes that action and:
+    - encodes it in a payload, maybe simply `{""a"": 1}`
+    - wraps the payload in a transaction and a batch
+    - submits it to the validator
+3. The validator confirms the transaction and batch are valid
+4. The transaction processor gets the payload and:
+    - decodes it
+    - verifies it is a valid action ('a' _can_ be set to 1)
+    - modifies state in a way that satisfies the action
+      (i.e. address _aaaaaa..._ becomes _000001_)
+5. The client reads state, and decodes the data there for display
+
+You are responsible for generating just two major components (the client and
+the transaction processor), and for keeping those components in agreement on
+how to encode payloads and state. This application-wide logic is typically
+referred to in Sawtooth with the general term: ""transaction family"".
+
+For cryptomoji, each component has their own directory, their own tests, and
+their own READMEs. There is no particular order they need to be built in, but
+it is recommended you develop them in parallel based on functionality. For
+example, implement ""collection"" creation on _both_ the client and the processor
+before moving on to ""sire"" selection on _either_.
+
+For the broad transaction family design, continue reading _this_ README.
+
+### Client
+
+**Directory:** [code/part-two/client/](client/)
+**README:** [code/part-two/client/README.md](client/README.md)
+**Tests:** [code/part-two/client/tests/](client/tests/)
+
+A React/Webpack UI which allows users to create collections of cryptomoji,
+breed them, and (in the extra credit) trade with other users.
+
+### Transaction Processor
+
+**Directory:** [code/part-two/processor/](processor/)
+**README:** [code/part-two/processor/README.md](processor/README.md)
+**Tests:** [code/part-two/processor/tests/](processor/tests/)
+
+A Node.js process which validates payloads sent from the client, writing data
+permanently to the blockchain.
+
+## The Design
+
+There are a few basic questions you need to answer when designing your
+transaction family:
+- What do my transaction payloads look like?
+- What does data stored in state look like?
+- What addresses in state is that data stored under?
+
+So let's answer these questions for _Cryptomoji_.
+
+### Encoding Data
+
+For simplicity and familiarity we are going to encode both payloads and state
+data as JSON. To be clear, JSON would _not_ be a great choice in production. It
+is not space efficient, and worse, it is not _deterministic_. Determinism is
+very important when writing state to the blockchain. Many many nodes will be
+attempting to the write the same state, and if it is slightly different (like
+say, the keys are in a different order), they will think the transactions are
+invalid.
+
+But JSON is easy and accessible, especially in Javascript, and it is possible
+to [create sorted JSON strings](https://stackoverflow.com/a/16168003/4284401),
+which should solve the determinism issue (at least well enough for our
+purposes). Of course, JSON itself isn't quite enough, because we need _raw
+bytes_ not a string. For byte encoding we are going to use Node's
+[Buffers](https://nodejs.org/api/buffer.html) again.
+
+So any sort of encode we do should look something like this:
+
+```javascript
+Buffer.from(JSON.stringify(dataObj, getSortedKeys(dataObj)))
+```
+
+And decoding would look like this:
+
+```javascript
+JSON.parse(dataBytes.toString())
+```
+
+### State Entities
+
+#### Cryptomoji
+
+```json
+{
+    ""dna"": ""<hex string>"",
+    ""owner"": ""<string, public key>"",
+    ""breeder"": ""<string, moji address>"",
+    ""sire"": ""<string, moji address>"",
+    ""bred"": [ ""<strings, moji addresses>"" ],
+    ""sired"": [ ""<strings, moji addresses>"" ]
+}
+```
+
+Unique breedable critters. They have a DNA string of 36 hex characters, which a
+parsing tool included with the client will convert into an adorable _kaomoji_
+for display. Aside from storing the identity of their owner, they will also
+include any breeding information they might have. First the identities of their
+parents (breeder/sire), as well as the identities of any children they
+produced, either in the role of a breeder or a sire (bred/sired).
+
+#### Collection
+
+```json
+{
+    ""key"": ""<string, public key>"",
+    ""moji"": [ ""<strings, moji addresses>"" ]
+}
+```
+
+A collection of cryptomoji owner by a public key. Each new collection will be
+created with three new ""gen 0"" moji with no breeders or sires.
+
+#### Sire Listing
+
+```json
+{
+    ""owner"": ""<string, public key>"",
+    ""sire"": ""<string, moji address>""
+}
+```
+
+Each collection is allowed to select one cryptomoji as their sire. This makes
+it publicly available for other collection to use for breeding.
+
+### Addressing
+
+All state addresses in Sawtooth are 35 bytes long, typically expressed as 70
+hexadecimal characters. By convention, the first six characters are reserved
+for a namespace for the transaction family, allowing many families to coexist
+on the same blockchain. The remaining 64 characters can be used however that
+application prefers.
+
+#### Namespace
+
+For the first six characters, we'll use the first six characters of a SHA-512
+hash of the application name, _“cryptomoji”_:
+
+```
+5f4d76
+```
+
+#### Resource Prefix
+
+Next a one byte (two characters) is a short prefix designating what type of
+resource is stored at the address:
+
+- **Collections:** `00`
+- **Cryptomoji:** `01`
+- **Sire:** Listings `02`
+
+#### Collection
+
+The final 62 characters of a collection’s address are the first 62 characters
+of a SHA-512 hash of its public key.
+
+```
+5f4d76 00 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
+```
+
+_Note that spaces have been added for readability. Actual addresses have no
+spaces._
+
+#### Collection Prefix
+
+For both cryptomoji and offers (see extra credit), the next 8 characters are a
+prefix for the collection they belong to. These are generated from the first
+eight characters of a SHA-512 hash of the collection’s public key.
+
+```
+1b96dbb5
+```
+
+#### Cryptomoji
+
+The final 54 characters of a cryptomoji’s address is the first 54 characters of
+a SHA-512 hash of their DNA string.
+
+```
+5f4d76 01 1b96dbb5 d1dd9beeb54338f0650588247d5b14af9609a59a9df42a61cfa7b7
+```
+
+#### Sire Listing
+
+The last 62 characters of a Sire Listing’s address are the first 62 characters
+of a SHA-512 hash of the owner’s public key.
+
+```
+5f4d76 02 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
+```
+
+### Payloads
+
+Cryptomoji payloads will be objects, each with an `""action""` key that
+designates what event should occur in the transaction processor. Each actions
+will be spelled out by a specific string written in CONSTANT_CASE. Any
+additional data required, will be included in other keys particular to that
+payload.
+
+#### Create Collection
+
+```json
+{
+    ""action"": ""CREATE_COLLECTION""
+}
+```
+
+_Validation:_
+- Signer must not already have a collection
+
+Creates a new collection for the signer of the transaction with three new
+pseudo-random (but deterministic!) cryptomoji. Like other actions, the identity
+of the signer will come from their public key in the transaction header, and so
+is not included in the payload itself.
+
+#### Select Sire
+
+```json
+{
+    ""action"": ""SELECT_SIRE"",
+    ""sire"": ""<string, moji address>""
+}
+```
+
+_Validation:_
+- Signer must have a collection
+- The cryptomoji must exist
+- Signer must own the sire
+
+Lists a cryptomoji as a collection's sire, indicating it is available for other
+collections to breed with. Collections may only have one sire at a time.
+
+#### Breed Moji
+
+```json
+{
+    ""action"": ""BREED_MOJI"",
+    ""sire"": ""<string, moji address>"",
+    ""breeder"": ""<string, moji address>""
+}
+```
+
+_Validation:_
+- Signer must have a collection
+- The cryptomoji must exist
+- Signer must own the breeder
+- Sire must be listed as a sire
+
+Creates a new cryptomoji for the owner of the _breeder_, which is a
+pseudo-random combination of the DNA from the breeder and the sire.
+
+## Extra Credit
+
+For extra credit, add the capability for collections to trade cryptomoji
+between each other. This is harder than it sounds. One user will need to create
+an offer, while others add responses until the offer owner accepts them. This
+is a process that spans multiple transactions, never mind the possibility that
+one party might decide to cancel their offer or response.
+
+### State Entities
+
+#### Offer
+
+```json
+{
+    ""owner"": <string, public key>,
+    ""moji"": [ <strings, moji addresses> ],
+    ""responses"": [
+        {
+            ""approver"": <string, public key>,
+            ""moji"": [ <strings, moji addresses> ]
+        }
+    ]
+}
+```
+
+Offers are a way of effectively creating a multi-signer transaction. One user
+creates the offer, and then other users add responses to it. When the offer
+owner sees a response they like, they can accept it, exchanging the cryptomoji.
+
+It is also possible for offer owners to request moji by adding responses to
+their own offer. These responses must then be approved by the moji's owner. Who
+is required to approve a response is stored for convenience on the response
+itself.
+
+### Addressing
+
+#### Offer
+
+An offer's address begins the same way as any other, with the cryptomoji
+namespace and a type prefix (`03` in this case). Afterwards, it uses the same
+eight character owner prefix that cryptomoji due. The final 54 characters is",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190654026,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190654026,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,missing word: hash **is** generated,adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 16:39:04,190654225,"@@ -1,54 +1,589 @@
 # Part-Two: Cryptomoji
 
-The task for part two, will be to build a working Hyperledger Sawtooth app,
-which will allow the breeding and trading of unique ""cryptomoji"" on the
-blockchain. This app includes a number of components, which can be run using
-[Docker](https://www.docker.com/what-docker). After cloning this repo, follow
-the instructions specific to your OS to install and run whatever components are
-required to use `docker` and `docker-compose` from your command line.
+The task for part two will be to build a working distributed application on
+[Hyperledger Sawtooth](https://www.hyperledger.org/projects/sawtooth), a
+general-purpose enterprise blockchain. This app, will allow users to collect,
+breed, and trade collectible _kaomoji_, strings of characters that look like
+faces such as (ಠ_ಠ), ( ͡° ͜ʖ ͡°), and ᕕ( ᐛ )ᕗ.
 
-## Components
+Powering your _cryptomoji_, will be a number of components, which will be run
+in individual ""containers"" using [Docker](https://www.docker.com/what-docker).
+After cloning this repo and installing Node, follow the instructions specific
+to your OS to install and run whatever components are required to use `docker`
+and `docker-compose` from your command line.
 
-Each component has its own docker container:
+## Contents
 
-- `validator` - the Sawtooth validator, available at tcp://localhost:4004
-- `rest-api` - the Sawtooth REST API, available at http://localhost:8008
-- `client` - the front end for your app, served out of `client/public`
-to http://localhost:8000
-- `processor` - your transaction processor, located in `processor/`
-- `shell` - a Sawtooth environment for running shell commands
-- `settings-tp` - a built in Sawtooth transaction processor
+- [Using Docker](#using-docker)
+    * [Components](#components)
+    * [Start/Stop Commands](#start-stop-commands)
+    * [Entering a Container](#entering-a-container)
+- [The Curriculum](#the-curriculum)
+    * [Cryptomoji Lecture](#cryptomoji-lecture)
+    * [Sawtooth Documentation](#sawtooth-documentation)
+- [The Project](#the-project)
+    * [Client](#client)
+    * [Transaction Processor](#transaction-processor)
+- [The Design](#the-design)
+    * [Encoding Data](#encoding-data)
+    * [State Entities](#state-entities)
+        - [Cryptomoji](#cryptomoji)
+        - [Collection](#collection)
+        - [Sire Listing](#sire-listing)
+    * [Addressing](#addressing)
+        - [Namespace](#namespace)
+        - [Resource Prefix](#resource-prefix)
+        - [Collection](#collection)
+        - [Collection Prefix](#collection-prefix)
+        - [Cryptomoji](#cryptomoji)
+        - [Sire Listing](#sire-listing)
+    * [Payloads](#payloads)
+        - [Create Collection](#create-collection)
+        - [Select Sire](#select-sire)
+        - [Breed Moji](#breed-moji)
+- [Extra Credit](#extra-credit)
+    * [State Entities](#state-entities)
+        - [Offer](#offer)
+    * [Addressing](#addressing)
+        - [Offer](#offer)
+    * [Payloads](#payloads)
+        - [Create Offer](#create-offer)
+        - [Add Response](#add-response)
+        - [Accept Response](#accept-response)
+        - [Cancel Offer](#cancel-offer)
+        - [Cancel Response](#cancel-response)
+- [Nightmare Mode](#nightmare-mode)
 
-## Docker Commands
+## Using Docker
+
+Docker is a virtualization tool that makes it much easier to deploy code in
+a variety of environments, with a minimum of effort. Dockerfiles create
+""images"" with all of the dependencies your code needs ready to go. From these
+images, individual ""containers"" can be created and run at will, and destroyed
+when you are done with them. The effect is like having every component running
+on it's own virtual computer, which you can reset to factory settings at any
+time, in a matter of seconds. It's a profoundly useful tool, which takes a
+little getting used to, but we'll go over the basics here.
+
+### Components
+
+Included in this directory is a [docker-compose](docker-compose.yaml) file. It
+includes all of the instructions Docker needs to start up multiple components
+and network them together. This includes some custom components built from your
+source code, and some prepackaged Sawtooth components downloaded from
+[DockerHub](https://hub.docker.com/search/?isAutomated=0&isOfficial=0&page=1&pullCount=0&q=sawtooth&starCount=0):
+
+| Name          | Endpoint              | Source    | Description
+| ------------- | --------------------- | --------- | ------------------------
+| validator     | tcp://localhost:4004  | DockerHub | Validates blocks and transactions
+| rest-api      | http://localhost:8008 | DockerHub | Provides blockchain via HTTP/JSON
+| processor     | --                    | custom    | The core smart contract logic for your app
+| client        | http://localhost:3000 | custom    | Your front-end, served from `client/public/`
+| shell         | --                    | DockerHub | Environment for running Sawtooth commands
+| settings-tp   | --                    | DockerHub | Built-in Sawtooth transaction processor
+
+### Start/Stop Commands
+
+First you will use Docker's `docker-compose up` command to start all
+components. This will take quite awhile the first time, but afterwards should
+be very fast, no more than a minute. If you are in the same directory as the
+compose file, you don't need to provide it with any other parameters:
 
-To start all components, navigate to the `part-two` directory and use Docker:
 ```bash
 cd code/part-two/
 docker-compose up
 ```
 
-Once running, these components can be stopped using `ctrl-C`, or stopped _and_
-destroyed (they will be rebuilt on your next `up`) with:
+This builds and starts up _everything_ defined in your compose file! Once
+running, you can stop everything with the keyboard shortcut: `ctrl-C`. If you
+want to stop _and_ destroy every container (they will be rebuilt on your next
+`up`) use the command:
+
 ```bash
-docker-compose down
+docker-compose down -v
 ```
 
-You can also stop, start, or restart individual components using their
-container name. For example, with our transaction processor:
+That is really all you need. These commands are the start/stop buttons for your
+app. You can develop just fine by starting things up, making some changes,
+tearing everything down, and then starting it all up again. However, if you
+want for fine-grained control, it is possible to leave everything else running
+but stop, start, or restart an individual component using its container name
+(listed in the table above). For example, with our transaction processor we
+would open a new terminal window and run one of these commands:
+
 ```bash
 docker stop processor
 docker start processor
 docker restart processor
 ```
 
-Finally, if you want to run commands from within a container, you can use the
-`exec`. This is particularly useful when you want to use the bash command in
-the shell container:
+### Entering a Container
+
+There is nothing in the curriculum that would require you to do this, but if
+you are curious, it is possible to _enter_ a running container if you want to
+run commands from within. This is particularly useful with the ""shell""
+container when you want to run
+[Sawtooth CLI](https://sawtooth.hyperledger.org/docs/core/releases/1.0/cli/sawtooth.html)
+commands. You would do this with `exec`, which allows you run any command from
+within a container, and specify `bash` as the command you want to run:
+
 ```bash
 docker exec -it shell bash
 ```
 
-If you need to exit a container terminal, simply use:
+An important note! When you are within a container, you cannot use ""localhost""
+for networking. Remember, each container is its own little computer, complete
+with it's own localhost. Instead, Docker provide the service names from the
+compose file as URLs. So for example, if you were inside the shell container
+and wanted to get the blocks from the REST API, you would run:
+
+```bash
+curl http://rest-api:8008/blocks
+```
+
+Finally, if you need to exit a container, simply use:
+
 ```bash
 exit
 ```
+
+## The Curriculum
+
+### Cryptomoji Lecture
+
+Eventually there will be a video lecture included with this repo, but it has
+not been completed yet. Watch this space.
+
+### Sawtooth Documentation
+
+Sawtooth has in-depth documentation covering many aspects of the platform. It
+can be a little overwhelming at first! For the new distributed app developer
+working with Javascript, start with these documents:
+
+- [Sawtooth Introduction](https://sawtooth.hyperledger.org/docs/core/releases/1.0/introduction.html)
+- Architecture
+    * [Global State](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/global_state.html)
+    * [Transactions and Batches](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/transactions_and_batches.html)
+    * [The REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/architecture/rest_api.html)
+- The Javascript SDK
+    * [Building and Submitting Transactions](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_submit_tutorial_js.html)
+    * [Transaction Processor Tutorial](https://sawtooth.hyperledger.org/docs/core/releases/1.0/_autogen/sdk_TP_tutorial_js.html)
+
+## The Project
+
+When building an application on Sawtooth, much of the nitty gritty of running
+and validating a blockchain is handled for you. You won't have to verify
+signatures or hashes, or validate blocks, or confirm consensus. Instead, you
+must consider how the logic of your application can be broken up into discrete
+transaction payloads, and how those payloads will alter state data. The typical
+workflow looks something like this:
+
+1. The user initializes some action, i.e. _set 'a' to 1_.
+2. The client takes that action and:
+    - encodes it in a payload, maybe simply `{""a"": 1}`
+    - wraps the payload in a transaction and a batch
+    - submits it to the validator
+3. The validator confirms the transaction and batch are valid
+4. The transaction processor gets the payload and:
+    - decodes it
+    - verifies it is a valid action ('a' _can_ be set to 1)
+    - modifies state in a way that satisfies the action
+      (i.e. address _aaaaaa..._ becomes _000001_)
+5. The client reads state, and decodes the data there for display
+
+You are responsible for generating just two major components (the client and
+the transaction processor), and for keeping those components in agreement on
+how to encode payloads and state. This application-wide logic is typically
+referred to in Sawtooth with the general term: ""transaction family"".
+
+For cryptomoji, each component has their own directory, their own tests, and
+their own READMEs. There is no particular order they need to be built in, but
+it is recommended you develop them in parallel based on functionality. For
+example, implement ""collection"" creation on _both_ the client and the processor
+before moving on to ""sire"" selection on _either_.
+
+For the broad transaction family design, continue reading _this_ README.
+
+### Client
+
+**Directory:** [code/part-two/client/](client/)
+**README:** [code/part-two/client/README.md](client/README.md)
+**Tests:** [code/part-two/client/tests/](client/tests/)
+
+A React/Webpack UI which allows users to create collections of cryptomoji,
+breed them, and (in the extra credit) trade with other users.
+
+### Transaction Processor
+
+**Directory:** [code/part-two/processor/](processor/)
+**README:** [code/part-two/processor/README.md](processor/README.md)
+**Tests:** [code/part-two/processor/tests/](processor/tests/)
+
+A Node.js process which validates payloads sent from the client, writing data
+permanently to the blockchain.
+
+## The Design
+
+There are a few basic questions you need to answer when designing your
+transaction family:
+- What do my transaction payloads look like?
+- What does data stored in state look like?
+- What addresses in state is that data stored under?
+
+So let's answer these questions for _Cryptomoji_.
+
+### Encoding Data
+
+For simplicity and familiarity we are going to encode both payloads and state
+data as JSON. To be clear, JSON would _not_ be a great choice in production. It
+is not space efficient, and worse, it is not _deterministic_. Determinism is
+very important when writing state to the blockchain. Many many nodes will be
+attempting to the write the same state, and if it is slightly different (like
+say, the keys are in a different order), they will think the transactions are
+invalid.
+
+But JSON is easy and accessible, especially in Javascript, and it is possible
+to [create sorted JSON strings](https://stackoverflow.com/a/16168003/4284401),
+which should solve the determinism issue (at least well enough for our
+purposes). Of course, JSON itself isn't quite enough, because we need _raw
+bytes_ not a string. For byte encoding we are going to use Node's
+[Buffers](https://nodejs.org/api/buffer.html) again.
+
+So any sort of encode we do should look something like this:
+
+```javascript
+Buffer.from(JSON.stringify(dataObj, getSortedKeys(dataObj)))
+```
+
+And decoding would look like this:
+
+```javascript
+JSON.parse(dataBytes.toString())
+```
+
+### State Entities
+
+#### Cryptomoji
+
+```json
+{
+    ""dna"": ""<hex string>"",
+    ""owner"": ""<string, public key>"",
+    ""breeder"": ""<string, moji address>"",
+    ""sire"": ""<string, moji address>"",
+    ""bred"": [ ""<strings, moji addresses>"" ],
+    ""sired"": [ ""<strings, moji addresses>"" ]
+}
+```
+
+Unique breedable critters. They have a DNA string of 36 hex characters, which a
+parsing tool included with the client will convert into an adorable _kaomoji_
+for display. Aside from storing the identity of their owner, they will also
+include any breeding information they might have. First the identities of their
+parents (breeder/sire), as well as the identities of any children they
+produced, either in the role of a breeder or a sire (bred/sired).
+
+#### Collection
+
+```json
+{
+    ""key"": ""<string, public key>"",
+    ""moji"": [ ""<strings, moji addresses>"" ]
+}
+```
+
+A collection of cryptomoji owner by a public key. Each new collection will be
+created with three new ""gen 0"" moji with no breeders or sires.
+
+#### Sire Listing
+
+```json
+{
+    ""owner"": ""<string, public key>"",
+    ""sire"": ""<string, moji address>""
+}
+```
+
+Each collection is allowed to select one cryptomoji as their sire. This makes
+it publicly available for other collection to use for breeding.
+
+### Addressing
+
+All state addresses in Sawtooth are 35 bytes long, typically expressed as 70
+hexadecimal characters. By convention, the first six characters are reserved
+for a namespace for the transaction family, allowing many families to coexist
+on the same blockchain. The remaining 64 characters can be used however that
+application prefers.
+
+#### Namespace
+
+For the first six characters, we'll use the first six characters of a SHA-512
+hash of the application name, _“cryptomoji”_:
+
+```
+5f4d76
+```
+
+#### Resource Prefix
+
+Next a one byte (two characters) is a short prefix designating what type of
+resource is stored at the address:
+
+- **Collections:** `00`
+- **Cryptomoji:** `01`
+- **Sire:** Listings `02`
+
+#### Collection
+
+The final 62 characters of a collection’s address are the first 62 characters
+of a SHA-512 hash of its public key.
+
+```
+5f4d76 00 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
+```
+
+_Note that spaces have been added for readability. Actual addresses have no
+spaces._
+
+#### Collection Prefix
+
+For both cryptomoji and offers (see extra credit), the next 8 characters are a
+prefix for the collection they belong to. These are generated from the first
+eight characters of a SHA-512 hash of the collection’s public key.
+
+```
+1b96dbb5
+```
+
+#### Cryptomoji
+
+The final 54 characters of a cryptomoji’s address is the first 54 characters of
+a SHA-512 hash of their DNA string.
+
+```
+5f4d76 01 1b96dbb5 d1dd9beeb54338f0650588247d5b14af9609a59a9df42a61cfa7b7
+```
+
+#### Sire Listing
+
+The last 62 characters of a Sire Listing’s address are the first 62 characters
+of a SHA-512 hash of the owner’s public key.
+
+```
+5f4d76 02 1b96dbb5322e410816dd41d93571801e751a4f0cc455d8bd58f5f8ad3d67cb
+```
+
+### Payloads
+
+Cryptomoji payloads will be objects, each with an `""action""` key that
+designates what event should occur in the transaction processor. Each actions
+will be spelled out by a specific string written in CONSTANT_CASE. Any
+additional data required, will be included in other keys particular to that
+payload.
+
+#### Create Collection
+
+```json
+{
+    ""action"": ""CREATE_COLLECTION""
+}
+```
+
+_Validation:_
+- Signer must not already have a collection
+
+Creates a new collection for the signer of the transaction with three new
+pseudo-random (but deterministic!) cryptomoji. Like other actions, the identity
+of the signer will come from their public key in the transaction header, and so
+is not included in the payload itself.
+
+#### Select Sire
+
+```json
+{
+    ""action"": ""SELECT_SIRE"",
+    ""sire"": ""<string, moji address>""
+}
+```
+
+_Validation:_
+- Signer must have a collection
+- The cryptomoji must exist
+- Signer must own the sire
+
+Lists a cryptomoji as a collection's sire, indicating it is available for other
+collections to breed with. Collections may only have one sire at a time.
+
+#### Breed Moji
+
+```json
+{
+    ""action"": ""BREED_MOJI"",
+    ""sire"": ""<string, moji address>"",
+    ""breeder"": ""<string, moji address>""
+}
+```
+
+_Validation:_
+- Signer must have a collection
+- The cryptomoji must exist
+- Signer must own the breeder
+- Sire must be listed as a sire
+
+Creates a new cryptomoji for the owner of the _breeder_, which is a
+pseudo-random combination of the DNA from the breeder and the sire.
+
+## Extra Credit
+
+For extra credit, add the capability for collections to trade cryptomoji
+between each other. This is harder than it sounds. One user will need to create
+an offer, while others add responses until the offer owner accepts them. This
+is a process that spans multiple transactions, never mind the possibility that
+one party might decide to cancel their offer or response.
+
+### State Entities
+
+#### Offer
+
+```json
+{
+    ""owner"": <string, public key>,
+    ""moji"": [ <strings, moji addresses> ],
+    ""responses"": [
+        {
+            ""approver"": <string, public key>,
+            ""moji"": [ <strings, moji addresses> ]
+        }
+    ]
+}
+```
+
+Offers are a way of effectively creating a multi-signer transaction. One user
+creates the offer, and then other users add responses to it. When the offer
+owner sees a response they like, they can accept it, exchanging the cryptomoji.
+
+It is also possible for offer owners to request moji by adding responses to
+their own offer. These responses must then be approved by the moji's owner. Who
+is required to approve a response is stored for convenience on the response
+itself.
+
+### Addressing
+
+#### Offer
+
+An offer's address begins the same way as any other, with the cryptomoji
+namespace and a type prefix (`03` in this case). Afterwards, it uses the same
+eight character owner prefix that cryptomoji due. The final 54 characters is
+also the first 54 characters of a SHA-512 hash. In this case, the hash generate",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190654225,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190654225,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,I think maybe this is supposed to be `build:dev`,adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 16:43:43,190655495,"@@ -1,22 +1,216 @@
-# Client
+# Cryptomoji Client
 
-## Development
+In many ways building a web app as a client to a Sawtooth blockchain is not
+much different than building a web app for any server. You will create some
+React components that will display data that you GET from a REST API. Users
+will fill out forms and you will take the data and POST it. Of course,
+everything you GET will be a base64 encoded binary file, and all of your POSTs
+will be cryptographically signed transactions. But that's where the fun is!
 
-From this directory, 
+## Contents
+
+- [Getting Started](#getting-started)
+- [Running Tests](#running-tests)
+- [The Project](#the-project)
+    * [01 Signing](#01-signing)
+    * [02 Encoding](#02-encoding)
+    * [03 Transactions](#03-transactions)
+    * [04 Addressing](#04-addressing)
+    * [05 Requests](#05-requests)
+        - [GET /api/state/{address}](#get-api-state-address)
+        - [GET /api/state?address={partial address}](#get-api-state-address-partial-address)
+        - [POST /api/batches](#post-api-batches)
+    * [06 The User Interface](#06-the-user-interface)
+- [Extra Credit](#extra-credit)
+
+## Getting Started
+
+This component uses npm to manage dependencies, so the first thing you should
+do is install them:
 
 ```bash
+cd code/part-two/client/
 npm install
-npm run build:dev
 ```
 
-In another terminal instance,
+Once that's done, you will need to build your front-end code with webpack. This
+will use [source/index.jsx](source/index.jsx) as an entry point, and pull in
+all of your other modules from there to create a bundle. This bundle will be
+saved at `public/bundle.js`. Anything in the [public/](public/) directory will
+be served at `localhost:3000` when you run `docker-compose up` (see
+[Using Docker](../README.md#using-docker)), so you will be all set to go. In
+order to run the build, there are a few commands you can use.
+
+You can build the production code:
+
+```bash
+npm run build:prod
+```
+
+You can build the dev code. Aside from more helpful error messages, this mode
+will keep running and automatically rebuild anytime you save changes:
 
 ```bash
-npm run live-server
+npm run build:prod",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190655495,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190655495,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,"dev mode (for webpack) is also faster at rebundling than production mode, but idk if we wanna mention that via a later commit ¯\_(ツ)_/¯",adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 16:44:25,190655689,"@@ -1,22 +1,216 @@
-# Client
+# Cryptomoji Client
 
-## Development
+In many ways building a web app as a client to a Sawtooth blockchain is not
+much different than building a web app for any server. You will create some
+React components that will display data that you GET from a REST API. Users
+will fill out forms and you will take the data and POST it. Of course,
+everything you GET will be a base64 encoded binary file, and all of your POSTs
+will be cryptographically signed transactions. But that's where the fun is!
 
-From this directory, 
+## Contents
+
+- [Getting Started](#getting-started)
+- [Running Tests](#running-tests)
+- [The Project](#the-project)
+    * [01 Signing](#01-signing)
+    * [02 Encoding](#02-encoding)
+    * [03 Transactions](#03-transactions)
+    * [04 Addressing](#04-addressing)
+    * [05 Requests](#05-requests)
+        - [GET /api/state/{address}](#get-api-state-address)
+        - [GET /api/state?address={partial address}](#get-api-state-address-partial-address)
+        - [POST /api/batches](#post-api-batches)
+    * [06 The User Interface](#06-the-user-interface)
+- [Extra Credit](#extra-credit)
+
+## Getting Started
+
+This component uses npm to manage dependencies, so the first thing you should
+do is install them:
 
 ```bash
+cd code/part-two/client/
 npm install
-npm run build:dev
 ```
 
-In another terminal instance,
+Once that's done, you will need to build your front-end code with webpack. This
+will use [source/index.jsx](source/index.jsx) as an entry point, and pull in
+all of your other modules from there to create a bundle. This bundle will be
+saved at `public/bundle.js`. Anything in the [public/](public/) directory will
+be served at `localhost:3000` when you run `docker-compose up` (see
+[Using Docker](../README.md#using-docker)), so you will be all set to go. In
+order to run the build, there are a few commands you can use.
+
+You can build the production code:
+
+```bash
+npm run build:prod
+```
+
+You can build the dev code. Aside from more helpful error messages, this mode
+will keep running and automatically rebuild anytime you save changes:",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190655689,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190655689,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,"Either ""if preferred"" or ""if you prefer""",adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 23:13:31,190755559,"@@ -1,22 +1,222 @@
-# Client
+# Cryptomoji Client
 
-## Development
+In many ways building a web app as a client to a Sawtooth blockchain is not
+much different than building a web app for any server. You will create some
+React components that will display the data you _GET_ from a REST API. Users
+will fill out forms and you will take that information and _POST_ it. Of
+course, everything you _GET_ will be a base64 encoded binary file, and all of
+your _POSTs_ will be cryptographically signed transactions. But that's where
+the fun is!
 
-From this directory, 
+## Contents
+
+- [Getting Started](#getting-started)
+- [Running Tests](#running-tests)
+- [The Project](#the-project)
+    * [01 Signing](#01-signing)
+    * [02 Encoding](#02-encoding)
+    * [03 Transactions](#03-transactions)
+    * [04 Addressing](#04-addressing)
+    * [05 Requests](#05-requests)
+        - [GET /api/state/{address}](#get-apistateaddress)
+        - [GET /api/state?address={partial address}](#get-apistateaddresspartial-address)
+        - [POST /api/batches](#post-apibatches)
+    * [06 The User Interface](#06-the-user-interface)
+- [Extra Credit](#extra-credit)
+
+## Getting Started
+
+This component uses npm to manage dependencies, so the first thing you should
+do is install them:
 
 ```bash
+cd code/part-two/client/
 npm install
-npm run build:dev
 ```
 
-In another terminal instance,
+Once that's done, you will need to build your front-end code with _webpack_.
+This will use [source/index.jsx](source/index.jsx) as an entry point, and pull
+in all of your other modules from there to create a _bundle_ saved at
+`public/bundle.js`. Anything in the [public/](public/) directory will be served
+at `localhost:3000`, so when you run `docker-compose up` (see [Using
+Docker](../README.md#using-docker)), you should be able to view it from your
+browser. In order to run the build, there are a few commands you can use.
+
+You can build the production code:
+
+```bash
+npm run build:prod
+```
+
+You can also build the dev code. Aside from more helpful error messages, this
+mode will keep running and automatically rebuild anytime you save changes:
 
 ```bash
-npm run live-server
+npm run build:prod
+```
+
+And you can go a step further and serve the dev code from a live-reload server
+at `localhost:3001`. Good news, you won't have to refresh your page! Bad news,
+you won't be able to make any API calls or interact with the blockchain at all:
+
+```bash
+npm run watch
+```
+
+## Running Tests
+
+Like other components, the front-end uses Mocha/Chai for testing. Unlike other
+components, there is a pretty sweet browser-based test runner. To pull it up,
+simply run:
+
+```bash
+npm test
+```
+
+## The Project
+
+Before you start in on this part of the project make sure you have reviewed the
+[Sawtooth Curriculum](../README.md#the-curriculum), in particular the sections
+on build and submitting transactions, as well as
+[Signing](../../part-one/README.md#01-signing) from part one.
+
+### 01 Signing
+
+**Module:** [source/services/signing.js](source/services/signing.js)
+
+If you completed part one, this section should be pretty much done. Both
+Sawtooth and your DIY blockchain use Secp256k1 for signing, so you will be able
+to copy over most of your code.
+
+### 02 Encoding
+
+**Module:** [source/services/encoding.js](source/services/encoding.js)
+
+Next you will want to build a module to encode/decode transactions and state
+data. Remember from [the design](../README.md#encoding-data), that we are using
+_sorted_ JSON strings encoded in a Node Buffer. Webpack will allow you to use
+Buffers in the browser just fine, but you could also use
+[UInt8Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)
+if you preferred.",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190755559,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190755559,hmfoster
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,"Either ""There are three"" or ""Here are three""",adf83912c043f486b7297c78b032ed7691c538ed,2018-05-24 23:18:00,190756161,"@@ -1,22 +1,222 @@
-# Client
+# Cryptomoji Client
 
-## Development
+In many ways building a web app as a client to a Sawtooth blockchain is not
+much different than building a web app for any server. You will create some
+React components that will display the data you _GET_ from a REST API. Users
+will fill out forms and you will take that information and _POST_ it. Of
+course, everything you _GET_ will be a base64 encoded binary file, and all of
+your _POSTs_ will be cryptographically signed transactions. But that's where
+the fun is!
 
-From this directory, 
+## Contents
+
+- [Getting Started](#getting-started)
+- [Running Tests](#running-tests)
+- [The Project](#the-project)
+    * [01 Signing](#01-signing)
+    * [02 Encoding](#02-encoding)
+    * [03 Transactions](#03-transactions)
+    * [04 Addressing](#04-addressing)
+    * [05 Requests](#05-requests)
+        - [GET /api/state/{address}](#get-apistateaddress)
+        - [GET /api/state?address={partial address}](#get-apistateaddresspartial-address)
+        - [POST /api/batches](#post-apibatches)
+    * [06 The User Interface](#06-the-user-interface)
+- [Extra Credit](#extra-credit)
+
+## Getting Started
+
+This component uses npm to manage dependencies, so the first thing you should
+do is install them:
 
 ```bash
+cd code/part-two/client/
 npm install
-npm run build:dev
 ```
 
-In another terminal instance,
+Once that's done, you will need to build your front-end code with _webpack_.
+This will use [source/index.jsx](source/index.jsx) as an entry point, and pull
+in all of your other modules from there to create a _bundle_ saved at
+`public/bundle.js`. Anything in the [public/](public/) directory will be served
+at `localhost:3000`, so when you run `docker-compose up` (see [Using
+Docker](../README.md#using-docker)), you should be able to view it from your
+browser. In order to run the build, there are a few commands you can use.
+
+You can build the production code:
+
+```bash
+npm run build:prod
+```
+
+You can also build the dev code. Aside from more helpful error messages, this
+mode will keep running and automatically rebuild anytime you save changes:
 
 ```bash
-npm run live-server
+npm run build:prod
+```
+
+And you can go a step further and serve the dev code from a live-reload server
+at `localhost:3001`. Good news, you won't have to refresh your page! Bad news,
+you won't be able to make any API calls or interact with the blockchain at all:
+
+```bash
+npm run watch
+```
+
+## Running Tests
+
+Like other components, the front-end uses Mocha/Chai for testing. Unlike other
+components, there is a pretty sweet browser-based test runner. To pull it up,
+simply run:
+
+```bash
+npm test
+```
+
+## The Project
+
+Before you start in on this part of the project make sure you have reviewed the
+[Sawtooth Curriculum](../README.md#the-curriculum), in particular the sections
+on build and submitting transactions, as well as
+[Signing](../../part-one/README.md#01-signing) from part one.
+
+### 01 Signing
+
+**Module:** [source/services/signing.js](source/services/signing.js)
+
+If you completed part one, this section should be pretty much done. Both
+Sawtooth and your DIY blockchain use Secp256k1 for signing, so you will be able
+to copy over most of your code.
+
+### 02 Encoding
+
+**Module:** [source/services/encoding.js](source/services/encoding.js)
+
+Next you will want to build a module to encode/decode transactions and state
+data. Remember from [the design](../README.md#encoding-data), that we are using
+_sorted_ JSON strings encoded in a Node Buffer. Webpack will allow you to use
+Buffers in the browser just fine, but you could also use
+[UInt8Arrays](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array)
+if you preferred.
+
+### 03 Transactions
+
+**Module:** [source/services/transactions.js](source/services/transactions.js)
+
+**Useful APIs:**
+- [Ptotobuf.js](https://github.com/dcodeIO/ProtoBuf.js/#using-the-js-api)
+
+This is the first really Sawtooth specific module. You will need to take your
+encoded payloads, and wrap them in a transaction. Then one or more transactions
+get wrapped in a batch, and one or more batches get wrapped in a batch list,
+which is finally serialized as bytes so it can be sent to the REST API. All of
+these data structures are _Google Protobufs_, which are a somewhat complex, but
+_very_ efficient way of serializing data. You don't need to become a protobuf
+expert to use Sawtooth, but you should probably familarize yourself with the,
+Protobuf.js API, which is what the Sawtooth SDK uses under the hood.
+
+In particular, be ready to use:
+
+- `TransactionHeader.encode(headerData).finish()`
+- `Transaction.create(transactionData)`
+- `BatchHeader.encode(batchHeaderData).finish()`
+- `Batch.create(batchData)`
+- `BatchList.encode(batchListData).finish()`
+
+### 04 Addressing
+
+**Module:** [source/services/addressing.js](source/services/addressing.js)
+
+The last module you will completing stub functions for is one to generate
+addresses for entities in state. You will need these in order to fetch any data
+from the REST API.
+
+### 05 Requests
+
+**Module:** _None_
+**Useful APIs:**
+- [Axios](https://github.com/axios/axios)
+- [Sawtooth REST API](https://sawtooth.hyperledger.org/docs/core/releases/1.0/rest_api/endpoint_specs.html)
+
+The design and execution of the rest of the client is entirely up to you. There
+are no more tests. One thing you will definitely need to do though is send
+GET/POST requests to the blockchain. If you like, you could incorporate this
+functionality throughout the rest of your app. However, it will likely make
+sense for you to create another services module to encapsulate interactions
+with the REST API.
+
+Either way, one perk of the docker setup for serving this client, is that the
+Sawtooth REST API has been proxied under the `api/` path, so you can access
+every REST API route using a relative path. There here are are three",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190756161,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190756161,hmfoster
https://github.com/hyperledger/education-cryptomoji/pull/84,https://github.com/hyperledger/education-cryptomoji/pull/84,"Is this supposed to say, ""and one common pattern""?",adf83912c043f486b7297c78b032ed7691c538ed,2018-05-25 00:08:21,190762866,"@@ -0,0 +1,206 @@
+# Cryptomoji Transaction Processor
+
+The transaction processor is where all the logic of your Sawtooth blockchain
+lives. You can think of it as analogous to ""smart contracts"" on other
+platforms, but it is a much more powerful concept. You can write a transaction
+processor to be as simple just setting keys to values, or as complex as entire
+application environments. For example, the
+[Sawtooth Seth](https://github.com/hyperledger/sawtooth-seth) transaction
+processor is an entire _Ethereum Virtual Machine_ which can run Solidity smart
+contracts right on a Sawtooth blockchain.
+
+## Contents
+
+- [Getting Started and Running Tests](#getting-started-and-running-tests)
+- [The Curriculum](#the-curriculum)
+    * [The Apply Method](#the-apply-method)
+    * [The Txn Object](#the-txn-object)
+    * [The Context Object](#the-context-object)
+- [The Project](#the-project)
+    * [01 Services](#01-services)
+    * [02 MojiHandler](#02-mojihandler)
+    * [03 Create Collection](#03-create-collection)
+    * [04 Select Sire](#04-select-sire)
+    * [05 Breed Moji](#05-breed-moji)
+- [Extra Credit](#extra-credit)
+
+## Getting Started and Running Tests
+
+As with the other components, npm is used to manage dependencies and extensive
+Mocha/Chai unit tests are provided to guide your efforts. To begin simply run:
+
+```bash
+cd code/part-two/processor/
+npm install
+npm test
+```
+
+You will see a number of tests running, and even more getting skipped (those
+are for the extra credit). Most of those that are _not_ being skipped are
+**failing**. There is no UI for you to design and build here, so your job is as
+simple (or as complex) as getting these tests to pass.
+
+In order to start up the full processor, run `docker-compose up` as detailed in
+the [Using Docker](../README.md#using-docker) section of the part-two README.
+
+## The Curriculum
+
+Before you start on building this section make sure you have reviewed the
+[Sawtooth Curriculum](../README.md#the-curriculum), in particular the sections
+on global state, and the transaction processor tutorial. Also be familiar with
+the [Design](../README.md#the-design) of the Cryptomoji app. Although it
+applies to the client too, the lion's share of implementing this design will
+happen here, in the transaction processor.
+
+### The Apply Method
+
+In particular you should understand the [apply](handler.js#L48) method.
+This is where the majority of the work of processing a transaction happens. It
+takes two special objects, `txn` and `context`, which contain all of the data
+and methods you will need, and are explained in detail below.
+
+When you are done handling a transaction, the apply method should terminate in
+one of two ways. If everything went well, it returns a Promise. Otherwise, it
+throws an `InvalidTransaction` error. This works just like throwing a regular
+`Error`, but the Sawtooth SDK will be watching for invalid transaction errors
+in particular, and uses them as a trigger to properly handle and report
+transactions that are invalid.
+
+### The Txn Object
+
+The `txn` object is essentially the transaction sent from your client, though
+for convenience, the header has been deserialized for you. This gives you
+access to some useful information that may come in handy when executing the
+Cryptomoji design:
+
+- `txn.payload` - The payload sent from your client, the first thing you should
+  do is decode it
+- `txn.header` - All of the header information sent with your transaction
+- `txn.header.signerPublicKey` - The public key used to sign the transaction,
+  i.e. the identity of your user
+- `txn.signature` - Already validated by the validator, but maybe useful if you
+  were looking for seemingly random seed for some reason . . .
+
+### The Context Object
+
+The `context` object contains methods for accessing and modifying blockchain
+state. Each returns a Promise which will resolve when the state data is fetched
+or modified. Depending on the use case, you may call many of these methods in a
+long Promise chain, and I common pattern is to return this chain directly out",,2018-05-25 01:19:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190762866,https://github.com/hyperledger/education-cryptomoji/pull/84#discussion_r190762866,hmfoster
https://github.com/hyperledger/education-cryptomoji/pull/80,https://github.com/hyperledger/education-cryptomoji/pull/80,typo: `prompt`,060b868c824b00d907d3477e815b66a61e6d1ef4,2018-05-24 14:51:40,190616754,"@@ -17,53 +16,62 @@ underneath the name of this repo above.
 [New Issue button](https://github.com/hyperledger/education-cryptobunnies/issues/new)
 on the right side of the page.
 3. Enter a title and description for the issue.
-4. Select a label on the right side ([see below](#labels)).
+4. If applicable, select a label on the right side (such as ""bug"").
 5. Click _""Submit new issue""_.
 
 The title should be a concise label identifying the bug or feature, while the
-_""Leave a comment""_ section below the title should contain a description with
-as much detail as possible. For bugs or typos be sure to include:
+_""Leave a comment""_ section below should contain a description with as much
+detail as possible. For bugs or typos this might include:
 
-- The specific behavior, and what caused that behavior
+- The specific behavior, and what behavior you expected
+- What steps someone else could take to reproduce the bug
 - Any console logs or other diagnostic information
 - Filenames and line numbers if possible (especially for typos)
 
-### Labels
+## Making Code Contributions
 
-There are a few common labels we may use, and encourage any contributors to use
-when opening an issue:
+Like many projects on GitHub, contributions are submitted by creating a fork of
+the repo, making some changes there, and then submitting them back as a Pull
+Request for review. A detailed explanation of the workflow is provided below.
+While we are open to any help you'd like to give, if you are looking for a good
+place to start, you might checkout the _Issues_ page and see if there is
+anything labeled ""help wanted"" that you could tackle.
 
-- **bug** - any bug, typo, or other misbehavior that needs to be fixed
-- **enhancement** - the implementation of any new features
-- **design** - blueprint for new features, this work may happen outside of this
-repo but progress will still be tracked here
-- **help wanted** - issues which we would specifically like external help for
+### Submitting Pull Requests
 
-## Submitting Pull Requests
+While the fork to PR process is fairly standard, somewhat more unusual is that
+`master` is _not_ the branch to make a PR against. Here master is not the
+source of truth, but a collection of generated stub functions for students to
+fill out. The original source of this code is actually in the `staging` branch,
+and _all_ PRs should be made against staging.
+
+The detailed process is as follows:
 
 1. Create a personal fork of this repository.
-2. Create a topic branch specific to the bug/enhancement you are addressing.
-3. Submit a pull request.
+2. Starting from `staging`, create a topic branch specific to your changes.
+3. Submit a pull request from the topic branch on your fork to `staging` on
+   this repo.
 4. Add other developers as reviewers.
 5. Make changes as requested by rebasing the appropriate commits, and then
-force-pushing to your branch.
+   force-pushing to your branch.
 
 Pull requests can be merged once all requests for change have been addressed,
-and when approved by at least one other developer. Project maintainers will
-personally merge their own PRs, as well as those of external contributors which
-have received the necessary approvals. When merging someone else's PR,
-maintainers should use the _""Create a merge commit""_ option, but when merging
-their own work it is preferable to use the _""Rebase and merge""_ option.
+and when approved by at least one project maintainer. The actual merge will be
+done by a maintainer as well.
+
+Note, maintainers should take care when merging to always use the
+_""Create a merge commit""_ option, as rebasing will result in important
+information about the commit history being lost later when the promp files are",,2018-05-24 16:32:47,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/190616754,https://github.com/hyperledger/education-cryptomoji/pull/80#discussion_r190616754,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,typo: `a a hex private key`,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-20 22:05:21,189471922,"@@ -38,8 +54,8 @@ export const createKeys = () => {
 };
 
 /**
- * Takes a private key and returns a signing function. This function will
- * take a Buffer message, and return a hexadecimal signature.
+ * Takes a a hex private key and a string message, returning a",,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189471922,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189471922,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,Should we sort addresses before we join them?,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-21 16:44:28,189646472,"@@ -0,0 +1,124 @@
+'use strict';
+
+const { createHash } = require('crypto');
+
+
+const NAMESPACE = '5f4d76';
+const PREFIXES = {
+  COLLECTION: '00',
+  MOJI: '01',
+  SIRE_LISTING: '02',
+  OFFER: '03'
+};
+
+// START SOLUTION
+Object.keys(PREFIXES).forEach(p => { PREFIXES[p] = NAMESPACE + PREFIXES[p]; });
+
+// Returns a hex-string SHA-512 hash sliced to a particular length
+const hash = (str, length) => {
+  return createHash('sha512').update(str).digest('hex').slice(0, length);
+};
+
+//END SOLUTION
+/**
+ * A function that takes a public key and returns the correct collection
+ * address.
+ *
+ * Simpler than the client version, the public key is not optional so this
+ * function should always always return a full address.
+ *
+ * Example:
+ *   const address = getCollectionAddress(publicKey);
+ *   console.log(address);
+ *   // '5f4d7600ecd7ef459ec82a01211983551c3ed82169ca5fa0703ec98e17f9b534ffb797'
+ */
+const getCollectionAddress = publicKey => {
+  /* START PROBLEM
+  // Enter your solution here
+
+  END PROBLEM */
+  // START SOLUTION
+  return PREFIXES.COLLECTION + hash(publicKey, 62);
+  // END SOLUTION
+};
+
+/**
+ * A function that takes a public key and a moji dna string, returning the
+ * correct moji address.
+ */
+const getMojiAddress = (ownerKey, dna) => {
+  /* START PROBLEM
+  // Your code here
+
+  END PROBLEM */
+  // START SOLUTION
+  return PREFIXES.MOJI + hash(ownerKey, 8) + hash(dna, 54);
+  // END SOLUTION
+};
+
+/**
+ * A function that takes a public key, and returns the correct sire
+ * listing address.
+ */
+const getSireAddress = ownerKey => {
+  /* START PROBLEM
+  // Your code here
+
+  END PROBLEM */
+  // START SOLUTION
+  return PREFIXES.SIRE_LISTING + hash(ownerKey, 62);
+  // END SOLUTION
+};
+
+/**
+ * EXTRA CREDIT
+ * Only needed if you add trading cryptomoji to your transaction processor.
+ * Remove the `.skip` from line 184 of tests/01-Services.js to test.
+ *
+ * A function that takes a public key and one or more moji addresses,
+ * returning the correct offer address.
+ *
+ * Unlike the client version, moji may only be identified by addresses, not
+ * dna strings.
+ */
+const getOfferAddress = (ownerKey, addresses) => {
+  /* START PROBLEM
+  // Your code here
+
+  END PROBLEM */
+  // START SOLUTION
+  if (!Array.isArray(addresses)) {
+    addresses = [ addresses ];
+  }
+
+  return PREFIXES.OFFER + hash(ownerKey, 8) + hash(addresses.join(''), 54);",,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189646472,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189646472,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,Should we rename `collectionPrefix` to `offerPrefix` instead?,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-21 16:48:42,189647603,"@@ -1,71 +1,138 @@
-import { hash } from '../utils/helpers';
-import {
-  NAMESPACE,
-  TYPE_PREFIXES,
-  ADDRESS_LENGTH
-} from '../utils/constants';
+import { createHash } from 'crypto';
 
+
+const NAMESPACE = '5f4d76';
+const PREFIXES = {
+  COLLECTION: '00',
+  MOJI: '01',
+  SIRE_LISTING: '02',
+  OFFER: '03'
+};
+// START SOLUTION
+const ADDRESS_LENGTH = 70;
+
+Object.keys(PREFIXES).forEach(p => { PREFIXES[p] = NAMESPACE + PREFIXES[p]; });
+
+// Returns a hex-string SHA-512 hash sliced to a particular length
+const hash = (str, length) => {
+  return createHash('sha512').update(str).digest('hex').slice(0, length);
+};
+
+/**
+ * Takes an address returns a string corresponding to its type.
+ */
+export const addressToType = (address = '') => {
+  const type = Object.keys(PREFIXES)
+    .find(type => PREFIXES[type] === address.slice(0, 8));
+
+  return type || null;
+};
+
+// END SOLUTION
 /**
- * Optionally takes a public key, and returns a collection address.
+ * A function which optionally takes a public key, and returns a full or
+ * partial collection address.
  *
- * If key is omitted, a partial type prefix is returned.
+ * Should work similarly to the processor version, but if the public key is
+ * omitted returns the 8 character prefix which will fetch all collections
+ * from the REST API, otherwise returns the full 70 character address.
+ *
+ * Example:
+ *   const prefix = getCollectionAddress();
+ *   console.log(prefix);  // '5f4d7600'
+ *   const address = getCollectionAddress(publicKey);
+ *   console.log(address);
+ *   // '5f4d7600ecd7ef459ec82a01211983551c3ed82169ca5fa0703ec98e17f9b534ffb797'
  */
 export const getCollectionAddress = (publicKey = null) => {
-  const prefix = NAMESPACE + TYPE_PREFIXES.COLLECTION;
+  /* START PROBLEM
+  // Enter your solution here
+
+  END PROBLEM */
+  // START SOLUTION
   if (publicKey === null) {
-    return prefix;
+    return PREFIXES.COLLECTION;
   }
 
-  return prefix + hash(publicKey, 62);
+  return PREFIXES.COLLECTION + hash(publicKey, 62);
+  // END SOLUTION
 };
 
 /**
- * Optionally takes a public key and moji dna, and returns a moji address.
+ * A function which optionally takes a public key and moji dna, returning
+ * a full or partial moji address.
  *
- * If key or dna is omitted, a partial prefix is returned.
+ * If called with no arguments, returns the 8-char moji prefix. If called with
+ * just a public key, returns the 16-char owner prefix which will return all
+ * moji owned by this key. Passing in the dna as well returns a full address.
+ *
+ * Example:
+ *   const ownerPrefix = getMojiAddress(publicKey);
+ *   console.log(ownerPrefix);  // '5f4d7601ecd7ef45'
  */
 export const getMojiAddress = (ownerKey = null, dna = null) => {
-  const typePrefix = NAMESPACE + TYPE_PREFIXES.MOJI;
+  /* START PROBLEM
+  // Your code here
+
+  END PROBLEM */
+  // START SOLUTION
   if (ownerKey === null) {
-    return typePrefix;
+    return PREFIXES.MOJI;
   }
 
-  const collectionPrefix = typePrefix + hash(ownerKey, 8);
+  const collectionPrefix = PREFIXES.MOJI + hash(ownerKey, 8);
   if (dna === null) {
     return collectionPrefix;
   }
 
   return collectionPrefix + hash(dna, 54);
+  // END SOLUTION
 };
 
 /**
- * Optionally takes a public key, and returns a sire listing address.
+ * A function which optionally takes a public key, and returns a full or
+ * partial sire listing address.
  *
- * If key is omitted, a partial type prefix is returned.
+ * If the public key is omitted, returns just the sire listing prefix,
+ * otherwise returns the full address.
  */
 export const getSireAddress = (ownerKey = null) => {
-  const prefix = NAMESPACE + TYPE_PREFIXES.SIRE_LISTING;
+  /* START PROBLEM
+  // Your code here
+
+  END PROBLEM */
+  // START SOLUTION
   if (ownerKey === null) {
-    return prefix;
+    return PREFIXES.SIRE_LISTING;
   }
 
-  return prefix + hash(ownerKey, 62);
+  return PREFIXES.SIRE_LISTING + hash(ownerKey, 62);
+  // END SOLUTION
 };
 
 /**
- * Optionally takes a public key and one or more moji identifiers,
- * and returns a collection address.
+ * EXTRA CREDIT
+ * Only needed if you implement the full transaction processor, adding the
+ * functionality to trade cryptomoji. Remove `.skip` from line 96 of
+ * tests/04-Addressing.js to test.
+ *
+ * A function that optionally takes a public key and one or more moji
+ * identifiers, and returns a full or partial offer address.
  *
- * If key or identifiers are omitted, a partial type prefix is returned.
- * Identifiers may be either moji dna, or moji addresses.
+ * If key or identifiers are omitted, returns just the offer prefix.
+ * The identifiers may be either moji dna, or moji addresses.
  */
 export const getOfferAddress = (ownerKey = null, moji = null) => {
-  const typePrefix = NAMESPACE + TYPE_PREFIXES.OFFER;
+  /* START PROBLEM
+  // Your code here
+
+  END PROBLEM */
+  // START SOLUTION
   if (ownerKey === null) {
-    return typePrefix;
+    return PREFIXES.OFFER;
   }
 
-  const collectionPrefix = typePrefix + hash(ownerKey, 8);
+  const collectionPrefix = PREFIXES.OFFER + hash(ownerKey, 8);",,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189647603,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189647603,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,Should we sort addresses before we join them?,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-21 16:49:01,189647687,"@@ -79,22 +146,9 @@ export const getOfferAddress = (ownerKey = null, moji = null) => {
       return addressOrDna;
     }
 
-    return getMojiAddress(publicKey, addressOrDna);
+    return getMojiAddress(ownerKey, addressOrDna);
   });
 
   return collectionPrefix + hash(addresses.join(''), 54);",,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189647687,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189647687,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,Should we sort addresses before we join them?,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-21 16:49:20,189647780,"@@ -0,0 +1,49 @@
+'use strict';
+
+const { createHash } = require('crypto');
+
+
+const NAMESPACE = '5f4d76';
+const PREFIXES = {
+  COLLECTION: '00',
+  MOJI: '01',
+  SIRE_LISTING: '02',
+  OFFER: '03'
+};
+Object.keys(PREFIXES).forEach(p => { PREFIXES[p] = NAMESPACE + PREFIXES[p]; });
+
+// Returns a hex-string SHA-512 hash sliced to a particular length
+const hash = (str, length) => {
+  return createHash('sha512').update(str).digest('hex').slice(0, length);
+};
+
+// Takes a public key and returns a collection address
+const getCollectionAddress = publicKey => {
+  return PREFIXES.COLLECTION + hash(publicKey, 62);
+};
+
+// Takes an owner's public key and dna string and returns a moji address
+const getMojiAddress = (ownerKey, dna) => {
+  return PREFIXES.MOJI + hash(ownerKey, 8) + hash(dna, 54);
+};
+
+// Takes an owner's public key and returns the address for their sire listing
+const getSireAddress = ownerKey => {
+  return PREFIXES.SIRE_LISTING + hash(ownerKey, 62);
+};
+
+// Takes a public key and array of moji addresses, returns an offer address
+const getOfferAddress = (ownerKey, addresses) => {
+  if (!Array.isArray(addresses)) {
+    addresses = [ addresses ];
+  }
+
+  return PREFIXES.OFFER + hash(ownerKey, 8) + hash(addresses.join(''), 54);",,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189647780,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189647780,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,I think `address` should be plural too (`should create collections at correct addresses`),6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-21 17:18:35,189655307,"@@ -24,19 +28,17 @@ describe('Create Collection', function() {
     context = new Context();
     txn = new Txn({ action: 'CREATE_COLLECTION' });
     publicKey = txn._publicKey;
-    address = getAddress.collection(publicKey);
+    address = getCollectionAddress(publicKey);
   });
 
-  it('should create a Collection at the correct address', function() {
+  it('should create collections at the correct address', function() {",,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189655307,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189655307,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,`cancelled`,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-21 17:22:36,189656329,"@@ -38,7 +39,7 @@ describe('Cancel Offer', function() {
       });
   });
 
-  it('should delete a canceled offer', function() {
+  it('should delete canceled offers', function() {",40,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189656329,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189656329,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,`cancelling`,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-21 17:22:54,189656391,"@@ -47,44 +48,41 @@ describe('Cancel Offer', function() {
       });
   });
 
-  it('should reject public keys with no Collection', function() {
+  it('should reject public keys with no collection', function() {
     delete context._state[getCollectionAddress(publicKey)];
     const txn = new Txn({ action: 'CANCEL_OFFER', offer }, privateKey);
 
     return handler.apply(txn, context)
       .catch(err => {
-        expect(err, 'Error should be an InvalidTransaction')
-          .to.be.instanceOf(InvalidTransaction);
+        expect(err).to.be.instanceOf(InvalidTransaction);
         return true;
       })
       .then(wasRejected => {
         expect(wasRejected, 'Transaction should be rejected').to.be.true;
-        expect(context._state[offer], 'Offer should still exist').to.exist;
+        expect(context._state[offer]).to.exist;
       });
   });
 
-  it('should reject canceling an offer that is not set', function() {
+  it('should reject canceling offers that are not set', function() {",69,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189656391,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189656391,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,`cancelling`,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-21 17:23:07,189656441,"@@ -47,44 +48,41 @@ describe('Cancel Offer', function() {
       });
   });
 
-  it('should reject public keys with no Collection', function() {
+  it('should reject public keys with no collection', function() {
     delete context._state[getCollectionAddress(publicKey)];
     const txn = new Txn({ action: 'CANCEL_OFFER', offer }, privateKey);
 
     return handler.apply(txn, context)
       .catch(err => {
-        expect(err, 'Error should be an InvalidTransaction')
-          .to.be.instanceOf(InvalidTransaction);
+        expect(err).to.be.instanceOf(InvalidTransaction);
         return true;
       })
       .then(wasRejected => {
         expect(wasRejected, 'Transaction should be rejected').to.be.true;
-        expect(context._state[offer], 'Offer should still exist').to.exist;
+        expect(context._state[offer]).to.exist;
       });
   });
 
-  it('should reject canceling an offer that is not set', function() {
+  it('should reject canceling offers that are not set', function() {
     const txn = new Txn({ action: 'CANCEL_OFFER' }, privateKey);
 
     return handler.apply(txn, context)
       .catch(err => {
-        expect(err, 'Error should be an InvalidTransaction')
-          .to.be.instanceOf(InvalidTransaction);
+        expect(err).to.be.instanceOf(InvalidTransaction);
         return true;
       })
       .then(wasRejected => {
         expect(wasRejected, 'Transaction should be rejected').to.be.true;
       });
   });
 
-  it('should reject canceling an offer that does not exist', function() {
+  it('should reject canceling offers that do not exist', function() {",,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189656441,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189656441,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,I think `wasRejected` is no longer being used any more,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-21 17:33:53,189659198,"@@ -166,17 +163,11 @@ describe('Accept Response', function() {
   it('should reject acceptances for indexes with no response', function() {
     const payload = { action: 'ACCEPT_RESPONSE', offer, response: 1 };
     const txn = new Txn(payload, ownerPriv);
+    const submission = handler.apply(txn, context);
 
-    return handler.apply(txn, context)
-      .catch(err => {
-        expect(err, 'Error should be an InvalidTransaction')
-          .to.be.instanceOf(InvalidTransaction);
-        return true;
-      })
+    return expect(submission).to.be.rejectedWith(InvalidTransaction)
       .then(wasRejected => {",143,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189659198,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189659198,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,might need comma after `omitted`,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-21 17:35:28,189659626,"@@ -35,9 +33,9 @@ export const addressToType = (address = '') => {
  * A function which optionally takes a public key, and returns a full or
  * partial collection address.
  *
- * If the public key is omitted, returns the 8 character prefix which will
- * fetch all collections from the REST API, otherwise returns the full
- * 70 character address.
+ * Should work similarly to the processor version, but if the public key is
+ * omitted returns the 8 character prefix which will fetch all collections",,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189659626,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189659626,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,Yes. Damn. I'll add a commit.,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-22 02:34:19,189763780,"@@ -79,22 +146,9 @@ export const getOfferAddress = (ownerKey = null, moji = null) => {
       return addressOrDna;
     }
 
-    return getMojiAddress(publicKey, addressOrDna);
+    return getMojiAddress(ownerKey, addressOrDna);
   });
 
   return collectionPrefix + hash(addresses.join(''), 54);",,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189763780,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189763780,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,"Actually either spelling is correct, and the two-L spelling is considered British.

https://www.merriam-webster.com/dictionary/cancel",6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-22 03:11:20,189767822,"@@ -38,7 +39,7 @@ describe('Cancel Offer', function() {
       });
   });
 
-  it('should delete a canceled offer', function() {
+  it('should delete canceled offers', function() {",40,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189767822,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189767822,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,Same as `canceled`.,6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-22 03:12:19,189767916,"@@ -47,44 +48,41 @@ describe('Cancel Offer', function() {
       });
   });
 
-  it('should reject public keys with no Collection', function() {
+  it('should reject public keys with no collection', function() {
     delete context._state[getCollectionAddress(publicKey)];
     const txn = new Txn({ action: 'CANCEL_OFFER', offer }, privateKey);
 
     return handler.apply(txn, context)
       .catch(err => {
-        expect(err, 'Error should be an InvalidTransaction')
-          .to.be.instanceOf(InvalidTransaction);
+        expect(err).to.be.instanceOf(InvalidTransaction);
         return true;
       })
       .then(wasRejected => {
         expect(wasRejected, 'Transaction should be rejected').to.be.true;
-        expect(context._state[offer], 'Offer should still exist').to.exist;
+        expect(context._state[offer]).to.exist;
       });
   });
 
-  it('should reject canceling an offer that is not set', function() {
+  it('should reject canceling offers that are not set', function() {",69,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189767916,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189767916,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,"Commits could be out of order in the PR (GitHub does weird orders with rebases sometimes). As of this commit, `wasRejected` is still used. Later this whole messy promise construct gets refactored into a custom chai method: `rejectedWith`.",6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-22 03:17:57,189768414,"@@ -166,17 +163,11 @@ describe('Accept Response', function() {
   it('should reject acceptances for indexes with no response', function() {
     const payload = { action: 'ACCEPT_RESPONSE', offer, response: 1 };
     const txn = new Txn(payload, ownerPriv);
+    const submission = handler.apply(txn, context);
 
-    return handler.apply(txn, context)
-      .catch(err => {
-        expect(err, 'Error should be an InvalidTransaction')
-          .to.be.instanceOf(InvalidTransaction);
-        return true;
-      })
+    return expect(submission).to.be.rejectedWith(InvalidTransaction)
       .then(wasRejected => {",143,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189768414,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189768414,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/79,https://github.com/hyperledger/education-cryptomoji/pull/79,"Hrmm, well the intention here is that this is the prefix that designates the owner collection (same as in `getMojiAddress`). Perhaps `ownerPrefix` would be more clear.",6cd97fae9266d06c937e380dcab448ed1f6cbd93,2018-05-22 03:23:47,189768939,"@@ -1,71 +1,138 @@
-import { hash } from '../utils/helpers';
-import {
-  NAMESPACE,
-  TYPE_PREFIXES,
-  ADDRESS_LENGTH
-} from '../utils/constants';
+import { createHash } from 'crypto';
 
+
+const NAMESPACE = '5f4d76';
+const PREFIXES = {
+  COLLECTION: '00',
+  MOJI: '01',
+  SIRE_LISTING: '02',
+  OFFER: '03'
+};
+// START SOLUTION
+const ADDRESS_LENGTH = 70;
+
+Object.keys(PREFIXES).forEach(p => { PREFIXES[p] = NAMESPACE + PREFIXES[p]; });
+
+// Returns a hex-string SHA-512 hash sliced to a particular length
+const hash = (str, length) => {
+  return createHash('sha512').update(str).digest('hex').slice(0, length);
+};
+
+/**
+ * Takes an address returns a string corresponding to its type.
+ */
+export const addressToType = (address = '') => {
+  const type = Object.keys(PREFIXES)
+    .find(type => PREFIXES[type] === address.slice(0, 8));
+
+  return type || null;
+};
+
+// END SOLUTION
 /**
- * Optionally takes a public key, and returns a collection address.
+ * A function which optionally takes a public key, and returns a full or
+ * partial collection address.
  *
- * If key is omitted, a partial type prefix is returned.
+ * Should work similarly to the processor version, but if the public key is
+ * omitted returns the 8 character prefix which will fetch all collections
+ * from the REST API, otherwise returns the full 70 character address.
+ *
+ * Example:
+ *   const prefix = getCollectionAddress();
+ *   console.log(prefix);  // '5f4d7600'
+ *   const address = getCollectionAddress(publicKey);
+ *   console.log(address);
+ *   // '5f4d7600ecd7ef459ec82a01211983551c3ed82169ca5fa0703ec98e17f9b534ffb797'
  */
 export const getCollectionAddress = (publicKey = null) => {
-  const prefix = NAMESPACE + TYPE_PREFIXES.COLLECTION;
+  /* START PROBLEM
+  // Enter your solution here
+
+  END PROBLEM */
+  // START SOLUTION
   if (publicKey === null) {
-    return prefix;
+    return PREFIXES.COLLECTION;
   }
 
-  return prefix + hash(publicKey, 62);
+  return PREFIXES.COLLECTION + hash(publicKey, 62);
+  // END SOLUTION
 };
 
 /**
- * Optionally takes a public key and moji dna, and returns a moji address.
+ * A function which optionally takes a public key and moji dna, returning
+ * a full or partial moji address.
  *
- * If key or dna is omitted, a partial prefix is returned.
+ * If called with no arguments, returns the 8-char moji prefix. If called with
+ * just a public key, returns the 16-char owner prefix which will return all
+ * moji owned by this key. Passing in the dna as well returns a full address.
+ *
+ * Example:
+ *   const ownerPrefix = getMojiAddress(publicKey);
+ *   console.log(ownerPrefix);  // '5f4d7601ecd7ef45'
  */
 export const getMojiAddress = (ownerKey = null, dna = null) => {
-  const typePrefix = NAMESPACE + TYPE_PREFIXES.MOJI;
+  /* START PROBLEM
+  // Your code here
+
+  END PROBLEM */
+  // START SOLUTION
   if (ownerKey === null) {
-    return typePrefix;
+    return PREFIXES.MOJI;
   }
 
-  const collectionPrefix = typePrefix + hash(ownerKey, 8);
+  const collectionPrefix = PREFIXES.MOJI + hash(ownerKey, 8);
   if (dna === null) {
     return collectionPrefix;
   }
 
   return collectionPrefix + hash(dna, 54);
+  // END SOLUTION
 };
 
 /**
- * Optionally takes a public key, and returns a sire listing address.
+ * A function which optionally takes a public key, and returns a full or
+ * partial sire listing address.
  *
- * If key is omitted, a partial type prefix is returned.
+ * If the public key is omitted, returns just the sire listing prefix,
+ * otherwise returns the full address.
  */
 export const getSireAddress = (ownerKey = null) => {
-  const prefix = NAMESPACE + TYPE_PREFIXES.SIRE_LISTING;
+  /* START PROBLEM
+  // Your code here
+
+  END PROBLEM */
+  // START SOLUTION
   if (ownerKey === null) {
-    return prefix;
+    return PREFIXES.SIRE_LISTING;
   }
 
-  return prefix + hash(ownerKey, 62);
+  return PREFIXES.SIRE_LISTING + hash(ownerKey, 62);
+  // END SOLUTION
 };
 
 /**
- * Optionally takes a public key and one or more moji identifiers,
- * and returns a collection address.
+ * EXTRA CREDIT
+ * Only needed if you implement the full transaction processor, adding the
+ * functionality to trade cryptomoji. Remove `.skip` from line 96 of
+ * tests/04-Addressing.js to test.
+ *
+ * A function that optionally takes a public key and one or more moji
+ * identifiers, and returns a full or partial offer address.
  *
- * If key or identifiers are omitted, a partial type prefix is returned.
- * Identifiers may be either moji dna, or moji addresses.
+ * If key or identifiers are omitted, returns just the offer prefix.
+ * The identifiers may be either moji dna, or moji addresses.
  */
 export const getOfferAddress = (ownerKey = null, moji = null) => {
-  const typePrefix = NAMESPACE + TYPE_PREFIXES.OFFER;
+  /* START PROBLEM
+  // Your code here
+
+  END PROBLEM */
+  // START SOLUTION
   if (ownerKey === null) {
-    return typePrefix;
+    return PREFIXES.OFFER;
   }
 
-  const collectionPrefix = typePrefix + hash(ownerKey, 8);
+  const collectionPrefix = PREFIXES.OFFER + hash(ownerKey, 8);",,2018-05-22 03:38:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189768939,https://github.com/hyperledger/education-cryptomoji/pull/79#discussion_r189768939,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,I think this can be shortened to `return block.transactions.every(isValidTransaction);`,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:25:29,189446233,"@@ -4,11 +4,22 @@ const { createHash } = require('crypto');
 const signing = require('./signing');
 
 const isValidTransaction = transaction => {
+  const toSign = transaction.source
+    + transaction.recipient
+    + transaction.amount;
 
+  return signing.verify(transaction.source, toSign, transaction.signature);
 };
 
 const isValidBlock = block => {
+  const transactionString = block.transactions.map(t => t.signature).join('');
+  const toHash = block.previousHash + transactionString + block.nonce;
 
+  if (block.hash !== createHash('sha512').update(toHash).digest('hex')) {
+    return false;
+  }
+
+  return block.transactions.every(t => isValidTransaction(t));",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446233,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446233,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,maybe another opportunity for `.every(isValidTransaction)`,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:27:58,189446276,"@@ -23,11 +23,28 @@ const isValidBlock = block => {
 };
 
 const isValidChain = blockchain => {
+  const { blocks } = blockchain;
 
+  if (blocks[0].previousHash !== null) {
+    return false;
+  }
+
+  if (blocks.slice(1).some((b, i) => b.previousHash !== blocks[i].hash)) {
+    return false;
+  }
+
+  if (blocks.some(b => !isValidBlock(b))) {
+    return false;
+  }
+
+  return blocks
+    .map(b => b.transactions)
+    .reduce((flat, txns) => flat.concat(txns), [])
+    .every(t => isValidTransaction(t));",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446276,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446276,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,😂 ,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:28:09,189446279,"@@ -23,11 +23,28 @@ const isValidBlock = block => {
 };
 
 const isValidChain = blockchain => {
+  const { blocks } = blockchain;
 
+  if (blocks[0].previousHash !== null) {
+    return false;
+  }
+
+  if (blocks.slice(1).some((b, i) => b.previousHash !== blocks[i].hash)) {
+    return false;
+  }
+
+  if (blocks.some(b => !isValidBlock(b))) {
+    return false;
+  }
+
+  return blocks
+    .map(b => b.transactions)
+    .reduce((flat, txns) => flat.concat(txns), [])
+    .every(t => isValidTransaction(t));
 };
 
 const breakChain = blockchain => {
-
+  blockchain.blocks[1].transactions[0].amount = 1000000000;",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446279,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446279,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"are we worried about this method failing if blockchain.addBlock() has yet to be invoked (and therefore blocks[1] === undefined)?

",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:30:17,189446310,"@@ -23,11 +23,28 @@ const isValidBlock = block => {
 };
 
 const isValidChain = blockchain => {
+  const { blocks } = blockchain;
 
+  if (blocks[0].previousHash !== null) {
+    return false;
+  }
+
+  if (blocks.slice(1).some((b, i) => b.previousHash !== blocks[i].hash)) {
+    return false;
+  }
+
+  if (blocks.some(b => !isValidBlock(b))) {
+    return false;
+  }
+
+  return blocks
+    .map(b => b.transactions)
+    .reduce((flat, txns) => flat.concat(txns), [])
+    .every(t => isValidTransaction(t));
 };
 
 const breakChain = blockchain => {
-
+  blockchain.blocks[1].transactions[0].amount = 1000000000;",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446310,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446310,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,I think `'0'.repeat(blockchain.difficulty)` can work nicely here,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:35:37,189446394,"@@ -88,8 +88,48 @@ class MineableChain extends Blockchain {
   }
 }
 
+const isValidMineableChain = blockchain => {
+  const zeros = Array(blockchain.difficulty).fill('0').join('');",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446394,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446394,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,should we confirm that the `amount` is positive?,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:40:31,189446472,"@@ -88,8 +88,48 @@ class MineableChain extends Blockchain {
   }
 }
 
+const isValidMineableChain = blockchain => {
+  const zeros = Array(blockchain.difficulty).fill('0').join('');
+  const { blocks } = blockchain;
+
+  if (blocks.slice(1).some(b => b.hash.slice(0, zeros.length) !== zeros)) {
+    return false;
+  }
+
+  const balances = {};
+
+  for (const { transactions } of blocks) {
+    const rewards = transactions.filter(t => !t.source);
+
+    if (rewards.length > 1) {
+      return false;
+    }
+
+    if (rewards[0] && rewards[0].amount !== blockchain.reward) {
+      return false;
+    }
+
+    for (const { source, recipient, amount } of transactions) {
+      if (source) {
+        balances[source] = balances[source] || 0;
+        balances[source] = balances[source] - amount;
+
+        if (balances[source] < 0) {
+          return false;
+        }
+      }
+
+      balances[recipient] = balances[recipient] || 0;
+      balances[recipient] = balances[recipient] + amount;",221,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446472,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446472,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,I think we didn't use `chai` for the `part-two` tests. Do we need to use it here?,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:44:41,189446530,"@@ -0,0 +1,21 @@
+'use strict';
+
+const { expect } = require('chai');",3,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446530,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446530,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,Can we do `expect(signature).to.be.a.hexString;` like at https://github.com/hyperledger/education-cryptomoji/blob/4f082ac694eb9953ee2d27cf0aad02af5f66e75c/code/part-two/client/tests/01-Signing.js#L23?,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:47:07,189446554,"@@ -28,7 +32,29 @@ describe('Signing module', function() {
   });
 
   describe('sign', function() {
+    const message = randomBytes(16);
+    let publicKey = null;
+    let signature = null;
+
+    beforeEach(function() {
+      const privateKey = signing.createPrivateKey();
+      publicKey = signing.getPublicKey(privateKey);
+      signature = signing.sign(privateKey, message);
+    });
+
+    it('should return a hex string', function() {
+      expect(signature).to.be.a('string').and.match(/^[0-9a-f]*$/);",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446554,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446554,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"Should we order the arguments on ln 26 in the same way we pass them into `secp256k1.sign(...)` on ln 27 (aka message, then privateKey)?",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:49:40,189446591,"@@ -23,12 +23,17 @@ const getPublicKey = privateKey => {
   return secp256k1.publicKeyCreate(toBytes(privateKey)).toString('hex');
 };
 
-const sign = (message, privateKey) => {
-
+const sign = (privateKey, message) => {
+  const { signature } = secp256k1.sign(sha256(message), toBytes(privateKey));",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446591,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446591,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"Should we order the arguments on ln 31 in the same way we pass them into secp256k1.verify(...) on ln 32 (aka publicKey, message, then signature)?",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:50:11,189446619,"@@ -23,12 +23,17 @@ const getPublicKey = privateKey => {
   return secp256k1.publicKeyCreate(toBytes(privateKey)).toString('hex');
 };
 
-const sign = (message, privateKey) => {
-
+const sign = (privateKey, message) => {
+  const { signature } = secp256k1.sign(sha256(message), toBytes(privateKey));
+  return signature.toString('hex');
 };
 
-const verify = (message, signature, publicKey) => {
-
+const verify = (publicKey, message, signature) => {
+  return secp256k1.verify(
+    sha256(message),
+    toBytes(signature),
+    toBytes(publicKey)
+  );",106,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446619,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446619,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,Should we try `expect(publicKey).to.be.a.hexString;` here as well (if it works)?,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:50:56,189446629,"@@ -31,6 +31,33 @@ describe('Signing module', function() {
     });
   });
 
+  describe('getPublicKey', function() {
+    let privateKey = null;
+    let publicKey = null
+
+    beforeEach(function() {
+      privateKey = signing.createPrivateKey();
+      publicKey = signing.getPublicKey(privateKey);
+    });
+
+    it('should return a hex string', function() {
+      expect(publicKey).to.be.a('string').and.match(/^[0-9a-f]*$/);",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446629,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446629,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,Having a default parameter `recipient = null` followed by a required argument `amount` seems a little wonky. Should we put make `recipient = null` the last argument or not give it a default value of `null`?,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:52:45,189446658,"@@ -0,0 +1,95 @@
+'use strict';
+
+const { createHash } = require('crypto');
+const signing = require('./signing');
+const { Block, Blockchain } = require('./blockchain');
+
+
+class MineableTransaction {
+  constructor(privateKey, recipient = null, amount) {",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446658,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446658,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"I haven't checked one of the later commits that might address this, but it might be worthwhile to include comments about why these two properties in particular are being set to ""nothing"" here.
**EDIT**: RESOLVED. Looks like https://github.com/hyperledger/education-cryptomoji/pull/74/commits/fe4be0e8f37d22ff76bad8d2bd3fc106541232e2 addresses this!",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:53:45,189446670,"@@ -0,0 +1,95 @@
+'use strict';
+
+const { createHash } = require('crypto');
+const signing = require('./signing');
+const { Block, Blockchain } = require('./blockchain');
+
+
+class MineableTransaction {
+  constructor(privateKey, recipient = null, amount) {
+    const publicKey = signing.getPublicKey(privateKey);
+    this.amount = amount;
+
+    if (recipient !== null) {
+      this.source = publicKey;
+      this.recipient = recipient;
+    } else {
+      this.source = null;
+      this.recipient = publicKey;
+    }
+
+    const toSign = this.source + this.recipient + amount;
+    this.signature = signing.sign(privateKey, toSign);
+  }
+}
+
+class MineableBlock extends Block {
+  /*
+    Initialize the block constructor
+
+    **Note**
+    The block should be initiated with
+      - a timestamp
+      - transactions
+      - the previous block's hash
+  */
+  constructor(transactions, previousHash) {
+    super(transactions, previousHash);
+    this.hash = '';
+    this.nonce = null;",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446670,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446670,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,Maybe an opportunity to try `'0'.repeat(this.difficulty)`,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:55:10,189446686,"@@ -0,0 +1,95 @@
+'use strict';
+
+const { createHash } = require('crypto');
+const signing = require('./signing');
+const { Block, Blockchain } = require('./blockchain');
+
+
+class MineableTransaction {
+  constructor(privateKey, recipient = null, amount) {
+    const publicKey = signing.getPublicKey(privateKey);
+    this.amount = amount;
+
+    if (recipient !== null) {
+      this.source = publicKey;
+      this.recipient = recipient;
+    } else {
+      this.source = null;
+      this.recipient = publicKey;
+    }
+
+    const toSign = this.source + this.recipient + amount;
+    this.signature = signing.sign(privateKey, toSign);
+  }
+}
+
+class MineableBlock extends Block {
+  /*
+    Initialize the block constructor
+
+    **Note**
+    The block should be initiated with
+      - a timestamp
+      - transactions
+      - the previous block's hash
+  */
+  constructor(transactions, previousHash) {
+    super(transactions, previousHash);
+    this.hash = '';
+    this.nonce = null;
+  }
+}
+
+class MineableChain extends Blockchain {
+  constructor() {
+    super();
+    const genesis = new MineableBlock([], null);
+    this.blocks = [ genesis ];
+
+    this.difficulty = 2;
+    this.reward = 100;
+
+    this._pending = [];
+  }
+
+  addBlock() {
+    throw new Error('Must mine to add blocks to this blockchain')
+  }
+
+  addTransaction(transaction) {
+    this._pending.push(transaction);
+  }
+
+  /*
+    Add a new block to the blockchain based on pending transactions:
+
+    Create function that:
+      - Adds previousHash property to new block
+      - Create hash (or mine block)
+      - Adds block to the chain
+      - Creates new pending transaction for mining reward
+  */
+  mine(privateKey) {
+    const reward = new MineableTransaction(privateKey, null, this.reward);
+    const pendingTransactions = this._pending.concat(reward);
+    const previousHash = this.getHeadBlock().hash;
+
+    const block = new Block(pendingTransactions, previousHash);
+    const zeros = Array(this.difficulty).fill('0').join('');",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446686,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446686,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"1. I think `blockchain.difficulty.length` should actually be `blockchain.difficulty` as `blockchain.difficulty` seems to be a number, not an array
2. We can try `'0'.repeat(blockchain.difficulty)` here too",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:55:46,189446700,"@@ -0,0 +1,140 @@
+'use strict';
+
+const { expect } = require('chai');
+const { randomBytes } = require('crypto');
+const signing = require('../signing');
+const {
+  MineableTransaction,
+  MineableBlock,
+  MineableChain
+} = require('../mining');
+
+
+describe('Mining module', function() {
+
+  describe('MineableTransaction', function() {
+    let signer = null;
+    let recipient = null;
+    let amount = null;
+    let transaction = null;
+
+    beforeEach(function() {
+      signer = signing.createPrivateKey();
+      recipient = signing.getPublicKey(signing.createPrivateKey());
+      amount = Math.ceil(Math.random() * 100);
+      transaction = new MineableTransaction(signer, recipient, amount);
+    });
+
+    it('should include signer public key as source', function() {
+      expect(transaction.source).to.equal(signing.getPublicKey(signer));
+    });
+
+    it('should include the passed recipient and amount', function() {
+      expect(transaction.recipient).to.equal(recipient);
+      expect(transaction.amount).to.equal(amount);
+    });
+
+    it('should include a valid signature', function() {
+      const { source, signature } = transaction;
+      const signedMessage = source + recipient + amount;
+
+      expect(signing.verify(source, signedMessage, signature)).to.be.true;
+    });
+
+    it('should create a reward by making signer the recipient', function() {
+      const reward = new MineableTransaction(signer, null, amount);
+
+      expect(reward.source).to.equal(null);
+      expect(reward.recipient).to.equal(signing.getPublicKey(signer));
+    });
+  });
+
+  describe('MineableBlock', function() {
+    let previousHash = null;
+    let transactions = null;
+    let block = null;
+
+    beforeEach(function() {
+      const signer = signing.createPrivateKey();
+      const recipient = signing.getPublicKey(signing.createPrivateKey());
+      const amount = Math.ceil(Math.random() * 100);
+
+      transactions = [ new MineableTransaction(signer, recipient, amount) ];
+      previousHash = randomBytes(64).toString('hex');
+
+      block = new MineableBlock(transactions, previousHash);
+    });
+
+    it('should be instantiated without a hash', function() {
+      expect(!!block.hash).to.be.false;
+    });
+
+  });
+
+  describe('MineableChain', function() {
+    let blockchain = null;
+    let transaction = null;
+    let miner = null;
+
+    beforeEach(function() {
+      blockchain = new MineableChain();
+
+      const signer = signing.createPrivateKey();
+      const recipient = signing.getPublicKey(signing.createPrivateKey());
+      const amount = Math.ceil(Math.random() * 100);
+      transaction = new MineableTransaction(signer, recipient, amount);
+
+      miner = signing.createPrivateKey();
+      blockchain.addTransaction(transaction);
+      blockchain.mine(miner);
+    })
+
+    it('should have properties for difficulty and reward', function() {
+      expect(blockchain.difficulty).to.exist.and.be.a('number');
+      expect(blockchain.reward).to.exist.and.be.a('number');
+    });
+
+    it('should be able to mine new blocks', function() {
+      expect(blockchain.blocks).to.have.lengthOf(2);
+
+      const head = blockchain.getHeadBlock();
+      expect(head.transactions).to.deep.include(transaction);
+    });
+
+    it('should mine blocks with a valid zero-leading hash', function() {
+      const head = blockchain.getHeadBlock();
+      const zeros = Array(blockchain.difficulty.length).fill('0').join('');",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446700,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446700,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"Thoughts on testing to see that no new blocks were added btwn `blockchain.addTransaction(...)` and `blockchain.mine(...)` by inserting another `expect()` statement here? (eg, check to see if the original head block is still the current head block)",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 22:58:04,189446733,"@@ -0,0 +1,140 @@
+'use strict';
+
+const { expect } = require('chai');
+const { randomBytes } = require('crypto');
+const signing = require('../signing');
+const {
+  MineableTransaction,
+  MineableBlock,
+  MineableChain
+} = require('../mining');
+
+
+describe('Mining module', function() {
+
+  describe('MineableTransaction', function() {
+    let signer = null;
+    let recipient = null;
+    let amount = null;
+    let transaction = null;
+
+    beforeEach(function() {
+      signer = signing.createPrivateKey();
+      recipient = signing.getPublicKey(signing.createPrivateKey());
+      amount = Math.ceil(Math.random() * 100);
+      transaction = new MineableTransaction(signer, recipient, amount);
+    });
+
+    it('should include signer public key as source', function() {
+      expect(transaction.source).to.equal(signing.getPublicKey(signer));
+    });
+
+    it('should include the passed recipient and amount', function() {
+      expect(transaction.recipient).to.equal(recipient);
+      expect(transaction.amount).to.equal(amount);
+    });
+
+    it('should include a valid signature', function() {
+      const { source, signature } = transaction;
+      const signedMessage = source + recipient + amount;
+
+      expect(signing.verify(source, signedMessage, signature)).to.be.true;
+    });
+
+    it('should create a reward by making signer the recipient', function() {
+      const reward = new MineableTransaction(signer, null, amount);
+
+      expect(reward.source).to.equal(null);
+      expect(reward.recipient).to.equal(signing.getPublicKey(signer));
+    });
+  });
+
+  describe('MineableBlock', function() {
+    let previousHash = null;
+    let transactions = null;
+    let block = null;
+
+    beforeEach(function() {
+      const signer = signing.createPrivateKey();
+      const recipient = signing.getPublicKey(signing.createPrivateKey());
+      const amount = Math.ceil(Math.random() * 100);
+
+      transactions = [ new MineableTransaction(signer, recipient, amount) ];
+      previousHash = randomBytes(64).toString('hex');
+
+      block = new MineableBlock(transactions, previousHash);
+    });
+
+    it('should be instantiated without a hash', function() {
+      expect(!!block.hash).to.be.false;
+    });
+
+  });
+
+  describe('MineableChain', function() {
+    let blockchain = null;
+    let transaction = null;
+    let miner = null;
+
+    beforeEach(function() {
+      blockchain = new MineableChain();
+
+      const signer = signing.createPrivateKey();
+      const recipient = signing.getPublicKey(signing.createPrivateKey());
+      const amount = Math.ceil(Math.random() * 100);
+      transaction = new MineableTransaction(signer, recipient, amount);
+
+      miner = signing.createPrivateKey();
+      blockchain.addTransaction(transaction);
+      blockchain.mine(miner);
+    })
+
+    it('should have properties for difficulty and reward', function() {
+      expect(blockchain.difficulty).to.exist.and.be.a('number');
+      expect(blockchain.reward).to.exist.and.be.a('number');
+    });
+
+    it('should be able to mine new blocks', function() {
+      expect(blockchain.blocks).to.have.lengthOf(2);
+
+      const head = blockchain.getHeadBlock();
+      expect(head.transactions).to.deep.include(transaction);
+    });
+
+    it('should mine blocks with a valid zero-leading hash', function() {
+      const head = blockchain.getHeadBlock();
+      const zeros = Array(blockchain.difficulty.length).fill('0').join('');
+
+      expect(head.hash).to.be.a('string').and.not.be.empty;
+      expect(head.hash.slice(0, zeros.length)).to.equal(zeros);
+
+      const copy = new MineableBlock(head.transactions, head.previousHash);
+      copy.calculateHash(head.nonce);
+      expect(copy.hash).to.equal(head.hash);
+    });
+
+    it('should include a transaction rewarding the miner', function() {
+      const { transactions } = blockchain.getHeadBlock();
+      const reward = transactions.find(transaction => {
+        return transaction.recipient === signing.getPublicKey(miner)
+      });
+
+      expect(reward).to.not.be.undefined;
+      expect(reward.source).to.be.null;
+      expect(reward.amount).to.equal(blockchain.reward);
+    });
+
+    it('should clear out pending transactions after mining', function() {
+      // Add a transaction so we can mine a new block
+      blockchain.addTransaction(new MineableTransaction(
+        signing.createPrivateKey(),
+        signing.getPublicKey(signing.createPrivateKey()),
+        Math.ceil(Math.random() * 100)
+      ));",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446733,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446733,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"Hmm, I think we should see how students respond to this hint! (I'm wonder if it's too vague..)",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 23:09:51,189446878,"@@ -15,69 +31,93 @@ class Transaction {
   }
 }
 
+/**
+ * A Block class for storing an array of transactions and the hash of a
+ * previous block. Includes a method to calculate and set its own hash.
+ */
 class Block {
-  /*
-    Initialize the block constructor
-
-    **Note**
-    The block should be initiated with
-      - a timestamp
-      - transactions
-      - the previous block's hash
-  */
+  /**
+   * Accepts an array of transactions and the hash of a previous block. It
+   * saves these and uses them to calculate a hash.
+   *
+   * Properties:
+   *   - transactions: the passed in transactions
+   *   - previousHash: the passed in hash
+   *   - nonce: just set this to some hard-coded number for now, it will be
+   *     used later when we make blocks mineable with our own PoW algorithm
+   *   - hash: a unique hash string generated from the other properties
+   */
   constructor(transactions, previousHash) {
     this.transactions = transactions;
     this.previousHash = previousHash;
     this.calculateHash(0);
   }
 
-  /*
-    Calculate a hash based on transactions supplied to block:
-
-    - Add functionality to return a hash by passing a compiled string
-    into the SHA256 hashing function
-
-    - The string that is passed in should contain specific data
-    about the block that would be impossible to replicate
-
-    **Hint**
-    Unreplicable data can include
-      - transactions
-      - the previous hash
-      - the block timestamp
-  */
+  /**
+   * Accepts a nonce, and generates a unique hash for the block. Updates the
+   * hash and nonce properties of the block accordingly.
+   *
+   * Hint:
+   *   The format of the hash is up to you. Remember that it needs to be
+   *   unique and deterministic, and must become invalid if any of the block's
+   *   properties change.
+   */
   calculateHash(nonce) {
     const transactionString = this.transactions.map(t => t.signature).join('');
     const toHash = this.previousHash + transactionString + nonce;
+
     this.nonce = nonce;
     this.hash = createHash('sha512').update(toHash).digest('hex');
   }
 }
 
+/**
+ * A Blockchain class for storing an array of blocks, each of which is linked
+ * to the previous block by their hashes. Includes methods for adding blocks,
+ * fetching the head block, and checking the balances of public keys.
+ */
 class Blockchain {
+  /**
+   * Generates a new blockchain with a single genesis block. A genesis block
+   * is important so later blocks have something to build off of. It should
+   * have no transactions, and `null` for a previous hash.
+   *
+   * Properties:
+   *   - blocks: an array of blocks, starts with one genesis block
+   */
   constructor() {
     const genesis = new Block([], null);
     this.blocks = [ genesis ];
   }
 
-  /*
-    Get the last created block:
-
-    - Add functionality to get the latest block in the chain
-  */
+  /**
+   * Simply returns the last block added to the chain.
+   */
   getHeadBlock() {
     return this.blocks[this.blocks.length - 1];
   }
 
+  /**
+   * Accepts an array of transactions and adds them to the chain in
+   * a new block.
+   *
+   * Hint:
+   *   Don't forget the hashes!",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446878,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446878,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,should we make `difficulty` and `reward` arguments that can be passed into the `constructor` function instead of hardcoding values directly?,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 23:14:16,189446971,"@@ -23,24 +34,45 @@ class MineableTransaction {
   }
 }
 
+/**
+ * Almost identical to the non-mineable block. In fact, we'll extend it
+ * so we can reuse the calculateHash method.
+ */
 class MineableBlock extends Block {
-  /*
-    Initialize the block constructor
-
-    **Note**
-    The block should be initiated with
-      - a timestamp
-      - transactions
-      - the previous block's hash
-  */
+  /**
+   * Unlike the non-mineable block, when this one is initialized, we want the
+   * hash and nonce to not be set. This Block starts invalid, and will
+   * become valid after it is mined.
+   */
   constructor(transactions, previousHash) {
     super(transactions, previousHash);
     this.hash = '';
     this.nonce = null;
   }
 }
 
+/**
+ * The new mineable chain is a major update to our old Blockchain. We'll
+ * extend it so we can use some of its methods, but it's going to look
+ * very different when we're done.
+ */
 class MineableChain extends Blockchain {
+  /**
+   * In addition initializing a blocks array with a genesis block, this will
+   * store hard coded difficulty and reward properties. These are settings
+   * used by the mining method.",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189446971,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189446971,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,`Buffer`s will likely be a thing that throw students off,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-19 23:19:03,189447055,"@@ -19,15 +28,51 @@ const createPrivateKey = () => {
   return privateKey.toString('hex');
 };
 
+/**
+ * A function which takes a hexadecimal private key and returns its public pair
+ * as a 66 character hexadecimal string.
+ *
+ * Example:
+ *   const publicKey = getPublicKey(privateKey);
+ *   console.log(publicKey);
+ *   // '0202694593ddc71061e622222ed400f5373cfa7ea607ce106cca3f039b0f9a0123'
+ *
+ * Hint:
+ *   Remember that the secp256k1 library expects Buffers not hex strings!",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189447055,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189447055,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"All the tests use chai. The client tests in part-two don't explicitly import it because it gets added globally in the index.html file. The processor tests (also Node based), import it explicitly.",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-20 03:49:25,189450468,"@@ -0,0 +1,21 @@
+'use strict';
+
+const { expect } = require('chai');",3,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189450468,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189450468,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"Open to debate. Coming from a functional perspective, the order `secp256k1-node` uses isn't great. If you are going to curry or partially apply your function, you are going to want to do the private key first so you can sign multiple messages with the same partially applied function. From that perspective, I did every function with key-first arguments.

That said, it could certainly be a point of confusion for students. I liked the consistent key-first approach enough that I felt it overcame any momentary confusion, but I could be talked out of it.",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-20 04:03:01,189450611,"@@ -23,12 +23,17 @@ const getPublicKey = privateKey => {
   return secp256k1.publicKeyCreate(toBytes(privateKey)).toString('hex');
 };
 
-const sign = (message, privateKey) => {
-
+const sign = (privateKey, message) => {
+  const { signature } = secp256k1.sign(sha256(message), toBytes(privateKey));",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189450611,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189450611,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"The original order of `to`, `from`, `amount` makes a lot of sense to me, just semantically. The `= null` is really just a clue that you can `null` it. You are right it doesn't actually really do anything functional. I like communicating that in the function signature, especially since that is one of the pieces of information students will have. It could be omitted though if it seems too odd. ",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-20 04:09:15,189450663,"@@ -0,0 +1,95 @@
+'use strict';
+
+const { createHash } = require('crypto');
+const signing = require('./signing');
+const { Block, Blockchain } = require('./blockchain');
+
+
+class MineableTransaction {
+  constructor(privateKey, recipient = null, amount) {",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189450663,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189450663,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"I think that's a separate test (""should only add blocks when mining""), but I can def add it.",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-20 04:15:45,189450725,"@@ -0,0 +1,140 @@
+'use strict';
+
+const { expect } = require('chai');
+const { randomBytes } = require('crypto');
+const signing = require('../signing');
+const {
+  MineableTransaction,
+  MineableBlock,
+  MineableChain
+} = require('../mining');
+
+
+describe('Mining module', function() {
+
+  describe('MineableTransaction', function() {
+    let signer = null;
+    let recipient = null;
+    let amount = null;
+    let transaction = null;
+
+    beforeEach(function() {
+      signer = signing.createPrivateKey();
+      recipient = signing.getPublicKey(signing.createPrivateKey());
+      amount = Math.ceil(Math.random() * 100);
+      transaction = new MineableTransaction(signer, recipient, amount);
+    });
+
+    it('should include signer public key as source', function() {
+      expect(transaction.source).to.equal(signing.getPublicKey(signer));
+    });
+
+    it('should include the passed recipient and amount', function() {
+      expect(transaction.recipient).to.equal(recipient);
+      expect(transaction.amount).to.equal(amount);
+    });
+
+    it('should include a valid signature', function() {
+      const { source, signature } = transaction;
+      const signedMessage = source + recipient + amount;
+
+      expect(signing.verify(source, signedMessage, signature)).to.be.true;
+    });
+
+    it('should create a reward by making signer the recipient', function() {
+      const reward = new MineableTransaction(signer, null, amount);
+
+      expect(reward.source).to.equal(null);
+      expect(reward.recipient).to.equal(signing.getPublicKey(signer));
+    });
+  });
+
+  describe('MineableBlock', function() {
+    let previousHash = null;
+    let transactions = null;
+    let block = null;
+
+    beforeEach(function() {
+      const signer = signing.createPrivateKey();
+      const recipient = signing.getPublicKey(signing.createPrivateKey());
+      const amount = Math.ceil(Math.random() * 100);
+
+      transactions = [ new MineableTransaction(signer, recipient, amount) ];
+      previousHash = randomBytes(64).toString('hex');
+
+      block = new MineableBlock(transactions, previousHash);
+    });
+
+    it('should be instantiated without a hash', function() {
+      expect(!!block.hash).to.be.false;
+    });
+
+  });
+
+  describe('MineableChain', function() {
+    let blockchain = null;
+    let transaction = null;
+    let miner = null;
+
+    beforeEach(function() {
+      blockchain = new MineableChain();
+
+      const signer = signing.createPrivateKey();
+      const recipient = signing.getPublicKey(signing.createPrivateKey());
+      const amount = Math.ceil(Math.random() * 100);
+      transaction = new MineableTransaction(signer, recipient, amount);
+
+      miner = signing.createPrivateKey();
+      blockchain.addTransaction(transaction);
+      blockchain.mine(miner);
+    })
+
+    it('should have properties for difficulty and reward', function() {
+      expect(blockchain.difficulty).to.exist.and.be.a('number');
+      expect(blockchain.reward).to.exist.and.be.a('number');
+    });
+
+    it('should be able to mine new blocks', function() {
+      expect(blockchain.blocks).to.have.lengthOf(2);
+
+      const head = blockchain.getHeadBlock();
+      expect(head.transactions).to.deep.include(transaction);
+    });
+
+    it('should mine blocks with a valid zero-leading hash', function() {
+      const head = blockchain.getHeadBlock();
+      const zeros = Array(blockchain.difficulty.length).fill('0').join('');
+
+      expect(head.hash).to.be.a('string').and.not.be.empty;
+      expect(head.hash.slice(0, zeros.length)).to.equal(zeros);
+
+      const copy = new MineableBlock(head.transactions, head.previousHash);
+      copy.calculateHash(head.nonce);
+      expect(copy.hash).to.equal(head.hash);
+    });
+
+    it('should include a transaction rewarding the miner', function() {
+      const { transactions } = blockchain.getHeadBlock();
+      const reward = transactions.find(transaction => {
+        return transaction.recipient === signing.getPublicKey(miner)
+      });
+
+      expect(reward).to.not.be.undefined;
+      expect(reward.source).to.be.null;
+      expect(reward.amount).to.equal(blockchain.reward);
+    });
+
+    it('should clear out pending transactions after mining', function() {
+      // Add a transaction so we can mine a new block
+      blockchain.addTransaction(new MineableTransaction(
+        signing.createPrivateKey(),
+        signing.getPublicKey(signing.createPrivateKey()),
+        Math.ceil(Math.random() * 100)
+      ));",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189450725,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189450725,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,I think it's fine since this will only ever be used in the context of the tests and is not intended to be particularly robust. ,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-20 04:26:55,189450861,"@@ -23,11 +23,28 @@ const isValidBlock = block => {
 };
 
 const isValidChain = blockchain => {
+  const { blocks } = blockchain;
 
+  if (blocks[0].previousHash !== null) {
+    return false;
+  }
+
+  if (blocks.slice(1).some((b, i) => b.previousHash !== blocks[i].hash)) {
+    return false;
+  }
+
+  if (blocks.some(b => !isValidBlock(b))) {
+    return false;
+  }
+
+  return blocks
+    .map(b => b.transactions)
+    .reduce((flat, txns) => flat.concat(txns), [])
+    .every(t => isValidTransaction(t));
 };
 
 const breakChain = blockchain => {
-
+  blockchain.blocks[1].transactions[0].amount = 1000000000;",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189450861,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189450861,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,Probably a good idea. I'll add it to `isValidTransaction`,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-20 04:39:29,189451007,"@@ -88,8 +88,48 @@ class MineableChain extends Blockchain {
   }
 }
 
+const isValidMineableChain = blockchain => {
+  const zeros = Array(blockchain.difficulty).fill('0').join('');
+  const { blocks } = blockchain;
+
+  if (blocks.slice(1).some(b => b.hash.slice(0, zeros.length) !== zeros)) {
+    return false;
+  }
+
+  const balances = {};
+
+  for (const { transactions } of blocks) {
+    const rewards = transactions.filter(t => !t.source);
+
+    if (rewards.length > 1) {
+      return false;
+    }
+
+    if (rewards[0] && rewards[0].amount !== blockchain.reward) {
+      return false;
+    }
+
+    for (const { source, recipient, amount } of transactions) {
+      if (source) {
+        balances[source] = balances[source] || 0;
+        balances[source] = balances[source] - amount;
+
+        if (balances[source] < 0) {
+          return false;
+        }
+      }
+
+      balances[recipient] = balances[recipient] || 0;
+      balances[recipient] = balances[recipient] + amount;",221,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189451007,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189451007,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"I don't think it makes much functional difference. In terms of the semantics/feel . . . I think hard-coded probably makes more sense. Bitcoin modifies these values algorithmically, but their starting values would have been hard-coded. I don't think you would expect to implement one chain with a reward of 100, another of 200, etc. What's your thinking?",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-20 04:44:47,189451087,"@@ -23,24 +34,45 @@ class MineableTransaction {
   }
 }
 
+/**
+ * Almost identical to the non-mineable block. In fact, we'll extend it
+ * so we can reuse the calculateHash method.
+ */
 class MineableBlock extends Block {
-  /*
-    Initialize the block constructor
-
-    **Note**
-    The block should be initiated with
-      - a timestamp
-      - transactions
-      - the previous block's hash
-  */
+  /**
+   * Unlike the non-mineable block, when this one is initialized, we want the
+   * hash and nonce to not be set. This Block starts invalid, and will
+   * become valid after it is mined.
+   */
   constructor(transactions, previousHash) {
     super(transactions, previousHash);
     this.hash = '';
     this.nonce = null;
   }
 }
 
+/**
+ * The new mineable chain is a major update to our old Blockchain. We'll
+ * extend it so we can use some of its methods, but it's going to look
+ * very different when we're done.
+ */
 class MineableChain extends Blockchain {
+  /**
+   * In addition initializing a blocks array with a genesis block, this will
+   * store hard coded difficulty and reward properties. These are settings
+   * used by the mining method.",,2018-05-20 05:12:23,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189451087,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189451087,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,👍 sounds good!,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-20 21:04:03,189470510,"@@ -23,11 +23,28 @@ const isValidBlock = block => {
 };
 
 const isValidChain = blockchain => {
+  const { blocks } = blockchain;
 
+  if (blocks[0].previousHash !== null) {
+    return false;
+  }
+
+  if (blocks.slice(1).some((b, i) => b.previousHash !== blocks[i].hash)) {
+    return false;
+  }
+
+  if (blocks.some(b => !isValidBlock(b))) {
+    return false;
+  }
+
+  return blocks
+    .map(b => b.transactions)
+    .reduce((flat, txns) => flat.concat(txns), [])
+    .every(t => isValidTransaction(t));
 };
 
 const breakChain = blockchain => {
-
+  blockchain.blocks[1].transactions[0].amount = 1000000000;",,2018-05-20 21:04:03,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189470510,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189470510,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,I think it'd be cool to add a comment about this exact reasoning re: why you ordered the arguments in that way!,ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-20 21:05:32,189470543,"@@ -23,12 +23,17 @@ const getPublicKey = privateKey => {
   return secp256k1.publicKeyCreate(toBytes(privateKey)).toString('hex');
 };
 
-const sign = (message, privateKey) => {
-
+const sign = (privateKey, message) => {
+  const { signature } = secp256k1.sign(sha256(message), toBytes(privateKey));",,2018-05-20 21:05:32,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189470543,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189470543,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/74,https://github.com/hyperledger/education-cryptomoji/pull/74,"I guess a different way of phrasing my question (from curiosity, rather than ""we should do it another way!"") would've been ""would we create different blockchains w/ different difficulty/rewards?"" If you think no, then let's just leave as is!",ee8621172a35669ddf04bfcd9332c532723e5c26,2018-05-20 21:09:15,189470644,"@@ -23,24 +34,45 @@ class MineableTransaction {
   }
 }
 
+/**
+ * Almost identical to the non-mineable block. In fact, we'll extend it
+ * so we can reuse the calculateHash method.
+ */
 class MineableBlock extends Block {
-  /*
-    Initialize the block constructor
-
-    **Note**
-    The block should be initiated with
-      - a timestamp
-      - transactions
-      - the previous block's hash
-  */
+  /**
+   * Unlike the non-mineable block, when this one is initialized, we want the
+   * hash and nonce to not be set. This Block starts invalid, and will
+   * become valid after it is mined.
+   */
   constructor(transactions, previousHash) {
     super(transactions, previousHash);
     this.hash = '';
     this.nonce = null;
   }
 }
 
+/**
+ * The new mineable chain is a major update to our old Blockchain. We'll
+ * extend it so we can use some of its methods, but it's going to look
+ * very different when we're done.
+ */
 class MineableChain extends Blockchain {
+  /**
+   * In addition initializing a blocks array with a genesis block, this will
+   * store hard coded difficulty and reward properties. These are settings
+   * used by the mining method.",,2018-05-20 21:09:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/189470644,https://github.com/hyperledger/education-cryptomoji/pull/74#discussion_r189470644,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/71,https://github.com/hyperledger/education-cryptomoji/pull/71,Might want to through the error message into the alert.,44c586017801f1937178fd19b11c9b076ff3b394,2018-05-08 16:47:42,186793825,"@@ -42,13 +43,34 @@ export class Collection extends React.Component {
       });
   }
 
+  createCollection() {
+    submitPayloads(this.props.privateKey, { action: 'CREATE_COLLECTION' })
+      .then(() => {
+        this.fetchCollection(this.state.publicKey);
+      })
+      .catch(err => {
+        console.error(err);
+        alert('Something went horribly wrong!');",,2018-05-08 23:50:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186793825,https://github.com/hyperledger/education-cryptomoji/pull/71#discussion_r186793825,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/71,https://github.com/hyperledger/education-cryptomoji/pull/71,"What is the thinking behind creating a collection under the View Collection page, instead of doing it as part of the signup process? Surely if I'm a user, the only reason I am generating a private key is to also create a collection.",44c586017801f1937178fd19b11c9b076ff3b394,2018-05-08 16:49:41,186794434,"@@ -42,13 +43,34 @@ export class Collection extends React.Component {
       });
   }
 
+  createCollection() {
+    submitPayloads(this.props.privateKey, { action: 'CREATE_COLLECTION' })
+      .then(() => {
+        this.fetchCollection(this.state.publicKey);
+      })
+      .catch(err => {
+        console.error(err);
+        alert('Something went horribly wrong!');
+      });
+  }
+
   render() {
     console.log('RENDERING: <Collection />');
     const { publicKey, collection } = this.state;
     if (!collection) {
       return (
         <div>
-          We can't find anything for a collection at <code>{publicKey}</code>!
+          We can't find a collection for public key <code>{publicKey}</code>!
+          <br /><br />
+          { // if user is trying to view their non-existing collection
+            this.props.publicKey === publicKey && (
+              <span>
+                If you are logged in as the owner of this collection and would
+                like to create a new collection, please click {' '}
+                <a href=""#"" onClick={this.createCollection}>here</a>!",,2018-05-08 23:50:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186794434,https://github.com/hyperledger/education-cryptomoji/pull/71#discussion_r186794434,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/71,https://github.com/hyperledger/education-cryptomoji/pull/71,"@delventhalz I was just trying to stay out of the way of the signup/login flow as I wasn't sure what additional work was being done there at the same time! I also hadn't read the user story in #40 closely enough. New commits to iron out this hiccup in the user workflow coming in later today!

@taylorpage FYI w/ some of my incoming changes, I may need to change up `<App />` and `<SignupLogin />`; lmk if I can help break through any merge conflicts that may arise from my doing so (if they clash w/ any work you have been doing).",44c586017801f1937178fd19b11c9b076ff3b394,2018-05-08 17:22:06,186803994,"@@ -42,13 +43,34 @@ export class Collection extends React.Component {
       });
   }
 
+  createCollection() {
+    submitPayloads(this.props.privateKey, { action: 'CREATE_COLLECTION' })
+      .then(() => {
+        this.fetchCollection(this.state.publicKey);
+      })
+      .catch(err => {
+        console.error(err);
+        alert('Something went horribly wrong!');
+      });
+  }
+
   render() {
     console.log('RENDERING: <Collection />');
     const { publicKey, collection } = this.state;
     if (!collection) {
       return (
         <div>
-          We can't find anything for a collection at <code>{publicKey}</code>!
+          We can't find a collection for public key <code>{publicKey}</code>!
+          <br /><br />
+          { // if user is trying to view their non-existing collection
+            this.props.publicKey === publicKey && (
+              <span>
+                If you are logged in as the owner of this collection and would
+                like to create a new collection, please click {' '}
+                <a href=""#"" onClick={this.createCollection}>here</a>!",,2018-05-08 23:50:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186803994,https://github.com/hyperledger/education-cryptomoji/pull/71#discussion_r186803994,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/71,https://github.com/hyperledger/education-cryptomoji/pull/71,I had used `this.props.history.push` for redirects in my previous commits. This looks like a better option. I will make sure to change it in the signup component for consistencies sake.,44c586017801f1937178fd19b11c9b076ff3b394,2018-05-08 18:17:29,186820732,"@@ -1,13 +1,33 @@
 import React from 'react';
 import { Link } from 'react-router-dom';
 
-export function MojiItem(props) {
-  console.log('RENDERING: <MojiItem />');
-  return (
-    <div>
-      <Link to={'/moji/' + props.address}>
-        {props.address}
-      </Link>
-    </div>
-  );
+import { getMoji } from './services/requests';
+import { parseDna } from './services/parseDna';
+
+export class MojiItem extends React.Component {
+  constructor(props) {
+    super(props);
+    this.state = {
+      mojiView: null
+    };
+  }
+
+  componentDidMount() {
+    getMoji(this.props.address)
+      .then(moji => {
+        this.setState({
+          mojiView: parseDna(moji.dna).view
+        });
+      });
+  }
+
+  render() {
+    return (
+      <div>
+        <Link to={'/moji/' + this.props.address}>",36,2018-05-08 23:50:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186820732,https://github.com/hyperledger/education-cryptomoji/pull/71#discussion_r186820732,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/71,https://github.com/hyperledger/education-cryptomoji/pull/71,I _think_ using `this.props.history.push` is good for buttons! But I used `<Link>` here as it's pretty much the `<a>` equivalent.,44c586017801f1937178fd19b11c9b076ff3b394,2018-05-08 19:11:16,186836507,"@@ -1,13 +1,33 @@
 import React from 'react';
 import { Link } from 'react-router-dom';
 
-export function MojiItem(props) {
-  console.log('RENDERING: <MojiItem />');
-  return (
-    <div>
-      <Link to={'/moji/' + props.address}>
-        {props.address}
-      </Link>
-    </div>
-  );
+import { getMoji } from './services/requests';
+import { parseDna } from './services/parseDna';
+
+export class MojiItem extends React.Component {
+  constructor(props) {
+    super(props);
+    this.state = {
+      mojiView: null
+    };
+  }
+
+  componentDidMount() {
+    getMoji(this.props.address)
+      .then(moji => {
+        this.setState({
+          mojiView: parseDna(moji.dna).view
+        });
+      });
+  }
+
+  render() {
+    return (
+      <div>
+        <Link to={'/moji/' + this.props.address}>",36,2018-05-08 23:50:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186836507,https://github.com/hyperledger/education-cryptomoji/pull/71#discussion_r186836507,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/71,https://github.com/hyperledger/education-cryptomoji/pull/71,"Oh right these are anchors, still brushing up on the react stuff.",44c586017801f1937178fd19b11c9b076ff3b394,2018-05-08 19:26:40,186840394,"@@ -1,13 +1,33 @@
 import React from 'react';
 import { Link } from 'react-router-dom';
 
-export function MojiItem(props) {
-  console.log('RENDERING: <MojiItem />');
-  return (
-    <div>
-      <Link to={'/moji/' + props.address}>
-        {props.address}
-      </Link>
-    </div>
-  );
+import { getMoji } from './services/requests';
+import { parseDna } from './services/parseDna';
+
+export class MojiItem extends React.Component {
+  constructor(props) {
+    super(props);
+    this.state = {
+      mojiView: null
+    };
+  }
+
+  componentDidMount() {
+    getMoji(this.props.address)
+      .then(moji => {
+        this.setState({
+          mojiView: parseDna(moji.dna).view
+        });
+      });
+  }
+
+  render() {
+    return (
+      <div>
+        <Link to={'/moji/' + this.props.address}>",36,2018-05-08 23:50:57,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186840394,https://github.com/hyperledger/education-cryptomoji/pull/71#discussion_r186840394,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/70,https://github.com/hyperledger/education-cryptomoji/pull/70,How about `/authorization`?,2b2a459552d2b80469064c33b76b1bb680369f02,2018-05-06 19:20:43,186300209,"@@ -1,22 +1,86 @@
 import React from 'react';
 import { Link, Route, Switch } from 'react-router-dom';
 
+import { SignupLogin } from './SignupLogin';
+
 import { Collection } from './Collection';
 import { CollectionList } from './CollectionList';
 import { Moji } from './Moji';
 import { Offer } from './Offer';
 import { OfferList } from './OfferList';
 
 export class App extends React.Component {
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      privateKey: this.props.privateKey,
+      publicKey: this.props.publicKey
+    }
+  }
+
+  set privateKey(key) {
+    this.setState({ privateKey: key });
+    localStorage.setItem('privateKey', key);
+  }
+
+  get privateKey() {
+    return this.state.privateKey 
+      ? this.state.privateKey
+      : localStorage.getItem('privateKey');
+  }
+
+  set publicKey(key) {
+    this.setState({ publicKey: key });
+    localStorage.setItem('publicKey', key);
+  }
+
+  get publicKey() {
+    return this.state.publicKey 
+      ? this.state.publicKey
+      : localStorage.getItem('publicKey');
+  }
+
+  logout() {
+    this.privateKey = null;
+    this.publicKey = null;
+    localStorage.removeItem('privateKey');
+    localStorage.removeItem('publicKey');
+  }
+  
   render() {
+    const publicKey = this.publicKey
     return (
       <div>
         <nav>
           <Link to=""/"">Home</Link>&ensp;
+          <Link to=""/signup-login"">Sign Up/Login</Link>&ensp;",57,2018-05-07 17:56:38,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186300209,https://github.com/hyperledger/education-cryptomoji/pull/70#discussion_r186300209,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/70,https://github.com/hyperledger/education-cryptomoji/pull/70,Is this empty object literal with a comment inside a React thing? Should this Just be a `//` comment?,2b2a459552d2b80469064c33b76b1bb680369f02,2018-05-06 19:28:01,186300402,"@@ -1,22 +1,86 @@
 import React from 'react';
 import { Link, Route, Switch } from 'react-router-dom';
 
+import { SignupLogin } from './SignupLogin';
+
 import { Collection } from './Collection';
 import { CollectionList } from './CollectionList';
 import { Moji } from './Moji';
 import { Offer } from './Offer';
 import { OfferList } from './OfferList';
 
 export class App extends React.Component {
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      privateKey: this.props.privateKey,
+      publicKey: this.props.publicKey
+    }
+  }
+
+  set privateKey(key) {
+    this.setState({ privateKey: key });
+    localStorage.setItem('privateKey', key);
+  }
+
+  get privateKey() {
+    return this.state.privateKey 
+      ? this.state.privateKey
+      : localStorage.getItem('privateKey');
+  }
+
+  set publicKey(key) {
+    this.setState({ publicKey: key });
+    localStorage.setItem('publicKey', key);
+  }
+
+  get publicKey() {
+    return this.state.publicKey 
+      ? this.state.publicKey
+      : localStorage.getItem('publicKey');
+  }
+
+  logout() {
+    this.privateKey = null;
+    this.publicKey = null;
+    localStorage.removeItem('privateKey');
+    localStorage.removeItem('publicKey');
+  }
+  
   render() {
+    const publicKey = this.publicKey
     return (
       <div>
         <nav>
           <Link to=""/"">Home</Link>&ensp;
+          <Link to=""/signup-login"">Sign Up/Login</Link>&ensp;
           <Link to=""/collection"">View Collections</Link>&ensp;
           <Link to=""/offer"">View Offers</Link>&ensp;
+
+          {/* public key view / logout */}",61,2018-05-07 17:56:38,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186300402,https://github.com/hyperledger/education-cryptomoji/pull/70#discussion_r186300402,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/70,https://github.com/hyperledger/education-cryptomoji/pull/70,"@delventhalz yeah, this is how you write comments in JSX

the `{ }` isn't an empty object literal; it's escaping the JSX (allowing you to write JavaScript)",2b2a459552d2b80469064c33b76b1bb680369f02,2018-05-06 19:45:22,186300902,"@@ -1,22 +1,86 @@
 import React from 'react';
 import { Link, Route, Switch } from 'react-router-dom';
 
+import { SignupLogin } from './SignupLogin';
+
 import { Collection } from './Collection';
 import { CollectionList } from './CollectionList';
 import { Moji } from './Moji';
 import { Offer } from './Offer';
 import { OfferList } from './OfferList';
 
 export class App extends React.Component {
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      privateKey: this.props.privateKey,
+      publicKey: this.props.publicKey
+    }
+  }
+
+  set privateKey(key) {
+    this.setState({ privateKey: key });
+    localStorage.setItem('privateKey', key);
+  }
+
+  get privateKey() {
+    return this.state.privateKey 
+      ? this.state.privateKey
+      : localStorage.getItem('privateKey');
+  }
+
+  set publicKey(key) {
+    this.setState({ publicKey: key });
+    localStorage.setItem('publicKey', key);
+  }
+
+  get publicKey() {
+    return this.state.publicKey 
+      ? this.state.publicKey
+      : localStorage.getItem('publicKey');
+  }
+
+  logout() {
+    this.privateKey = null;
+    this.publicKey = null;
+    localStorage.removeItem('privateKey');
+    localStorage.removeItem('publicKey');
+  }
+  
   render() {
+    const publicKey = this.publicKey
     return (
       <div>
         <nav>
           <Link to=""/"">Home</Link>&ensp;
+          <Link to=""/signup-login"">Sign Up/Login</Link>&ensp;
           <Link to=""/collection"">View Collections</Link>&ensp;
           <Link to=""/offer"">View Offers</Link>&ensp;
+
+          {/* public key view / logout */}",61,2018-05-07 17:56:38,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186300902,https://github.com/hyperledger/education-cryptomoji/pull/70#discussion_r186300902,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/70,https://github.com/hyperledger/education-cryptomoji/pull/70,"I don't think `<App />` is being passed in any props related to `privateKey` and `publicKey` here, so maybe we should initialize them to `null` instead?",2b2a459552d2b80469064c33b76b1bb680369f02,2018-05-06 19:52:21,186301102,"@@ -1,22 +1,86 @@
 import React from 'react';
 import { Link, Route, Switch } from 'react-router-dom';
 
+import { SignupLogin } from './SignupLogin';
+
 import { Collection } from './Collection';
 import { CollectionList } from './CollectionList';
 import { Moji } from './Moji';
 import { Offer } from './Offer';
 import { OfferList } from './OfferList';
 
 export class App extends React.Component {
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      privateKey: this.props.privateKey,
+      publicKey: this.props.publicKey",18,2018-05-07 17:56:38,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186301102,https://github.com/hyperledger/education-cryptomoji/pull/70#discussion_r186301102,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/70,https://github.com/hyperledger/education-cryptomoji/pull/70,"can this just be `return this.state.privateKey || localStorage.getItem('privateKey')` to avoid a ternary?

(same for `get publicKey()` below?)",2b2a459552d2b80469064c33b76b1bb680369f02,2018-05-06 19:53:46,186301206,"@@ -1,22 +1,86 @@
 import React from 'react';
 import { Link, Route, Switch } from 'react-router-dom';
 
+import { SignupLogin } from './SignupLogin';
+
 import { Collection } from './Collection';
 import { CollectionList } from './CollectionList';
 import { Moji } from './Moji';
 import { Offer } from './Offer';
 import { OfferList } from './OfferList';
 
 export class App extends React.Component {
+
+  constructor(props) {
+    super(props);
+    this.state = {
+      privateKey: this.props.privateKey,
+      publicKey: this.props.publicKey
+    }
+  }
+
+  set privateKey(key) {
+    this.setState({ privateKey: key });
+    localStorage.setItem('privateKey', key);
+  }
+
+  get privateKey() {
+    return this.state.privateKey 
+      ? this.state.privateKey
+      : localStorage.getItem('privateKey');",30,2018-05-07 17:56:38,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186301206,https://github.com/hyperledger/education-cryptomoji/pull/70#discussion_r186301206,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/69,https://github.com/hyperledger/education-cryptomoji/pull/69,i like this! 👍 ,129a7ea1d3816d6d86eacb84c1ac4594ec572b65,2018-05-05 16:50:05,186266799,"@@ -31,7 +26,7 @@ const fetchMany = prefix => {
   const doFetch = url => {
     return axios.get(url).then(({ data }) => {
       const resources = data.data.map(({ address, data }) => {
-        return decode(address, data);
+        return Object.assign({ address }, decode(data));",,2018-05-05 18:19:04,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186266799,https://github.com/hyperledger/education-cryptomoji/pull/69#discussion_r186266799,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/69,https://github.com/hyperledger/education-cryptomoji/pull/69,"I know the method is just being moved into a separate file as is, but I just realized this line needs to have `/` in `/api/batches` to prevent requests being made to `localhost:8000/moji/api/batches` and `localhost:8000/collection/api/batches`",129a7ea1d3816d6d86eacb84c1ac4594ec572b65,2018-05-05 16:53:48,186266892,"@@ -51,6 +51,38 @@ const dropAddress = entity => {
     }, {});
 };
 
+/**
+ * Takes an encoded Batch and submits it to the REST API, optionally waiting
+ * until the batch is committed to resolve (waits by default).
+ *
+ * Resolves to `true` if submission was successful, otherwise throws an error.
+ */
+export const submitBatch = (encodedBatch, shouldWait = true) => {
+  return axios({
+    method: 'POST',
+    url: 'api/batches',",,2018-05-05 18:19:04,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/186266892,https://github.com/hyperledger/education-cryptomoji/pull/69#discussion_r186266892,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/67,https://github.com/hyperledger/education-cryptomoji/pull/67,"As confusing as the pluralization of of ""cryptomoji"" is (i.e. it is its own plural, like sheep or moose), I think consistency is important here. If we're going to decide that it is pluralized with an 's' (which I'm not necessarily opposed to), it needs to be changed everywhere, not just in this method name.

For the record, ""emoji"" is a Japanese word, and is most correctly pluralized as just ""emoji"" with no 's'. That said, I see it as both ""emoji"" and ""emojis"", and I do not know which is the more common usage.",dab7e120ec164cdc270a26fa72f569dc1a4abb43,2018-04-30 21:44:47,185119429,"@@ -83,7 +84,7 @@ export const getCollections = (key = null) => {
  *   { owner: string } - an object with an owner returns moji owned by that key
  *   { owner: string, dna: string } -
  */
-export const getMoji = (filterOrAddress = null) => {
+export const getMojis = (filterOrAddress = null) => {",,2018-05-03 18:00:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/185119429,https://github.com/hyperledger/education-cryptomoji/pull/67#discussion_r185119429,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/58,https://github.com/hyperledger/education-cryptomoji/pull/58,Shouldn't this be `addressToType`?,c858cdd8990e7877ba2621e7561367c45e1e3713,2018-04-21 16:16:41,183213353,"@@ -0,0 +1,19 @@
+'use strict';
+
+import { FAMILY_NAME, NAMESPACE, TYPE_PREFIXES } from '../utils/constants';
+
+export const urlToType = (address = '') => {",,2018-04-24 21:20:10,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/183213353,https://github.com/hyperledger/education-cryptomoji/pull/58#discussion_r183213353,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/58,https://github.com/hyperledger/education-cryptomoji/pull/58,@delventhalz both the file and function were renamed from `url` to `address`! (Branch name hasn't been changed though.),c858cdd8990e7877ba2621e7561367c45e1e3713,2018-04-24 21:20:11,183883328,"@@ -0,0 +1,19 @@
+'use strict';
+
+import { FAMILY_NAME, NAMESPACE, TYPE_PREFIXES } from '../utils/constants';
+
+export const urlToType = (address = '') => {",,2018-04-24 21:20:11,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/183883328,https://github.com/hyperledger/education-cryptomoji/pull/58#discussion_r183883328,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/55,https://github.com/hyperledger/education-cryptomoji/pull/55,I usually put the `);` on the next line so it matches up w/ the indentation of ln 89 ¯\\\_(ツ)\_/¯,c3bb11c4f9be2a18f5ecb63965467dac3f2becae,2018-04-28 19:24:35,184863063,"@@ -0,0 +1,102 @@
+'use strict';
+
+const getAddress = require('../utils/addressing');
+const { decode, encode, reject } = require('../utils/helpers');
+
+
+const swapMoji = (ownerBytes, toRemove, toAdd) => {
+  const owner = decode(ownerBytes);
+  owner.moji = owner.moji
+    .filter(moji => !toRemove.includes(moji))
+    .concat(toAdd)
+    .sort();
+  return encode(owner);
+};
+
+const getMojiUpdate = (state, moji, newOwner) => {
+  return moji.reduce((updates, address) => {
+    const dna = decode(state[address]).dna;
+    const newAddress = getAddress.moji(newOwner)(dna);
+    updates[newAddress] = state[address];
+    return updates;
+  }, {});
+};
+
+const acceptResponse = (context, publicKey, { offer, response }) => {
+  if (!offer) {
+    return reject('No offer address specified');
+  }
+
+  if (!response && response !== 0) {
+    return reject('No response index specified');
+  }
+
+  let state = null;
+  let owner = null;
+  let responder = null;
+  let ownerMoji = null;
+  let responderMoji = null;
+
+  return context.getState([ offer ])
+    .then(newState => {
+      state = newState;
+
+      if (state[offer].length === 0) {
+        return reject('Specified offer does not exist:', offer);
+      }
+
+      const decodedOffer = decode(state[offer]);
+      const decodedResponse = decodedOffer.responses[response];
+
+      if (!decodedResponse) {
+        return reject('There is no response at the index specified:', response);
+      }
+
+      if (publicKey !== decodedResponse.approver) {
+        return reject('Signer is not approver for this response:', publicKey);
+      }
+
+      owner = getAddress.collection(decodedOffer.owner);
+      ownerMoji = decodedOffer.moji;
+      responderMoji = decodedResponse.moji;
+
+      return context.getState(ownerMoji.concat(responderMoji));
+    })
+    .then(newState => {
+      state = Object.assign(state, newState);
+
+      for (let moji of responderMoji) {
+        if (state[moji].length === 0) {
+          return reject('Response is no longer valid, moji has moved:', moji);
+        }
+      }
+
+      const decodedMoji = decode(state[responderMoji[0]]);
+      responder = getAddress.collection(decodedMoji.owner);
+
+      return context.getState([ owner, responder ]);
+    })
+    .then(newState => {
+      state = Object.assign(state, newState);
+
+      const ownerUpdate = getMojiUpdate(state, responderMoji, owner);
+      const responderUpdate = getMojiUpdate(state, ownerMoji, responder);
+      const newOwnerMoji = Object.keys(ownerUpdate);
+      const newResponderMoji = Object.keys(responderUpdate);
+
+      const updates = Object.assign(ownerUpdate, responderUpdate);
+      updates[owner] = swapMoji(state[owner], ownerMoji, newOwnerMoji);
+      updates[responder] = swapMoji(
+        state[responder],
+        responderMoji,
+        newResponderMoji);",,2018-04-30 09:22:12,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/184863063,https://github.com/hyperledger/education-cryptomoji/pull/55#discussion_r184863063,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/54,https://github.com/hyperledger/education-cryptomoji/pull/54,should be `'Add Response'` instead?,c3dbf9a1c4e0c2031167b292db9a8e6c3f1fbe29,2018-04-16 19:06:17,181852170,"@@ -0,0 +1,248 @@
+'use strict';
+
+const { expect } = require('chai');
+const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
+
+const MojiHandler = require('../handler');
+const getAddress = require('../utils/addressing');
+const { decode } = require('../utils/helpers');
+const Txn = require('./mocks/txn');
+const Context = require('./mocks/context');
+
+describe('Create Offer', function() {",,2018-04-17 02:48:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181852170,https://github.com/hyperledger/education-cryptomoji/pull/54#discussion_r181852170,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/54,https://github.com/hyperledger/education-cryptomoji/pull/54,"is the ln 94 test of `should sort the moji in the response` necessary if we have the ln 106 test of `should reject responses identical to one previously added`? (if you want to keep it, should we create a similar test for **CREATE_OFFER**?)",c3dbf9a1c4e0c2031167b292db9a8e6c3f1fbe29,2018-04-16 19:11:29,181853657,"@@ -0,0 +1,248 @@
+'use strict';
+
+const { expect } = require('chai');
+const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
+
+const MojiHandler = require('../handler');
+const getAddress = require('../utils/addressing');
+const { decode } = require('../utils/helpers');
+const Txn = require('./mocks/txn');
+const Context = require('./mocks/context');
+
+describe('Create Offer', function() {
+  let handler = null;
+  let context = null;
+  let offer = null;
+  let ownerPub = null;
+  let ownerPriv = null;
+  let responderPub = null;
+  let responderPriv = null;
+  let moji = null;
+
+  before(function() {
+    handler = new MojiHandler();
+  });
+
+  beforeEach(function() {
+    context = new Context();
+    const ownerTxn = new Txn({ action: 'CREATE_COLLECTION' });
+    const responderTxn = new Txn({ action: 'CREATE_COLLECTION' });
+
+    ownerPub = ownerTxn._publicKey;
+    ownerPriv = ownerTxn._privateKey;
+    responderPub = responderTxn._publicKey;
+    responderPriv = responderTxn._privateKey;
+
+    return handler.apply(responderTxn, context)
+      .then(() => {
+        const address = getAddress.collection(responderPub);
+        moji = decode(context._state[address]).moji.sort();
+        return handler.apply(ownerTxn, context);
+      })
+      .then(() => {
+        const ownerAddress = getAddress.collection(ownerPub);
+        const { moji } = decode(context._state[ownerAddress]);
+        offer = getAddress.offer(ownerTxn._publicKey)(moji);
+
+        const offerTxn = new Txn({ action: 'CREATE_OFFER', moji }, ownerPriv);
+        return handler.apply(offerTxn, context);
+      });
+  });
+
+  it('should add a response with multiple moji', function() {
+    const txn = new Txn({ action: 'ADD_RESPONSE', moji, offer }, responderPriv);
+
+    return handler.apply(txn, context)
+      .then(() => {
+        const { responses } = decode(context._state[offer]);
+        expect(responses, 'Offer should have one response').to.have.lengthOf(1);
+
+        expect(responses[0].approver, 'Response should need owner approval')
+          .to.equal(ownerPub);
+        expect(responses[0].moji, 'Response should include the moji offered')
+          .to.deep.equal(moji);
+      });
+  });
+
+  it('should add a response with a single moji', function() {
+    moji = moji.slice(0, 1);
+    const txn = new Txn({ action: 'ADD_RESPONSE', moji, offer }, responderPriv);
+
+    return handler.apply(txn, context)
+      .then(() => {
+        const responses = decode(context._state[offer]).responses;
+        expect(responses, 'Offer should have one response').to.have.lengthOf(1);
+
+        expect(responses[0].approver, 'Response should need owner approval')
+          .to.equal(ownerPub);
+        expect(responses[0].moji, 'Response should include the moji offered')
+          .to.deep.equal(moji);
+      });
+  });
+
+  it('should add a response from the offer owner', function() {
+    const txn = new Txn({ action: 'ADD_RESPONSE', moji, offer }, ownerPriv);
+
+    return handler.apply(txn, context)
+      .then(() => {
+        const { responses } = decode(context._state[offer]);
+        expect(responses[0].approver, 'Response should need responder approval')
+          .to.equal(responderPub);
+      });
+  });
+
+  it('should sort the moji in the response', function() {",94,2018-04-17 02:48:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181853657,https://github.com/hyperledger/education-cryptomoji/pull/54#discussion_r181853657,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/54,https://github.com/hyperledger/education-cryptomoji/pull/54,i think we can delete the ` // Only works with objects with a depth of 1` comment now,c3dbf9a1c4e0c2031167b292db9a8e6c3f1fbe29,2018-04-16 19:20:14,181855842,"@@ -9,10 +9,22 @@ const hash = (str, length = 128) => {
   return createHash('sha512').update(str).digest('hex').slice(0, length);
 };
 
+// Recursively returns all the keys of an object and nested objects;
+const deepKeys = obj => {
+  if (!obj || typeof obj !== 'object') {
+    return [];
+  }
+
+  const keys = Array.isArray(obj) ? [] : Object.keys(obj);
+  const values = Array.isArray(obj) ? obj : Object.values(obj);
+
+  return values.reduce((keys, value) => keys.concat(deepKeys(value)), keys);
+};
+
 // Encodes an object as a Buffer of sorted JSON string
 // Only works with objects with a depth of 1",,2018-04-17 02:48:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181855842,https://github.com/hyperledger/education-cryptomoji/pull/54#discussion_r181855842,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/54,https://github.com/hyperledger/education-cryptomoji/pull/54,"possible to not use the word `offer` here? my brain is falling apart trying to remember that `let offered` is actually each moji that is responded with and completely unrelated to the original offer

maybe `let responseItem`? 🤔 

(lmk if I'm just entirely misinterpreting/missing the point!)",c3dbf9a1c4e0c2031167b292db9a8e6c3f1fbe29,2018-04-16 19:29:14,181858313,"@@ -0,0 +1,75 @@
+'use strict';
+
+const getAddress = require('../utils/addressing');
+const { decode, encode, reject } = require('../utils/helpers');
+
+
+const addResponse = (context, publicKey, { moji, offer }) => {
+  if (!moji || moji.length === 0) {
+    return reject('No moji specified');
+  }
+
+  if (!offer) {
+    return reject('No offer specified');
+  }
+
+  const signer = getAddress.collection(publicKey);
+
+  return context.getState(moji.concat(signer, offer))
+    .then(state => {
+      if (state[signer].length === 0) {
+        return reject('Signer does not have a collection:', publicKey);
+      }
+
+      if (state[offer].length === 0) {
+        return reject('Specified offer does not exist:', offer);
+      }
+
+      for (let offered of moji) {
+        if (state[offered].length === 0) {
+          return reject('Specified moji does not exist:', offered);
+        }
+      }
+
+      moji = moji.sort();
+      const decodedOffer = decode(state[offer]);
+
+      for (let response of decodedOffer.responses) {
+        if (response.moji.every((m, i) => m === moji[i])) {
+          return reject('A response already exists for moji:', moji);
+        }
+      }
+
+      const signerIsOwner = publicKey === decodedOffer.owner;
+      const decodedMoji = moji.map(address => {
+        return Object.assign({ address }, decode(state[address]))
+      });
+
+      if (decodedOffer.owner === decodedMoji[0].owner) {
+        const message = 'Response moji and offer have same owner:';
+        return reject(message, decodedOffer.owner);
+      }
+
+      const approver = signerIsOwner
+        ? decodedMoji[0].owner
+        : decodedOffer.owner;
+
+      for (let offered of decodedMoji) {",,2018-04-17 02:48:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181858313,https://github.com/hyperledger/education-cryptomoji/pull/54#discussion_r181858313,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/54,https://github.com/hyperledger/education-cryptomoji/pull/54,"Yeah, I think we need it. You could pass the test on 106 without sorting the moji you store. I will add this test to CREATE_OFFER as well.",c3dbf9a1c4e0c2031167b292db9a8e6c3f1fbe29,2018-04-16 21:37:33,181893606,"@@ -0,0 +1,248 @@
+'use strict';
+
+const { expect } = require('chai');
+const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
+
+const MojiHandler = require('../handler');
+const getAddress = require('../utils/addressing');
+const { decode } = require('../utils/helpers');
+const Txn = require('./mocks/txn');
+const Context = require('./mocks/context');
+
+describe('Create Offer', function() {
+  let handler = null;
+  let context = null;
+  let offer = null;
+  let ownerPub = null;
+  let ownerPriv = null;
+  let responderPub = null;
+  let responderPriv = null;
+  let moji = null;
+
+  before(function() {
+    handler = new MojiHandler();
+  });
+
+  beforeEach(function() {
+    context = new Context();
+    const ownerTxn = new Txn({ action: 'CREATE_COLLECTION' });
+    const responderTxn = new Txn({ action: 'CREATE_COLLECTION' });
+
+    ownerPub = ownerTxn._publicKey;
+    ownerPriv = ownerTxn._privateKey;
+    responderPub = responderTxn._publicKey;
+    responderPriv = responderTxn._privateKey;
+
+    return handler.apply(responderTxn, context)
+      .then(() => {
+        const address = getAddress.collection(responderPub);
+        moji = decode(context._state[address]).moji.sort();
+        return handler.apply(ownerTxn, context);
+      })
+      .then(() => {
+        const ownerAddress = getAddress.collection(ownerPub);
+        const { moji } = decode(context._state[ownerAddress]);
+        offer = getAddress.offer(ownerTxn._publicKey)(moji);
+
+        const offerTxn = new Txn({ action: 'CREATE_OFFER', moji }, ownerPriv);
+        return handler.apply(offerTxn, context);
+      });
+  });
+
+  it('should add a response with multiple moji', function() {
+    const txn = new Txn({ action: 'ADD_RESPONSE', moji, offer }, responderPriv);
+
+    return handler.apply(txn, context)
+      .then(() => {
+        const { responses } = decode(context._state[offer]);
+        expect(responses, 'Offer should have one response').to.have.lengthOf(1);
+
+        expect(responses[0].approver, 'Response should need owner approval')
+          .to.equal(ownerPub);
+        expect(responses[0].moji, 'Response should include the moji offered')
+          .to.deep.equal(moji);
+      });
+  });
+
+  it('should add a response with a single moji', function() {
+    moji = moji.slice(0, 1);
+    const txn = new Txn({ action: 'ADD_RESPONSE', moji, offer }, responderPriv);
+
+    return handler.apply(txn, context)
+      .then(() => {
+        const responses = decode(context._state[offer]).responses;
+        expect(responses, 'Offer should have one response').to.have.lengthOf(1);
+
+        expect(responses[0].approver, 'Response should need owner approval')
+          .to.equal(ownerPub);
+        expect(responses[0].moji, 'Response should include the moji offered')
+          .to.deep.equal(moji);
+      });
+  });
+
+  it('should add a response from the offer owner', function() {
+    const txn = new Txn({ action: 'ADD_RESPONSE', moji, offer }, ownerPriv);
+
+    return handler.apply(txn, context)
+      .then(() => {
+        const { responses } = decode(context._state[offer]);
+        expect(responses[0].approver, 'Response should need responder approval')
+          .to.equal(responderPub);
+      });
+  });
+
+  it('should sort the moji in the response', function() {",94,2018-04-17 02:48:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181893606,https://github.com/hyperledger/education-cryptomoji/pull/54#discussion_r181893606,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/54,https://github.com/hyperledger/education-cryptomoji/pull/54,"Changed to `moji`, and removed the other uses of `offered` as well.",c3dbf9a1c4e0c2031167b292db9a8e6c3f1fbe29,2018-04-16 22:10:36,181900898,"@@ -0,0 +1,75 @@
+'use strict';
+
+const getAddress = require('../utils/addressing');
+const { decode, encode, reject } = require('../utils/helpers');
+
+
+const addResponse = (context, publicKey, { moji, offer }) => {
+  if (!moji || moji.length === 0) {
+    return reject('No moji specified');
+  }
+
+  if (!offer) {
+    return reject('No offer specified');
+  }
+
+  const signer = getAddress.collection(publicKey);
+
+  return context.getState(moji.concat(signer, offer))
+    .then(state => {
+      if (state[signer].length === 0) {
+        return reject('Signer does not have a collection:', publicKey);
+      }
+
+      if (state[offer].length === 0) {
+        return reject('Specified offer does not exist:', offer);
+      }
+
+      for (let offered of moji) {
+        if (state[offered].length === 0) {
+          return reject('Specified moji does not exist:', offered);
+        }
+      }
+
+      moji = moji.sort();
+      const decodedOffer = decode(state[offer]);
+
+      for (let response of decodedOffer.responses) {
+        if (response.moji.every((m, i) => m === moji[i])) {
+          return reject('A response already exists for moji:', moji);
+        }
+      }
+
+      const signerIsOwner = publicKey === decodedOffer.owner;
+      const decodedMoji = moji.map(address => {
+        return Object.assign({ address }, decode(state[address]))
+      });
+
+      if (decodedOffer.owner === decodedMoji[0].owner) {
+        const message = 'Response moji and offer have same owner:';
+        return reject(message, decodedOffer.owner);
+      }
+
+      const approver = signerIsOwner
+        ? decodedMoji[0].owner
+        : decodedOffer.owner;
+
+      for (let offered of decodedMoji) {",,2018-04-17 02:48:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181900898,https://github.com/hyperledger/education-cryptomoji/pull/54#discussion_r181900898,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/54,https://github.com/hyperledger/education-cryptomoji/pull/54,maybe remove extra newlines on lns 71-72 and lns 75-76?,c3dbf9a1c4e0c2031167b292db9a8e6c3f1fbe29,2018-04-16 22:29:21,181904402,"@@ -0,0 +1,96 @@
+'use strict';
+
+const getAddress = require('../utils/addressing');
+const { decode, encode, reject } = require('../utils/helpers');
+
+
+const addResponse = (context, publicKey, { moji, offer }) => {
+  if (!moji || moji.length === 0) {
+    return reject('No moji specified');
+  }
+
+  if (!offer) {
+    return reject('No offer specified');
+  }
+
+  const signer = getAddress.collection(publicKey);
+
+  return context.getState(moji.concat(signer, offer))
+    .then(state => {
+      if (state[signer].length === 0) {
+        return reject('Signer does not have a collection:', publicKey);
+      }
+
+      if (state[offer].length === 0) {
+        return reject('Specified offer does not exist:', offer);
+      }
+
+      for (let mojiAddress of moji) {
+        if (state[mojiAddress].length === 0) {
+          return reject('Specified moji does not exist:', mojiAddress);
+        }
+      }
+
+      moji = moji.sort();
+      const decodedOffer = decode(state[offer]);
+
+      for (let response of decodedOffer.responses) {
+        const responseExists = response.moji.length === moji.length
+          && response.moji.every((m, i) => m === moji[i]);
+
+        if (responseExists) {
+          return reject('A response already exists for moji:', moji.join(', '));
+        }
+      }
+
+      const signerIsOwner = publicKey === decodedOffer.owner;
+      const decodedMoji = moji.map(address => {
+        return Object.assign({ address }, decode(state[address]));
+      });
+
+      if (decodedOffer.owner === decodedMoji[0].owner) {
+        const message = 'Response moji and offer have same owner:';
+        return reject(message, decodedOffer.owner);
+      }
+
+      const approver = signerIsOwner
+        ? decodedMoji[0].owner
+        : decodedOffer.owner;
+
+      for (let moji of decodedMoji) {
+        if (signerIsOwner && moji.owner !== approver) {
+          return reject('Moji must share owner with others:', moji.address);
+        }
+
+        if (!signerIsOwner && moji.owner !== publicKey) {
+          return reject('Signer must own specified moji:', moji.address);
+        }
+      }
+
+      const listing = getAddress.sireListing(decodedMoji[0].owner);
+
+",,2018-04-17 02:48:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181904402,https://github.com/hyperledger/education-cryptomoji/pull/54#discussion_r181904402,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/50,https://github.com/hyperledger/education-cryptomoji/pull/50,"yesss, I kept thinking ""WE CAN'T FORGET TO SORT THE ADDRESSES"" all of last week, so I'm glad you remembered to put it in!",09666ec220d38912cdbd4d371ce185d763b737de,2018-04-16 18:41:57,181844849,"@@ -37,7 +37,7 @@ getAddress.offer = ownerKey => {
     return NAMESPACE +
       TYPE_PREFIXES.OFFER +
       ownerHash +
-      hash(offeredAddresses.join(''), 54);
+      hash(offeredAddresses.sort().join(''), 54);",5,2018-04-16 22:11:48,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181844849,https://github.com/hyperledger/education-cryptomoji/pull/50#discussion_r181844849,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/49,https://github.com/hyperledger/education-cryptomoji/pull/49,"what about `'0'.repeat(length)` instead?
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat",3e12b62c8fad6c98ffb7fea61ebd0a6804413ac7,2018-04-14 20:28:47,181562936,"@@ -0,0 +1,106 @@
+'use strict';
+
+const getAddress = require('../utils/addressing');
+const { DNA_BITS, AVERAGE_CHANCE, SIRE_CHANCE } = require('../utils/constants');
+const { encode, decode, reject, getPrng } = require('../utils/helpers');
+
+const HEX_SIZE = DNA_BITS / 4;
+const ZEROS = Array.apply(null, Array(HEX_SIZE)).map(() => '0').join('');",,2018-04-16 02:44:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181562936,https://github.com/hyperledger/education-cryptomoji/pull/49#discussion_r181562936,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/49,https://github.com/hyperledger/education-cryptomoji/pull/49,Neat. Updated.,3e12b62c8fad6c98ffb7fea61ebd0a6804413ac7,2018-04-14 21:27:31,181564102,"@@ -0,0 +1,106 @@
+'use strict';
+
+const getAddress = require('../utils/addressing');
+const { DNA_BITS, AVERAGE_CHANCE, SIRE_CHANCE } = require('../utils/constants');
+const { encode, decode, reject, getPrng } = require('../utils/helpers');
+
+const HEX_SIZE = DNA_BITS / 4;
+const ZEROS = Array.apply(null, Array(HEX_SIZE)).map(() => '0').join('');",,2018-04-16 02:44:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181564102,https://github.com/hyperledger/education-cryptomoji/pull/49#discussion_r181564102,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/49,https://github.com/hyperledger/education-cryptomoji/pull/49,@delventhalz is this supposed to be `'Breed Moji'` instead of `'Select Sire'`?,3e12b62c8fad6c98ffb7fea61ebd0a6804413ac7,2018-04-16 00:33:27,181604001,"@@ -0,0 +1,237 @@
+'use strict';
+
+const { expect } = require('chai');
+const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
+
+const MojiHandler = require('../handler');
+const getAddress = require('../utils/addressing');
+const { decode } = require('../utils/helpers');
+const Txn = require('./mocks/txn');
+const Context = require('./mocks/context');
+
+describe('Select Sire', function() {",,2018-04-16 02:44:15,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181604001,https://github.com/hyperledger/education-cryptomoji/pull/49#discussion_r181604001,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/48,https://github.com/hyperledger/education-cryptomoji/pull/48,"discussion: interesting, I didn't know you could/had to specify a specific `npm` version as a dependency! would the currently globally installed `npm` then install a local v5.8+ of `npm` in the `node_modules/`, which is then subsequently used for all npm & npm script commands? 🤔 ",8ab7d8c2ede2ce53be116c37dfebb852cc882d91,2018-04-14 20:10:47,181562486,"@@ -18,6 +18,7 @@
   },
   ""homepage"": ""https://github.com/hyperledger/education-cryptomoji#readme"",
   ""dependencies"": {
+    ""npm"": ""^5.8.0"",",,2018-04-14 20:23:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181562486,https://github.com/hyperledger/education-cryptomoji/pull/48#discussion_r181562486,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/48,https://github.com/hyperledger/education-cryptomoji/pull/48,nitpick: maybe replace double quotes w/ single quotes? same for ln 47,8ab7d8c2ede2ce53be116c37dfebb852cc882d91,2018-04-14 20:12:43,181562538,"@@ -0,0 +1,118 @@
+'use strict';
+
+const { expect } = require('chai');
+const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
+
+const MojiHandler = require('../handler');
+const getAddress = require('../utils/addressing');
+const { decode } = require('../utils/helpers');
+const Txn = require('./mocks/txn');
+const Context = require('./mocks/context');
+
+describe('Select Sire', function() {
+  let handler = null;
+  let context = null;
+  let privateKey = null;
+  let publicKey = null;
+  let address = null;
+  let sire = null;
+
+  before(function() {
+    handler = new MojiHandler();
+  });
+
+  beforeEach(function() {
+    const createTxn = new Txn({ action: 'CREATE_COLLECTION' });
+    context = new Context();
+    privateKey = createTxn._privateKey;
+    publicKey = createTxn._publicKey;
+    address = getAddress.sireListing(publicKey);
+    return handler.apply(createTxn, context)
+      .then(() => {
+        const address = getAddress.collection(publicKey);
+        sire = decode(context._state[address]).moji[0];
+      });
+  });
+
+  it('should list a Sire at the correct address', function() {
+    const txn = new Txn({ action: 'SELECT_SIRE', sire }, privateKey);
+
+    return handler.apply(txn, context)
+      .then(() => {
+        expect(context._state[address], 'Sire listing should exist').to.exist;
+        const listing = decode(context._state[address]);
+
+        expect(listing.owner, ""Sire listing should include owner's public key"")",45,2018-04-14 20:23:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181562538,https://github.com/hyperledger/education-cryptomoji/pull/48#discussion_r181562538,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/48,https://github.com/hyperledger/education-cryptomoji/pull/48,"It's avoid escaping. I am a fan of the convention, and added an eslint rule for it. If we are not  fan for HR students, I can escape instead.",8ab7d8c2ede2ce53be116c37dfebb852cc882d91,2018-04-14 20:19:18,181562687,"@@ -0,0 +1,118 @@
+'use strict';
+
+const { expect } = require('chai');
+const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
+
+const MojiHandler = require('../handler');
+const getAddress = require('../utils/addressing');
+const { decode } = require('../utils/helpers');
+const Txn = require('./mocks/txn');
+const Context = require('./mocks/context');
+
+describe('Select Sire', function() {
+  let handler = null;
+  let context = null;
+  let privateKey = null;
+  let publicKey = null;
+  let address = null;
+  let sire = null;
+
+  before(function() {
+    handler = new MojiHandler();
+  });
+
+  beforeEach(function() {
+    const createTxn = new Txn({ action: 'CREATE_COLLECTION' });
+    context = new Context();
+    privateKey = createTxn._privateKey;
+    publicKey = createTxn._publicKey;
+    address = getAddress.sireListing(publicKey);
+    return handler.apply(createTxn, context)
+      .then(() => {
+        const address = getAddress.collection(publicKey);
+        sire = decode(context._state[address]).moji[0];
+      });
+  });
+
+  it('should list a Sire at the correct address', function() {
+    const txn = new Txn({ action: 'SELECT_SIRE', sire }, privateKey);
+
+    return handler.apply(txn, context)
+      .then(() => {
+        expect(context._state[address], 'Sire listing should exist').to.exist;
+        const listing = decode(context._state[address]);
+
+        expect(listing.owner, ""Sire listing should include owner's public key"")",45,2018-04-14 20:23:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181562687,https://github.com/hyperledger/education-cryptomoji/pull/48#discussion_r181562687,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/48,https://github.com/hyperledger/education-cryptomoji/pull/48,"I actually have no idea. A warning popped up telling me to upgrade, and I upgraded. In retrospect, it seems really weird. I'm going to drop that commit.",8ab7d8c2ede2ce53be116c37dfebb852cc882d91,2018-04-14 20:20:07,181562711,"@@ -18,6 +18,7 @@
   },
   ""homepage"": ""https://github.com/hyperledger/education-cryptomoji#readme"",
   ""dependencies"": {
+    ""npm"": ""^5.8.0"",",,2018-04-14 20:23:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181562711,https://github.com/hyperledger/education-cryptomoji/pull/48#discussion_r181562711,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/48,https://github.com/hyperledger/education-cryptomoji/pull/48,OOPS I totally didn't read the string carefully enough. 👍 for double quotes to avoid escaping!,8ab7d8c2ede2ce53be116c37dfebb852cc882d91,2018-04-14 20:21:53,181562775,"@@ -0,0 +1,118 @@
+'use strict';
+
+const { expect } = require('chai');
+const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
+
+const MojiHandler = require('../handler');
+const getAddress = require('../utils/addressing');
+const { decode } = require('../utils/helpers');
+const Txn = require('./mocks/txn');
+const Context = require('./mocks/context');
+
+describe('Select Sire', function() {
+  let handler = null;
+  let context = null;
+  let privateKey = null;
+  let publicKey = null;
+  let address = null;
+  let sire = null;
+
+  before(function() {
+    handler = new MojiHandler();
+  });
+
+  beforeEach(function() {
+    const createTxn = new Txn({ action: 'CREATE_COLLECTION' });
+    context = new Context();
+    privateKey = createTxn._privateKey;
+    publicKey = createTxn._publicKey;
+    address = getAddress.sireListing(publicKey);
+    return handler.apply(createTxn, context)
+      .then(() => {
+        const address = getAddress.collection(publicKey);
+        sire = decode(context._state[address]).moji[0];
+      });
+  });
+
+  it('should list a Sire at the correct address', function() {
+    const txn = new Txn({ action: 'SELECT_SIRE', sire }, privateKey);
+
+    return handler.apply(txn, context)
+      .then(() => {
+        expect(context._state[address], 'Sire listing should exist').to.exist;
+        const listing = decode(context._state[address]);
+
+        expect(listing.owner, ""Sire listing should include owner's public key"")",45,2018-04-14 20:23:21,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181562775,https://github.com/hyperledger/education-cryptomoji/pull/48#discussion_r181562775,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/39,https://github.com/hyperledger/education-cryptomoji/pull/39,"minor suggestion: end the `.then(...)` block from ln 98 right after ln 103, and then attach the `.then(...) on ln 104 afterwards to help flatten out these nested promises",aa3fab76d688a81944021dc33aa7f1599fddfb44,2018-04-07 18:00:47,179923700,"@@ -0,0 +1,166 @@
+// Functions for creating private keys and submitting transactions
+'use strict';
+
+import axios from 'axios';
+import { createHash } from 'crypto';
+import secp256k1 from 'sawtooth-sdk/signing/secp256k1';
+import {
+  Transaction,
+  TransactionHeader,
+  Batch,
+  BatchHeader,
+  BatchList
+} from 'sawtooth-sdk/protobuf';
+
+
+const hash = str => createHash('sha512').update(str).digest('hex');
+
+const FAMILY_NAME = 'cryptomoji';
+const FAMILY_VERSION = '1.0';
+const NAMESPACE = hash(FAMILY_NAME).slice(0, 6);
+const CONTEXT = new secp256k1.Secp256k1Context();
+
+// Returns a random 1-12 character string
+const getNonce = () => (Math.random() * 10 ** 18).toString(36);
+
+// Recursively fetches all of the keys in nested objects
+const listKeys = obj => {
+  if (!obj || typeof obj !== 'object') {
+    return [];
+  }
+
+  if (Array.isArray(obj)) {
+    return obj.reduce((keys, item) => {
+      return keys.concat(listKeys(item));
+    }, []);
+  }
+
+  const topKeys = Object.keys(obj);
+  const nestedKeys = topKeys.reduce((keys, key) => {
+    return keys.concat(listKeys(obj[key]));
+  }, []);
+  return topKeys.concat(nestedKeys);
+};
+
+// Encode payload as a sorted JSON buffer
+const encodePayload = payload => {
+  const sortedKeys = listKeys(payload).sort();
+  return Buffer.from(JSON.stringify(payload, sortedKeys));
+};
+
+// Returns a function to create new Transactions
+const getTxnCreator = (privateWrapper, publicKey) => encodedPayload => {
+  const header = TransactionHeader.encode({
+    signerPublicKey: publicKey,
+    batcherPublicKey: publicKey,
+    familyName: FAMILY_NAME,
+    familyVersion: FAMILY_VERSION,
+    inputs: [NAMESPACE],
+    outputs: [NAMESPACE],
+    nonce: getNonce(),
+    payloadSha512: hash(encodedPayload)
+  }).finish();
+
+  return Transaction.create({
+    header,
+    payload: encodedPayload,
+    headerSignature: CONTEXT.sign(header, privateWrapper)
+  });
+};
+
+// Returns a function to create batches
+const getBatchCreator = (privateWrapper, publicKey) => txns => {
+  const header = BatchHeader.encode({
+    signerPublicKey: publicKey,
+    transactionIds: txns.map(txn => txn.headerSignature)
+  }).finish();
+
+  return Batch.create({
+    header,
+    headerSignature: CONTEXT.sign(header, privateWrapper),
+    transactions: txns
+  });
+};
+
+// Encode a Batch in a BatchList
+const encodeBatch = batch => {
+  return BatchList.encode({ batches: [batch] }).finish();
+};
+
+// Submits an encoded BatchList to the API
+const submitBatchList = (batchList, shouldWait) => {
+  return axios({
+    method: 'POST',
+    url: 'api/batches',
+    data: batchList,
+    headers: { 'Content-Type': 'application/octet-stream' }
+  })
+    .then(({ data }) => {
+      if (!shouldWait) {
+        return true;
+      }
+
+      return axios.get(data.link + '&wait')",,2018-04-07 19:00:30,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/179923700,https://github.com/hyperledger/education-cryptomoji/pull/39#discussion_r179923700,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/39,https://github.com/hyperledger/education-cryptomoji/pull/39,do we need a `/` at the beginning of the url for this `axios` request and others?,aa3fab76d688a81944021dc33aa7f1599fddfb44,2018-04-07 18:02:53,179923741,"@@ -0,0 +1,166 @@
+// Functions for creating private keys and submitting transactions
+'use strict';
+
+import axios from 'axios';
+import { createHash } from 'crypto';
+import secp256k1 from 'sawtooth-sdk/signing/secp256k1';
+import {
+  Transaction,
+  TransactionHeader,
+  Batch,
+  BatchHeader,
+  BatchList
+} from 'sawtooth-sdk/protobuf';
+
+
+const hash = str => createHash('sha512').update(str).digest('hex');
+
+const FAMILY_NAME = 'cryptomoji';
+const FAMILY_VERSION = '1.0';
+const NAMESPACE = hash(FAMILY_NAME).slice(0, 6);
+const CONTEXT = new secp256k1.Secp256k1Context();
+
+// Returns a random 1-12 character string
+const getNonce = () => (Math.random() * 10 ** 18).toString(36);
+
+// Recursively fetches all of the keys in nested objects
+const listKeys = obj => {
+  if (!obj || typeof obj !== 'object') {
+    return [];
+  }
+
+  if (Array.isArray(obj)) {
+    return obj.reduce((keys, item) => {
+      return keys.concat(listKeys(item));
+    }, []);
+  }
+
+  const topKeys = Object.keys(obj);
+  const nestedKeys = topKeys.reduce((keys, key) => {
+    return keys.concat(listKeys(obj[key]));
+  }, []);
+  return topKeys.concat(nestedKeys);
+};
+
+// Encode payload as a sorted JSON buffer
+const encodePayload = payload => {
+  const sortedKeys = listKeys(payload).sort();
+  return Buffer.from(JSON.stringify(payload, sortedKeys));
+};
+
+// Returns a function to create new Transactions
+const getTxnCreator = (privateWrapper, publicKey) => encodedPayload => {
+  const header = TransactionHeader.encode({
+    signerPublicKey: publicKey,
+    batcherPublicKey: publicKey,
+    familyName: FAMILY_NAME,
+    familyVersion: FAMILY_VERSION,
+    inputs: [NAMESPACE],
+    outputs: [NAMESPACE],
+    nonce: getNonce(),
+    payloadSha512: hash(encodedPayload)
+  }).finish();
+
+  return Transaction.create({
+    header,
+    payload: encodedPayload,
+    headerSignature: CONTEXT.sign(header, privateWrapper)
+  });
+};
+
+// Returns a function to create batches
+const getBatchCreator = (privateWrapper, publicKey) => txns => {
+  const header = BatchHeader.encode({
+    signerPublicKey: publicKey,
+    transactionIds: txns.map(txn => txn.headerSignature)
+  }).finish();
+
+  return Batch.create({
+    header,
+    headerSignature: CONTEXT.sign(header, privateWrapper),
+    transactions: txns
+  });
+};
+
+// Encode a Batch in a BatchList
+const encodeBatch = batch => {
+  return BatchList.encode({ batches: [batch] }).finish();
+};
+
+// Submits an encoded BatchList to the API
+const submitBatchList = (batchList, shouldWait) => {
+  return axios({
+    method: 'POST',
+    url: 'api/batches',",94,2018-04-07 19:00:30,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/179923741,https://github.com/hyperledger/education-cryptomoji/pull/39#discussion_r179923741,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/39,https://github.com/hyperledger/education-cryptomoji/pull/39,"I'm unsure actually. When I tested it I was subbing in the full URLs. In other front-end code I've written though (non-axios), I've started relative URLs without a leading slash:

https://github.com/hyperledger/sawtooth-supply-chain/blob/master/asset_client/src/services/api.js#L23",aa3fab76d688a81944021dc33aa7f1599fddfb44,2018-04-07 18:07:32,179923849,"@@ -0,0 +1,166 @@
+// Functions for creating private keys and submitting transactions
+'use strict';
+
+import axios from 'axios';
+import { createHash } from 'crypto';
+import secp256k1 from 'sawtooth-sdk/signing/secp256k1';
+import {
+  Transaction,
+  TransactionHeader,
+  Batch,
+  BatchHeader,
+  BatchList
+} from 'sawtooth-sdk/protobuf';
+
+
+const hash = str => createHash('sha512').update(str).digest('hex');
+
+const FAMILY_NAME = 'cryptomoji';
+const FAMILY_VERSION = '1.0';
+const NAMESPACE = hash(FAMILY_NAME).slice(0, 6);
+const CONTEXT = new secp256k1.Secp256k1Context();
+
+// Returns a random 1-12 character string
+const getNonce = () => (Math.random() * 10 ** 18).toString(36);
+
+// Recursively fetches all of the keys in nested objects
+const listKeys = obj => {
+  if (!obj || typeof obj !== 'object') {
+    return [];
+  }
+
+  if (Array.isArray(obj)) {
+    return obj.reduce((keys, item) => {
+      return keys.concat(listKeys(item));
+    }, []);
+  }
+
+  const topKeys = Object.keys(obj);
+  const nestedKeys = topKeys.reduce((keys, key) => {
+    return keys.concat(listKeys(obj[key]));
+  }, []);
+  return topKeys.concat(nestedKeys);
+};
+
+// Encode payload as a sorted JSON buffer
+const encodePayload = payload => {
+  const sortedKeys = listKeys(payload).sort();
+  return Buffer.from(JSON.stringify(payload, sortedKeys));
+};
+
+// Returns a function to create new Transactions
+const getTxnCreator = (privateWrapper, publicKey) => encodedPayload => {
+  const header = TransactionHeader.encode({
+    signerPublicKey: publicKey,
+    batcherPublicKey: publicKey,
+    familyName: FAMILY_NAME,
+    familyVersion: FAMILY_VERSION,
+    inputs: [NAMESPACE],
+    outputs: [NAMESPACE],
+    nonce: getNonce(),
+    payloadSha512: hash(encodedPayload)
+  }).finish();
+
+  return Transaction.create({
+    header,
+    payload: encodedPayload,
+    headerSignature: CONTEXT.sign(header, privateWrapper)
+  });
+};
+
+// Returns a function to create batches
+const getBatchCreator = (privateWrapper, publicKey) => txns => {
+  const header = BatchHeader.encode({
+    signerPublicKey: publicKey,
+    transactionIds: txns.map(txn => txn.headerSignature)
+  }).finish();
+
+  return Batch.create({
+    header,
+    headerSignature: CONTEXT.sign(header, privateWrapper),
+    transactions: txns
+  });
+};
+
+// Encode a Batch in a BatchList
+const encodeBatch = batch => {
+  return BatchList.encode({ batches: [batch] }).finish();
+};
+
+// Submits an encoded BatchList to the API
+const submitBatchList = (batchList, shouldWait) => {
+  return axios({
+    method: 'POST',
+    url: 'api/batches',",94,2018-04-07 19:00:30,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/179923849,https://github.com/hyperledger/education-cryptomoji/pull/39#discussion_r179923849,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/39,https://github.com/hyperledger/education-cryptomoji/pull/39,we can leave it for now and I can let you know if I end up running into any issues ¯\_(ツ)_/¯,aa3fab76d688a81944021dc33aa7f1599fddfb44,2018-04-07 18:10:07,179923912,"@@ -0,0 +1,166 @@
+// Functions for creating private keys and submitting transactions
+'use strict';
+
+import axios from 'axios';
+import { createHash } from 'crypto';
+import secp256k1 from 'sawtooth-sdk/signing/secp256k1';
+import {
+  Transaction,
+  TransactionHeader,
+  Batch,
+  BatchHeader,
+  BatchList
+} from 'sawtooth-sdk/protobuf';
+
+
+const hash = str => createHash('sha512').update(str).digest('hex');
+
+const FAMILY_NAME = 'cryptomoji';
+const FAMILY_VERSION = '1.0';
+const NAMESPACE = hash(FAMILY_NAME).slice(0, 6);
+const CONTEXT = new secp256k1.Secp256k1Context();
+
+// Returns a random 1-12 character string
+const getNonce = () => (Math.random() * 10 ** 18).toString(36);
+
+// Recursively fetches all of the keys in nested objects
+const listKeys = obj => {
+  if (!obj || typeof obj !== 'object') {
+    return [];
+  }
+
+  if (Array.isArray(obj)) {
+    return obj.reduce((keys, item) => {
+      return keys.concat(listKeys(item));
+    }, []);
+  }
+
+  const topKeys = Object.keys(obj);
+  const nestedKeys = topKeys.reduce((keys, key) => {
+    return keys.concat(listKeys(obj[key]));
+  }, []);
+  return topKeys.concat(nestedKeys);
+};
+
+// Encode payload as a sorted JSON buffer
+const encodePayload = payload => {
+  const sortedKeys = listKeys(payload).sort();
+  return Buffer.from(JSON.stringify(payload, sortedKeys));
+};
+
+// Returns a function to create new Transactions
+const getTxnCreator = (privateWrapper, publicKey) => encodedPayload => {
+  const header = TransactionHeader.encode({
+    signerPublicKey: publicKey,
+    batcherPublicKey: publicKey,
+    familyName: FAMILY_NAME,
+    familyVersion: FAMILY_VERSION,
+    inputs: [NAMESPACE],
+    outputs: [NAMESPACE],
+    nonce: getNonce(),
+    payloadSha512: hash(encodedPayload)
+  }).finish();
+
+  return Transaction.create({
+    header,
+    payload: encodedPayload,
+    headerSignature: CONTEXT.sign(header, privateWrapper)
+  });
+};
+
+// Returns a function to create batches
+const getBatchCreator = (privateWrapper, publicKey) => txns => {
+  const header = BatchHeader.encode({
+    signerPublicKey: publicKey,
+    transactionIds: txns.map(txn => txn.headerSignature)
+  }).finish();
+
+  return Batch.create({
+    header,
+    headerSignature: CONTEXT.sign(header, privateWrapper),
+    transactions: txns
+  });
+};
+
+// Encode a Batch in a BatchList
+const encodeBatch = batch => {
+  return BatchList.encode({ batches: [batch] }).finish();
+};
+
+// Submits an encoded BatchList to the API
+const submitBatchList = (batchList, shouldWait) => {
+  return axios({
+    method: 'POST',
+    url: 'api/batches',",94,2018-04-07 19:00:30,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/179923912,https://github.com/hyperledger/education-cryptomoji/pull/39#discussion_r179923912,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/38,https://github.com/hyperledger/education-cryptomoji/pull/38,Should these console logs be removed?,a34504224981e0b1bd9409028346377c58bee67a,2018-04-08 03:01:42,179933537,"@@ -0,0 +1,86 @@
+import React from 'react';
+
+import { Collection } from './Collection';
+import { Moji } from './Moji';
+import { Search } from './Search';
+
+import { api } from './utils/fakeApi';
+import { utils } from './utils/utils';
+
+export class Browse extends React.Component {
+  constructor(props) {
+    super(props);
+    this.state = {
+      address: null,
+      type: null,
+      collection: null,
+      moji: null
+    };
+  }
+
+  static getDerivedStateFromProps(nextProps, prevState) {
+    console.log('GETDERIVEDSTATEFROMPROPS: <Browse />');",22,2018-04-12 19:17:01,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/179933537,https://github.com/hyperledger/education-cryptomoji/pull/38#discussion_r179933537,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/38,https://github.com/hyperledger/education-cryptomoji/pull/38,"Yes, but is it OK to keep them in for now? I discovered an infinite loop of updates that I wouldn't have discovered if I hadn't kept these console.logs in for now. (I guess I could also just remove them and keep them on my end w/o committing them, if you'd like.)",a34504224981e0b1bd9409028346377c58bee67a,2018-04-09 23:09:30,180256722,"@@ -0,0 +1,86 @@
+import React from 'react';
+
+import { Collection } from './Collection';
+import { Moji } from './Moji';
+import { Search } from './Search';
+
+import { api } from './utils/fakeApi';
+import { utils } from './utils/utils';
+
+export class Browse extends React.Component {
+  constructor(props) {
+    super(props);
+    this.state = {
+      address: null,
+      type: null,
+      collection: null,
+      moji: null
+    };
+  }
+
+  static getDerivedStateFromProps(nextProps, prevState) {
+    console.log('GETDERIVEDSTATEFROMPROPS: <Browse />');",22,2018-04-12 19:17:01,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/180256722,https://github.com/hyperledger/education-cryptomoji/pull/38#discussion_r180256722,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,Needs an empty line at the end of the file.,3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-02 17:49:07,178602189,"@@ -0,0 +1,8 @@
+var chai = require('chai');
+var should = chai.should();
+
+describe('Test', () => {
+  it('Should pass test', done => {
+    done();
+  });
+});",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178602189,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r178602189,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,"This is a weird line, and I can't get it to run as is. Is mocha suppossed to be installed at the root project directory? If so, there is no `package.json` in this PR to do so. I also don't really agree with that design decision. I think mocha and chai should be added as dev dependencies to each component that uses them. I think keeping things simple is worth a few repeated installs.",3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-02 18:06:34,178606978,"@@ -4,7 +4,7 @@
   ""description"": ""Basic blockchain sprint built in javascript to teach general blockchain practices and structure"",
   ""main"": ""blockchain-intro-prompt.js"",
   ""scripts"": {
-    ""test"": ""echo \""Error: no test specified\"" && exit 1""
+    ""test"": ""../../node_modules/mocha/bin/mocha tests.js""",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178606978,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r178606978,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,"This is a package lock without a `package.json`. I think it should be removed, and all dependencies installed on a component by component basis. See above comment for more details.",3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-02 18:07:23,178607205,"@@ -0,0 +1,215 @@
+{",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178607205,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r178607205,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,Let's not merge any commented out code into master.,3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-02 18:45:14,178616966,"@@ -12,52 +12,47 @@ describe('Blockchain', () => {
   it('Should create a blockchain with a genesis block', done => {
     expect(blockchain).to.have.property('_createGenesisBlock');
     expect(blockchain).to.have.property('chain').with.lengthOf(1);
-    expect(genesisBlock.index).to.equal(0);
-    expect(genesisBlock.data).to.equal('Genesis Block');
     expect(genesisBlock.previousHash).to.equal('0');
     expect(genesisBlock.timestamp).to.equal(now);
     done();
   });
 
-  it('Should create a blockchain that can add blocks', done => {
-    blockchain.addBlock(newBlock);
+  // it('Should create a blockchain that can add blocks', done => {
+  //   blockchain.addBlock(newBlock);
 
-    expect(blockchain).to.have.property('addBlock');
-    expect(blockchain).to.have.property('_difficulty');
-    expect(blockchain.chain).to.have.lengthOf(2);
-    expect(blockchain.chain[1]).to.equal(newBlock);
-    done();
-  });
+  //   expect(blockchain).to.have.property('addBlock');
+  //   expect(blockchain).to.have.property('_difficulty');
+  //   expect(blockchain.chain).to.have.lengthOf(2);
+  //   expect(blockchain.chain[1]).to.equal(newBlock);
+  //   done();
+  // });",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178616966,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r178616966,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,"I don't think your hash function needs the slice functionality. I'd remove it. You could potentially do the concatenation in here if you wanted though:
```
const hash = (...strs) => createHash('sha512').update(strs.join('')).digest('hex');
```

But maybe that's too ES6y for the students.
¯\\\_(ツ)_/¯",3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-02 18:50:13,178618139,"@@ -0,0 +1,13 @@
+'use strict';
+
+const { createHash } = require('crypto');
+
+
+// Returns the first characters of a SHA-512 hash of a string
+const hash = (str, length = 128) => {",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178618139,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r178618139,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,"You don't need to list `crypto` as a dependency, it comes for free with Node. You should also remove `crypto-js` as a dependency in the line below.",3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-02 18:56:54,178619869,"@@ -9,6 +9,7 @@
   ""author"": """",
   ""license"": ""Apache 2.0"",
   ""dependencies"": {
+    ""crypto"": ""^1.0.1"",",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178619869,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r178619869,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,"To follow best practices for unit testing, much if not all of these data instantiations should be done in `beforeEach` hooks. This way each test gets fresh data that hasn't been modified by a previous test. I could be talked into including it here for simplicity's sake, as long as we're sure it's not going to impact any tests we want to write later.",3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-02 19:03:50,178621534,"@@ -0,0 +1,129 @@
+const chai = require('chai');
+const expect = chai.expect;
+const { hash } = require('./utils/helpers.js');
+const { Block, Blockchain, Transaction } = require('./blockchain.js');
+
+
+// Test transaction data
+const testFromAddress = hash('testFromAddress');
+const testToAddress = hash('testToAddress');
+const testAmount = '10.00';
+const transaction = new Transaction(
+  testFromAddress,
+  testToAddress,
+  testAmount
+);
+
+// Test blockchain data
+const blockchain = new Blockchain();
+const genesisBlock = blockchain.chain[0];
+const newBlock = new Block();
+const miningAddress = hash('miningAddress');",21,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178621534,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r178621534,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,"@therobinkim Do you have an opinion on whether or not we include `expect(...).to.have.property(...)` tests? It seems to me that the API should probably be included in the stub file the students get, and if we do test the API, it's just in one initial test that passes before the students modify anything. The remainder of the tests should all focus on how that API functions.",3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-02 19:04:50,178621759,"@@ -0,0 +1,129 @@
+const chai = require('chai');
+const expect = chai.expect;
+const { hash } = require('./utils/helpers.js');
+const { Block, Blockchain, Transaction } = require('./blockchain.js');
+
+
+// Test transaction data
+const testFromAddress = hash('testFromAddress');
+const testToAddress = hash('testToAddress');
+const testAmount = '10.00';
+const transaction = new Transaction(
+  testFromAddress,
+  testToAddress,
+  testAmount
+);
+
+// Test blockchain data
+const blockchain = new Blockchain();
+const genesisBlock = blockchain.chain[0];
+const newBlock = new Block();
+const miningAddress = hash('miningAddress');
+let timesMined = 0;
+
+// Test block data
+const testHash = '0123TESTHASH';
+const testTransactions = [];
+const testNonce = 0;
+const now = Date.now();
+const block = new Block(now, testTransactions, testHash);
+const testDataHash = hash(
+  testHash + now + JSON.stringify(testTransactions) + testNonce
+);
+
+
+// Transaction tests
+describe('Transaction', () => {
+  it('Should create a transaction with all initial values', done => {
+    expect(transaction.fromAddress).to.equal(testFromAddress);
+    expect(transaction.toAddress).to.equal(testToAddress);
+    expect(transaction.amount).to.equal(testAmount);
+    done();
+  });
+});
+
+// Blockchain tests
+describe('Blockchain', () => {
+  it('Should create a blockchain with a genesis block', done => {
+    expect(blockchain).to.have.property('_createGenesisBlock');
+    expect(blockchain).to.have.property('chain').with.lengthOf(1);",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178621759,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r178621759,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,Are these underscored properties one's we are requiring students to create and use? Seems like an implementation detail that should not be tested.,3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-02 19:05:23,178621892,"@@ -0,0 +1,129 @@
+const chai = require('chai');
+const expect = chai.expect;
+const { hash } = require('./utils/helpers.js');
+const { Block, Blockchain, Transaction } = require('./blockchain.js');
+
+
+// Test transaction data
+const testFromAddress = hash('testFromAddress');
+const testToAddress = hash('testToAddress');
+const testAmount = '10.00';
+const transaction = new Transaction(
+  testFromAddress,
+  testToAddress,
+  testAmount
+);
+
+// Test blockchain data
+const blockchain = new Blockchain();
+const genesisBlock = blockchain.chain[0];
+const newBlock = new Block();
+const miningAddress = hash('miningAddress');
+let timesMined = 0;
+
+// Test block data
+const testHash = '0123TESTHASH';
+const testTransactions = [];
+const testNonce = 0;
+const now = Date.now();
+const block = new Block(now, testTransactions, testHash);
+const testDataHash = hash(
+  testHash + now + JSON.stringify(testTransactions) + testNonce
+);
+
+
+// Transaction tests
+describe('Transaction', () => {
+  it('Should create a transaction with all initial values', done => {
+    expect(transaction.fromAddress).to.equal(testFromAddress);
+    expect(transaction.toAddress).to.equal(testToAddress);
+    expect(transaction.amount).to.equal(testAmount);
+    done();
+  });
+});
+
+// Blockchain tests
+describe('Blockchain', () => {
+  it('Should create a blockchain with a genesis block', done => {
+    expect(blockchain).to.have.property('_createGenesisBlock');",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178621892,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r178621892,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,`previousHash` or `testPreviousHash` would probably be more descriptive,3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-02 19:06:23,178622122,"@@ -0,0 +1,129 @@
+const chai = require('chai');
+const expect = chai.expect;
+const { hash } = require('./utils/helpers.js');
+const { Block, Blockchain, Transaction } = require('./blockchain.js');
+
+
+// Test transaction data
+const testFromAddress = hash('testFromAddress');
+const testToAddress = hash('testToAddress');
+const testAmount = '10.00';
+const transaction = new Transaction(
+  testFromAddress,
+  testToAddress,
+  testAmount
+);
+
+// Test blockchain data
+const blockchain = new Blockchain();
+const genesisBlock = blockchain.chain[0];
+const newBlock = new Block();
+const miningAddress = hash('miningAddress');
+let timesMined = 0;
+
+// Test block data
+const testHash = '0123TESTHASH';",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178622122,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r178622122,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,@delventhalz I have no strong preference of testing existence of properties,3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-07 16:44:29,179921541,"@@ -0,0 +1,129 @@
+const chai = require('chai');
+const expect = chai.expect;
+const { hash } = require('./utils/helpers.js');
+const { Block, Blockchain, Transaction } = require('./blockchain.js');
+
+
+// Test transaction data
+const testFromAddress = hash('testFromAddress');
+const testToAddress = hash('testToAddress');
+const testAmount = '10.00';
+const transaction = new Transaction(
+  testFromAddress,
+  testToAddress,
+  testAmount
+);
+
+// Test blockchain data
+const blockchain = new Blockchain();
+const genesisBlock = blockchain.chain[0];
+const newBlock = new Block();
+const miningAddress = hash('miningAddress');
+let timesMined = 0;
+
+// Test block data
+const testHash = '0123TESTHASH';
+const testTransactions = [];
+const testNonce = 0;
+const now = Date.now();
+const block = new Block(now, testTransactions, testHash);
+const testDataHash = hash(
+  testHash + now + JSON.stringify(testTransactions) + testNonce
+);
+
+
+// Transaction tests
+describe('Transaction', () => {
+  it('Should create a transaction with all initial values', done => {
+    expect(transaction.fromAddress).to.equal(testFromAddress);
+    expect(transaction.toAddress).to.equal(testToAddress);
+    expect(transaction.amount).to.equal(testAmount);
+    done();
+  });
+});
+
+// Blockchain tests
+describe('Blockchain', () => {
+  it('Should create a blockchain with a genesis block', done => {
+    expect(blockchain).to.have.property('_createGenesisBlock');
+    expect(blockchain).to.have.property('chain').with.lengthOf(1);",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/179921541,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r179921541,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,"+1, if we add mocha/chai to THIS package.json, then putting `mocha` in the `npm test` script should read the locally installed dependency! (and no need to hunt for it via writing `./node_modules/mocha/......`",3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-07 16:57:01,179922031,"@@ -4,7 +4,7 @@
   ""description"": ""Basic blockchain sprint built in javascript to teach general blockchain practices and structure"",
   ""main"": ""blockchain-intro-prompt.js"",
   ""scripts"": {
-    ""test"": ""echo \""Error: no test specified\"" && exit 1""
+    ""test"": ""../../node_modules/mocha/bin/mocha tests.js""",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/179922031,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r179922031,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,Yea that's way cleaner,3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-14 00:33:09,181534783,"@@ -4,7 +4,7 @@
   ""description"": ""Basic blockchain sprint built in javascript to teach general blockchain practices and structure"",
   ""main"": ""blockchain-intro-prompt.js"",
   ""scripts"": {
-    ""test"": ""echo \""Error: no test specified\"" && exit 1""
+    ""test"": ""../../node_modules/mocha/bin/mocha tests.js""",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181534783,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r181534783,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,I can put them in the beforeEach hooks. I had them there originally but felt like I had to reuse the same variables a couple times. I don't mind moving them if it creates a cleaner test environment.,3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-14 00:34:47,181534855,"@@ -0,0 +1,129 @@
+const chai = require('chai');
+const expect = chai.expect;
+const { hash } = require('./utils/helpers.js');
+const { Block, Blockchain, Transaction } = require('./blockchain.js');
+
+
+// Test transaction data
+const testFromAddress = hash('testFromAddress');
+const testToAddress = hash('testToAddress');
+const testAmount = '10.00';
+const transaction = new Transaction(
+  testFromAddress,
+  testToAddress,
+  testAmount
+);
+
+// Test blockchain data
+const blockchain = new Blockchain();
+const genesisBlock = blockchain.chain[0];
+const newBlock = new Block();
+const miningAddress = hash('miningAddress');",21,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181534855,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r181534855,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,The students will be filling these functions out. They are underscored only because other classes do not utilize them but I still think it's beneficial for students to fill in the functionality,3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-14 00:37:50,181534999,"@@ -0,0 +1,129 @@
+const chai = require('chai');
+const expect = chai.expect;
+const { hash } = require('./utils/helpers.js');
+const { Block, Blockchain, Transaction } = require('./blockchain.js');
+
+
+// Test transaction data
+const testFromAddress = hash('testFromAddress');
+const testToAddress = hash('testToAddress');
+const testAmount = '10.00';
+const transaction = new Transaction(
+  testFromAddress,
+  testToAddress,
+  testAmount
+);
+
+// Test blockchain data
+const blockchain = new Blockchain();
+const genesisBlock = blockchain.chain[0];
+const newBlock = new Block();
+const miningAddress = hash('miningAddress');
+let timesMined = 0;
+
+// Test block data
+const testHash = '0123TESTHASH';
+const testTransactions = [];
+const testNonce = 0;
+const now = Date.now();
+const block = new Block(now, testTransactions, testHash);
+const testDataHash = hash(
+  testHash + now + JSON.stringify(testTransactions) + testNonce
+);
+
+
+// Transaction tests
+describe('Transaction', () => {
+  it('Should create a transaction with all initial values', done => {
+    expect(transaction.fromAddress).to.equal(testFromAddress);
+    expect(transaction.toAddress).to.equal(testToAddress);
+    expect(transaction.amount).to.equal(testAmount);
+    done();
+  });
+});
+
+// Blockchain tests
+describe('Blockchain', () => {
+  it('Should create a blockchain with a genesis block', done => {
+    expect(blockchain).to.have.property('_createGenesisBlock');",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181534999,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r181534999,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,"No problem, I just took this directly from the hash function from your repo for consistencies sake.",3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-14 00:40:25,181535110,"@@ -0,0 +1,13 @@
+'use strict';
+
+const { createHash } = require('crypto');
+
+
+// Returns the first characters of a SHA-512 hash of a string
+const hash = (str, length = 128) => {",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181535110,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r181535110,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,I am not really sure how to make the initial hash more descriptive. Should I just generate a hash using the hash function and place any arbitrary string in there or what do you think?,3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-14 01:08:50,181536380,"@@ -0,0 +1,129 @@
+const chai = require('chai');
+const expect = chai.expect;
+const { hash } = require('./utils/helpers.js');
+const { Block, Blockchain, Transaction } = require('./blockchain.js');
+
+
+// Test transaction data
+const testFromAddress = hash('testFromAddress');
+const testToAddress = hash('testToAddress');
+const testAmount = '10.00';
+const transaction = new Transaction(
+  testFromAddress,
+  testToAddress,
+  testAmount
+);
+
+// Test blockchain data
+const blockchain = new Blockchain();
+const genesisBlock = blockchain.chain[0];
+const newBlock = new Block();
+const miningAddress = hash('miningAddress');
+let timesMined = 0;
+
+// Test block data
+const testHash = '0123TESTHASH';",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181536380,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r181536380,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,I dont really know how that happened lol,3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-14 01:11:28,181536498,"@@ -0,0 +1,215 @@
+{",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181536498,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r181536498,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,But why does it matter how the students implement the API if the API works correctly?,3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-14 05:45:04,181542947,"@@ -0,0 +1,129 @@
+const chai = require('chai');
+const expect = chai.expect;
+const { hash } = require('./utils/helpers.js');
+const { Block, Blockchain, Transaction } = require('./blockchain.js');
+
+
+// Test transaction data
+const testFromAddress = hash('testFromAddress');
+const testToAddress = hash('testToAddress');
+const testAmount = '10.00';
+const transaction = new Transaction(
+  testFromAddress,
+  testToAddress,
+  testAmount
+);
+
+// Test blockchain data
+const blockchain = new Blockchain();
+const genesisBlock = blockchain.chain[0];
+const newBlock = new Block();
+const miningAddress = hash('miningAddress');
+let timesMined = 0;
+
+// Test block data
+const testHash = '0123TESTHASH';
+const testTransactions = [];
+const testNonce = 0;
+const now = Date.now();
+const block = new Block(now, testTransactions, testHash);
+const testDataHash = hash(
+  testHash + now + JSON.stringify(testTransactions) + testNonce
+);
+
+
+// Transaction tests
+describe('Transaction', () => {
+  it('Should create a transaction with all initial values', done => {
+    expect(transaction.fromAddress).to.equal(testFromAddress);
+    expect(transaction.toAddress).to.equal(testToAddress);
+    expect(transaction.amount).to.equal(testAmount);
+    done();
+  });
+});
+
+// Blockchain tests
+describe('Blockchain', () => {
+  it('Should create a blockchain with a genesis block', done => {
+    expect(blockchain).to.have.property('_createGenesisBlock');",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181542947,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r181542947,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/36,https://github.com/hyperledger/education-cryptomoji/pull/36,"I just meant the variable name. To me, a hash is a general thing, but a ""previousHash"" is a specific component of a block. I don't care what the string itself is.",3186abd469c53eb8b9aecdd02cf4b589be1e19fc,2018-04-14 05:47:16,181542986,"@@ -0,0 +1,129 @@
+const chai = require('chai');
+const expect = chai.expect;
+const { hash } = require('./utils/helpers.js');
+const { Block, Blockchain, Transaction } = require('./blockchain.js');
+
+
+// Test transaction data
+const testFromAddress = hash('testFromAddress');
+const testToAddress = hash('testToAddress');
+const testAmount = '10.00';
+const transaction = new Transaction(
+  testFromAddress,
+  testToAddress,
+  testAmount
+);
+
+// Test blockchain data
+const blockchain = new Blockchain();
+const genesisBlock = blockchain.chain[0];
+const newBlock = new Block();
+const miningAddress = hash('miningAddress');
+let timesMined = 0;
+
+// Test block data
+const testHash = '0123TESTHASH';",,2018-05-03 18:21:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/181542986,https://github.com/hyperledger/education-cryptomoji/pull/36#discussion_r181542986,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/35,https://github.com/hyperledger/education-cryptomoji/pull/35,"I removed this because it violates the Airbnb React Style Guide.
https://github.com/airbnb/javascript/blob/master/react/README.md#class-vs-reactcreateclass-vs-stateless
> And if you don't have state or refs, prefer normal functions (not arrow functions) over classes:

```javascript
// bad
class Listing extends React.Component {
  render() {
    return <div>{this.props.hello}</div>;
  }
}

// bad (relying on function name inference is discouraged)
const Listing = ({ hello }) => (
  <div>{hello}</div>
);

// good
function Listing({ hello }) {
  return <div>{hello}</div>;
}
```

",a96e75bbb8065e7899298e95dfad614be613a0ac,2018-03-30 10:57:28,178272968,"@@ -16,7 +16,6 @@
     ""camelcase"": 2,
     ""curly"": 2,
     ""eqeqeq"": [2, ""smart""],
-    ""func-style"": [2, ""expression""],",4,2018-03-31 02:04:18,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178272968,https://github.com/hyperledger/education-cryptomoji/pull/35#discussion_r178272968,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/35,https://github.com/hyperledger/education-cryptomoji/pull/35,"What's ""function name inference"" and why does AirBnB consider it bad?",a96e75bbb8065e7899298e95dfad614be613a0ac,2018-04-02 17:10:08,178592177,"@@ -16,7 +16,6 @@
     ""camelcase"": 2,
     ""curly"": 2,
     ""eqeqeq"": [2, ""smart""],
-    ""func-style"": [2, ""expression""],",4,2018-04-02 17:45:09,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178592177,https://github.com/hyperledger/education-cryptomoji/pull/35#discussion_r178592177,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/35,https://github.com/hyperledger/education-cryptomoji/pull/35,"I wasn't able to `npm run live-server` because ""live-server: command not found"". Though `npm install --save-dev live-server` fixed it. Maybe you have it globally installed?

In any case, you can also serve this app with docker by running `docker-compose up` from `code/part-two/`. It will be served at `localhost:8000`. The important distinction here, is serving it with docker/apache will proxy the REST API to `localhost:8000/api`, making it available to the client without CORS issues.

I think _probably_ the README should reflect the apache approach, but if you're going to list the live-server option, it should probably be in the dev dependencies. ",a96e75bbb8065e7899298e95dfad614be613a0ac,2018-04-02 17:43:15,178600523,"@@ -0,0 +1,22 @@
+# Client
+
+## Development
+
+From this directory, 
+
+```bash
+npm install
+npm run build:dev
+```
+
+In another terminal instance,
+
+```bash
+npm run live-server",15,2018-04-02 17:45:09,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178600523,https://github.com/hyperledger/education-cryptomoji/pull/35#discussion_r178600523,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/35,https://github.com/hyperledger/education-cryptomoji/pull/35,"Ah yes, I forgot to include `live-server` in package.json! I was only using it to speed up my own development process while not working w/ the REST API as I didn't know how to configure docker/apache to do a live reload automatically. Makes me wonder now if there's some sort of livereload thing for webpack that I can enable when in a development environment? 🤔

I'm also voting for README to reflect Apache approach and will remove `live-server` from the README and npm scripts.",a96e75bbb8065e7899298e95dfad614be613a0ac,2018-04-02 19:11:56,178623346,"@@ -0,0 +1,22 @@
+# Client
+
+## Development
+
+From this directory, 
+
+```bash
+npm install
+npm run build:dev
+```
+
+In another terminal instance,
+
+```bash
+npm run live-server",15,2018-04-02 19:11:56,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178623346,https://github.com/hyperledger/education-cryptomoji/pull/35#discussion_r178623346,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/35,https://github.com/hyperledger/education-cryptomoji/pull/35,The `live-server` npm script will be removed.,a96e75bbb8065e7899298e95dfad614be613a0ac,2018-04-02 19:12:17,178623419,"@@ -0,0 +1,34 @@
+{
+  ""name"": ""cryptomoji-client"",
+  ""version"": ""1.0.0"",
+  ""description"": ""A React frontend for the Cryptomoji app"",
+  ""main"": ""source/index.js"",
+  ""scripts"": {
+    ""build:dev"": ""webpack --mode development -w"",
+    ""build:prod"": ""webpack --mode production"",
+    ""live-server"": ""live-server public --entry-file=public/index.html"",",9,2018-04-02 19:12:17,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178623419,https://github.com/hyperledger/education-cryptomoji/pull/35#discussion_r178623419,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/35,https://github.com/hyperledger/education-cryptomoji/pull/35,"I had no idea, so I dug up some resources!
* https://github.com/airbnb/javascript/issues/794
* https://stackoverflow.com/questions/37288950/why-does-the-airbnb-style-guide-say-that-relying-on-function-name-inference-is-d

Sooo anonymous functions don't have a name, so it's hard to debug when we see them show up in the call stack.
`const x = function () { }`

It's a lot better when the function is named, even if it's been assigned to a variable thereafter.
`const shortName = function longReallyDescriptiveName() { }`
(I hadn't actually seen this before... I like the idea!)

Thankfully, sometimes the function name is _inferred_ by transpilers/browsers where `const foo = function() { }` might be understood as `const foo = function foo(){ }`, but Airbnb style guide says that's bad bc explicit is better than implicit.

....after researching this, I personally don't care whether we prefer `function ComponentName{ }` or `const ComponentName = function() { }` for stateless components, but was just trying to be a good ""role model"" by doing what the style guide said. ¯\_(ツ)_/¯

@delventhalz Do you have a preference?",a96e75bbb8065e7899298e95dfad614be613a0ac,2018-04-02 23:33:59,178678441,"@@ -16,7 +16,6 @@
     ""camelcase"": 2,
     ""curly"": 2,
     ""eqeqeq"": [2, ""smart""],
-    ""func-style"": [2, ""expression""],",4,2018-04-02 23:33:59,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178678441,https://github.com/hyperledger/education-cryptomoji/pull/35#discussion_r178678441,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/35,https://github.com/hyperledger/education-cryptomoji/pull/35,"I've always considered function declarations to lead to errors and confusion, and naming functions you're also assigning to a variable to be redundant and messy (or confusing if you give them different names). I also don't think I've ever had an issue debugging them. So I always use anonymous function expressions, and that seems to be the norm, but I'm down with AirBnB if we want to go that route. I was just curious what their reasoning was.",a96e75bbb8065e7899298e95dfad614be613a0ac,2018-04-06 03:09:25,179651258,"@@ -16,7 +16,6 @@
     ""camelcase"": 2,
     ""curly"": 2,
     ""eqeqeq"": [2, ""smart""],
-    ""func-style"": [2, ""expression""],",4,2018-04-06 03:12:00,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/179651258,https://github.com/hyperledger/education-cryptomoji/pull/35#discussion_r179651258,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/35,https://github.com/hyperledger/education-cryptomoji/pull/35,"I've used `webpack-dev-server` before. Works okay. It's possible to proxy the API too. This setup is actually broken right now, but would work if the port was changed to `8021`:
https://github.com/hyperledger/sawtooth-supply-chain/blob/master/asset_client/webpack.config.js#L47",a96e75bbb8065e7899298e95dfad614be613a0ac,2018-04-06 03:23:53,179652473,"@@ -0,0 +1,22 @@
+# Client
+
+## Development
+
+From this directory, 
+
+```bash
+npm install
+npm run build:dev
+```
+
+In another terminal instance,
+
+```bash
+npm run live-server",15,2018-04-06 03:23:53,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/179652473,https://github.com/hyperledger/education-cryptomoji/pull/35#discussion_r179652473,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/35,https://github.com/hyperledger/education-cryptomoji/pull/35,"ARGH, the reason why I was having trouble w/ React Router's `<BrowserRouter />` was bc I didn't put the `/` before `/bundle.js`. Oops. #noobmistake

Will be fixed via incoming commit.",a96e75bbb8065e7899298e95dfad614be613a0ac,2018-04-06 04:56:05,179660294,"@@ -4,6 +4,7 @@
     <title>Cryptomoji</title>
   </head>
   <body>
-
+    <div id=""app""></div>
+    <script src=""bundle.js""></script>",6,2018-04-06 04:56:05,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/179660294,https://github.com/hyperledger/education-cryptomoji/pull/35#discussion_r179660294,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,These whitespace additions confuse the diff a bit. Would prefer they be rebased into the appropriate previous commits.,c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-22 21:43:52,176581364,"@@ -18,13 +18,13 @@ class Block {
       - transactions
       - the previous block's hash
   */
- constructor(timestamp, transactions, previousHash = '') {
-  this.timestamp = timestamp;
-  this.transactions = transactions;
-  this.previousHash = previousHash;
-  this.hash = this.calculateHash();
-  this._nonce = 0;
-}
+  constructor(timestamp, transactions, previousHash = '') {
+    this.timestamp = timestamp;
+    this.transactions = transactions;
+    this.previousHash = previousHash;",,2018-03-25 22:25:49,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/176581364,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r176581364,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,"This use of a template string seems problematic to me. Since the newlines and indents will be included in the string, if someone were to refactor the use of whitespace later, it would break the blockchain. I would prefer concatenation here.",c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-22 21:44:01,176581388,"@@ -41,14 +41,14 @@ class Block {
       - the previous hash
       - the block timestamp
   */
- calculateHash() {
-  return SHA512(`
-    ${this.previousHash}
-    ${this.timestamp}
-    ${JSON.stringify(this.transactions)}
-    ${this._nonce}
-  `).toString();
-}
+  calculateHash() {
+    return SHA512(`
+      ${this.previousHash}
+      ${this.timestamp}
+      ${JSON.stringify(this.transactions)}
+      ${this._nonce}
+    `).toString();",,2018-03-25 22:25:49,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/176581388,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r176581388,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,"Left this comment on an outdated diff, so I'll add it again here:

This use of a template string seems problematic to me. Since the newlines and indents will be included in the string, if someone were to refactor the use of whitespace later, it would change the hash and break the blockchain. I think concatenation would be preferable here.",c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-22 21:51:06,176583113,"@@ -31,16 +37,15 @@ class Block {
 
     **Hint**
     Unreplicable data can include
-      - the block index
+      - transactions
       - the previous hash
       - the block timestamp
   */
   calculateHash() {
     return SHA512(`
-      ${this.index}
       ${this.previousHash}
       ${this.timestamp}
-      ${JSON.stringify(this.data)}
+      ${JSON.stringify(this.transactions)}
       ${this._nonce}
     `).toString();",,2018-03-25 22:25:49,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/176583113,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r176583113,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,I don't think we want to use Date's default `toString` method. It's very big storage wise and not particularly standard. `toISOString` or just `Date.now()` would be more appropriate (unless there is a compelling educational reason to use `toString`). ,c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-28 15:53:23,177799322,"@@ -81,7 +84,7 @@ class Blockchain {
     - Add functionality to create an initial block
   */
   _createGenesisBlock() {
-    return new Block(0, (new Date()).toString(), 'Genesis Block', '0');
+    return new Block((new Date()).toString(), 'Genesis Block', '0');",77,2018-03-28 16:12:09,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/177799322,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r177799322,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,"I don't know if there is a compelling reason to give `previousHash` a default value. If there is, why not `transactions` too? Also, those defaults should probably be whatever the genesis block values are if anything, but I think I prefer to keep that logic in `Blockchain` and just say no defaults.",c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-28 15:58:57,177801051,"@@ -1,27 +1,33 @@
 let SHA512 = require('crypto-js/sha512');
 
+class Transaction {
+  constructor(fromAddress, toAddress, amount) {
+    this.fromAddress = fromAddress;
+    this.toAddress = toAddress;
+    this.amount = amount;
+  }
+}
+
 class Block {
   /*
     Initialize the block constructor
 
     **Note**
     The block should be initiated with
-      - an index
       - a timestamp
-      - the stored data
+      - transactions
       - the previous block's hash
   */
-  constructor(index, timestamp, data, previousHash = '') {
-    this.index = index;
+  constructor(timestamp, transactions, previousHash = '') {",25,2018-03-28 16:12:09,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/177801051,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r177801051,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,"Probably better to use Node's `crypto` library rather than pulling in a new dependency. It's what I used in `part-two`:
https://github.com/hyperledger/education-cryptomoji/blob/master/code/part-two/processor/utils/helpers.js#L8

Whichever approach we go with, I definitely think it should be consistent across both part-one and part-two.",c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-28 16:01:03,177801704,"@@ -1,27 +1,33 @@
 let SHA512 = require('crypto-js/sha512');",1,2018-03-28 16:12:09,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/177801704,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r177801704,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,"Also, we should probably pass an empty array not the string `'Genesis Block'` for transactions. A script that iterates through the transactions in each block would either break or be very confused when it found 13 transactions with the values `'G'`, `'e'`, `'n'` . . . . ",c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-28 16:02:06,177802071,"@@ -81,7 +84,7 @@ class Blockchain {
     - Add functionality to create an initial block
   */
   _createGenesisBlock() {
-    return new Block(0, (new Date()).toString(), 'Genesis Block', '0');
+    return new Block((new Date()).toString(), 'Genesis Block', '0');",77,2018-03-28 16:12:09,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/177802071,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r177802071,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,"Also, also, what is the reasoning behind using `'0'` as the previousHash value for the genesis block? Why not `null` or `''`, or `'000000000000'` if we wanted something a little more specific than just `null`?",c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-28 16:04:29,177802843,"@@ -81,7 +84,7 @@ class Blockchain {
     - Add functionality to create an initial block
   */
   _createGenesisBlock() {
-    return new Block(0, (new Date()).toString(), 'Genesis Block', '0');
+    return new Block((new Date()).toString(), 'Genesis Block', '0');",77,2018-03-28 16:12:09,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/177802843,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r177802843,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,"`addTransaction`? 

The verb `create` is confusing to me since you have create the transaction separately.",c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-28 16:05:59,177803312,"@@ -94,17 +97,54 @@ class Blockchain {
   }
 
   /*
-    Add a new block to the blockchain:
+    Add a new block to the blockchain based on pending transactions:
 
     Create function that:
       - Adds previousHash property to new block
       - Create hash (or mine block)
       - Adds block to the chain
+      - Creates new pending transaction for mining reward
+  */
+  minePendingTransactions(miningRewardAddress) {
+    let block = new Block(
+      Date.now(), this.pendingTransactions, this.getLatestBlock().hash);
+    block.mineBlock(this._difficulty);
+
+    console.log('Block has been mined.');
+    this.chain.push(block);
+    
+    this.pendingTransactions = [
+      /*
+        Mining rewards do not come from any specific address
+        and instead are awarded directly from the chain itself.
+      */
+      new Transaction(null, miningRewardAddress, this.miningReward)
+    ];
+  }
+
+  createTransaction(transaction) {",111,2018-03-28 16:12:09,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/177803312,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r177803312,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,"Shouldn't the reward transaction be part of the mined block? If it is pending, you have no guarantee you'll get it.",c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-28 16:10:05,177804681,"@@ -94,17 +97,54 @@ class Blockchain {
   }
 
   /*
-    Add a new block to the blockchain:
+    Add a new block to the blockchain based on pending transactions:
 
     Create function that:
       - Adds previousHash property to new block
       - Create hash (or mine block)
       - Adds block to the chain
+      - Creates new pending transaction for mining reward
+  */
+  minePendingTransactions(miningRewardAddress) {
+    let block = new Block(
+      Date.now(), this.pendingTransactions, this.getLatestBlock().hash);
+    block.mineBlock(this._difficulty);
+
+    console.log('Block has been mined.');
+    this.chain.push(block);
+    
+    this.pendingTransactions = [
+      /*
+        Mining rewards do not come from any specific address
+        and instead are awarded directly from the chain itself.
+      */
+      new Transaction(null, miningRewardAddress, this.miningReward)",107,2018-03-28 16:12:09,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/177804681,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r177804681,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,Refactored,c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-31 03:08:41,178421693,"@@ -81,7 +84,7 @@ class Blockchain {
     - Add functionality to create an initial block
   */
   _createGenesisBlock() {
-    return new Block(0, (new Date()).toString(), 'Genesis Block', '0');
+    return new Block((new Date()).toString(), 'Genesis Block', '0');",77,2018-03-31 03:08:41,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178421693,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r178421693,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,Integrated helpers into part one as well,c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-31 03:54:03,178422356,"@@ -1,27 +1,33 @@
 let SHA512 = require('crypto-js/sha512');",1,2018-03-31 03:54:03,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178422356,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r178422356,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,Changed to addTransaction,c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-31 03:54:14,178422360,"@@ -94,17 +97,54 @@ class Blockchain {
   }
 
   /*
-    Add a new block to the blockchain:
+    Add a new block to the blockchain based on pending transactions:
 
     Create function that:
       - Adds previousHash property to new block
       - Create hash (or mine block)
       - Adds block to the chain
+      - Creates new pending transaction for mining reward
+  */
+  minePendingTransactions(miningRewardAddress) {
+    let block = new Block(
+      Date.now(), this.pendingTransactions, this.getLatestBlock().hash);
+    block.mineBlock(this._difficulty);
+
+    console.log('Block has been mined.');
+    this.chain.push(block);
+    
+    this.pendingTransactions = [
+      /*
+        Mining rewards do not come from any specific address
+        and instead are awarded directly from the chain itself.
+      */
+      new Transaction(null, miningRewardAddress, this.miningReward)
+    ];
+  }
+
+  createTransaction(transaction) {",111,2018-03-31 03:54:14,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178422360,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r178422360,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/33,https://github.com/hyperledger/education-cryptomoji/pull/33,Refactored,c0d88b3b48cef6746c2c3b5d9861b1619ca6edb5,2018-03-31 03:54:24,178422364,"@@ -94,17 +97,54 @@ class Blockchain {
   }
 
   /*
-    Add a new block to the blockchain:
+    Add a new block to the blockchain based on pending transactions:
 
     Create function that:
       - Adds previousHash property to new block
       - Create hash (or mine block)
       - Adds block to the chain
+      - Creates new pending transaction for mining reward
+  */
+  minePendingTransactions(miningRewardAddress) {
+    let block = new Block(
+      Date.now(), this.pendingTransactions, this.getLatestBlock().hash);
+    block.mineBlock(this._difficulty);
+
+    console.log('Block has been mined.');
+    this.chain.push(block);
+    
+    this.pendingTransactions = [
+      /*
+        Mining rewards do not come from any specific address
+        and instead are awarded directly from the chain itself.
+      */
+      new Transaction(null, miningRewardAddress, this.miningReward)",107,2018-03-31 03:54:24,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/178422364,https://github.com/hyperledger/education-cryptomoji/pull/33#discussion_r178422364,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/32,https://github.com/hyperledger/education-cryptomoji/pull/32,"@delventhalz Thoughts on having all of the custom error messages for `expect` be ""should"" statements (like on line 34)?

eg, `Transaction was not rejected` -> `Transaction should be rejected`

If you like this idea, I saw some opportunities to apply it on a few lines in `01-CreateCollection.js` as well! Otherwise everything else lgtm.",dcb0c25d974344edf2c50b29ebc364a9ccaf385f,2018-03-19 23:24:37,175616233,"@@ -0,0 +1,54 @@
+'use strict';
+
+const expect = require('chai').expect;
+const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
+
+const MojiHandler = require('../handler').MojiHandler;
+const Txn = require('./mocks/txn');
+const Context = require('./mocks/context');
+
+
+describe('Core MojiHandler Behavior', function() {
+  let handler = null;
+  let context = null;
+
+  before(function() {
+    handler = new MojiHandler();
+  });
+
+  beforeEach(function() {
+    context = new Context();
+  });
+
+  it('should return a Promise', function() {
+    const txn = new Txn({ hello: 'world' });
+    expect(handler.apply(txn, context)).to.be.an.instanceOf(Promise);
+  });
+
+  it('should reject a poorly encoded payload', function() {
+    const txn = new Txn({});
+    txn.payload = Buffer.from({ hello: 'world' }.toString());
+
+    return handler.apply(txn, context)
+      .catch(err => {
+        expect(err, 'Error should be an InvalidTransaction')
+          .to.be.instanceOf(InvalidTransaction);
+        return true;
+      })
+      .then(wasRejected => {
+        expect(wasRejected, 'Transaction was not rejected').to.be.true;",,2018-03-22 20:52:53,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/175616233,https://github.com/hyperledger/education-cryptomoji/pull/32#discussion_r175616233,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/32,https://github.com/hyperledger/education-cryptomoji/pull/32,Just wondering why you didn't use es6 template strings. Don't mind either way jw.,dcb0c25d974344edf2c50b29ebc364a9ccaf385f,2018-03-20 02:35:30,175640954,"@@ -0,0 +1,24 @@
+'use strict';
+
+const { NAMESPACE } = require('../utils/constants');
+const { hash, encode, reject } = require('../utils/helpers');
+
+
+module.exports = (context, publicKey) => {
+  const address = NAMESPACE + '01' + hash(publicKey, 62);",,2018-03-22 20:52:53,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/175640954,https://github.com/hyperledger/education-cryptomoji/pull/32#discussion_r175640954,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/32,https://github.com/hyperledger/education-cryptomoji/pull/32,this might be an opportunity to apply destructuring more consistently. (line 3 as well.) also applies to other files,dcb0c25d974344edf2c50b29ebc364a9ccaf385f,2018-03-20 18:27:42,175876809,"@@ -0,0 +1,54 @@
+'use strict';
+
+const expect = require('chai').expect;
+const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
+
+const MojiHandler = require('../handler').MojiHandler;",,2018-03-22 20:52:53,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/175876809,https://github.com/hyperledger/education-cryptomoji/pull/32#discussion_r175876809,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/32,https://github.com/hyperledger/education-cryptomoji/pull/32,"Hrmm, yes, that is very inconsistent. I was trying to avoid destructuring to cut down on ES6 syntax for the students. I think I finally gave in on InvalidTransaction, because it ends up being over 80 characters without it. I'll let you make the call. Everything destructured, or everything dot notation?",dcb0c25d974344edf2c50b29ebc364a9ccaf385f,2018-03-22 04:03:06,176303537,"@@ -0,0 +1,54 @@
+'use strict';
+
+const expect = require('chai').expect;
+const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
+
+const MojiHandler = require('../handler').MojiHandler;",,2018-03-22 20:52:53,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/176303537,https://github.com/hyperledger/education-cryptomoji/pull/32#discussion_r176303537,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/32,https://github.com/hyperledger/education-cryptomoji/pull/32,"Just trying to cut down on ES6 syntax (other than let, const and arrow functions). If @therobinkim is of the opinion that template strings won't be an impediment to students, I will def use them.",dcb0c25d974344edf2c50b29ebc364a9ccaf385f,2018-03-22 04:04:54,176303715,"@@ -0,0 +1,24 @@
+'use strict';
+
+const { NAMESPACE } = require('../utils/constants');
+const { hash, encode, reject } = require('../utils/helpers');
+
+
+module.exports = (context, publicKey) => {
+  const address = NAMESPACE + '01' + hash(publicKey, 62);",,2018-03-22 20:52:53,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/176303715,https://github.com/hyperledger/education-cryptomoji/pull/32#discussion_r176303715,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/32,https://github.com/hyperledger/education-cryptomoji/pull/32,@delventhalz 👍 for template strings!,dcb0c25d974344edf2c50b29ebc364a9ccaf385f,2018-03-22 05:06:19,176309194,"@@ -0,0 +1,24 @@
+'use strict';
+
+const { NAMESPACE } = require('../utils/constants');
+const { hash, encode, reject } = require('../utils/helpers');
+
+
+module.exports = (context, publicKey) => {
+  const address = NAMESPACE + '01' + hash(publicKey, 62);",,2018-03-22 20:52:53,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/176309194,https://github.com/hyperledger/education-cryptomoji/pull/32#discussion_r176309194,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/32,https://github.com/hyperledger/education-cryptomoji/pull/32,@delventhalz I guess we might as well go everything destructured; maybe we can include a link to http://es6-features.org/ (or similar) in the `README` later if we feel like it's necessary,dcb0c25d974344edf2c50b29ebc364a9ccaf385f,2018-03-22 05:08:02,176309370,"@@ -0,0 +1,54 @@
+'use strict';
+
+const expect = require('chai').expect;
+const { InvalidTransaction } = require('sawtooth-sdk/processor/exceptions');
+
+const MojiHandler = require('../handler').MojiHandler;",,2018-03-22 20:52:53,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/176309370,https://github.com/hyperledger/education-cryptomoji/pull/32#discussion_r176309370,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/32,https://github.com/hyperledger/education-cryptomoji/pull/32,"After looking at it as a template string, I have decided that this is a case where they actually make things less readable not more, and have left it as a concatenated string.

```javascript
`${NAMESPACE}01${hash(publicKey, 62)}`
```",dcb0c25d974344edf2c50b29ebc364a9ccaf385f,2018-03-22 20:55:42,176569540,"@@ -0,0 +1,24 @@
+'use strict';
+
+const { NAMESPACE } = require('../utils/constants');
+const { hash, encode, reject } = require('../utils/helpers');
+
+
+module.exports = (context, publicKey) => {
+  const address = NAMESPACE + '01' + hash(publicKey, 62);",,2018-03-22 20:55:43,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/176569540,https://github.com/hyperledger/education-cryptomoji/pull/32#discussion_r176569540,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,Missing newline at end of file.,a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-07 18:39:50,172943055,"@@ -0,0 +1,2 @@
+# Node modules
+intro/node_modules",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/172943055,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r172943055,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,"Also, we probably want to move more comprehensive `.gitignore` at some point. With that in mind, `node_modules/` is probably more appropriate than `intro/node_modules`.",a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-07 18:43:30,172944225,"@@ -0,0 +1,2 @@
+# Node modules
+intro/node_modules",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/172944225,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r172944225,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,"Fwiw, Sawtooth uses SHA-512 hashes exclusively, so I also stuck to SHA-512 hashes in my Cryptomoji design for consistency's sake.",a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-07 18:45:34,172944891,"@@ -0,0 +1,104 @@
+var SHA256 = require('crypto-js/sha256');",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/172944891,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r172944891,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,"I am confused by this wording/concept of data being ""unreplicable"". Any data is replicable. What a hash will do is notify you if the data has been modified.",a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-07 19:34:51,172959838,"@@ -0,0 +1,104 @@
+var SHA256 = require('crypto-js/sha256');
+
+// Block class
+function Block() {
+    this._nonce = 0;
+    /*
+        Initialize the block constructor
+
+        **Note**
+        The block should be initiated with
+            - an index
+            - a timestamp
+            - the stored data
+            - the previous block's hash
+    */
+
+   // Calculate a hash based on data supplied to block
+   calculateHash = function () {
+       /*
+           Add functionality to return a hash by passing a compiled string into the SHA256 hashing function
+           The string that is passed in should contain specific data about the block that would be impossible to replicate
+
+           **Hint**
+           Unreplicable data can include",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/172959838,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r172959838,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,Is this function needed if we are skipping consensus?,a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-07 19:47:56,172963516,"@@ -0,0 +1,104 @@
+var SHA256 = require('crypto-js/sha256');
+
+// Block class
+function Block() {
+    this._nonce = 0;
+    /*
+        Initialize the block constructor
+
+        **Note**
+        The block should be initiated with
+            - an index
+            - a timestamp
+            - the stored data
+            - the previous block's hash
+    */
+
+   // Calculate a hash based on data supplied to block
+   calculateHash = function () {
+       /*
+           Add functionality to return a hash by passing a compiled string into the SHA256 hashing function
+           The string that is passed in should contain specific data about the block that would be impossible to replicate
+
+           **Hint**
+           Unreplicable data can include
+               - the block index
+               - the previous hash
+               - the block timestamp
+       */
+       return SHA256('hash');
+   };
+
+   // Mine block by difficulty
+   mineBlock = function (difficulty) {",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/172963516,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r172963516,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,"It is probably impossible to adequately explain this concept without some sort of supplementary material, but for what it's worth, I had a lot of trouble following this comment, and would not have been able to implement this method based on it.",a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-07 19:48:31,172963687,"@@ -0,0 +1,104 @@
+var SHA256 = require('crypto-js/sha256');
+
+// Block class
+function Block() {
+    this._nonce = 0;
+    /*
+        Initialize the block constructor
+
+        **Note**
+        The block should be initiated with
+            - an index
+            - a timestamp
+            - the stored data
+            - the previous block's hash
+    */
+
+   // Calculate a hash based on data supplied to block
+   calculateHash = function () {
+       /*
+           Add functionality to return a hash by passing a compiled string into the SHA256 hashing function
+           The string that is passed in should contain specific data about the block that would be impossible to replicate
+
+           **Hint**
+           Unreplicable data can include
+               - the block index
+               - the previous hash
+               - the block timestamp
+       */
+       return SHA256('hash');
+   };
+
+   // Mine block by difficulty
+   mineBlock = function (difficulty) {
+       var mined = false;
+       while (false) {
+           /*
+               In order to mine using proof of work the calculateHash function needs to incorporate the nonce
+               The nonce should increase everytime the function loops until the number of zeros at the beginning of the hash
+               matches the number that is passed in (difficulty)
+               The stored hash should be updated everytime the nonce increases",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/172963687,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r172963687,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,"Should be `validateChain`, or maybe `isValidChain`",a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-07 19:52:11,172964765,"@@ -0,0 +1,104 @@
+var SHA256 = require('crypto-js/sha256');
+
+// Block class
+function Block() {
+    this._nonce = 0;
+    /*
+        Initialize the block constructor
+
+        **Note**
+        The block should be initiated with
+            - an index
+            - a timestamp
+            - the stored data
+            - the previous block's hash
+    */
+
+   // Calculate a hash based on data supplied to block
+   calculateHash = function () {
+       /*
+           Add functionality to return a hash by passing a compiled string into the SHA256 hashing function
+           The string that is passed in should contain specific data about the block that would be impossible to replicate
+
+           **Hint**
+           Unreplicable data can include
+               - the block index
+               - the previous hash
+               - the block timestamp
+       */
+       return SHA256('hash');
+   };
+
+   // Mine block by difficulty
+   mineBlock = function (difficulty) {
+       var mined = false;
+       while (false) {
+           /*
+               In order to mine using proof of work the calculateHash function needs to incorporate the nonce
+               The nonce should increase everytime the function loops until the number of zeros at the beginning of the hash
+               matches the number that is passed in (difficulty)
+               The stored hash should be updated everytime the nonce increases
+           */
+           mined = true;
+       }
+       mined ? console.log('Block mined' + ' ' + this.hash) : console.log('Error');
+   };
+
+   // Inititalize using methods
+   (function init() {
+        this.hash = this.calculateHash();
+    }.bind(this))();
+}
+
+// Blockchain class
+function Blockchain() {
+    this.chain = [];
+    this._difficulty = 2;
+
+    // Create the initial block for the blockchain
+    _createGenesisBlock = function () {
+        /* Add functionality to create an initial block */
+    };
+
+    // Get the last created block
+    getLatestBlock = function () {
+        /* Add functionality to get the latest block in the chain */
+    };
+
+    // Add a new block to the blockchain
+    addBlock = function (newBlock) {
+        /*
+            Create function that:
+                - Adds previousHash property to new block
+                - Create hash (or mine block)
+                - Adds block to the chain
+        */
+    };
+
+    // Check if the chain is valid
+    validChain = function () {",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/172964765,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r172964765,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,License should be Apache 2.0,a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-07 21:14:10,172986538,"@@ -0,0 +1,14 @@
+{
+  ""name"": ""blockchain-intro"",
+  ""version"": ""1.0.0"",
+  ""description"": ""Basic blockchain sprint built in javascript to teach general blockchain practices and structure"",
+  ""main"": ""blockchain-intro-prompt.js"",
+  ""scripts"": {
+    ""test"": ""echo \""Error: no test specified\"" && exit 1""
+  },
+  ""author"": """",
+  ""license"": ""ISC"",",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/172986538,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r172986538,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,"Unfortunately, if you just `JSON.stringify` the data, it will be non-deterministic, and you won't get the same hash every time. You can pass in a sorted array of keys as the second parameter to sort the final JSON string. It must include _every_ key, including those of nested objects, or those keys will be omitted from the string.

We could do this manually in our solution code, or we could import this library instead of using `JSON.stringify`: 
https://github.com/substack/json-stable-stringify ",a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-08 11:29:26,173133191,"@@ -0,0 +1,74 @@
+const SHA256 = require('crypto-js/sha256');
+
+// Block class
+function Block(index, timestamp, data, previousHash) {
+    this.index = index;
+    this.timestamp = timestamp;
+    this.data = data;
+    this.previousHash = previousHash;
+    this._nonce = 0;
+    this.hash = '';
+    
+    // Calculate a hash based on data supplied to block
+    this.calculateHash = function () {
+        return SHA256("""" + this.index + this.previousHash + this.timestamp + JSON.stringify(this.data) + this._nonce).toString();",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/173133191,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r173133191,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,I would say it still makes sense to have them use some kind of mining function with difficulty so they can get the idea of how a nonce value + the rest of the blocks data get hashed and how difficulty works in practice.,a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-09 14:40:29,173467115,"@@ -0,0 +1,104 @@
+var SHA256 = require('crypto-js/sha256');
+
+// Block class
+function Block() {
+    this._nonce = 0;
+    /*
+        Initialize the block constructor
+
+        **Note**
+        The block should be initiated with
+            - an index
+            - a timestamp
+            - the stored data
+            - the previous block's hash
+    */
+
+   // Calculate a hash based on data supplied to block
+   calculateHash = function () {
+       /*
+           Add functionality to return a hash by passing a compiled string into the SHA256 hashing function
+           The string that is passed in should contain specific data about the block that would be impossible to replicate
+
+           **Hint**
+           Unreplicable data can include
+               - the block index
+               - the previous hash
+               - the block timestamp
+       */
+       return SHA256('hash');
+   };
+
+   // Mine block by difficulty
+   mineBlock = function (difficulty) {",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/173467115,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r173467115,lsavage92
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,Updated,a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-10 16:32:08,173626871,"@@ -0,0 +1,14 @@
+{
+  ""name"": ""blockchain-intro"",
+  ""version"": ""1.0.0"",
+  ""description"": ""Basic blockchain sprint built in javascript to teach general blockchain practices and structure"",
+  ""main"": ""blockchain-intro-prompt.js"",
+  ""scripts"": {
+    ""test"": ""echo \""Error: no test specified\"" && exit 1""
+  },
+  ""author"": """",
+  ""license"": ""ISC"",",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/173626871,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r173626871,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,Updated,a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-10 16:32:14,173626873,"@@ -0,0 +1,104 @@
+var SHA256 = require('crypto-js/sha256');
+
+// Block class
+function Block() {
+    this._nonce = 0;
+    /*
+        Initialize the block constructor
+
+        **Note**
+        The block should be initiated with
+            - an index
+            - a timestamp
+            - the stored data
+            - the previous block's hash
+    */
+
+   // Calculate a hash based on data supplied to block
+   calculateHash = function () {
+       /*
+           Add functionality to return a hash by passing a compiled string into the SHA256 hashing function
+           The string that is passed in should contain specific data about the block that would be impossible to replicate
+
+           **Hint**
+           Unreplicable data can include
+               - the block index
+               - the previous hash
+               - the block timestamp
+       */
+       return SHA256('hash');
+   };
+
+   // Mine block by difficulty
+   mineBlock = function (difficulty) {
+       var mined = false;
+       while (false) {
+           /*
+               In order to mine using proof of work the calculateHash function needs to incorporate the nonce
+               The nonce should increase everytime the function loops until the number of zeros at the beginning of the hash
+               matches the number that is passed in (difficulty)
+               The stored hash should be updated everytime the nonce increases
+           */
+           mined = true;
+       }
+       mined ? console.log('Block mined' + ' ' + this.hash) : console.log('Error');
+   };
+
+   // Inititalize using methods
+   (function init() {
+        this.hash = this.calculateHash();
+    }.bind(this))();
+}
+
+// Blockchain class
+function Blockchain() {
+    this.chain = [];
+    this._difficulty = 2;
+
+    // Create the initial block for the blockchain
+    _createGenesisBlock = function () {
+        /* Add functionality to create an initial block */
+    };
+
+    // Get the last created block
+    getLatestBlock = function () {
+        /* Add functionality to get the latest block in the chain */
+    };
+
+    // Add a new block to the blockchain
+    addBlock = function (newBlock) {
+        /*
+            Create function that:
+                - Adds previousHash property to new block
+                - Create hash (or mine block)
+                - Adds block to the chain
+        */
+    };
+
+    // Check if the chain is valid
+    validChain = function () {",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/173626873,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r173626873,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,Updated,a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-10 16:33:28,173626910,"@@ -0,0 +1,104 @@
+var SHA256 = require('crypto-js/sha256');",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/173626910,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r173626910,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,"I agree, not the best explanation. I sort of just wanted to put something on the table to motivate a discussion; possibly a better way to explain it, or if we even need it at all?",a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-10 17:08:00,173627843,"@@ -0,0 +1,104 @@
+var SHA256 = require('crypto-js/sha256');
+
+// Block class
+function Block() {
+    this._nonce = 0;
+    /*
+        Initialize the block constructor
+
+        **Note**
+        The block should be initiated with
+            - an index
+            - a timestamp
+            - the stored data
+            - the previous block's hash
+    */
+
+   // Calculate a hash based on data supplied to block
+   calculateHash = function () {
+       /*
+           Add functionality to return a hash by passing a compiled string into the SHA256 hashing function
+           The string that is passed in should contain specific data about the block that would be impossible to replicate
+
+           **Hint**
+           Unreplicable data can include
+               - the block index
+               - the previous hash
+               - the block timestamp
+       */
+       return SHA256('hash');
+   };
+
+   // Mine block by difficulty
+   mineBlock = function (difficulty) {
+       var mined = false;
+       while (false) {
+           /*
+               In order to mine using proof of work the calculateHash function needs to incorporate the nonce
+               The nonce should increase everytime the function loops until the number of zeros at the beginning of the hash
+               matches the number that is passed in (difficulty)
+               The stored hash should be updated everytime the nonce increases",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/173627843,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r173627843,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,"this might be a fun opportunity to use `Array.prototype.every`!
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every

eg, `return this.chain.every(isValidBlock);` (where `isValidBlock` would be an inline function or a separate helper function)",a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-10 19:31:23,173632338,"@@ -0,0 +1,69 @@
+let SHA512 = require('crypto-js/sha512');
+
+class Block {
+  constructor(index, timestamp, data, previousHash = '') {
+    this.index = index;
+    this.timestamp = timestamp;
+    this.data = data;
+    this.previousHash = previousHash;
+    this.hash = this.calculateHash();
+    this._nonce = 0;
+  }
+
+  // Calculate a hash based on data supplied to block
+  calculateHash() {
+    return SHA512(`${this.index}${this.previousHash}${this.timestamp}${JSON.stringify(this.data)}${this._nonce}`).toString();
+  }
+
+  // Mine block by difficulty
+  mineBlock(difficulty) {
+    console.log('Mining block...');
+    while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join('0')) {
+      this._nonce++;
+      this.hash = this.calculateHash();
+    }
+    console.log(`${'Block mined'} ${this.hash}`);
+  }
+}
+
+class Blockchain {
+  constructor() {
+    this.chain = [this._createGenesisBlock()];
+    this._difficulty = 3;
+  }
+
+  // Create the initial block for the blockchain
+  _createGenesisBlock() {
+    return new Block(0, (new Date()).toString(), 'Genesis Block', '0');
+  }
+
+  // Get the last created block
+  getLatestBlock() {
+    return this.chain[this.chain.length - 1];
+  }
+
+  // Add a new block to the blockchain
+  addBlock(newBlock) {
+    newBlock.previousHash = this.getLatestBlock().hash;
+    newBlock.mineBlock(this._difficulty);
+    this.chain.push(newBlock);
+  }
+
+  // Check if the chain is valid
+  isValidChain() {
+    let validity = true;
+
+    this.chain.forEach((block, i) => {",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/173632338,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r173632338,therobinkim
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,Hooray for new native Array methods!,a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-11 01:50:28,173640673,"@@ -0,0 +1,69 @@
+let SHA512 = require('crypto-js/sha512');
+
+class Block {
+  constructor(index, timestamp, data, previousHash = '') {
+    this.index = index;
+    this.timestamp = timestamp;
+    this.data = data;
+    this.previousHash = previousHash;
+    this.hash = this.calculateHash();
+    this._nonce = 0;
+  }
+
+  // Calculate a hash based on data supplied to block
+  calculateHash() {
+    return SHA512(`${this.index}${this.previousHash}${this.timestamp}${JSON.stringify(this.data)}${this._nonce}`).toString();
+  }
+
+  // Mine block by difficulty
+  mineBlock(difficulty) {
+    console.log('Mining block...');
+    while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join('0')) {
+      this._nonce++;
+      this.hash = this.calculateHash();
+    }
+    console.log(`${'Block mined'} ${this.hash}`);
+  }
+}
+
+class Blockchain {
+  constructor() {
+    this.chain = [this._createGenesisBlock()];
+    this._difficulty = 3;
+  }
+
+  // Create the initial block for the blockchain
+  _createGenesisBlock() {
+    return new Block(0, (new Date()).toString(), 'Genesis Block', '0');
+  }
+
+  // Get the last created block
+  getLatestBlock() {
+    return this.chain[this.chain.length - 1];
+  }
+
+  // Add a new block to the blockchain
+  addBlock(newBlock) {
+    newBlock.previousHash = this.getLatestBlock().hash;
+    newBlock.mineBlock(this._difficulty);
+    this.chain.push(newBlock);
+  }
+
+  // Check if the chain is valid
+  isValidChain() {
+    let validity = true;
+
+    this.chain.forEach((block, i) => {",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/173640673,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r173640673,delventhalz
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,Oh nice. I wasn't even aware of this method,a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-11 16:42:28,173661173,"@@ -0,0 +1,69 @@
+let SHA512 = require('crypto-js/sha512');
+
+class Block {
+  constructor(index, timestamp, data, previousHash = '') {
+    this.index = index;
+    this.timestamp = timestamp;
+    this.data = data;
+    this.previousHash = previousHash;
+    this.hash = this.calculateHash();
+    this._nonce = 0;
+  }
+
+  // Calculate a hash based on data supplied to block
+  calculateHash() {
+    return SHA512(`${this.index}${this.previousHash}${this.timestamp}${JSON.stringify(this.data)}${this._nonce}`).toString();
+  }
+
+  // Mine block by difficulty
+  mineBlock(difficulty) {
+    console.log('Mining block...');
+    while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join('0')) {
+      this._nonce++;
+      this.hash = this.calculateHash();
+    }
+    console.log(`${'Block mined'} ${this.hash}`);
+  }
+}
+
+class Blockchain {
+  constructor() {
+    this.chain = [this._createGenesisBlock()];
+    this._difficulty = 3;
+  }
+
+  // Create the initial block for the blockchain
+  _createGenesisBlock() {
+    return new Block(0, (new Date()).toString(), 'Genesis Block', '0');
+  }
+
+  // Get the last created block
+  getLatestBlock() {
+    return this.chain[this.chain.length - 1];
+  }
+
+  // Add a new block to the blockchain
+  addBlock(newBlock) {
+    newBlock.previousHash = this.getLatestBlock().hash;
+    newBlock.mineBlock(this._difficulty);
+    this.chain.push(newBlock);
+  }
+
+  // Check if the chain is valid
+  isValidChain() {
+    let validity = true;
+
+    this.chain.forEach((block, i) => {",,2018-03-11 17:24:07,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/173661173,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r173661173,taylorpage
https://github.com/hyperledger/education-cryptomoji/pull/21,https://github.com/hyperledger/education-cryptomoji/pull/21,Updated,a70477bccc4616128999b1688f7b2ca87df3376c,2018-03-11 17:24:51,173662459,"@@ -0,0 +1,69 @@
+let SHA512 = require('crypto-js/sha512');
+
+class Block {
+  constructor(index, timestamp, data, previousHash = '') {
+    this.index = index;
+    this.timestamp = timestamp;
+    this.data = data;
+    this.previousHash = previousHash;
+    this.hash = this.calculateHash();
+    this._nonce = 0;
+  }
+
+  // Calculate a hash based on data supplied to block
+  calculateHash() {
+    return SHA512(`${this.index}${this.previousHash}${this.timestamp}${JSON.stringify(this.data)}${this._nonce}`).toString();
+  }
+
+  // Mine block by difficulty
+  mineBlock(difficulty) {
+    console.log('Mining block...');
+    while (this.hash.substring(0, difficulty) !== Array(difficulty + 1).join('0')) {
+      this._nonce++;
+      this.hash = this.calculateHash();
+    }
+    console.log(`${'Block mined'} ${this.hash}`);
+  }
+}
+
+class Blockchain {
+  constructor() {
+    this.chain = [this._createGenesisBlock()];
+    this._difficulty = 3;
+  }
+
+  // Create the initial block for the blockchain
+  _createGenesisBlock() {
+    return new Block(0, (new Date()).toString(), 'Genesis Block', '0');
+  }
+
+  // Get the last created block
+  getLatestBlock() {
+    return this.chain[this.chain.length - 1];
+  }
+
+  // Add a new block to the blockchain
+  addBlock(newBlock) {
+    newBlock.previousHash = this.getLatestBlock().hash;
+    newBlock.mineBlock(this._difficulty);
+    this.chain.push(newBlock);
+  }
+
+  // Check if the chain is valid
+  isValidChain() {
+    let validity = true;
+
+    this.chain.forEach((block, i) => {",,2018-03-11 17:24:51,https://api.github.com/repos/hyperledger/education-cryptomoji/pulls/comments/173662459,https://github.com/hyperledger/education-cryptomoji/pull/21#discussion_r173662459,taylorpage
