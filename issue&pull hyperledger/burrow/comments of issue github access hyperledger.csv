url issues,url_api comment,url_html comment,user create comment,body,created_at,updated_at
https://api.github.com/repos/hyperledger/burrow/issues/1082,https://api.github.com/repos/hyperledger/burrow/issues/comments/479530354,https://github.com/hyperledger/burrow/pull/1082#issuecomment-479530354,gregdhill,LGTM!,2019-04-03 15:07:15,2019-04-03 15:07:15
https://api.github.com/repos/hyperledger/burrow/issues/1075,https://api.github.com/repos/hyperledger/burrow/issues/comments/474394060,https://github.com/hyperledger/burrow/pull/1075#issuecomment-474394060,phymbert,"LGTM very simpler starter, great!",2019-03-19 14:25:48,2019-03-19 14:25:48
https://api.github.com/repos/hyperledger/burrow/issues/1073,https://api.github.com/repos/hyperledger/burrow/issues/comments/473856321,https://github.com/hyperledger/burrow/pull/1073#issuecomment-473856321,silasdavis,"@fastchain could you signoff your commits for DCO check, see: https://github.com/hyperledger/burrow/pull/1073/checks?check_run_id=79808618 ?
",2019-03-18 10:35:29,2019-03-18 10:35:29
https://api.github.com/repos/hyperledger/burrow/issues/1073,https://api.github.com/repos/hyperledger/burrow/issues/comments/474167990,https://github.com/hyperledger/burrow/pull/1073#issuecomment-474167990,fastchain,"@silasdavis  hello.
Is it possible to do it with a browser (I used browserfor this fix) ?",2019-03-19 01:58:39,2019-03-19 01:58:39
https://api.github.com/repos/hyperledger/burrow/issues/1073,https://api.github.com/repos/hyperledger/burrow/issues/comments/479535615,https://github.com/hyperledger/burrow/pull/1073#issuecomment-479535615,silasdavis,Fixed on develop,2019-04-03 15:20:10,2019-04-03 15:20:10
https://api.github.com/repos/hyperledger/burrow/issues/1069,https://api.github.com/repos/hyperledger/burrow/issues/comments/472638594,https://github.com/hyperledger/burrow/pull/1069#issuecomment-472638594,silasdavis,Not Tendermint's fault...,2019-03-13 22:57:17,2019-03-13 22:57:17
https://api.github.com/repos/hyperledger/burrow/issues/1065,https://api.github.com/repos/hyperledger/burrow/issues/comments/474302925,https://github.com/hyperledger/burrow/pull/1065#issuecomment-474302925,gregdhill,"@silasdavis I've cleaned up the configuration a bit more, though I think there is possibly a nicer way to arrange the kernel services in `core/server.go`. What do you think?",2019-03-19 10:48:12,2019-03-19 10:48:12
https://api.github.com/repos/hyperledger/burrow/issues/1056,https://api.github.com/repos/hyperledger/burrow/issues/comments/470804390,https://github.com/hyperledger/burrow/issues/1056#issuecomment-470804390,mrsirja,"Because your command line is incorrect.
You have:
`burrow deploy A50387161B7E51184F7ECECC596C4BDBCE16F274 $SIGNING_ADDRESS -f test.yaml`

You need:
`burrow deploy --address $SIGNING_ADDRESS -f test.yaml`
Or:
`burrow deploy --address A50387161B7E51184F7ECECC596C4BDBCE16F274 -f test.yaml`",2019-03-08 04:52:34,2019-03-08 04:52:34
https://api.github.com/repos/hyperledger/burrow/issues/1056,https://api.github.com/repos/hyperledger/burrow/issues/comments/471486258,https://github.com/hyperledger/burrow/issues/1056#issuecomment-471486258,mrsirja,If your issue is resolved please close the issue. @Villem-OskarOssip ,2019-03-11 10:32:29,2019-03-11 10:32:44
https://api.github.com/repos/hyperledger/burrow/issues/1050,https://api.github.com/repos/hyperledger/burrow/issues/comments/470264658,https://github.com/hyperledger/burrow/issues/1050#issuecomment-470264658,silasdavis,"Hi there... couple of fiddly things here (I would like to do a piece of work on 'node introductions' which would avoid the need for caring about node ids ahead of time).

1. Node IDs despite being public key addresses are treated as strings and are expected to be lower case
2. The tcp:// never used to be included, but when it is it must be before the ID

So:

You have:
```
  PersistentPeers = ""D6018980487BFE80E77AAD6B85F84E3248EF1C8A@tcp://0.0.0.0:20000""
```
You need:
```
  PersistentPeers = ""tcp://d6018980487bfe80e77aad6b85f84e3248ef1c8a@0.0.0.0:20000""
```

That crazy one-liner now gets's the tcp:// in the wrong place - though it does have the downcase function so not sure how you ended up with the upper case ID.

Let me know how you get on. I'm sure the docs/process could be improved here - and if you are willing to give that a go contributions are very welcome.",2019-03-06 20:31:08,2019-03-06 20:32:20
https://api.github.com/repos/hyperledger/burrow/issues/1050,https://api.github.com/repos/hyperledger/burrow/issues/comments/470386165,https://github.com/hyperledger/burrow/issues/1050#issuecomment-470386165,mrsirja,"Hello, Thank you for your instance response.
Your solution perfectly worked. I am getting node id using below command line and manually putting into .burrow_val1.toml file:

`curl -s 127.0.0.1:20001/network | jq -r '.result.ThisNode.ID'`

I thought that can not be problem, because in previous version i tried with uppercase node id and it worked fine.",2019-03-07 05:05:00,2019-03-07 05:05:00
https://api.github.com/repos/hyperledger/burrow/issues/1050,https://api.github.com/repos/hyperledger/burrow/issues/comments/470497140,https://github.com/hyperledger/burrow/issues/1050#issuecomment-470497140,silasdavis,I've created a couple of issues referenced from this. Thanks for the detailed report. Let me know if you would like to get involved in the project (https://chat.hyperledger.org/channel/burrow-contributors).,2019-03-07 11:51:55,2019-03-07 11:51:55
https://api.github.com/repos/hyperledger/burrow/issues/1050,https://api.github.com/repos/hyperledger/burrow/issues/comments/470807266,https://github.com/hyperledger/burrow/issues/1050#issuecomment-470807266,mrsirja,"How can i get involved in project. I will be happy to give my contribution
to this project.

On Thu, Mar 7, 2019 at 5:21 PM Silas Davis <notifications@github.com> wrote:

> I've created a couple of issues referenced from this. Thanks for the
> detailed report. Let me know if you would like to get involved in the
> project (https://chat.hyperledger.org/channel/burrow-contributors).
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/hyperledger/burrow/issues/1050#issuecomment-470497140>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/Ad1RcADpLwJj95LDMjoKYsCdHebWBpJeks5vUP1dgaJpZM4bgNrE>
> .
>
",2019-03-08 05:11:49,2019-03-08 05:11:49
https://api.github.com/repos/hyperledger/burrow/issues/1050,https://api.github.com/repos/hyperledger/burrow/issues/comments/470830773,https://github.com/hyperledger/burrow/issues/1050#issuecomment-470830773,phymbert,"Hello @mrsirja, welcome, you can join us on the chat linked above by Silas and/or read the contribute.md and we will be happy to receive your PR, for example on improving documentation or if you want to start with codebase : check issues tagged as Help wanted / Good starter issue. Good luck ",2019-03-08 07:16:46,2019-03-08 07:16:46
https://api.github.com/repos/hyperledger/burrow/issues/1041,https://api.github.com/repos/hyperledger/burrow/issues/comments/468018015,https://github.com/hyperledger/burrow/issues/1041#issuecomment-468018015,leowcy,"Actually I have the same issue. I used npm ""snak"" instead.
I got the burrow:command not found. I dont know how to do with it. Anyone can help us?",2019-02-27 20:29:24,2019-02-27 20:29:24
https://api.github.com/repos/hyperledger/burrow/issues/1041,https://api.github.com/repos/hyperledger/burrow/issues/comments/468041644,https://github.com/hyperledger/burrow/issues/1041#issuecomment-468041644,phymbert,"Hello, not so far to success, `make build` just locally generates the binary, but it is not present in your $PATH. Please then do `make install_burrow` and be sure $GOPATH/bin is in $PATH. ",2019-02-27 21:40:13,2019-02-27 21:42:37
https://api.github.com/repos/hyperledger/burrow/issues/1041,https://api.github.com/repos/hyperledger/burrow/issues/comments/468054496,https://github.com/hyperledger/burrow/issues/1041#issuecomment-468054496,Villem-OskarOssip,"Command `make install_burrow` returned `No such file or directory`
```
➜  burrow git:(develop) ✗ make install_burrow
go build -ldflags ""-extldflags '-static' \
	-X github.com/hyperledger/burrow/project.commit=v0.23.3-152-ge3c0d46a \
	-X github.com/hyperledger/burrow/project.date=2019-02-28"" \
	-o /Users/villemossip/go/src/github.com/hyperledger/burrow/bin/burrow ./cmd/burrow
cp /Users/villemossip/go/src/github.com/hyperledger/burrow/bin/burrow /Users/villemossip/go/bin/burrow
cp: /Users/villemossip/go/bin/burrow: No such file or directory
make: *** [install_burrow] Error 1
```
I figured out another approach to fix this issue. This is what i did:
```
export PATH=$PATH:$HOME/go/bin/burrow
export GOPATH=$HOME/go 
cd $HOME/go && mkdir bin && cd bin && mkdir burrow
cd $HOME/go/src/github.com/hyperledger/burrow
make install_burrow
```
Now it doesn't return `No such file or directory` error
```
➜  burrow git:(develop) ✗ make install_burrow
go build -ldflags ""-extldflags '-static' \
	-X github.com/hyperledger/burrow/project.commit=v0.23.3-152-ge3c0d46a \
	-X github.com/hyperledger/burrow/project.date=2019-02-28"" \
	-o /Users/villemossip/go/src/github.com/hyperledger/burrow/bin/burrow ./cmd/burrow
cp /Users/villemossip/go/src/github.com/hyperledger/burrow/bin/burrow /Users/villemossip/go/bin/burrow
```

Now I am able to successfully execute command `burrow spec -p1 -f1 | burrow configure -s- > burrow.toml` and start the node with `burrow start --validator-index=0`.

I hope this will be useful for someone in the future. Spent too much time figuring out the issue.
",2019-02-27 22:21:42,2019-02-27 22:23:07
https://api.github.com/repos/hyperledger/burrow/issues/1041,https://api.github.com/repos/hyperledger/burrow/issues/comments/468151634,https://github.com/hyperledger/burrow/issues/1041#issuecomment-468151634,phymbert,"Glad to hear, appreciate any contributions specifically to improve the documentation. I will close for now, reopen if you need.",2019-02-28 06:15:19,2019-02-28 06:15:19
https://api.github.com/repos/hyperledger/burrow/issues/1031,https://api.github.com/repos/hyperledger/burrow/issues/comments/466957659,https://github.com/hyperledger/burrow/issues/1031#issuecomment-466957659,seanyoung,"We're dependant on go 1.11 now, not go 1.10. The readme should be updated to reflect that.

Having said that, for now you probably can compile with go 1.10. To make this work, remove any lines with gofmt in the Makefile. Try executing this in the shell and then do make again:

`sed -i '/gofmt/d' Makefile`",2019-02-25 10:24:37,2019-02-25 10:24:37
https://api.github.com/repos/hyperledger/burrow/issues/1031,https://api.github.com/repos/hyperledger/burrow/issues/comments/466968487,https://github.com/hyperledger/burrow/issues/1031#issuecomment-466968487,SchulerSimon,"thank you very much, this worked.",2019-02-25 10:58:45,2019-02-25 10:58:45
https://api.github.com/repos/hyperledger/burrow/issues/1031,https://api.github.com/repos/hyperledger/burrow/issues/comments/476052506,https://github.com/hyperledger/burrow/issues/1031#issuecomment-476052506,nengliangZ,"Same issue here with go version go1.11.6 darwin/amd64

<img width=""678"" alt=""Screen Shot 2019-03-25 at 3 38 29 pm"" src=""https://user-images.githubusercontent.com/26139511/54895538-1ca49880-4f14-11e9-8137-53ababd14cae.png"">
",2019-03-25 04:39:11,2019-03-25 04:39:11
https://api.github.com/repos/hyperledger/burrow/issues/1027,https://api.github.com/repos/hyperledger/burrow/issues/comments/465514854,https://github.com/hyperledger/burrow/pull/1027#issuecomment-465514854,seanyoung,Looks like it depends on solidity 0.5 which has not been merged yet.,2019-02-20 10:22:37,2019-02-20 10:22:37
https://api.github.com/repos/hyperledger/burrow/issues/1027,https://api.github.com/repos/hyperledger/burrow/issues/comments/465553348,https://github.com/hyperledger/burrow/pull/1027#issuecomment-465553348,phymbert,"Yes, I mentioned it in the extcodehash PR. And even in 0.5 it looks extcodehash is marked as Constantinople, thus it will be generated as invalid, isnt?",2019-02-20 12:25:59,2019-02-20 12:25:59
https://api.github.com/repos/hyperledger/burrow/issues/1021,https://api.github.com/repos/hyperledger/burrow/issues/comments/465074374,https://github.com/hyperledger/burrow/issues/1021#issuecomment-465074374,seanyoung,"Looks like go is either not installed or not in your path on Windows; or make cannot find go.

For your macos machine there is also an issue with your path. go build puts burrow in the bin directory. Make sure that the bin directory is in your path.",2019-02-19 10:24:07,2019-02-19 10:24:07
https://api.github.com/repos/hyperledger/burrow/issues/1021,https://api.github.com/repos/hyperledger/burrow/issues/comments/465113415,https://github.com/hyperledger/burrow/issues/1021#issuecomment-465113415,Villem-OskarOssip,"Thank you! Got burrow running on my macos. 
Details about running burrow:
```
➜  bin git:(develop) ✗ burrow start --validator-index=0                                                 
Sourcing config from first of: Config file at 'burrow.toml' then defaults
Sourcing config from Config file at 'burrow.toml'
Using validator address: A57A73D6B435F4B94106B93336833D66EA72F887
{""caller"":""blockchain.go:73"",""database_key"":""426C6F636B636861696E5374617465"",""log_channel"":""Info"",""message"":""Trying to load blockchain state from database"",""run_id"":""25d6c0f8-343f-11e9-8964-e1ddca61cac6"",""scope"":""LoadOrNewBlockchain"",""time"":""2019-02-19T12:09:03.395312Z""}
```

I created folder `test` inside `burrow` folder and added 2 files: `deploy.yaml` and `storage.sol`. When I tried to deploy the contract with command `burrow deploy --address A57A73D6B435F4B94106B93336833D66EA72F887` I get the following result:
```
➜  test git:(develop) ✗ burrow deploy --address A57A73D6B435F4B94106B93336833D66EA72F887
*****Executing Job*****
                    
Job Name                                    => defaultAddr 

                                           
*****Executing Job*****
                    
Job Name                                    => deployStorageK 

                                           
Error compiling contracts: Language error:  
storage.sol:16:22: ParserError: The state mutability modifier ""constant"" was removed in version 0.5.0. Use ""view"" or ""pure"" instead.
  function getBool() constant public returns (bool retBool) {
                     ^------^
storage.sol:24:23: ParserError: The state mutability modifier ""constant"" was removed in version 0.5.0. Use ""view"" or ""pure"" instead.
  function getBool2() constant public returns (bool retBool) {
                      ^------^
storage.sol:32:21: ParserError: The state mutability modifier ""constant"" was removed in version 0.5.0. Use ""view"" or ""pure"" instead.
  function getInt() constant public returns (int retInt) {
                    ^------^
storage.sol:40:22: ParserError: The state mutability modifier ""constant"" was removed in version 0.5.0. Use ""view"" or ""pure"" instead.
  function getUint() constant public returns (uint retUint) {
                     ^------^
storage.sol:48:25: ParserError: The state mutability modifier ""constant"" was removed in version 0.5.0. Use ""view"" or ""pure"" instead.
  function getAddress() constant public returns (address retAddress) {
                        ^------^
storage.sol:56:23: ParserError: The state mutability modifier ""constant"" was removed in version 0.5.0. Use ""view"" or ""pure"" instead.
  function getBytes() constant public returns (bytes32 retBytes) {
                      ^------^
storage.sol:64:24: ParserError: The state mutability modifier ""constant"" was removed in version 0.5.0. Use ""view"" or ""pure"" instead.
  function getString() constant public returns (string retString) {
                       ^------^

```

I removed the constants (also tried to replace them with view). Tried to deploy contract again but got:

```
*****Executing Job*****
                    
Job Name                                    => defaultAddr 

                                           
*****Executing Job*****
                    
Job Name                                    => deployStorageK 

                                           
Error compiling contracts: Language error:  
storage.sol:60:22: TypeError: Data location must be ""memory"" for parameter in function, but none was given.
  function setString(string x) public {
                     ^------^
storage.sol:64:45: TypeError: Data location must be ""memory"" for return parameter in function, but none was given.
  function getString() view public returns (string retString) {
                                            ^--------------^

```
When I also removed methods setString(), getString() and tried to execute same command thrid time. But I got the following result:
```
.....
*****Executing Job*****
                    
Job Name                                    => setStorageString 

                                           
Failed to encode abi spec                   error => Unknown function setString abi => [{""constant"":true,""inputs"":[],""name"":""getUint"",""outputs"":[{""name"":""retUint"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getBytes"",""outputs"":[{""name"":""retBytes"",""type"":""bytes32""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getBool"",""outputs"":[{""name"":""retBool"",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""x"",""type"":""bool""}],""name"":""setBool"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getAddress"",""outputs"":[{""name"":""retAddress"",""type"":""address""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getBool2"",""outputs"":[{""name"":""retBool"",""type"":""bool""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""x"",""type"":""uint256""}],""name"":""setUint"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""getInt"",""outputs"":[{""name"":""retInt"",""type"":""int256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""x"",""type"":""int256""}],""name"":""setInt"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""x"",""type"":""address""}],""name"":""setAddress"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""x"",""type"":""bytes32""}],""name"":""setBytes"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[{""name"":""x"",""type"":""bool""}],""name"":""setBool2"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""}] 
ABI Error                                   rawErr => Unknown function setString data => [$setStorageBaseString] bin =>  dest => EAC6218353CF3FEDB8B866673B37262FC031324E 
.....
```
Now I removed assertStorageString, queryStorageString and setStorageString from deploy.yaml. Now the contract is executed successuly. I guess the [given instructions ](https://github.com/hyperledger/burrow/blob/develop/docs/quickstart/deploy-contracts.md) are out of date.
",2019-02-19 12:40:08,2019-02-19 12:56:17
https://api.github.com/repos/hyperledger/burrow/issues/1021,https://api.github.com/repos/hyperledger/burrow/issues/comments/465117867,https://github.com/hyperledger/burrow/issues/1021#issuecomment-465117867,seanyoung,"@voo those instructions were written for solc 0.4.24, you clearly have solc-0.5.

The return value and argument for getString/setstring should be `string memory` rather than just `string`.

I'll update the instructions when I find a little time.",2019-02-19 12:55:59,2019-02-19 12:55:59
https://api.github.com/repos/hyperledger/burrow/issues/1021,https://api.github.com/repos/hyperledger/burrow/issues/comments/465118187,https://github.com/hyperledger/burrow/issues/1021#issuecomment-465118187,Villem-OskarOssip,"@seanyoung 
Okey. Thanks :)",2019-02-19 12:56:58,2019-02-19 12:59:07
https://api.github.com/repos/hyperledger/burrow/issues/1021,https://api.github.com/repos/hyperledger/burrow/issues/comments/465124204,https://github.com/hyperledger/burrow/issues/1021#issuecomment-465124204,seanyoung,"Ok I've updated the quickstart here https://github.com/hyperledger/burrow/pull/1022
Should now work fine with solidity 0.5",2019-02-19 13:17:23,2019-02-19 13:17:23
https://api.github.com/repos/hyperledger/burrow/issues/1020,https://api.github.com/repos/hyperledger/burrow/issues/comments/464456042,https://github.com/hyperledger/burrow/pull/1020#issuecomment-464456042,gregdhill,LGTM,2019-02-17 13:17:52,2019-02-17 13:17:52
https://api.github.com/repos/hyperledger/burrow/issues/1020,https://api.github.com/repos/hyperledger/burrow/issues/comments/464488780,https://github.com/hyperledger/burrow/pull/1020#issuecomment-464488780,phymbert,"Thanks @gregdhill , wait before merging, I am trying to add an integration test. Also @silasdavis should we check as in `EXTCODECOPY` if the address references a native contract ?",2019-02-17 18:04:20,2019-02-17 18:04:20
https://api.github.com/repos/hyperledger/burrow/issues/1020,https://api.github.com/repos/hyperledger/burrow/issues/comments/464492677,https://github.com/hyperledger/burrow/pull/1020#issuecomment-464492677,phymbert,"Well, it is not possible to add intergation test at the moment, `extcodehash` is marked as `C`

> Constantinople is still in planning and all instructions marked as such will result in an invalid instruction exception

OK to merge this first implementation as is",2019-02-17 18:37:04,2019-02-17 18:37:04
https://api.github.com/repos/hyperledger/burrow/issues/1019,https://api.github.com/repos/hyperledger/burrow/issues/comments/465237208,https://github.com/hyperledger/burrow/issues/1019#issuecomment-465237208,compleatang,"++

We now have the `final solution` for Go dependency management (which replaces the previous three `final solutions`). :-)",2019-02-19 17:46:42,2019-02-19 17:46:42
https://api.github.com/repos/hyperledger/burrow/issues/1019,https://api.github.com/repos/hyperledger/burrow/issues/comments/465312598,https://github.com/hyperledger/burrow/issues/1019#issuecomment-465312598,phymbert,"oh yes, at least this one is in the core. ",2019-02-19 21:14:24,2019-02-19 21:14:24
https://api.github.com/repos/hyperledger/burrow/issues/1015,https://api.github.com/repos/hyperledger/burrow/issues/comments/463195949,https://github.com/hyperledger/burrow/issues/1015#issuecomment-463195949,seanyoung,"That should probably be `go get -d github.com/hyperledger/burrow` 

Does that work?",2019-02-13 13:18:53,2019-02-13 13:18:53
https://api.github.com/repos/hyperledger/burrow/issues/1015,https://api.github.com/repos/hyperledger/burrow/issues/comments/463196709,https://github.com/hyperledger/burrow/issues/1015#issuecomment-463196709,Villem-OskarOssip,"@seanyoung 
Gives me exactly the same error as before (both mac and windows). ",2019-02-13 13:21:08,2019-02-13 13:22:07
https://api.github.com/repos/hyperledger/burrow/issues/1015,https://api.github.com/repos/hyperledger/burrow/issues/comments/463197622,https://github.com/hyperledger/burrow/issues/1015#issuecomment-463197622,seanyoung,@Villem-OskarOssip that message can just be ignored. Not sure how to make it go away,2019-02-13 13:23:56,2019-02-13 13:23:56
https://api.github.com/repos/hyperledger/burrow/issues/1015,https://api.github.com/repos/hyperledger/burrow/issues/comments/463199749,https://github.com/hyperledger/burrow/issues/1015#issuecomment-463199749,Villem-OskarOssip,"I can't proceed  to the next step which should be `cd $GOPATH/src/github.com/hyperledger/burrow`. There is no folder called `github.com` under `C:\Go\src`.

Update:
After executing `go get -d github.com/hyperledger/burrow` on my mac (still returning same error message), I found out that command `$GOPATH/src/github.com/hyperledger/burrow` works as is finds the folders. Still not sure why it does not work on my windows. 

Thanks for the quick help!",2019-02-13 13:30:50,2019-02-13 13:37:19
https://api.github.com/repos/hyperledger/burrow/issues/1015,https://api.github.com/repos/hyperledger/burrow/issues/comments/463229041,https://github.com/hyperledger/burrow/issues/1015#issuecomment-463229041,seanyoung,From your earlier message I assume go get has put them in `C:\Users\Villem Ossip\go\src\github.com\hyperledger\burrow`,2019-02-13 14:55:33,2019-02-13 14:55:48
https://api.github.com/repos/hyperledger/burrow/issues/1015,https://api.github.com/repos/hyperledger/burrow/issues/comments/464148691,https://github.com/hyperledger/burrow/issues/1015#issuecomment-464148691,compleatang,"@Villem-OskarOssip going to close this issue, but feel free to reopen if you have any problems with burrow now that it is installed.!",2019-02-15 18:20:20,2019-02-15 18:20:20
https://api.github.com/repos/hyperledger/burrow/issues/1014,https://api.github.com/repos/hyperledger/burrow/issues/comments/463351981,https://github.com/hyperledger/burrow/pull/1014#issuecomment-463351981,MHBauer,@silasdavis @seanyoung want to make sure you see this.,2019-02-13 20:17:47,2019-02-13 20:17:47
https://api.github.com/repos/hyperledger/burrow/issues/1014,https://api.github.com/repos/hyperledger/burrow/issues/comments/463506191,https://github.com/hyperledger/burrow/pull/1014#issuecomment-463506191,phymbert,"Hello, thank you for your PR. Would you please add a unit and (better) an integration test ?",2019-02-14 06:21:38,2019-02-14 06:21:38
https://api.github.com/repos/hyperledger/burrow/issues/1014,https://api.github.com/repos/hyperledger/burrow/issues/comments/463574359,https://github.com/hyperledger/burrow/pull/1014#issuecomment-463574359,seanyoung,"@phymbert there is a test here https://github.com/swetharepakula/burrow-deploy-test , which I'll add in minute.

@MHBauer @swetharepakula thank you very much!",2019-02-14 10:23:42,2019-02-14 10:24:08
https://api.github.com/repos/hyperledger/burrow/issues/1012,https://api.github.com/repos/hyperledger/burrow/issues/comments/461309254,https://github.com/hyperledger/burrow/issues/1012#issuecomment-461309254,phymbert,"Hello, please confirm the node is started, and listen on port 20001. Then send us the output of `curl -s 127.0.0.1:20001/network` to check node network configuration. ",2019-02-07 07:03:07,2019-02-07 07:03:07
https://api.github.com/repos/hyperledger/burrow/issues/1012,https://api.github.com/repos/hyperledger/burrow/issues/comments/461686390,https://github.com/hyperledger/burrow/issues/1012#issuecomment-461686390,nagarajmanjunath,"@phymbert, Thanks for your response.
  I solved it.
  I have started the node with the same config has mention in doc and try to execute above cmd ,still 
  it was not displaying  value  **echo $NODE_0_URL**  in my terminal.

  I used the below code  to save the file. I copied the Node ID from the file,It worked

   NODE_0_URL=`curl -v -o ${GoPath}/{FolderName}/Node_address.txt   127.0.0.1:20001/network | jq -r '.result.ThisNode | [.ID, .ListenAddress] | join(""@"") | ascii_downcase'`


  
  
 ",2019-02-08 04:24:05,2019-02-08 04:24:05
https://api.github.com/repos/hyperledger/burrow/issues/1012,https://api.github.com/repos/hyperledger/burrow/issues/comments/461710066,https://github.com/hyperledger/burrow/issues/1012#issuecomment-461710066,phymbert,Happy you solved it.,2019-02-08 07:00:27,2019-02-08 07:00:27
https://api.github.com/repos/hyperledger/burrow/issues/1008,https://api.github.com/repos/hyperledger/burrow/issues/comments/461006304,https://github.com/hyperledger/burrow/pull/1008#issuecomment-461006304,compleatang,Fixed those two quick fixes and rebased.,2019-02-06 12:29:20,2019-02-06 12:29:20
https://api.github.com/repos/hyperledger/burrow/issues/1008,https://api.github.com/repos/hyperledger/burrow/issues/comments/461021893,https://github.com/hyperledger/burrow/pull/1008#issuecomment-461021893,silasdavis,"Reflected a bit on this over lunch. I am now fairly convinced that failure to decode an event ought to be catastrophic (at least for the projection - table spec - involved) since this fundamentally breaks synchronisation with the chain. The reasoning is as follows:

If we err on an event decode then either we will a) fail on every subsequent event or b) succeed on some future event.

In the case a) then the table that is receiver for the event will stay stuck in the past. This kills our liveness but doesn't violate safety. Consumers can look at the offset and detect they are getting stale results (within some bounds).

In case b) we now have completely undefined behaviour, for example, suppose the true execution is:
```
height      action
1           CREATE_USER Annie
33          GRANT_DEATHSTAR_PERMISSIONS Annie
45          REVOKE_DEATHSTAR_PERMISSIONS Annie
55          GRANT_CATAPULT_PERMISSIONS Annie
60          ENABLE_WEAPONS Annie
70          FIRE_WEAPONS Annie
```

But the application sees:
```
height      action
1           CREATE_USER Annie
33          GRANT_DEATHSTAR_PERMISSIONS Annie
55          GRANT_CATAPULT_PERMISSIONS Annie
60          ENABLE_WEAPONS Annie
70          FIRE_WEAPONS Annie
```

Clearly the result is very different, but the application (particularly in the presence of the burrow.js/vent sync feature) believes it is caught up and is seeing valid state. 

Note that case b) is entirely possible - since ABI decoding may fail with some but nor all events (e.g. it may succeed with an old spec that just omits a new field but now one that includes it). If it does fail with all future events, then not much point in running vent against that table spec anymore until it gets fixed.

Where I can see the case for having vent carrying on is carrying on processing other table specs when one fails, i.e. to not have the entire process bail on a bad decode. However whether this leads to global inconsistency in the database entirely depends on the logical dependencies between tables so this should at most be an option.

I feel the pain of the ABI wrangling - but I'm not sure this is a good place to try and solve it. ",2019-02-06 13:25:52,2019-02-06 13:27:13
https://api.github.com/repos/hyperledger/burrow/issues/1008,https://api.github.com/repos/hyperledger/burrow/issues/comments/465080159,https://github.com/hyperledger/burrow/pull/1008#issuecomment-465080159,silasdavis,"Closing for now, it may be possible to partially fail vent maintaining consistency, but it is not clear to me how to do that.",2019-02-19 10:41:01,2019-02-19 10:41:01
https://api.github.com/repos/hyperledger/burrow/issues/1005,https://api.github.com/repos/hyperledger/burrow/issues/comments/460268865,https://github.com/hyperledger/burrow/pull/1005#issuecomment-460268865,silasdavis,closing for #1006 ,2019-02-04 14:29:31,2019-02-04 14:29:31
https://api.github.com/repos/hyperledger/burrow/issues/999,https://api.github.com/repos/hyperledger/burrow/issues/comments/459405039,https://github.com/hyperledger/burrow/issues/999#issuecomment-459405039,silasdavis,"Thanks for the report.

The time is purely from Tendermint. Looking at the code this seems to me like it is probably an 'as designed' thing. Their implementation of 'BFT time' makes use of time stamps in that are included in commits. Commits are the subject of BFT agreement and contain a time. When `CreateEmptyBlocks` is disabled then the tendermint state machine does not propose blocks in the absence of transactions and there will be no commits apart from the last committed block with transactions.

So when you see the timestamp of the previous block + 1 (I think the +1 is just related to how the median is calculated - do you have 1 validator) that is what BFT time provides - commits are not available for the _current_ block when it is proposed so the time is based on the previous block - this is common in tendermint where state hashes and so on run one block behind.

It's difficult to know how they could do better - they need a round of consensus to get determine the BFT time, but if they do a round of consensus they need to store the commits (basically the block).

Times be hard.

Will close for now, feel free to reply here or reopen though.",2019-01-31 16:17:05,2019-01-31 16:17:59
https://api.github.com/repos/hyperledger/burrow/issues/995,https://api.github.com/repos/hyperledger/burrow/issues/comments/453134387,https://github.com/hyperledger/burrow/issues/995#issuecomment-453134387,silasdavis,"Actually I had forgotten the `run_id` is a time-based UUID so has an embedded timestamp which matches the start time of chain. Can be extracted with e.g. https://www.famkruithof.net/uuid/uuidgen?typeReq=-1 

That might be good enough.",2019-01-10 15:24:26,2019-01-10 15:24:26
https://api.github.com/repos/hyperledger/burrow/issues/995,https://api.github.com/repos/hyperledger/burrow/issues/comments/470497630,https://github.com/hyperledger/burrow/issues/995#issuecomment-470497630,silasdavis,closed by https://github.com/hyperledger/burrow/commit/eca20467e06329eb8e563a17518637d9e197a6a7,2019-03-07 11:53:48,2019-03-07 11:53:58
https://api.github.com/repos/hyperledger/burrow/issues/991,https://api.github.com/repos/hyperledger/burrow/issues/comments/452277724,https://github.com/hyperledger/burrow/pull/991#issuecomment-452277724,silasdavis,Gave this its own repo for development as a side-project: https://github.com/monax/trieste,2019-01-08 12:14:27,2019-01-08 12:14:27
https://api.github.com/repos/hyperledger/burrow/issues/983,https://api.github.com/repos/hyperledger/burrow/issues/comments/479542676,https://github.com/hyperledger/burrow/issues/983#issuecomment-479542676,compleatang,this is already shipped for burrow deploy. but as far as I can tell is not for burrow start.,2019-04-03 15:36:54,2019-04-03 15:36:54
https://api.github.com/repos/hyperledger/burrow/issues/981,https://api.github.com/repos/hyperledger/burrow/issues/comments/451012266,https://github.com/hyperledger/burrow/issues/981#issuecomment-451012266,carlosfaria94,"Problem solved. In Solidity interface I had `decreaseBalance` with the modifier `view`, making Burrow execute `CallSim` and not `Call` transaction. ",2019-01-02 23:01:49,2019-01-02 23:01:49
https://api.github.com/repos/hyperledger/burrow/issues/978,https://api.github.com/repos/hyperledger/burrow/issues/comments/447558999,https://github.com/hyperledger/burrow/pull/978#issuecomment-447558999,silasdavis,FIPF,2018-12-15 10:46:23,2018-12-15 10:46:23
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/444058883,https://github.com/hyperledger/burrow/issues/973#issuecomment-444058883,silasdavis,"Thanks for this excellent report.

Just to pull in what I mentioned on rocket chat: 

If you change `Enabled = true` in the burrow.toml in:

```
  [RPC.Profiler]
    Enabled = false
    ListenAddress = ""tcp://127.0.0.1:6060""

```
then if you have Go installed once the memory is ramped up a bit run
`go tool pprof -top http://localhost:6060/debug/pprof/heap`

If you are able to do this I might be able to get to an understanding before spending a lot of time on reproduction.",2018-12-04 10:54:38,2018-12-04 10:54:38
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/444485851,https://github.com/hyperledger/burrow/issues/973#issuecomment-444485851,joeriexelmans,"OK a ran a new experiment, similar to the original one, but with all time intervals multiplied by 1/30. Because this time, I wasn't so much interested in whether the burrow processes would run without crashing for a long amount of time, I just wanted to reproduce the memory usage problem. So this time:

- Every 20 seconds, a batch of 50 contracts was deployed
- Every 10 seconds, 1 contract was deployed and 100 transactions were made to this contract (a setter function was called, which also emitted an event)
- Every 2 seconds, the CPU and memory usage of one of the burrow processes were logged as CSV data
- Every 10 seconds, the total size of the blockchain directory of one of the burrow processes was calculated and logged as CSV data
- Empty blocks (burrow setting) **disabled**

Again it was a setup with 2 validator burrow processes on the same machine: let's call them A and B. A was added as a persistent peer to B. So A was started first. This time only process B had very high memory usage, A seemed more stable at around 90 MB. (I don't know if during the original experiment, the memory usage was high for both processes or only for process B). All transactions were sent to the GRPC of process B.

The following is a graph showing CPU and memory usage of B:

![cpu memory usage](https://user-images.githubusercontent.com/37209254/49517308-27231f80-f89c-11e8-95f9-19bdca569f57.png)

As you can see, no more deployment transactions would 'complete' (from burrow.js perspective) after CPU usage of B hit 100% and memory usage was past 1 GB. So something went wrong there (too high load?). The application however kept sending deployment transactions all the way to the end, which could explain the further increase in memory usage.

Process B was configured to expose the memory profiler, here's the output all the way at the end:
[pprof-output.txt](https://github.com/hyperledger/burrow/files/2648957/pprof-output.txt)

Here's the raw CSV data of CPU, memory, disk usage, number of deployed contracts and other transactions over time: 
[raw_data2.txt](https://github.com/hyperledger/burrow/files/2648965/stats3.txt)

The contract that was deployed was still the same as in the original experiment.",2018-12-05 13:31:56,2018-12-05 14:34:49
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/444519376,https://github.com/hyperledger/burrow/issues/973#issuecomment-444519376,joeriexelmans,"Ran the same experiment one more time, now only with half the load (time intervals * 1/15 instead of * 1/30). Again high memory usage in ""process B"".

![cpu memory](https://user-images.githubusercontent.com/37209254/49522558-3ad48300-f8a8-11e8-9950-0883c60b8f96.png)

Orange and blue reversed compared to last time (sorry for that)

Was able to run pprof before things got out of hand like they did last time: [pprof-output2.txt](https://github.com/hyperledger/burrow/files/2649360/pprof-output2.txt)

And again, the raw CSV data on which the graph is based: [raw_data3.txt](https://github.com/hyperledger/burrow/files/2649361/stats4.txt)

",2018-12-05 15:12:06,2018-12-05 15:14:16
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/444569257,https://github.com/hyperledger/burrow/issues/973#issuecomment-444569257,seanyoung,"@joeriexelmans thank you for that, graphs are very clear.
Are you able to able to post the scripts you used for your test? That will really help with out with our reproduction.
Thank you very much!",2018-12-05 17:22:56,2018-12-05 17:22:56
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/444793409,https://github.com/hyperledger/burrow/issues/973#issuecomment-444793409,joeriexelmans,"Here's the script (edited a little, moved all the hardcoded stuff to the top)
[experiment.js.txt](https://github.com/hyperledger/burrow/files/2652288/experiment.js.txt)

Ran it again, this time monitoring the memory usage of both burrow processes. Also this time sent all transactions to process A instead of B. This time the memory usage of A was much higher, so it seems the process that gets sent the transactions has much higher memory usage. Memory usage of B also kept ever-increasing as you can see:
![screen shot 2018-12-06 at 09 39 31](https://user-images.githubusercontent.com/37209254/49571943-e75f4500-f93a-11e8-93d7-6151a63c96c7.png)
As you can see, I kept running it until no more transactions would complete (basically kept running it until things broke).

Also I'm sorry for the awful quality of the graphs, should probably use gnuplot instead of plot.ly but making graphs is not what I regularly do.",2018-12-06 08:44:10,2018-12-06 08:49:04
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/444819233,https://github.com/hyperledger/burrow/issues/973#issuecomment-444819233,joeriexelmans,"I put up a public repository with the experiment also. Contains scripts to start a single or 2-node setup. It will save you the trouble of manually filling in the PID values in the javascript file.
https://bitbucket.org/tmining/burrow-experiments
",2018-12-06 10:09:53,2018-12-06 10:10:45
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/444837016,https://github.com/hyperledger/burrow/issues/973#issuecomment-444837016,joeriexelmans,"Added mem-usage.js script to the repo. I advice to run that script instead. It will wait for earlier batches of txs to complete before sending new batches, not overloading the burrow node, like it happened in some of my experiments above. The fact that a 2-node burrow setup breaks when sending too many transactions is a possibly different issue but not of interest here.

Also when I restart the burrow processes, memory usage is low again and goes up like before as I continue to send transactions. So probably just a memory leak.",2018-12-06 11:13:31,2018-12-06 11:13:31
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/444870002,https://github.com/hyperledger/burrow/issues/973#issuecomment-444870002,silasdavis,@joeriexelmans what version of Go are you using?,2018-12-06 13:27:05,2018-12-06 13:27:05
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/444895720,https://github.com/hyperledger/burrow/issues/973#issuecomment-444895720,joeriexelmans,"For burrow itself it shouldn't matter because I used to released binary.
The pprof was done with go1.10.4.",2018-12-06 14:49:01,2018-12-06 14:49:01
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/444936128,https://github.com/hyperledger/burrow/issues/973#issuecomment-444936128,silasdavis,"I haven't been able to recreate the memory leak in the QueryParser that you saw. I have a hunch that it might be due to event subscriptions building up under load (we use event subscriptions to return the `TxExecution` during the `BroadcastTxSync`.

However, the fact we are query parsing at all is unnecessary and I have optimised this on develop with #974. @seanyoung is going to take a more careful look and reproduce what you are seeing - but if you have any time in the meantime could you have a go with latest develop and see if you see the issue.

One thing we have observed is the go runtime tends to be reserving quite a bit more memory than that which is shown on pprof heap. Some of this is likely to be down to caching, but not all.

Thanks for you effort on this, definitely in top spot for best issue of 2018 :)",2018-12-06 16:32:35,2018-12-06 16:32:35
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/445195518,https://github.com/hyperledger/burrow/issues/973#issuecomment-445195518,silasdavis,"Had another look over you graphs - and I think this all deserves a bit more reproduction but I had some additional thoughts:

You did three experiments:

1. Long-running, low load (deploys every 10 minutes)
2. Short-running, highest load (deploys every 20 seconds)
3. Short-running, medium load (deploys every 40 seconds)

Experiment 1 is the one I would most like to see the pprof output from - I wonder if you would be able to re-run it to see if the same behaviour occurs? The load is so low - much lower than we have test chains for I think that it i surprising to see this memory use

In 2 I believe the load saturated the CPU which caused subscriptions in our event system to mount up. This manifest as a very large allocation to Query (held here: https://github.com/hyperledger/burrow/blob/develop/event/pubsub/pubsub.go#L62) but under CPU saturation I believe the reason for it is failure to unsubscribe listeners, which is possilbe if the context on an unsubsribe times out or otherwise completes: https://github.com/hyperledger/burrow/blob/develop/event/pubsub/pubsub.go#L132 (note we handle the unsubscribe in a defer statement - https://github.com/hyperledger/burrow/blob/develop/execution/transactor.go#L90 though we do use the background context - so not entirely clear what this would lead to.

In any case I am fairly confident that the CPU saturation will be mostly down to logging, i.e. I notice you have set `ExcludeTrace = false` (which makes sense for debug I agree!) but this generates a large amount of logging and also by default does a certain amount of post-processing on the log output to give it nice formatting. Really their ought to be a health-warning on`ExcludeTrace = false` - for production or performance testing this should be disabled. In experiment 2 you are still only doing 12.5 transactions per second. In my rather more adhoc testing (and in integration tests) I have seen Burrow comfortably handle 600+ tps with non-trivial contracts. Admittedly that tends to be more bursty. I think trace logging gets pretty ridiculous under high transaction load.

In experiment 3 we see heap allocation that is pretty much as expected. The system memory does grow - and this is something I have seen locally too - that system memory allocation is a significant multiple of heap allocation. There are a few possible reasons:

- We are leaking non-heap memory (i.e. stack) which will be a bit harder to debug (see https://github.com/golang/go/issues/15848) 

- The Go runtime is hanging on to a lot of system memory that is has internally released to optimise its own allocations (it's not inconceivable Go is behaving badly in respect of some heuristic is uses for releasing memory - this is rather old so probably no longer applies but something like it might: https://stackoverflow.com/questions/16516189/why-total-mb-in-golang-heap-profile-is-less-than-res-in-top)

- Memory is just not getting GC'd quickly enough 

It will be interesting to see a) what happens with `ExcludeTrace = true` and b) whether heap allocation tracks system allocation if we add some `debug.FreeOSMemory()` calls around the place.

There's probably a few other ways we could be a bit more graceful about what happens with event subscriptions under CPU saturation too.",2018-12-07 10:49:46,2018-12-07 10:53:26
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/445814887,https://github.com/hyperledger/burrow/issues/973#issuecomment-445814887,joeriexelmans,"Hi, I tried the mem_usage.js script (which sends as many deployment transactions batches as burrow can handle) with the [lastest](https://github.com/hyperledger/burrow/commit/de870e3783d0c0e91fe8b25afddaf38a5de842f8) 'develop' burrow, `ExcludeTrace = true` and still experiencing the same memory problem. This test was done on Mac OS 10.13.6.
![plot](https://user-images.githubusercontent.com/37209254/49733709-83ae8200-fc82-11e8-84f2-fe451be90099.png)
Memory usage of the 2 burrow processes also does not drop after ending the mem_usage.js script.
Here's the pprof output at the end of validator0 (the one with the highest memory usage): [pprof-validator0.txt](https://github.com/hyperledger/burrow/files/2663202/pprof-validator0.txt)
Even though profiler was enabled on validator1, could not get pprof on it (connection refused).

I am re-running experiment 1 as requested, also with the latest 'develop' burrow, with `ExcludeTrace = true` on a Ubuntu 16.04 server. This is a ""low load"" experiment so hopefully have some results tomorrow.",2018-12-10 13:28:23,2018-12-10 13:28:23
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/446190496,https://github.com/hyperledger/burrow/issues/973#issuecomment-446190496,joeriexelmans,"(updated (again)) New ""Experiment 1"" still running, about 67 hours have gone by, 20,957 contracts deployed and 80,700 non-deployment txs sent:
![plot](https://user-images.githubusercontent.com/37209254/49926380-b68f8a80-febb-11e8-9de2-d9f239f618ce.png)

Pprof after 26 hours: [pprof-26.txt](https://github.com/hyperledger/burrow/files/2667582/pprof-exp1.txt)
Pprof after 44 hours: [pprof-44.txt](https://github.com/hyperledger/burrow/files/2671094/pprof-44.txt)
Pprof after 67 hours: [pprof-67.txt](https://github.com/hyperledger/burrow/files/2675133/pprof-62.txt)

New plot after 96 hours (30,044 deployments, 115,600 txs):

![plot](https://user-images.githubusercontent.com/37209254/50007282-b8874580-ffb0-11e8-8bca-7a6d1fef3aae.png)


I'll keep it running for as long as possible",2018-12-11 12:47:29,2018-12-14 13:59:57
https://api.github.com/repos/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/comments/447775539,https://github.com/hyperledger/burrow/issues/973#issuecomment-447775539,joeriexelmans,"Update on the ""low load experiment"". Still running for almost 7 entire days! About 50,000 deployed contracts and 200,000 non-deployment txs.
![plot](https://user-images.githubusercontent.com/37209254/50077408-9a099000-01e4-11e9-96df-28ed48b48503.png)
Memory usage has kept increasing. CPU usage looks high but in fact isn't (it's just that there are so many data points on the graph (as an SVG file it's 60 MB!), you cannot see that most of the time both burrow processes use about 1% CPU)

I was able to restart both burrow processes, and continue to use the existing data directory and make transactions. After restart, memory usage is about 100 MB.",2018-12-17 09:22:53,2018-12-17 09:22:53
https://api.github.com/repos/hyperledger/burrow/issues/972,https://api.github.com/repos/hyperledger/burrow/issues/comments/448267019,https://github.com/hyperledger/burrow/pull/972#issuecomment-448267019,silasdavis,subsumed by: #985 ,2018-12-18 15:48:55,2018-12-18 15:48:55
https://api.github.com/repos/hyperledger/burrow/issues/971,https://api.github.com/repos/hyperledger/burrow/issues/comments/444466715,https://github.com/hyperledger/burrow/pull/971#issuecomment-444466715,compleatang,@devrajsinghrawat thanks for the Pull Request. Can you squash the commits and ensure that the individual commits are signed and then force push to your branch. That will satisfy the DCO bot (a Hyperledger requirement) and then we'll be GTG to merge this. Thanks!,2018-12-05 12:21:04,2018-12-05 12:21:04
https://api.github.com/repos/hyperledger/burrow/issues/971,https://api.github.com/repos/hyperledger/burrow/issues/comments/444939181,https://github.com/hyperledger/burrow/pull/971#issuecomment-444939181,silasdavis,"This could do with a comment on the docs but using non-standard ports is intentional - so that you can run these validators on a single machine without port collisions.

Note it's perfectly possible to use non-standard ports with `burrow deploy -u localhost:20002 ...`",2018-12-06 16:40:03,2018-12-06 16:40:03
https://api.github.com/repos/hyperledger/burrow/issues/971,https://api.github.com/repos/hyperledger/burrow/issues/comments/448267264,https://github.com/hyperledger/burrow/pull/971#issuecomment-448267264,silasdavis,Closing due to lack of DCO and not really an error,2018-12-18 15:49:34,2018-12-18 15:49:34
https://api.github.com/repos/hyperledger/burrow/issues/970,https://api.github.com/repos/hyperledger/burrow/issues/comments/440959392,https://github.com/hyperledger/burrow/issues/970#issuecomment-440959392,seanyoung,"This contract has a constructor but you might not have provided the arguments for it.

Can you try with deploy.yaml:
```
jobs:

 - name: storage
   deploy:
     contract: storage.sol
     data: foo

```
Also we have not tested with solidity 0.5.0 yet, 0.4.25 might be more prudent.",2018-11-22 09:02:05,2018-11-22 09:02:35
https://api.github.com/repos/hyperledger/burrow/issues/970,https://api.github.com/repos/hyperledger/burrow/issues/comments/440978456,https://github.com/hyperledger/burrow/issues/970#issuecomment-440978456,helderjnpinto,I changed the SOLC for version 0.4.25  and put the data on deploy.yml not it works :+1: thx @seanyoung ,2018-11-22 10:06:42,2018-11-22 10:07:21
https://api.github.com/repos/hyperledger/burrow/issues/968,https://api.github.com/repos/hyperledger/burrow/issues/comments/448683427,https://github.com/hyperledger/burrow/pull/968#issuecomment-448683427,silasdavis,@seanyoung can we get a rebase... then I promise I'll actually review/merge,2018-12-19 17:44:12,2018-12-19 17:44:12
https://api.github.com/repos/hyperledger/burrow/issues/967,https://api.github.com/repos/hyperledger/burrow/issues/comments/439412517,https://github.com/hyperledger/burrow/pull/967#issuecomment-439412517,silasdavis,"Mostly looks good but can we:

1. Add `GetBlockHash` to `BlockchainInfo` interface
2. Add `GetBlockHash` to `evm/State` interface and pass `BlockchainInfo` as second argument to `evm.NewState` (state should capture the readers that the EVM needs now - we may want to allow for more info to be read from header)
3. Remove `GetBlockHash` from params (prefer to keep it static)",2018-11-16 14:37:40,2018-11-16 14:37:40
https://api.github.com/repos/hyperledger/burrow/issues/967,https://api.github.com/repos/hyperledger/burrow/issues/comments/448151697,https://github.com/hyperledger/burrow/pull/967#issuecomment-448151697,silasdavis,"Sorry to delay on this, but every time I look at it I think it contains a single that the whole separation between blockchain and state is not done right. I do intend to get to that as part of working on the restore side of dump restore. I'd be inclined to merge it into that branch of work.",2018-12-18 09:19:24,2018-12-18 09:19:24
https://api.github.com/repos/hyperledger/burrow/issues/967,https://api.github.com/repos/hyperledger/burrow/issues/comments/448689264,https://github.com/hyperledger/burrow/pull/967#issuecomment-448689264,phymbert,"agreed, it is not done right... I will rebase onto develop the soonest. Meanwhile tell me if you have a better way to provide GetBlock to the evm.",2018-12-19 18:02:26,2018-12-19 18:02:26
https://api.github.com/repos/hyperledger/burrow/issues/967,https://api.github.com/repos/hyperledger/burrow/issues/comments/448984910,https://github.com/hyperledger/burrow/pull/967#issuecomment-448984910,phymbert,"Rebased ok, @silasdavis please confirm",2018-12-20 12:35:47,2018-12-20 12:35:47
https://api.github.com/repos/hyperledger/burrow/issues/967,https://api.github.com/repos/hyperledger/burrow/issues/comments/459289485,https://github.com/hyperledger/burrow/pull/967#issuecomment-459289485,silasdavis,I am going to merge this - I don't think it makes sense to make it wait on rework - I'll take a look at that shortly though. All the basics are good.,2019-01-31 10:12:19,2019-01-31 10:12:19
https://api.github.com/repos/hyperledger/burrow/issues/965,https://api.github.com/repos/hyperledger/burrow/issues/comments/438755588,https://github.com/hyperledger/burrow/pull/965#issuecomment-438755588,silasdavis,:smiley_cat: ,2018-11-14 17:52:04,2018-11-14 17:52:04
https://api.github.com/repos/hyperledger/burrow/issues/956,https://api.github.com/repos/hyperledger/burrow/issues/comments/437424013,https://github.com/hyperledger/burrow/pull/956#issuecomment-437424013,silasdavis,:smiley_cat: ,2018-11-09 16:58:55,2018-11-09 16:58:55
https://api.github.com/repos/hyperledger/burrow/issues/951,https://api.github.com/repos/hyperledger/burrow/issues/comments/436620340,https://github.com/hyperledger/burrow/pull/951#issuecomment-436620340,silasdavis,"I've factored the test here into: https://github.com/hyperledger/burrow/pull/953 
",2018-11-07 13:21:20,2018-11-07 13:21:20
https://api.github.com/repos/hyperledger/burrow/issues/950,https://api.github.com/repos/hyperledger/burrow/issues/comments/435599343,https://github.com/hyperledger/burrow/pull/950#issuecomment-435599343,silasdavis,@iamcap7 would you mind signing the DCO so we can accept you contribution?,2018-11-03 16:07:48,2018-11-03 16:07:48
https://api.github.com/repos/hyperledger/burrow/issues/950,https://api.github.com/repos/hyperledger/burrow/issues/comments/435629311,https://github.com/hyperledger/burrow/pull/950#issuecomment-435629311,siyopao,"@silasdavis Ah, sorry about that. Done!",2018-11-03 23:36:29,2018-11-03 23:36:29
https://api.github.com/repos/hyperledger/burrow/issues/948,https://api.github.com/repos/hyperledger/burrow/issues/comments/434663933,https://github.com/hyperledger/burrow/pull/948#issuecomment-434663933,silasdavis,thanks!,2018-10-31 12:12:16,2018-10-31 12:12:16
https://api.github.com/repos/hyperledger/burrow/issues/944,https://api.github.com/repos/hyperledger/burrow/issues/comments/439845736,https://github.com/hyperledger/burrow/pull/944#issuecomment-439845736,seanyoung,"In go-ethereum CREATE2 has four arguments, the first one being endowment. Not sure what it is used for, but this code uses three arguments. Not sure it would be compatible.
Also I don't think solidity generates this opcode unless specified with assembly. Otherwise a solidity test would be useful.
If solidity does not generate CREATE2, why do we care? @silasdavis ",2018-11-19 10:30:48,2018-11-19 10:57:14
https://api.github.com/repos/hyperledger/burrow/issues/944,https://api.github.com/repos/hyperledger/burrow/issues/comments/439853568,https://github.com/hyperledger/burrow/pull/944#issuecomment-439853568,gregdhill,@seanyoung I think endowment is functionally equivalent to value ([for example](https://github.com/ethereum/go-ethereum/blob/master/core/vm/instructions.go)). AFAIK create2 is available inline.,2018-11-19 10:58:33,2018-11-19 10:58:33
https://api.github.com/repos/hyperledger/burrow/issues/944,https://api.github.com/repos/hyperledger/burrow/issues/comments/444188986,https://github.com/hyperledger/burrow/pull/944#issuecomment-444188986,silasdavis,"Nice!

Supercedes: https://github.com/hyperledger/burrow/issues/769",2018-12-04 17:38:26,2018-12-04 17:38:26
https://api.github.com/repos/hyperledger/burrow/issues/943,https://api.github.com/repos/hyperledger/burrow/issues/comments/433900788,https://github.com/hyperledger/burrow/pull/943#issuecomment-433900788,silasdavis,closing for #947 ,2018-10-29 13:00:29,2018-10-29 13:00:29
https://api.github.com/repos/hyperledger/burrow/issues/941,https://api.github.com/repos/hyperledger/burrow/issues/comments/434762404,https://github.com/hyperledger/burrow/pull/941#issuecomment-434762404,gregdhill,Closing in favor of #949 ,2018-10-31 16:48:02,2018-10-31 16:48:02
https://api.github.com/repos/hyperledger/burrow/issues/940,https://api.github.com/repos/hyperledger/burrow/issues/comments/435443674,https://github.com/hyperledger/burrow/pull/940#issuecomment-435443674,gregdhill,"Everything looks good so far, happy to merge once we've considered the CALL value catch. I've created #951 which adds in the final set of tests for staticcall and a small hook for a non-zero return value, though I think there may be a better way to do it...",2018-11-02 16:55:39,2018-11-02 16:55:39
https://api.github.com/repos/hyperledger/burrow/issues/939,https://api.github.com/repos/hyperledger/burrow/issues/comments/433896280,https://github.com/hyperledger/burrow/issues/939#issuecomment-433896280,gregdhill,Fixed by #946 ,2018-10-29 12:45:11,2018-10-29 12:45:11
https://api.github.com/repos/hyperledger/burrow/issues/938,https://api.github.com/repos/hyperledger/burrow/issues/comments/430672277,https://github.com/hyperledger/burrow/pull/938#issuecomment-430672277,silasdavis,@seanyoung looks good other than making error messages a but more helpful,2018-10-17 15:21:19,2018-10-17 15:21:19
https://api.github.com/repos/hyperledger/burrow/issues/936,https://api.github.com/repos/hyperledger/burrow/issues/comments/428517083,https://github.com/hyperledger/burrow/pull/936#issuecomment-428517083,seanyoung,I'm not sure IdentifyTx is descriptive enough. How about NodekeyTx?,2018-10-10 10:13:50,2018-10-10 10:13:50
https://api.github.com/repos/hyperledger/burrow/issues/936,https://api.github.com/repos/hyperledger/burrow/issues/comments/428519250,https://github.com/hyperledger/burrow/pull/936#issuecomment-428519250,phymbert,"Agreed to change the TX name to something more explicit, although we need to take into account #933 and maybe later support more ""identity"" field like email or participant name. What about PeerIdentityTx or NodeIdentityTx ?",2018-10-10 10:22:04,2018-10-10 10:22:04
https://api.github.com/repos/hyperledger/burrow/issues/936,https://api.github.com/repos/hyperledger/burrow/issues/comments/430227982,https://github.com/hyperledger/burrow/pull/936#issuecomment-430227982,silasdavis,"Had a quick pass through this - need to find some time to have a more thorough look. One meta question for now though is whether we should try and merge BIPs as 'fully formed', which wouldn't mean they could not longer be changed, or whether we should just merge based on whether the spirit of the thing is basically a good idea.

I can see advantages of both, on the one hand it seems like a lot of effort for the PRer to have to go through and make everyone else's edits so merging it would open up for subsequent tweaks as PRs. Then again I wouldn't want a half-finished or ill-conceived BIP to attract legitimacy just because it was in the repo if it ends up getting slightly abandoned.

A middle ground might be to merge proposed BIPs into their own branch - merging in them into master when they seem reasonably complete. We could use a special branch for this, or we could use develop.

Thoughts?",2018-10-16 13:00:50,2018-10-16 13:00:50
https://api.github.com/repos/hyperledger/burrow/issues/936,https://api.github.com/repos/hyperledger/burrow/issues/comments/430511038,https://github.com/hyperledger/burrow/pull/936#issuecomment-430511038,phymbert,"Hello @silasdavis , I suggest to try the last option, I prefer develop because it is the default branch and convenient to explore docs. We may highlight the status *draft* to inform readers that the community hasn't reached consensus yet on this BIP.",2018-10-17 06:53:14,2018-10-17 06:53:14
https://api.github.com/repos/hyperledger/burrow/issues/936,https://api.github.com/repos/hyperledger/burrow/issues/comments/431394493,https://github.com/hyperledger/burrow/pull/936#issuecomment-431394493,silasdavis,"Yes I like that idea, could you create a subfolder called draft and move this to that folder then I'll get this merged. We may want to drop the sequence number - but given there is no contention between BIPs now it doesn't really matter.",2018-10-19 15:05:11,2018-10-19 15:05:11
https://api.github.com/repos/hyperledger/burrow/issues/936,https://api.github.com/repos/hyperledger/burrow/issues/comments/433336659,https://github.com/hyperledger/burrow/pull/936#issuecomment-433336659,phymbert,"Hello @silasdavis , moved to draft subfolder done. Regarding BIP number id, I understand your point but I think we can face issue with links to assets folder - and this way it allows to keep some kind of history order between BIPs. Can we think about this later if we are facing duplicate number ? Another option is to use the BIP creation date as unique number, even I neither really like this way too.",2018-10-26 08:51:58,2018-10-26 08:51:58
https://api.github.com/repos/hyperledger/burrow/issues/936,https://api.github.com/repos/hyperledger/burrow/issues/comments/433901010,https://github.com/hyperledger/burrow/pull/936#issuecomment-433901010,silasdavis,"Agreed, let's figure it out later, thanks for your contribution.",2018-10-29 13:01:19,2018-10-29 13:01:19
https://api.github.com/repos/hyperledger/burrow/issues/935,https://api.github.com/repos/hyperledger/burrow/issues/comments/429064965,https://github.com/hyperledger/burrow/pull/935#issuecomment-429064965,silasdavis,"This is a super addition and something we really need. We can iterate on the structure, I'd like to integrate ideas from architecture decision records. But LGTM! ",2018-10-11 18:18:51,2018-10-11 18:18:51
https://api.github.com/repos/hyperledger/burrow/issues/933,https://api.github.com/repos/hyperledger/burrow/issues/comments/444467987,https://github.com/hyperledger/burrow/issues/933#issuecomment-444467987,compleatang,Closing this issue in favor of implementing identifyTx,2018-12-05 12:26:28,2018-12-05 12:26:28
https://api.github.com/repos/hyperledger/burrow/issues/931,https://api.github.com/repos/hyperledger/burrow/issues/comments/427475671,https://github.com/hyperledger/burrow/pull/931#issuecomment-427475671,phymbert,"You can see the result [here](https://github.com/phymbert/burrow/blob/docs-setup-multiple-validators-network/README.md)
",2018-10-05 19:33:16,2018-10-05 19:33:16
https://api.github.com/repos/hyperledger/burrow/issues/931,https://api.github.com/repos/hyperledger/burrow/issues/comments/427786484,https://github.com/hyperledger/burrow/pull/931#issuecomment-427786484,compleatang,LGTM.,2018-10-08 10:30:25,2018-10-08 10:30:25
https://api.github.com/repos/hyperledger/burrow/issues/931,https://api.github.com/repos/hyperledger/burrow/issues/comments/427887592,https://github.com/hyperledger/burrow/pull/931#issuecomment-427887592,phymbert,"@silasdavis , I will do it in coming days, thanks for your review",2018-10-08 15:55:31,2018-10-08 15:55:31
https://api.github.com/repos/hyperledger/burrow/issues/931,https://api.github.com/repos/hyperledger/burrow/issues/comments/427982523,https://github.com/hyperledger/burrow/pull/931#issuecomment-427982523,compleatang,@phymbert that wasn't exactly coming days :-D,2018-10-08 21:18:59,2018-10-08 21:18:59
https://api.github.com/repos/hyperledger/burrow/issues/929,https://api.github.com/repos/hyperledger/burrow/issues/comments/427315802,https://github.com/hyperledger/burrow/pull/929#issuecomment-427315802,phymbert,"Hello @gregdhill , kindly review #926 in order to avoid conflicts in vm.go and vm_test.go",2018-10-05 10:18:59,2018-10-05 10:18:59
https://api.github.com/repos/hyperledger/burrow/issues/929,https://api.github.com/repos/hyperledger/burrow/issues/comments/427324137,https://github.com/hyperledger/burrow/pull/929#issuecomment-427324137,gregdhill,"Thanks @phymbert, looks good to me! I don't think it will conflict, but will await review by @seanyoung or @silasdavis.",2018-10-05 10:53:30,2018-10-05 10:53:30
https://api.github.com/repos/hyperledger/burrow/issues/929,https://api.github.com/repos/hyperledger/burrow/issues/comments/427804623,https://github.com/hyperledger/burrow/pull/929#issuecomment-427804623,seanyoung,"@gregdhill just talking to @silasdavis and it would nice to include a solidity test case as well. I sent you an example which could be integrated.
Also maybe ""ErrorCodeInvalidStateChange"" should be called something like ""ErrorIllegalStorageWrite"".
The solidity compiler will output a staticcall for any call to a pure/view function and the person writing the contract a might not be aware of the staticcall opcode, so the error should be helpful for them too.",2018-10-08 11:49:52,2018-10-08 11:50:48
https://api.github.com/repos/hyperledger/burrow/issues/929,https://api.github.com/repos/hyperledger/burrow/issues/comments/431586328,https://github.com/hyperledger/burrow/pull/929#issuecomment-431586328,silasdavis,Closing for: https://github.com/hyperledger/burrow/pull/940,2018-10-20 14:25:51,2018-10-20 14:25:51
https://api.github.com/repos/hyperledger/burrow/issues/927,https://api.github.com/repos/hyperledger/burrow/issues/comments/428222002,https://github.com/hyperledger/burrow/pull/927#issuecomment-428222002,silasdavis,Thanks!,2018-10-09 14:47:41,2018-10-09 14:47:41
https://api.github.com/repos/hyperledger/burrow/issues/926,https://api.github.com/repos/hyperledger/burrow/issues/comments/428719556,https://github.com/hyperledger/burrow/pull/926#issuecomment-428719556,phymbert,"@silasdavis Yes I ""reused"" the same approach (+ I learnt a lot about slice and backed array), gr8t! please review",2018-10-10 20:29:01,2018-10-10 20:29:01
https://api.github.com/repos/hyperledger/burrow/issues/924,https://api.github.com/repos/hyperledger/burrow/issues/comments/426644513,https://github.com/hyperledger/burrow/pull/924#issuecomment-426644513,seanyoung,"That's a great feature, thank you",2018-10-03 13:49:37,2018-10-03 13:49:37
https://api.github.com/repos/hyperledger/burrow/issues/922,https://api.github.com/repos/hyperledger/burrow/issues/comments/428222255,https://github.com/hyperledger/burrow/pull/922#issuecomment-428222255,silasdavis,LGTM,2018-10-09 14:48:18,2018-10-09 14:48:18
https://api.github.com/repos/hyperledger/burrow/issues/921,https://api.github.com/repos/hyperledger/burrow/issues/comments/426858526,https://github.com/hyperledger/burrow/issues/921#issuecomment-426858526,silasdavis,Sounds good to me. Seems clear from sample but just to check you mean just export the Transactor type not introduce a interface. ,2018-10-04 01:46:41,2018-10-04 01:46:41
https://api.github.com/repos/hyperledger/burrow/issues/921,https://api.github.com/repos/hyperledger/burrow/issues/comments/427303333,https://github.com/hyperledger/burrow/issues/921#issuecomment-427303333,phymbert,"Hello @silasdavis , yes it was confusing to name it Interface, I have updated the summary. PR #922  created.",2018-10-05 09:32:10,2018-10-05 09:32:10
https://api.github.com/repos/hyperledger/burrow/issues/920,https://api.github.com/repos/hyperledger/burrow/issues/comments/424685854,https://github.com/hyperledger/burrow/pull/920#issuecomment-424685854,silasdavis,yeah much nicer,2018-09-26 11:48:09,2018-09-26 11:48:09
https://api.github.com/repos/hyperledger/burrow/issues/919,https://api.github.com/repos/hyperledger/burrow/issues/comments/424296356,https://github.com/hyperledger/burrow/issues/919#issuecomment-424296356,compleatang,@anume1234 can you give us more context on what the issue is here? did you have a chain running before doing the `burrow deploy` ? ,2018-09-25 10:51:52,2018-09-25 10:51:52
https://api.github.com/repos/hyperledger/burrow/issues/919,https://api.github.com/repos/hyperledger/burrow/issues/comments/428361964,https://github.com/hyperledger/burrow/issues/919#issuecomment-428361964,compleatang,am closing this issue. feel free to reopen if there is an actual problem here or visit with the community int he #burrow room at chat.hyperledger.org,2018-10-09 21:38:20,2018-10-09 21:38:20
https://api.github.com/repos/hyperledger/burrow/issues/917,https://api.github.com/repos/hyperledger/burrow/issues/comments/423594013,https://github.com/hyperledger/burrow/pull/917#issuecomment-423594013,compleatang,Thanks for breaking these into commits. Much easier to review! 😎,2018-09-21 16:25:42,2018-09-21 16:25:42
https://api.github.com/repos/hyperledger/burrow/issues/914,https://api.github.com/repos/hyperledger/burrow/issues/comments/422030553,https://github.com/hyperledger/burrow/pull/914#issuecomment-422030553,seanyoung,Thank you,2018-09-17 14:06:13,2018-09-17 14:06:13
https://api.github.com/repos/hyperledger/burrow/issues/912,https://api.github.com/repos/hyperledger/burrow/issues/comments/422776695,https://github.com/hyperledger/burrow/pull/912#issuecomment-422776695,seanyoung,"storage/cache_db.go line 45 contains a bug statement.
as @silasdavis is away let's merge anyway and I will fix up afterwards.",2018-09-19 12:04:51,2018-09-19 12:04:51
https://api.github.com/repos/hyperledger/burrow/issues/909,https://api.github.com/repos/hyperledger/burrow/issues/comments/421316599,https://github.com/hyperledger/burrow/issues/909#issuecomment-421316599,silasdavis,"Thanks, we'll make this change. It seems like this was unimplemented at some point. We should read this from the VM params where it is already defined. ",2018-09-14 10:40:43,2018-09-14 10:40:43
https://api.github.com/repos/hyperledger/burrow/issues/908,https://api.github.com/repos/hyperledger/burrow/issues/comments/421318603,https://github.com/hyperledger/burrow/issues/908#issuecomment-421318603,silasdavis,"I think this fix would have some unintended consequences since the permissions codes expects the fallback permission account to have all bits in the mask 'set'. We should fallback to `DefaultAccountPermissions` to which the global account is initialised. However this would also need to be handled in the snatives.

I think it might be better to ensure that the global permissions account is always defined. I presume difficulty is you may need hack on your account/address model to get the zero address defined? We may want to handle the global permissions a distinguished piece of state rather than treating it as a pseudo account just because that sort of works....",2018-09-14 10:47:39,2018-09-14 10:47:39
https://api.github.com/repos/hyperledger/burrow/issues/908,https://api.github.com/repos/hyperledger/burrow/issues/comments/424819247,https://github.com/hyperledger/burrow/issues/908#issuecomment-424819247,knkski,"Yeah, the difficulty arises in that if we attempt to set up the global permissions address for the unit tests, `evm.HasPermission` gets called and panics. Not sure how to hack our way around that unless burrow switches to returning an error instead of panicking.",2018-09-26 18:19:48,2018-09-26 18:19:48
https://api.github.com/repos/hyperledger/burrow/issues/908,https://api.github.com/repos/hyperledger/burrow/issues/comments/434631970,https://github.com/hyperledger/burrow/issues/908#issuecomment-434631970,silasdavis,"Sorry about the delay on getting back on this I've been away a lot this month.

In your previous comment are you saying that in the process of setting the global permission address you are hitting the code that panics? Could you link some code? I would have thought you can set up some initial accounts without that being an issue.

Here's where we do that in Burrow: https://github.com/hyperledger/burrow/blob/develop/execution/state.go#L146-L151 ",2018-10-31 10:13:17,2018-10-31 10:13:17
https://api.github.com/repos/hyperledger/burrow/issues/905,https://api.github.com/repos/hyperledger/burrow/issues/comments/419956672,https://github.com/hyperledger/burrow/issues/905#issuecomment-419956672,seanyoung,"Unfortunately this is not enough information to debug this. Would it be possible to generate a core file and run gdb on it, and then ""disassemble $pc"". You might need to set the core ulimit to unlimited with ""ulimit -c unlimited""

Since signal is illegal instruction I suspect there is a package which uses new sse instructions or so, for example https://github.com/tmthrgd/go-hex which uses sse instructions which might not be supported on all cpus.
So what cpu are you using? (output of cat /proc/cpuinfo please)",2018-09-10 15:33:28,2018-09-10 15:33:28
https://api.github.com/repos/hyperledger/burrow/issues/905,https://api.github.com/repos/hyperledger/burrow/issues/comments/420440708,https://github.com/hyperledger/burrow/issues/905#issuecomment-420440708,GoodFaithParadigm8,"An ole Pentium 4 that was at one time a decent server. Haven't got around to generating the core file but I'll give it a shot.

processor	: 0
vendor_id	: GenuineIntel
cpu family	: 6
model		: 37
model name	: Intel(R) Pentium(R) CPU        G6950  @ 2.80GHz
stepping	: 2
microcode	: 0x11
cpu MHz		: 1330.000
cache size	: 3072 KB
physical id	: 0
siblings	: 2
core id		: 0
cpu cores	: 2
apicid		: 0
initial apicid	: 0
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm popcnt lahf_lm ssbd ibrs ibpb stibp kaiser tpr_shadow vnmi flexpriority ept vpid dtherm arat flush_l1d
bugs		: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf
bogomips	: 5599.51
clflush size	: 64
cache_alignment	: 64
address sizes	: 36 bits physical, 48 bits virtual
power management:

processor	: 1
vendor_id	: GenuineIntel
cpu family	: 6
model		: 37
model name	: Intel(R) Pentium(R) CPU        G6950  @ 2.80GHz
stepping	: 2
microcode	: 0x11
cpu MHz		: 1330.000
cache size	: 3072 KB
physical id	: 0
siblings	: 2
core id		: 2
cpu cores	: 2
apicid		: 4
initial apicid	: 4
fpu		: yes
fpu_exception	: yes
cpuid level	: 11
wp		: yes
flags		: fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf pni dtes64 monitor ds_cpl vmx est tm2 ssse3 cx16 xtpr pdcm popcnt lahf_lm ssbd ibrs ibpb stibp kaiser tpr_shadow vnmi flexpriority ept vpid dtherm arat flush_l1d
bugs		: cpu_meltdown spectre_v1 spectre_v2 spec_store_bypass l1tf
bogomips	: 5599.51
clflush size	: 64
cache_alignment	: 64
address sizes	: 36 bits physical, 48 bits virtual
power management:
",2018-09-11 22:01:12,2018-09-11 22:01:12
https://api.github.com/repos/hyperledger/burrow/issues/905,https://api.github.com/repos/hyperledger/burrow/issues/comments/420636195,https://github.com/hyperledger/burrow/issues/905#issuecomment-420636195,seanyoung,"go-hex requires at least sse4.1 (it uses the PINSRD instruction).
See here:
https://github.com/tmthrgd/go-hex/blob/master/hex_amd64.go#L29
Now this also looks like it will not work on non-x86; it assumes SSE when AVX is not present, which is not true for e.g. arm.
This needs to be fixed in go-hex.",2018-09-12 12:50:54,2018-09-12 12:50:54
https://api.github.com/repos/hyperledger/burrow/issues/905,https://api.github.com/repos/hyperledger/burrow/issues/comments/434630348,https://github.com/hyperledger/burrow/issues/905#issuecomment-434630348,silasdavis,"Thanks for diagnosis @seanyoung 

go-hex was introduced in large part because it has an an `EncodeUpper` function that gives you upper case hex - which we sort of need for consistency across go-amino and other endpoitns. That combined with an order of magnitude speedup seemed like a good enough reason to use the library. However, this is an unintended consequence, and now we use protobuf we are spending less time than we used to doing hex encoding. I would consider going back to stdlib - I'm not sure how many people this issue effects.

Raised a bug upstream: https://github.com/tmthrgd/go-hex/issues/3",2018-10-31 10:07:41,2018-10-31 10:07:41
https://api.github.com/repos/hyperledger/burrow/issues/905,https://api.github.com/repos/hyperledger/burrow/issues/comments/434654888,https://github.com/hyperledger/burrow/issues/905#issuecomment-434654888,seanyoung,I've created a PR for go-hex: https://github.com/tmthrgd/go-hex/pull/4,2018-10-31 11:38:14,2018-10-31 11:38:14
https://api.github.com/repos/hyperledger/burrow/issues/905,https://api.github.com/repos/hyperledger/burrow/issues/comments/435396294,https://github.com/hyperledger/burrow/issues/905#issuecomment-435396294,silasdavis,fixed upstream: https://github.com/tmthrgd/go-hex/issues/3 ,2018-11-02 14:23:27,2018-11-02 14:23:27
https://api.github.com/repos/hyperledger/burrow/issues/904,https://api.github.com/repos/hyperledger/burrow/issues/comments/418334279,https://github.com/hyperledger/burrow/pull/904#issuecomment-418334279,silasdavis,Thanks!,2018-09-04 11:34:39,2018-09-04 11:34:39
https://api.github.com/repos/hyperledger/burrow/issues/901,https://api.github.com/repos/hyperledger/burrow/issues/comments/417646929,https://github.com/hyperledger/burrow/pull/901#issuecomment-417646929,silasdavis,"Fabulous!

I missed RevertABI :+1: ",2018-08-31 12:20:30,2018-08-31 12:20:30
https://api.github.com/repos/hyperledger/burrow/issues/899,https://api.github.com/repos/hyperledger/burrow/issues/comments/423595724,https://github.com/hyperledger/burrow/issues/899#issuecomment-423595724,compleatang,It should be off by default in my view.,2018-09-21 16:30:56,2018-09-21 16:30:56
https://api.github.com/repos/hyperledger/burrow/issues/898,https://api.github.com/repos/hyperledger/burrow/issues/comments/417352746,https://github.com/hyperledger/burrow/pull/898#issuecomment-417352746,seanyoung,This fixes #857.,2018-08-30 15:04:37,2018-08-30 15:04:37
https://api.github.com/repos/hyperledger/burrow/issues/895,https://api.github.com/repos/hyperledger/burrow/issues/comments/415727117,https://github.com/hyperledger/burrow/issues/895#issuecomment-415727117,yihua1995,"Sorry, my fault.",2018-08-24 11:04:36,2018-08-24 11:04:36
https://api.github.com/repos/hyperledger/burrow/issues/886,https://api.github.com/repos/hyperledger/burrow/issues/comments/414646408,https://github.com/hyperledger/burrow/pull/886#issuecomment-414646408,silasdavis,FIPF,2018-08-21 11:47:06,2018-08-21 11:47:06
https://api.github.com/repos/hyperledger/burrow/issues/882,https://api.github.com/repos/hyperledger/burrow/issues/comments/414582247,https://github.com/hyperledger/burrow/pull/882#issuecomment-414582247,silasdavis,incorporated into #883 ,2018-08-21 07:46:38,2018-08-21 07:46:38
https://api.github.com/repos/hyperledger/burrow/issues/881,https://api.github.com/repos/hyperledger/burrow/issues/comments/414589677,https://github.com/hyperledger/burrow/pull/881#issuecomment-414589677,silasdavis,closing for #884 ,2018-08-21 08:12:19,2018-08-21 08:12:19
https://api.github.com/repos/hyperledger/burrow/issues/866,https://api.github.com/repos/hyperledger/burrow/issues/comments/440244081,https://github.com/hyperledger/burrow/issues/866#issuecomment-440244081,silasdavis,"We are lacking a nice terminal format against burrow's logger. go-kit/log's terminal output is kind of rubbish we should port a version of something like: https://github.com/inconshreveable/log15/blob/master/format.go 

Personally I would like to see:
- Left aligned colourised output of key value in square brackets
- Key-values aligned
- Possibly a default sort order over keys (which we could add to) see sort_logger
- Striped colouring of keys/values
- Generated colours for the same key (by doing a quick hash)
- A custom log format (we have template support) for burrow deploy specifically

We should use prettiest possible format for burrow deploy by default. ",2018-11-20 11:41:23,2018-11-20 11:41:23
https://api.github.com/repos/hyperledger/burrow/issues/866,https://api.github.com/repos/hyperledger/burrow/issues/comments/457211631,https://github.com/hyperledger/burrow/issues/866#issuecomment-457211631,silasdavis,Note: adding vent to this,2019-01-24 14:16:17,2019-01-24 14:16:17
https://api.github.com/repos/hyperledger/burrow/issues/866,https://api.github.com/repos/hyperledger/burrow/issues/comments/457212396,https://github.com/hyperledger/burrow/issues/866#issuecomment-457212396,silasdavis,Also could be tackled with this: https://github.com/hyperledger/burrow/issues/995,2019-01-24 14:18:36,2019-01-24 14:18:36
https://api.github.com/repos/hyperledger/burrow/issues/866,https://api.github.com/repos/hyperledger/burrow/issues/comments/462356683,https://github.com/hyperledger/burrow/issues/866#issuecomment-462356683,sparstormo,Hi! I'll help on this.,2019-02-11 14:55:39,2019-02-11 14:55:39
https://api.github.com/repos/hyperledger/burrow/issues/866,https://api.github.com/repos/hyperledger/burrow/issues/comments/462487105,https://github.com/hyperledger/burrow/issues/866#issuecomment-462487105,silasdavis,@sparstormo great thanks. I believe our maintainer @phymbert was going to take a look on this. It would be great if he could get you involved.,2019-02-11 20:44:43,2019-02-11 20:44:43
https://api.github.com/repos/hyperledger/burrow/issues/866,https://api.github.com/repos/hyperledger/burrow/issues/comments/464429064,https://github.com/hyperledger/burrow/issues/866#issuecomment-464429064,phymbert,"Hi @sparstormo , I am pleased to review your contribution when you are ready.",2019-02-17 08:34:28,2019-02-17 08:34:28
https://api.github.com/repos/hyperledger/burrow/issues/866,https://api.github.com/repos/hyperledger/burrow/issues/comments/465192157,https://github.com/hyperledger/burrow/issues/866#issuecomment-465192157,sparstormo,"Hi Pierrick! I was at eth Denver last week and so didn't get anything done.
I'll get in there and try to figure out the code base this week.

Thanks!

On Sun, Feb 17, 2019 at 1:34 AM Pierrick Hymbert <notifications@github.com>
wrote:

> Hi @sparstormo <https://github.com/sparstormo> , I am pleased to review
> your contribution when you are ready.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/hyperledger/burrow/issues/866#issuecomment-464429064>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AgdVSg6PQeD8JW_S-DOaXXWT77KGO1Z0ks5vORQYgaJpZM4V_6BS>
> .
>
",2019-02-19 16:00:21,2019-02-19 16:00:21
https://api.github.com/repos/hyperledger/burrow/issues/866,https://api.github.com/repos/hyperledger/burrow/issues/comments/465314718,https://github.com/hyperledger/burrow/issues/866#issuecomment-465314718,phymbert,"Good to hear, appreciate your effort. ",2019-02-19 21:20:25,2019-02-19 21:20:25
https://api.github.com/repos/hyperledger/burrow/issues/860,https://api.github.com/repos/hyperledger/burrow/issues/comments/413534671,https://github.com/hyperledger/burrow/pull/860#issuecomment-413534671,silasdavis,"This looks good @fulldecent ... looks like there is a failure in a governance test, may be teething problems with our move of burrow deploy. Could you rebase against develop to see if that fixes it - otherwise I'll just merge and look into it.",2018-08-16 12:51:43,2018-08-16 12:51:43
https://api.github.com/repos/hyperledger/burrow/issues/860,https://api.github.com/repos/hyperledger/burrow/issues/comments/413698809,https://github.com/hyperledger/burrow/pull/860#issuecomment-413698809,fulldecent,"Found test bug, rerunning",2018-08-16 22:05:11,2018-08-16 22:05:11
https://api.github.com/repos/hyperledger/burrow/issues/860,https://api.github.com/repos/hyperledger/burrow/issues/comments/413709672,https://github.com/hyperledger/burrow/pull/860#issuecomment-413709672,fulldecent,"@silasdavis OK, I got my tests to pass, I think the remainder now is not related to me",2018-08-16 23:02:04,2018-08-16 23:02:04
https://api.github.com/repos/hyperledger/burrow/issues/860,https://api.github.com/repos/hyperledger/burrow/issues/comments/413766778,https://github.com/hyperledger/burrow/pull/860#issuecomment-413766778,silasdavis,"Thanks for this, please let me know via issues or on Hyperledger chat if you've be interested in working on any other issues. We are always looking for additional maintainers.",2018-08-17 06:04:33,2018-08-17 06:04:33
https://api.github.com/repos/hyperledger/burrow/issues/858,https://api.github.com/repos/hyperledger/burrow/issues/comments/413164026,https://github.com/hyperledger/burrow/issues/858#issuecomment-413164026,compleatang,issue migrated from https://github.com/monax/bosmarmot/issues/106,2018-08-15 10:59:04,2018-08-15 10:59:04
https://api.github.com/repos/hyperledger/burrow/issues/858,https://api.github.com/repos/hyperledger/burrow/issues/comments/440250694,https://github.com/hyperledger/burrow/issues/858#issuecomment-440250694,silasdavis,"@seanyoung and I discussed this today. A few points:

- We can introduce an registration interface `Register(codeHash []byte, abi *abi.AbiSpec)` this could be implemented against existing namereg but we may want to consider if it ought to be its own storage.

- We should replace `Account.Code` with `Account.CodeHash` and start storing code separately. This has two advantages: it de-duplicates code storage, and it gives us a pre-computed code hash with which we can `Lookup(codeHash []byte) *abi.AbiSpec`.

- If we provide the option to provide code hash to abi mappings with burrow deploy (in CallTx) then we will register ABI's on a best effort basis. It is perfectly legal to have contracts with no ABI (e.g. assembly generated). We also anticipate some corner cases where code hashes do not match so we should ideally have a weak assumption of ABI availability.

- This method should work for contracts generated by factory contracts (since we just look up by code hash). For these contracts when we compile (via deploy) we will need to build the mapping from binary files corresponding to individual contracts to those contracts ABIs. We do this by hashing the bytecode for each contract. The solidity compiler can be made to generate separate binary files and ABIs for each included file so at compile time we can collate this information. Without this mapping we would not be able to reassociate ABIs with autonomously created contracts.

- We may need to normalise metadata at the end of solidity generated bytecode in order to get reliable hash collisions for the 'same code'.",2018-11-20 12:07:25,2018-11-20 12:09:01
https://api.github.com/repos/hyperledger/burrow/issues/858,https://api.github.com/repos/hyperledger/burrow/issues/comments/446496295,https://github.com/hyperledger/burrow/issues/858#issuecomment-446496295,phymbert,"+1 on this feature request. Additionnaly it would be great to add an helper method (for example in Transactor API) to call contract and map function inputs/outputs automatically to go types:
```go
var returnValues []interface{} = transactor.Call(callTx, ""contractFunctionName"", arg1, arg2, argX)
```",2018-12-12 08:01:00,2018-12-12 08:02:00
https://api.github.com/repos/hyperledger/burrow/issues/857,https://api.github.com/repos/hyperledger/burrow/issues/comments/413163794,https://github.com/hyperledger/burrow/issues/857#issuecomment-413163794,compleatang,migrated from https://github.com/monax/bosmarmot/issues/43 ,2018-08-15 10:57:49,2018-08-15 10:57:49
https://api.github.com/repos/hyperledger/burrow/issues/857,https://api.github.com/repos/hyperledger/burrow/issues/comments/415811238,https://github.com/hyperledger/burrow/issues/857#issuecomment-415811238,silasdavis,Feel like we are some % done on this - @seanyoung ?,2018-08-24 16:27:31,2018-08-24 16:27:31
https://api.github.com/repos/hyperledger/burrow/issues/857,https://api.github.com/repos/hyperledger/burrow/issues/comments/417383294,https://github.com/hyperledger/burrow/issues/857#issuecomment-417383294,seanyoung,"Nearly all warnings are gone. solidity complains that some functions which contain ""assembly mstore"" should be declared pure, which is just wrong. Otherwise all done",2018-08-30 16:32:59,2018-08-30 16:32:59
https://api.github.com/repos/hyperledger/burrow/issues/853,https://api.github.com/repos/hyperledger/burrow/issues/comments/413153194,https://github.com/hyperledger/burrow/issues/853#issuecomment-413153194,compleatang,"In the above setup can you confirm you're starting two nodes and that they're properly connected to one another? Your `burrow.toml` doesn't have a Seeds or PersistentPeers field filled in. With two validator nodes that have equal bonded tokens, you'll need both online and connected in order for the chain to have quorum and move forward. 

If you're just testing locally we highly recommend just using one `full` account rather than a `full` and a `validator` however when you move to early POC / testnet stages then having multiple `validators` can be helpful. In such an instance you'll want to fill in the URLs of the peer ports for those nodes in the PersistentPeers and Seeds fields in the `burrow.toml` so that the nodes can locate one another. ",2018-08-15 10:09:37,2018-08-15 10:09:37
https://api.github.com/repos/hyperledger/burrow/issues/853,https://api.github.com/repos/hyperledger/burrow/issues/comments/413462256,https://github.com/hyperledger/burrow/issues/853#issuecomment-413462256,miguelmartinezinf,"Okey, as I can see I should set up two nodes because I have 2 validator accounts.
What does the Seeds field means? What about node address, is that option compulsory for this scenario?
Thanks in advance",2018-08-16 08:09:26,2018-08-16 08:09:26
https://api.github.com/repos/hyperledger/burrow/issues/853,https://api.github.com/repos/hyperledger/burrow/issues/comments/413515447,https://github.com/hyperledger/burrow/issues/853#issuecomment-413515447,compleatang,"high level, you have two nodes and they need to connect to one another in order to have quorum on the network you've defined. in order to do that you'll need to fill in the Seeds or PersistentPeers fields in the burrow.toml for the URL of the ""other node"". you'll only need to do this for one of the nodes and have it dial the other. once the p2p ports of both nodes are connected to one another then you'll start to create blocks.

the address is the signing key that a particular node will use. that's different from the URL which will be used to dial another node. ",2018-08-16 11:34:26,2018-08-16 11:34:26
https://api.github.com/repos/hyperledger/burrow/issues/853,https://api.github.com/repos/hyperledger/burrow/issues/comments/424468954,https://github.com/hyperledger/burrow/issues/853#issuecomment-424468954,phymbert,"Hello,

I faced same issue in previous version of Burrow but since version 0.22.0 w/ PR #918 and #917 it works perfectly, nice job 🥇 ",2018-09-25 19:21:38,2018-09-25 19:21:38
https://api.github.com/repos/hyperledger/burrow/issues/853,https://api.github.com/repos/hyperledger/burrow/issues/comments/424667255,https://github.com/hyperledger/burrow/issues/853#issuecomment-424667255,miguelmartinezinf,"Hi @phymbert , 
I would like to try it on my own, could you share your configuration files? toml and genesis-spec ?
Thanks in advance",2018-09-26 10:33:04,2018-09-26 10:33:04
https://api.github.com/repos/hyperledger/burrow/issues/853,https://api.github.com/repos/hyperledger/burrow/issues/comments/425650082,https://github.com/hyperledger/burrow/issues/853#issuecomment-425650082,phymbert,"Hello @miguelmartinezinf 

please find below all steps I followed, hope you will reproduce easily.

### Install latest burrow from source

```bash
# be sure to be on latest burrow
mkdir -p $GOPATH/src/hyperledger
cd $GOPATH/src/hyperledger
git clone https://github.com/hyperledger/burrow.git
cd burrow
git checkout develop
go install github.com/hyperledger/burrow/cmd/burrow
(burrow --version | grep 0.22.0) || echo ""not latest""
```

### Configure chain
```bash
 rm -rf .burrow* .keys*
 burrow spec -f2 | burrow configure -s- > .burrow_init.toml
```

### Generate one additional key in another local store for seed node
```bash
 burrow spec -f1 | burrow configure --keysdir=.keys_seed -s- > /dev/null
```

### Make 2 validator nodes and one seed node config files
From the generated `.burrow_init.toml `file, create new files for each node, and change the content, example:

#### Seed node `.burrow_seed.toml` modified line from `.burrow_init.toml`
```toml
[Tendermint]
  SeedMode = true
  ListenAddress = ""tcp://0.0.0.0:10000""
  Moniker = ""seed_node_0""
  TendermintRoot = "".burrow_seed_0""

[Execution]

[Keys]
  GRPCServiceEnabled = false
  AllowBadFilePermissions = true
  RemoteAddress = """"
  KeysDirectory = "".keys_seed""

[RPC]
  [RPC.Info]
    Enabled = true
    ListenAddress = ""tcp://127.0.0.1:10001""
  [RPC.Profiler]
    Enabled = false
  [RPC.GRPC]
    Enabled = false
  [RPC.Metrics]
    Enabled = false
```

#### Validator 1 node `.burrow_val0.toml` modified line from `.burrow_init.toml`

```toml
[Tendermint]
  Seeds = ""PUT_HERE_SEED_NODE_ID@LISTEN_EXTERNAL_ADDRESS""
  SeedMode = false
  PersistentPeers = """"
  ListenAddress = ""tcp://0.0.0.0:20000""
  Moniker = ""val_node_0""
  TendermintRoot = "".burrow_node0""

[Execution]

[Keys]
  GRPCServiceEnabled = false
  AllowBadFilePermissions = true
  RemoteAddress = """"
  KeysDirectory = "".keys""

[RPC]
  [RPC.Info]
    Enabled = true
    ListenAddress = ""tcp://127.0.0.1:20001""
  [RPC.Profiler]
    Enabled = false
  [RPC.GRPC]
    Enabled = true
    ListenAddress = ""127.0.0.1:20002""
  [RPC.Metrics]
    Enabled = false
```

#### Validator 2 node `.burrow_val1.toml` modified line from `.burrow_init.toml`

```toml
[Tendermint]
  Seeds = ""PUT_HERE_SEED_NODE_ID@LISTEN_EXTERNAL_ADDRESS""
  SeedMode = false
  PersistentPeers = """"
  ListenAddress = ""tcp://0.0.0.0:30000""
  Moniker = ""val_node_1""
  TendermintRoot = "".burrow_node1""

[Execution]

[Keys]
  GRPCServiceEnabled = false
  AllowBadFilePermissions = true
  RemoteAddress = """"
  KeysDirectory = "".keys""

[RPC]
  [RPC.Info]
    Enabled = true
    ListenAddress = ""tcp://127.0.0.1:30001""
  [RPC.Profiler]
    Enabled = false
  [RPC.GRPC]
    Enabled = true
    ListenAddress = ""127.0.0.1:30002""
  [RPC.Metrics]
    Enabled = false
```

#### Start the seed node
```bash
burrow start --validator-address=`basename .keys_seed/data/* .json` --config=.burrow_seed.toml
```

#### Find seed node external address
Tendermint requires strict and routable address (not loopback, local etc), you can find the listen address with this command:
```bash
SEED_URL=`curl -s 127.0.0.1:10001/network | jq -r '.result.ThisNode | [.ID, .ListenAddress] | join(""@"") | ascii_downcase'`
sed -i s%PUT_HERE_SEED_NODE_ID@LISTEN_EXTERNAL_ADDRESS%${SEED_URL}% .burrow_val0.toml
sed -i s%PUT_HERE_SEED_NODE_ID@LISTEN_EXTERNAL_ADDRESS%${SEED_URL}% .burrow_val1.toml
```

#### Start validator nodes
```bash
burrow start --validator-index=0 --config=.burrow_val0.toml
burrow start --validator-index=1 --config=.burrow_val1.toml
```

#### Disable Tendermint strict address if required
If you face _Cannot add non-routable address_ message in logs, it means your listen address is not routable for tendermint.
You can disable this check by modified default tendermint/config.go:46
```go
conf.P2P.AddrBookStrict = false
```

### Send transactions

#### Create a deploy file _test.yaml_
```yaml
jobs:
- name: sendTxTest1
  send:
      destination: PUT_HERE_ONE_ACCOUNT_OF_YOUR_GENESIS
      amount: 42
```

#### Send it from a node
```bash
SIGNING_ADDRESS=HERE_ONE_ADDRESS_OF_THE_GENESIS
burrow deploy --address $SIGNING_ADDRESS -f test.yaml -u 127.0.0.1:20002
```
It outputs:
```
*****Executing Job*****

Job Name                                    => defaultAddr


*****Executing Job*****

Job Name                                    => sendTxTest1


Transaction Hash                            => 41E0C13D1515F83E6FFDC5032C60682BE1F5B19A
Writing [test.output.json] to current directory
```

### Do it with persistent peers
if you face issue with seed node mode sync (as me), you can easily connect 2 validator nodes directly by setting persistent peers.

```toml
[Tendermint]
  Seeds = """"
  SeedMode = false
  PersistentPeers = ""PUT_HERE_NODE_0_ID@LISTEN_EXTERNAL_ADDRESS""
  ListenAddress = ""tcp://0.0.0.0:30000""
  Moniker = ""val_node_1""
  TendermintRoot = "".burrow_node1""
```

```bash
NODE_0_URL=`curl -s 127.0.0.1:20001/network | jq -r '.result.ThisNode | [.ID, .ListenAddress] | join(""@"") | ascii_downcase'`
sed -i s%PUT_HERE_NODE_0_ID@LISTEN_EXTERNAL_ADDRESS%${NODE_0_URL}% .burrow_val1.toml
```

Enjoy burrow  🥇 ",2018-09-29 14:39:54,2018-09-29 14:39:54
https://api.github.com/repos/hyperledger/burrow/issues/853,https://api.github.com/repos/hyperledger/burrow/issues/comments/427368384,https://github.com/hyperledger/burrow/issues/853#issuecomment-427368384,compleatang,@phymbert that's wonderful and concise! Any chance you could dump that into a markdown file in the docs folder as it could be an easier static reference for folks wanting to move beyond single node chains? ,2018-10-05 13:36:22,2018-10-05 13:36:22
https://api.github.com/repos/hyperledger/burrow/issues/853,https://api.github.com/repos/hyperledger/burrow/issues/comments/427369128,https://github.com/hyperledger/burrow/issues/853#issuecomment-427369128,phymbert,"@compleatang thank you, sure, I will. But first I need to understand why seed mode randomly works with my setup",2018-10-05 13:38:55,2018-10-05 13:38:55
https://api.github.com/repos/hyperledger/burrow/issues/853,https://api.github.com/repos/hyperledger/burrow/issues/comments/428352821,https://github.com/hyperledger/burrow/issues/853#issuecomment-428352821,compleatang,I'm closing this for now. OP please reopen if your issue is not addressed. ,2018-10-09 21:08:17,2018-10-09 21:08:17
https://api.github.com/repos/hyperledger/burrow/issues/851,https://api.github.com/repos/hyperledger/burrow/issues/comments/413540230,https://github.com/hyperledger/burrow/issues/851#issuecomment-413540230,silasdavis,fixed in #859 ,2018-08-16 13:11:35,2018-08-16 13:11:35
https://api.github.com/repos/hyperledger/burrow/issues/850,https://api.github.com/repos/hyperledger/burrow/issues/comments/434636072,https://github.com/hyperledger/burrow/issues/850#issuecomment-434636072,silasdavis,Fixed by: https://github.com/hyperledger/burrow/commit/9129ede4a425d9442e8fde76274369e1394304c3#diff-b7726547377d76ab3a5779800d54a272R256,2018-10-31 10:27:07,2018-10-31 10:27:07
https://api.github.com/repos/hyperledger/burrow/issues/848,https://api.github.com/repos/hyperledger/burrow/issues/comments/412487710,https://github.com/hyperledger/burrow/issues/848#issuecomment-412487710,miguelmartinezinf,"After long time I noticed that _the problem came from the Solidity Compiler_. Bosmarmot uses native Solidity Compiler, so the Solidity Compiler library (solcjs) is not valid for it. So forget **npm** section at [https://solidity.readthedocs.io/en/develop/installing-solidity.html](https://solidity.readthedocs.io/en/develop/installing-solidity.html )and goes for **Binary Packages** section

**Solution:** 
1. Uninstall solcjs/solc library from npm (`npm uninstall solc`)
2. Install solidity compiler binary following this instructions:
```
sudo add-apt-repository ppa:ethereum/ethereum
sudo apt-get update
sudo apt-get install solc
```

PS: Check always burrow, bosmarmot and solc versions...",2018-08-13 11:27:37,2018-08-13 11:27:37
https://api.github.com/repos/hyperledger/burrow/issues/847,https://api.github.com/repos/hyperledger/burrow/issues/comments/413163564,https://github.com/hyperledger/burrow/issues/847#issuecomment-413163564,compleatang,Thanks for the report. We're currently finalizing the migration of bos to burrow. Once that's complete we'll be able to convert this into a test case and ferret out the issue. ,2018-08-15 10:56:35,2018-08-15 10:56:35
https://api.github.com/repos/hyperledger/burrow/issues/847,https://api.github.com/repos/hyperledger/burrow/issues/comments/415782654,https://github.com/hyperledger/burrow/issues/847#issuecomment-415782654,silasdavis,"Thanks so much for this Luke... I'm afraid to say this was a regression introduce by yours truly - it seemed rather remarkable if it had been an undiscovered bug over all versions, but it was related to some changes to state. This is something our automated tests should have caught and we will add some to that end.

Fix in progress: https://github.com/hyperledger/burrow/pull/896 
",2018-08-24 14:49:24,2018-08-24 14:49:24
https://api.github.com/repos/hyperledger/burrow/issues/847,https://api.github.com/repos/hyperledger/burrow/issues/comments/415797849,https://github.com/hyperledger/burrow/issues/847#issuecomment-415797849,Luker501,Ok nice one. Hopefully it is sorted out now,2018-08-24 15:40:01,2018-08-24 15:40:01
https://api.github.com/repos/hyperledger/burrow/issues/846,https://api.github.com/repos/hyperledger/burrow/issues/comments/409547853,https://github.com/hyperledger/burrow/issues/846#issuecomment-409547853,j-h-scheufen,"Hi @Luker501,
this behavior is consistent with Ethereum and is not a bug. You cannot instantiate an abstract contract on chain.
The `deploy` job in the epm.yaml comprises two steps: a) compilation (which works fine) and b) deployment to chain (which fails).
The above contract would show the same behavior if you tried to deploy it on a public Ethereum chain.
See also: https://solidity.readthedocs.io/en/v0.4.21/contracts.html#abstract-contracts",2018-08-01 11:48:05,2018-08-01 11:48:05
https://api.github.com/repos/hyperledger/burrow/issues/846,https://api.github.com/repos/hyperledger/burrow/issues/comments/409548267,https://github.com/hyperledger/burrow/issues/846#issuecomment-409548267,Luker501,Ah nice one thanks. There must be another problem with my system then as I was struggling to deploy a larger contract - and I thought it might be something related to the abstract contract...  I will keep on searching ;),2018-08-01 11:50:06,2018-08-01 11:50:06
https://api.github.com/repos/hyperledger/burrow/issues/846,https://api.github.com/repos/hyperledger/burrow/issues/comments/416514093,https://github.com/hyperledger/burrow/issues/846#issuecomment-416514093,seanyoung,"Note that you can use the build: job to compile a Solidity interface; this way you have the ABI which you can use to call functions in via the interface. In the latest burrow the interface compiles to ${contractName}.bin file which can be used in e.g. query-contract job using the bin: option. For example:
```

- name: compileAbstractContract
  build:
    contract: AbstractContract.sol

- name: getBool
  query-contract:
     destination: $foobar
     function: getBool
     bin: AbstractContract.bin
```",2018-08-28 09:24:33,2018-08-28 09:25:06
https://api.github.com/repos/hyperledger/burrow/issues/832,https://api.github.com/repos/hyperledger/burrow/issues/comments/407320210,https://github.com/hyperledger/burrow/pull/832#issuecomment-407320210,silasdavis,LGTM,2018-07-24 08:10:21,2018-07-24 08:10:21
https://api.github.com/repos/hyperledger/burrow/issues/824,https://api.github.com/repos/hyperledger/burrow/issues/comments/413769524,https://github.com/hyperledger/burrow/issues/824#issuecomment-413769524,silasdavis,"This is partially completed by #867 which adds goreleaser and pushes docker images to hyperledger repo.

I think we also wanted to start pushing to apt/yum/scoop whatever. We might want separate issues for some of those.",2018-08-17 06:21:32,2018-08-17 06:21:32
https://api.github.com/repos/hyperledger/burrow/issues/824,https://api.github.com/repos/hyperledger/burrow/issues/comments/415811435,https://github.com/hyperledger/burrow/issues/824#issuecomment-415811435,silasdavis,I'm going to close this in favour or more specifc - support X - may see what outcome of request to hyperledger are too,2018-08-24 16:28:14,2018-08-24 16:28:14
https://api.github.com/repos/hyperledger/burrow/issues/820,https://api.github.com/repos/hyperledger/burrow/issues/comments/400345459,https://github.com/hyperledger/burrow/pull/820#issuecomment-400345459,compleatang,LGTM,2018-06-26 15:10:02,2018-06-26 15:10:02
https://api.github.com/repos/hyperledger/burrow/issues/819,https://api.github.com/repos/hyperledger/burrow/issues/comments/428352509,https://github.com/hyperledger/burrow/issues/819#issuecomment-428352509,compleatang,closing as we need to get way more precise for this to be actionable.,2018-10-09 21:07:23,2018-10-09 21:07:23
https://api.github.com/repos/hyperledger/burrow/issues/817,https://api.github.com/repos/hyperledger/burrow/issues/comments/400032153,https://github.com/hyperledger/burrow/issues/817#issuecomment-400032153,silasdavis,"What information in particular are you after from a transaction - can you describe the use case?

The rpc/TM `get_block` (46657 by default) returns the Tendermint view of blocks and transactions serialised within: https://github.com/hyperledger/burrow/blob/develop/rpc/service.go#L347.

However recover the transactions themselves you would need to deserialise the transactions from their go-amino encoding which would be tricky without using the go library.

We are actually providing tx metadata over the brand new execution events service, see: https://github.com/hyperledger/burrow/blob/develop/execution/events/pbevents/events.proto#L47. This doesn't provide the transaction, but we are actually storing the entire transaction in state. It would not be difficult to extend this to provide the full transactions by hash.

Just to point out - the transaction won't tell you anything about the state that results in applying it.",2018-06-25 17:30:11,2018-06-25 17:30:11
https://api.github.com/repos/hyperledger/burrow/issues/817,https://api.github.com/repos/hyperledger/burrow/issues/comments/400147997,https://github.com/hyperledger/burrow/issues/817#issuecomment-400147997,Nagaraj007,"I am able to get the transaction hash once the send/transaction is done. if i want to query using transaction hash (Txhash) through JSON RPC method, I am not able to find any method.
 a) Which  method is used in burrow to get the details of Txhash.

  E.g (After the transaction, I ll receive Txhash, I need to check details of transaction using Txhash)

 b) How i can get list of all Txhash in burrow.
 ",2018-06-26 01:32:56,2018-06-26 01:51:11
https://api.github.com/repos/hyperledger/burrow/issues/817,https://api.github.com/repos/hyperledger/burrow/issues/comments/408668333,https://github.com/hyperledger/burrow/issues/817#issuecomment-408668333,silasdavis,"I think our new events RPC will get you want you want: https://github.com/hyperledger/burrow/blob/develop/protobuf/rpcevents.proto. It is based on GRPC so you should be able to use from a variety of languages.

For example usage from Go see our tests: https://github.com/hyperledger/burrow/blob/develop/integration/rpcevents/execution_events_server_test.go 

This allows you to retrieve a full execution trace of 'exactly what happened' for past blocks or for a particular tx. You will also get the full `TxExecution` back from `BroadcastTxSync`

See: https://github.com/hyperledger/burrow/blob/develop/integration/rpctest/helpers.go#L85-L94 

You may not be familiar with GRPC, in which case find docs here: https://grpc.io/docs/ 

If you want some help getting going please show up on: https://chat.hyperledger.org/channel/burrow and we'll try to help. We'd also welcome documentation help from those going through the process - and can make additional effort if that effort can help others.",2018-07-29 10:56:08,2018-07-29 10:58:55
https://api.github.com/repos/hyperledger/burrow/issues/816,https://api.github.com/repos/hyperledger/burrow/issues/comments/428354281,https://github.com/hyperledger/burrow/issues/816#issuecomment-428354281,compleatang,unactionable.,2018-10-09 21:12:48,2018-10-09 21:12:48
https://api.github.com/repos/hyperledger/burrow/issues/815,https://api.github.com/repos/hyperledger/burrow/issues/comments/400034186,https://github.com/hyperledger/burrow/issues/815#issuecomment-400034186,silasdavis,We are pretty close to having this already on our side of the fence. Tendermint is a bit of moving target but the forensics stuff has the groundwork. We ought to be able to hack it out.,2018-06-25 17:37:10,2018-06-25 17:37:10
https://api.github.com/repos/hyperledger/burrow/issues/815,https://api.github.com/repos/hyperledger/burrow/issues/comments/465218152,https://github.com/hyperledger/burrow/issues/815#issuecomment-465218152,silasdavis,"This is still something we don't strictly have. However I do wonder if it ought to be technically superseded by dump/restore. In either case we are effectively forking the chain. However under this notion of rollback we do preserve the 'good tendermint history'.

I'm inclined to feel like tightening up our dump/restore into a managed forking/chain of chains approach would be a better single direction to focus our efforts, but open to arguments otherwise. ",2019-02-19 16:56:51,2019-02-19 16:56:51
https://api.github.com/repos/hyperledger/burrow/issues/815,https://api.github.com/repos/hyperledger/burrow/issues/comments/465227476,https://github.com/hyperledger/burrow/issues/815#issuecomment-465227476,compleatang,"yes. dump @ block(now)-100 + restore would achieve the exact same critical operational management function identified in the ticket, IMV

suggest closing.",2019-02-19 17:20:47,2019-02-19 17:20:57
https://api.github.com/repos/hyperledger/burrow/issues/811,https://api.github.com/repos/hyperledger/burrow/issues/comments/398678277,https://github.com/hyperledger/burrow/issues/811#issuecomment-398678277,compleatang,Please upgrade to bos's develop branch which is fixed against burrow's develop branch. Or downgrade to burrow 0.18.0 and bos 0.1.0. (better to upgrade those as these are solidifying).,2018-06-20 09:04:07,2018-06-20 09:04:07
https://api.github.com/repos/hyperledger/burrow/issues/811,https://api.github.com/repos/hyperledger/burrow/issues/comments/398770889,https://github.com/hyperledger/burrow/issues/811#issuecomment-398770889,basilji,It’s working after upgrading bos with latest version,2018-06-20 14:31:25,2018-06-20 14:31:25
https://api.github.com/repos/hyperledger/burrow/issues/811,https://api.github.com/repos/hyperledger/burrow/issues/comments/398781617,https://github.com/hyperledger/burrow/issues/811#issuecomment-398781617,compleatang,great. sorry for the hassles but we're through the weeds on the big incongruity changes.,2018-06-20 14:56:42,2018-06-20 14:56:42
https://api.github.com/repos/hyperledger/burrow/issues/808,https://api.github.com/repos/hyperledger/burrow/issues/comments/398213996,https://github.com/hyperledger/burrow/pull/808#issuecomment-398213996,silasdavis,The introduction of execution event wrapper means bosmarmot will need an upgrade before that integration test can pass,2018-06-18 22:21:20,2018-06-18 22:21:20
https://api.github.com/repos/hyperledger/burrow/issues/808,https://api.github.com/repos/hyperledger/burrow/issues/comments/398938888,https://github.com/hyperledger/burrow/pull/808#issuecomment-398938888,silasdavis,"If nowhere else, this needs a close read on execution/state.go and execution/execution.go",2018-06-21 00:29:01,2018-06-21 00:29:01
https://api.github.com/repos/hyperledger/burrow/issues/806,https://api.github.com/repos/hyperledger/burrow/issues/comments/398034203,https://github.com/hyperledger/burrow/issues/806#issuecomment-398034203,compleatang,"Currently we have `/status` endpoint which retrieves current blockheight as well as `list_blocks` which returns an array of block information. You can see all of the endpoints on what we call the TM RPC by hitting the `/` endpoint. 

For a locally running node this would typically be something like `curl localhost:46657/` or `curl localhost:46657/status | jq .result.LatestBlockHeight`",2018-06-18 12:15:03,2018-06-18 12:15:03
https://api.github.com/repos/hyperledger/burrow/issues/804,https://api.github.com/repos/hyperledger/burrow/issues/comments/397936746,https://github.com/hyperledger/burrow/pull/804#issuecomment-397936746,b00f,"There are some changes here that I would like to discuss about them. It might help us to make the Burrow's project more flexible and robust.
But before that let me tell you why we decided to refactor `Account` object and how it's ended up to the PR #800.
In the Hyperledger-Burrow, Mutable and Immutable interfaces are introduced to work with account object and we didn't want to have different scheme for validator object. So we decided to follow the same approach.
In the other hand Account object has exported structures among the interfaces. It's something that I believe it's not a good practice and should be avoided. Interfaces in go are introduced to achieve polymorphism. We might use it to introduce some behaviors and functionality, but at the same time exporting the struct type will bring more complexity to the code. More important, by exporting struct type we allow the outside world to initialize the `account` object without having any control on it. 
This is why we made `validator` struct unexported and introduced two constructors for initializing account object. This caused another problem, there is no way to use go packages for unmarshaling bytes to an interface! We solved this issue by implementing our own serialization methods. You have commented about it [here](https://github.com/hyperledger/burrow/pull/780#pullrequestreview-123992228). The serialization implementation is verbose and it could also be non-deterministic. 
We are in a trap! Having Mutable/Immutable interfaces is the root of the problem.

So I think to get out of the trap we should answer this question: *Is it a good approach having mutable and immutable interfaces for an object?*

I have some critiques about it. First of all it's not a known design pattern (two interfaces for one structure). The restriction comes after make the code more complex.
In the other hand, object are created to be alive. The user of an object should know how to deal with the object. Also casting operation for switching between interfaces is not a good approach. 

So we decided to refactor the account object. This is a big change, but it will make codebase more readable and easy to understand. For an open source project it is very important having simple and easy to understand implementation. The code should be easy for everyone with less programming knowledge to understand and debug the code. 

In this PR the main problem still exists.",2018-06-18 04:03:47,2018-06-18 04:07:22
https://api.github.com/repos/hyperledger/burrow/issues/804,https://api.github.com/repos/hyperledger/burrow/issues/comments/398077567,https://github.com/hyperledger/burrow/pull/804#issuecomment-398077567,silasdavis,"> In the other hand Account object has exported structures among the interfaces. It's something that I believe it's not a good practice and should be avoided. 

Do you mean `ConcreteAccount`. Why do you think this should be avoided?

> More important, by exporting struct type we allow the outside world to initialize the account object without having any control on it.

What do we need to control? `ConcreteAccount` is a record type for which an exported type gives the cleanest initialisation syntax. Unless there is a clear safety reason then I think is unnecessary to hide the type, and hurts extension. In Go it is better to return structs and accept interfaces, having the struct public allows consumers to modify - where we want safety in execution we can use the interface or `MutableAccount` which has a `ConcreteAccount` as a private field.  

> We are in a trap! Having Mutable/Immutable interfaces is the root of the problem.

I do not see the argument for this - why?.Also to be clear - this PR does remove the `MutableAccount` interface.

I would like to draw attention to the following regarding this PR:
- My `Account` is still the read-only interfaces
- Your `Account` struct is my `MutableAccount` (now a struct with a private field)
- Your `accountData` is my `ConcreteAccount`
- Your `Account.data` is my `MutableAccount.concreteAccount` (note both private for when it matters - for mutations which we do want to control unlike initialisation)

Hopefully its clear from that how these changes are based on your account changes. However I have:
- Retained existing names which avoids renames in code for no good reason
- Exported `ConcreteAccount` - I disagree it is better not to export this serialisation model
- Kept a read-only `Account` interface

Your comment implies that there are still two interfaces - note that is factually incorrect. My assertion is that this PR solves all the problems your one does - indeed it is based on it - but isolates the changes and honours existing code and conventions.

If on second reading you think there are essential problems addressed in your PR not addressed here then please come back to me.",2018-06-18 14:40:29,2018-06-18 14:41:14
https://api.github.com/repos/hyperledger/burrow/issues/804,https://api.github.com/repos/hyperledger/burrow/issues/comments/398264487,https://github.com/hyperledger/burrow/pull/804#issuecomment-398264487,b00f,I still believe  that `ConcreteAccount` should be unexported: `concreteAccount` and Account should be created via constructors. This is the main change in PR #800 ,2018-06-19 03:39:31,2018-06-19 03:43:44
https://api.github.com/repos/hyperledger/burrow/issues/804,https://api.github.com/repos/hyperledger/burrow/issues/comments/398403248,https://github.com/hyperledger/burrow/pull/804#issuecomment-398403248,seanyoung,"go doesn't have constructors (e.g. nothing will get called if you use new). Of course, you can create a function which returns a new struct ConcreteAccount (note struct, not class). We have
those functions already: NewConcreteAccount() and NewConcreteAccountFromSecret().

As you can see in those functions, nothing scary happens there so allowing users to access and
create their own ConcreteAccount is unlikely the be harmful. In fact, this is a common pattern in go.",2018-06-19 13:42:50,2018-06-19 13:42:50
https://api.github.com/repos/hyperledger/burrow/issues/804,https://api.github.com/repos/hyperledger/burrow/issues/comments/398610493,https://github.com/hyperledger/burrow/pull/804#issuecomment-398610493,b00f,"> As you can see in those functions, nothing scary happens there so allowing users to access and create their own ConcreteAccount is unlikely the be harmful. In fact, this is a common pattern in go.

You are right. This is a common pattern in Go. Sometimes just having different taste makes to think differently. ",2018-06-20 03:10:30,2018-07-04 02:20:57
https://api.github.com/repos/hyperledger/burrow/issues/804,https://api.github.com/repos/hyperledger/burrow/issues/comments/403554028,https://github.com/hyperledger/burrow/pull/804#issuecomment-403554028,silasdavis,merged into https://github.com/hyperledger/burrow/pull/804 as a dependency of getting gogo proto set up,2018-07-09 17:18:54,2018-07-09 17:18:54
https://api.github.com/repos/hyperledger/burrow/issues/801,https://api.github.com/repos/hyperledger/burrow/issues/comments/396906838,https://github.com/hyperledger/burrow/pull/801#issuecomment-396906838,silasdavis,:smiley_cat: ,2018-06-13 11:36:36,2018-06-13 11:36:36
https://api.github.com/repos/hyperledger/burrow/issues/800,https://api.github.com/repos/hyperledger/burrow/issues/comments/396888412,https://github.com/hyperledger/burrow/pull/800#issuecomment-396888412,silasdavis,"Thanks @b00f I think I like the direction this is going. I don't have time for a full review today so thought I'd dump a couple of things:

1. You'll need to make the integration tests pass `make test_integration` before we can merge. Before you do that make sure we've got the model right.

2. I like the KISS of `*Account`, however I do not want to lose the immutability when accounts are passed to objects that should not mutate them, e.g. in the EVM, state, and RPC layers. I would like _some_ kind of read-only interface, for example we could do something like: https://github.com/hyperledger/burrow/blob/develop/blockchain/blockchain.go#L36-L44. I think we can dump `MutableAccount` though I prefer just using `*Account`

Almost everything should use the read-only interface and not `*Account` - which is what we currently have with the `Account` interface - I'd like something similar put back.",2018-06-13 10:17:31,2018-06-13 10:19:23
https://api.github.com/repos/hyperledger/burrow/issues/800,https://api.github.com/repos/hyperledger/burrow/issues/comments/396907408,https://github.com/hyperledger/burrow/pull/800#issuecomment-396907408,silasdavis,Also needs a rebase now,2018-06-13 11:38:58,2018-06-13 11:38:58
https://api.github.com/repos/hyperledger/burrow/issues/800,https://api.github.com/repos/hyperledger/burrow/issues/comments/397163003,https://github.com/hyperledger/burrow/pull/800#issuecomment-397163003,b00f,"I merged it (not rebase)  with the latest changes.
Unfortunately I couldn't find out why the integration tests are failed. Could you please check it. ",2018-06-14 03:57:13,2018-06-14 03:57:13
https://api.github.com/repos/hyperledger/burrow/issues/800,https://api.github.com/repos/hyperledger/burrow/issues/comments/397311078,https://github.com/hyperledger/burrow/pull/800#issuecomment-397311078,compleatang,@b00f a bunch of things have recently been in flux at the integration level but are slowly stabilizing. Can you do a full rebase against current develop and push. It would be good to make sure you're changes are ran against an integration test we know is working rather than one that is in flux.,2018-06-14 14:13:58,2018-06-14 14:13:58
https://api.github.com/repos/hyperledger/burrow/issues/800,https://api.github.com/repos/hyperledger/burrow/issues/comments/397348958,https://github.com/hyperledger/burrow/pull/800#issuecomment-397348958,b00f,I am working on refactoring test. So let me finish it then I will rebase this changes. The tests made me crazy.,2018-06-14 16:04:52,2018-06-14 16:04:52
https://api.github.com/repos/hyperledger/burrow/issues/793,https://api.github.com/repos/hyperledger/burrow/issues/comments/397119154,https://github.com/hyperledger/burrow/issues/793#issuecomment-397119154,silasdavis,"The logger is a dependency, it may feel convenient to treat it otherwise but I think this is a mistake. The caller of a function should be able to control how it logs independently of other modules and there should not be action at a distance on a global logger.

I did think about this quite a bit, and deliberately did not introduce a global logger. Here are some vaguely corroborative sources on this thinking: 
- https://groups.google.com/forum/#!topic/golang-nuts/8boojTncXvs
- https://dave.cheney.net/2017/01/26/context-is-for-cancelation

There really would need to be a compelling reason for me to bother thinking any more about logging...",2018-06-13 23:25:24,2018-06-13 23:25:44
https://api.github.com/repos/hyperledger/burrow/issues/792,https://api.github.com/repos/hyperledger/burrow/issues/comments/397238500,https://github.com/hyperledger/burrow/issues/792#issuecomment-397238500,silasdavis,"Spoke to them about this, it's from fabric not us turns out",2018-06-14 09:50:36,2018-06-14 09:50:36
https://api.github.com/repos/hyperledger/burrow/issues/790,https://api.github.com/repos/hyperledger/burrow/issues/comments/395693593,https://github.com/hyperledger/burrow/issues/790#issuecomment-395693593,compleatang,"see https://github.com/monax/burrow-exporter
",2018-06-08 08:45:16,2018-06-08 08:45:16
https://api.github.com/repos/hyperledger/burrow/issues/790,https://api.github.com/repos/hyperledger/burrow/issues/comments/396425922,https://github.com/hyperledger/burrow/issues/790#issuecomment-396425922,compleatang,exporter completed. next step is to bring it fully into burrow.,2018-06-12 00:16:09,2018-06-12 00:16:09
https://api.github.com/repos/hyperledger/burrow/issues/789,https://api.github.com/repos/hyperledger/burrow/issues/comments/413853860,https://github.com/hyperledger/burrow/issues/789#issuecomment-413853860,silasdavis,"recovering from this would mean trying to recreate the tendermint node object in our kernel boot sequence. It's not actually that unreasonable to require seeds to be present on boot - persistent peers do not need to be - so for the purposes of wiring up a network you can get around this.

There is an interface for dialing peers - as seed, persistent, or otherwise which can make some of this connectivity stuff a bit more dynamic. We should open that up at some point. 

Will close this now but reopen if you've more to say.",2018-08-17 12:44:36,2018-08-17 12:44:36
https://api.github.com/repos/hyperledger/burrow/issues/788,https://api.github.com/repos/hyperledger/burrow/issues/comments/396196536,https://github.com/hyperledger/burrow/pull/788#issuecomment-396196536,silasdavis,@dennismckinnon can you add signoff `git commit -s --amend --no-edit` and rebase off develop?,2018-06-11 10:25:02,2018-06-11 10:25:02
https://api.github.com/repos/hyperledger/burrow/issues/780,https://api.github.com/repos/hyperledger/burrow/issues/comments/393110504,https://github.com/hyperledger/burrow/pull/780#issuecomment-393110504,silasdavis,"@b00f the comments I've made so far are on fairly minor issues - though I do think to make contribution smoother we need to avoid changing things unrelated to a feature or set of features so I'd ideally like to see some of this omitted from future PRs.

Also in case it doesn't come across in my comments I'd like to make the point that I think you're changes are massive and really valuable. I need to spend more time reviewing to make deeper comments on some of the implementation.

With a view to merging these changes I was thinking about the following. Please let me know if this will work for you:

1. I will try and create a view abstractions around the basics of validator set changes that are compatible in spirit with yours but will allow us to build a few different models on top of Burrow (including the Pool/Sortition mode).
2. I will create a PR to develop to try and get these merged and I would appreciate your review.
3. I will ask you to rebase on develop which will involve some reorganisation and layering of your code.
4. I will try and reframe your VRF, sortition as a Burrow extension/plug-in - I need to have a play around but one way to do this would be be using an actual go plugin: https://golang.org/pkg/plugin/ and making that configurable in Burrow (dynamically loaded). This will allow you iterate more easily separate from Burrow (if we can get the interfaces right). Alternatively we can get your stuff in an extensions/contrib package in Burrow (and still have it configurable)

Another thought I had was combining `SendTx` `BondTx` and `UnbondTx` into a single `SendTx` over as multi-asset balance. There would be various detail to work out but essentially a certain tagged balance could be associated with bonding policy (in your case adding a validator to the `ValidatorPool`), but in other cases as with the Agreements Network it may imply activating a contract or adding a `ValidatorSet`",2018-05-30 10:23:22,2018-05-30 10:23:49
https://api.github.com/repos/hyperledger/burrow/issues/780,https://api.github.com/repos/hyperledger/burrow/issues/comments/393755655,https://github.com/hyperledger/burrow/pull/780#issuecomment-393755655,b00f,"> we need to avoid changing things unrelated to a feature or set of features so I'd ideally like to see some of this omitted from future PRs.

I do agree with you. Better to make this PR in several pieces. I try to make another PR soon for just sortition/Bond/Unbond tx.

> Also in case it doesn't come across in my comments I'd like to make the point that I think you're changes are massive and really valuable.

Thanks, I truly appreciate your comments here

> Another thought I had was combining SendTx BondTx and UnbondTx into a single SendTx over as multi-asset balance.

I had the same idea, but since we need public-key for bonding tx, we can't do it right now. Please check here: https://github.com/tendermint/tendermint/issues/1625 and https://github.com/tendermint/abci/pull/245#discussion_r189504378",2018-06-01 04:38:25,2018-06-01 04:42:54
https://api.github.com/repos/hyperledger/burrow/issues/779,https://api.github.com/repos/hyperledger/burrow/issues/comments/391679790,https://github.com/hyperledger/burrow/pull/779#issuecomment-391679790,silasdavis,Thanks @TheAlienMind - could you `git commit -s --amend` to signoff your commit so the DCO passes?,2018-05-24 11:24:39,2018-05-24 11:24:39
https://api.github.com/repos/hyperledger/burrow/issues/779,https://api.github.com/repos/hyperledger/burrow/issues/comments/391695238,https://github.com/hyperledger/burrow/pull/779#issuecomment-391695238,TheAlienMind,Does the DCO check on merges as well? Seems to fail when I merge,2018-05-24 12:26:17,2018-05-24 12:26:17
https://api.github.com/repos/hyperledger/burrow/issues/777,https://api.github.com/repos/hyperledger/burrow/issues/comments/391685010,https://github.com/hyperledger/burrow/pull/777#issuecomment-391685010,silasdavis,"Happy to have these in. We'll not want to import the secp library that you have there, when this is merged (this week hopefully): https://github.com/hyperledger/burrow/pull/776 we'll be using the btcsuite library for that.

I'll hold off reviewing those changes until you're able to integrate with our keys stuff - some things will also have moved around.

Makes sense to provide these as snatives, and when we have secp support back in we should also re-enable ECRECOVER In vm.go

",2018-05-24 11:46:23,2018-05-24 11:46:23
https://api.github.com/repos/hyperledger/burrow/issues/777,https://api.github.com/repos/hyperledger/burrow/issues/comments/393014693,https://github.com/hyperledger/burrow/pull/777#issuecomment-393014693,b00f,"This change is very useful. Thanks for introducing new method: `EdVerify`.
Hopefully this PR will merge soon. 
Thanks @smblucker 
",2018-05-30 02:58:02,2018-05-30 02:58:02
https://api.github.com/repos/hyperledger/burrow/issues/777,https://api.github.com/repos/hyperledger/burrow/issues/comments/407396366,https://github.com/hyperledger/burrow/pull/777#issuecomment-407396366,silasdavis,@smblucker or @b00f if you have time/desire to work on this then let me know it's not mergeable at present due both to conflicts and the secp C dependency. ,2018-07-24 12:55:01,2018-07-24 12:55:01
https://api.github.com/repos/hyperledger/burrow/issues/775,https://api.github.com/repos/hyperledger/burrow/issues/comments/389810183,https://github.com/hyperledger/burrow/pull/775#issuecomment-389810183,b00f,"I found a bug on converting the public key to address. It's not very critical. You can merge this change later.
Better use crypto methods to use curve functionality.

",2018-05-17 09:47:28,2018-05-17 09:47:28
https://api.github.com/repos/hyperledger/burrow/issues/775,https://api.github.com/repos/hyperledger/burrow/issues/comments/391357066,https://github.com/hyperledger/burrow/pull/775#issuecomment-391357066,silasdavis,"This was working around the fact Tendermint used go-wire to compute addresses and I guess avoiding depending on it. This change makes sense. Could you fix the tests?

I think you probably just need to `make fix` to fix goimports issues and signoff for DCO with `git commit -s --amend`",2018-05-23 13:58:38,2018-05-23 13:58:38
https://api.github.com/repos/hyperledger/burrow/issues/775,https://api.github.com/repos/hyperledger/burrow/issues/comments/391587219,https://github.com/hyperledger/burrow/pull/775#issuecomment-391587219,b00f,@silasdavis. Please check it again. Thanks.,2018-05-24 04:50:32,2018-05-24 04:50:32
https://api.github.com/repos/hyperledger/burrow/issues/772,https://api.github.com/repos/hyperledger/burrow/issues/comments/389527709,https://github.com/hyperledger/burrow/pull/772#issuecomment-389527709,silasdavis,"Thanks @smblucker good idea. The test failure is a timing flake and my fault for shame! Could you bump this timeout https://github.com/hyperledger/burrow/blob/master/rpc/tm/integration/websocket_helpers.go#L40 from 4 to 8...

i.e.

```go
const (
	timeoutSeconds       = 8
	expectBlockInSeconds = 2
)
```

And push on to this branch just to get the test to pass. Hopefully my exponential backoff will eventually find a timing that is reasonable stable WRT to pauses on CircleCI.

p.s. I have modified your description to say:
> fixes #769 

If you say 'fixes' or 'resolves' and then an issue number github will automatically close it for you (see https://help.github.com/articles/closing-issues-using-keywords/)

p.p.s. I think I am happy to close #769 off for now given lack of implementation of this in the mainstream EVM implementations. We can reopen if there is any activity or requests.",2018-05-16 13:56:33,2018-05-16 14:46:09
https://api.github.com/repos/hyperledger/burrow/issues/771,https://api.github.com/repos/hyperledger/burrow/issues/comments/389120053,https://github.com/hyperledger/burrow/pull/771#issuecomment-389120053,silasdavis,Thanks @smblucker !,2018-05-15 10:28:46,2018-05-15 10:28:46
https://api.github.com/repos/hyperledger/burrow/issues/767,https://api.github.com/repos/hyperledger/burrow/issues/comments/388913813,https://github.com/hyperledger/burrow/pull/767#issuecomment-388913813,silasdavis,"I've just noticed we are still missing this change:
",2018-05-14 18:18:56,2018-05-14 18:18:56
https://api.github.com/repos/hyperledger/burrow/issues/767,https://api.github.com/repos/hyperledger/burrow/issues/comments/388914015,https://github.com/hyperledger/burrow/pull/767#issuecomment-388914015,silasdavis,"@smblucker we are missing this change I've just noticed;

When there is an exception After line 912 we need:

vm.returnData = ret

That is when there is an exception from a `CREATE` we need to assign the return to the return buffer",2018-05-14 18:19:41,2018-05-14 18:19:41
https://api.github.com/repos/hyperledger/burrow/issues/767,https://api.github.com/repos/hyperledger/burrow/issues/comments/412321412,https://github.com/hyperledger/burrow/pull/767#issuecomment-412321412,fulldecent,"In case anybody wanted to see. Here is a test case that proves it works:

```solidity
pragma solidity ^0.4.23;

contract ReturnsArray {
    function singleDigitPrimes() pure external returns (uint256[] memory) {
        uint256[] memory retval = new uint256[](4);
        retval[0] = 2;
        retval[1] = 3;
        retval[2] = 5;
        retval[3] = 7;
        return retval;
    }
}

contract ConsumesArray {
    uint256 public lowestSingleDigitPrime;
    
    constructor (ReturnsArray producer) public {
        uint256 x = producer.singleDigitPrimes()[0];
        lowestSingleDigitPrime = x;
    }
}
```",2018-08-12 06:17:44,2018-08-12 06:17:44
https://api.github.com/repos/hyperledger/burrow/issues/767,https://api.github.com/repos/hyperledger/burrow/issues/comments/413200966,https://github.com/hyperledger/burrow/pull/767#issuecomment-413200966,silasdavis,"Thanks @fulldecent! If you were so inclined we would welcome a pull request with your test case into: https://github.com/hyperledger/burrow/tree/develop/tests/jobs_fixtures now we have merged our `bos` tool into `burrow deploy`.

You can see how you might write it by looking at: https://github.com/hyperledger/burrow/blob/develop/tests/jobs_fixtures/app05-deploy_query_contracts_and_testing_rendering_solc_int_type/deploy.yaml.

Feel free to message me @silasdavis on https://chat.hyperledger.org/channel/burrow-contributors if you'd like some help putting it together.",2018-08-15 13:41:51,2018-08-15 13:41:51
https://api.github.com/repos/hyperledger/burrow/issues/767,https://api.github.com/repos/hyperledger/burrow/issues/comments/413326126,https://github.com/hyperledger/burrow/pull/767#issuecomment-413326126,fulldecent,@silasdavis PR sent at https://github.com/hyperledger/burrow/pull/860,2018-08-15 20:31:26,2018-08-15 20:31:26
https://api.github.com/repos/hyperledger/burrow/issues/764,https://api.github.com/repos/hyperledger/burrow/issues/comments/388204451,https://github.com/hyperledger/burrow/pull/764#issuecomment-388204451,dennismckinnon,This all looks good to me,2018-05-10 22:25:25,2018-05-10 22:25:25
https://api.github.com/repos/hyperledger/burrow/issues/761,https://api.github.com/repos/hyperledger/burrow/issues/comments/387502233,https://github.com/hyperledger/burrow/pull/761#issuecomment-387502233,silasdavis,Thanks LGTM,2018-05-08 18:42:39,2018-05-08 18:42:39
https://api.github.com/repos/hyperledger/burrow/issues/759,https://api.github.com/repos/hyperledger/burrow/issues/comments/387477855,https://github.com/hyperledger/burrow/pull/759#issuecomment-387477855,silasdavis,The failing DCO on @zramsay can be ignored,2018-05-08 17:22:35,2018-05-08 17:22:35
https://api.github.com/repos/hyperledger/burrow/issues/757,https://api.github.com/repos/hyperledger/burrow/issues/comments/387403535,https://github.com/hyperledger/burrow/pull/757#issuecomment-387403535,silasdavis,Could you also try rebasing on develop I have a feeling that might be cause of integration test failures.,2018-05-08 13:33:28,2018-05-08 13:33:28
https://api.github.com/repos/hyperledger/burrow/issues/757,https://api.github.com/repos/hyperledger/burrow/issues/comments/387484409,https://github.com/hyperledger/burrow/pull/757#issuecomment-387484409,smblucker,"@silasdavis Should I always be rebasing against develop? For the other opcodes, I have been rebasing against new-opcodes2 without any issues.",2018-05-08 17:43:23,2018-05-08 17:43:23
https://api.github.com/repos/hyperledger/burrow/issues/757,https://api.github.com/repos/hyperledger/burrow/issues/comments/387555116,https://github.com/hyperledger/burrow/pull/757#issuecomment-387555116,silasdavis,I didn't realise your merge base was a feature branch here. I've re-merge-based this to develop and this is now good to go. We'll need to make sure we merge changes on newopcodes-* to develop.,2018-05-08 21:56:23,2018-05-08 21:56:23
https://api.github.com/repos/hyperledger/burrow/issues/756,https://api.github.com/repos/hyperledger/burrow/issues/comments/386731527,https://github.com/hyperledger/burrow/pull/756#issuecomment-386731527,compleatang,LGTM,2018-05-04 20:53:08,2018-05-04 20:53:08
https://api.github.com/repos/hyperledger/burrow/issues/756,https://api.github.com/repos/hyperledger/burrow/issues/comments/387090214,https://github.com/hyperledger/burrow/pull/756#issuecomment-387090214,smblucker,LGTM,2018-05-07 14:51:38,2018-05-07 14:51:38
https://api.github.com/repos/hyperledger/burrow/issues/754,https://api.github.com/repos/hyperledger/burrow/issues/comments/386719876,https://github.com/hyperledger/burrow/pull/754#issuecomment-386719876,silasdavis,"Thanks @b00f, I've fixed in #756 with https://github.com/silasdavis/burrow/blob/34ec0af729e184a79ccc55138e494f81b9cf568d/config/source/source.go#L44 - the intention is the same, but I'm inclined to keep the regex.",2018-05-04 20:11:06,2018-05-04 20:11:06
https://api.github.com/repos/hyperledger/burrow/issues/753,https://api.github.com/repos/hyperledger/burrow/issues/comments/386719141,https://github.com/hyperledger/burrow/pull/753#issuecomment-386719141,silasdavis,"thanks for this, didn't see it before #756 which adds it based on your issue",2018-05-04 20:07:52,2018-05-04 20:07:52
https://api.github.com/repos/hyperledger/burrow/issues/753,https://api.github.com/repos/hyperledger/burrow/issues/comments/386933380,https://github.com/hyperledger/burrow/pull/753#issuecomment-386933380,paulvi,OK,2018-05-07 01:25:36,2018-05-07 01:25:36
https://api.github.com/repos/hyperledger/burrow/issues/752,https://api.github.com/repos/hyperledger/burrow/issues/comments/388787592,https://github.com/hyperledger/burrow/issues/752#issuecomment-388787592,silasdavis,"master should be the default branch, we have since released here",2018-05-14 11:40:18,2018-05-14 11:40:18
https://api.github.com/repos/hyperledger/burrow/issues/752,https://api.github.com/repos/hyperledger/burrow/issues/comments/389532026,https://github.com/hyperledger/burrow/issues/752#issuecomment-389532026,silasdavis,"Actually you were right about this, although master is our release branch, it will be better to have PRs default to develop. Ideally I would really like the home branch you see on first visit to still be master, but PRs to go to develop. I can't have it both ways so I've switched to develop.",2018-05-16 14:08:52,2018-05-16 14:08:52
https://api.github.com/repos/hyperledger/burrow/issues/751,https://api.github.com/repos/hyperledger/burrow/issues/comments/385999161,https://github.com/hyperledger/burrow/pull/751#issuecomment-385999161,smblucker,Suggested changes were made. Thank you for the feedback.,2018-05-02 14:34:32,2018-05-02 14:34:32
https://api.github.com/repos/hyperledger/burrow/issues/751,https://api.github.com/repos/hyperledger/burrow/issues/comments/386082150,https://github.com/hyperledger/burrow/pull/751#issuecomment-386082150,smblucker,Added the appropriate action for attempted shift > 2^64,2018-05-02 18:49:54,2018-05-02 18:49:54
https://api.github.com/repos/hyperledger/burrow/issues/751,https://api.github.com/repos/hyperledger/burrow/issues/comments/386698741,https://github.com/hyperledger/burrow/pull/751#issuecomment-386698741,smblucker,@silasdavis I will make the changes,2018-05-04 18:49:59,2018-05-04 18:49:59
https://api.github.com/repos/hyperledger/burrow/issues/751,https://api.github.com/repos/hyperledger/burrow/issues/comments/386784140,https://github.com/hyperledger/burrow/pull/751#issuecomment-386784140,silasdavis,I'm happy with this after the change to `big256` mentioned. Also the tests look good and comprehensive.,2018-05-05 06:41:26,2018-05-05 06:41:26
https://api.github.com/repos/hyperledger/burrow/issues/749,https://api.github.com/repos/hyperledger/burrow/issues/comments/385669002,https://github.com/hyperledger/burrow/issues/749#issuecomment-385669002,silasdavis,"Thanks, done",2018-05-01 13:20:21,2018-05-01 13:20:21
https://api.github.com/repos/hyperledger/burrow/issues/748,https://api.github.com/repos/hyperledger/burrow/issues/comments/384971156,https://github.com/hyperledger/burrow/issues/748#issuecomment-384971156,smblucker,"Roadmap, future plans and other information about the project can be found at:

https://wiki.hyperledger.org/projects/burrow
",2018-04-27 13:33:41,2018-04-27 13:33:41
https://api.github.com/repos/hyperledger/burrow/issues/748,https://api.github.com/repos/hyperledger/burrow/issues/comments/384978427,https://github.com/hyperledger/burrow/issues/748#issuecomment-384978427,paulvi,"Thanks

Roadmap is important info to check for any new project,
and usually one can find such link from README

However in this repository development goes not in default branch `master` 
(that is also is displayed by GitHub), but in `develop` branch.  
That let me think that the project is abandoned for first half hour I was studying it.

Maybe you should change default branch in GitHub to be `develop`

![image](https://user-images.githubusercontent.com/1614482/39366339-39d62030-4a66-11e8-8fb7-08253c0d1909.png)
",2018-04-27 13:59:24,2018-04-27 13:59:24
https://api.github.com/repos/hyperledger/burrow/issues/748,https://api.github.com/repos/hyperledger/burrow/issues/comments/385671483,https://github.com/hyperledger/burrow/issues/748#issuecomment-385671483,silasdavis,"I agree with your points.

master is still our release branch, the reason is hasn't been merged to recently is stabilising a major refactor. I had been waiting until I was ready to cut the next release before I merged to master (which I plan to do in the next two week sprint, which starts tomorrow). However, I think all that is really required for a merge to master ahead of the release is the updating of some docs. I'll endeavour to do this this week.

I need to update the roadmap on the Hyperledger wiki. Much of it still applies, I have a newer draft internal roadmap for our own network and product much of which are general features for Burrow. I need to add this to the wiki. I will provide a link to the roadmap and wiki from the readme as you suggest.",2018-05-01 13:32:51,2018-05-01 13:32:51
https://api.github.com/repos/hyperledger/burrow/issues/748,https://api.github.com/repos/hyperledger/burrow/issues/comments/388787633,https://github.com/hyperledger/burrow/issues/748#issuecomment-388787633,silasdavis,added,2018-05-14 11:40:29,2018-05-14 11:40:29
https://api.github.com/repos/hyperledger/burrow/issues/745,https://api.github.com/repos/hyperledger/burrow/issues/comments/383225804,https://github.com/hyperledger/burrow/issues/745#issuecomment-383225804,compleatang,Good catch! Definitely we should say private keys in that para. :),2018-04-20 21:20:04,2018-04-20 21:20:04
https://api.github.com/repos/hyperledger/burrow/issues/745,https://api.github.com/repos/hyperledger/burrow/issues/comments/383250840,https://github.com/hyperledger/burrow/issues/745#issuecomment-383250840,smblucker,"If you would like, I could clean this up.",2018-04-21 00:01:51,2018-04-21 00:01:51
https://api.github.com/repos/hyperledger/burrow/issues/745,https://api.github.com/repos/hyperledger/burrow/issues/comments/383259196,https://github.com/hyperledger/burrow/issues/745#issuecomment-383259196,compleatang,That would be super @smblucker !,2018-04-21 02:00:42,2018-04-21 02:00:42
https://api.github.com/repos/hyperledger/burrow/issues/745,https://api.github.com/repos/hyperledger/burrow/issues/comments/385671891,https://github.com/hyperledger/burrow/issues/745#issuecomment-385671891,silasdavis,I think this was handler in #746 - ping back if not,2018-05-01 13:34:47,2018-05-01 13:34:47
https://api.github.com/repos/hyperledger/burrow/issues/744,https://api.github.com/repos/hyperledger/burrow/issues/comments/384140041,https://github.com/hyperledger/burrow/pull/744#issuecomment-384140041,guoger,I'm probably not knowledgeable enough but I don't see a test for this?,2018-04-25 02:18:07,2018-04-25 02:18:07
https://api.github.com/repos/hyperledger/burrow/issues/743,https://api.github.com/repos/hyperledger/burrow/issues/comments/383226712,https://github.com/hyperledger/burrow/pull/743#issuecomment-383226712,compleatang,you love playing with that logger :),2018-04-20 21:24:19,2018-04-20 21:24:19
https://api.github.com/repos/hyperledger/burrow/issues/743,https://api.github.com/repos/hyperledger/burrow/issues/comments/383226738,https://github.com/hyperledger/burrow/pull/743#issuecomment-383226738,compleatang,"LGTM
",2018-04-20 21:24:27,2018-04-20 21:24:27
https://api.github.com/repos/hyperledger/burrow/issues/743,https://api.github.com/repos/hyperledger/burrow/issues/comments/383236801,https://github.com/hyperledger/burrow/pull/743#issuecomment-383236801,silasdavis,I basically wrote a config to that is borderline unusable in toml... So I add to it as needed for debug. This was for looking at @b00f's testnet,2018-04-20 22:17:35,2018-04-20 22:17:35
https://api.github.com/repos/hyperledger/burrow/issues/743,https://api.github.com/repos/hyperledger/burrow/issues/comments/383498072,https://github.com/hyperledger/burrow/pull/743#issuecomment-383498072,b00f,Thanks. Logger makes life easier. It's good idea saving logs in file by default. ,2018-04-23 08:36:27,2018-04-23 08:36:40
https://api.github.com/repos/hyperledger/burrow/issues/737,https://api.github.com/repos/hyperledger/burrow/issues/comments/380183529,https://github.com/hyperledger/burrow/pull/737#issuecomment-380183529,compleatang,"Hi @b00f thanks for this! Currently we want to ensure that burrow remains go gettable so until dep is baked into go get we will keep the vendor directory. 

We're happy to review your other contributions when your ready and the tests are green. ",2018-04-10 17:30:25,2018-04-10 17:30:25
https://api.github.com/repos/hyperledger/burrow/issues/737,https://api.github.com/repos/hyperledger/burrow/issues/comments/380196719,https://github.com/hyperledger/burrow/pull/737#issuecomment-380196719,silasdavis,"Thanks for taking an interest in Burrow. I was planning to upgrade Tendermint (again) soon, but had been stabilising develop for a network deployment first.

I'd love to review your changes related specifically to the Tendermint upgrade, but I'd need you to submit them in isolation.

To respond to your other stated changes:

> remove validators from blockchain object (it's needed to show validators per round)

I do not understand your purpose here, but in any case the validator set on the blockchain struct is currently a stub for re-introducing some form of validator set changes (aka validator bonding). It will be mutated by transactions with an appropriate permission. This is a change coming soon.

> Rename Validator to GenValidator in genesis.go for better code understanding

Why does this give better understanding. I'd take some convincing that we need a cosmetic change like this things other tooling and deployments depend on this name. I had also opted to remove tags for the JSON name as unnecessary busywork so this would also need justification.

> Remove vendor folder from project (it's not necessary)

Dep has golang on the way to being a grown up language with respect to dependencies but it's not perfect. We relatively recently decided to vendor our dependencies and I'm not inclined to change it again. Having vendor included serves two purposes: 1) we can be go-gettable, and 2) where we are used as a library we can maintain our own independent set of dependencies. Our licensing is also more clearly auditable with vendor checked in.

It would be good to chat if you'd like to contribute here: https://chat.hyperledger.org/channel/burrow-contributors. I have a draft roadmap that I would like to share, but have been heads-down trying to stabilise Burrow after a major refactor.",2018-04-10 18:12:23,2018-04-10 18:12:34
https://api.github.com/repos/hyperledger/burrow/issues/737,https://api.github.com/repos/hyperledger/burrow/issues/comments/380318046,https://github.com/hyperledger/burrow/pull/737#issuecomment-380318046,b00f,"Upgrading to tendermint 18 is not a big deal as I know tendermint 16 and 17 hasve issues (17 had memory leak). I think we can have this PR open until you decide to upgrade tendermint.

I think validator-set should not be part of blockchain structure. Maybe `type tip struct` is better place to track validators after bondin or unbondig. In each round validator-set can be changed, so it's needed to get validator-set for each hight. Currently burrow just shows validators in the latest height.

For me as a person who check the code for the first time, I got confused between genesis validator structure and acm.validator. This is the reason I renamed it for better code understanding. Other structure like Account can have Gen prefix. But if you think it'snot a good idea, just ignore it.

I know the go dep is not perfect, however by upgrading the dep I always get lots of changes from vendor folder. So far I never had any issue after removing vendor folder. reinstall_vendor_deps always works fine for me. If you want to keep it, you can ignore my changes.

Later if you want to upgrade to tendermint-18 you can count on me.

Thanks for your wonderful work on Burrow. It's well mangedand I love it.

*** Unfortunately I couldn't find out the error in bosmarmot_test. ",2018-04-11 03:46:21,2018-04-11 08:13:05
https://api.github.com/repos/hyperledger/burrow/issues/737,https://api.github.com/repos/hyperledger/burrow/issues/comments/380771952,https://github.com/hyperledger/burrow/pull/737#issuecomment-380771952,compleatang,Thanks @b00f we definitely did not want to discount your contribution! The assistance around tendermint 18 would be very welcome!,2018-04-12 11:24:23,2018-04-12 11:24:23
https://api.github.com/repos/hyperledger/burrow/issues/735,https://api.github.com/repos/hyperledger/burrow/issues/comments/379547539,https://github.com/hyperledger/burrow/pull/735#issuecomment-379547539,mandarvaze,"@silasdavis What does ""This pull request is closed, but the mandarvaze:patch-2 branch has unmerged commits."" mean ?
Is this PR rejected ?",2018-04-08 12:40:45,2018-04-08 12:40:45
https://api.github.com/repos/hyperledger/burrow/issues/734,https://api.github.com/repos/hyperledger/burrow/issues/comments/379547525,https://github.com/hyperledger/burrow/pull/734#issuecomment-379547525,mandarvaze,"@silasdavis What does ""This pull request is closed, but the mandarvaze:patch-1 branch has unmerged commits."" mean ?
Is this PR rejected ?",2018-04-08 12:40:28,2018-04-08 12:40:28
https://api.github.com/repos/hyperledger/burrow/issues/732,https://api.github.com/repos/hyperledger/burrow/issues/comments/379230563,https://github.com/hyperledger/burrow/pull/732#issuecomment-379230563,silasdavis,`git describe --tags` courtesy of @seanyoung ,2018-04-06 11:51:11,2018-04-06 11:51:11
https://api.github.com/repos/hyperledger/burrow/issues/731,https://api.github.com/repos/hyperledger/burrow/issues/comments/379206592,https://github.com/hyperledger/burrow/pull/731#issuecomment-379206592,silasdavis,Thanks!,2018-04-06 09:55:07,2018-04-06 09:55:07
https://api.github.com/repos/hyperledger/burrow/issues/727,https://api.github.com/repos/hyperledger/burrow/issues/comments/392127961,https://github.com/hyperledger/burrow/pull/727#issuecomment-392127961,b00f,Singleton  is not a good design pattern and it has some bottlenecks. But I think in burrow we can use this pattern for logger system. In this case having **thread-safe singleton logger** will reduce the code and make logger to be accessible everywhere. Also it's not necessary to pass the logger instance between packages.  ,2018-05-25 17:31:50,2018-05-25 17:31:50
https://api.github.com/repos/hyperledger/burrow/issues/726,https://api.github.com/repos/hyperledger/burrow/issues/comments/378277205,https://github.com/hyperledger/burrow/pull/726#issuecomment-378277205,silasdavis,DCO thing seems to be broken from earlier rebase,2018-04-03 14:49:23,2018-04-03 14:49:23
https://api.github.com/repos/hyperledger/burrow/issues/724,https://api.github.com/repos/hyperledger/burrow/issues/comments/383407249,https://github.com/hyperledger/burrow/issues/724#issuecomment-383407249,mikemaller,I believe all accounts are PrivAccount.  Even new ones. ,2018-04-22 19:46:04,2018-04-22 19:46:04
https://api.github.com/repos/hyperledger/burrow/issues/724,https://api.github.com/repos/hyperledger/burrow/issues/comments/385674399,https://github.com/hyperledger/burrow/issues/724#issuecomment-385674399,silasdavis,"In the EVM creating an account is equivalent to giving it a non-zero balance. So in order to 'create' an account `send` to it with a funded account. You can also use a `PermissionTx` to change from the non-default permissions.

PrivAccount generation a private key server side and should probably be considered deprecated.",2018-05-01 13:47:15,2018-05-01 13:47:15
https://api.github.com/repos/hyperledger/burrow/issues/723,https://api.github.com/repos/hyperledger/burrow/issues/comments/374080418,https://github.com/hyperledger/burrow/pull/723#issuecomment-374080418,zramsay,"this is fixed on `develop` branch from #700 

Please make your PRs to `develop`",2018-03-19 02:03:56,2018-03-19 02:04:28
https://api.github.com/repos/hyperledger/burrow/issues/723,https://api.github.com/repos/hyperledger/burrow/issues/comments/374101060,https://github.com/hyperledger/burrow/pull/723#issuecomment-374101060,qpakzk,"@zramsay The master branch has Table of Contents. But develop branch doesn't have Table of Contents. So when I  make PR to develop, codes conflict.",2018-03-19 04:53:49,2018-03-19 04:57:56
https://api.github.com/repos/hyperledger/burrow/issues/723,https://api.github.com/repos/hyperledger/burrow/issues/comments/374105736,https://github.com/hyperledger/burrow/pull/723#issuecomment-374105736,zramsay,"@qpakzk yes I know, the whole README was fixed in #700. `develop` is the working branch for this repo, and the ToC was removed because it was unecessary. On the next release, develop will merged to master and fixing the ToC will not apply.",2018-03-19 05:32:36,2018-03-19 05:33:16
https://api.github.com/repos/hyperledger/burrow/issues/723,https://api.github.com/repos/hyperledger/burrow/issues/comments/374109476,https://github.com/hyperledger/burrow/pull/723#issuecomment-374109476,qpakzk,@zramsay Now I understand! Thank you!,2018-03-19 06:01:06,2018-03-19 06:01:06
https://api.github.com/repos/hyperledger/burrow/issues/721,https://api.github.com/repos/hyperledger/burrow/issues/comments/378276773,https://github.com/hyperledger/burrow/pull/721#issuecomment-378276773,silasdavis,"Merging now, we can add some more scrutiny in the merge from develop",2018-04-03 14:48:09,2018-04-03 14:48:09
https://api.github.com/repos/hyperledger/burrow/issues/720,https://api.github.com/repos/hyperledger/burrow/issues/comments/373604306,https://github.com/hyperledger/burrow/pull/720#issuecomment-373604306,zramsay,most if not all of this was fixed on develop in #700,2018-03-16 05:02:38,2018-03-16 05:02:38
https://api.github.com/repos/hyperledger/burrow/issues/719,https://api.github.com/repos/hyperledger/burrow/issues/comments/385674789,https://github.com/hyperledger/burrow/issues/719#issuecomment-385674789,silasdavis,fixed by #740 ,2018-05-01 13:48:57,2018-05-01 13:48:57
https://api.github.com/repos/hyperledger/burrow/issues/715,https://api.github.com/repos/hyperledger/burrow/issues/comments/379320485,https://github.com/hyperledger/burrow/issues/715#issuecomment-379320485,silasdavis,Fix on the way to develop,2018-04-06 17:23:32,2018-04-06 17:23:32
https://api.github.com/repos/hyperledger/burrow/issues/715,https://api.github.com/repos/hyperledger/burrow/issues/comments/385675402,https://github.com/hyperledger/burrow/issues/715#issuecomment-385675402,silasdavis,fixed by https://github.com/hyperledger/burrow/pull/728/commits/9f696191f29a4b036d7c77d46df59797342db670,2018-05-01 13:51:53,2018-05-01 13:51:53
https://api.github.com/repos/hyperledger/burrow/issues/713,https://api.github.com/repos/hyperledger/burrow/issues/comments/371760620,https://github.com/hyperledger/burrow/issues/713#issuecomment-371760620,joeriexelmans,"Updated example code to work with latest version of burrow and bosmarmot tooling:
https://github.com/pascalverlinden/perfo/tree/latest-version

Performance issues are still present:
- After creating 80 contracts of type 'D', and then doing nothing, CPU usage of burrow process remains at 20%. After there are 160 contracts on the chain, CPU usage is 40%.
- Latency of creating a new contract goes from 1s to 2s after about 60 contracts.
- CPU usage is close to 100% while sending a single transaction per block.",2018-03-09 09:30:08,2018-03-09 09:30:08
https://api.github.com/repos/hyperledger/burrow/issues/713,https://api.github.com/repos/hyperledger/burrow/issues/comments/372857272,https://github.com/hyperledger/burrow/issues/713#issuecomment-372857272,silasdavis,"## Profiling
Here is a 30 second CPU profile from a fresh chain humming along at < 1% CPU on my machine:

```
(pprof) top 40
Showing nodes accounting for 730ms, 96.05% of 760ms total
Showing top 40 nodes out of 233
      flat  flat%   sum%        cum   cum%
      70ms  9.21%  9.21%       70ms  9.21%  runtime.futex
      70ms  9.21% 18.42%       70ms  9.21%  runtime.usleep
      60ms  7.89% 26.32%       80ms 10.53%  github.com/hyperledger/burrow/vendor/github.com/tendermint/ed25519/edwards25519.FeMul
      60ms  7.89% 34.21%       60ms  7.89%  github.com/hyperledger/burrow/vendor/golang.org/x/crypto/ripemd160._Block
      50ms  6.58% 40.79%       50ms  6.58%  github.com/hyperledger/burrow/vendor/github.com/tendermint/ed25519/edwards25519.feSquare
      30ms  3.95% 44.74%       30ms  3.95%  runtime.findnull
      20ms  2.63% 47.37%       20ms  2.63%  github.com/hyperledger/burrow/vendor/github.com/tendermint/ed25519/edwards25519.FeCombine
      20ms  2.63% 50.00%       20ms  2.63%  github.com/hyperledger/burrow/vendor/github.com/tendermint/go-wire.WriteTo
      20ms  2.63% 52.63%       60ms  7.89%  runtime.(*pcExpander).init
      20ms  2.63% 55.26%       20ms  2.63%  runtime.memmove
      20ms  2.63% 57.89%       20ms  2.63%  runtime.step
      10ms  1.32% 59.21%       10ms  1.32%  encoding/hex.Encode
      10ms  1.32% 60.53%       30ms  3.95%  fmt.(*pp).handleMethods
      10ms  1.32% 61.84%       10ms  1.32%  github.com/hyperledger/burrow/logging/loggers.(*ChannelLogger).WaitReadLogLine
      10ms  1.32% 63.16%       30ms  3.95%  github.com/hyperledger/burrow/logging/loggers.(*burrowFormatLogger).Log.func1
      10ms  1.32% 64.47%       20ms  2.63%  github.com/hyperledger/burrow/logging/loggers.(*infoTraceLogger).Info
      10ms  1.32% 65.79%       30ms  3.95%  github.com/hyperledger/burrow/logging/structure.Vectorise
      10ms  1.32% 67.11%       40ms  5.26%  github.com/hyperledger/burrow/vendor/github.com/tendermint/ed25519/edwards25519.(*CompletedGroupElement).ToProjective
      10ms  1.32% 68.42%       40ms  5.26%  github.com/hyperledger/burrow/vendor/github.com/tendermint/ed25519/edwards25519.(*ProjectiveGroupElement).Double
      10ms  1.32% 69.74%       10ms  1.32%  github.com/hyperledger/burrow/vendor/github.com/tendermint/ed25519/edwards25519.FeAdd
      10ms  1.32% 71.05%       10ms  1.32%  github.com/hyperledger/burrow/vendor/github.com/tendermint/ed25519/edwards25519.FeSquare2
      10ms  1.32% 72.37%       90ms 11.84%  github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/types.(*Header).Hash
      10ms  1.32% 73.68%       70ms  9.21%  github.com/hyperledger/burrow/vendor/github.com/tendermint/tmlibs/merkle.KVPair.Hash
      10ms  1.32% 75.00%       10ms  1.32%  reflect.Value.Uint
      10ms  1.32% 76.32%       10ms  1.32%  runtime.(*fixalloc).alloc
      10ms  1.32% 77.63%       10ms  1.32%  runtime.(*mspan).refillAllocCache
      10ms  1.32% 78.95%       10ms  1.32%  runtime.(*waitq).dequeue
      10ms  1.32% 80.26%       10ms  1.32%  runtime.aeshashbody
      10ms  1.32% 81.58%       20ms  2.63%  runtime.assertE2I2
      10ms  1.32% 82.89%       10ms  1.32%  runtime.execute
      10ms  1.32% 84.21%       70ms  9.21%  runtime.findrunnable
      10ms  1.32% 85.53%       60ms  7.89%  runtime.futexsleep
      10ms  1.32% 86.84%       10ms  1.32%  runtime.getitab
      10ms  1.32% 88.16%       10ms  1.32%  runtime.makemap
      10ms  1.32% 89.47%       40ms  5.26%  runtime.mallocgc
      10ms  1.32% 90.79%       10ms  1.32%  runtime.mapaccess2_faststr
      10ms  1.32% 92.11%       10ms  1.32%  runtime.memclrNoHeapPointers
      10ms  1.32% 93.42%       10ms  1.32%  strings.indexFunc
      10ms  1.32% 94.74%       10ms  1.32%  sync.(*Once).Do
      10ms  1.32% 96.05%       10ms  1.32%  sync.(*Pool).pin
```


Here is a profile after running `node many_contracts.js` which deploys ~100 contracts when the chain is not receiving TXs and should be in steady state but has CPU pegged to ~40%:

```
(pprof) top40
Showing nodes accounting for 9.33s, 79.61% of 11.72s total
Dropped 306 nodes (cum <= 0.06s)
Showing top 40 nodes out of 189
      flat  flat%   sum%        cum   cum%
     1.94s 16.55% 16.55%      1.94s 16.55%  github.com/hyperledger/burrow/vendor/golang.org/x/crypto/ripemd160._Block
     0.99s  8.45% 25.00%      0.99s  8.45%  runtime.cmpbody
     0.71s  6.06% 31.06%      1.12s  9.56%  runtime.mallocgc
     0.61s  5.20% 36.26%      0.63s  5.38%  syscall.Syscall
     0.43s  3.67% 39.93%      2.65s 22.61%  github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb/memdb.(*DB).findGE
     0.37s  3.16% 43.09%      2.38s 20.31%  github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb.(*iComparer).Compare
     0.30s  2.56% 45.65%      0.30s  2.56%  runtime.memmove
     0.24s  2.05% 47.70%      1.54s 13.14%  github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb.(*iComparer).uCompare
     0.23s  1.96% 49.66%      0.50s  4.27%  runtime.scanobject
     0.22s  1.88% 51.54%      0.32s  2.73%  github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb.internalKey.ukey
     0.21s  1.79% 53.33%      0.56s  4.78%  bytes.(*Buffer).Write
     0.19s  1.62% 54.95%      1.30s 11.09%  github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb/comparer.(*bytesComparer).Compare
     0.18s  1.54% 56.48%      1.11s  9.47%  github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb/comparer.bytesComparer.Compare
     0.18s  1.54% 58.02%      0.18s  1.54%  runtime.duffcopy
     0.17s  1.45% 59.47%      0.17s  1.45%  runtime.heapBitsForObject
     0.14s  1.19% 60.67%      0.68s  5.80%  github.com/hyperledger/burrow/vendor/github.com/tendermint/go-wire.WriteTo
     0.14s  1.19% 61.86%      0.14s  1.19%  runtime.heapBitsSetType
     0.13s  1.11% 62.97%      0.15s  1.28%  github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb.internalKey.num
     0.13s  1.11% 64.08%      2.08s 17.75%  github.com/hyperledger/burrow/vendor/golang.org/x/crypto/ripemd160.(*digest).Write
     0.12s  1.02% 65.10%      0.12s  1.02%  github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb.internalKey.assert
     0.12s  1.02% 66.13%      0.64s  5.46%  github.com/hyperledger/burrow/vendor/github.com/tendermint/merkleeyes/iavl.(*IAVLNode).set
     0.11s  0.94% 67.06%      0.11s  0.94%  runtime.greyobject
     0.11s  0.94% 68.00%      0.19s  1.62%  runtime.mapassign_faststr
     0.11s  0.94% 68.94%      0.41s  3.50%  sort.doPivot
     0.10s  0.85% 69.80%      0.89s  7.59%  runtime.newobject
     0.09s  0.77% 70.56%      0.67s  5.72%  github.com/hyperledger/burrow/vendor/github.com/tendermint/go-wire.WriteVarint
     0.09s  0.77% 71.33%      1.63s 13.91%  github.com/hyperledger/burrow/vendor/golang.org/x/crypto/ripemd160.(*digest).Sum
     0.09s  0.77% 72.10%      0.11s  0.94%  runtime.mapdelete_faststr
     0.09s  0.77% 72.87%      0.09s  0.77%  runtime.memclrNoHeapPointers
     0.08s  0.68% 73.55%      0.51s  4.35%  github.com/hyperledger/burrow/vendor/github.com/tendermint/go-wire.WriteByte
     0.08s  0.68% 74.23%      4.67s 39.85%  github.com/hyperledger/burrow/vendor/github.com/tendermint/merkleeyes/iavl.(*IAVLNode).save
     0.08s  0.68% 74.91%      0.08s  0.68%  runtime.aeshashbody
     0.08s  0.68% 75.60%      0.18s  1.54%  runtime.deferreturn
     0.07s   0.6% 76.19%      0.25s  2.13%  bytes.(*Buffer).grow
     0.07s   0.6% 76.79%      9.50s 81.06%  github.com/hyperledger/burrow/execution.(*BlockCache).Sync
     0.07s   0.6% 77.39%      0.07s   0.6%  runtime.freedefer
     0.07s   0.6% 77.99%      0.07s   0.6%  runtime.newdefer
     0.07s   0.6% 78.58%      0.07s   0.6%  sync.(*Mutex).Lock
     0.06s  0.51% 79.10%      0.34s  2.90%  github.com/hyperledger/burrow/binary.(*Tuple256Slice).Less
     0.06s  0.51% 79.61%      0.21s  1.79%  github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb/table.(*blockWriter).append
```

## Diagnosis
The one to watch is `BlockCache.Sync()` my least favourite piece of code that still remains in the refactored Burrow. It's a ghastly bit of code and it looks like it is repeatedly hitting expensive merkle tree and database calls. I need a bit more time to look into why but this cache is scheduled for annihilation soon anyway. I just had been planning to do some other integration work first.

BlockCache holds a cumulative cache of account state between blocks preserved to speed up EVM operations. It is not meant to mark cache lines as dirty if they have not been modified, but it looks like it is doing some hashing and database ops for every account it has seen every block which is why you see a cumulative slowdown as the unnecessary work grows linearly per block. Effectively we are paying for over 100 transactions per block. 

It's not immediately clear to me why this would only be showing up now if it was such a generic issue though - there may be some slightly non-obvious interaction with the code in question. I will need to do a bit more work to understand exactly what is going on.

## Temporary proof-of-concept fix
I have what I think is a proof-of-concept fix here (**please try this version of Burrow and tell me if the issue seems to be resolved**):

https://github.com/hyperledger/burrow/tree/perfo

(it is branched from `2748007` of Burrow which your reproduction is based - this is because there are some minor breakages between the released version of legacy-contracts and latest develop).

See the commit implementing the 'fix' here: https://github.com/hyperledger/burrow/commit/a0f877d707f5110bfa16fe75bdeeb4a6f1762957

For me (with one quick test) this seems to return us to a steady state of ~1% CPU usage when the chain is just making empty blocks as we would expect.

## Real fix
The real fix is to rewrite `BlockCache` which already does other badness by writing directly to database rather than through the proper interfaces. This is on my agenda within the next few weeks, but I also need to introduces some features so we may need to adopt the temporary fix in the interim. We will also be updating our merkle tree implementation for other stability and speed improvements.",2018-03-13 23:47:27,2018-03-14 08:44:27
https://api.github.com/repos/hyperledger/burrow/issues/713,https://api.github.com/repos/hyperledger/burrow/issues/comments/375548091,https://github.com/hyperledger/burrow/issues/713#issuecomment-375548091,Gaurav094,"Hey Team,
When I'm taking pull of perfo branch and running cmd ""make build""
I get few error. PFA...
![makebuildofdevelop](https://user-images.githubusercontent.com/36070107/37812778-cc1bf942-2e87-11e8-9ab0-89afd591868a.png)
",2018-03-23 05:19:12,2018-03-23 05:19:12
https://api.github.com/repos/hyperledger/burrow/issues/713,https://api.github.com/repos/hyperledger/burrow/issues/comments/375554310,https://github.com/hyperledger/burrow/issues/713#issuecomment-375554310,zramsay,try `make ensure_vendor` beforehand,2018-03-23 06:03:40,2018-03-23 06:03:40
https://api.github.com/repos/hyperledger/burrow/issues/713,https://api.github.com/repos/hyperledger/burrow/issues/comments/375591006,https://github.com/hyperledger/burrow/issues/713#issuecomment-375591006,Gaurav094,"Thanks, that worked for me.
But till now I was using master branch  and now after switching to perfo branch I was able to follow the instruction given in README. But how to get the private key of created account. Because in previous workflow of mine I was using monax through which address.json file was being created where I use to find the Private key to create Manager object using @monax/legacy-contract.js to deploy the contract?
",2018-03-23 09:21:53,2018-03-23 09:21:53
https://api.github.com/repos/hyperledger/burrow/issues/713,https://api.github.com/repos/hyperledger/burrow/issues/comments/380593917,https://github.com/hyperledger/burrow/issues/713#issuecomment-380593917,compleatang,@pascalverlinden when you are able to test develop branch can you confirm this issue is fixed for y'all. We isolated and added the permanent fix so I'd like to close the ticket but will wait on y'all to confirm when you are able. ,2018-04-11 20:59:59,2018-04-11 20:59:59
https://api.github.com/repos/hyperledger/burrow/issues/713,https://api.github.com/repos/hyperledger/burrow/issues/comments/385675612,https://github.com/hyperledger/burrow/issues/713#issuecomment-385675612,silasdavis,I'm going to close this ticket now as I think it is fixed. If not we can just re-open ,2018-05-01 13:52:52,2018-05-01 13:52:52
https://api.github.com/repos/hyperledger/burrow/issues/712,https://api.github.com/repos/hyperledger/burrow/issues/comments/371191820,https://github.com/hyperledger/burrow/issues/712#issuecomment-371191820,silasdavis,You could start validators with different names on the same host provided you changed the configured ports in the chain config.toml. However I recommend taking a look at our Kubernetes charts: https://github.com/kubernetes/charts/blob/master/incubator/burrow/README.md which you can run locally with minikube since we will be deprecating our docker-infused tooling in favour of providing a good bare-metal experience with Burrow - leaving orchestration to outer layers. You can also keep an eye on our pre-release refactored tooling monorepo here: https://github.com/monax/bosmarmot ,2018-03-07 16:15:56,2018-03-07 16:15:56
https://api.github.com/repos/hyperledger/burrow/issues/712,https://api.github.com/repos/hyperledger/burrow/issues/comments/371339356,https://github.com/hyperledger/burrow/issues/712#issuecomment-371339356,haojun,"Thanks for your quick reply, I will check it",2018-03-08 00:53:43,2018-03-08 00:53:43
https://api.github.com/repos/hyperledger/burrow/issues/708,https://api.github.com/repos/hyperledger/burrow/issues/comments/371192115,https://github.com/hyperledger/burrow/issues/708#issuecomment-371192115,silasdavis,This does not strike me as a priority.,2018-03-07 16:16:49,2018-03-07 16:16:49
https://api.github.com/repos/hyperledger/burrow/issues/708,https://api.github.com/repos/hyperledger/burrow/issues/comments/396018127,https://github.com/hyperledger/burrow/issues/708#issuecomment-396018127,b00f,"I figured out that by having different package for testing we can reduce the size of executable file, because some methods can be written in test package. For example we can put `NewDeterministicGenesis` method in test package, either `NewConcreteAccountFromSecret`.

If you are busy I can do it.",2018-06-10 03:55:01,2018-06-10 03:55:27
https://api.github.com/repos/hyperledger/burrow/issues/707,https://api.github.com/repos/hyperledger/burrow/issues/comments/371196524,https://github.com/hyperledger/burrow/pull/707#issuecomment-371196524,silasdavis,"Thanks for this. I'll reply now rather than waiting until I've fully considered everything:

1. I'm inclined to include this functionality - but not expose it in config (yet) - we need a way of splitting up config in general and I think this probably encourages behaviour we don't want to encourage (i.e. keys in config file). I think local keys need to be in a properly permissioned separate file and for there to at least a warning if they are not.

2. I'm inclined to butcher some of what you have done and rework it so that we have something like a self-hosted set of keys. We will shortly be adding 'co-located signing' as in you can get Burrow to sign transactions if it has access to the signing key via keys. It might make most sense to pull in monax-keys wholesale for this - or at least a library portion of it to just make it 'something Burrow can do'.

3. We need to support `PrivateKey` not just ed25519 keys",2018-03-07 16:29:43,2018-03-07 16:29:43
https://api.github.com/repos/hyperledger/burrow/issues/707,https://api.github.com/repos/hyperledger/burrow/issues/comments/371273303,https://github.com/hyperledger/burrow/pull/707#issuecomment-371273303,phymbert,"Thank you for your reply. I agree with all 3 points above, feel free to rework this small contribution  if needed.
I am pleased to help if required, for example I may recode private key access to an external file.
We are waiting this feature for my project, happy to see embedded mona-keys inside burrow the soonest.",2018-03-07 20:27:04,2018-03-07 20:27:04
https://api.github.com/repos/hyperledger/burrow/issues/707,https://api.github.com/repos/hyperledger/burrow/issues/comments/379207805,https://github.com/hyperledger/burrow/pull/707#issuecomment-379207805,silasdavis,"@phymbert just to let you know we are going to add burrow-hosted keys as a feature - this can support this use case and also with address-based delegated signing that I am working on also allows for running Burrow as a signing delegate - useful as a local 'wallet' or in the cloud behind a service. 

Burrow will run a key signing process, with the option to expose the monax-keys RPC if you want it to hold a keychain. The config will specify a file location for the key store and you'll be able to lock and unlock keys and store them encrypted at rest (decryption key can be provided by environment variable for example)",2018-04-06 09:59:53,2018-04-06 10:02:27
https://api.github.com/repos/hyperledger/burrow/issues/707,https://api.github.com/repos/hyperledger/burrow/issues/comments/384579573,https://github.com/hyperledger/burrow/pull/707#issuecomment-384579573,b00f,"Thanks @phymbert for embedding monax.key to burrow. I'd like to suggest if it is possible using an interface pattern for signer object. Then Burrow can easily implement any curve in a modular way, not only ed25519.  Look here: https://github.com/hyperledger/burrow/pull/707/files#diff-06dc382f674b6310ff1f5382daad00b7


",2018-04-26 09:43:54,2018-04-26 09:51:28
https://api.github.com/repos/hyperledger/burrow/issues/707,https://api.github.com/repos/hyperledger/burrow/issues/comments/394452866,https://github.com/hyperledger/burrow/pull/707#issuecomment-394452866,silasdavis,We now have support for your use case and more with: https://github.com/hyperledger/burrow/pull/776 ,2018-06-04 18:28:52,2018-06-04 18:28:52
https://api.github.com/repos/hyperledger/burrow/issues/705,https://api.github.com/repos/hyperledger/burrow/issues/comments/394645102,https://github.com/hyperledger/burrow/issues/705#issuecomment-394645102,seanyoung,Merged https://github.com/hyperledger/burrow/pull/767,2018-06-05 09:32:05,2018-06-05 09:32:05
https://api.github.com/repos/hyperledger/burrow/issues/704,https://api.github.com/repos/hyperledger/burrow/issues/comments/370132301,https://github.com/hyperledger/burrow/pull/704#issuecomment-370132301,compleatang,Fipf reviewed.,2018-03-03 08:58:35,2018-03-03 08:58:35
https://api.github.com/repos/hyperledger/burrow/issues/704,https://api.github.com/repos/hyperledger/burrow/issues/comments/370512095,https://github.com/hyperledger/burrow/pull/704#issuecomment-370512095,dennismckinnon,Looks good to me,2018-03-05 18:16:15,2018-03-05 18:16:15
https://api.github.com/repos/hyperledger/burrow/issues/704,https://api.github.com/repos/hyperledger/burrow/issues/comments/370514821,https://github.com/hyperledger/burrow/pull/704#issuecomment-370514821,pouladzade,"I reviewed it, It seems ok",2018-03-05 18:25:00,2018-03-05 18:25:00
https://api.github.com/repos/hyperledger/burrow/issues/704,https://api.github.com/repos/hyperledger/burrow/issues/comments/370542368,https://github.com/hyperledger/burrow/pull/704#issuecomment-370542368,smblucker,LGTM,2018-03-05 19:52:18,2018-03-05 19:52:18
https://api.github.com/repos/hyperledger/burrow/issues/702,https://api.github.com/repos/hyperledger/burrow/issues/comments/369226546,https://github.com/hyperledger/burrow/issues/702#issuecomment-369226546,silasdavis,"Thanks for the issue.

I am not against the idea of self-hosted keys in Burrow. I am wary of introducing private key matter into Config.

However I'd like to step back and thing about what we are trying to achieve here, I think:
1. Run Burrow in a single process without keys
2. Be able to form a genesis doc to start a chain - which requires the public keys

One idea that I like is that of the validator creating its own key on boot and gossiping its public key around in a 'lazy genesis' process. The key does not need to leave the node. If the node goes down and it has not persisted at least to disk its key this does mean it would need some means to be rebonded on to the network which is probably just moving the problem around - and we tend to think of validator keys as durable identities that may have some long term value attached.

Another option would be to effectively still run a monax-keys service, using the same code, but running it in a single process. I believe that changes I have recently made (https://github.com/monax/bosmarmot/commit/e9a65a5814e7421d71b08f1a9e232ea561e09650) mean that we could relicense it to Apache and pull it in. We have always wanted to point out that monax-keys is unaudited crypto, but it is built on solid libraries and I think we should probably give it a higher status (and ultimately get it audited). The option of replacing it with a remote HSM-based service should always be there.

If we went for this option then I would pull in keys from: https://github.com/monax/bosmarmot/tree/master/keys and we would add the necessary configuration to run keys as a launched service of Burrow but maintain the same interface boundary (just not use a HTTP transport). There could be the option of having Burrow also act as a key server for local applications.

As I write this I find myself leaning towards this option for a number of reasons. We also need to re-introduce secp256k1 which would be more easily done working within a single repo. Needs a bit more thought though. What is your view on this?

Thanks for encouragement also, it's good to see someone using our develop branch at this stage.",2018-02-28 12:37:16,2018-02-28 12:43:12
https://api.github.com/repos/hyperledger/burrow/issues/702,https://api.github.com/repos/hyperledger/burrow/issues/comments/369254804,https://github.com/hyperledger/burrow/issues/702#issuecomment-369254804,phymbert,"Thank you very much @silasdavis for your anwser, appreciate you are sharing your vision here.

I agree private key within the Config file is not a target, I am trying to start Burrow as an API in my own process: this way the wrapper is responsible of storage and lifecycle of the node private key.
I have yet to understand Tendermint and Burrow impacts on the block consensus and vote algorithm if we generate keys at bootstrap.

I didnt check monax.keys recent changes, actually I didnt manage to start monax inside docker-for-windows, but that's another story!

I have pushed [in this commit](https://github.com/phymbert/burrow/commit/faf186698257c32ba16d8ec867be2dfbed89ef1c) changes I would like to see in Burrow, I am sure to move directly mature and existing code of monax.keys is a better option, feel free to tell me wether or not I can submit a PR.


Yes need to be more agnostic to crypto implementation, reintroduce secp256k1 would be good.",2018-02-28 14:24:19,2018-02-28 17:39:22
https://api.github.com/repos/hyperledger/burrow/issues/702,https://api.github.com/repos/hyperledger/burrow/issues/comments/369496603,https://github.com/hyperledger/burrow/issues/702#issuecomment-369496603,zramsay,@phymbert try starting keys without docker - the docker functionality has been mostly stripped away from the tooling,2018-03-01 07:05:33,2018-03-01 07:05:33
https://api.github.com/repos/hyperledger/burrow/issues/702,https://api.github.com/repos/hyperledger/burrow/issues/comments/370210687,https://github.com/hyperledger/burrow/issues/702#issuecomment-370210687,phymbert,"Thanks @zramsay but this is not my main point: I just dont want my burrow node depends on a centralized PKI or an external server responsible to sign my own node messages.
I have submitted a PR #707 to support this feature, I wish it will be reviewed and maybe merged as a good signal to encourage open source contributions.",2018-03-04 08:19:07,2018-03-04 08:19:07
https://api.github.com/repos/hyperledger/burrow/issues/702,https://api.github.com/repos/hyperledger/burrow/issues/comments/394645752,https://github.com/hyperledger/burrow/issues/702#issuecomment-394645752,seanyoung,"Burrow can do signing and key management itself now, see https://github.com/hyperledger/burrow/pull/776",2018-06-05 09:34:15,2018-06-05 09:34:15
https://api.github.com/repos/hyperledger/burrow/issues/700,https://api.github.com/repos/hyperledger/burrow/issues/comments/368822553,https://github.com/hyperledger/burrow/pull/700#issuecomment-368822553,silasdavis,Ah great I'll review shortly. Can you `git commit --amend --signoff --no-edit` to meet the DCO check.,2018-02-27 10:25:54,2018-02-27 10:25:54
https://api.github.com/repos/hyperledger/burrow/issues/700,https://api.github.com/repos/hyperledger/burrow/issues/comments/369493645,https://github.com/hyperledger/burrow/pull/700#issuecomment-369493645,zramsay,done,2018-03-01 06:52:50,2018-03-01 06:52:50
https://api.github.com/repos/hyperledger/burrow/issues/698,https://api.github.com/repos/hyperledger/burrow/issues/comments/371477495,https://github.com/hyperledger/burrow/pull/698#issuecomment-371477495,silasdavis,Merging into feature branch new-opcodes,2018-03-08 12:48:43,2018-03-08 12:48:43
https://api.github.com/repos/hyperledger/burrow/issues/697,https://api.github.com/repos/hyperledger/burrow/issues/comments/368666058,https://github.com/hyperledger/burrow/issues/697#issuecomment-368666058,silasdavis,"@pouladzade I think this result of trying to read memory at a negative offset. Now if this is the case then it will be an error but we should avoid a panic (I will make a change to the memory to check this).

However, I believe the bytecode you are running probably runs elsewhere (remix), could you share the bytecode that causes the panic. A possible cause could be an unsupported opcode usage, or perhaps something else. I can get further if you provide the bytecode, but the fact this is a panic at all is noteworthy so thanks!",2018-02-26 22:00:19,2018-02-26 22:00:19
https://api.github.com/repos/hyperledger/burrow/issues/697,https://api.github.com/repos/hyperledger/burrow/issues/comments/368744323,https://github.com/hyperledger/burrow/issues/697#issuecomment-368744323,pouladzade,"@silasdavis I tried to regenerate the bug but unfortunately I couldn't,  because on that time I was writing the solidity assembly and was testing my code, but now I completed the code and it works fine.
I could send the log because  after calling my function, burrow got panic and never lunch anymore, I mean when I tried to run burrow it couldn't validate the chain's data anymore, It's why I have the log but I can't regenerate it.

I attached my contract as a text file, maybe it would be helpful to guess about the problem.

[StringTest.txt](https://github.com/hyperledger/burrow/files/1761320/StringTest.txt)

",2018-02-27 04:33:14,2018-02-27 05:15:47
https://api.github.com/repos/hyperledger/burrow/issues/697,https://api.github.com/repos/hyperledger/burrow/issues/comments/369198538,https://github.com/hyperledger/burrow/issues/697#issuecomment-369198538,pouladzade,"I wrote an assembly code which can generate this bug, You were right, it happens when the value of the loop index gets negative.

---
here is the remix output : 
transact to StringTest.test errored: VM error: out of gas.
out of gas	The transaction ran out of gas. Please increase the Gas Limit.
	Debug the transaction to get more information. 
---

[StringTest.txt](https://github.com/hyperledger/burrow/files/1766696/StringTest.txt)
[compile-json.txt](https://github.com/hyperledger/burrow/files/1766698/compile-json.txt)

---
this is the Burrow's output : 
![bug-697](https://user-images.githubusercontent.com/10783040/36783214-4eb1ba38-1cb6-11e8-9839-c7a0ba1182bd.jpg)
",2018-02-28 10:37:18,2018-02-28 10:44:46
https://api.github.com/repos/hyperledger/burrow/issues/697,https://api.github.com/repos/hyperledger/burrow/issues/comments/369219629,https://github.com/hyperledger/burrow/issues/697#issuecomment-369219629,silasdavis,"There are two levels of solution to this:

1. We need to wrap `Execute(tx) error` with panic/recover so that any downstream panic in the execution engine is handled as an error. This addresses not only this issue but the entire class of 'panic on tx' issues - rather than crashing the chain we will just reject the transaction. I've been intending to do this for a while - but needed to fix our internal API a bit. Now is a good time to do it!

2. We need to (this is the royal we - I mean I need to) change our memory implementation so that it does not accept negative offsets: https://github.com/hyperledger/burrow/blob/develop/execution/execution.go#L153 - it probably makes sense to use `uint64` here, though they are not so good for arithmetic/have their own issues. In any case there will be some negative number checks.
",2018-02-28 12:06:16,2018-02-28 12:06:16
https://api.github.com/repos/hyperledger/burrow/issues/697,https://api.github.com/repos/hyperledger/burrow/issues/comments/385675885,https://github.com/hyperledger/burrow/issues/697#issuecomment-385675885,silasdavis,fixed by #704,2018-05-01 13:54:07,2018-05-01 13:54:07
https://api.github.com/repos/hyperledger/burrow/issues/696,https://api.github.com/repos/hyperledger/burrow/issues/comments/368895931,https://github.com/hyperledger/burrow/issues/696#issuecomment-368895931,silasdavis,Run this code in remix here: https://remix.ethereum.org/#optimize=false&version=soljson-v0.4.20+commit.3155dd80.js&gist=05ec3120d970a1fc9f87ae4d7ed37d09,2018-02-27 14:29:35,2018-02-27 14:29:35
https://api.github.com/repos/hyperledger/burrow/issues/696,https://api.github.com/repos/hyperledger/burrow/issues/comments/385677717,https://github.com/hyperledger/burrow/issues/696#issuecomment-385677717,silasdavis,resolved by #704,2018-05-01 14:01:57,2018-05-01 14:01:57
https://api.github.com/repos/hyperledger/burrow/issues/689,https://api.github.com/repos/hyperledger/burrow/issues/comments/368460066,https://github.com/hyperledger/burrow/issues/689#issuecomment-368460066,silasdavis,I think you got some resolution to this - but it is not an issue with Burrow but with lack of documentation of our JS libs. Closing here for that reason.,2018-02-26 10:42:43,2018-02-26 10:42:43
https://api.github.com/repos/hyperledger/burrow/issues/688,https://api.github.com/repos/hyperledger/burrow/issues/comments/366561319,https://github.com/hyperledger/burrow/pull/688#issuecomment-366561319,compleatang,LGTM,2018-02-19 00:09:49,2018-02-19 00:09:49
https://api.github.com/repos/hyperledger/burrow/issues/685,https://api.github.com/repos/hyperledger/burrow/issues/comments/365565385,https://github.com/hyperledger/burrow/pull/685#issuecomment-365565385,compleatang,:+1: save for the failing integration test. FIPF review.,2018-02-14 10:46:46,2018-02-14 10:46:46
https://api.github.com/repos/hyperledger/burrow/issues/684,https://api.github.com/repos/hyperledger/burrow/issues/comments/370182277,https://github.com/hyperledger/burrow/issues/684#issuecomment-370182277,silasdavis,"I think it will be easier to provide some help on this on hyperledger chat, it looks like you might be running on a non-standard part",2018-03-03 21:44:57,2018-03-03 21:44:57
https://api.github.com/repos/hyperledger/burrow/issues/680,https://api.github.com/repos/hyperledger/burrow/issues/comments/385677528,https://github.com/hyperledger/burrow/issues/680#issuecomment-385677528,silasdavis,It doesn't look like you are requiring legacy-contracts... If this is still an issue can you open at http://github.com/monax/bosmarmot where this tooling now lives.,2018-05-01 14:01:17,2018-05-01 14:01:17
https://api.github.com/repos/hyperledger/burrow/issues/679,https://api.github.com/repos/hyperledger/burrow/issues/comments/361947020,https://github.com/hyperledger/burrow/pull/679#issuecomment-361947020,silasdavis,Ignore broken DCO sign-off message,2018-01-31 14:24:12,2018-01-31 14:24:12
https://api.github.com/repos/hyperledger/burrow/issues/677,https://api.github.com/repos/hyperledger/burrow/issues/comments/361949971,https://github.com/hyperledger/burrow/pull/677#issuecomment-361949971,silasdavis,I'll sort this in a subsequent PR thanks,2018-01-31 14:34:04,2018-01-31 14:34:04
https://api.github.com/repos/hyperledger/burrow/issues/674,https://api.github.com/repos/hyperledger/burrow/issues/comments/391701019,https://github.com/hyperledger/burrow/issues/674#issuecomment-391701019,kyriediculous,"Is there an ETA on exceptions rather than using if-else-> Boolean ? 

What version of solc is burrow using atm?

Thank you in advance!",2018-05-24 12:44:58,2018-05-24 12:44:58
https://api.github.com/repos/hyperledger/burrow/issues/674,https://api.github.com/repos/hyperledger/burrow/issues/comments/393111453,https://github.com/hyperledger/burrow/issues/674#issuecomment-393111453,compleatang,@kyriediculous we test against solc 0.4.22 at the moment.,2018-05-30 10:26:50,2018-05-30 10:26:50
https://api.github.com/repos/hyperledger/burrow/issues/674,https://api.github.com/repos/hyperledger/burrow/issues/comments/393170153,https://github.com/hyperledger/burrow/issues/674#issuecomment-393170153,kyriediculous,"@compleatang That's super awesome ! 

That means the five-types model might actually work well now that we can return dynamic types from functions (despite from gas cost maybe)",2018-05-30 13:52:58,2018-05-30 13:52:58
https://api.github.com/repos/hyperledger/burrow/issues/674,https://api.github.com/repos/hyperledger/burrow/issues/comments/393198204,https://github.com/hyperledger/burrow/issues/674#issuecomment-393198204,compleatang,"hahaha. well, considering we've been writing five-types models since before solc existed, I certainly hope so :)",2018-05-30 15:06:26,2018-05-30 15:06:26
https://api.github.com/repos/hyperledger/burrow/issues/674,https://api.github.com/repos/hyperledger/burrow/issues/comments/393198555,https://github.com/hyperledger/burrow/issues/674#issuecomment-393198555,compleatang,"Also @kyriediculous we have a test for dynamic arrays at least here -> https://github.com/monax/bosmarmot/pull/39

We'd love some help writing a test for dynamic types if you had a moment.... ",2018-05-30 15:07:28,2018-05-30 15:07:48
https://api.github.com/repos/hyperledger/burrow/issues/674,https://api.github.com/repos/hyperledger/burrow/issues/comments/437141745,https://github.com/hyperledger/burrow/issues/674#issuecomment-437141745,silasdavis,Finally fixed by #940 and #953 ,2018-11-08 20:20:03,2018-11-08 20:20:51
https://api.github.com/repos/hyperledger/burrow/issues/671,https://api.github.com/repos/hyperledger/burrow/issues/comments/360109236,https://github.com/hyperledger/burrow/pull/671#issuecomment-360109236,silasdavis,"This looks bot-like to me. If it is, please don't do this, if not we don't use rewrite rules so `-s` is no use here. Also this changes the meaning of `make check` ",2018-01-24 12:00:05,2018-01-24 12:00:05
https://api.github.com/repos/hyperledger/burrow/issues/671,https://api.github.com/repos/hyperledger/burrow/issues/comments/360109568,https://github.com/hyperledger/burrow/pull/671#issuecomment-360109568,robert-zaremba,"Yes, it's mostly automatic change. 
`gofmt` is a great tool, why not taking full advantage of it?",2018-01-24 12:01:32,2018-01-24 12:01:32
https://api.github.com/repos/hyperledger/burrow/issues/670,https://api.github.com/repos/hyperledger/burrow/issues/comments/393112649,https://github.com/hyperledger/burrow/issues/670#issuecomment-393112649,compleatang,Do we actually want to do this considering how tight we need to stay with t-mint standards?,2018-05-30 10:31:45,2018-05-30 10:31:45
https://api.github.com/repos/hyperledger/burrow/issues/670,https://api.github.com/repos/hyperledger/burrow/issues/comments/398023196,https://github.com/hyperledger/burrow/issues/670#issuecomment-398023196,silasdavis,"Well go-wire is gone now. There is nothing forcing us to use Tendermint's serialisation that's wrapped up there side. We do have a transitive dependency on go-amino though, and as it happens I've decided to use this for transaction encoding currently since it is actually much nicer than it used to be and doesn't add another dependency for binary encoding.",2018-06-18 11:25:13,2018-06-18 11:25:13
https://api.github.com/repos/hyperledger/burrow/issues/668,https://api.github.com/repos/hyperledger/burrow/issues/comments/356591702,https://github.com/hyperledger/burrow/issues/668#issuecomment-356591702,silasdavis,"This seems to be an error from Tendermint when restarting the chain that is now resolved. The issues that actually stopped the chain is the one which is of interest. @jojujacobs sent this:

```
Commit{
    BlockID:    428C54FEC3AE006A45CFFFB3F4B97C31D5A28852:1:3B6E2E0FD9A0
    Precommits: Vote{0:3974B6BA812F 948/00/2(Precommit) 428C54FEC3AE /7E91A34537F3.../}
  }#7A3CD861DE35C02F239E7A5A4B0D9CB8595AA01F
}#4B524B032D3A5628735036D5E685320BBB1D8D43 module=consensus
INFO[01-01|04:37:22] Account has permission                   module=state address=3974B6BA812F915E59FDD11332ABF00EF97A36B8 perm=call
INFO[01-01|04:37:22] Out account: Account{5C1985894DFE860B8D767A0DE3DD554172D5163C:<nil> B:0 C:1202 S: P:{Base: 100011111110; Set: 11111111111111 []}} module=state
INFO[01-01|04:37:22] Calling contract 0000000000000000000000005C1985894DFE860B8D767A0DE3DD554172D5163C with codemodule=state
INFO[01-01|04:37:22] Code for this contractmodule=state
panic: runtime error: slice bounds out of range

goroutine 51 [running]:
panic(0x55c8d82dbca0, 0xc4200160c0)
/usr/lib/go/src/runtime/panic.go:500 +0x1a5
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).call(0xc424584be8, 0xc423b18980, 0xc423b18a00, 0xc421ac3400, 0x4b2, 0x4b2, 0xc424554480, 0x204, 0x204, 0x0, ...)
/go/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:530 +0x57b7
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).Call(0xc424584be8, 0xc423b18980, 0xc423b18a00, 0xc421ac3400, 0x4b2, 0x4b2, 0xc424554480, 0x204, 0x204, 0x0, ...)
/go/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:154 +0x22c
github.com/hyperledger/burrow/manager/burrow-mint/state.ExecTx(0xc4201c2fc0, 0x55c8d86c0ba0, 0xc423af2960, 0xc424564601, 0x55c8d86c1b20, 0xc4201c30b0, 0xc42415ed10, 0x55c8d8275080)
/go/src/github.com/hyperledger/burrow/manager/burrow-mint/state/execution.go:502 +0x6084
github.com/hyperledger/burrow/manager/burrow-mint.(*BurrowMint).DeliverTx(0xc4204a7a40, 0xc424181340, 0x2b1, 0x2b1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
/go/src/github.com/hyperledger/burrow/manager/burrow-mint/burrow-mint.go:110 +0x1a1
github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client.(*localClient).DeliverTxAsync(0xc42011a4e0, 0xc424181340, 0x2b1, 0x2b1, 0x0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client/local_client.go:74 +0x87
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*appConnConsensus).DeliverTxAsync(0xc420181a40, 0xc424181340, 0x2b1, 0x2b1, 0xc423b127e0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/app_conn.go:73 +0x53
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.execBlockOnProxyApp(0x7f4705c60328, 0xc423b10a80, 0x55c8d86cdb00, 0xc420181a40, 0xc42046d280, 0x0, 0x0, 0x0, 0x28, 0x55c8d7e6ce63)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:116 +0x4e1
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).ExecBlock(0xc423b1c420, 0x7f4705c60328, 0xc423b10a80, 0x55c8d86cdb00, 0xc420181a40, 0xc42046d280, 0x1, 0xc4201617c0, 0x14, 0x20, ...)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:38 +0x151
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).ApplyBlock(0xc423b1c420, 0x7f4705c60328, 0xc423b10a80, 0x55c8d86cdb00, 0xc420181a40, 0xc42046d280, 0x1, 0xc4201617c0, 0x14, 0x20, ...)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:237 +0xb7
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).finalizeCommit(0xc420219040, 0x3b5)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1251 +0xb64
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).tryFinalizeCommit(0xc420219040, 0x3b5)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1198 +0x179
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).enterCommit.func1(0xc420219040, 0x0, 0x3b5)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1151 +0x9f
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).enterCommit(0xc420219040, 0x3b5, 0x0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1178 +0x748
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).addVote(0xc420219040, 0xc423b47c80, 0x0, 0x0, 0xc4204ad298, 0x0, 0x0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1467 +0x9e1
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).tryAddVote(0xc420219040, 0xc423b47c80, 0x0, 0x0, 0x20, 0x55c8d830d860)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1356 +0x69
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).handleMsg(0xc420219040, 0x55c8d82c97c0, 0xc420462e00, 0x0, 0x0, 0x3b5, 0x0, 0x6, 0xed1dbb202, 0x23f8088b, ...)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:699 +0x668
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).receiveRoutine(0xc420219040, 0x0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:655 +0x460
created by github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).OnStart
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:389 +0x55b
```
",2018-01-10 12:43:45,2018-01-10 12:43:45
https://api.github.com/repos/hyperledger/burrow/issues/667,https://api.github.com/repos/hyperledger/burrow/issues/comments/370182397,https://github.com/hyperledger/burrow/issues/667#issuecomment-370182397,silasdavis,"Fixed by: https://github.com/hyperledger/burrow/pull/704 - we now recover from panic, and bounds checking has been strengthened (protecting against negative offsets and overflows).",2018-03-03 21:46:47,2018-03-03 21:46:47
https://api.github.com/repos/hyperledger/burrow/issues/666,https://api.github.com/repos/hyperledger/burrow/issues/comments/360739432,https://github.com/hyperledger/burrow/pull/666#issuecomment-360739432,silasdavis,"@rotestein if you have a chance to look at the changes in the last 4 commits then great, otherwise I'm looking to merge this today or early next week. If you're reading this and it's already merged I will review any comments and look to address them in a future PR to this feature branch. Thanks again for review.",2018-01-26 10:13:55,2018-01-26 10:14:11
https://api.github.com/repos/hyperledger/burrow/issues/665,https://api.github.com/repos/hyperledger/burrow/issues/comments/360109462,https://github.com/hyperledger/burrow/pull/665#issuecomment-360109462,silasdavis,As we've discussed you'll re-open this against the feature branch,2018-01-24 12:01:05,2018-01-24 12:01:05
https://api.github.com/repos/hyperledger/burrow/issues/662,https://api.github.com/repos/hyperledger/burrow/issues/comments/360108670,https://github.com/hyperledger/burrow/pull/662#issuecomment-360108670,silasdavis,"Thanks for this, but replacing with this: https://github.com/hyperledger/burrow/pull/672 for reasons detailed there",2018-01-24 11:57:32,2018-01-24 11:57:32
https://api.github.com/repos/hyperledger/burrow/issues/661,https://api.github.com/repos/hyperledger/burrow/issues/comments/354481891,https://github.com/hyperledger/burrow/pull/661#issuecomment-354481891,tommling,"Sorry, I should pull develop.",2017-12-29 18:21:32,2017-12-29 18:21:32
https://api.github.com/repos/hyperledger/burrow/issues/660,https://api.github.com/repos/hyperledger/burrow/issues/comments/354484719,https://github.com/hyperledger/burrow/issues/660#issuecomment-354484719,tommling,"On further investigation, this is not a good approach because it requires patching the version of tendermint.",2017-12-29 18:44:48,2017-12-29 18:44:48
https://api.github.com/repos/hyperledger/burrow/issues/660,https://api.github.com/repos/hyperledger/burrow/issues/comments/364166774,https://github.com/hyperledger/burrow/issues/660#issuecomment-364166774,silasdavis,fixed by: https://github.com/hyperledger/burrow/pull/672 ,2018-02-08 16:27:32,2018-02-08 16:27:32
https://api.github.com/repos/hyperledger/burrow/issues/657,https://api.github.com/repos/hyperledger/burrow/issues/comments/348310449,https://github.com/hyperledger/burrow/pull/657#issuecomment-348310449,silasdavis,@zariel,2017-11-30 20:24:59,2017-11-30 20:24:59
https://api.github.com/repos/hyperledger/burrow/issues/657,https://api.github.com/repos/hyperledger/burrow/issues/comments/349459287,https://github.com/hyperledger/burrow/pull/657#issuecomment-349459287,VoR0220,Oh good! A massive PR! I feared you were dead! Any hope of a web3 RPC in the near future? ,2017-12-05 22:13:33,2017-12-05 22:13:33
https://api.github.com/repos/hyperledger/burrow/issues/657,https://api.github.com/repos/hyperledger/burrow/issues/comments/356391358,https://github.com/hyperledger/burrow/pull/657#issuecomment-356391358,silasdavis,Replaced by: https://github.com/hyperledger/burrow/pull/666,2018-01-09 19:39:26,2018-01-09 19:39:26
https://api.github.com/repos/hyperledger/burrow/issues/656,https://api.github.com/repos/hyperledger/burrow/issues/comments/333983989,https://github.com/hyperledger/burrow/pull/656#issuecomment-333983989,CLAassistant,"[![CLA assistant check](https://cla-assistant.io/pull/badge/not_signed)](https://cla-assistant.io/hyperledger/burrow?pullRequest=656) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla-assistant.io/hyperledger/burrow?pullRequest=656) before we can accept your contribution.<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla-assistant.io/check/hyperledger/burrow?pullRequest=656) it.</sub>",2017-10-03 21:28:05,2017-10-03 21:28:05
https://api.github.com/repos/hyperledger/burrow/issues/655,https://api.github.com/repos/hyperledger/burrow/issues/comments/329989608,https://github.com/hyperledger/burrow/issues/655#issuecomment-329989608,silasdavis,"Hi Kevin,

Burrow is not `go get`able since we don't vendor our dependencies. Maybe it should be (I am working on a release where it is). If you want to install a development version you'll need to get the repo (go get has done this, don't worry about the no buildable files message) and install our dependencies using glide, do:

```
cd $GOPATH/src/github.com/hyperledger/burrow
make install_vendor
make build
```

You'll then find binaries under `./target/burrow`.

Bear in mind at this time the standard way to interact with Burrow is through the `monax` tool: https://monax.io/docs/getting-started/. We are transitioning to a more standalone experience.",2017-09-16 19:25:46,2017-09-16 19:25:46
https://api.github.com/repos/hyperledger/burrow/issues/655,https://api.github.com/repos/hyperledger/burrow/issues/comments/330489476,https://github.com/hyperledger/burrow/issues/655#issuecomment-330489476,kevinaquick,"Thank you fro getting back with the above details, however I seem to be having trouble with these namely the ""make build"" stage as I get the following error:

Checking code for formatting style compliance.
go build -o /root/.go/src/github.com/hyperledger/burrow/target/burrow-a140ca6 ./cmd/burrow
vendor/golang.org/x/net/trace/trace.go:67:2: cannot find package ""context"" in any of:
	/root/.go/src/github.com/hyperledger/burrow/vendor/context (vendor tree)
	/usr/lib/go-1.6/src/context (from $GOROOT)
	/root/.go/src/context (from $GOPATH)
Makefile:103: recipe for target 'build_db' failed
make: *** [build_db] Error 1

Kevin",2017-09-19 09:52:36,2017-09-19 09:52:36
https://api.github.com/repos/hyperledger/burrow/issues/655,https://api.github.com/repos/hyperledger/burrow/issues/comments/330531163,https://github.com/hyperledger/burrow/issues/655#issuecomment-330531163,silasdavis,"You'll need to upgrade your Go version to >= 1.7, you are on Go 1.6 before the `context` package was moved to stdlib. Go 1.6 is a year and a half old. I'd recommend Go 1.8 or 1.9.",2017-09-19 13:00:17,2017-09-19 13:00:46
https://api.github.com/repos/hyperledger/burrow/issues/655,https://api.github.com/repos/hyperledger/burrow/issues/comments/350525212,https://github.com/hyperledger/burrow/issues/655#issuecomment-350525212,sadaf2605,"I am trying to install burrow on my OSX machine. I have followed the tutorial and it is stuck.

$ go version
go version go1.9.2 darwin/amd64

$ go get -d github.com/hyperledger/burrow
can't load package: package github.com/hyperledger/burrow: no Go files in /Users/sadafnoor/go/src/github.com/hyperledger/burrow

When I tried to make:

$ make install_vendor
xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun",2017-12-10 04:52:08,2017-12-10 04:52:08
https://api.github.com/repos/hyperledger/burrow/issues/655,https://api.github.com/repos/hyperledger/burrow/issues/comments/359339810,https://github.com/hyperledger/burrow/issues/655#issuecomment-359339810,mohitsharma18,"facing the same issue even with Go 1.9

Makefile:82: recipe for target 'install_vendor' failed
make: *** [install_vendor] Error 1

Please help

- Mohit",2018-01-22 06:55:54,2018-01-22 06:55:54
https://api.github.com/repos/hyperledger/burrow/issues/655,https://api.github.com/repos/hyperledger/burrow/issues/comments/360112350,https://github.com/hyperledger/burrow/issues/655#issuecomment-360112350,cupaco,"Having the same issue with Go 1.9.2

go version go1.9.2 linux/amd64

can't load package: package github.com/hyperledger/burrow: no Go files in /root/go/src/github.com/hyperledger/burrow

Please help

",2018-01-24 12:14:39,2018-01-24 12:14:39
https://api.github.com/repos/hyperledger/burrow/issues/655,https://api.github.com/repos/hyperledger/burrow/issues/comments/416977761,https://github.com/hyperledger/burrow/issues/655#issuecomment-416977761,CryptoKass,Ensure your $GOPATH is setup correct. If you `export GOPATH=/Users/$USER/go` then try to run `make build` again.,2018-08-29 14:37:52,2018-08-29 14:37:52
https://api.github.com/repos/hyperledger/burrow/issues/654,https://api.github.com/repos/hyperledger/burrow/issues/comments/328584703,https://github.com/hyperledger/burrow/issues/654#issuecomment-328584703,silasdavis,"@RobertDiebels looks like it is a Windows issue. Not supporting Windows is more of a bandwidth issue rather than anything else. A more direct way to do want you want would just be this though:

```shell
go get -u github.com/hyperledger/burrow # would be 0.17.1, but I'd recommned you use that
cd /c/Users/$LocalUser/Containers/burrowconfig
burrow serve
```

You will need Go installed and the `%GOPATH%` environment variable set with `%GOPATH%/bin` in your `%PATH%`. But that should serve from your config dir and will write a data directory there.",2017-09-11 16:32:08,2017-09-11 16:32:08
https://api.github.com/repos/hyperledger/burrow/issues/654,https://api.github.com/repos/hyperledger/burrow/issues/comments/328634995,https://github.com/hyperledger/burrow/issues/654#issuecomment-328634995,RobertDiebels,"@silasdavis thanks for the answer. I can run on Linux so it's not that much of a problem. I do need docker though. Since I want to setup Burrow to run in Kubernetes. 

Thanks again though! Consider the issue closed.",2017-09-11 19:33:42,2017-09-11 19:34:40
https://api.github.com/repos/hyperledger/burrow/issues/647,https://api.github.com/repos/hyperledger/burrow/issues/comments/327138884,https://github.com/hyperledger/burrow/pull/647#issuecomment-327138884,silasdavis,Closing in favour of: https://github.com/hyperledger/burrow/pull/648 and making it a patch release,2017-09-05 10:40:40,2017-09-05 10:40:40
https://api.github.com/repos/hyperledger/burrow/issues/646,https://api.github.com/repos/hyperledger/burrow/issues/comments/326940018,https://github.com/hyperledger/burrow/pull/646#issuecomment-326940018,CLAassistant,"[![CLA assistant check](https://cla-assistant.io/pull/badge/not_signed)](https://cla-assistant.io/hyperledger/burrow?pullRequest=646) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our [Contributor License Agreement](https://cla-assistant.io/hyperledger/burrow?pullRequest=646) before we can accept your contribution.<br/>**3** out of **5** committers have signed the CLA.<br/><br/>:white_check_mark: compleatang<br/>:white_check_mark: zramsay<br/>:white_check_mark: silasdavis<br/>:x: Silas Davis<br/>:x: benjaminbollen<br/><hr/>**Silas Davis** seems not to be a GitHub user. You need a GitHub account to be able to sign the CLA. If you have already a GitHub account, please [add the email address used for this commit to your account](https://help.github.com/articles/why-are-my-commits-linked-to-the-wrong-user/#commits-are-not-linked-to-any-user).<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla-assistant.io/check/hyperledger/burrow?pullRequest=646) it.</sub>",2017-09-04 11:32:28,2018-09-25 21:00:35
https://api.github.com/repos/hyperledger/burrow/issues/644,https://api.github.com/repos/hyperledger/burrow/issues/comments/326359532,https://github.com/hyperledger/burrow/pull/644#issuecomment-326359532,compleatang,"LGTM 👍 

This will be much more sustainable and less ""monax-y"" going forward. ",2017-08-31 17:02:26,2017-08-31 17:02:26
https://api.github.com/repos/hyperledger/burrow/issues/644,https://api.github.com/repos/hyperledger/burrow/issues/comments/326797454,https://github.com/hyperledger/burrow/pull/644#issuecomment-326797454,RobertDiebels,"Hey guys, I was hoping something like this would be pushed soon. Have you pushed the container image somewhere already?
I'd like to see if I can use it.",2017-09-03 10:46:17,2017-09-03 10:46:17
https://api.github.com/repos/hyperledger/burrow/issues/644,https://api.github.com/repos/hyperledger/burrow/issues/comments/326972357,https://github.com/hyperledger/burrow/pull/644#issuecomment-326972357,silasdavis,@RobertDiebels  Will be pushed shortly after this is merged and tagged on master: https://github.com/hyperledger/burrow/pull/646,2017-09-04 14:09:49,2017-09-04 14:09:58
https://api.github.com/repos/hyperledger/burrow/issues/644,https://api.github.com/repos/hyperledger/burrow/issues/comments/327123032,https://github.com/hyperledger/burrow/pull/644#issuecomment-327123032,RobertDiebels,@silasdavis Great! Will follow that merge :D !,2017-09-05 09:30:34,2017-09-05 09:30:34
https://api.github.com/repos/hyperledger/burrow/issues/644,https://api.github.com/repos/hyperledger/burrow/issues/comments/327132810,https://github.com/hyperledger/burrow/pull/644#issuecomment-327132810,RobertDiebels,"@silasdavis Btw, I was reading the Dockerfile and this might be what you're looking for https://docs.docker.com/engine/reference/builder/#arg concerning the sharing of variables between build stages.",2017-09-05 10:11:35,2017-09-05 10:11:35
https://api.github.com/repos/hyperledger/burrow/issues/644,https://api.github.com/repos/hyperledger/burrow/issues/comments/327142260,https://github.com/hyperledger/burrow/pull/644#issuecomment-327142260,silasdavis,"@RobertDiebels Oh yes that's exactly what I was looking for, I'll put it into a patch release: https://github.com/hyperledger/burrow/pull/648 with some other tweaks. Thanks!

Incidentally now we are pushing distinct `db:${version}-dev-${date}-${commit}` builds you can create a chain with them like this:

```
monax chains make --version ""quay.io/monax/db:$version-dev-$date-$commit"" --chain-type simplechain yellow_chain
```
Where you pass `--version` any fully qualified container image from https://quay.io/repository/monax/db?tab=tags",2017-09-05 10:57:51,2017-09-05 10:58:41
https://api.github.com/repos/hyperledger/burrow/issues/644,https://api.github.com/repos/hyperledger/burrow/issues/comments/327144938,https://github.com/hyperledger/burrow/pull/644#issuecomment-327144938,RobertDiebels,"@silasdavis no problem. Glad to help :D.

I'll take a look at the repo thanks! Any chance you'll also be pushing to Hyperledger's docker repo?",2017-09-05 11:11:22,2017-09-05 11:11:22
https://api.github.com/repos/hyperledger/burrow/issues/644,https://api.github.com/repos/hyperledger/burrow/issues/comments/327389204,https://github.com/hyperledger/burrow/pull/644#issuecomment-327389204,compleatang,It would be good to push to HL's docker repo. We just need to track down who we talk to for access keys...,2017-09-06 06:36:05,2017-09-06 06:36:05
https://api.github.com/repos/hyperledger/burrow/issues/643,https://api.github.com/repos/hyperledger/burrow/issues/comments/326316647,https://github.com/hyperledger/burrow/pull/643#issuecomment-326316647,benjaminbollen,Seem like sensible improvements to me. LGTM,2017-08-31 14:40:13,2017-08-31 14:40:13
https://api.github.com/repos/hyperledger/burrow/issues/641,https://api.github.com/repos/hyperledger/burrow/issues/comments/325036970,https://github.com/hyperledger/burrow/pull/641#issuecomment-325036970,CLAassistant,"[![CLA assistant check](https://cla-assistant.io/pull/badge/not_signed)](https://cla-assistant.io/hyperledger/burrow?pullRequest=641) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you all sign our [Contributor License Agreement](https://cla-assistant.io/hyperledger/burrow?pullRequest=641) before we can accept your contribution.<br/>**2** out of **4** committers have signed the CLA.<br/><br/>:white_check_mark: silasdavis<br/>:white_check_mark: compleatang<br/>:x: benjaminbollen<br/>:x: zramsay<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla-assistant.io/check/hyperledger/burrow?pullRequest=641) it.</sub>",2017-08-25 21:20:30,2017-08-25 21:27:40
https://api.github.com/repos/hyperledger/burrow/issues/640,https://api.github.com/repos/hyperledger/burrow/issues/comments/325034070,https://github.com/hyperledger/burrow/pull/640#issuecomment-325034070,CLAassistant,"[![CLA assistant check](https://cla-assistant.io/pull/badge/not_signed)](https://cla-assistant.io/hyperledger/burrow?pullRequest=640) <br/>Thank you for your submission, we really appreciate it. Like many open source projects, we ask that you sign our [Contributor License Agreement](https://cla-assistant.io/hyperledger/burrow?pullRequest=640) before we can accept your contribution.<br/><sub>You have signed the CLA already but the status is still pending? Let us [recheck](https://cla-assistant.io/check/hyperledger/burrow?pullRequest=640) it.</sub>",2017-08-25 21:04:52,2017-08-25 21:04:52
https://api.github.com/repos/hyperledger/burrow/issues/628,https://api.github.com/repos/hyperledger/burrow/issues/comments/324642401,https://github.com/hyperledger/burrow/pull/628#issuecomment-324642401,silasdavis,"I can see some small value in these changes, but more in using https-everywhere. If you would like to have them accepted please reopen from a branch into develop. ",2017-08-24 13:55:52,2017-08-24 13:55:52
https://api.github.com/repos/hyperledger/burrow/issues/627,https://api.github.com/repos/hyperledger/burrow/issues/comments/316493879,https://github.com/hyperledger/burrow/issues/627#issuecomment-316493879,ratranqu,"Following @benjaminbollen's suggestion, I removed this commit: https://github.com/hyperledger/burrow/commit/288737d6ebec0888d131897489de7deb69969831 . 

It seems to make the problems go away. Not really conclusive at this stage, but strong indication that this commit introduces a regression.",2017-07-19 19:37:20,2017-07-19 19:37:20
https://api.github.com/repos/hyperledger/burrow/issues/627,https://api.github.com/repos/hyperledger/burrow/issues/comments/385678426,https://github.com/hyperledger/burrow/issues/627#issuecomment-385678426,silasdavis,BlockCache has been completely removed and the state mechanism overhauled. I believe this will have been fixed on develop.,2018-05-01 14:04:53,2018-05-01 14:04:53
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/316493780,https://github.com/hyperledger/burrow/issues/626#issuecomment-316493780,ratranqu,"Following @benjaminbollen's suggestion, I removed this commit: https://github.com/hyperledger/burrow/commit/288737d6ebec0888d131897489de7deb69969831 . 

It seems to make the problems go away. Not really conclusive at this stage, but strong indication that this commit introduces a regression.",2017-07-19 19:36:58,2017-07-19 19:36:58
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/320326272,https://github.com/hyperledger/burrow/issues/626#issuecomment-320326272,silasdavis,@ratranqu are you able to share the solidity that caused this? Or a minimal reproduction in solidity?,2017-08-04 18:50:35,2017-08-04 18:50:35
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/320345287,https://github.com/hyperledger/burrow/issues/626#issuecomment-320345287,silasdavis,"Also are you running any transactions that are calling `SELFDESTRUCT` around the same time? I'm expecting to see that somewhere.

It looks like we have an attempt to access the storage of a destructed contract. Off the top of my head I don't think that makes sense in terms of the EVM semantics, though I could be wrong. That being the case we may be seeing a non-deterministic reordering of transactions during the commit phase or something like that, though I need to dig a bit more.",2017-08-04 20:25:38,2017-08-04 20:34:07
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/320355063,https://github.com/hyperledger/burrow/issues/626#issuecomment-320355063,silasdavis,Are you consistently seeing this issue with 288737d and not without? From the IAVL tree perspective I suspect that a node is getting orphaned and removed by one tree that shares a node db with another. Again we'll really need a working test case to look into this further.,2017-08-04 21:15:44,2017-08-04 21:15:44
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/320508132,https://github.com/hyperledger/burrow/issues/626#issuecomment-320508132,silasdavis,"It's worth noting that the panic originates outside of the BlockCache in go-merkle. go-merkle doesn't expect a dangling node pointer to ever occur (whether than is reasonable on go-merkle's account given it allows `IAVLTrees` to share a node database is another matter), so it seems like this issue might be caused by change to caching behaviour, but it should not really be happening anyway.",2017-08-06 13:49:14,2017-08-08 16:42:47
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/320981220,https://github.com/hyperledger/burrow/issues/626#issuecomment-320981220,benjaminbollen,"There are two factors that play here: the updates to go-merkle and the updates to BlockCache; as described in go-merkle, the likely solution is to construct a new BlockCache after committing to the database",2017-08-08 14:54:19,2017-08-08 14:54:19
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/320983613,https://github.com/hyperledger/burrow/issues/626#issuecomment-320983613,ratranqu,"thx guys for looking into it. @silasdavis: there are no explicit self-destruct in the solidity code, and yes I  am consistently seeing this issue with 288737d and not without.",2017-08-08 15:01:39,2017-08-08 15:01:39
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/321012238,https://github.com/hyperledger/burrow/issues/626#issuecomment-321012238,silasdavis,"That may be a solution, but I don't yet see how this is being triggered. I would like to fix against a clear failing test case. Are you able to share some solidity code that caused this so we can reproduce?",2017-08-08 16:39:22,2017-08-08 16:40:13
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/323356919,https://github.com/hyperledger/burrow/issues/626#issuecomment-323356919,silasdavis,@ratranqu any chance you could provide us with some solidity/usage that reproduces this issue? We really don't have enough to go on just from stacktrace without being able to get into the same initial state and with knowing what kind of requests are hitting the instance. A minimal test case would be much appreciate. Or failing that if you could share some code in private and we could try to come up with one.,2017-08-18 13:41:53,2017-08-23 13:28:45
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/328822201,https://github.com/hyperledger/burrow/issues/626#issuecomment-328822201,silasdavis,"@ratranqu bump, can you provide any more detailed reproduction on this?",2017-09-12 11:17:20,2017-09-12 11:17:20
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/328823813,https://github.com/hyperledger/burrow/issues/626#issuecomment-328823813,ratranqu,"@silasdavis, unfortunately, not really. I still have the full state of the blockchain where it dies, however, the way I was getting it was by calling solidity code from a swift binary, neither of which are practical to share. 

I have not had time to isolate more and do not foresee to have time to do so in the near future.

I can share the full state of the blockchain if that helps, where you could identify why it dies during the replay?

I’m fine to close the bug as well if I’m the only one affected by this.

> On 12 Sep 2017, at 13:17, Silas Davis <notifications@github.com> wrote:
> 
> @ratranqu <https://github.com/ratranqu> bump, can you provide any more detailed reproduction on this?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub <https://github.com/hyperledger/burrow/issues/626#issuecomment-328822201>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AQPPLeWlum0chBigyLeSq45fDidbZVgEks5shmhCgaJpZM4ObQQI>.
> 

",2017-09-12 11:25:21,2017-09-12 11:25:21
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/328829489,https://github.com/hyperledger/burrow/issues/626#issuecomment-328829489,silasdavis,"I can appreciate the time issue, if you could share the state that would be great (and probably enough for me to progress with it). If you are able to share it here then you should be able to drag and drop a .zip/.gz into the comment box and it will upload. Failing that you could send it to me at .iosilas@monax (rotate left 3).",2017-09-12 11:52:29,2017-09-12 11:55:26
https://api.github.com/repos/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/comments/393111768,https://github.com/hyperledger/burrow/issues/626#issuecomment-393111768,compleatang,this has all changed dramatically. closing for now.,2018-05-30 10:28:03,2018-05-30 10:28:03
https://api.github.com/repos/hyperledger/burrow/issues/625,https://api.github.com/repos/hyperledger/burrow/issues/comments/372256756,https://github.com/hyperledger/burrow/pull/625#issuecomment-372256756,silasdavis,Closing in favour of rebased: https://github.com/hyperledger/burrow/pull/717 thanks @ratranqu ,2018-03-12 10:10:13,2018-03-12 10:10:13
https://api.github.com/repos/hyperledger/burrow/issues/624,https://api.github.com/repos/hyperledger/burrow/issues/comments/315348470,https://github.com/hyperledger/burrow/pull/624#issuecomment-315348470,silasdavis,"Thanks for the PR @ratranqu 

The CI is failing because there is a mock `transactor` that will need the `BroadcastTxAndHold` method added which I can easily do.

Splitting out `Hold` makes sense, and I don't see why not to have `BroadcastTxAndHold` as a method.

I think your solution is an improvement on what we have and is a pretty good heuristic, but I think we can still have the situation where an identical recursive call is made to the contract (with the same `CallData`) and we would still have the problem. I think the fundamental error is that we fire call events in post-order:

https://github.com/hyperledger/burrow/blob/master/manager/burrow-mint/evm/vm.go#L145

This allows it to catch any errors and output, so really it's a `AccCallComplete` event. We could introduce a `AccCallBegin` (or maybe `AccCall` and rename current `AccCall` to `AccReturn`...) that is triggered in pre-order. Then the first call event would be the one at the top of the stack, which is what `*AndHold` methods want... I think that might be a more general solution. Thoughts @benjaminbollen?

Which instability of the websocket API are you referring to? On 1337?",2017-07-14 12:33:24,2017-07-14 12:51:53
https://api.github.com/repos/hyperledger/burrow/issues/624,https://api.github.com/repos/hyperledger/burrow/issues/comments/315350566,https://github.com/hyperledger/burrow/pull/624#issuecomment-315350566,ratranqu,"@silasdavis: thx for adding the missing method in the tests. I only saw it after I did the PR, and didn't  find the time yet to update.

you're right on the identical call problem. I leave it to you guys to decide how best to handle.

re the instability of the websocket api, I only have circumstantial evidence for now. But I have noticed since 0.11.x (and up until 0.16.x at least) that when I use my libs (pure web sockets on 1337), after a while, the web sockets server on the burrow side stops broadcasting, and the only way for me to subscribe to events again is by killing the bc node I connect to and restarting it. Usually, this behaviour is triggered by killing a WS connection ungracefully (killing the connected socket due to time out for instance or killing the process). restarting the process alone without restarting the bc node did not help.

Additionally, when using the latest develop branch (cut from early July 2017), I noticed that burrow recovers from certain errors (can't remember which) when sending json-rpc calls through HTTP, but dies when the same requests are sent through WS. I suspect that some exception is not properly caught somewhere.

Anyhow, for now, quite busy on other stuff, so I don't hv a lot of time to go deeper in there for now.",2017-07-14 12:45:04,2017-07-14 12:45:04
https://api.github.com/repos/hyperledger/burrow/issues/624,https://api.github.com/repos/hyperledger/burrow/issues/comments/371476857,https://github.com/hyperledger/burrow/pull/624#issuecomment-371476857,silasdavis,Closing in favour of: https://github.com/hyperledger/burrow/issues/715 ,2018-03-08 12:45:46,2018-03-08 12:45:46
https://api.github.com/repos/hyperledger/burrow/issues/623,https://api.github.com/repos/hyperledger/burrow/issues/comments/315345534,https://github.com/hyperledger/burrow/issues/623#issuecomment-315345534,silasdavis,"This is a real pain point for us and I know others in Go land (though apparently not for Google). The basic answer is we do not support `glide update` because it updates transitive dependencies that is not acceptable for us. See my ticket: https://github.com/Masterminds/glide/issues/479.

I have a tool that I use here: https://github.com/silasdavis/glide-lock-transitive which may allow you to do what you want.

Until we have a better solution for us it is a question of maintaining the glide.lock by hand. Which is not ideal, but in my opinion is better that not having a manifest at all.

I'm going to close this ticket, but I am open to suggestions if you have them.",2017-07-14 12:16:42,2017-07-14 12:16:42
https://api.github.com/repos/hyperledger/burrow/issues/621,https://api.github.com/repos/hyperledger/burrow/issues/comments/324640541,https://github.com/hyperledger/burrow/pull/621#issuecomment-324640541,silasdavis,LGTM,2017-08-24 13:49:16,2017-08-24 13:49:16
https://api.github.com/repos/hyperledger/burrow/issues/620,https://api.github.com/repos/hyperledger/burrow/issues/comments/315346075,https://github.com/hyperledger/burrow/issues/620#issuecomment-315346075,silasdavis,"thanks, fixed in https://github.com/hyperledger/burrow/commit/2ba8decaed59816f602ecfa173bd96b2568b93e0",2017-07-14 12:19:47,2017-07-14 12:19:47
https://api.github.com/repos/hyperledger/burrow/issues/619,https://api.github.com/repos/hyperledger/burrow/issues/comments/309010707,https://github.com/hyperledger/burrow/issues/619#issuecomment-309010707,dmjones,"[This comment](https://monax.slack.com/archives/C2BB4TAQP/p1492518843441998) was posted on the Slack channel in April:

> The JS libraries, afaik, were not moved into the hyperledger repository and remain under Monax's github account. See here:
https://github.com/monax/legacy-contracts.js
https://github.com/monax/legacy-db.js
",2017-06-16 12:11:54,2017-06-16 12:12:49
https://api.github.com/repos/hyperledger/burrow/issues/616,https://api.github.com/repos/hyperledger/burrow/issues/comments/303858925,https://github.com/hyperledger/burrow/issues/616#issuecomment-303858925,silasdavis,"Resolved by: https://github.com/hyperledger/burrow/pull/595, on develop waiting to be released.",2017-05-24 21:37:06,2017-05-24 21:37:06
https://api.github.com/repos/hyperledger/burrow/issues/615,https://api.github.com/repos/hyperledger/burrow/issues/comments/303859063,https://github.com/hyperledger/burrow/issues/615#issuecomment-303859063,silasdavis,Fixed on develop by Tendermint upgrade: https://github.com/hyperledger/burrow/pull/595,2017-05-24 21:37:46,2017-05-24 21:37:46
https://api.github.com/repos/hyperledger/burrow/issues/614,https://api.github.com/repos/hyperledger/burrow/issues/comments/303694647,https://github.com/hyperledger/burrow/pull/614#issuecomment-303694647,benjaminbollen,"can you then also remove `Masterminds/glide` from `glide.yaml` https://github.com/hyperledger/burrow/blob/master/glide.yaml#L33, as that was introduced together with `hell`",2017-05-24 11:16:57,2017-05-24 11:16:57
https://api.github.com/repos/hyperledger/burrow/issues/614,https://api.github.com/repos/hyperledger/burrow/issues/comments/303854007,https://github.com/hyperledger/burrow/pull/614#issuecomment-303854007,silasdavis,@benjaminbollen done!,2017-05-24 21:16:03,2017-05-24 21:16:03
https://api.github.com/repos/hyperledger/burrow/issues/614,https://api.github.com/repos/hyperledger/burrow/issues/comments/305805376,https://github.com/hyperledger/burrow/pull/614#issuecomment-305805376,benjaminbollen,LGTM,2017-06-02 14:31:35,2017-06-02 14:31:35
https://api.github.com/repos/hyperledger/burrow/issues/613,https://api.github.com/repos/hyperledger/burrow/issues/comments/303856083,https://github.com/hyperledger/burrow/pull/613#issuecomment-303856083,silasdavis,Changed that,2017-05-24 21:24:27,2017-05-24 21:24:27
https://api.github.com/repos/hyperledger/burrow/issues/613,https://api.github.com/repos/hyperledger/burrow/issues/comments/305805538,https://github.com/hyperledger/burrow/pull/613#issuecomment-305805538,benjaminbollen,LGTM,2017-06-02 14:32:09,2017-06-02 14:32:09
https://api.github.com/repos/hyperledger/burrow/issues/611,https://api.github.com/repos/hyperledger/burrow/issues/comments/302353614,https://github.com/hyperledger/burrow/issues/611#issuecomment-302353614,marc4gov,"This is the output from `docker stats` on the burrow container when it's still running, with logrotate on. It looks like if there's a memory leak (output 1s intervals). When I restart the chain, memory 'resets' and fills up again.

```
CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
e04c94bf90a8        19.50%              729.6MiB / 3.858GiB   18.47%              4.57MB / 35.6MB     0B / 3GB            9

CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
e04c94bf90a8        16.69%              730.8MiB / 3.858GiB   18.50%              4.57MB / 35.6MB     0B / 3GB            9

CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
e04c94bf90a8        16.69%              730.8MiB / 3.858GiB   18.50%              4.57MB / 35.6MB     0B / 3GB            9

CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
e04c94bf90a8        17.28%              732MiB / 3.858GiB     18.53%              4.57MB / 35.6MB     0B / 3.01GB         9

CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
e04c94bf90a8        17.28%              732MiB / 3.858GiB     18.53%              4.57MB / 35.6MB     0B / 3.01GB         9

CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
e04c94bf90a8        17.57%              733.2MiB / 3.858GiB   18.56%              4.57MB / 35.6MB     0B / 3.02GB         9

CONTAINER           CPU %               MEM USAGE / LIMIT     MEM %               NET I/O             BLOCK I/O           PIDS
e04c94bf90a8        17.57%              733.2MiB / 3.858GiB   18.56%              4.57MB / 35.6MB     0B / 3.02GB         9

```",2017-05-18 09:36:45,2017-05-18 10:49:58
https://api.github.com/repos/hyperledger/burrow/issues/611,https://api.github.com/repos/hyperledger/burrow/issues/comments/306000520,https://github.com/hyperledger/burrow/issues/611#issuecomment-306000520,marc4gov,"When I stop the chain and try to start it again, I get this, most of the time. Chain dies....
```
INFO[06-03|20:42:55] Force disabling Tendermint's native RPC  channel=Info run_id=3876a542-489d-11e7-86d0-4df11b598c51 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 tendermint.go:118 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" provided_rpc_laddr=0.0.0.0:46657
panic: Paniced on a Sanity Check: Expected storeHeight (1756) and stateHeight (1755) to match.
```
",2017-06-03 20:47:21,2017-06-03 20:47:21
https://api.github.com/repos/hyperledger/burrow/issues/611,https://api.github.com/repos/hyperledger/burrow/issues/comments/310679234,https://github.com/hyperledger/burrow/issues/611#issuecomment-310679234,rpoddighe,"+1, experiencing the same issue. When deploying lots of contracts (either in parallel or in serial), the running burrow server's CPU and memory usage increases. On a server restart the CPU/memory usage returns to normal, however it is often not possible to restart then chain due to the aforementioned error. 
It could be related to this Tendermint issue:

https://github.com/tendermint/tendermint/issues/388 

This is claimed to be fixed in Tendermint v0.9.0 (Burrow currently uses 0.8 if I'm not mistaken).",2017-06-23 14:24:49,2017-06-23 14:24:49
https://api.github.com/repos/hyperledger/burrow/issues/611,https://api.github.com/repos/hyperledger/burrow/issues/comments/373004830,https://github.com/hyperledger/burrow/issues/611#issuecomment-373004830,silasdavis,This may be another manifestation of: https://github.com/hyperledger/burrow/pull/718 ,2018-03-14 12:33:29,2018-03-14 12:33:29
https://api.github.com/repos/hyperledger/burrow/issues/611,https://api.github.com/repos/hyperledger/burrow/issues/comments/385678715,https://github.com/hyperledger/burrow/issues/611#issuecomment-385678715,silasdavis,I believe this has been fixed by eliminating memory leak by replacing `BlockCache` by `StateCache`,2018-05-01 14:06:07,2018-05-01 14:06:07
https://api.github.com/repos/hyperledger/burrow/issues/609,https://api.github.com/repos/hyperledger/burrow/issues/comments/301397793,https://github.com/hyperledger/burrow/issues/609#issuecomment-301397793,ratranqu,"the Log/$Address part of the bug is a red herring: it's due to the change in the way the event messages are deserialised (in 0.11.x, they had an EventType encoded).

The NewBlock part still remains.

I will update the title to reflect that. ",2017-05-15 07:30:14,2017-05-15 07:30:14
https://api.github.com/repos/hyperledger/burrow/issues/609,https://api.github.com/repos/hyperledger/burrow/issues/comments/301437695,https://github.com/hyperledger/burrow/issues/609#issuecomment-301437695,ratranqu,"Setting the New Block event subscription over web socket on 1337 does make it to hyperledger/burrow/events/events.go:63 (Subscribe), but the callback is never called (and NewBlock events are not making their way back to the `EventSwitch` it seems). When using `monax pkgs do ...` to deploy contracts, it does turn on subscription on NewBlock (the NewBlock events make their way back to the `EventSwitch`) however.",2017-05-15 10:31:11,2017-05-15 10:31:27
https://api.github.com/repos/hyperledger/burrow/issues/609,https://api.github.com/repos/hyperledger/burrow/issues/comments/400229001,https://github.com/hyperledger/burrow/issues/609#issuecomment-400229001,compleatang,We are working towards complete removal of 1337 in favor of grpc. Closing,2018-06-26 08:41:26,2018-06-26 08:41:26
https://api.github.com/repos/hyperledger/burrow/issues/608,https://api.github.com/repos/hyperledger/burrow/issues/comments/300865484,https://github.com/hyperledger/burrow/pull/608#issuecomment-300865484,silasdavis,Thanks,2017-05-11 17:46:56,2017-05-11 17:46:56
https://api.github.com/repos/hyperledger/burrow/issues/607,https://api.github.com/repos/hyperledger/burrow/issues/comments/301561395,https://github.com/hyperledger/burrow/pull/607#issuecomment-301561395,benjaminbollen,please fmt,2017-05-15 18:24:28,2017-05-15 18:24:28
https://api.github.com/repos/hyperledger/burrow/issues/607,https://api.github.com/repos/hyperledger/burrow/issues/comments/301568903,https://github.com/hyperledger/burrow/pull/607#issuecomment-301568903,silasdavis,"I have just amended the commit to debug log the `memErr`s otherwise the same, did make fmt, and tweaked a couple of comments.

1. A thought on this. For `MLOAD` we are hitting an unnecessary copy when we push the the value to the stack:

```go
func (st *Stack) Push(d Word256) {
	st.useGas(GasStackOp)
	if st.ptr == cap(st.data) {
		st.setErr(ErrDataStackOverflow)
		return
	}
	st.data[st.ptr] = d
	st.ptr++
}

// ...

func LeftPadWord256(bz []byte) (word Word256) {
	copy(word[32-len(bz):], bz)
	return
}
```

For cases like this (where we want a copy _somewhere_ downstream) we could provide a function on the `Memory` interface `func ReadTo(offset, length int64, destination []byte) ([]byte, error)`. Then implement `LeftPadWord256` as `ReadTo(offset, length, word[32-length:])`. The other main occasion that we `Read` is to get the input for calls `CALL`s ultimately these are pushed to stack (obligatory copy). So if we passed `input []byte` from `call` as `input Memory` we could postpone the copy and have `ReadTo` do it whilst still maintaining safety. Again... probably not an optimisation we need now...

2. I'm logging `memErr` at least for now.

3. If we were to sort out our gas pricing to be fit for our purposes then we wouldn't be doing any worse than other famous EVM implementations with this memory model. Essentially memory is priced rather cheaply (1 `MSTORE` cost per 16 MiB!), but at least it is bounded by a linear function in number of `MSTORE`s (alright also `CALLDATACOPY` and others, but still) 
",2017-05-15 18:50:56,2017-05-15 18:51:32
https://api.github.com/repos/hyperledger/burrow/issues/607,https://api.github.com/repos/hyperledger/burrow/issues/comments/301570209,https://github.com/hyperledger/burrow/pull/607#issuecomment-301570209,silasdavis,CLI tests pass for me at this version: https://github.com/monax/cli/blob/6a14d0cf2e890be98d9e35f4d26dd29d5292f793/Makefile#L92,2017-05-15 18:55:43,2017-05-15 18:55:43
https://api.github.com/repos/hyperledger/burrow/issues/607,https://api.github.com/repos/hyperledger/burrow/issues/comments/301577246,https://github.com/hyperledger/burrow/pull/607#issuecomment-301577246,benjaminbollen,Further tests in monax/cli also pass locally for me.,2017-05-15 19:22:43,2017-05-15 19:22:43
https://api.github.com/repos/hyperledger/burrow/issues/605,https://api.github.com/repos/hyperledger/burrow/issues/comments/300270952,https://github.com/hyperledger/burrow/pull/605#issuecomment-300270952,silasdavis,"Although this fixes the current issues with out-of-sync cache. I am questioning whether an attempt to remove a removed or non-existent account (or name reg entry) should ever cause a panic. If we think it should (what does this save us from?) then there is still potential for a panic in the present code if we add and remove an account (or name reg entry) without `BlockCache.Sync()`ing inbetween. So if panics should remain, we should probably fix that now too.",2017-05-09 19:09:19,2017-05-09 19:09:19
https://api.github.com/repos/hyperledger/burrow/issues/605,https://api.github.com/repos/hyperledger/burrow/issues/comments/300307410,https://github.com/hyperledger/burrow/pull/605#issuecomment-300307410,benjaminbollen,"LGTM; but this is not a transparant matter, so I will hold off the merge and come back to it in the morning.",2017-05-09 21:30:08,2017-05-09 21:30:08
https://api.github.com/repos/hyperledger/burrow/issues/605,https://api.github.com/repos/hyperledger/burrow/issues/comments/300330193,https://github.com/hyperledger/burrow/pull/605#issuecomment-300330193,silasdavis,Also see my comment above. That needs a resolution before any merge. ,2017-05-09 23:27:44,2017-05-09 23:27:44
https://api.github.com/repos/hyperledger/burrow/issues/605,https://api.github.com/repos/hyperledger/burrow/issues/comments/300808541,https://github.com/hyperledger/burrow/pull/605#issuecomment-300808541,benjaminbollen,I would advice that we merge #605 with the current fix; because if our understanding is correct then the reported failures on selfdestruct should be addressed (assuming no-one instantly destructs new accounts); then we raise the issue of the removal or improved knowledge for required panic in a new item.,2017-05-11 14:34:36,2017-05-11 14:34:36
https://api.github.com/repos/hyperledger/burrow/issues/605,https://api.github.com/repos/hyperledger/burrow/issues/comments/300809288,https://github.com/hyperledger/burrow/pull/605#issuecomment-300809288,benjaminbollen,LGTM,2017-05-11 14:37:03,2017-05-11 14:37:03
https://api.github.com/repos/hyperledger/burrow/issues/604,https://api.github.com/repos/hyperledger/burrow/issues/comments/299863572,https://github.com/hyperledger/burrow/pull/604#issuecomment-299863572,benjaminbollen,LGTM; SUICIDE-> SELFDESTRUCT rename,2017-05-08 13:15:37,2017-05-08 13:15:37
https://api.github.com/repos/hyperledger/burrow/issues/601,https://api.github.com/repos/hyperledger/burrow/issues/comments/299474732,https://github.com/hyperledger/burrow/issues/601#issuecomment-299474732,benjaminbollen,"Yes, this is the opcode I want (to prioritise) ! :)",2017-05-05 14:10:01,2017-05-05 14:10:01
https://api.github.com/repos/hyperledger/burrow/issues/601,https://api.github.com/repos/hyperledger/burrow/issues/comments/370181077,https://github.com/hyperledger/burrow/issues/601#issuecomment-370181077,silasdavis,"This is trivial to implement - already happens implicitly, we just need to add it.",2018-03-03 21:26:34,2018-03-03 21:26:34
https://api.github.com/repos/hyperledger/burrow/issues/601,https://api.github.com/repos/hyperledger/burrow/issues/comments/394646803,https://github.com/hyperledger/burrow/issues/601#issuecomment-394646803,seanyoung,"Merged, see https://github.com/hyperledger/burrow/pull/757",2018-06-05 09:38:01,2018-06-05 09:38:01
https://api.github.com/repos/hyperledger/burrow/issues/600,https://api.github.com/repos/hyperledger/burrow/issues/comments/394646457,https://github.com/hyperledger/burrow/issues/600#issuecomment-394646457,seanyoung,"revert opcode merged, see https://github.com/hyperledger/burrow/pull/778",2018-06-05 09:36:48,2018-06-05 09:36:48
https://api.github.com/repos/hyperledger/burrow/issues/597,https://api.github.com/repos/hyperledger/burrow/issues/comments/299166920,https://github.com/hyperledger/burrow/issues/597#issuecomment-299166920,silasdavis,"This test was passing due to a globally scoped timeout that should have been a timeout within the final for loop. It is actually a real fail. The reason is a breaking change in go-rpc:

From ws_client.go:

```go
// Subscribe to an event. Note the server must have a ""subscribe"" route
// defined.
func (wsc *WSClient) Subscribe(eventid string) error {
	err := wsc.WriteJSON(types.RPCRequest{
		JSONRPC: ""2.0"",
		ID:      """",
		Method:  ""subscribe"",
		Params:  map[string]interface{}{""event"": eventid},
	})
	return err
}

// Unsubscribe from an event. Note the server must have a ""unsubscribe"" route
// defined.
func (wsc *WSClient) Unsubscribe(eventid string) error {
	err := wsc.WriteJSON(types.RPCRequest{
		JSONRPC: ""2.0"",
		ID:      """",
		Method:  ""unsubscribe"",
		Params:  map[string]interface{}{""event"": eventid},
	})
	return err
}
```
Our unsubscribe method takes a 'subscriptionId' parameter, not an 'event' parameter. Before https://github.com/tendermint/go-rpc/commit/e1d5873bdfc95728971a38297ec3150a556397f9 there were no parameter names.

We should call the WriteJSON method ourselves.",2017-05-04 12:08:55,2017-05-04 12:08:55
https://api.github.com/repos/hyperledger/burrow/issues/597,https://api.github.com/repos/hyperledger/burrow/issues/comments/299169146,https://github.com/hyperledger/burrow/issues/597#issuecomment-299169146,benjaminbollen,"so worth updating ours here: https://github.com/hyperledger/burrow/blob/develop/rpc/tendermint/core/routes.go#L42 ?

and carry forward the breaking change?  I'd opt for that over absorbing the breaking change in our code; burrow-client is the foremost user of tendermint rpc for burrow anyways",2017-05-04 12:20:21,2017-05-04 12:20:21
https://api.github.com/repos/hyperledger/burrow/issues/597,https://api.github.com/repos/hyperledger/burrow/issues/comments/299721813,https://github.com/hyperledger/burrow/issues/597#issuecomment-299721813,silasdavis,fixed in pr,2017-05-07 17:38:24,2017-05-07 17:38:24
https://api.github.com/repos/hyperledger/burrow/issues/595,https://api.github.com/repos/hyperledger/burrow/issues/comments/299162638,https://github.com/hyperledger/burrow/pull/595#issuecomment-299162638,benjaminbollen,closes https://github.com/hyperledger/burrow/issues/583,2017-05-04 11:46:06,2017-05-04 11:46:06
https://api.github.com/repos/hyperledger/burrow/issues/594,https://api.github.com/repos/hyperledger/burrow/issues/comments/437142178,https://github.com/hyperledger/burrow/issues/594#issuecomment-437142178,silasdavis,fixed by #940 ,2018-11-08 20:21:24,2018-11-08 20:21:24
https://api.github.com/repos/hyperledger/burrow/issues/593,https://api.github.com/repos/hyperledger/burrow/issues/comments/298615554,https://github.com/hyperledger/burrow/pull/593#issuecomment-298615554,silasdavis,"Closing in favour of split:

https://github.com/hyperledger/burrow/pull/595
https://github.com/hyperledger/burrow/pull/596",2017-05-02 12:00:29,2017-05-02 12:00:29
https://api.github.com/repos/hyperledger/burrow/issues/588,https://api.github.com/repos/hyperledger/burrow/issues/comments/368460334,https://github.com/hyperledger/burrow/issues/588#issuecomment-368460334,silasdavis,closing in favour of #674,2018-02-26 10:43:55,2018-02-26 10:43:55
https://api.github.com/repos/hyperledger/burrow/issues/587,https://api.github.com/repos/hyperledger/burrow/issues/comments/297056031,https://github.com/hyperledger/burrow/pull/587#issuecomment-297056031,compleatang,#process ,2017-04-25 14:52:58,2017-04-25 14:52:58
https://api.github.com/repos/hyperledger/burrow/issues/582,https://api.github.com/repos/hyperledger/burrow/issues/comments/393109774,https://github.com/hyperledger/burrow/issues/582#issuecomment-393109774,compleatang,closing in favor of #609 ,2018-05-30 10:20:49,2018-05-30 10:20:49
https://api.github.com/repos/hyperledger/burrow/issues/580,https://api.github.com/repos/hyperledger/burrow/issues/comments/393114762,https://github.com/hyperledger/burrow/issues/580#issuecomment-393114762,compleatang,closing this will need to be revisited properly at a later time,2018-05-30 10:39:59,2018-05-30 10:39:59
https://api.github.com/repos/hyperledger/burrow/issues/578,https://api.github.com/repos/hyperledger/burrow/issues/comments/294007699,https://github.com/hyperledger/burrow/pull/578#issuecomment-294007699,benjaminbollen,"this shows that #484 is good to be merged; will merge this PR though, effecively closing #484 ",2017-04-13 20:05:02,2017-04-13 20:05:02
https://api.github.com/repos/hyperledger/burrow/issues/576,https://api.github.com/repos/hyperledger/burrow/issues/comments/293903802,https://github.com/hyperledger/burrow/pull/576#issuecomment-293903802,silasdavis,@benjaminbollen this is ready to reviewed/merged. I'm fairly confident it will restore our docker pushing to how it was before the move to hyperledger.,2017-04-13 14:01:00,2017-04-13 14:01:00
https://api.github.com/repos/hyperledger/burrow/issues/574,https://api.github.com/repos/hyperledger/burrow/issues/comments/293851158,https://github.com/hyperledger/burrow/pull/574#issuecomment-293851158,benjaminbollen,LGTM (we're running around a bit but we should have landed now :) ),2017-04-13 10:21:48,2017-04-13 10:21:48
https://api.github.com/repos/hyperledger/burrow/issues/573,https://api.github.com/repos/hyperledger/burrow/issues/comments/293849503,https://github.com/hyperledger/burrow/pull/573#issuecomment-293849503,benjaminbollen,LGTM (effectlively develop v0.17 is on par now with v0.16.2 modulo version number),2017-04-13 10:13:26,2017-04-13 10:13:26
https://api.github.com/repos/hyperledger/burrow/issues/568,https://api.github.com/repos/hyperledger/burrow/issues/comments/293844713,https://github.com/hyperledger/burrow/pull/568#issuecomment-293844713,silasdavis,"We are discussing how to handle vendor, we don't need a PR for this",2017-04-13 09:51:28,2017-04-13 09:51:28
https://api.github.com/repos/hyperledger/burrow/issues/567,https://api.github.com/repos/hyperledger/burrow/issues/comments/300854480,https://github.com/hyperledger/burrow/issues/567#issuecomment-300854480,zramsay,"this ended up being a bool instead, Silas fixed it",2017-05-11 17:07:44,2017-05-11 17:07:44
https://api.github.com/repos/hyperledger/burrow/issues/564,https://api.github.com/repos/hyperledger/burrow/issues/comments/293603721,https://github.com/hyperledger/burrow/pull/564#issuecomment-293603721,silasdavis,Pulling this into develop. It will propagate through.,2017-04-12 14:55:33,2017-04-12 14:55:33
https://api.github.com/repos/hyperledger/burrow/issues/554,https://api.github.com/repos/hyperledger/burrow/issues/comments/292532288,https://github.com/hyperledger/burrow/pull/554#issuecomment-292532288,zramsay,FIPF,2017-04-07 13:11:53,2017-04-07 13:11:53
https://api.github.com/repos/hyperledger/burrow/issues/549,https://api.github.com/repos/hyperledger/burrow/issues/comments/291552086,https://github.com/hyperledger/burrow/pull/549#issuecomment-291552086,benjaminbollen,we need to pull hotfixes (and name changes) from master onto `release-0.16`; Ill make the PR,2017-04-04 16:16:43,2017-04-04 16:16:43
https://api.github.com/repos/hyperledger/burrow/issues/548,https://api.github.com/repos/hyperledger/burrow/issues/comments/291502462,https://github.com/hyperledger/burrow/issues/548#issuecomment-291502462,silasdavis,"For load-balancers, kubernetes, etc I think all we really need is something that will return HTTP status 200 when the node is running. Just so dead nodes can be restarted.

It may want to consider finer-grained notions of health (like whether producing blocks), but it is possible to get this sort off information by subscribing.

Having spoken with Casey the status endpoint supports the kubernetes use case sufficiently so will close this for now.",2017-04-04 13:39:16,2017-04-04 13:39:16
https://api.github.com/repos/hyperledger/burrow/issues/548,https://api.github.com/repos/hyperledger/burrow/issues/comments/291541915,https://github.com/hyperledger/burrow/issues/548#issuecomment-291541915,benjaminbollen,this way we're not going to have a clean /health endpoint :),2017-04-04 15:45:25,2017-04-04 15:45:25
https://api.github.com/repos/hyperledger/burrow/issues/547,https://api.github.com/repos/hyperledger/burrow/issues/comments/300854594,https://github.com/hyperledger/burrow/issues/547#issuecomment-300854594,zramsay,closed in #549 ,2017-05-11 17:08:14,2017-05-11 17:08:14
https://api.github.com/repos/hyperledger/burrow/issues/543,https://api.github.com/repos/hyperledger/burrow/issues/comments/290789915,https://github.com/hyperledger/burrow/issues/543#issuecomment-290789915,benjaminbollen,this is erisdb.js; this is a very incomplete bug report; please reopen with more complete information,2017-03-31 18:22:09,2017-03-31 18:22:09
https://api.github.com/repos/hyperledger/burrow/issues/542,https://api.github.com/repos/hyperledger/burrow/issues/comments/297035136,https://github.com/hyperledger/burrow/issues/542#issuecomment-297035136,silasdavis,Will need to reproduce and pull a trace to see what is going on here.,2017-04-25 13:46:54,2017-04-25 13:46:54
https://api.github.com/repos/hyperledger/burrow/issues/542,https://api.github.com/repos/hyperledger/burrow/issues/comments/297035469,https://github.com/hyperledger/burrow/issues/542#issuecomment-297035469,zramsay,https://github.com/monax/cli/pull/1344 may be relevant,2017-04-25 13:47:57,2017-04-25 13:48:15
https://api.github.com/repos/hyperledger/burrow/issues/542,https://api.github.com/repos/hyperledger/burrow/issues/comments/299490692,https://github.com/hyperledger/burrow/issues/542#issuecomment-299490692,silasdavis,Minimal-ish reproduction here: https://gist.github.com/silasdavis/7f35cb31a255c18d2fc70eed1fa38211,2017-05-05 15:08:09,2017-05-05 15:08:09
https://api.github.com/repos/hyperledger/burrow/issues/542,https://api.github.com/repos/hyperledger/burrow/issues/comments/304321868,https://github.com/hyperledger/burrow/issues/542#issuecomment-304321868,silasdavis,Fixed on develop,2017-05-26 16:04:53,2017-05-26 16:04:53
https://api.github.com/repos/hyperledger/burrow/issues/540,https://api.github.com/repos/hyperledger/burrow/issues/comments/393108188,https://github.com/hyperledger/burrow/issues/540#issuecomment-393108188,compleatang,this pipeline has been refactored. closing this issue. if it reappears we can reopen,2018-05-30 10:15:09,2018-05-30 10:15:09
https://api.github.com/repos/hyperledger/burrow/issues/539,https://api.github.com/repos/hyperledger/burrow/issues/comments/289519015,https://github.com/hyperledger/burrow/issues/539#issuecomment-289519015,benjaminbollen,"changed: https://github.com/monax/eris-db/commit/3ac86da5567d3a9bbb2be8affb58a8844b9b1ce7

thanks",2017-03-27 17:09:12,2017-03-27 17:09:12
https://api.github.com/repos/hyperledger/burrow/issues/537,https://api.github.com/repos/hyperledger/burrow/issues/comments/289120361,https://github.com/hyperledger/burrow/pull/537#issuecomment-289120361,benjaminbollen,LGTM,2017-03-24 19:21:35,2017-03-24 19:21:35
https://api.github.com/repos/hyperledger/burrow/issues/532,https://api.github.com/repos/hyperledger/burrow/issues/comments/288359092,https://github.com/hyperledger/burrow/pull/532#issuecomment-288359092,benjaminbollen,This should definitely not be a PR to master,2017-03-22 10:36:06,2017-03-22 10:36:06
https://api.github.com/repos/hyperledger/burrow/issues/532,https://api.github.com/repos/hyperledger/burrow/issues/comments/288360184,https://github.com/hyperledger/burrow/pull/532#issuecomment-288360184,benjaminbollen,"For now closing PR, as it is too uncomfortable to have one click-away from merging.  We can have the discussion further as already had and restarted.",2017-03-22 10:40:49,2017-03-22 10:40:49
https://api.github.com/repos/hyperledger/burrow/issues/532,https://api.github.com/repos/hyperledger/burrow/issues/comments/291033622,https://github.com/hyperledger/burrow/pull/532#issuecomment-291033622,VoR0220,Reopening PR to bring back discussion of vendoring in dependencies,2017-04-03 02:03:52,2017-04-03 02:03:52
https://api.github.com/repos/hyperledger/burrow/issues/532,https://api.github.com/repos/hyperledger/burrow/issues/comments/293844439,https://github.com/hyperledger/burrow/pull/532#issuecomment-293844439,silasdavis,"We don't need this PR to have the discussion, we're already planning to do something in this direction fairly soon.",2017-04-13 09:50:16,2017-04-13 09:50:16
https://api.github.com/repos/hyperledger/burrow/issues/531,https://api.github.com/repos/hyperledger/burrow/issues/comments/288368815,https://github.com/hyperledger/burrow/pull/531#issuecomment-288368815,benjaminbollen,"CircleCI is broken under renaming of organisation; but PR concerns documentation, so will merge without CI result.",2017-03-22 11:18:26,2017-03-22 11:18:26
https://api.github.com/repos/hyperledger/burrow/issues/530,https://api.github.com/repos/hyperledger/burrow/issues/comments/288045129,https://github.com/hyperledger/burrow/issues/530#issuecomment-288045129,benjaminbollen,Thanks for reporting this; we will try to reproduce and get it addressed.,2017-03-21 11:03:01,2017-03-21 11:03:01
https://api.github.com/repos/hyperledger/burrow/issues/530,https://api.github.com/repos/hyperledger/burrow/issues/comments/288301646,https://github.com/hyperledger/burrow/issues/530#issuecomment-288301646,whalelephant,thank!,2017-03-22 05:22:15,2017-03-22 05:22:15
https://api.github.com/repos/hyperledger/burrow/issues/530,https://api.github.com/repos/hyperledger/burrow/issues/comments/289362819,https://github.com/hyperledger/burrow/issues/530#issuecomment-289362819,whalelephant,"Hey, has there been any updates?
Thanks!",2017-03-27 06:14:14,2017-03-27 06:14:14
https://api.github.com/repos/hyperledger/burrow/issues/530,https://api.github.com/repos/hyperledger/burrow/issues/comments/393108429,https://github.com/hyperledger/burrow/issues/530#issuecomment-393108429,compleatang,closing this issue as unreproduceable.,2018-05-30 10:15:54,2018-05-30 10:15:54
https://api.github.com/repos/hyperledger/burrow/issues/527,https://api.github.com/repos/hyperledger/burrow/issues/comments/286747066,https://github.com/hyperledger/burrow/issues/527#issuecomment-286747066,benjaminbollen,"A lot of work needs to be done on the RPC.  The proposal of an extensible RPC is good and taken onboard.  eris-db needs to incorporate a secure writing api under `eris-worker` (currently only exposed through tooling or js libs).

I strongly disagree that nesting packages solves any of the current hurdles, nor do I read an argument to support it.  From that I think it is safe to close this issue.",2017-03-15 13:51:40,2017-03-15 13:51:40
https://api.github.com/repos/hyperledger/burrow/issues/527,https://api.github.com/repos/hyperledger/burrow/issues/comments/286749961,https://github.com/hyperledger/burrow/issues/527#issuecomment-286749961,VoR0220,"Nesting can alleviate me having to jump around the entire DB to figure out how things are all connected, it's just another depth inward, and could fit under the ""rpc"" package that has been set up under the client (which I would think would be a sensible thing to do?) Overall this needs to all be cleaned up, currently it's very difficult to navigate and very difficult to figure out wtf is going on. ",2017-03-15 14:01:25,2017-03-15 14:01:25
https://api.github.com/repos/hyperledger/burrow/issues/527,https://api.github.com/repos/hyperledger/burrow/issues/comments/286752325,https://github.com/hyperledger/burrow/issues/527#issuecomment-286752325,benjaminbollen,"rpc is not a child of client;
golang favors a flat tree structure much more than a nested one",2017-03-15 14:09:00,2017-03-15 14:09:00
https://api.github.com/repos/hyperledger/burrow/issues/527,https://api.github.com/repos/hyperledger/burrow/issues/comments/286752540,https://github.com/hyperledger/burrow/issues/527#issuecomment-286752540,VoR0220,https://github.com/eris-ltd/eris-db/tree/master/client/rpc,2017-03-15 14:09:48,2017-03-15 14:09:48
https://api.github.com/repos/hyperledger/burrow/issues/527,https://api.github.com/repos/hyperledger/burrow/issues/comments/286753135,https://github.com/hyperledger/burrow/issues/527#issuecomment-286753135,benjaminbollen,"I am aware of the renaming that happened; I cannot say that I think that is a good renaming as it happened, but I as everyone else pick my battles; but importantly that is not the rpc package you are referring to.",2017-03-15 14:11:49,2017-03-15 14:11:49
https://api.github.com/repos/hyperledger/burrow/issues/526,https://api.github.com/repos/hyperledger/burrow/issues/comments/286213661,https://github.com/hyperledger/burrow/issues/526#issuecomment-286213661,VoR0220,"@NodeGuy do you mean the actual ""Invalid"" Opcode and we don't account for it? ",2017-03-13 19:15:58,2017-03-13 19:15:58
https://api.github.com/repos/hyperledger/burrow/issues/526,https://api.github.com/repos/hyperledger/burrow/issues/comments/286250986,https://github.com/hyperledger/burrow/issues/526#issuecomment-286250986,NodeGuy,"Sorry, I hit `Save` by accident before I finished completing the issue.  Please see my update.",2017-03-13 21:34:14,2017-03-14 18:00:46
https://api.github.com/repos/hyperledger/burrow/issues/526,https://api.github.com/repos/hyperledger/burrow/issues/comments/286378611,https://github.com/hyperledger/burrow/issues/526#issuecomment-286378611,benjaminbollen,"That would likely be caused by the new opcode introduced by EIP 141 ""designated invalid instruction"": https://github.com/ethereum/EIPs/issues/141

and indeed that is introduced as of solc 0.4.9 
https://github.com/ethereum/solidity/blob/develop/Changelog.md#049-2017-01-31

it is peculiar that the returned error does not return the actual opcode (that hex string is far too long); so that is a separate issue.",2017-03-14 10:17:56,2017-03-14 10:17:56
https://api.github.com/repos/hyperledger/burrow/issues/526,https://api.github.com/repos/hyperledger/burrow/issues/comments/311591613,https://github.com/hyperledger/burrow/issues/526#issuecomment-311591613,oshin-gupta,"Also facing same problem...did anyone resolve it??
",2017-06-28 08:23:43,2017-06-28 08:23:43
https://api.github.com/repos/hyperledger/burrow/issues/526,https://api.github.com/repos/hyperledger/burrow/issues/comments/370142079,https://github.com/hyperledger/burrow/issues/526#issuecomment-370142079,silasdavis,"I cannot reproduce this with solc 0.4.4, 0.4.9 or 0.4.20 - and I do not get the same payload as being sent their with transactAndHold. Will try with JS Libs",2018-03-03 11:56:19,2018-03-03 11:56:19
https://api.github.com/repos/hyperledger/burrow/issues/526,https://api.github.com/repos/hyperledger/burrow/issues/comments/393108679,https://github.com/hyperledger/burrow/issues/526#issuecomment-393108679,compleatang,closing this issue as outdated. feel free to reopen if it arises again.,2018-05-30 10:16:44,2018-05-30 10:16:44
https://api.github.com/repos/hyperledger/burrow/issues/525,https://api.github.com/repos/hyperledger/burrow/issues/comments/287026402,https://github.com/hyperledger/burrow/pull/525#issuecomment-287026402,benjaminbollen,LGTM,2017-03-16 11:11:08,2017-03-16 11:11:08
https://api.github.com/repos/hyperledger/burrow/issues/525,https://api.github.com/repos/hyperledger/burrow/issues/comments/287026861,https://github.com/hyperledger/burrow/pull/525#issuecomment-287026861,benjaminbollen,the only pain is that merging this will change the hash of the docker image. Days without immutability: set back to zero.,2017-03-16 11:13:11,2017-03-16 11:13:11
https://api.github.com/repos/hyperledger/burrow/issues/524,https://api.github.com/repos/hyperledger/burrow/issues/comments/283401214,https://github.com/hyperledger/burrow/issues/524#issuecomment-283401214,benjaminbollen,For the current release v0.16.0 is already deployed to quay.io through merge with master; so critical but not time-critical,2017-03-01 17:00:17,2017-03-01 17:00:17
https://api.github.com/repos/hyperledger/burrow/issues/522,https://api.github.com/repos/hyperledger/burrow/issues/comments/283374585,https://github.com/hyperledger/burrow/issues/522#issuecomment-283374585,VoR0220,"Just make this ""move keys into eris-db""",2017-03-01 15:37:36,2017-03-01 15:37:36
https://api.github.com/repos/hyperledger/burrow/issues/520,https://api.github.com/repos/hyperledger/burrow/issues/comments/283105099,https://github.com/hyperledger/burrow/pull/520#issuecomment-283105099,benjaminbollen,I tried to rebase it to develop; but the PR does not re-calculate for me; despite develop now updated with latest of v0.16,2017-02-28 17:19:38,2017-02-28 17:19:38
https://api.github.com/repos/hyperledger/burrow/issues/520,https://api.github.com/repos/hyperledger/burrow/issues/comments/283299629,https://github.com/hyperledger/burrow/pull/520#issuecomment-283299629,silasdavis,"That's odd, I can reopen against develop.

When you say the rpc interface, you mean what is currently `v0/json_rpc.go`?

Perhaps that can/should go back up. I'll take a look at reopen.",2017-03-01 10:12:57,2017-03-01 10:12:57
https://api.github.com/repos/hyperledger/burrow/issues/520,https://api.github.com/repos/hyperledger/burrow/issues/comments/283325599,https://github.com/hyperledger/burrow/pull/520#issuecomment-283325599,benjaminbollen,"Yes, if you can just take the unit tests and add them that would be great.  Otherwise let me know and I can do that; you should enjoy your holidays",2017-03-01 12:18:48,2017-03-01 12:18:48
https://api.github.com/repos/hyperledger/burrow/issues/520,https://api.github.com/repos/hyperledger/burrow/issues/comments/283656886,https://github.com/hyperledger/burrow/pull/520#issuecomment-283656886,silasdavis,"I've merged in my changes with develop (at this stage cleaner than a rebase). 

I've pulled the jsonrpc.go potentially usable in a v1 up to the root of rpc and just called it 'rpc.go' for generic definitions as you suggest.

I still think the renames and other changes are a win, so I've included them too, not just the tests. They are more reflective of what things are actually doing and they adhere to our snake case and full names conventions.",2017-03-02 13:45:38,2017-03-02 13:49:42
https://api.github.com/repos/hyperledger/burrow/issues/519,https://api.github.com/repos/hyperledger/burrow/issues/comments/282935875,https://github.com/hyperledger/burrow/pull/519#issuecomment-282935875,benjaminbollen,Merge conflicts will be resolved after #518 is merged.,2017-02-28 04:02:07,2017-02-28 04:02:07
https://api.github.com/repos/hyperledger/burrow/issues/518,https://api.github.com/repos/hyperledger/burrow/issues/comments/283084139,https://github.com/hyperledger/burrow/pull/518#issuecomment-283084139,benjaminbollen,:smile_cat:,2017-02-28 16:11:43,2017-02-28 16:11:43
https://api.github.com/repos/hyperledger/burrow/issues/517,https://api.github.com/repos/hyperledger/burrow/issues/comments/283060872,https://github.com/hyperledger/burrow/pull/517#issuecomment-283060872,benjaminbollen,@silasdavis moved the future work proposals out of the readme,2017-02-28 14:55:58,2017-02-28 14:55:58
https://api.github.com/repos/hyperledger/burrow/issues/514,https://api.github.com/repos/hyperledger/burrow/issues/comments/284260874,https://github.com/hyperledger/burrow/issues/514#issuecomment-284260874,NodeGuy,"This doesn't make sense, according to @silasdavis:

> but in terms of just copying it in, I'm not so sure that makes sense. For specific versions we ought to provide packer base boxes on the vagrant public repo that we built off packer. Then people just make their own Vagrantfile referencing our public box. You wouldn't want to include a Vagrantfile in eris-db for that I don't think, you'd be better to add it to the readme

cc: @zramsay & @benjaminbollen ",2017-03-05 20:42:29,2017-03-05 20:42:59
https://api.github.com/repos/hyperledger/burrow/issues/514,https://api.github.com/repos/hyperledger/burrow/issues/comments/284426221,https://github.com/hyperledger/burrow/issues/514#issuecomment-284426221,benjaminbollen,for eris-db the vagrantfile will have to be given a bit more work than the draft we have for eris tooling; but I definitely see clear value in having it defined at eris-db level as well.,2017-03-06 15:20:12,2017-03-06 15:20:12
https://api.github.com/repos/hyperledger/burrow/issues/512,https://api.github.com/repos/hyperledger/burrow/issues/comments/282484839,https://github.com/hyperledger/burrow/issues/512#issuecomment-282484839,VoR0220,To clarify this would be thought of as a scheduled contract execution based on time/date and should be accurate to within 2 seconds. ,2017-02-25 13:44:42,2017-02-25 13:44:42
https://api.github.com/repos/hyperledger/burrow/issues/512,https://api.github.com/repos/hyperledger/burrow/issues/comments/282485170,https://github.com/hyperledger/burrow/issues/512#issuecomment-282485170,benjaminbollen,"This does not sound to me like a a secure native function; rather with future work on the light-client, eris-worker, we can consider (time) triggered transaction (creation and broadcast). Snative functions are of no more help here than normal evm executions, in that they cannot pause or self-initiate.",2017-02-25 13:51:24,2017-02-25 13:51:24
https://api.github.com/repos/hyperledger/burrow/issues/510,https://api.github.com/repos/hyperledger/burrow/issues/comments/282361485,https://github.com/hyperledger/burrow/pull/510#issuecomment-282361485,benjaminbollen,LGTM,2017-02-24 18:07:22,2017-02-24 18:07:22
https://api.github.com/repos/hyperledger/burrow/issues/509,https://api.github.com/repos/hyperledger/burrow/issues/comments/282358296,https://github.com/hyperledger/burrow/pull/509#issuecomment-282358296,silasdavis,Yay,2017-02-24 17:55:05,2017-02-24 17:55:05
https://api.github.com/repos/hyperledger/burrow/issues/507,https://api.github.com/repos/hyperledger/burrow/issues/comments/282041969,https://github.com/hyperledger/burrow/pull/507#issuecomment-282041969,benjaminbollen,Overall nice improvement,2017-02-23 16:23:52,2017-02-23 16:23:52
https://api.github.com/repos/hyperledger/burrow/issues/507,https://api.github.com/repos/hyperledger/burrow/issues/comments/282141651,https://github.com/hyperledger/burrow/pull/507#issuecomment-282141651,benjaminbollen,"Yes, I reviewed it last thing before I left, but forgot to merge. lgtm",2017-02-23 22:25:02,2017-02-23 22:25:02
https://api.github.com/repos/hyperledger/burrow/issues/505,https://api.github.com/repos/hyperledger/burrow/issues/comments/281859229,https://github.com/hyperledger/burrow/pull/505#issuecomment-281859229,benjaminbollen,Lgtm,2017-02-23 01:17:35,2017-02-23 01:17:35
https://api.github.com/repos/hyperledger/burrow/issues/503,https://api.github.com/repos/hyperledger/burrow/issues/comments/281672314,https://github.com/hyperledger/burrow/issues/503#issuecomment-281672314,benjaminbollen,rather they have been deprecated somewhat prematurely; we'll revive them,2017-02-22 13:42:44,2017-02-22 13:42:44
https://api.github.com/repos/hyperledger/burrow/issues/503,https://api.github.com/repos/hyperledger/burrow/issues/comments/281726403,https://github.com/hyperledger/burrow/issues/503#issuecomment-281726403,benjaminbollen,@emanuelpalm can you try again?  We have resurrected the dead.  Please re-open if it has not solved your problem! Hope this helps (thanks to @silasdavis for the dark magic),2017-02-22 16:43:34,2017-02-22 16:43:34
https://api.github.com/repos/hyperledger/burrow/issues/503,https://api.github.com/repos/hyperledger/burrow/issues/comments/281993862,https://github.com/hyperledger/burrow/issues/503#issuecomment-281993862,emanuelpalm,It works! Thank you for being quick about it!,2017-02-23 13:40:43,2017-02-23 13:40:43
https://api.github.com/repos/hyperledger/burrow/issues/502,https://api.github.com/repos/hyperledger/burrow/issues/comments/281979504,https://github.com/hyperledger/burrow/pull/502#issuecomment-281979504,benjaminbollen,I will merge release-0.16 into eris-ltd:feature-tendermint_0.8.0; so that this PR gives a clearer picture of what has been done and where we are,2017-02-23 12:30:09,2017-02-23 12:30:09
https://api.github.com/repos/hyperledger/burrow/issues/502,https://api.github.com/repos/hyperledger/burrow/issues/comments/282062467,https://github.com/hyperledger/burrow/pull/502#issuecomment-282062467,silasdavis,have rebased against eris-ltd/feature-tendermint_0.8.0,2017-02-23 17:31:57,2017-02-23 17:31:57
https://api.github.com/repos/hyperledger/burrow/issues/501,https://api.github.com/repos/hyperledger/burrow/issues/comments/282839500,https://github.com/hyperledger/burrow/pull/501#issuecomment-282839500,benjaminbollen,continued in #506 ,2017-02-27 20:15:04,2017-02-27 20:15:04
https://api.github.com/repos/hyperledger/burrow/issues/500,https://api.github.com/repos/hyperledger/burrow/issues/comments/280524093,https://github.com/hyperledger/burrow/pull/500#issuecomment-280524093,VoR0220,Am in favor of changing the names. So yea...lets make this happen. ,2017-02-17 01:43:35,2017-02-17 01:43:35
https://api.github.com/repos/hyperledger/burrow/issues/500,https://api.github.com/repos/hyperledger/burrow/issues/comments/280629519,https://github.com/hyperledger/burrow/pull/500#issuecomment-280629519,silasdavis,"@VoR0220  Can we get some consensus on what the type signatures should actually be also?
",2017-02-17 11:48:32,2017-02-17 11:48:32
https://api.github.com/repos/hyperledger/burrow/issues/500,https://api.github.com/repos/hyperledger/burrow/issues/comments/280632471,https://github.com/hyperledger/burrow/pull/500#issuecomment-280632471,VoR0220,"@silasdavis i think i know what you mean but youre going to need to clarify. I think you mean solidity types. In which case there should be changes. For one, all ints should be uint64s to better align with golang. We should also contemplate switching from bytes32 to string as it could enable longer strings and dynamic ones at that.",2017-02-17 12:04:38,2017-02-17 12:04:38
https://api.github.com/repos/hyperledger/burrow/issues/500,https://api.github.com/repos/hyperledger/burrow/issues/comments/280661378,https://github.com/hyperledger/burrow/pull/500#issuecomment-280661378,silasdavis,"What I need is a decision on:

- int or uint64 (sounds like uint64)
- bytes32 or string (sounds like bytes32)
- function name casing (sounds like camel case)
- The name of contract (and therefore its address)

These will be breaking changes, but seeing as it was already not working properly I think we are at liberty to make them if they improve the situation.

Here is the contract as currently defined in snatives.go: 

```javascript
/**
* Interface for managing Secure Native authorizations.
* @dev This Solidity interface describes the functions exposed by the SNative permissions layer in the Monax blockchain (ErisDB).
*/
contract permissions_contract {

/**
* @notice Removes a role from an account
* @param _account account
* @param _role role
* @return result whether role was removed
*/
function rm_role(address _account, bytes32 _role) constant returns (bool result);

/**
* @notice Sets a base authorization for an account
* @param _account account
* @param _authorization base authorization
* @param _value value of base authorization
* @return result value passed in
*/
function set_base(address _account, uint64 _authorization, uint64 _value) constant returns (bool result);

/**
* @notice Indicates whether an account has a base authorization
* @param _account account
* @param _authorization base authorization
* @return result whether account has base authorization set
*/
function has_base(address _account, uint64 _authorization) constant returns (bool result);

/**
* @notice Sets a base authorization for an account to the global (default) value of the base authorization
* @param _account account
* @param _authorization base authorization
* @return authorization base authorization passed in
*/
function unset_base(address _account, uint64 _authorization) constant returns (uint64 authorization);

/**
* @notice Sets global (default) value for a base authorization
* @param _account account
* @param _authorization base authorization
* @param _value value of base authorization
* @return authorization base authorization passed in
*/
function set_global(uint64 _authorization, uint64 _value) constant returns (uint64 authorization);

/**
* @notice Adds a role to an account
* @param _account account
* @param _role role
* @return result whether role was added
*/
function add_role(address _account, bytes32 _role) constant returns (bool result);

/**
* @notice Indicates whether an account has a role
* @param _account account
* @param _role role
* @return result whether account has role
*/
function has_role(address _account, bytes32 _role) constant returns (bool result);

}
```",2017-02-17 14:18:22,2017-02-17 19:31:41
https://api.github.com/repos/hyperledger/burrow/issues/500,https://api.github.com/repos/hyperledger/burrow/issues/comments/280664780,https://github.com/hyperledger/burrow/pull/500#issuecomment-280664780,VoR0220,"let me play with turning it to string and get back to you later today. It may very well be worth it to send in a string instead of a bytes32 simply because a string can be longer than 32 bytes (why you would ever make a string like that, IDK, but the liberty is nice). ",2017-02-17 14:31:16,2017-02-17 14:31:16
https://api.github.com/repos/hyperledger/burrow/issues/500,https://api.github.com/repos/hyperledger/burrow/issues/comments/281088402,https://github.com/hyperledger/burrow/pull/500#issuecomment-281088402,benjaminbollen,"LGTM.  I have raised comments on the unpleasantness of infection of solidity into the evm/snatives; Talked with Silas and he will examine further; although he does not like to call it `ProtoTypes` :)
 ",2017-02-20 14:09:06,2017-02-20 14:09:06
https://api.github.com/repos/hyperledger/burrow/issues/500,https://api.github.com/repos/hyperledger/burrow/issues/comments/281144519,https://github.com/hyperledger/burrow/pull/500#issuecomment-281144519,silasdavis,"The latest commit:

- Refactors Solidity-specific code into a util package and introduces a templating wrapper, and some formatting improvements (like proper indenting)
- Introduces an `abi` package under `evm` to decouple Solidity types and calling conventions from those defined by Ethereum by way of the ABI (this can be one path to future expansion to support an ABI-aware chain more generally)
- Improves documentation and naming of variables on contract
- Changes the 'value' argument on `set_*` functions to be a bool as it should be
- Changes the return value of `*set_*` functions to be the resultant permission after the permission operation has applied (rather than echoing back the argument the caller passed in). This retains the primary purpose of the return value as a truthy call success flag.
- Reverts the returning of `Zero256.Bytes()` from `Dispatch` since error return values should be and are handled by the called (vm.go) here: https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/evm/vm.go#L857. If there is an error return then zero is pushed to the stack by the vm so it can't have been the cause of some invalid jump dests observed. Since the existing snatives return nil I think it is confusing to break with go convention and return zero to the stack without clear semantics on what should be done in this error case.",2017-02-20 17:56:36,2017-02-20 17:59:47
https://api.github.com/repos/hyperledger/burrow/issues/500,https://api.github.com/repos/hyperledger/burrow/issues/comments/281214071,https://github.com/hyperledger/burrow/pull/500#issuecomment-281214071,VoR0220,Very approved. Merge away. ,2017-02-21 00:42:22,2017-02-21 00:42:22
https://api.github.com/repos/hyperledger/burrow/issues/500,https://api.github.com/repos/hyperledger/burrow/issues/comments/281214262,https://github.com/hyperledger/burrow/pull/500#issuecomment-281214262,silasdavis,"In for a penny, in for pound. Have changed case convention of permissions functions to camelCase. Also renamed permission contract to `Permissions` so the canonical address for it will have changed. Also automated testing a bit more.

The generated solidity for the permissions contract now looks like this:

```javascript
/**
* Interface for managing Secure Native authorizations.
* @dev This interface describes the functions exposed by the SNative permissions layer in the Monax blockchain (ErisDB).
* @dev These functions can be accessed as if this contract were deployed at the address 0x0000000000000000005065726d697373696f6e73
*/
contract Permissions {
    /**
    * @notice Adds a role to an account
    * @param _account account address
    * @param _role role name
    * @return result whether role was added
    */
    function addRole(address _account, bytes32 _role) constant returns (bool result);

    /**
    * @notice Removes a role from an account
    * @param _account account address
    * @param _role role name
    * @return result whether role was removed
    */
    function removeRole(address _account, bytes32 _role) constant returns (bool result);

    /**
    * @notice Indicates whether an account has a role
    * @param _account account address
    * @param _role role name
    * @return result whether account has role
    */
    function hasRole(address _account, bytes32 _role) constant returns (bool result);

    /**
    * @notice Sets the permission flags for an account. Makes them explicitly set (on or off).
    * @param _account account address
    * @param _permission the base permissions flags to set for the account
    * @param _set whether to set or unset the permissions flags at the account level
    * @return result the resultant permissions flags on the account after the call
    */
    function setBase(address _account, uint64 _permission, bool _set) constant returns (uint64 result);

    /**
    * @notice Unsets the permissions flags for an account. Causes permissions being unset to fall through to global permissions.
    * @param _account account address
    * @param _permission the permissions flags to unset for the account
    * @return result the resultant permissions flags on the account after the call
    */
    function unsetBase(address _account, uint64 _permission) constant returns (uint64 result);

    /**
    * @notice Indicates whether an account has a subset of permissions set
    * @param _account account address
    * @param _permission the permissions flags (mask) to check whether enabled against base permissions for the account
    * @return result whether account has the passed permissions flags set
    */
    function hasBase(address _account, uint64 _permission) constant returns (uint64 result);

    /**
    * @notice Sets the global (default) permissions flags for the entire chain
    * @param _permission the permissions flags to set
    * @param _set whether to set (or unset) the permissions flags
    * @return result the resultant permissions flags on the account after the call
    */
    function setGlobal(uint64 _permission, bool _set) constant returns (uint64 result);
}
```",2017-02-21 00:43:51,2017-02-21 00:43:51
https://api.github.com/repos/hyperledger/burrow/issues/500,https://api.github.com/repos/hyperledger/burrow/issues/comments/281660538,https://github.com/hyperledger/burrow/pull/500#issuecomment-281660538,benjaminbollen,LGTM,2017-02-22 12:51:17,2017-02-22 12:51:17
https://api.github.com/repos/hyperledger/burrow/issues/499,https://api.github.com/repos/hyperledger/burrow/issues/comments/280341268,https://github.com/hyperledger/burrow/pull/499#issuecomment-280341268,benjaminbollen,"Yes, I agree, particularly by separating it into a `word256` instead of a bigger `common` bag; it makes it very clear what the unit testing for it should be
",2017-02-16 14:16:11,2017-02-16 14:16:11
https://api.github.com/repos/hyperledger/burrow/issues/498,https://api.github.com/repos/hyperledger/burrow/issues/comments/280066720,https://github.com/hyperledger/burrow/issues/498#issuecomment-280066720,VoR0220,* Use godoc style,2017-02-15 16:49:15,2017-02-15 16:49:15
https://api.github.com/repos/hyperledger/burrow/issues/498,https://api.github.com/repos/hyperledger/burrow/issues/comments/413540443,https://github.com/hyperledger/burrow/issues/498#issuecomment-413540443,silasdavis,output from `make snatives` documents this and `burrow snatives` is coming which will do so more,2018-08-16 13:12:17,2018-08-16 13:12:17
https://api.github.com/repos/hyperledger/burrow/issues/493,https://api.github.com/repos/hyperledger/burrow/issues/comments/279176089,https://github.com/hyperledger/burrow/pull/493#issuecomment-279176089,zramsay,should this have a corresponding PR to update the `WriteGenesisFile` in cli?,2017-02-11 21:12:27,2017-02-11 21:12:27
https://api.github.com/repos/hyperledger/burrow/issues/493,https://api.github.com/repos/hyperledger/burrow/issues/comments/279178771,https://github.com/hyperledger/burrow/pull/493#issuecomment-279178771,benjaminbollen,"Rather, I would remove the duplicated code in cli",2017-02-11 21:58:13,2017-02-11 21:58:13
https://api.github.com/repos/hyperledger/burrow/issues/492,https://api.github.com/repos/hyperledger/burrow/issues/comments/279175896,https://github.com/hyperledger/burrow/pull/492#issuecomment-279175896,benjaminbollen,force pushed new commit: dont build docs from develop,2017-02-11 21:08:52,2017-02-11 21:08:52
https://api.github.com/repos/hyperledger/burrow/issues/489,https://api.github.com/repos/hyperledger/burrow/issues/comments/373004200,https://github.com/hyperledger/burrow/issues/489#issuecomment-373004200,silasdavis,Done in #666 ,2018-03-14 12:31:04,2018-03-14 12:31:04
https://api.github.com/repos/hyperledger/burrow/issues/487,https://api.github.com/repos/hyperledger/burrow/issues/comments/385679440,https://github.com/hyperledger/burrow/issues/487#issuecomment-385679440,silasdavis,superceded,2018-05-01 14:09:10,2018-05-01 14:09:10
https://api.github.com/repos/hyperledger/burrow/issues/484,https://api.github.com/repos/hyperledger/burrow/issues/comments/293983793,https://github.com/hyperledger/burrow/pull/484#issuecomment-293983793,benjaminbollen,So if you can remove the eris-keys from glide; then Im happy to merge this,2017-04-13 18:29:44,2017-04-13 18:29:44
https://api.github.com/repos/hyperledger/burrow/issues/483,https://api.github.com/repos/hyperledger/burrow/issues/comments/282104219,https://github.com/hyperledger/burrow/issues/483#issuecomment-282104219,silasdavis,We should find a away of checking/enforcing the reserved-ness of SNative contract addresses more generally.,2017-02-23 20:02:23,2017-02-23 20:02:23
https://api.github.com/repos/hyperledger/burrow/issues/481,https://api.github.com/repos/hyperledger/burrow/issues/comments/278465345,https://github.com/hyperledger/burrow/issues/481#issuecomment-278465345,VoR0220,"NVM, not even the case in the Geth implementation. Closing. ",2017-02-08 21:21:18,2017-02-08 21:21:18
https://api.github.com/repos/hyperledger/burrow/issues/480,https://api.github.com/repos/hyperledger/burrow/issues/comments/279746404,https://github.com/hyperledger/burrow/pull/480#issuecomment-279746404,silasdavis,"This looks good, but I'm thinking it would be nice to have a test closer to this file that would reassure as about changes. Can you link to an appropriate epm test?",2017-02-14 15:51:49,2017-02-14 15:51:49
https://api.github.com/repos/hyperledger/burrow/issues/480,https://api.github.com/repos/hyperledger/burrow/issues/comments/280057109,https://github.com/hyperledger/burrow/pull/480#issuecomment-280057109,VoR0220,@silasdavis certainly I can do that....once I make it. :P I'll make an update to the permissions test. ,2017-02-15 16:18:39,2017-02-15 16:18:39
https://api.github.com/repos/hyperledger/burrow/issues/480,https://api.github.com/repos/hyperledger/burrow/issues/comments/280062164,https://github.com/hyperledger/burrow/pull/480#issuecomment-280062164,benjaminbollen,@silasdavis writing the unit tests for this was also still on my todo; happy for you to take this if you want.,2017-02-15 16:34:34,2017-02-15 16:34:34
https://api.github.com/repos/hyperledger/burrow/issues/480,https://api.github.com/repos/hyperledger/burrow/issues/comments/280067755,https://github.com/hyperledger/burrow/pull/480#issuecomment-280067755,silasdavis,"Let's merge this for now. I've made an epic for further improvements: https://github.com/eris-ltd/eris-db/issues/496.

Unit tests are nice, but I think really its the contract-level/EPM tests that are going to give us most certainty.

@VoR0220 do I understand correctly that you plan to make a test for these in eris? ",2017-02-15 16:52:23,2017-02-15 16:52:39
https://api.github.com/repos/hyperledger/burrow/issues/480,https://api.github.com/repos/hyperledger/burrow/issues/comments/280068614,https://github.com/hyperledger/burrow/pull/480#issuecomment-280068614,VoR0220,"@silasdavis you are correct, I am working on one. But before that, I would like to know WHAT it is I am testing...because currently I have a vague idea of what setGlobal does. ",2017-02-15 16:55:07,2017-02-15 16:55:07
https://api.github.com/repos/hyperledger/burrow/issues/480,https://api.github.com/repos/hyperledger/burrow/issues/comments/280094624,https://github.com/hyperledger/burrow/pull/480#issuecomment-280094624,silasdavis,"Ah, so we do have some kind of tests for this here: https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/state/permissions_test.go

I wonder why they didn't detect this change... will have to look into.",2017-02-15 18:23:58,2017-02-15 18:23:58
https://api.github.com/repos/hyperledger/burrow/issues/480,https://api.github.com/repos/hyperledger/burrow/issues/comments/280121504,https://github.com/hyperledger/burrow/pull/480#issuecomment-280121504,VoR0220,Because there wasnt a massive change...i just automated the func signatures. And we also dont test setGlobal currently. ,2017-02-15 19:59:07,2017-02-15 19:59:07
https://api.github.com/repos/hyperledger/burrow/issues/480,https://api.github.com/repos/hyperledger/burrow/issues/comments/280318616,https://github.com/hyperledger/burrow/pull/480#issuecomment-280318616,silasdavis,"No, actually we do test `set_global` here (in permission_test.go), that was the point of my link.",2017-02-16 12:33:09,2017-02-16 12:33:09
https://api.github.com/repos/hyperledger/burrow/issues/480,https://api.github.com/repos/hyperledger/burrow/issues/comments/280331695,https://github.com/hyperledger/burrow/pull/480#issuecomment-280331695,VoR0220,Ah crap missed that link...thought you were pointing at PM test. My bad. ,2017-02-16 13:36:08,2017-02-16 13:36:08
https://api.github.com/repos/hyperledger/burrow/issues/480,https://api.github.com/repos/hyperledger/burrow/issues/comments/280343544,https://github.com/hyperledger/burrow/pull/480#issuecomment-280343544,benjaminbollen,"To be clear: I asked for a unit test that had the hard-coded signatures in place; as a breaker for accidentally changing the signature, and as such the function identifier.",2017-02-16 14:25:05,2017-02-16 14:25:05
https://api.github.com/repos/hyperledger/burrow/issues/479,https://api.github.com/repos/hyperledger/burrow/issues/comments/279152985,https://github.com/hyperledger/burrow/pull/479#issuecomment-279152985,benjaminbollen,Merging release-0.16 (and with it master 0.12.1) into develop,2017-02-11 15:36:18,2017-02-11 15:36:18
https://api.github.com/repos/hyperledger/burrow/issues/478,https://api.github.com/repos/hyperledger/burrow/issues/comments/278304216,https://github.com/hyperledger/burrow/pull/478#issuecomment-278304216,silasdavis,@VoR0220 please post the modified version of: https://github.com/eris-ltd/eris-pm/blob/master/tests/fixtures/app33-evm_connection_edb_permissions_and_roles_layer/permissions.sol that you used here,2017-02-08 11:36:11,2017-02-08 11:36:11
https://api.github.com/repos/hyperledger/burrow/issues/478,https://api.github.com/repos/hyperledger/burrow/issues/comments/278365246,https://github.com/hyperledger/burrow/pull/478#issuecomment-278365246,VoR0220,"I tend to agree with this in terms of the cosmetics, hence why I suggested we hold off on this until a 0.17.0. As for the function signatures, I can probably work something out, we have two options, I can just sha3 the signatures (this would be the easier way), or I can make a call to a held solidity contract and get the hashes from a table and template it (much harder way)...I think I'm going to go with the former. Will push in a separate PR that creates this and also solves the `set_global` problem and we can close this for another time. ",2017-02-08 15:45:30,2017-02-08 15:45:30
https://api.github.com/repos/hyperledger/burrow/issues/476,https://api.github.com/repos/hyperledger/burrow/issues/comments/278308533,https://github.com/hyperledger/burrow/pull/476#issuecomment-278308533,silasdavis,"Could you be a bit clearer with ""problem with not being able to get at the Snative contract."", what problem prompted your investigation here?

It does seem like there can be a problem here and your solution will in some sense work. However this is a special case of a broader problem. That is making sure we have some special case handling for snatives. The other obvious place this will be an issue is `EXTCODECOPY`:

https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/evm/vm.go#L583

in fact `EXTCODESIZE` seems like it probably is designed be used in tandem with `EXTCODECOPY` to copy contract code around. We would need to handle some special case there too at least.

What is the context of use here? Pretending a native contract exists and has code length 1 may make certain code execute, but it doesn't make it make any sense, seems ad hoc, and does nothing to allow you to treat native contracts as if they have code accessible in contract-space. It seems like the best thing to do here might be to just make in an error. But we need more context about where this was encountered.

Another place where we don't check whether we are dealing with an snative, and perhaps we should is in `CREATE`: https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/evm/vm.go#L763
",2017-02-08 11:56:30,2017-02-08 11:58:23
https://api.github.com/repos/hyperledger/burrow/issues/476,https://api.github.com/repos/hyperledger/burrow/issues/comments/278380780,https://github.com/hyperledger/burrow/pull/476#issuecomment-278380780,silasdavis,"Here's a fragment of solc 4.4.0 compiled bytecode that helps illuminate what the solidity compiler is up to:


```
      EXTCODESIZE 			perm.rm_role(addr, role)
      ISZERO 			perm.rm_role(addr, role)
      PUSH [ErrorTag] 			perm.rm_role(addr, role)
      JUMPI 			perm.rm_role(addr, role)
      PUSH 32			perm.rm_role(addr, role)
      GAS 			perm.rm_role(addr, role)
      SUB 			perm.rm_role(addr, role)
      CALL 			perm.rm_role(addr, role)
      ISZERO 			perm.rm_role(addr, role)
      PUSH [ErrorTag] 			perm.rm_role(addr, role)
      JUMPI 			perm.rm_role(addr, role)
      POP 			perm.rm_role(addr, role)
      POP 			perm.rm_role(addr, role)
      POP 			perm.rm_role(addr, role)
      PUSH 40			perm.rm_role(addr, role)
```

Here's the relevant line in the solidity compiler that generates this type of code: https://github.com/ethereum/solidity/blob/develop/libsolidity/codegen/ExpressionCompiler.cpp#L1662

The check amounts to an existence check for the contract/contract code before running it. I am not certain why this is, but it seems like in the current pricing model it might be better to check the code exists before calling empty code. Worth checking.

In this compiler case returning any truthy value seems to be the right thing to do, and 1 is probably the most elegant.

There is a worry with how this interacts with `EXTCODECOPY`. It could easily try and copy non-existing bytes into allocated space. However as a point of reassurance, a quick grep of the solidity compiler code does not seem to show any use of `EXTCODECOPY` by the the solidity code generator.

If someone is deliberately trying to access snative code from an `EXTCODECOPY` then we have a problem, but an error is probably the right thing to do there from the time being. We _could_ return stub code, but that seems like it would cause more pain than it might prevent. `EXTCODECOPY` is a low-level thing, and I think solidity is our main concern...",2017-02-08 16:34:33,2017-02-08 16:34:33
https://api.github.com/repos/hyperledger/burrow/issues/476,https://api.github.com/repos/hyperledger/burrow/issues/comments/278401174,https://github.com/hyperledger/burrow/pull/476#issuecomment-278401174,benjaminbollen,LGTM,2017-02-08 17:33:34,2017-02-08 17:33:34
https://api.github.com/repos/hyperledger/burrow/issues/475,https://api.github.com/repos/hyperledger/burrow/issues/comments/277553470,https://github.com/hyperledger/burrow/issues/475#issuecomment-277553470,benjaminbollen,On all new and refactored code this coding style has been and will be observed.,2017-02-05 22:04:00,2017-02-05 22:04:00
https://api.github.com/repos/hyperledger/burrow/issues/475,https://api.github.com/repos/hyperledger/burrow/issues/comments/277556068,https://github.com/hyperledger/burrow/issues/475#issuecomment-277556068,VoR0220,Okay...but there is still code that exists with this. Would you like me to help you clean it?,2017-02-05 22:40:17,2017-02-05 22:40:17
https://api.github.com/repos/hyperledger/burrow/issues/474,https://api.github.com/repos/hyperledger/burrow/issues/comments/301508271,https://github.com/hyperledger/burrow/issues/474#issuecomment-301508271,silasdavis,Can confirm this is fixed by #607,2017-05-15 15:20:27,2017-05-15 15:20:27
https://api.github.com/repos/hyperledger/burrow/issues/473,https://api.github.com/repos/hyperledger/burrow/issues/comments/284121640,https://github.com/hyperledger/burrow/issues/473#issuecomment-284121640,zramsay,"@npc0405 please see the [issue template](https://github.com/eris-ltd/eris-db/blob/master/.github/ISSUE_TEMPLATE.md) and provide the appropriate information, especially the steps to reproduction (including your solidity code and `epm.yaml`)",2017-03-04 02:52:59,2017-03-04 02:53:09
https://api.github.com/repos/hyperledger/burrow/issues/472,https://api.github.com/repos/hyperledger/burrow/issues/comments/276637160,https://github.com/hyperledger/burrow/pull/472#issuecomment-276637160,benjaminbollen,"Good, but I'll make a PR to your repo, because the versioning of e-db is a bit more involved.  ",2017-02-01 11:41:37,2017-02-01 11:41:37
https://api.github.com/repos/hyperledger/burrow/issues/472,https://api.github.com/repos/hyperledger/burrow/issues/comments/276640288,https://github.com/hyperledger/burrow/pull/472#issuecomment-276640288,benjaminbollen,@silasdavis can you review this PR to your branch ? https://github.com/silasdavis/eris-db/pull/2,2017-02-01 11:58:49,2017-02-01 11:58:49
https://api.github.com/repos/hyperledger/burrow/issues/470,https://api.github.com/repos/hyperledger/burrow/issues/comments/276483097,https://github.com/hyperledger/burrow/pull/470#issuecomment-276483097,benjaminbollen,LGTM,2017-01-31 20:32:11,2017-01-31 20:32:11
https://api.github.com/repos/hyperledger/burrow/issues/470,https://api.github.com/repos/hyperledger/burrow/issues/comments/276507089,https://github.com/hyperledger/burrow/pull/470#issuecomment-276507089,silasdavis,😺 self-process... but draft,2017-01-31 22:01:52,2017-01-31 22:01:52
https://api.github.com/repos/hyperledger/burrow/issues/468,https://api.github.com/repos/hyperledger/burrow/issues/comments/276376006,https://github.com/hyperledger/burrow/pull/468#issuecomment-276376006,benjaminbollen,LGTM as docs need to be updated; but relates to corrections needed to the method as specified https://github.com/eris-ltd/eris-db/issues/355,2017-01-31 14:23:57,2017-01-31 14:23:57
https://api.github.com/repos/hyperledger/burrow/issues/467,https://api.github.com/repos/hyperledger/burrow/issues/comments/276645196,https://github.com/hyperledger/burrow/issues/467#issuecomment-276645196,compleatang,"Hi @shalinigpt thanks for raising this issue, can you please provide a reproducible case with code that we can use to track down if this is a bug? How exactly are you storing the attributes in contracts and communicating with the chain? That will help use efficiently track down whether this is a bug or something else. ",2017-02-01 12:26:06,2017-02-01 12:26:06
https://api.github.com/repos/hyperledger/burrow/issues/467,https://api.github.com/repos/hyperledger/burrow/issues/comments/400231750,https://github.com/hyperledger/burrow/issues/467#issuecomment-400231750,compleatang,Closing as stale.,2018-06-26 08:50:05,2018-06-26 08:50:05
https://api.github.com/repos/hyperledger/burrow/issues/466,https://api.github.com/repos/hyperledger/burrow/issues/comments/393108833,https://github.com/hyperledger/burrow/issues/466#issuecomment-393108833,compleatang,closing as old and refactored. ,2018-05-30 10:17:28,2018-05-30 10:17:28
https://api.github.com/repos/hyperledger/burrow/issues/465,https://api.github.com/repos/hyperledger/burrow/issues/comments/276120416,https://github.com/hyperledger/burrow/pull/465#issuecomment-276120416,benjaminbollen,"for `erisdb.GetAccounts` I now get on an empty chain:
```
$ curl -H ""Content-Type: application/json"" -X POST --data '{""id"":""0"",""method"":""erisdb.getAccounts"",""params"":{""filters"":[]},""jsonrpc"":""2.0""}' http://localhost:1337/rpc | jq .
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   515  100   435  100    80   114k  21557 --:--:-- --:--:-- --:--:--  141k
{
  ""result"": {
    ""accounts"": [
      {
        ""address"": ""0000000000000000000000000000000000000000"",
        ""pub_key"": null,
        ""sequence"": 0,
        ""balance"": 1337,
        ""code"": """",
        ""storage_root"": """",
        ""permissions"": {
          ""base"": {
            ""perms"": 2302,
            ""set"": 16383
          },
          ""roles"": []
        }
      },
      {
        ""address"": ""DDE80114E6BFED2EC6A823B30FC1F47B4B9C72B3"",
        ""pub_key"": null,
        ""sequence"": 0,
        ""balance"": 99999999999999,
        ""code"": """",
        ""storage_root"": """",
        ""permissions"": {
          ""base"": {
            ""perms"": 16383,
            ""set"": 16383
          },
          ""roles"": []
        }
      }
    ]
  },
  ""id"": ""0"",
  ""jsonrpc"": ""2.0""
}
```
and for an error: 
```
curl -H ""Content-Type: application/json"" -X POST --data '{""id"":""0"",""method"":""erisdb.getAccounts"",""params"":{""filters"":[THIS-IS-AN-INVALID-FILTER]},""jsonrpc"":""2.0""}' http://localhost:1337/rpc | jq .
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   244  100   139  100   105  33582  25368 --:--:-- --:--:-- --:--:-- 46333
{
  ""error"": {
    ""code"": -32700,
    ""message"": ""Failed to parse request: invalid character 'T' looking for beginning of value""
  },
  ""id"": """",
  ""jsonrpc"": ""2.0""
}
```",2017-01-30 17:01:06,2017-01-30 17:02:06
https://api.github.com/repos/hyperledger/burrow/issues/464,https://api.github.com/repos/hyperledger/burrow/issues/comments/276067862,https://github.com/hyperledger/burrow/issues/464#issuecomment-276067862,benjaminbollen,Thanks for raising the issue. Can you provide information on reproducibility; specifically the request sent to the method?,2017-01-30 13:54:43,2017-01-30 13:55:13
https://api.github.com/repos/hyperledger/burrow/issues/464,https://api.github.com/repos/hyperledger/burrow/issues/comments/276068963,https://github.com/hyperledger/burrow/issues/464#issuecomment-276068963,fabcan,"I send the following request to http://localhost:1337/rpc , I use ""_..._"" to abbreviate the raw response.

Request: `{""id"":""0"",""method"":""erisdb.getAccounts"",""params"":{""filters"":[]},""jsonrpc"":""2.0""}`
Response: `{""result"":{""accounts"":[{...},{...}]},""error"":null,""id"":""0"",""jsonrpc"":""2.0""}`

Java library error when parsing: _Invalid JSON-RPC 2.0 response: You cannot have result and error at the same time_

`eris version`: `Eris CLI Version: 0.12.0 (002c63e)`


",2017-01-30 13:59:36,2017-01-30 14:56:52
https://api.github.com/repos/hyperledger/burrow/issues/464,https://api.github.com/repos/hyperledger/burrow/issues/comments/276081723,https://github.com/hyperledger/burrow/issues/464#issuecomment-276081723,fabcan,"**Communication example**
Request: `{""id"":""0"",""method"":""erisdb.getAccounts"",""params"":{},""jsonrpc"":""2.0""}`
Response: `{""result"":{""accounts"":[{...},{...}]},""error"":null,""id"":""0"",""jsonrpc"":""2.0""}`

The response given by Eris has the right values in the _accounts_ member, but the presence in the response of both the _error_ and _result_ members means that it isn't a right JSON-RPC 2.0 response according to the specifications (http://www.jsonrpc.org/specification#response_object) as it seems that the error member ""MUST NOT exist if there was no error triggered during invocation.""

So when I receive that response and the Java library I'm using parses it (http://software.dzhuvinov.com/json-rpc-2.0-client.html), it gives me this error: ""_com.thetransactioncompany.jsonrpc2.client.JSONRPC2SessionException: Invalid JSON-RPC 2.0 response_""

If I use some Java reflection trickery and I manage to remove the error member entirely (`{""result"":{""accounts"":[{...},{...}]},""id"":""0"",""jsonrpc"":""2.0""}`), when the Java library parses the response it gives me no errors at all and it returns a correct Java object.",2017-01-30 14:51:02,2017-01-30 14:51:12
https://api.github.com/repos/hyperledger/burrow/issues/464,https://api.github.com/repos/hyperledger/burrow/issues/comments/393109179,https://github.com/hyperledger/burrow/issues/464#issuecomment-393109179,compleatang,"closing as this pipeline has been significantly refactored. specific violations of JSON-RPC spec by burrow code should definitely be documented individually, however.",2018-05-30 10:18:41,2018-05-30 10:18:41
https://api.github.com/repos/hyperledger/burrow/issues/458,https://api.github.com/repos/hyperledger/burrow/issues/comments/275392802,https://github.com/hyperledger/burrow/pull/458#issuecomment-275392802,benjaminbollen,@silasdavis can you also then gofmt everything; because I keep needing to not-commit gofmt changes since logging,2017-01-26 13:52:53,2017-01-26 13:52:53
https://api.github.com/repos/hyperledger/burrow/issues/458,https://api.github.com/repos/hyperledger/burrow/issues/comments/275408229,https://github.com/hyperledger/burrow/pull/458#issuecomment-275408229,silasdavis,@benjaminbollen goimports gofmts everything,2017-01-26 14:56:06,2017-01-26 14:56:06
https://api.github.com/repos/hyperledger/burrow/issues/458,https://api.github.com/repos/hyperledger/burrow/issues/comments/275418339,https://github.com/hyperledger/burrow/pull/458#issuecomment-275418339,benjaminbollen,LGTM,2017-01-26 15:32:20,2017-01-26 15:32:20
https://api.github.com/repos/hyperledger/burrow/issues/457,https://api.github.com/repos/hyperledger/burrow/issues/comments/275953479,https://github.com/hyperledger/burrow/issues/457#issuecomment-275953479,ramilexe,"I was looking for this error in tendermint repo and found it https://github.com/tendermint/tendermint/issues/173#issuecomment-167874768
It is fixed more than year ago",2017-01-29 22:57:22,2017-01-29 22:57:22
https://api.github.com/repos/hyperledger/burrow/issues/457,https://api.github.com/repos/hyperledger/burrow/issues/comments/284126158,https://github.com/hyperledger/burrow/issues/457#issuecomment-284126158,zramsay,closing given comment by @ramilexe and inactivity,2017-03-04 04:20:54,2017-03-04 04:20:54
https://api.github.com/repos/hyperledger/burrow/issues/454,https://api.github.com/repos/hyperledger/burrow/issues/comments/275116731,https://github.com/hyperledger/burrow/pull/454#issuecomment-275116731,VoR0220,I love this name. ,2017-01-25 14:09:21,2017-01-25 14:09:21
https://api.github.com/repos/hyperledger/burrow/issues/454,https://api.github.com/repos/hyperledger/burrow/issues/comments/275133136,https://github.com/hyperledger/burrow/pull/454#issuecomment-275133136,benjaminbollen,"Would it make sense to have this under `/util`, otherwise Im fine with it",2017-01-25 15:11:06,2017-01-25 15:11:06
https://api.github.com/repos/hyperledger/burrow/issues/453,https://api.github.com/repos/hyperledger/burrow/issues/comments/275151443,https://github.com/hyperledger/burrow/pull/453#issuecomment-275151443,silasdavis,"Thanks for this. Indeed we seemed to be assuming a `CallTx`, whereas with this change it can be any transactions type.

I'm a little wary though because presumably it will break what our javascript libraries must be doing for 0.12. @NodeGuy - what do you provide for ""params"" when calling rpc/v0 from your libaries? @benjaminbollen can you remember why this was like this? ",2017-01-25 16:11:38,2017-01-25 16:12:01
https://api.github.com/repos/hyperledger/burrow/issues/453,https://api.github.com/repos/hyperledger/burrow/issues/comments/275179079,https://github.com/hyperledger/burrow/pull/453#issuecomment-275179079,ratranqu,"Silas,

It's a bit more than just a change from always assuming a CallTx to handling any types of Tx. The json representation of the asummed CallTx is also not consistent with how it's expected in the wire protocol (see txs/tx.go file, where the concrete type is defined for the wire protocol). 

Ideally, this regression (introduced in 0.12.x) can be fixed for 0.16.0. 

The way transaction types are handled (array with type byte followed by payload) is exactly the same as how pubkeys and signatures are handled so it should not be too hard to bring in line. 

Let me know if/how I can help.

Alex

> On 25 Jan 2017, at 17:11, Silas Davis <notifications@github.com> wrote:
> 
> Thanks for this. Indeed we seemed to be assuming a CallTx, whereas with this change it can be any transactions type.
> 
> I'm a little wary of this change though because presumably it will break what our javascript libraries must be doing for 0.12. @NodeGuy - what do you provide for ""params"" when calling rpc/v0 from your libaries? @benjaminbollen can you remember why this was like this?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 
",2017-01-25 17:44:47,2017-01-25 17:44:47
https://api.github.com/repos/hyperledger/burrow/issues/453,https://api.github.com/repos/hyperledger/burrow/issues/comments/275197396,https://github.com/hyperledger/burrow/pull/453#issuecomment-275197396,NodeGuy,"Here's what's provided for `params`:

```JavaScript
    this.server.transact({
      priv_key: privKey,
      address,
      data,
      gas_limit: gasLimit,
      fee
    }, callback)
```

https://github.com/eris-ltd/eris-db.js/blob/ab3c1b4cd34a4ab4526cfb9f6cab5abbbb1dce3e/lib/unsafe.js#L82-L88",2017-01-25 18:51:12,2017-01-25 18:51:12
https://api.github.com/repos/hyperledger/burrow/issues/453,https://api.github.com/repos/hyperledger/burrow/issues/comments/275198446,https://github.com/hyperledger/burrow/pull/453#issuecomment-275198446,ratranqu,"David, awesome that you know exactly where the changes are. Could they be reverted for 0.16.0?

Thx,
Alex

> On 25 Jan 2017, at 19:51, David Braun <notifications@github.com> wrote:
> 
> Here's what's provided for params:
> 
>     this.server.transact({
>       priv_key: privKey,
>       address,
>       data,
>       gas_limit: gasLimit,
>       fee
>     }, callback)
> https://github.com/eris-ltd/eris-db.js/blob/ab3c1b4cd34a4ab4526cfb9f6cab5abbbb1dce3e/lib/unsafe.js#L82-L88
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.
> 
",2017-01-25 18:54:49,2017-01-25 18:54:49
https://api.github.com/repos/hyperledger/burrow/issues/453,https://api.github.com/repos/hyperledger/burrow/issues/comments/275245375,https://github.com/hyperledger/burrow/pull/453#issuecomment-275245375,benjaminbollen,"Hi Alex,

This is my fault, I got this mixed up in the 0.12 release. This RPC is marked for deprecation, but it is more complete to consider reverting it, before doing so.  I will weigh in the opinion of the JS libs, but it seems a valid request.  

",2017-01-25 21:56:19,2017-01-25 21:56:19
https://api.github.com/repos/hyperledger/burrow/issues/453,https://api.github.com/repos/hyperledger/burrow/issues/comments/275245762,https://github.com/hyperledger/burrow/pull/453#issuecomment-275245762,ratranqu,"Awesome. you make my evening :)

> On 25 Jan 2017, at 22:56, Benjamin Bollen <notifications@github.com> wrote:
> 
> Hi Alex,
> 
> This is my fault, I got this mixed up in the 0.12 release. This RPC is marked for deprecation, but it is more complete to consider reverting it, before doing so. I will weigh in the opinion of the JS libs, but it seems a valid request.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub <https://github.com/eris-ltd/eris-db/pull/453#issuecomment-275245375>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AQPPLX8M8KWiWORY9N3SGPiwniXvVm8Nks5rV8UDgaJpZM4Ls2F9>.
> 

",2017-01-25 21:57:57,2017-01-25 21:57:57
https://api.github.com/repos/hyperledger/burrow/issues/453,https://api.github.com/repos/hyperledger/burrow/issues/comments/275248001,https://github.com/hyperledger/burrow/pull/453#issuecomment-275248001,benjaminbollen,Strictly speaking we can merge this without breaking the JS libs as they call the transact method - not the broadcast method - but it is better to reduce complexity and have it aligned for less headaches.,2017-01-25 22:07:02,2017-01-25 22:07:02
https://api.github.com/repos/hyperledger/burrow/issues/453,https://api.github.com/repos/hyperledger/burrow/issues/comments/275321452,https://github.com/hyperledger/burrow/pull/453#issuecomment-275321452,NodeGuy,Actually the JavaScript libraries never sent the type byte so there's nothing for me to revert.,2017-01-26 07:08:50,2017-01-26 07:08:50
https://api.github.com/repos/hyperledger/burrow/issues/453,https://api.github.com/repos/hyperledger/burrow/issues/comments/275380641,https://github.com/hyperledger/burrow/pull/453#issuecomment-275380641,benjaminbollen,@silasdavis I wanted to merge this into a feature branch and then we can work on it? cc @ratranqu ,2017-01-26 12:48:16,2017-01-26 12:48:41
https://api.github.com/repos/hyperledger/burrow/issues/453,https://api.github.com/repos/hyperledger/burrow/issues/comments/275381382,https://github.com/hyperledger/burrow/pull/453#issuecomment-275381382,silasdavis,good idea,2017-01-26 12:52:41,2017-01-26 12:52:41
https://api.github.com/repos/hyperledger/burrow/issues/453,https://api.github.com/repos/hyperledger/burrow/issues/comments/275382293,https://github.com/hyperledger/burrow/pull/453#issuecomment-275382293,ratranqu,"@silasdavis, yes, I think you are right, we can just use the DecodeBytes function. ",2017-01-26 12:58:00,2017-01-26 12:58:00
https://api.github.com/repos/hyperledger/burrow/issues/452,https://api.github.com/repos/hyperledger/burrow/issues/comments/393109400,https://github.com/hyperledger/burrow/issues/452#issuecomment-393109400,compleatang,closing as old.,2018-05-30 10:19:31,2018-05-30 10:19:31
https://api.github.com/repos/hyperledger/burrow/issues/451,https://api.github.com/repos/hyperledger/burrow/issues/comments/393110024,https://github.com/hyperledger/burrow/issues/451#issuecomment-393110024,compleatang,this has all been refactored. closing for now. if it reappears we can reopen.,2018-05-30 10:21:40,2018-05-30 10:21:40
https://api.github.com/repos/hyperledger/burrow/issues/450,https://api.github.com/repos/hyperledger/burrow/issues/comments/273515865,https://github.com/hyperledger/burrow/pull/450#issuecomment-273515865,benjaminbollen,"@silasdavis as a general point you use the `util.Fatalf()` in a client library; and that should not happen; no package that is intended to be imported as a library package can have a call to `os.Exit(1)` https://github.com/eris-ltd/eris-db/blob/6c30c198b4a4e20e28c3f056dafcd7ccbc0daa76/util/os.go#L9

If you agree, can you go in and make sure that only errors are returned to the top level functions exposed?",2017-01-18 15:59:29,2017-01-18 15:59:29
https://api.github.com/repos/hyperledger/burrow/issues/447,https://api.github.com/repos/hyperledger/burrow/issues/comments/273271267,https://github.com/hyperledger/burrow/pull/447#issuecomment-273271267,silasdavis,@VoR0220 this change entails no tests. It's just changing existing logging to use new framework. There are some tests in the logging framework itself which is already merged to this feature branch.,2017-01-17 19:23:38,2017-01-17 19:23:38
https://api.github.com/repos/hyperledger/burrow/issues/447,https://api.github.com/repos/hyperledger/burrow/issues/comments/273291306,https://github.com/hyperledger/burrow/pull/447#issuecomment-273291306,VoR0220,"@silasdavis what I mean is, are all the chains server tests cleaned of the eris-logger? ",2017-01-17 20:34:19,2017-01-17 20:34:19
https://api.github.com/repos/hyperledger/burrow/issues/446,https://api.github.com/repos/hyperledger/burrow/issues/comments/273085723,https://github.com/hyperledger/burrow/issues/446#issuecomment-273085723,benjaminbollen,For reference: deprecated work for upgrading to tendermint 0.7.3 https://github.com/eris-ltd/eris-db/pull/415,2017-01-17 10:14:31,2017-01-17 10:14:37
https://api.github.com/repos/hyperledger/burrow/issues/446,https://api.github.com/repos/hyperledger/burrow/issues/comments/284121811,https://github.com/hyperledger/burrow/issues/446#issuecomment-284121811,zramsay,closed by #510 ,2017-03-04 02:55:26,2017-03-04 02:55:26
https://api.github.com/repos/hyperledger/burrow/issues/445,https://api.github.com/repos/hyperledger/burrow/issues/comments/393106072,https://github.com/hyperledger/burrow/issues/445#issuecomment-393106072,compleatang,closing in favor of govTx work,2018-05-30 10:07:48,2018-05-30 10:07:48
https://api.github.com/repos/hyperledger/burrow/issues/444,https://api.github.com/repos/hyperledger/burrow/issues/comments/284122142,https://github.com/hyperledger/burrow/issues/444#issuecomment-284122142,zramsay,#dibs. This is *the perfect issue* to intro myself to the edb and tmsp(abci)/tendermint codebases.,2017-03-04 03:00:34,2017-03-04 03:00:34
https://api.github.com/repos/hyperledger/burrow/issues/444,https://api.github.com/repos/hyperledger/burrow/issues/comments/284253546,https://github.com/hyperledger/burrow/issues/444#issuecomment-284253546,zramsay,it's been done already :(,2017-03-05 19:28:18,2017-03-05 19:28:18
https://api.github.com/repos/hyperledger/burrow/issues/443,https://api.github.com/repos/hyperledger/burrow/issues/comments/276374297,https://github.com/hyperledger/burrow/issues/443#issuecomment-276374297,silasdavis,Thanks very much for reporting this. I have proposed a fix that should be merged shortly.,2017-01-31 14:17:52,2017-01-31 14:17:52
https://api.github.com/repos/hyperledger/burrow/issues/441,https://api.github.com/repos/hyperledger/burrow/issues/comments/393105884,https://github.com/hyperledger/burrow/issues/441#issuecomment-393105884,compleatang,this pipeline has all been refactored. closing for now,2018-05-30 10:07:12,2018-05-30 10:07:12
https://api.github.com/repos/hyperledger/burrow/issues/439,https://api.github.com/repos/hyperledger/burrow/issues/comments/271933726,https://github.com/hyperledger/burrow/issues/439#issuecomment-271933726,dharmesh-khandelwal,**[Moved to #451]** @dharmesh-kh24 this sounds like a separate issue to me so I've taken the liberty of moving your comment to its own ticket - @silasdavis,2017-01-11 17:26:57,2017-01-22 15:58:56
https://api.github.com/repos/hyperledger/burrow/issues/439,https://api.github.com/repos/hyperledger/burrow/issues/comments/274339453,https://github.com/hyperledger/burrow/issues/439#issuecomment-274339453,silasdavis,"I ended up answering this on StackOverflow before coming here, so here's my response from there. Could you update as to whether it does seem like your subscription is getting reaped (as outlined below):

We have two different APIs at the moment. The one you are using we call the 'v0' API. It is optimised for long-polling Javascript clients. My guess is that your subscription is getting reaped before a certain hard-coded timeout that happens to be 10 seconds. Have you tried making the `eventPoll` call in quick sucession after the `eventSubscribe` call?

This is the 'v0' reaping function: https://github.com/eris-ltd/eris-db/blob/master/event/event_cache.go#L72. It runs in a loop clearing out old subscriptions that have not been polled recently. If you have waited longer than 10 seconds before polling then your subscription has probably been reaped (deleted).

We have another API optimised for chain administration called the 'tendermint' API (because of its heritage from the Tendermint consensus engine). It is something of a parallel API and it is used by the eris-pm tool. It also has a subscribe method accessible by a websocket endpoint. This might be useful for you because its subscriptions are never reaped.

You could try it out like this:

Start your chain:

    $ eris chains start testchain

Get a simple websocket client:

    $ go get github.com/raphael/wsc
    
Connect to the websocket endpoint:
    
    $ wsc ws://0.0.0.0:46657/websocket
    2017/01/21 01:03:51 connecting to ws://0.0.0.0:46657/websocket...
    2017/01/21 01:03:51 ready, exit with CTRL+C.

Subscribe to the `NewBlock` event by pasting `{ ""jsonrpc"": ""2.0"", ""method"": ""subscribe"", ""params"": [""NewBlock""] }` into the terminal as a single line:

    >> { ""jsonrpc"": ""2.0"", ""method"": ""subscribe"", ""params"": [""NewBlock""] }

Then you should receive a stream of new block events (about 1 per second) like:

    << {""jsonrpc"":""2.0"",""id"":""#event"",""result"":[19 {""event"":""NewBlock"",""data"":[1,{""block"":{""header"":{""chain_id"":""testchain"",""height"":206320,""time"":""2017-01-21T01:04:01.095Z"",""num_txs"":0,""last_block_hash"":""2DB0D0AE6D92DA6DA07F8E7D1605AAB6CB96D8D2"",""last_block_parts"":{""total"":1,""hash"":""A4AD1708714CF0BE3E5125B65F495DDDFA1ED8D9""},""last_commit_hash"":""4C301C0367B7CECDD4E00C955D2F155802B2377E"",""data_hash"":"""",""validators_hash"":""46E43215C6C332446114BF7320D2D007114C5EEB"",""app_hash"":""9A72DE9AAD6BD820A64DB98462CD706594217E1
    << 1""},""data"":{""txs"":[]},""last_commit"":{""precommits"":[{""height"":206319,""round"":0,""type"":2,""block_hash"":""2DB0D0AE6D92DA6DA07F8E7D1605AAB6CB96D8D2"",""block_parts_header"":{""total"":1,""hash"":""A4AD1708714CF0BE3E5125B65F495DDDFA1ED8D9""},""signature"":""45A6C3D0B0BD380A239F014681A29FD6217B52653CC7FC189FF5B7DC840A61062CF12FC652687A30A5CBBF0270937F32542D6075BA94A12180568560B322EC07""}]}}}]}],""error"":""""}

You could use a programmatic websocket client of your choice to interact with the chain using this websocket API and your subscriptions will never get reaped.

There is a grand unification of these APIs planned soon that should make them easier to use and better documented.",2017-01-22 16:00:31,2017-01-22 16:00:31
https://api.github.com/repos/hyperledger/burrow/issues/439,https://api.github.com/repos/hyperledger/burrow/issues/comments/279758820,https://github.com/hyperledger/burrow/issues/439#issuecomment-279758820,ratranqu,"@silasdavis, very interesting. What would happen if a client connected through the web socket api disconnects without unsubscribing? will it be prevented to resubscribe upon reconnect (with same ip)? I'm asking because I seem to see that behaviour of not being able to resubscribe in 0.11.4 (haven't dug into it yet) when there is a client disconnect. my current workaround is to stop and start the chain on the node used to access the chain.",2017-02-14 16:30:46,2017-02-14 16:30:46
https://api.github.com/repos/hyperledger/burrow/issues/439,https://api.github.com/repos/hyperledger/burrow/issues/comments/334472906,https://github.com/hyperledger/burrow/issues/439#issuecomment-334472906,silasdavis,"Converting this ticket to a placeholder to look into unexpected reaping, which almost certainly has more to do with timeouts or the Javascript library handling, but this should come under the umbrella of Burrow until such a time there is a viable alternative.",2017-10-05 13:57:36,2017-10-05 13:57:36
https://api.github.com/repos/hyperledger/burrow/issues/439,https://api.github.com/repos/hyperledger/burrow/issues/comments/393105738,https://github.com/hyperledger/burrow/issues/439#issuecomment-393105738,compleatang,this has all be refactored significantly. closing this ticket for now. if the issue arises again we can reopen,2018-05-30 10:06:41,2018-05-30 10:06:41
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271176808,https://github.com/hyperledger/burrow/issues/437#issuecomment-271176808,VoR0220,I think this is an excellent way to reduce workload and make our lives a lot easier and focus our resources on things we should be focusing on. Great suggestion. ++ ,2017-01-08 20:25:43,2017-01-08 20:25:43
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271178366,https://github.com/hyperledger/burrow/issues/437#issuecomment-271178366,AFDudley,">This, in turn, requires that we maintain libraries like eris-sqlsol an ETL layer which pipes event and collection based data from the chain into a queriable database.

I strongly disagree with this categorization. eris-sqlsol saves web clients from scraping blocks, how would segment.io do that? Do web clients connect to segment.io in this model? a web client facing cache isn't an ETL, but that same interface can be expanded upon to provide ETL access without having to provide or support an additional interface.

This also doesn't replace the needs of operators to ""ship log files"". This can be exposed by just using the standards Silas is already looking into. I don't see why this needs to change.

I didn't realize anyone was trying to develop ETL support.",2017-01-08 20:49:35,2017-01-08 20:53:30
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271180472,https://github.com/hyperledger/burrow/issues/437#issuecomment-271180472,compleatang,"> I didn't realize anyone was trying to develop ETL support.

You heard it on a call on Friday for one :stuck_out_tongue:. And ETL is a massive need across a range of users as you've told me multiple times.

I did not characterize this issue as solving the caching problem for all use cases (although in some it would, with a much more hefty db behind than sqlsol's in-memory sqlite provides). in the web client's scenario, they could connect into the postgres, redshift, or bigQuery db however the application maker has things set up if they needed a direct connection to the DB; or the application maker could use sqlsol (which I'm not advocating that we do away with...yet) instead of this feature. 

of course application makers can always build their own ETL and caching using solidity events if they have non-standard caching requirements.

> a web client facing cache isn't an ETL, but that same interface can be expanded upon to provide ETL access without having to provide or support an additional interface.

I don't understand this argument. sqlsol is currently doing ETL plus DBMS operations. From eris:db's perspective ETL features don't exist. So there is still ""another interface"" from the stack's perspective. I admit this would be a new interface from eris:db's perspective. 

However, I don't see why we would want to expand the ETL interface sqlsol currently provides to be able to push to ""bigger"" DB's (which I assume we can all agree is a necessity for application makers) when we can utilize industry leading ETL providers who do it every day. 

Should we ship this feature and folks find it useful, at that time, I would probably advocate that we do deprecate support for sqlsol as a standalone library. So it wouldn't be an additional interface, but rather movement of a optional interface from outside the service to inside the service.

This feature is orthogonal to ""shipping log files"", you are right it does not replace the need to ship log files, nor was it intended to.",2017-01-08 21:21:56,2017-01-08 21:21:56
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271191205,https://github.com/hyperledger/burrow/issues/437#issuecomment-271191205,AFDudley,"Yeah, so I'm generally disagreeing with this design philosophy. I suggested that the customer might need ETL support on the call...  I think moving eris-sqlsol functionality into ErisDB (exposing blockchain data as relational database data) *based on a client ask* is the correct solution. Once we have a clear client ask we can decide if we want to embed a relational database, use unix sockets, expose a Relational DB port, etc etc. Without a clear use-case, it feels like fishing.

I think there is some semantic confusion here. I think we need an ETL from blockchain to SQL, nothing more. If a customer asks for it, we should be able to provide them SQL read-only endpoints that speak the read-only subset of SQL93.",2017-01-09 00:07:25,2017-01-09 00:07:25
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271196228,https://github.com/hyperledger/burrow/issues/437#issuecomment-271196228,compleatang,"I think we're slightly talking past each other. And perhaps I need to refactor the problem statement to reflect this. 

Segment does this:

```
event source -- segment's etl -- integrations (over 100 integrations to highly used systems)
                              \- warehousing (3 integrations: redshift, bigQuery, bring your own postgres)
```

I don't disagree with you if we are treating it as part of a cache for web client and other (similar) types of interaction that it's sub-optimal design. I agree that it could be worthwhile, given a customer request, to explore exposing an SQL93 API/RPC or other ETL options for caching requirements.

The reason I think we're talking past each other is that I think you are focusing on the primary value in the feature being event - etl - warehouse whereas I think that the primary value is event - etl - integrations. For me, warehousing is a nice to have.

To be clear, the primary first customer of this feature will be LEI Chain's Application. The use case we have is that we want LEI Chain Application to be able to do a few things such as:

* populate our salesforce data based on information which resides in LEI Chain.
* send Slack notification when new participants sign on, or perform other high value user interactions.
* hook into monitoring tooling to make sure the production chain stays live; raise alerts when validators go down.
* And probably other features down the road.

My view is that to plug in to all of those systems is a lot of low level code that we can very simply avoid by using an ETL integrator. At least in the first instance, a simple connection to an ETL integration platform like segment is a very cost effective interface to maintain and enables a broad range of eris:db built applications to interact with other business systems (in my view at least).",2017-01-09 01:14:16,2017-01-09 01:14:57
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271201955,https://github.com/hyperledger/burrow/issues/437#issuecomment-271201955,AFDudley,Okay.,2017-01-09 02:38:26,2017-01-09 02:38:26
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271203160,https://github.com/hyperledger/burrow/issues/437#issuecomment-271203160,AFDudley,"I can't tell if you're trying to persuade me or not; I'm not persuaded. This seems like a sure-fire quagmire in terms of BFT features, RBAC, and more general separation of concerns. If you're just telling me what you're going to do; this is fine. 

>My view is that to plug in to all of those systems is a lot of low level code that we can very simply avoid by using an ETL integrator. At least in the first instance, a simple connection to an ETL integration platform like segment is a very cost effective interface to maintain and enables a broad range of eris:db built applications to interact with other business systems (in my view at least).

1. you're marrying eris:db, to some proprietary system you have no control over.
2. just exposing SQL is easier, already useful, orders of magnitude boarder adoption, SQL93 isn't changing anytime soon, once you expose it properly you're done, no upstream syncing.

Again, when I see a customer ask, from a customer, I'll be happy to explore with them what their needs are and develop a roadmap to those features. This sort of short-circuiting seems like an obvious architectural dead end to me.",2017-01-09 02:54:28,2017-01-09 02:54:28
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271210228,https://github.com/hyperledger/burrow/issues/437#issuecomment-271210228,VoR0220,But what if there infrastructure isnt using SQL? What if its NoSQL? Or mongoDB? Or Redis? What about these? ,2017-01-09 04:37:26,2017-01-09 04:37:26
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271210328,https://github.com/hyperledger/burrow/issues/437#issuecomment-271210328,VoR0220,If we were only aiming for SQL I'd be 100% with you on this Rick. But the question is: is that all we are after? Is that the smartest move? Is there value in exposing our platform to multiple traditional db systems? ,2017-01-09 04:39:14,2017-01-09 04:39:14
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271210496,https://github.com/hyperledger/burrow/issues/437#issuecomment-271210496,VoR0220,"Although the proprietary control is definitely concerning...perhaps it would be better to not necessarily marry the two but expose them as a service...maybe we could do both and have SQL which we maintain (because thats most popular) and then open this integration as our ""all others"" service. ",2017-01-09 04:42:08,2017-01-09 04:42:08
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271248863,https://github.com/hyperledger/burrow/issues/437#issuecomment-271248863,compleatang,"I'm not trying to convince you @AFDudley because I'm not convinced we're talking about the same value proposition. 

I fully accept your first point that segment or any of its competitors have proprietary components.

> 2. just exposing SQL is easier

Here is where I'm confused. How would exposing SQL make it easier for users to trigger event streams they can route into other business systems that application users and builders utilize? (genuine question because I may be missing something fundamental to your argument)

Unless I'm missing something fundamental, exposing SQL from eris:db would still require middleware to listen for and trigger event streams. Users that wanted to connect those event streams to other business systems would still have to build their listening & routing mechanisms for those events individually per API to their other systems. Whereas they wouldn't using an ETL aggregation platform.

I am not following your argument as to how BFT or RBAC have anything to do with users having a clean ability to pipe events into other systems. 

If we were talking about using an ETL aggregator *instead of* a more complete caching mechanism that provides a queryable interface for datasets then I can see and do not disagree with your concerns. However, I do not see a sink for event stream initiation as being on point with dataset caching. Maybe I'm missing fundamental about your argument though. ",2017-01-09 10:13:00,2017-01-09 10:13:00
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271276039,https://github.com/hyperledger/burrow/issues/437#issuecomment-271276039,AFDudley,"@VoR0220 SQL is everywhere, it's in every smartphone and some dumb phones, airplanes, cars, etc etc. Postgres can and does do all the things you've mentioned. But your core ""what if"" point here is valid and why I think we need an ask from a customer to have a serious conversation about these types of features.",2017-01-09 12:46:34,2017-01-09 12:46:34
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271279373,https://github.com/hyperledger/burrow/issues/437#issuecomment-271279373,silasdavis,"Does eris-db need to be aware of segment at all? Any ETL tool will be able to load data from a SQL store. If we are agreed that we want to expose that (I think we are) then it seems we would automatically be providing basic support for something like segment. With that in mind:

1. What first-class support (i.e. beyond a SQL event log), if any, for segment are we proposing here?
2. Where would this support live?
3. Does any such support need to be _in_ eris-db? 
4. Does any such support need to be in a service running alongside the eris-db node or is it just an orthogonal collection of tools to help importing into segment?

To frame the discussion a bit, and having discussed with Tyler, I am envisaging for our rawest (least derived) form of event log a telemetry log of point-like events with a timestamp, that spurts out of a hose to interested parties that can infer events with duration and system state by combining these simple events. I think initially we are talking about putting this raw log into a SQL database to make it queryable, and this would be part of eris-db. This simpler, rawer SQL schema would then define a pinhole interface into eris-db. Where possible it seems desirable for more derived analytics to be driven off that, with eris-db in blissful ignorance.

But I have little idea about specific use cases beyond certain basic contract-watching cases @dennismckinnon brought up.",2017-01-09 13:04:23,2017-01-09 13:06:42
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271279564,https://github.com/hyperledger/burrow/issues/437#issuecomment-271279564,AFDudley,">Here is where I'm confused. How would exposing SQL make it easier for users to trigger event streams they can route into other business systems that application users and builders utilize?

It's sounding more and more like you folks want to integrate postgres. https://www.postgresql.org/docs/9.1/static/sql-notify.html

>Unless I'm missing something fundamental, exposing SQL from eris:db would still require middleware to listen for and trigger event streams.

Agreed. I think this should be more tightly coupled to eris:db than eris-sqlsol currently is, but we are blind men describing an elephant if we don't have a client ask. This very question is what prompted me to start working on a BFT-DB in the first place.

>I am not following your argument as to how BFT or RBAC have anything to do with users having a clean ability to pipe events into other systems.

Trust issues (BFT and RBAC) are always core considerations in any blockchain architecture. Can a malicious user break your integration point by spamming a contract? How are permissions on the blockchain side replicated on the ""ETL"" side?

>However, I do not see a sink for event stream initiation as being on point with dataset caching.

Postgres has been handling both of these concerns in production environments for a very long time. Databases do a lot of enterprise business logic... nearly all of it. So whatever we are trying to do, various production databases already do and have been doing since before we were born. ",2017-01-09 13:05:15,2017-01-09 13:05:15
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271307405,https://github.com/hyperledger/burrow/issues/437#issuecomment-271307405,compleatang,"Good discussion here, but I still think we're all talking at cross-purposes. The starting point and need for this feature is listed above in the LEI Chain section. Functionally I'm neither advocating that we try to rebuild postgres nor would postgres solve what I'm talking about.

So, what am I talking about? I'm trying to find an easier way for users who want to pipe events that an eris:db node knows about into other business systems. 

I'm not trying to do this via a database sync, nor am I talking about providing any database dynamics. I fear that my invocation of both sqlsol and ETL may be leading the discussion in a direction different than intended. 

So before going any deeper, let's just decide whether the following questions are a yes, and if consensus is no then we should stop discussion close the issue and move on.

- do we agree that users have a variety of different business systems (many of them SaaS and API based; others legacy enterprise infrastructure with enterprise bus's large postgres deployments, etc.) that users will want/need to pipe **event information** (which typically began in the contracts layer) into?
- do we think that there is a case to be made for eris:db to pipe events into other systems without users *having* to develop their own middleware solely to listen and route events to a webhook?

Again, this is about event notification. This is not about ""what are all the contracts on the chain"" or ""what block was transaction hash X in"". 

If we have consensus that the above two questions are yes then we can talk about the specifics of this issue and how we would implement it, if we do not then we should not continue wasting time on this discussion.

---

@silasdavis in response to your points. 

1. segment and other ETL platforms don't really work on SQL event logs (although I assume they could be made to) but rather on [arbitrary ""track"" events](https://segment.com/docs/sources/server/go/#track) which are sent to a collection webhook. To be clear the feature discussion (for me) is less about the specifics of segment and more about the paradigm of enabling easier integration of outbound streams to an events aggregation platform such as segment, stitch, or zapier.
2. It could either live natively in eris:db or users could take eris-contracts spin up a watching node and route their events from there. If we did implement in eris:db functionally the feature would do the following: `POST events A, B, C to webhook endpoint url Z`. Nothing more.
3. No (see 2) it does not, strictly speaking, have to be in eris:db. I think it would be much cleaner to have event streams be pipe-able directly to arbitrary listening webhook endpoints but given the discussion on this issue perhaps I'm alone in that view.
4. I'm not sure I follow your question.",2017-01-09 15:07:17,2017-01-09 15:07:17
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271344221,https://github.com/hyperledger/burrow/issues/437#issuecomment-271344221,silasdavis,"@compleatang don't worry about 4, what you've said covers it.

I had also thought about streaming events to something like Kafka/Flume. It ought to be straight-froward to write a sink that publishes to the segment tracking API (https://segment.com/docs/sources/server/http/) without eris-db needing to know specifically about Segment. The nice thing about this is it could support many different consumers. I think we ought to be able to support Amazon Kinesis (based on Kafka) too. ",2017-01-09 17:12:47,2017-01-09 17:12:47
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271351102,https://github.com/hyperledger/burrow/issues/437#issuecomment-271351102,compleatang,"Right. So I will refactor the top comment if we all think the following is a viable, maintainable feature to add to eris:db. 

`Users should be able to provide erisdb with a webhook URL and a list of events to send to that webhook.`

On boot erisdb will read the watch list and when one of the events occurs will send the event (just as we currently do with subscribing websockets) via http POST to the provided end point.`",2017-01-09 17:38:47,2017-01-09 17:38:47
https://api.github.com/repos/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/comments/271739855,https://github.com/hyperledger/burrow/issues/437#issuecomment-271739855,compleatang,Closing this issue and moving it into the RFC system. If the feature is approved via RFC then we can recreate more discrete issues for the work. ,2017-01-11 00:17:43,2017-01-11 00:17:43
https://api.github.com/repos/hyperledger/burrow/issues/436,https://api.github.com/repos/hyperledger/burrow/issues/comments/272190087,https://github.com/hyperledger/burrow/issues/436#issuecomment-272190087,benjaminbollen,duplicate of #419 ,2017-01-12 15:18:54,2017-01-12 15:18:54
https://api.github.com/repos/hyperledger/burrow/issues/436,https://api.github.com/repos/hyperledger/burrow/issues/comments/274341409,https://github.com/hyperledger/burrow/issues/436#issuecomment-274341409,silasdavis,"What is the aim of this?

If the aim is just to support code using `ecrecover` then adding this back will allow solidity code using `ecrecover` execute successfully. But it will do nothing to make solidity code that assumes secp256k1 keys are being used give correct results. If you provide it with a ed25519 signature it should provide you with an address, but that address will not be the one corresponding to the signer. So in effect we will just have silently failing code (which is worse than not supporting it at all).

So it seems (unless I'm mistaken) this only makes sense if we introduce/add back support for secp256k1 keys. If we do that, how do we deal with ed25519 signatures? It seems like Ethereum have plans to introduce support for other signatures (https://github.com/ethereum/EIPs/issues/28) so do they have a way to deal with it.

It would be useful to see an example usage of `ecrecover` in a contract. @VoR0220 could you provide one. I think I need to understand where these signatures are coming from; are they being provided by the EVM (I don't think it is) or are signatures being sent as arguments to functions? ",2017-01-22 16:32:43,2017-01-22 16:42:21
https://api.github.com/repos/hyperledger/burrow/issues/436,https://api.github.com/repos/hyperledger/burrow/issues/comments/274341933,https://github.com/hyperledger/burrow/issues/436#issuecomment-274341933,silasdavis,"Here is an instructive example: https://github.com/edmundedgar/realitykeys-examples-ethereum/blob/master/sponsor/sponsor.sol#L55

```javascript
        address signer_address = ecrecover(result_hash, v, r, s);
        uint256 result_value = uint256(result_value_hex) / p.base_unit;

        LogSettlementAmount(result_value);
        if (signer_address != p.oracle_address) {
           LogFail(signer_address);
           LogFail(p.oracle_address);
           return false;
        }
```

It seems in that example since the arguments for ecrecover and the `oracle_address` are all being set externally, then it is down to the clients interacting with the contract to make sure secp256k1 keys are being used and passed in. If they are then it would work. The key types we happen to be using for participants of our chain do not matter.

Whereas it would fail if, for example, the `msg.sender` address was being checked rather than an externally set address, and if that sender was not using a secp256k1 signing key.

I suppose if it is acceptable to push the responsibility for ensuring those entities participating in your contract that uses `ecrecover` are using secp256k1 then it is okay to support this.

",2017-01-22 16:41:16,2017-01-22 16:43:34
https://api.github.com/repos/hyperledger/burrow/issues/436,https://api.github.com/repos/hyperledger/burrow/issues/comments/274343034,https://github.com/hyperledger/burrow/issues/436#issuecomment-274343034,VoR0220,:+1:,2017-01-22 16:58:00,2017-01-22 16:58:00
https://api.github.com/repos/hyperledger/burrow/issues/436,https://api.github.com/repos/hyperledger/burrow/issues/comments/393116097,https://github.com/hyperledger/burrow/issues/436#issuecomment-393116097,compleatang,See #777 ,2018-05-30 10:45:27,2018-05-30 10:45:27
https://api.github.com/repos/hyperledger/burrow/issues/435,https://api.github.com/repos/hyperledger/burrow/issues/comments/275199184,https://github.com/hyperledger/burrow/issues/435#issuecomment-275199184,silasdavis,There's a ticket for this in logging epic #389 ,2017-01-25 18:57:26,2017-01-25 18:58:37
https://api.github.com/repos/hyperledger/burrow/issues/434,https://api.github.com/repos/hyperledger/burrow/issues/comments/272191582,https://github.com/hyperledger/burrow/issues/434#issuecomment-272191582,benjaminbollen,"checklist:
- [x] refactor eris-db genesis types
- [ ] refactor functionality without changing behaviour but to allow for planned new features
- [x] replace marmot time with genesis time
- [x] prepare for correction of ChainId versus ChainName
- [ ] introduce canonical order for genesis bytes to allow for derived ChainId = Hash(GenesisDoc)
- [ ] allow Monax SDK deployment through genesis",2017-01-12 15:24:23,2017-01-12 15:24:23
https://api.github.com/repos/hyperledger/burrow/issues/434,https://api.github.com/repos/hyperledger/burrow/issues/comments/284122214,https://github.com/hyperledger/burrow/issues/434#issuecomment-284122214,zramsay,this issues purpose has been outlived,2017-03-04 03:01:44,2017-03-04 03:01:44
https://api.github.com/repos/hyperledger/burrow/issues/433,https://api.github.com/repos/hyperledger/burrow/issues/comments/270675520,https://github.com/hyperledger/burrow/pull/433#issuecomment-270675520,zramsay,:+1: ,2017-01-05 15:45:37,2017-01-05 15:45:37
https://api.github.com/repos/hyperledger/burrow/issues/432,https://api.github.com/repos/hyperledger/burrow/issues/comments/270651898,https://github.com/hyperledger/burrow/issues/432#issuecomment-270651898,benjaminbollen,"thank you for reporting.  This looks like an issue with the tooling (github.com/eris-ltd/eris-cli) and not the actual blockchain, but should be simple enough to resolve here.  Can you report back what the results are if you run
```
eris chains make tester --chain-type=simplechain
eris chains start tester
eris ls
```
thanks Ben",2017-01-05 14:09:23,2017-01-05 14:09:23
https://api.github.com/repos/hyperledger/burrow/issues/432,https://api.github.com/repos/hyperledger/burrow/issues/comments/270654909,https://github.com/hyperledger/burrow/issues/432#issuecomment-270654909,sathishmanoharan,"Hi @benjaminbollen , 

I am still getting the same error. 

![image](https://cloud.githubusercontent.com/assets/18713130/21683678/6a8b42fe-d380-11e6-9c05-20a7e787117b.png)

Can you please let me know if there is a workaround for this? ",2017-01-05 14:23:11,2017-01-05 14:23:11
https://api.github.com/repos/hyperledger/burrow/issues/432,https://api.github.com/repos/hyperledger/burrow/issues/comments/270662716,https://github.com/hyperledger/burrow/issues/432#issuecomment-270662716,benjaminbollen,"Can you try running `eris clean -ya` before (WARNING, will wipe your `.eris` folder).  Perhaps there are lingering docker containers from an earlier version of eris.",2017-01-05 14:55:34,2017-01-05 14:55:34
https://api.github.com/repos/hyperledger/burrow/issues/432,https://api.github.com/repos/hyperledger/burrow/issues/comments/270912830,https://github.com/hyperledger/burrow/issues/432#issuecomment-270912830,sathishmanoharan,"Hi @benjaminbollen , Thanks for your reply. I cleaned .eris and uninstalled eris and docker and installed them again. But I am still getting the same error. One thing i noticed while running the 'eris chains start' command is that, eris keys image is picking the tag 'latest' instead of '0.12.0'. I am running this without docker-machine.
![image](https://cloud.githubusercontent.com/assets/18713130/21720578/fad604e2-d449-11e6-8184-b7d243224bbe.png)

I ran the 'chains start' command twice and it has created 2 'eris data' containers. But they are not in running status. Can you please help in resolving this issue?
![image](https://cloud.githubusercontent.com/assets/18713130/21720495/8186b50a-d449-11e6-8d81-9979d4a800cf.png)
",2017-01-06 14:25:19,2017-01-06 14:25:19
https://api.github.com/repos/hyperledger/burrow/issues/432,https://api.github.com/repos/hyperledger/burrow/issues/comments/270915957,https://github.com/hyperledger/burrow/issues/432#issuecomment-270915957,zramsay,"@sathishmanoharan when creating a chain for the first time, the `--init-dir` flag is required on `eris chains start`. After that, you can `start | stop` your chain without the flag. However, if you remove both the chain and its data container then you'll need the `--init-dir` flag again.",2017-01-06 14:40:02,2017-01-06 14:40:02
https://api.github.com/repos/hyperledger/burrow/issues/432,https://api.github.com/repos/hyperledger/burrow/issues/comments/271213718,https://github.com/hyperledger/burrow/issues/432#issuecomment-271213718,sathishmanoharan,"Hi, @zramsay, I tried init-dir flag. But I am getting the same error. I was able to start the chain in windows 10 without the init-dir flag. Can you please look into this issue?

![image](https://cloud.githubusercontent.com/assets/18713130/21757858/d0f37ca0-d65a-11e6-826e-8dc769804c81.png)
",2017-01-09 05:32:48,2017-01-09 05:32:48
https://api.github.com/repos/hyperledger/burrow/issues/432,https://api.github.com/repos/hyperledger/burrow/issues/comments/271598720,https://github.com/hyperledger/burrow/issues/432#issuecomment-271598720,benjaminbollen,"Hi @sathishmanoharan,

Im sorry to find this is not resolved for you; can we outline the reproducible environment ?  You are working on ubuntu 14.04 (linux) (and the problem is not occuring on Windows 10 - referenced above), correct?

Can you try either an absolute path; or otherwise start the relative path from `./eris/chains/`, ie just try
```
eris chains make tester2 --chain-type=simplechain
eris chains start tester2 --init-dir=tester2
eris ls
eris chains logs -f tester2
```
Hope that helps
Ben

PS: this relative directory (`./eris/chains`) only works if you execute the command from the parent directory of the `.eris` folder (normally $HOME).  So your commands should normally work, but perhaps there is a subtle error hidden when executed from $HOME with this relative path.
",2017-01-10 15:05:36,2017-01-10 15:12:00
https://api.github.com/repos/hyperledger/burrow/issues/432,https://api.github.com/repos/hyperledger/burrow/issues/comments/271659910,https://github.com/hyperledger/burrow/issues/432#issuecomment-271659910,sathishmanoharan,"Hi @benjaminbollen , Thanks for your reply. I was able to resolve this error today. I had to run the 'eris data rm' command to remove all the data containers. (there were few 'keys' and 'chain-name' containers). Then I started the chain using 'eris chains start' and it started fine. I haven't deployed the contracts to the chains yet. I will try that tomorrow. Hopefully it should be fine. 
I followed the steps in the tutorial. Are you able to infer what is going wrong with this information? ",2017-01-10 18:40:57,2017-01-10 18:40:57
https://api.github.com/repos/hyperledger/burrow/issues/432,https://api.github.com/repos/hyperledger/burrow/issues/comments/271842847,https://github.com/hyperledger/burrow/issues/432#issuecomment-271842847,benjaminbollen,"Glad you got this hurdle cleared.  I tried reproducing but without success.  It is possible that old containers failed to get cleared and clogged the creation of the new chain.  We have the issue logged for future reference to get to reproducibility.

You may additionally get help from our community on slack.monax.io if you encounter any problems with the contract tutorials.",2017-01-11 11:14:36,2017-01-11 11:14:36
https://api.github.com/repos/hyperledger/burrow/issues/430,https://api.github.com/repos/hyperledger/burrow/issues/comments/270604945,https://github.com/hyperledger/burrow/issues/430#issuecomment-270604945,benjaminbollen,"We use glide for dependency management, please run `glide install` after checking out a version, as mentioned in the instructions https://github.com/eris-ltd/eris-db#for-developers",2017-01-05 09:50:56,2017-01-05 09:50:56
https://api.github.com/repos/hyperledger/burrow/issues/429,https://api.github.com/repos/hyperledger/burrow/issues/comments/273107559,https://github.com/hyperledger/burrow/issues/429#issuecomment-273107559,benjaminbollen,"*First hypothesis*: due to constraints in the construction of persistence of the state db, upon committing a block and saving it, the references to the cached copy of older blocks of the state, might be void for the codepath used by RPCv0  (to-be-deprecated but still used by JS libs). This would panic the endpoint on 1337, blocking all further communication with it.

*Validation of hypothesis*: Construct client test and review mutex structure on old code path.",2017-01-17 10:58:41,2017-01-17 10:59:01
https://api.github.com/repos/hyperledger/burrow/issues/429,https://api.github.com/repos/hyperledger/burrow/issues/comments/393110249,https://github.com/hyperledger/burrow/issues/429#issuecomment-393110249,compleatang,very old issue. closing,2018-05-30 10:22:30,2018-05-30 10:22:30
https://api.github.com/repos/hyperledger/burrow/issues/428,https://api.github.com/repos/hyperledger/burrow/issues/comments/268892683,https://github.com/hyperledger/burrow/pull/428#issuecomment-268892683,silasdavis,@benjaminbollen fixed this. Apparently slices aren't hashable so die if you try to use them as a key for a map.,2016-12-22 21:18:34,2016-12-22 21:18:34
https://api.github.com/repos/hyperledger/burrow/issues/428,https://api.github.com/repos/hyperledger/burrow/issues/comments/270664372,https://github.com/hyperledger/burrow/pull/428#issuecomment-270664372,benjaminbollen,LGTM,2017-01-05 15:01:59,2017-01-05 15:01:59
https://api.github.com/repos/hyperledger/burrow/issues/425,https://api.github.com/repos/hyperledger/burrow/issues/comments/373004535,https://github.com/hyperledger/burrow/issues/425#issuecomment-373004535,silasdavis,This has been superceded ,2018-03-14 12:32:18,2018-03-14 12:32:18
https://api.github.com/repos/hyperledger/burrow/issues/423,https://api.github.com/repos/hyperledger/burrow/issues/comments/276348008,https://github.com/hyperledger/burrow/issues/423#issuecomment-276348008,dsanchezseco,Any news on this request?,2017-01-31 12:13:13,2017-01-31 12:13:13
https://api.github.com/repos/hyperledger/burrow/issues/423,https://api.github.com/repos/hyperledger/burrow/issues/comments/276931259,https://github.com/hyperledger/burrow/issues/423#issuecomment-276931259,silasdavis,"Hi David nice to meet you at the blockchain expo. Sorry about the delay in getting back over Christmas. I also wanted to circle up with some internal RFC process we have around this area.

There is a new logging system in 0.16.0 that I think could be put to use to solve your issue. It would require a fairly small change to hook our internal calls to `FireEvent` through out own event multiplexer. We had always intended to further centralise the handling of events so this is for the good in terms of architecture. We can then have a special purpose logger receiving events in a fire-and-forget fashion (writing to a non-blocking ring buffer so we don't risk disrupting the system). The new logging system allows you to set up a pipeline of 'sinks' that can transform (e.g. filter) the output before passing it on to final output sinks or other sinks. The point of this is that it is all done through configuration. So to support your use case we could just need to implement an `HTTPEndpointOutput` for example.

As I mentioned to you in person I am also considering supporting Kafka for this purpose that would deal with resiliency (crashing consumers/producers), book-keeping, and scaling as well as integrating with other things. It seems like we could add support for a `KafkaProducerOutput` in similar way plugging into this special-purpose logger.

Which would be more useful for you? Also thinking about the events and their metadata what format for the events would be of most use to you? Exactly like you would get over a API subscription? We may need some kind of wrapper given if we are sending many different types over the same channel. Is there anything other system state that would be useful to get from a single hose?

We do need to be careful about dumping potentially sensitive state out to logging, particularly if we are sending all events not just those that you have asked for. I think by separating this from the general-purpose logger and making sure it is deliberately requested will help somewhat. Would a mass-subscription pipe work for you - that is where you still have to provide account addresses you are interested in but you can provide them in bulk and receive on same channel?",2017-02-02 11:18:10,2017-02-02 11:19:03
https://api.github.com/repos/hyperledger/burrow/issues/423,https://api.github.com/repos/hyperledger/burrow/issues/comments/279692618,https://github.com/hyperledger/burrow/issues/423#issuecomment-279692618,dsanchezseco,"Sorry for the delay.

The kafka producer sounds great, actually it is the approach we want. For now it could we a single topic and all the events generated on the contracts are dumped there, but we think for get the maximum from kafka a topic for each type pf event would fit better. 

We thought of and event serialized in Avro with the metadata in the header. Will this fit you? Will be doable?",2017-02-14 12:17:34,2017-02-14 12:17:34
https://api.github.com/repos/hyperledger/burrow/issues/423,https://api.github.com/repos/hyperledger/burrow/issues/comments/393110377,https://github.com/hyperledger/burrow/issues/423#issuecomment-393110377,compleatang,closing in favor of #658,2018-05-30 10:22:56,2018-05-30 10:22:56
https://api.github.com/repos/hyperledger/burrow/issues/421,https://api.github.com/repos/hyperledger/burrow/issues/comments/267309565,https://github.com/hyperledger/burrow/pull/421#issuecomment-267309565,benjaminbollen,LGTM,2016-12-15 11:50:22,2016-12-15 11:50:22
https://api.github.com/repos/hyperledger/burrow/issues/419,https://api.github.com/repos/hyperledger/burrow/issues/comments/266467027,https://github.com/hyperledger/burrow/issues/419#issuecomment-266467027,VoR0220,Oh this takes me back :) right @benjaminbollen ? ,2016-12-12 15:53:33,2016-12-12 15:53:33
https://api.github.com/repos/hyperledger/burrow/issues/419,https://api.github.com/repos/hyperledger/burrow/issues/comments/380599153,https://github.com/hyperledger/burrow/issues/419#issuecomment-380599153,compleatang,Dup of#426,2018-04-11 21:19:42,2018-04-11 21:19:42
https://api.github.com/repos/hyperledger/burrow/issues/419,https://api.github.com/repos/hyperledger/burrow/issues/comments/380599160,https://github.com/hyperledger/burrow/issues/419#issuecomment-380599160,compleatang,Dup of#426,2018-04-11 21:19:43,2018-04-11 21:19:43
https://api.github.com/repos/hyperledger/burrow/issues/418,https://api.github.com/repos/hyperledger/burrow/issues/comments/280674568,https://github.com/hyperledger/burrow/issues/418#issuecomment-280674568,silasdavis,"I'll change the default return type to 0, which is both false and 0 in the EVM, and as you say the 0 flag grants no permissions, so this would seem to make sense, see: https://github.com/eris-ltd/eris-db/pull/500#issuecomment-280632471",2017-02-17 15:07:42,2017-02-17 15:07:42
https://api.github.com/repos/hyperledger/burrow/issues/418,https://api.github.com/repos/hyperledger/burrow/issues/comments/280683568,https://github.com/hyperledger/burrow/issues/418#issuecomment-280683568,jasonklein,"@silasdavis, `nil` is also returned if the account the caller is referencing, e.g., if calling `set_base`, the account for which a permission is trying to be set, does not exist. Presumably this would also be resolved by the above change, but want to note it in case not.",2017-02-17 15:40:38,2017-02-17 15:40:38
https://api.github.com/repos/hyperledger/burrow/issues/418,https://api.github.com/repos/hyperledger/burrow/issues/comments/282004447,https://github.com/hyperledger/burrow/issues/418#issuecomment-282004447,silasdavis,"@jasonklein (yay I managed to @ you) I've actually stepped back from this change. In all the cases you have cited nil (equivalent to empty byte slice) is returned when an error is also being returned. When this happens the vm handles it here: https://github.com/eris-ltd/eris-db/blob/release-0.16/manager/eris-mint/evm/vm.go#L885

As you can see, if an error is returned then the vm pushes `Zero256` on to the stack. So I don't think the nil returns can be the source of the invalid jump dest (I think @VoR0220 had another theory?). It is idiomatic to return nil from go functions when an error is also being returned so I have reinstated these. Returning 0 at these functions may lead to a false reliance on a default value without knowing the caller's context. When an error is returned it must be handled by the caller. In effect though the behaviour that I thought I was adding is actually already in place via the EVM.

So I think the invalid jump dest you were seeing must have another cause. It might be worth re-checking this against current release-0.16 branch were we have made breaking changes and improvements to the snatives and permissions contract (some along the lines of your suggestion).",2017-02-23 14:25:18,2017-02-23 14:33:12
https://api.github.com/repos/hyperledger/burrow/issues/417,https://api.github.com/repos/hyperledger/burrow/issues/comments/278198784,https://github.com/hyperledger/burrow/issues/417#issuecomment-278198784,VoR0220,"fairly sure I've completed this but it is a breaking change...cool if I just put the PR up in a ""hold onto this until 0.17.0"" branch? ",2017-02-08 01:16:54,2017-02-08 01:16:54
https://api.github.com/repos/hyperledger/burrow/issues/417,https://api.github.com/repos/hyperledger/burrow/issues/comments/278305900,https://github.com/hyperledger/burrow/issues/417#issuecomment-278305900,silasdavis,"We need to to introduce the permissions stub contract as a first-class asset in eris-db, and automate it so we can be more certain the snatives permissions map matches the contract. It's not good that the permissions map is just some alien reference.

The primary issue here is the inaccessibility of `set_global`. I am reluctant to make cosmetic changes to the casing of the function names that will break backward compatibility, is there a strong reason to do this?

You are correct on the `uint64` point, but again I am reluctant to change the signatures of the working methods for little benefit. Bear in mind that since a PermFlag bitfield is really a way of encoding a more complex type into an integer being slightly tighter on the outer type seems to buy us rather less than it would if we were representing a strictly non-negative number.

Personally I think the permissions interface could do with a more significant overhaul and no expose PermFlags at all (though it could still use them internally), and rather a more simple-minded interface that allows you to set flags on a permissions object. Currently the bit-twiddling approach allows you to set unsupported values and requires knowledge of the permissions representation that seems unnecessary...",2017-02-08 11:45:03,2017-02-08 11:45:03
https://api.github.com/repos/hyperledger/burrow/issues/417,https://api.github.com/repos/hyperledger/burrow/issues/comments/299653245,https://github.com/hyperledger/burrow/issues/417#issuecomment-299653245,silasdavis,Serviced/superceded by #500 ,2017-05-06 17:08:04,2017-05-06 17:08:04
https://api.github.com/repos/hyperledger/burrow/issues/416,https://api.github.com/repos/hyperledger/burrow/issues/comments/265187833,https://github.com/hyperledger/burrow/pull/416#issuecomment-265187833,zramsay,this should also be added to `feature_consolidate` branch,2016-12-06 15:57:31,2016-12-06 15:57:31
https://api.github.com/repos/hyperledger/burrow/issues/416,https://api.github.com/repos/hyperledger/burrow/issues/comments/265188233,https://github.com/hyperledger/burrow/pull/416#issuecomment-265188233,benjaminbollen,LGTM,2016-12-06 15:58:55,2016-12-06 15:58:55
https://api.github.com/repos/hyperledger/burrow/issues/416,https://api.github.com/repos/hyperledger/burrow/issues/comments/265188561,https://github.com/hyperledger/burrow/pull/416#issuecomment-265188561,benjaminbollen,"@zramsay yes, but it is a disconnected package at this point, so we can merge develop into consolidate branch",2016-12-06 16:00:05,2016-12-06 16:00:05
https://api.github.com/repos/hyperledger/burrow/issues/415,https://api.github.com/repos/hyperledger/burrow/issues/comments/265005026,https://github.com/hyperledger/burrow/pull/415#issuecomment-265005026,silasdavis,"Doesn't work yet due to (at least) EventSwitch being changed to interface. I am pegging every tendermint dependency to the exact version. I wish glide would do this for us (https://github.com/Masterminds/glide/issues/479)

This is also an attempt to resolve some outstanding issues with our current glide.yaml/glide up fragility.",2016-12-05 22:55:04,2016-12-05 22:55:04
https://api.github.com/repos/hyperledger/burrow/issues/415,https://api.github.com/repos/hyperledger/burrow/issues/comments/273101700,https://github.com/hyperledger/burrow/pull/415#issuecomment-273101700,benjaminbollen,closing this as superseded by tendermint 0.8.0,2017-01-17 10:42:11,2017-01-17 10:42:11
https://api.github.com/repos/hyperledger/burrow/issues/413,https://api.github.com/repos/hyperledger/burrow/issues/comments/263807497,https://github.com/hyperledger/burrow/issues/413#issuecomment-263807497,nottherealbatman,"The error occurs at `name = bytes32ToString(p.getNameBytes());`.
If you change `name` to a fixed string like `name = ""A name"";` then it does work on the eris stack. 
There is probably something happening in the `bytes32ToString` function that makes it crash. But this isn't the case when using the ethereum browser compiler.",2016-11-30 07:59:08,2016-11-30 07:59:08
https://api.github.com/repos/hyperledger/burrow/issues/413,https://api.github.com/repos/hyperledger/burrow/issues/comments/263858020,https://github.com/hyperledger/burrow/issues/413#issuecomment-263858020,the-real-aquaman,"I think this issue is linked to issue #258 
The eris stack breaks when trying to assign a value y at index x for memory arrays, like:
```
bytes memory arr;
arr[0] = 1;
```",2016-11-30 12:06:21,2016-11-30 12:06:21
https://api.github.com/repos/hyperledger/burrow/issues/413,https://api.github.com/repos/hyperledger/burrow/issues/comments/300174685,https://github.com/hyperledger/burrow/issues/413#issuecomment-300174685,silasdavis,"@the-real-aquaman the code you've given actually doesn't compile with 0.4.4. But something similar does: https://gist.github.com/anonymous/2bfbbb87339adf41d946cbf55b555f9b 

```javascript
    function f() {
        uint[] memory arr = new uint[](0x44); 
        arr[0x11] = 0x22;
    }
```

The issue is that the array length is written too the boundary of the memory (the result of the `MSIZE` call). This is a aspect of the solidity compiler which I believe I have traced to this code:

https://github.com/ethereum/solidity/blob/develop/libsolidity/codegen/ExpressionCompiler.cpp#L842-L851

The reason it does this is still a little obscure to me and I am also missing how this works on other EVM implementations since it is effectively deliberately writing to memory out of bounds.

I have a fix in hand that provides dynamic memory allocation (since we have cases where our 1 MiB memory allocation is insufficient also causing out-of-bounds), but I need to also understand how this behaviour is supported elsewhere (even if it triggers resizes it seems rather odd to be continually writing to the end of memory however big that memory is, and so could cause run-away allocations).",2017-05-09 14:03:57,2017-05-09 14:03:57
https://api.github.com/repos/hyperledger/burrow/issues/412,https://api.github.com/repos/hyperledger/burrow/issues/comments/263687100,https://github.com/hyperledger/burrow/pull/412#issuecomment-263687100,benjaminbollen,"@silasdavis I started using a feature branch to allow for more flexibility for discussion, rather than requesting a merge into develop straight away.",2016-11-29 20:21:05,2016-11-29 20:21:05
https://api.github.com/repos/hyperledger/burrow/issues/412,https://api.github.com/repos/hyperledger/burrow/issues/comments/264429214,https://github.com/hyperledger/burrow/pull/412#issuecomment-264429214,benjaminbollen,:smiley_cat: ,2016-12-02 11:00:38,2016-12-02 11:00:38
https://api.github.com/repos/hyperledger/burrow/issues/411,https://api.github.com/repos/hyperledger/burrow/issues/comments/263871999,https://github.com/hyperledger/burrow/issues/411#issuecomment-263871999,silasdavis,"This is fine for now, and we do need to share a common definition of build tasks but we should consider switching to something more modern before we add much complexity to a make file. Scons (http://scons.org/) can be shipped with repository and only requires that python is installed locally.",2016-11-30 13:22:53,2016-11-30 13:22:53
https://api.github.com/repos/hyperledger/burrow/issues/409,https://api.github.com/repos/hyperledger/burrow/issues/comments/263259935,https://github.com/hyperledger/burrow/pull/409#issuecomment-263259935,benjaminbollen,LGTM; open discussions on commit messages and branch naming,2016-11-28 12:32:23,2016-11-28 12:32:23
https://api.github.com/repos/hyperledger/burrow/issues/406,https://api.github.com/repos/hyperledger/burrow/issues/comments/398023852,https://github.com/hyperledger/burrow/issues/406#issuecomment-398023852,silasdavis,"This PR: https://github.com/hyperledger/burrow/pull/797 introduces better modularity. Not all of the execution logic is unit tested, but closing in favour of more specific tickets.",2018-06-18 11:28:14,2018-06-18 11:28:14
https://api.github.com/repos/hyperledger/burrow/issues/395,https://api.github.com/repos/hyperledger/burrow/issues/comments/303857309,https://github.com/hyperledger/burrow/issues/395#issuecomment-303857309,silasdavis,Replace with sink functionality,2017-05-24 21:29:48,2017-05-24 21:29:48
https://api.github.com/repos/hyperledger/burrow/issues/388,https://api.github.com/repos/hyperledger/burrow/issues/comments/263929904,https://github.com/hyperledger/burrow/issues/388#issuecomment-263929904,silasdavis,"I am dismissing these candidates:

- https://github.com/op/go-logging
Some nice touches, but ultimately a one-man-show (with some outstanding issues that worry me a bit), with some twiddles that seem nice but could be achieved through more simple composition (instead of AddModuleLevel etc just create a new logger) 

- https://github.com/uber-go/zap
Very fast, and with uber backing it but lacks flexible handlers (https://www.reddit.com/r/golang/comments/4k2k84/zap_fast_structured_leveled_logging_by_uber/) and no syslog support yet. 

- https://github.com/golang/glog
Too simplistic, not structured.

My Shortlist is now:

- https://github.com/inconshreveable/log15
- https://github.com/Sirupsen/logrus
- https://github.com/go-kit/kit/tree/master/log

log15 and logrus seem to be the premier choices for structured logging in go with some maturity (this _is_ go though...). They both allow flexibility with handlers, structured logging, and levels.

One of the maintainers of log15 seems go-kit log as the spiritual successor to log15
",2016-11-30 16:59:58,2016-11-30 16:59:58
https://api.github.com/repos/hyperledger/burrow/issues/388,https://api.github.com/repos/hyperledger/burrow/issues/comments/263935280,https://github.com/hyperledger/burrow/issues/388#issuecomment-263935280,silasdavis,"logrus has the highest engagement on github in terms of contributors, commits, and so on. It has many built-in hooks. Log entries refer to a Logger, it seems to have a messier story around routing logs.

go-kit log has a cleaner interface and some thought has been given on how to establish contexts,

It may be possible to combine the logging interface of go-kit log with some of the functionality of logrus. I am planning to wrap all logging calls through our own pinhole logger, so I may be able to hedge my bets here.",2016-11-30 17:19:09,2016-11-30 17:19:09
https://api.github.com/repos/hyperledger/burrow/issues/388,https://api.github.com/repos/hyperledger/burrow/issues/comments/263935641,https://github.com/hyperledger/burrow/issues/388#issuecomment-263935641,VoR0220,Sounds awesome. ,2016-11-30 17:20:18,2016-11-30 17:20:18
https://api.github.com/repos/hyperledger/burrow/issues/386,https://api.github.com/repos/hyperledger/burrow/issues/comments/263009749,https://github.com/hyperledger/burrow/issues/386#issuecomment-263009749,silasdavis,Suggest we start with a fixed size exponentially grow it as needed. Can't think of any reason why not to...,2016-11-25 18:41:57,2016-11-25 18:41:57
https://api.github.com/repos/hyperledger/burrow/issues/386,https://api.github.com/repos/hyperledger/burrow/issues/comments/400231429,https://github.com/hyperledger/burrow/issues/386#issuecomment-400231429,compleatang,@silasdavis do we still want to do this?,2018-06-26 08:49:00,2018-06-26 08:49:00
https://api.github.com/repos/hyperledger/burrow/issues/386,https://api.github.com/repos/hyperledger/burrow/issues/comments/413540069,https://github.com/hyperledger/burrow/issues/386#issuecomment-413540069,silasdavis,yeah currently we panic if we run out of stack there is also a panic in stack.go we should clear up. Easy task.,2018-08-16 13:10:59,2018-08-16 13:10:59
https://api.github.com/repos/hyperledger/burrow/issues/385,https://api.github.com/repos/hyperledger/burrow/issues/comments/261463158,https://github.com/hyperledger/burrow/pull/385#issuecomment-261463158,benjaminbollen,":smile_cat: 
",2016-11-18 07:02:28,2016-11-18 07:02:28
https://api.github.com/repos/hyperledger/burrow/issues/383,https://api.github.com/repos/hyperledger/burrow/issues/comments/278306098,https://github.com/hyperledger/burrow/pull/383#issuecomment-278306098,silasdavis,@benjaminbollen I'm closing this PR just because I'm not sure its the subject of active collaboration. If you disagree please reopen,2017-02-08 11:46:05,2017-02-08 11:46:05
https://api.github.com/repos/hyperledger/burrow/issues/382,https://api.github.com/repos/hyperledger/burrow/issues/comments/263878465,https://github.com/hyperledger/burrow/issues/382#issuecomment-263878465,zramsay,should this a feature/bug issue in cli?,2016-11-30 13:53:36,2016-11-30 13:53:36
https://api.github.com/repos/hyperledger/burrow/issues/379,https://api.github.com/repos/hyperledger/burrow/issues/comments/260467354,https://github.com/hyperledger/burrow/pull/379#issuecomment-260467354,VoR0220,"LGTM
",2016-11-14 21:25:05,2016-11-14 21:25:05
https://api.github.com/repos/hyperledger/burrow/issues/378,https://api.github.com/repos/hyperledger/burrow/issues/comments/260458388,https://github.com/hyperledger/burrow/issues/378#issuecomment-260458388,zramsay,"`confirmation.Error` not type `%s` ... flip to `%v` & it should throw. see also a few lines above
https://github.com/eris-ltd/eris-db/blob/master/client/core/transaction_factory.go#L311
",2016-11-14 20:50:12,2016-11-14 20:50:12
https://api.github.com/repos/hyperledger/burrow/issues/377,https://api.github.com/repos/hyperledger/burrow/issues/comments/260354341,https://github.com/hyperledger/burrow/issues/377#issuecomment-260354341,benjaminbollen,"LGTM
",2016-11-14 14:49:57,2016-11-14 14:49:57
https://api.github.com/repos/hyperledger/burrow/issues/374,https://api.github.com/repos/hyperledger/burrow/issues/comments/263007184,https://github.com/hyperledger/burrow/issues/374#issuecomment-263007184,silasdavis,"@zramsay do you literally need every piece of functionality there? Could you give me an overview of the things you need to be able to do? I would just like to be able to understand the bigger picture and see if there if we can improve upon how we encapsulate this functionality and implement.

In particular I've got one eye on how we might want to provide this functionality server-side in a future release.",2016-11-25 18:16:14,2016-11-25 18:16:14
https://api.github.com/repos/hyperledger/burrow/issues/374,https://api.github.com/repos/hyperledger/burrow/issues/comments/263008266,https://github.com/hyperledger/burrow/issues/374#issuecomment-263008266,zramsay,nope. the `mintgen random` i pulled out of https://github.com/eris-ltd/eris-db/pull/375/files. ,2016-11-25 18:27:09,2016-11-25 18:27:09
https://api.github.com/repos/hyperledger/burrow/issues/374,https://api.github.com/repos/hyperledger/burrow/issues/comments/263008350,https://github.com/hyperledger/burrow/issues/374#issuecomment-263008350,zramsay,note that the `feature_consolidate` branch with mintgen is still a WIP,2016-11-25 18:27:52,2016-11-25 18:27:52
https://api.github.com/repos/hyperledger/burrow/issues/374,https://api.github.com/repos/hyperledger/burrow/issues/comments/263009830,https://github.com/hyperledger/burrow/issues/374#issuecomment-263009830,zramsay,"`mintgen known` takes the filepaths of two csv's (accounts and validators) along with the chainName/chainID and create the genesis file for a chain from known accounts. This functionality was exposed via cli/cm using a roundabout `docker exec` ... but with cm moving into cli, we need another way to access this functionality. cli will be importing some edb packages and can access the function called by `eris-client genesis` (can be renamed) to perform this.",2016-11-25 18:42:51,2016-11-25 18:42:56
https://api.github.com/repos/hyperledger/burrow/issues/374,https://api.github.com/repos/hyperledger/burrow/issues/comments/263045590,https://github.com/hyperledger/burrow/issues/374#issuecomment-263045590,zramsay,"the functionality required by cli is here:
https://github.com/eris-ltd/eris-cli/pull/1072/commits/e3bc509a73cf534a9d8fedf7992f9fce8ae48675
and in edb here (coming from #375):
https://github.com/eris-ltd/eris-db/blob/feature_consolidate/genesis/make_genesis_file.go#L23",2016-11-26 05:38:37,2016-11-26 05:38:37
https://api.github.com/repos/hyperledger/burrow/issues/374,https://api.github.com/repos/hyperledger/burrow/issues/comments/284125432,https://github.com/hyperledger/burrow/issues/374#issuecomment-284125432,zramsay,also done.,2017-03-04 04:04:19,2017-03-04 04:04:19
https://api.github.com/repos/hyperledger/burrow/issues/373,https://api.github.com/repos/hyperledger/burrow/issues/comments/260053703,https://github.com/hyperledger/burrow/issues/373#issuecomment-260053703,VoR0220,"Why are you calling it an event? 
",2016-11-11 20:56:44,2016-11-11 20:56:44
https://api.github.com/repos/hyperledger/burrow/issues/373,https://api.github.com/repos/hyperledger/burrow/issues/comments/260071989,https://github.com/hyperledger/burrow/issues/373#issuecomment-260071989,benjaminbollen,"definition of event string:
https://github.com/eris-ltd/eris-db/blob/master/txs/events.go#L17
event fired:
https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/evm/vm.go#L127
",2016-11-11 22:37:49,2016-11-11 22:37:49
https://api.github.com/repos/hyperledger/burrow/issues/373,https://api.github.com/repos/hyperledger/burrow/issues/comments/260075837,https://github.com/hyperledger/burrow/issues/373#issuecomment-260075837,VoR0220,"How do you guys handle Solidity logs/events then? I'm trying to understand because it might come into play. 
",2016-11-11 23:02:56,2016-11-11 23:02:56
https://api.github.com/repos/hyperledger/burrow/issues/373,https://api.github.com/repos/hyperledger/burrow/issues/comments/278956059,https://github.com/hyperledger/burrow/issues/373#issuecomment-278956059,silasdavis,Currently commented: https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/evm/vm.go#L161,2017-02-10 14:34:51,2017-02-10 14:36:26
https://api.github.com/repos/hyperledger/burrow/issues/373,https://api.github.com/repos/hyperledger/burrow/issues/comments/400231194,https://github.com/hyperledger/burrow/issues/373#issuecomment-400231194,compleatang,@silasdavis is this still a viable issue?,2018-06-26 08:48:18,2018-06-26 08:48:18
https://api.github.com/repos/hyperledger/burrow/issues/373,https://api.github.com/repos/hyperledger/burrow/issues/comments/437142941,https://github.com/hyperledger/burrow/issues/373#issuecomment-437142941,silasdavis,Fixed: https://github.com/hyperledger/burrow/commit/d083601704ab00da2ecb2f2026a0f3144e116cb9#diff-1fbd8eda80acb6c6785a586018fd65ffR173,2018-11-08 20:23:53,2018-11-08 20:23:53
https://api.github.com/repos/hyperledger/burrow/issues/372,https://api.github.com/repos/hyperledger/burrow/issues/comments/259935558,https://github.com/hyperledger/burrow/pull/372#issuecomment-259935558,silasdavis,"It's dead Jim. Yeah should have own event. LGTM
",2016-11-11 11:10:53,2016-11-11 11:10:53
https://api.github.com/repos/hyperledger/burrow/issues/371,https://api.github.com/repos/hyperledger/burrow/issues/comments/259847679,https://github.com/hyperledger/burrow/issues/371#issuecomment-259847679,benjaminbollen,"hotfixed and pushed on `quay.io/eris/db:0.12.1`
",2016-11-11 00:22:10,2016-11-11 00:22:10
https://api.github.com/repos/hyperledger/burrow/issues/371,https://api.github.com/repos/hyperledger/burrow/issues/comments/259954948,https://github.com/hyperledger/burrow/issues/371#issuecomment-259954948,benjaminbollen,"confirmed working on 0.12.1 and better fix on 0.16.0
",2016-11-11 13:15:57,2016-11-11 13:15:57
https://api.github.com/repos/hyperledger/burrow/issues/370,https://api.github.com/repos/hyperledger/burrow/issues/comments/263006680,https://github.com/hyperledger/burrow/issues/370#issuecomment-263006680,silasdavis,"@benjaminbollen tempted to close this, since I think it will probably be superseded by RPC framework, but maybe worth a fix before then, or maybe we're going to be sticking with this manner of integration test for a while and the attendant timing issues? What do you think?",2016-11-25 18:10:41,2016-11-25 18:10:41
https://api.github.com/repos/hyperledger/burrow/issues/370,https://api.github.com/repos/hyperledger/burrow/issues/comments/380596673,https://github.com/hyperledger/burrow/issues/370#issuecomment-380596673,compleatang,Completely changed. Closing.,2018-04-11 21:09:51,2018-04-11 21:09:51
https://api.github.com/repos/hyperledger/burrow/issues/368,https://api.github.com/repos/hyperledger/burrow/issues/comments/260302118,https://github.com/hyperledger/burrow/pull/368#issuecomment-260302118,silasdavis,"So if master is no longer our release branch, what is master now for? Will it hold our current most recent release branch, with `release-major.minor` holding the latest patch versions for each release?
",2016-11-14 10:36:54,2016-11-14 10:37:58
https://api.github.com/repos/hyperledger/burrow/issues/368,https://api.github.com/repos/hyperledger/burrow/issues/comments/260313051,https://github.com/hyperledger/burrow/pull/368#issuecomment-260313051,benjaminbollen,"so the proposal is to offset the deployment cycle by one step from the development cycle; that way all repos can be on master; and that is then pushed out and ready for full network/soak testing, and after the completion of that, moving it to release, makes it the official release
",2016-11-14 11:33:00,2016-11-14 11:33:00
https://api.github.com/repos/hyperledger/burrow/issues/368,https://api.github.com/repos/hyperledger/burrow/issues/comments/260314148,https://github.com/hyperledger/burrow/pull/368#issuecomment-260314148,silasdavis,"When you say 'deployment cycle', do you mean deployment by Jenkins to testing environments, sounds like it, but that term is a little overloaded?
",2016-11-14 11:39:31,2016-11-14 11:39:31
https://api.github.com/repos/hyperledger/burrow/issues/368,https://api.github.com/repos/hyperledger/burrow/issues/comments/260314504,https://github.com/hyperledger/burrow/pull/368#issuecomment-260314504,benjaminbollen,"No, with deployment cycle I mean ""making the official release that is used by default by our users"".  It is true that we do not have the full deployment cycle, and perhaps I should call it ""release cycle"" instead.
",2016-11-14 11:41:40,2016-11-14 11:41:40
https://api.github.com/repos/hyperledger/burrow/issues/366,https://api.github.com/repos/hyperledger/burrow/issues/comments/258873631,https://github.com/hyperledger/burrow/issues/366#issuecomment-258873631,benjaminbollen,"annoying; I cherry picked the same commit, but of course that does not match up; so may close a. and b. and merge upwards instead to make the git-tree work nicer
",2016-11-07 15:52:36,2016-11-07 15:52:36
https://api.github.com/repos/hyperledger/burrow/issues/366,https://api.github.com/repos/hyperledger/burrow/issues/comments/258873631,https://github.com/hyperledger/burrow/issues/366#issuecomment-258873631,benjaminbollen,"annoying; I cherry picked the same commit, but of course that does not match up; so may close a. and b. and merge upwards instead to make the git-tree work nicer
",2016-11-07 15:52:36,2016-11-07 15:52:36
https://api.github.com/repos/hyperledger/burrow/issues/364,https://api.github.com/repos/hyperledger/burrow/issues/comments/258148382,https://github.com/hyperledger/burrow/pull/364#issuecomment-258148382,benjaminbollen,"This PR documents the 29 lagging commits of develop behind master, which are a remnant of the major rebase that occurred with 0.12.0-rc3.  With this knowledge we can branch of a clean develop branch for e-db after the 0.12.0 release
",2016-11-03 13:54:21,2016-11-03 13:54:21
https://api.github.com/repos/hyperledger/burrow/issues/364,https://api.github.com/repos/hyperledger/burrow/issues/comments/258150331,https://github.com/hyperledger/burrow/pull/364#issuecomment-258150331,benjaminbollen,"Apparently Github prefers to explicitly bring up-to-date the develop branch before we merge develop into master for 0.12.0 release;  So while this shows it is not necessary, we will default to doing it explicitly.
",2016-11-03 14:01:24,2016-11-03 14:01:24
https://api.github.com/repos/hyperledger/burrow/issues/363,https://api.github.com/repos/hyperledger/burrow/issues/comments/262816424,https://github.com/hyperledger/burrow/issues/363#issuecomment-262816424,silasdavis,"@benjaminbollen this isn't in a pipeline or epic, is it still live, is it done?",2016-11-24 16:50:43,2016-11-24 16:50:43
https://api.github.com/repos/hyperledger/burrow/issues/362,https://api.github.com/repos/hyperledger/burrow/issues/comments/257514405,https://github.com/hyperledger/burrow/issues/362#issuecomment-257514405,AFDudley,"The short answer is yes.
",2016-11-01 08:38:11,2016-11-01 08:38:11
https://api.github.com/repos/hyperledger/burrow/issues/362,https://api.github.com/repos/hyperledger/burrow/issues/comments/257517550,https://github.com/hyperledger/burrow/issues/362#issuecomment-257517550,apmilen,"Cool that's what I was hoping. Is there a timeline for the release of this feature?
",2016-11-01 08:57:39,2016-11-01 08:58:36
https://api.github.com/repos/hyperledger/burrow/issues/362,https://api.github.com/repos/hyperledger/burrow/issues/comments/257530895,https://github.com/hyperledger/burrow/issues/362#issuecomment-257530895,compleatang,"Hi @apmilen see issue #331. 

This ticket is asking for the same thing as is noted there so I'm going to close it here and you can follow along with our progress on the other ticket. 

#331 is currently slated for the second sprint of our next release series. So we should have it on develop branch in ~3-5 weeks and fully included in our 0.16.0 release (which will follow our 0.12.0 release coming this week)
",2016-11-01 10:12:27,2016-11-01 10:12:27
https://api.github.com/repos/hyperledger/burrow/issues/361,https://api.github.com/repos/hyperledger/burrow/issues/comments/257516561,https://github.com/hyperledger/burrow/issues/361#issuecomment-257516561,DrBAXA,"One more thing - this chain has just one validator.
",2016-11-01 08:51:28,2016-11-01 08:51:28
https://api.github.com/repos/hyperledger/burrow/issues/361,https://api.github.com/repos/hyperledger/burrow/issues/comments/258612050,https://github.com/hyperledger/burrow/issues/361#issuecomment-258612050,benjaminbollen,"Thanks @DrBAXA.  It's not clear to me, were you only querying empty balances and is your issue that on multithreading it returns empty string, or would you have expected also non-zero values returned?
",2016-11-05 13:37:26,2016-11-05 13:37:26
https://api.github.com/repos/hyperledger/burrow/issues/361,https://api.github.com/repos/hyperledger/burrow/issues/comments/258799623,https://github.com/hyperledger/burrow/issues/361#issuecomment-258799623,DrBAXA,"There is no differences if values is zero or not. This issue is reproduced with both cases. 
In any way empty string is not valid even for zero value.
",2016-11-07 10:28:59,2016-11-07 10:30:09
https://api.github.com/repos/hyperledger/burrow/issues/361,https://api.github.com/repos/hyperledger/burrow/issues/comments/259848322,https://github.com/hyperledger/burrow/issues/361#issuecomment-259848322,benjaminbollen,"at which endpoint do you make the calls? `chain:1337/rpc` or `chain:46657`?
",2016-11-11 00:26:20,2016-11-11 00:26:20
https://api.github.com/repos/hyperledger/burrow/issues/361,https://api.github.com/repos/hyperledger/burrow/issues/comments/260593220,https://github.com/hyperledger/burrow/issues/361#issuecomment-260593220,DrBAXA,"I use chain:1337/rpc and chain:1337/socketrpc. In both cases I got this issue
",2016-11-15 09:39:14,2016-11-15 09:39:14
https://api.github.com/repos/hyperledger/burrow/issues/361,https://api.github.com/repos/hyperledger/burrow/issues/comments/262817215,https://github.com/hyperledger/burrow/issues/361#issuecomment-262817215,silasdavis,"@DrBAXA thanks for this report. Is the incorrect response reliably repeatable each time you query from multiple threads or is it intermittent?

>I use own client implementation in Java

I don't know if this is something you can share, but I would be very interested to see it, or if you have any remarks about integrating. We currently consider binding against our RPC from other languages more involved that we would like, and your experience might inform our work in this direction.",2016-11-24 16:55:17,2016-11-24 16:55:17
https://api.github.com/repos/hyperledger/burrow/issues/361,https://api.github.com/repos/hyperledger/burrow/issues/comments/262938819,https://github.com/hyperledger/burrow/issues/361#issuecomment-262938819,DrBAXA,"When I use 20 calls in ```paralelStream``` it happens all time (from 1 to 10 responses is broken).
If there is less calls it happens time to time.
Code is [here](https://github.com/SoftJourn/eris-java-client) ",2016-11-25 11:38:18,2016-11-25 11:38:18
https://api.github.com/repos/hyperledger/burrow/issues/361,https://api.github.com/repos/hyperledger/burrow/issues/comments/393105340,https://github.com/hyperledger/burrow/issues/361#issuecomment-393105340,compleatang,"We have completely refactored the concurency and events system. Am closing this ticket for now, but if the issue rearises and a test case can be generated please reopen!",2018-05-30 10:05:14,2018-05-30 10:05:14
https://api.github.com/repos/hyperledger/burrow/issues/360,https://api.github.com/repos/hyperledger/burrow/issues/comments/284125521,https://github.com/hyperledger/burrow/issues/360#issuecomment-284125521,zramsay,duplicate of #407 which states `then enforce the presentation...`,2017-03-04 04:06:15,2017-03-04 04:06:15
https://api.github.com/repos/hyperledger/burrow/issues/359,https://api.github.com/repos/hyperledger/burrow/issues/comments/256898212,https://github.com/hyperledger/burrow/issues/359#issuecomment-256898212,prestonjbyrne,"revised language, second paragraph

// Eris is distributed WITHOUT ANY WARRANTY pursuant to
// the terms of the Gnu General Public Licence, version 3, including 
// (but not limited to) Clause 15 thereof.  See the text of the
// GNU General Public License, version 3 for full terms.
",2016-10-28 11:31:31,2016-10-28 11:31:54
https://api.github.com/repos/hyperledger/burrow/issues/359,https://api.github.com/repos/hyperledger/burrow/issues/comments/262817491,https://github.com/hyperledger/burrow/issues/359#issuecomment-262817491,silasdavis,Should be combined as item of work with: #360 ,2016-11-24 16:56:46,2016-11-24 16:56:46
https://api.github.com/repos/hyperledger/burrow/issues/359,https://api.github.com/repos/hyperledger/burrow/issues/comments/262818112,https://github.com/hyperledger/burrow/issues/359#issuecomment-262818112,silasdavis,"Do we really need to put our license on every file? What does this buy us? Might gut reaction is that it gets in the way of real human readable contents, and its absence doesn't make our license any less valid. Am I mistaken? @benjaminbollen @prestonjbyrne ",2016-11-24 17:00:33,2016-11-24 17:00:33
https://api.github.com/repos/hyperledger/burrow/issues/359,https://api.github.com/repos/hyperledger/burrow/issues/comments/270902204,https://github.com/hyperledger/burrow/issues/359#issuecomment-270902204,benjaminbollen,"I am under the impression that it is good practice to have the short header, because if a file gets copied in full, then by default that copyright header gets copied too.

Additionally, we have files that we have copied, or copied and modified from other open source projects.  The practice of a header allows to keep track of the origin of the copyright.  And when modified it allows for a place where it can be stated that this file is modified from the original.",2017-01-06 13:21:44,2017-01-06 13:30:54
https://api.github.com/repos/hyperledger/burrow/issues/359,https://api.github.com/repos/hyperledger/burrow/issues/comments/270903148,https://github.com/hyperledger/burrow/issues/359#issuecomment-270903148,benjaminbollen,"Update for 2017
```
// Copyright 2015-2017 Monax Industries (UK) Ltd.
// This file is part of the Eris platform (Eris)

// Eris is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Eris is distributed WITHOUT ANY WARRANTY pursuant to
// the terms of the Gnu General Public Licence, version 3, including
// (but not limited to) Clause 15 thereof. See the text of the
// GNU General Public License, version 3 for full terms.

// You should have received a copy of the GNU General Public License
// along with Eris.  If not, see <http://www.gnu.org/licenses/>.
```",2017-01-06 13:27:58,2017-01-06 13:27:58
https://api.github.com/repos/hyperledger/burrow/issues/359,https://api.github.com/repos/hyperledger/burrow/issues/comments/273463637,https://github.com/hyperledger/burrow/issues/359#issuecomment-273463637,benjaminbollen,"Update for Monax platform:
```
// Copyright 2015-2017 Monax Industries Limited.
// This file is part of the Monax platform (Monax)

// Monax is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Monax is distributed WITHOUT ANY WARRANTY pursuant to
// the terms of the Gnu General Public Licence, version 3, including
// (but not limited to) Clause 15 thereof. See the text of the
// GNU General Public License, version 3 for full terms.

// You should have received a copy of the GNU General Public License
// along with Monax.  If not, see <http://www.gnu.org/licenses/>.
```",2017-01-18 12:32:19,2017-01-18 15:24:24
https://api.github.com/repos/hyperledger/burrow/issues/359,https://api.github.com/repos/hyperledger/burrow/issues/comments/273493936,https://github.com/hyperledger/burrow/issues/359#issuecomment-273493936,prestonjbyrne,"We need to include the full GPLv3 licence with every repo for legal
technical reasons (putting people on notice of the terms, particularly
w/r/t liability).

Also the name of the company is ""Monax Industries Limited"" not ""Monax
Industries (UK) Ltd.""

On Wed, Jan 18, 2017 at 7:32 AM, Benjamin Bollen <notifications@github.com>
wrote:

> Update for Monax platform:
>
> // Copyright 2015-2017 Monax Industries (UK) Ltd.
> // This file is part of the Monax platform (Monax)
>
> // Monax is free software: you can redistribute it and/or modify
> // it under the terms of the GNU General Public License as published by
> // the Free Software Foundation, either version 3 of the License, or
> // (at your option) any later version.
>
> // Monax is distributed WITHOUT ANY WARRANTY pursuant to
> // the terms of the Gnu General Public Licence, version 3, including
> // (but not limited to) Clause 15 thereof. See the text of the
> // GNU General Public License, version 3 for full terms.
>
> // You should have received a copy of the GNU General Public License
> // along with Monax.  If not, see <http://www.gnu.org/licenses/>.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/eris-ltd/eris-db/issues/359#issuecomment-273463637>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AHZ2Fkod7H9xNit2Lb3OzQxaZsASiLUDks5rTgZTgaJpZM4KjUqd>
> .
>



-- 

Preston J. Byrne, Monax
COO & General Counsel
preston@monax.io

Site: https://monax.io
Twitter: @MonaxHQ <https://twitter.com/monaxHQ>, @prestonjbyrne
<https://twitter.com/prestonjbyrne>
Skype: prestonjbyrne
",2017-01-18 14:46:10,2017-01-18 14:46:10
https://api.github.com/repos/hyperledger/burrow/issues/359,https://api.github.com/repos/hyperledger/burrow/issues/comments/273505679,https://github.com/hyperledger/burrow/issues/359#issuecomment-273505679,benjaminbollen,"Corrected the header with remark;  the GPLv3 license should already be in every repository, but will check.

This phrase is correct and sufficient:
```
 // You should have received a copy of the GNU General Public License
 // along with Monax.  If not, see <http://www.gnu.org/licenses/>.
```",2017-01-18 15:25:43,2017-01-18 15:25:43
https://api.github.com/repos/hyperledger/burrow/issues/359,https://api.github.com/repos/hyperledger/burrow/issues/comments/273514145,https://github.com/hyperledger/burrow/issues/359#issuecomment-273514145,prestonjbyrne,"Rewrote header in full.
```
// Copyright 2015-2017 Monax Industries Limited.
// This file is part of the Monax platform (Monax)

// Monax is free software: you can use, redistribute it and/or modify
// it only under the terms of the GNU General Public License, version
// 3, as published by the Free Software Foundation.

// Monax is distributed WITHOUT ANY WARRANTY pursuant to
// the terms of the Gnu General Public Licence, version 3, including
// (but not limited to) Clause 15 thereof. See the text of the
// GNU General Public License, version 3 for full terms.

// You should have received a copy of the GNU General Public License,
// version 3, with Monax.  If not, see <http://www.gnu.org/licenses/>.
```",2017-01-18 15:54:04,2017-01-23 14:48:20
https://api.github.com/repos/hyperledger/burrow/issues/359,https://api.github.com/repos/hyperledger/burrow/issues/comments/284125463,https://github.com/hyperledger/burrow/issues/359#issuecomment-284125463,zramsay,not relevant since the re-licensing,2017-03-04 04:05:07,2017-03-04 04:05:07
https://api.github.com/repos/hyperledger/burrow/issues/358,https://api.github.com/repos/hyperledger/burrow/issues/comments/262818559,https://github.com/hyperledger/burrow/issues/358#issuecomment-262818559,silasdavis,"@NodeGuy So you are proposing that we make it explicit that we accept a 1-argument function call that itself is a dictionary?

This may be better subsumed into RPC discussion which will change much of this, but will leave open for now since it is broader than the particular JSON-RPC implementation we are using now (which will be scrapped)",2016-11-24 17:03:18,2016-11-24 17:03:18
https://api.github.com/repos/hyperledger/burrow/issues/358,https://api.github.com/repos/hyperledger/burrow/issues/comments/262822003,https://github.com/hyperledger/burrow/issues/358#issuecomment-262822003,NodeGuy,"Yes, that's exactly what I'm proposing.  That way the JSON-RPC layer will simply translate function calls abstractly (which is what it's designed for) rather than requiring special knowledge of the application as it does today.",2016-11-24 17:27:11,2016-11-24 17:27:11
https://api.github.com/repos/hyperledger/burrow/issues/357,https://api.github.com/repos/hyperledger/burrow/issues/comments/256210644,https://github.com/hyperledger/burrow/issues/357#issuecomment-256210644,VoR0220,"Is there something regarding hex encoding that we need to do regarding the native cryptographic functions? 
",2016-10-25 23:42:07,2016-10-25 23:42:07
https://api.github.com/repos/hyperledger/burrow/issues/357,https://api.github.com/repos/hyperledger/burrow/issues/comments/260344124,https://github.com/hyperledger/burrow/issues/357#issuecomment-260344124,silasdavis,"@VoR0220 please supply the command you are running to see this, and steps to reproduce.
",2016-11-14 14:11:00,2016-11-14 14:11:00
https://api.github.com/repos/hyperledger/burrow/issues/357,https://api.github.com/repos/hyperledger/burrow/issues/comments/260417618,https://github.com/hyperledger/burrow/issues/357#issuecomment-260417618,VoR0220,"Let me rebase the branch and then push it up and link it.
",2016-11-14 18:23:33,2016-11-14 18:23:33
https://api.github.com/repos/hyperledger/burrow/issues/357,https://api.github.com/repos/hyperledger/burrow/issues/comments/260417994,https://github.com/hyperledger/burrow/issues/357#issuecomment-260417994,VoR0220,"So here is the directory in the tests, you can simply run the test.sh script for app38, and you'll be able to reproduce the problem there. https://github.com/eris-ltd/eris-pm/tree/cryptoTests/tests/fixtures/app38-cryptographic_functions
",2016-11-14 18:24:56,2016-11-14 18:24:56
https://api.github.com/repos/hyperledger/burrow/issues/357,https://api.github.com/repos/hyperledger/burrow/issues/comments/260428741,https://github.com/hyperledger/burrow/issues/357#issuecomment-260428741,benjaminbollen,"this is a sympton of not having armored types.  I can pick this up
",2016-11-14 19:03:16,2016-11-14 19:03:16
https://api.github.com/repos/hyperledger/burrow/issues/357,https://api.github.com/repos/hyperledger/burrow/issues/comments/260435182,https://github.com/hyperledger/burrow/issues/357#issuecomment-260435182,VoR0220,"Armored types? 
",2016-11-14 19:25:24,2016-11-14 19:25:24
https://api.github.com/repos/hyperledger/burrow/issues/357,https://api.github.com/repos/hyperledger/burrow/issues/comments/262823993,https://github.com/hyperledger/burrow/issues/357#issuecomment-262823993,silasdavis,"@VoR0220 Looks like some hashes are being output in a base64 encoding rather than an armoured alphanumeric encoding (like ssh uses for keys).

@benjaminbollen assume you do mean an armoured text encoding? Is it just a case of adding a `func (*Hash) String() string` method somewhere appropriate or more involved, could you detail in case someone else picks it up?",2016-11-24 17:42:38,2016-11-24 17:44:07
https://api.github.com/repos/hyperledger/burrow/issues/357,https://api.github.com/repos/hyperledger/burrow/issues/comments/262834437,https://github.com/hyperledger/burrow/issues/357#issuecomment-262834437,VoR0220,Got it,2016-11-24 19:19:31,2016-11-24 19:19:31
https://api.github.com/repos/hyperledger/burrow/issues/355,https://api.github.com/repos/hyperledger/burrow/issues/comments/255777656,https://github.com/hyperledger/burrow/issues/355#issuecomment-255777656,silasdavis,"@NodeGuy if you can just give an example of the bad behaviour that will be useful
",2016-10-24 15:40:03,2016-10-24 15:40:03
https://api.github.com/repos/hyperledger/burrow/issues/355,https://api.github.com/repos/hyperledger/burrow/issues/comments/256780099,https://github.com/hyperledger/burrow/issues/355#issuecomment-256780099,NodeGuy,"Here's a test in JavaScript:

``` JavaScript
'use strict'

const test = require('../../lib/test')

const source = `
  contract Contract {
      event Event();

      function emit() {
          Event();
      }
  }
`

it('listens to an event from a contract', function (done) {
  this.timeout(60 * 1000)

  test.newContractManager('blockchain', {protocol: 'ws:'}).then((manager) =>
    test.compile(manager, source, 'Contract').then((contract) => {
      contract.Event.once((error, event) => {
        if (error) {
          throw error
        } else {
          console.log('Received event', JSON.stringify(event, null, 2))
          done()
        }
      })

      contract.emit()
    })
    .catch(done)
  )
})
```

It produces the following conversation:

``` JSON
{
  ""method"": ""erisdb.transactAndHold"",
  ""params"": {
    ""priv_key"": ""DE3211635E7C4C4A74B1582007A26D7ABCF41FA06254794BC8180F030888903B1E67B62D6EC2AB1BAFB4994A7D31A5DE2C1130797E833403005A382DC5E576E0"",
    ""address"": """",
    ""data"": ""606060405260448060106000396000f3606060405260e060020a60003504633bdab8bf8114601a575b005b60187f57050ab73f6b9ebdd9f76b8d4997793f48cf956e965ee070551b9ca0bb71584e60006060a156"",
    ""gas_limit"": 1000000,
    ""fee"": 0
  },
  ""jsonrpc"": ""2.0"",
  ""id"": ""1""
}

{
  ""result"": {
    ""call_data"": {
      ""caller"": ""6BA62510023D393FF5DD809AAD31C7A02337BA83"",
      ""callee"": ""208F9EBFA2B7FE89D8D3F60B6143140165C333FE"",
      ""data"": ""606060405260448060106000396000F3606060405260E060020A60003504633BDAB8BF8114601A575B005B60187F57050AB73F6B9EBDD9F76B8D4997793F48CF956E965EE070551B9CA0BB71584E60006060A156"",
      ""value"": 1,
      ""gas"": 999985
    },
    ""origin"": ""6BA62510023D393FF5DD809AAD31C7A02337BA83"",
    ""tx_id"": ""793A2FE9D69F969303860EE1BE1B49938A586591"",
    ""return"": ""606060405260E060020A60003504633BDAB8BF8114601A575B005B60187F57050AB73F6B9EBDD9F76B8D4997793F48CF956E965EE070551B9CA0BB71584E60006060A156"",
    ""exception"": """"
  },
  ""error"": null,
  ""id"": ""1"",
  ""jsonrpc"": ""2.0""
}

{
  ""method"": ""erisdb.eventSubscribe"",
  ""params"": {
    ""event_id"": ""Log/208F9EBFA2B7FE89D8D3F60B6143140165C333FE""
  },
  ""jsonrpc"": ""2.0"",
  ""id"": ""2""
}

{
  ""method"": ""erisdb.transactAndHold"",
  ""params"": {
    ""priv_key"": ""DE3211635E7C4C4A74B1582007A26D7ABCF41FA06254794BC8180F030888903B1E67B62D6EC2AB1BAFB4994A7D31A5DE2C1130797E833403005A382DC5E576E0"",
    ""address"": ""208F9EBFA2B7FE89D8D3F60B6143140165C333FE"",
    ""data"": ""3bdab8bf"",
    ""gas_limit"": 1000000,
    ""fee"": 0
  },
  ""jsonrpc"": ""2.0"",
  ""id"": ""3""
}

{
  ""result"": {
    ""sub_id"": ""B920F32538427B24F8B654C8F95B07E38BFC06FB68AC4E500017EA5CAE0E078F""
  },
  ""error"": null,
  ""id"": ""2"",
  ""jsonrpc"": ""2.0""
}

{
  ""result"": {
    ""address"": ""000000000000000000000000208F9EBFA2B7FE89D8D3F60B6143140165C333FE"",
    ""topics"": [
      ""57050AB73F6B9EBDD9F76B8D4997793F48CF956E965EE070551B9CA0BB71584E""
    ],
    ""data"": """",
    ""height"": 3
  },
  ""error"": null,
  ""id"": ""B920F32538427B24F8B654C8F95B07E38BFC06FB68AC4E500017EA5CAE0E078F"",
  ""jsonrpc"": ""2.0""
}
```

The last Response Object has an `id` of `B920F32538427B24F8B654C8F95B07E38BFC06FB68AC4E500017EA5CAE0E078F` which, according to the spec, `MUST be the same as the value of the id member in the Request Object` but as you can see it was never used in a Request Object.
",2016-10-27 21:50:16,2016-10-27 21:50:16
https://api.github.com/repos/hyperledger/burrow/issues/355,https://api.github.com/repos/hyperledger/burrow/issues/comments/262824490,https://github.com/hyperledger/burrow/issues/355#issuecomment-262824490,silasdavis,"ah I see, yes looks like that's wrong use of id according to the spec. I am closing this assuming it causes no functional problems now (let me know), because we will use a compliant implementation.",2016-11-24 17:46:41,2016-11-24 17:46:41
https://api.github.com/repos/hyperledger/burrow/issues/355,https://api.github.com/repos/hyperledger/burrow/issues/comments/306343655,https://github.com/hyperledger/burrow/issues/355#issuecomment-306343655,mkhanal,"Do we have a solution for this yet ?

monax/legacy-contracts version : 0.16.8


If I try to create a contract instance with 'ws' protocol, I get this error

```
Error: WebSocket is disabled until Burrow complies with JSON-RPC.  See: https://github.com/hyperledger/burrow/issues/355
    at createInstance.method (~/project/node_modules/@monax/legacy-db/index.js:52:13)
```

If I don't use websocket connection, my event subscription connections keep dropping and I get

```
Burrow error:  Call of method ""eventPoll"" with parameters { sub_id: '0A05B7FE36BE6017B94AAAFA5588B8E57DA7C7F55CB7E637A91BA372B5423747' } responded with ""Subscription not active. ID: 0A05B7FE36BE6017B94AAAFA5588B8E57DA7C7F55CB7E637A91BA372B5423747"".
0|project | caught error on handling TransferCompleted event
```

Basically stuck not being able to use any event listening capabilities in Moanx.
",2017-06-06 00:00:08,2017-06-06 00:00:08
https://api.github.com/repos/hyperledger/burrow/issues/354,https://api.github.com/repos/hyperledger/burrow/issues/comments/255380385,https://github.com/hyperledger/burrow/issues/354#issuecomment-255380385,tmuratore,"I don't know if this will help but i'm often having the same issue, i dumped my chains logs in a [gist](https://gist.github.com/ohhopi/197a8cf3b741f1c6d4be5af7322e4179).

A bit of context : 
- The chain i'm using has 6 .js files (using eris-contracts) all running simultaneously. 
- They are all listening to an ""opening"" event from a contract and all transact pretty much at the same time.
- Once they are all done transacting, the contract sends another event, prompting the contracts to transact once again and wait for another round.
- This process is repeated 6 times.
- The chain usually crashes after 3 or 4 rounds.
",2016-10-21 13:43:23,2016-10-21 13:43:23
https://api.github.com/repos/hyperledger/burrow/issues/354,https://api.github.com/repos/hyperledger/burrow/issues/comments/255389152,https://github.com/hyperledger/burrow/issues/354#issuecomment-255389152,benjaminbollen,"Thanks for reproduction details!
@ohhopi Is this a bug you've experienced on 0.11.4 (up to 0.12.0-rc2) or is it new since 0.12.0-rc3
",2016-10-21 14:17:18,2016-10-21 14:17:36
https://api.github.com/repos/hyperledger/burrow/issues/354,https://api.github.com/repos/hyperledger/burrow/issues/comments/255390091,https://github.com/hyperledger/burrow/issues/354#issuecomment-255390091,tmuratore,"@benjaminbollen I had the ""fatal error: concurrent map writes"" issue in 0.11.4 and thought it was fixed in 0.12.0-rc3.
",2016-10-21 14:20:57,2016-10-21 14:20:57
https://api.github.com/repos/hyperledger/burrow/issues/354,https://api.github.com/repos/hyperledger/burrow/issues/comments/255395023,https://github.com/hyperledger/burrow/issues/354#issuecomment-255395023,benjaminbollen,"clearly it has not been fixed (sufficiently) but it helps to know this relates to work done before.  Very useful;  do you have a skeleton to reproduce?  (js / solidity files; if not I can build it myself as part of the bug)
",2016-10-21 14:39:12,2016-10-21 14:39:12
https://api.github.com/repos/hyperledger/burrow/issues/354,https://api.github.com/repos/hyperledger/burrow/issues/comments/256259430,https://github.com/hyperledger/burrow/issues/354#issuecomment-256259430,Quiark,"We were also seeing this crash after using the chain for a long time (sending tx and stuff). Looks like the map is not properly protected for concurrent access.
",2016-10-26 06:20:21,2016-10-26 06:20:21
https://api.github.com/repos/hyperledger/burrow/issues/354,https://api.github.com/repos/hyperledger/burrow/issues/comments/379505574,https://github.com/hyperledger/burrow/issues/354#issuecomment-379505574,silasdavis,completely rewritten,2018-04-07 23:07:39,2018-04-07 23:07:39
https://api.github.com/repos/hyperledger/burrow/issues/352,https://api.github.com/repos/hyperledger/burrow/issues/comments/257453949,https://github.com/hyperledger/burrow/issues/352#issuecomment-257453949,j-h-scheufen,"@silasdavis Can you provide an idea when this problem will be tackled? It's currently preventing us from having 100% of our tests run in CircleCI.
It is reproducible now even without explicitly exporting/importing keys, but only via instantiating a chain from a pre-made config using `--init-dir`.
See branch https://github.com/eris-ltd/eris-contract-bundles/tree/88-library-refactoring
Run: `tests/test.sh`
",2016-10-31 23:53:59,2016-10-31 23:53:59
https://api.github.com/repos/hyperledger/burrow/issues/352,https://api.github.com/repos/hyperledger/burrow/issues/comments/259497979,https://github.com/hyperledger/burrow/issues/352#issuecomment-259497979,silasdavis,"@j-h-scheufen it would be helpful if you could provide a more isolated test that clearly demonstrates which part of the system is failing. You are better placed than me to follow the logic of your tests. I am looking into an angle that it may be related to a mismatch in chain name in the genesis and that which is used to start the chain and I will test that when I get the opportunity.
",2016-11-09 19:08:39,2016-11-09 19:08:39
https://api.github.com/repos/hyperledger/burrow/issues/352,https://api.github.com/repos/hyperledger/burrow/issues/comments/265364592,https://github.com/hyperledger/burrow/issues/352#issuecomment-265364592,j-h-scheufen,"@benjaminbollen I'm using this ticket to describe the logic of the test.sh script for purposes of recreating the script in a simpler version.

1. Start a new chain from a config in a directory in the repo (/test/chain/bundles_test-full-000)
2. Loop through all ""bundle"" directories under /src/*
3. For each encountered epm.yaml file, run it with `eris pkgs do` (on the chain started under 1. and using the 'full' account) and collect the result (pass|fail)
4. Print final report for all run tests
5. clean up (remove the chain from 1., stop services, etc.)

FYI: Step number 3. above is intended to be more complex by having more than one epm.yaml per bundle stored in subdirectories under $bundle-dir/test/fixtures/appXY/... However, this is currently blocked by https://github.com/eris-ltd/eris-cli/issues/904",2016-12-07 06:10:24,2016-12-07 06:10:59
https://api.github.com/repos/hyperledger/burrow/issues/352,https://api.github.com/repos/hyperledger/burrow/issues/comments/284125894,https://github.com/hyperledger/burrow/issues/352#issuecomment-284125894,zramsay,replace by https://github.com/eris-ltd/eris/issues/1133 which is the real issue,2017-03-04 04:15:10,2017-03-04 04:15:10
https://api.github.com/repos/hyperledger/burrow/issues/350,https://api.github.com/repos/hyperledger/burrow/issues/comments/263005970,https://github.com/hyperledger/burrow/issues/350#issuecomment-263005970,silasdavis,"@fabcan please do share what you have it could be a useful reference point.

As I mentioned in a reply to #348 we are planning to move to a unified RPC implemented in a widely used well maintained framework. We will want it to support some form of self-description and service discovery logic.",2016-11-25 18:03:47,2016-11-25 18:03:47
https://api.github.com/repos/hyperledger/burrow/issues/350,https://api.github.com/repos/hyperledger/burrow/issues/comments/263233794,https://github.com/hyperledger/burrow/issues/350#issuecomment-263233794,fcanevar,"Hi @silasdavis , it's good to ear back from you! I attach the generated application.wadl and xsd0.xsd files, I used Jersey based on a server stub that I created in Java, so they could be a starting point, but nothing more.

[Eris.zip](https://github.com/eris-ltd/eris-db/files/615959/Eris.zip)",2016-11-28 10:18:13,2016-11-28 10:18:13
https://api.github.com/repos/hyperledger/burrow/issues/350,https://api.github.com/repos/hyperledger/burrow/issues/comments/263254889,https://github.com/hyperledger/burrow/issues/350#issuecomment-263254889,fcanevar,"I thought on that, it would be even better to integrate your services with swagger http://swagger.io/

In particular for GO : http://swagger.io/open-source-integrations/#go-7",2016-11-28 12:06:00,2016-11-28 13:22:46
https://api.github.com/repos/hyperledger/burrow/issues/350,https://api.github.com/repos/hyperledger/burrow/issues/comments/277002913,https://github.com/hyperledger/burrow/issues/350#issuecomment-277002913,fabcan,Maybe you could even leverage https://github.com/web3j/web3j,2017-02-02 16:15:39,2017-02-02 16:15:39
https://api.github.com/repos/hyperledger/burrow/issues/350,https://api.github.com/repos/hyperledger/burrow/issues/comments/393110633,https://github.com/hyperledger/burrow/issues/350#issuecomment-393110633,compleatang,closing for now. we can revisit this later but our RPC implementation is much better organized now.,2018-05-30 10:23:51,2018-05-30 10:23:51
https://api.github.com/repos/hyperledger/burrow/issues/349,https://api.github.com/repos/hyperledger/burrow/issues/comments/254567566,https://github.com/hyperledger/burrow/pull/349#issuecomment-254567566,benjaminbollen,"restarted the build with #351 merged in
",2016-10-18 16:44:59,2016-10-18 16:44:59
https://api.github.com/repos/hyperledger/burrow/issues/348,https://api.github.com/repos/hyperledger/burrow/issues/comments/263005470,https://github.com/hyperledger/burrow/issues/348#issuecomment-263005470,silasdavis,"@fabcan thanks for this, it's a great point. We will be overhauling the RPC layers (and unifying), and at some point aspects of the event system so we will bear this in mind and try to avoid reserved keywords where possible.

Also as an aside, if any work of the work you have done in Java is public domain I'd be very interested to see what you are building to use that to help support bindings to languages other than javascript.",2016-11-25 17:59:18,2016-11-25 17:59:18
https://api.github.com/repos/hyperledger/burrow/issues/348,https://api.github.com/repos/hyperledger/burrow/issues/comments/380597276,https://github.com/hyperledger/burrow/issues/348#issuecomment-380597276,compleatang,Fixed,2018-04-11 21:12:15,2018-04-11 21:12:15
https://api.github.com/repos/hyperledger/burrow/issues/345,https://api.github.com/repos/hyperledger/burrow/issues/comments/253984845,https://github.com/hyperledger/burrow/issues/345#issuecomment-253984845,zramsay,"hi @harshasni007, please try the solutions in this issue:
https://github.com/eris-ltd/eris-cli/issues/990

If they do not work, comment in that issue and we'll track there.
",2016-10-15 13:39:19,2016-10-15 13:39:19
https://api.github.com/repos/hyperledger/burrow/issues/344,https://api.github.com/repos/hyperledger/burrow/issues/comments/254051510,https://github.com/hyperledger/burrow/issues/344#issuecomment-254051510,benjaminbollen,"you have to install the new dependency management tool (we have deprecated the use of Godeps); so run

`go get github.com/Masterminds/glide`

then in the eris-db folder run

`glide install`

then retry building the project with

`go build ./cmd/eris-db`
",2016-10-16 14:53:20,2016-10-16 14:53:20
https://api.github.com/repos/hyperledger/burrow/issues/344,https://api.github.com/repos/hyperledger/burrow/issues/comments/254051581,https://github.com/hyperledger/burrow/issues/344#issuecomment-254051581,benjaminbollen,"Let us know if that solves your problem;  I've opened a new issue to update the readme https://github.com/eris-ltd/eris-db/issues/346
",2016-10-16 14:54:56,2016-10-16 14:54:56
https://api.github.com/repos/hyperledger/burrow/issues/343,https://api.github.com/repos/hyperledger/burrow/issues/comments/254609610,https://github.com/hyperledger/burrow/issues/343#issuecomment-254609610,benjaminbollen,"we can build on the ""hack"" of #349 to pipe components log into a unified logger
",2016-10-18 19:14:39,2016-10-18 19:14:39
https://api.github.com/repos/hyperledger/burrow/issues/343,https://api.github.com/repos/hyperledger/burrow/issues/comments/256077977,https://github.com/hyperledger/burrow/issues/343#issuecomment-256077977,silasdavis,"We currently use a tendermint fork of log15 in some places and our own hard fork of logrus. Let's choose one (or something else), and depend on the upstream source rather than fork where possible. If we want to have some formatting or other consistency then I'd much prefer to factor that into some kind of composable unit.
",2016-10-25 15:56:51,2016-10-25 15:56:51
https://api.github.com/repos/hyperledger/burrow/issues/343,https://api.github.com/repos/hyperledger/burrow/issues/comments/284125570,https://github.com/hyperledger/burrow/issues/343#issuecomment-284125570,zramsay,done. specific logging issues are plentiful and well-documented,2017-03-04 04:07:24,2017-03-04 04:07:24
https://api.github.com/repos/hyperledger/burrow/issues/341,https://api.github.com/repos/hyperledger/burrow/issues/comments/263004978,https://github.com/hyperledger/burrow/issues/341#issuecomment-263004978,silasdavis,"@compleatang this might be clear for someone who knows their way around keys, but could you update the description to describe what is meant by locking/unlocking.",2016-11-25 17:54:56,2016-11-25 17:54:56
https://api.github.com/repos/hyperledger/burrow/issues/341,https://api.github.com/repos/hyperledger/burrow/issues/comments/263005624,https://github.com/hyperledger/burrow/issues/341#issuecomment-263005624,zramsay,"`eris-keys gen` without `--no-pass` will create a locked key (i.e., needs to be unlocked with password before being used). cli currently only generates unlocked keys (https://github.com/eris-ltd/eris-cli/blob/master/keys/keys.go#L83).

`eris-keys lock` will lock an unlocked key (not sure if possible if it wasn't created with the `--no-pass` flag) and `eris-keys unlock` will unlock it for use prior to signing. unlocking a key only last for some amount of time.",2016-11-25 18:00:37,2016-11-25 18:00:37
https://api.github.com/repos/hyperledger/burrow/issues/341,https://api.github.com/repos/hyperledger/burrow/issues/comments/263006167,https://github.com/hyperledger/burrow/issues/341#issuecomment-263006167,zramsay,see also https://github.com/eris-ltd/eris-cli/issues/794,2016-11-25 18:05:56,2016-11-25 18:05:56
https://api.github.com/repos/hyperledger/burrow/issues/341,https://api.github.com/repos/hyperledger/burrow/issues/comments/393117463,https://github.com/hyperledger/burrow/issues/341#issuecomment-393117463,compleatang,@seanyoung can we confirm that tests for this are getting added?,2018-05-30 10:51:04,2018-05-30 10:51:04
https://api.github.com/repos/hyperledger/burrow/issues/341,https://api.github.com/repos/hyperledger/burrow/issues/comments/393598009,https://github.com/hyperledger/burrow/issues/341#issuecomment-393598009,seanyoung,"See https://github.com/hyperledger/burrow/pull/776 
We have a bunch of tests covering the new key store which is now part of burrow (but can be run separately if needed). 
However,  the lock/unlock feature is removed. It was both broken and confusing.",2018-05-31 16:48:14,2018-05-31 16:48:14
https://api.github.com/repos/hyperledger/burrow/issues/339,https://api.github.com/repos/hyperledger/burrow/issues/comments/303859222,https://github.com/hyperledger/burrow/issues/339#issuecomment-303859222,silasdavis,Superceded,2017-05-24 21:38:26,2017-05-24 21:38:26
https://api.github.com/repos/hyperledger/burrow/issues/336,https://api.github.com/repos/hyperledger/burrow/issues/comments/284126001,https://github.com/hyperledger/burrow/issues/336#issuecomment-284126001,zramsay,duplicate of https://github.com/eris-ltd/eris/issues/795,2017-03-04 04:17:37,2017-03-04 04:17:37
https://api.github.com/repos/hyperledger/burrow/issues/335,https://api.github.com/repos/hyperledger/burrow/issues/comments/284125623,https://github.com/hyperledger/burrow/issues/335#issuecomment-284125623,zramsay,neither `Dockerfile` not `Dockerfile.deploy` has `mintkey`,2017-03-04 04:08:57,2017-03-04 04:08:57
https://api.github.com/repos/hyperledger/burrow/issues/334,https://api.github.com/repos/hyperledger/burrow/issues/comments/263002075,https://github.com/hyperledger/burrow/issues/334#issuecomment-263002075,silasdavis,"I need to learn some more crypto acronyms, but the intention of this ticket seems like a good one.",2016-11-25 17:29:23,2016-11-25 17:29:23
https://api.github.com/repos/hyperledger/burrow/issues/334,https://api.github.com/repos/hyperledger/burrow/issues/comments/373003578,https://github.com/hyperledger/burrow/issues/334#issuecomment-373003578,silasdavis,I am inclined to agree with @ebuchman here: https://github.com/tendermint/go-crypto/issues/13. Hoard also makes use of OpenPGP armor,2018-03-14 12:28:40,2018-03-14 12:28:40
https://api.github.com/repos/hyperledger/burrow/issues/333,https://api.github.com/repos/hyperledger/burrow/issues/comments/263001541,https://github.com/hyperledger/burrow/issues/333#issuecomment-263001541,silasdavis,"@ebuchman do you have any more thoughts on this?

It seems to me that risk here is if you accidentally mix two correlated sources of entropy. Then you may up with less entropy, take the extreme case `B = A ^ A` for some byte stream `A`, then `B = 0, 0, 0, ...`. If the sources are independent, then provided one is statistically random then xoring it with any independent source won't change the probability of the parity of a bit in the result, it will still be 0.5 for either 1 or 0.

The risk of accidentally correlated sources might be enough to make this a bad idea... Also aren't we relying on good PRNG sources, this seems like a rather ad hoc way of mitigating against a bad one...",2016-11-25 17:24:56,2016-11-25 17:26:19
https://api.github.com/repos/hyperledger/burrow/issues/333,https://api.github.com/repos/hyperledger/burrow/issues/comments/263097250,https://github.com/hyperledger/burrow/issues/333#issuecomment-263097250,ebuchman,Yup probably best to drop it and just use the OS's entropy. That's what eth did too.,2016-11-27 01:51:33,2016-11-27 01:51:33
https://api.github.com/repos/hyperledger/burrow/issues/333,https://api.github.com/repos/hyperledger/burrow/issues/comments/284125954,https://github.com/hyperledger/burrow/issues/333#issuecomment-284125954,zramsay,can't because of re-license :(,2017-03-04 04:16:23,2017-03-04 04:16:23
https://api.github.com/repos/hyperledger/burrow/issues/332,https://api.github.com/repos/hyperledger/burrow/issues/comments/284125917,https://github.com/hyperledger/burrow/issues/332#issuecomment-284125917,zramsay,hmmm,2017-03-04 04:15:38,2017-03-04 04:15:38
https://api.github.com/repos/hyperledger/burrow/issues/331,https://api.github.com/repos/hyperledger/burrow/issues/comments/258748238,https://github.com/hyperledger/burrow/issues/331#issuecomment-258748238,ryepdx,"Digging into using eris-db as the federated chain solution for an EVM-based project I've been working on. Will `eth_sendRawTransaction` be one of the implemented endpoints? We're using a client-side library to sign Ethereum transactions at present, and I noticed that the Tendermint transactions eris-db uses appear to have a different structure. Just wondering to what degree I should count on eris-db acting as a drop-in replacement for geth upon the completion of this issue.
",2016-11-07 05:06:16,2016-11-07 05:06:16
https://api.github.com/repos/hyperledger/burrow/issues/331,https://api.github.com/repos/hyperledger/burrow/issues/comments/258791814,https://github.com/hyperledger/burrow/issues/331#issuecomment-258791814,benjaminbollen,"Thanks @ryepdx! We will work in two steps: first detail and decide what the maximal support we can provide in this respect is. Note that we support the ethereum protocol, and as such solidity contracts can be compiled as normal and run against the eris chains.  However in order to provide some of the features unique to the eris chain (no proof of work and transaction finality; bonding of validators, etc) makes that these two fundamentally different chains (eth public chain vs eris) cannot be treated at all levels as the same.

We understand the value to our users to drive rpc differences down to an absolute minimum.  So we will take this first step very serious and look for the best compromise.  The second step is of course, implementing this proposal.  You can expect to follow this discussion in more detail this week on this and possible linked issues.

With respect to `eth_sendRawTransaction`, there are two ways we can consider this:
1. evaluate switching our transaction format over to the Ethereum formulation, under the condition that the additional transactions we require for, eg bonding, permissions etc have a clean extention on the Ethereum transaction format.
2. provide a new eris transaction type that wraps an Ethereum public chain transaction formulation.

Note that in both cases we will regardless need to look at providing support for secp256k1 signing of transactions; eris transactions are signed with ed25519.

We cannot stress enough how important it is for us to not create different standards as this burdens the innovation within the community.  Regardless, I hope from the above it is already clear this is tangled into a bigger decision than merely providing an additional set of RPC endpoints.  We really welcome our users and the community to join us here in this discussion.

Hope that helps,
Ben
",2016-11-07 09:53:59,2016-11-07 09:53:59
https://api.github.com/repos/hyperledger/burrow/issues/331,https://api.github.com/repos/hyperledger/burrow/issues/comments/258843903,https://github.com/hyperledger/burrow/issues/331#issuecomment-258843903,AFDudley,"@ryepdx hi. How are you creating the Txs before you sign them and push them?
",2016-11-07 14:07:05,2016-11-07 14:07:05
https://api.github.com/repos/hyperledger/burrow/issues/331,https://api.github.com/repos/hyperledger/burrow/issues/comments/258965633,https://github.com/hyperledger/burrow/issues/331#issuecomment-258965633,ryepdx,"Thanks for the prompt and thorough reply, @benjaminbollen. Much appreciated.

@AFDudley: To create transactions for signing, we're using [eth-lightwallet](https://github.com/ConsenSys/eth-lightwallet)'s `txutils.functionTx` on the client and [web3.py](https://github.com/pipermerriam/web3.py)'s `sendTransaction` on the server.
",2016-11-07 21:18:40,2016-11-07 21:18:40
https://api.github.com/repos/hyperledger/burrow/issues/331,https://api.github.com/repos/hyperledger/burrow/issues/comments/259037699,https://github.com/hyperledger/burrow/issues/331#issuecomment-259037699,ryepdx,"To further respond to @benjaminbollen: I think either of those options are fine. Both would lend themselves rather easily to clean interaction with the Ethereum tools already out there, with #1 probably providing the easiest transition for projects built with the Ethereum toolchain in mind.
",2016-11-08 03:44:08,2016-11-08 03:44:08
https://api.github.com/repos/hyperledger/burrow/issues/331,https://api.github.com/repos/hyperledger/burrow/issues/comments/285829158,https://github.com/hyperledger/burrow/issues/331#issuecomment-285829158,VoR0220,"@silasdavis @benjaminbollen @ryepdx 

I've compiled this list of JSON-RPC methods that are reasonable for us to implement:

Unsure if we need these:
[eth_coinbase](https://github.com/ethcore/parity/wiki/JSONRPC-eth-module#eth_coinbase)
[eth_accounts](https://github.com/ethcore/parity/wiki/JSONRPC-eth-module#eth_accounts)
[eth_gasPrice](https://github.com/ethcore/parity/wiki/JSONRPC-eth-module#eth_gasprice)
[eth_signTransaction](https://github.com/ethcore/parity/wiki/JSONRPC-eth-module#eth_signtransaction) (might be useful for keys rpc)
[eth_sync] (https://github.com/ethcore/parity/wiki/JSONRPC-eth-module#eth_syncing) (do we need this? Or does it fall under ""nice to have""?)

Fluff bits:
[web3_clientVersion](https://github.com/ethereum/wiki/wiki/JSON-RPC#web3_clientversion)
[web3_sha3](https://github.com/ethereum/wiki/wiki/JSON-RPC#web3_sha3)
[net_version](https://github.com/ethereum/wiki/wiki/JSON-RPC#net_version)
[net_listening](https://github.com/ethereum/wiki/wiki/JSON-RPC#net_listening)

Medium Importance:
[net_peerCount](https://github.com/ethereum/wiki/wiki/JSON-RPC#net_peercount)
[eth_getTransactionByHash](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_gettransactionbyhash)
[eth_getBlockByHash](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getblockbyhash)
[eth_getBlockByNumber](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getblockbynumber)
[eth_blockNumber](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_blocknumber)
[eth_getBalance](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getbalance)
[eth_getTransactionCount](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_gettransactioncount)

High importance:
[eth_getStorageAt](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getstorageat)
[eth_getCode](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getcode)
[eth_sign](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign)
[eth_sendTransaction](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sendtransaction)
[eth_sendRawTransaction](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sendrawtransaction)
[eth_getTransactionReceipt](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_gettransactionreceipt)
[eth_call](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_call)
[eth_newFilter](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newfilter)
[eth_newBlockFilter](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newblockfilter)
[eth_newPendingTransactionFilter](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_newpendingtransactionfilter)
[eth_uninstallFilter](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_uninstallfilter)
[eth_getFilterChanges](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getfilterchanges)
[eth_getFilterLogs](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getfilterlogs)
[eth_getLogs](https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_getlogs)

My recommendation is to start with the ones of highest importance that carry the most utility and that we in many ways have already implemented. Then move onto those of medium importance. And then finally the fluffy bits. 

pieces we definitely do not need:

Anything tied to proof of work
Anything tied to Whisper (though this may be nice to implement in the future as a service)
",2017-03-11 01:35:09,2017-03-11 03:30:47
https://api.github.com/repos/hyperledger/burrow/issues/329,https://api.github.com/repos/hyperledger/burrow/issues/comments/253006457,https://github.com/hyperledger/burrow/pull/329#issuecomment-253006457,benjaminbollen,"3.. 2.. 1..
",2016-10-11 18:40:40,2016-10-11 18:40:40
https://api.github.com/repos/hyperledger/burrow/issues/328,https://api.github.com/repos/hyperledger/burrow/issues/comments/252988147,https://github.com/hyperledger/burrow/pull/328#issuecomment-252988147,silasdavis,"It's good, I've got this covered in https://github.com/eris-ltd/eris-db/pull/329, this commit: https://github.com/eris-ltd/eris-db/pull/329/commits/a36da6324ca7dd4b6763ed543632a842a0842b23 
",2016-10-11 17:35:21,2016-10-11 17:35:21
https://api.github.com/repos/hyperledger/burrow/issues/325,https://api.github.com/repos/hyperledger/burrow/issues/comments/252979978,https://github.com/hyperledger/burrow/pull/325#issuecomment-252979978,benjaminbollen,"I like that!
",2016-10-11 17:06:08,2016-10-11 17:06:08
https://api.github.com/repos/hyperledger/burrow/issues/325,https://api.github.com/repos/hyperledger/burrow/issues/comments/252982110,https://github.com/hyperledger/burrow/pull/325#issuecomment-252982110,benjaminbollen,"LGTM
",2016-10-11 17:13:56,2016-10-11 17:13:56
https://api.github.com/repos/hyperledger/burrow/issues/321,https://api.github.com/repos/hyperledger/burrow/issues/comments/252904177,https://github.com/hyperledger/burrow/pull/321#issuecomment-252904177,benjaminbollen,"LGTM; nice catch, yes we don't want to push the build images either
",2016-10-11 12:34:36,2016-10-11 12:34:36
https://api.github.com/repos/hyperledger/burrow/issues/319,https://api.github.com/repos/hyperledger/burrow/issues/comments/252896347,https://github.com/hyperledger/burrow/pull/319#issuecomment-252896347,benjaminbollen,"LGTM
",2016-10-11 11:53:03,2016-10-11 11:53:03
https://api.github.com/repos/hyperledger/burrow/issues/317,https://api.github.com/repos/hyperledger/burrow/issues/comments/253383335,https://github.com/hyperledger/burrow/issues/317#issuecomment-253383335,compleatang,"dupe of #70 closing here
",2016-10-13 01:11:48,2016-10-13 01:11:48
https://api.github.com/repos/hyperledger/burrow/issues/316,https://api.github.com/repos/hyperledger/burrow/issues/comments/252584264,https://github.com/hyperledger/burrow/pull/316#issuecomment-252584264,benjaminbollen,"LGTM
",2016-10-10 10:42:47,2016-10-10 10:42:47
https://api.github.com/repos/hyperledger/burrow/issues/315,https://api.github.com/repos/hyperledger/burrow/issues/comments/252179788,https://github.com/hyperledger/burrow/pull/315#issuecomment-252179788,benjaminbollen,"For sake of connecting open ends; this relates to https://github.com/eris-ltd/eris-db/issues/115
",2016-10-07 08:15:06,2016-10-07 08:15:06
https://api.github.com/repos/hyperledger/burrow/issues/315,https://api.github.com/repos/hyperledger/burrow/issues/comments/252198470,https://github.com/hyperledger/burrow/pull/315#issuecomment-252198470,silasdavis,"Ah! Well you tried!
",2016-10-07 09:42:54,2016-10-07 09:42:54
https://api.github.com/repos/hyperledger/burrow/issues/314,https://api.github.com/repos/hyperledger/burrow/issues/comments/252270076,https://github.com/hyperledger/burrow/pull/314#issuecomment-252270076,benjaminbollen,"LGTM; 
",2016-10-07 14:39:13,2016-10-07 14:39:13
https://api.github.com/repos/hyperledger/burrow/issues/314,https://api.github.com/repos/hyperledger/burrow/issues/comments/252270872,https://github.com/hyperledger/burrow/pull/314#issuecomment-252270872,silasdavis,"will just make those changes
",2016-10-07 14:42:21,2016-10-07 14:42:21
https://api.github.com/repos/hyperledger/burrow/issues/314,https://api.github.com/repos/hyperledger/burrow/issues/comments/252279881,https://github.com/hyperledger/burrow/pull/314#issuecomment-252279881,benjaminbollen,"LGTM
",2016-10-07 15:16:13,2016-10-07 15:16:13
https://api.github.com/repos/hyperledger/burrow/issues/313,https://api.github.com/repos/hyperledger/burrow/issues/comments/252211000,https://github.com/hyperledger/burrow/pull/313#issuecomment-252211000,benjaminbollen,"LGTM!
",2016-10-07 10:34:04,2016-10-07 10:34:04
https://api.github.com/repos/hyperledger/burrow/issues/312,https://api.github.com/repos/hyperledger/burrow/issues/comments/251811806,https://github.com/hyperledger/burrow/pull/312#issuecomment-251811806,silasdavis,"epm tests are green. FORWARD MERGE!
",2016-10-05 21:58:11,2016-10-05 21:58:11
https://api.github.com/repos/hyperledger/burrow/issues/312,https://api.github.com/repos/hyperledger/burrow/issues/comments/251922960,https://github.com/hyperledger/burrow/pull/312#issuecomment-251922960,benjaminbollen,"LGTM, original work from #305 
",2016-10-06 10:21:29,2016-10-06 10:21:29
https://api.github.com/repos/hyperledger/burrow/issues/311,https://api.github.com/repos/hyperledger/burrow/issues/comments/251916301,https://github.com/hyperledger/burrow/pull/311#issuecomment-251916301,silasdavis,"EPM passes, ready to merge
",2016-10-06 09:49:18,2016-10-06 09:49:18
https://api.github.com/repos/hyperledger/burrow/issues/311,https://api.github.com/repos/hyperledger/burrow/issues/comments/251922497,https://github.com/hyperledger/burrow/pull/311#issuecomment-251922497,benjaminbollen,"LGTM, original work from #305; I like the opcodes bytecode constructor :)
",2016-10-06 10:19:19,2016-10-06 10:19:19
https://api.github.com/repos/hyperledger/burrow/issues/306,https://api.github.com/repos/hyperledger/burrow/issues/comments/251540767,https://github.com/hyperledger/burrow/pull/306#issuecomment-251540767,silasdavis,"My changes cause a fault in state_test.go
",2016-10-04 23:16:00,2016-10-04 23:16:00
https://api.github.com/repos/hyperledger/burrow/issues/305,https://api.github.com/repos/hyperledger/burrow/issues/comments/250506920,https://github.com/hyperledger/burrow/pull/305#issuecomment-250506920,silasdavis,"To add to why this might not have been spotted before, and was for Jan's issue: https://github.com/eris-ltd/eris-pm/issues/212. Is that using a `mapping` triggers some EVM code calling a SHA3 hash which incurs a gas cost related to its length. Whereas most of our gas prices are set very low (lower than Ethereum).
",2016-09-29 15:50:12,2016-09-29 15:50:12
https://api.github.com/repos/hyperledger/burrow/issues/305,https://api.github.com/repos/hyperledger/burrow/issues/comments/250519361,https://github.com/hyperledger/burrow/pull/305#issuecomment-250519361,silasdavis,"Don't merge yet. If it looks like the right thing I will be adding a unit_test to cover the issue in vm_test.go. Will also need to port to all other versions.
",2016-09-29 16:29:07,2016-09-29 16:29:07
https://api.github.com/repos/hyperledger/burrow/issues/305,https://api.github.com/repos/hyperledger/burrow/issues/comments/250522788,https://github.com/hyperledger/burrow/pull/305#issuecomment-250522788,benjaminbollen,"This is very interesting.  I can remark that while debugging the evm before I did notice an unusual jump in the gas, but did not investigate further; only strikes as suspicious now.  I will have to write out a simple example for myself later.  Very nice analysis
",2016-09-29 16:41:50,2016-09-29 16:41:50
https://api.github.com/repos/hyperledger/burrow/issues/305,https://api.github.com/repos/hyperledger/burrow/issues/comments/250567942,https://github.com/hyperledger/burrow/pull/305#issuecomment-250567942,benjaminbollen,"Very nice work @silasdavis. After following your argument and the code myself, I am equally confident that this is - regardless of whether it fixes https://github.com/eris-ltd/eris-pm/issues/212 - a legitimate bug that was there.  The expanded use of library contracts has started to showcase the bug which was unimportant because indeed we are generous with the initial available gas.

(another indicator is that it was correctly implemented for native contracts (on https://github.com/eris-ltd/eris-db/pull/305/files#diff-cad6213f6a08c87e4110c4006789e2b7R811).  

If you want to add an evm unit test (or an rpc integration test, if the event structure can't easily be mocked out), then that is great too.

LGTM. ready to merge and pull to master -rc2 and -rc3 when you're happy with it.
",2016-09-29 19:32:33,2016-09-29 19:32:33
https://api.github.com/repos/hyperledger/burrow/issues/305,https://api.github.com/repos/hyperledger/burrow/issues/comments/250570182,https://github.com/hyperledger/burrow/pull/305#issuecomment-250570182,silasdavis,"I was going to add a test in vm_test.go I just want to get an idea of what real solc-generated byte code looks like first
",2016-09-29 19:42:15,2016-09-29 19:42:15
https://api.github.com/repos/hyperledger/burrow/issues/305,https://api.github.com/repos/hyperledger/burrow/issues/comments/251467522,https://github.com/hyperledger/burrow/pull/305#issuecomment-251467522,silasdavis,"I've added in a test that would have caught the old bug, and also exercises DELEGATECALL a bit
",2016-10-04 18:10:22,2016-10-04 18:10:22
https://api.github.com/repos/hyperledger/burrow/issues/305,https://api.github.com/repos/hyperledger/burrow/issues/comments/251522073,https://github.com/hyperledger/burrow/pull/305#issuecomment-251522073,benjaminbollen,"LGTM, the bug fix is very well argued and consistently observed once pointed out by Silas.  The test is more complex to fully verify, but is well-constructed and passes, so thumbs up from me.
",2016-10-04 21:40:46,2016-10-04 21:40:46
https://api.github.com/repos/hyperledger/burrow/issues/301,https://api.github.com/repos/hyperledger/burrow/issues/comments/249952288,https://github.com/hyperledger/burrow/pull/301#issuecomment-249952288,silasdavis,"@benjaminbollen godocs will scrape out entire code, here we document the command and any specifications (basically any technical documentation we want on the main site) stored in docs/specs.
",2016-09-27 18:21:06,2016-09-27 18:21:06
https://api.github.com/repos/hyperledger/burrow/issues/301,https://api.github.com/repos/hyperledger/burrow/issues/comments/249952853,https://github.com/hyperledger/burrow/pull/301#issuecomment-249952853,compleatang,":+1: 
",2016-09-27 18:23:02,2016-09-27 18:23:02
https://api.github.com/repos/hyperledger/burrow/issues/301,https://api.github.com/repos/hyperledger/burrow/issues/comments/249953895,https://github.com/hyperledger/burrow/pull/301#issuecomment-249953895,benjaminbollen,"awesome!
",2016-09-27 18:26:36,2016-09-27 18:26:36
https://api.github.com/repos/hyperledger/burrow/issues/301,https://api.github.com/repos/hyperledger/burrow/issues/comments/250028571,https://github.com/hyperledger/burrow/pull/301#issuecomment-250028571,benjaminbollen,"LGTM
",2016-09-27 23:27:31,2016-09-27 23:27:31
https://api.github.com/repos/hyperledger/burrow/issues/300,https://api.github.com/repos/hyperledger/burrow/issues/comments/400261096,https://github.com/hyperledger/burrow/issues/300#issuecomment-400261096,compleatang,test added to bosmarmot. closing.,2018-06-26 10:33:14,2018-06-26 10:33:14
https://api.github.com/repos/hyperledger/burrow/issues/299,https://api.github.com/repos/hyperledger/burrow/issues/comments/252917464,https://github.com/hyperledger/burrow/issues/299#issuecomment-252917464,silasdavis,"I think this is fixed by https://github.com/eris-ltd/eris-db/pull/314, but we ought to have a js-libs test case in order to close it. @NodeGuy if you are able to add one that would be useful.
",2016-10-11 13:32:43,2016-10-11 13:32:43
https://api.github.com/repos/hyperledger/burrow/issues/299,https://api.github.com/repos/hyperledger/burrow/issues/comments/256773996,https://github.com/hyperledger/burrow/issues/299#issuecomment-256773996,NodeGuy,"All of the existing tests use this function to create a contract so it's well-covered.
",2016-10-27 21:23:25,2016-10-27 21:23:25
https://api.github.com/repos/hyperledger/burrow/issues/298,https://api.github.com/repos/hyperledger/burrow/issues/comments/252001133,https://github.com/hyperledger/burrow/issues/298#issuecomment-252001133,silasdavis,"It was removed, probably in error during the refactor: https://github.com/eris-ltd/eris-db/pull/114. I think we probably need to re-introduce it. I'll look into that.
",2016-10-06 15:38:28,2016-10-06 15:38:55
https://api.github.com/repos/hyperledger/burrow/issues/297,https://api.github.com/repos/hyperledger/burrow/issues/comments/249605339,https://github.com/hyperledger/burrow/pull/297#issuecomment-249605339,silasdavis,"I've deduplicated the `Peer` struct type, and made other objects reference it via a pointer as well as methods return a pointer value, as is more in keeping with other types.

Also fixed mocks.
",2016-09-26 15:31:46,2016-09-26 15:31:46
https://api.github.com/repos/hyperledger/burrow/issues/297,https://api.github.com/repos/hyperledger/burrow/issues/comments/249825664,https://github.com/hyperledger/burrow/pull/297#issuecomment-249825664,benjaminbollen,"Not too keen on `/rpc/v0/shared`, but very good work on starting to integrate the two rpcs which we definitely want to push forward! so ""looks very good to me""!  

We need integration tests to fully sign off, but the updated unit tests and local testing is good for now
",2016-09-27 10:21:49,2016-09-27 10:22:08
https://api.github.com/repos/hyperledger/burrow/issues/297,https://api.github.com/repos/hyperledger/burrow/issues/comments/249829210,https://github.com/hyperledger/burrow/pull/297#issuecomment-249829210,silasdavis,"Yeah I am not keen on rpc/v0/shared either. But I see it as a very temporary stopgap pending the sorting out of RPC, and didn't want to agonise over it any more. I had a 'pipes' before, which I felt made less sense, that was essentially serving as a v0 shared namespace (for restServer.go and methods.go) just to avoid duplication,.
",2016-09-27 10:39:24,2016-09-27 10:40:22
https://api.github.com/repos/hyperledger/burrow/issues/296,https://api.github.com/repos/hyperledger/burrow/issues/comments/249219488,https://github.com/hyperledger/burrow/issues/296#issuecomment-249219488,benjaminbollen,"lying is a bit strong use of words :)
",2016-09-23 15:13:12,2016-09-23 15:13:12
https://api.github.com/repos/hyperledger/burrow/issues/296,https://api.github.com/repos/hyperledger/burrow/issues/comments/249220884,https://github.com/hyperledger/burrow/issues/296#issuecomment-249220884,silasdavis,"it lies, deliberately
",2016-09-23 15:18:08,2016-09-23 15:18:08
https://api.github.com/repos/hyperledger/burrow/issues/296,https://api.github.com/repos/hyperledger/burrow/issues/comments/251992591,https://github.com/hyperledger/burrow/issues/296#issuecomment-251992591,silasdavis,"fixed on develop
",2016-10-06 15:11:19,2016-10-06 15:11:19
https://api.github.com/repos/hyperledger/burrow/issues/295,https://api.github.com/repos/hyperledger/burrow/issues/comments/249605943,https://github.com/hyperledger/burrow/pull/295#issuecomment-249605943,silasdavis,"Happy to close this?
",2016-09-26 15:33:38,2016-09-26 15:33:38
https://api.github.com/repos/hyperledger/burrow/issues/295,https://api.github.com/repos/hyperledger/burrow/issues/comments/249854726,https://github.com/hyperledger/burrow/pull/295#issuecomment-249854726,benjaminbollen,"`eris-client status` is a quick draft / hack but just to test without eris-pm 
 but that gives the correct rpc for chainId and genesishash
",2016-09-27 12:48:38,2016-09-27 12:48:38
https://api.github.com/repos/hyperledger/burrow/issues/294,https://api.github.com/repos/hyperledger/burrow/issues/comments/251993144,https://github.com/hyperledger/burrow/issues/294#issuecomment-251993144,silasdavis,"We need to look into what fastsync is doing, I'm not entirely clear. I'm not convinced that eris-db is the place to be opinionated about (or even know) the network size though.
",2016-10-06 15:13:08,2016-10-06 15:13:08
https://api.github.com/repos/hyperledger/burrow/issues/294,https://api.github.com/repos/hyperledger/burrow/issues/comments/252247993,https://github.com/hyperledger/burrow/issues/294#issuecomment-252247993,AFDudley,"wherever the size of the network is specified is where we should be explaining to users that their 1-4 node networks will demonstrably behave very differently thank their > 5 node networks. I agree that changing behavior in erisDB based on genesis peer count might be too much magic, but we need to expose the knob to configuration, such that I can specify a 3 node network as Master, Slave, Slave if I want. Also, that would need to have some meaning with regards to endpoint connections and drivers. Do we even have drivers outside of the JS bindings? are we doing connection management there?
",2016-10-07 13:11:06,2016-10-07 13:11:06
https://api.github.com/repos/hyperledger/burrow/issues/294,https://api.github.com/repos/hyperledger/burrow/issues/comments/253473382,https://github.com/hyperledger/burrow/issues/294#issuecomment-253473382,silasdavis,"Adding this to 0.16.0-01 sprint with the intention of discussing it, and reopen actionable items.
",2016-10-13 10:15:22,2016-10-13 10:15:22
https://api.github.com/repos/hyperledger/burrow/issues/291,https://api.github.com/repos/hyperledger/burrow/issues/comments/248894682,https://github.com/hyperledger/burrow/issues/291#issuecomment-248894682,silasdavis,"@benjaminbollen @compleatang don't want to distract from release work at this point, but wanted to capture some thought on this for comment when there is time.
",2016-09-22 12:51:24,2016-09-22 12:51:24
https://api.github.com/repos/hyperledger/burrow/issues/291,https://api.github.com/repos/hyperledger/burrow/issues/comments/251619010,https://github.com/hyperledger/burrow/issues/291#issuecomment-251619010,benjaminbollen,"We should come back on the proposal itself, but purely on the naming I want to have noted that it is called an ""application manager"" where the application is the set of ethereum permissioned bytecode run.; so erismint is the ""manager"" of the ""application"".  I acknowledge that the naming is not ideal.  We could call it the ""computer"", ""virtual machine"" or ""driver"" (last one is my favorite).
",2016-10-05 08:54:09,2016-10-05 08:54:09
https://api.github.com/repos/hyperledger/burrow/issues/289,https://api.github.com/repos/hyperledger/burrow/issues/comments/252864525,https://github.com/hyperledger/burrow/issues/289#issuecomment-252864525,compleatang,"Moving to 0.12.1|0.16.0
",2016-10-11 09:52:37,2016-10-11 09:52:37
https://api.github.com/repos/hyperledger/burrow/issues/285,https://api.github.com/repos/hyperledger/burrow/issues/comments/247871470,https://github.com/hyperledger/burrow/pull/285#issuecomment-247871470,benjaminbollen,"L OK TM, but why does commit time change the string format? - what was the need for that?
",2016-09-18 19:56:52,2016-09-18 19:57:32
https://api.github.com/repos/hyperledger/burrow/issues/285,https://api.github.com/repos/hyperledger/burrow/issues/comments/247883388,https://github.com/hyperledger/burrow/pull/285#issuecomment-247883388,silasdavis,"Just okay... jeez

It was a defined on ConsensusState as a string not a time, and since ConsensusState is a not just a view model but more a generally useful type it made sense to store the time in a time. But go-wire specifies a particular layout for parsing times, so the testdata (I assume you are talking about testdata) had to be updated to match the one it uses: https://github.com/tendermint/go-wire/blob/3b0adbc86ed8425eaed98516165b6788d9f4de7a/reflect.go#L91
",2016-09-18 21:55:12,2016-09-18 22:01:01
https://api.github.com/repos/hyperledger/burrow/issues/284,https://api.github.com/repos/hyperledger/burrow/issues/comments/248007132,https://github.com/hyperledger/burrow/issues/284#issuecomment-248007132,silasdavis,"I wanted to convince myself that there wasn't something weird going on with serialisation. There wasn't. But that test is only testing encoding and decoding so using 3 rather than 1 is immaterial here.
",2016-09-19 14:21:53,2016-09-19 14:21:53
https://api.github.com/repos/hyperledger/burrow/issues/283,https://api.github.com/repos/hyperledger/burrow/issues/comments/247801245,https://github.com/hyperledger/burrow/pull/283#issuecomment-247801245,benjaminbollen,"LGTM
",2016-09-17 19:26:14,2016-09-17 19:26:14
https://api.github.com/repos/hyperledger/burrow/issues/282,https://api.github.com/repos/hyperledger/burrow/issues/comments/247769832,https://github.com/hyperledger/burrow/pull/282#issuecomment-247769832,silasdavis,"LGTM
",2016-09-17 13:32:30,2016-09-17 13:32:30
https://api.github.com/repos/hyperledger/burrow/issues/278,https://api.github.com/repos/hyperledger/burrow/issues/comments/247565899,https://github.com/hyperledger/burrow/pull/278#issuecomment-247565899,benjaminbollen,"LGTM; will merge but take note that I'll change the signature of that function in a bit !
",2016-09-16 10:13:24,2016-09-16 10:13:24
https://api.github.com/repos/hyperledger/burrow/issues/276,https://api.github.com/repos/hyperledger/burrow/issues/comments/247361056,https://github.com/hyperledger/burrow/pull/276#issuecomment-247361056,benjaminbollen,"Somewhere between FIPF, LGTM and ""let's just run with it""
",2016-09-15 15:25:56,2016-09-15 15:25:56
https://api.github.com/repos/hyperledger/burrow/issues/273,https://api.github.com/repos/hyperledger/burrow/issues/comments/246774470,https://github.com/hyperledger/burrow/pull/273#issuecomment-246774470,silasdavis,"This also now addresses some issues in the event-based testing framework, so that it will wait for multiple blocks, and fixes some subtler issues around finality. 
",2016-09-13 18:20:00,2016-09-13 18:20:00
https://api.github.com/repos/hyperledger/burrow/issues/273,https://api.github.com/repos/hyperledger/burrow/issues/comments/246776897,https://github.com/hyperledger/burrow/pull/273#issuecomment-246776897,silasdavis,"@benjaminbollen this is now passing, if you could review
",2016-09-13 18:28:08,2016-09-13 18:28:08
https://api.github.com/repos/hyperledger/burrow/issues/273,https://api.github.com/repos/hyperledger/burrow/issues/comments/246802925,https://github.com/hyperledger/burrow/pull/273#issuecomment-246802925,benjaminbollen,"seems this test first tests for blockheight, and as you've commented we have two different rpc functions under the same name returning a different info, so FIPF
",2016-09-13 19:53:12,2016-09-13 19:53:12
https://api.github.com/repos/hyperledger/burrow/issues/272,https://api.github.com/repos/hyperledger/burrow/issues/comments/246341842,https://github.com/hyperledger/burrow/pull/272#issuecomment-246341842,silasdavis,"Hopefully I was just tripping up by running the wrapper more times than the one time we need. Each time it's run is an opportunity to try and re-bind the same port where the OS may not have got round to fully un-binding...
",2016-09-12 13:09:52,2016-09-12 13:09:52
https://api.github.com/repos/hyperledger/burrow/issues/272,https://api.github.com/repos/hyperledger/burrow/issues/comments/246341939,https://github.com/hyperledger/burrow/pull/272#issuecomment-246341939,silasdavis,"I'll re-run the circle build a few tens of times and see what happens....

I'll keep a tally here:
Successful rebuilds (with and without cache): 9
",2016-09-12 13:10:21,2016-09-12 14:40:48
https://api.github.com/repos/hyperledger/burrow/issues/272,https://api.github.com/repos/hyperledger/burrow/issues/comments/246373817,https://github.com/hyperledger/burrow/pull/272#issuecomment-246373817,silasdavis,"So first bind-related failure in a run of 9 consecutive successes then 1 failure:

```
panic: Paniced on a Crisis: listen tcp 0.0.0.0:46656: bind: address already in use
```

I still thing this has stabilised it. I am suspicious that what we are seeing might relate to something weird on circle's host/hypervisor and how it schedules freeing up ports... @benjaminbollen if you find these intermittent failures too annoying, or they get worse, then we can remove integration tests from circle. For me my (weakly held) preference would be to keep them enabled for now. If we could merge this regardless I think it improves matters.
",2016-09-12 14:53:55,2016-09-12 14:53:55
https://api.github.com/repos/hyperledger/burrow/issues/272,https://api.github.com/repos/hyperledger/burrow/issues/comments/246439152,https://github.com/hyperledger/burrow/pull/272#issuecomment-246439152,benjaminbollen,"FIPF
",2016-09-12 18:12:20,2016-09-12 18:12:20
https://api.github.com/repos/hyperledger/burrow/issues/271,https://api.github.com/repos/hyperledger/burrow/issues/comments/253613377,https://github.com/hyperledger/burrow/issues/271#issuecomment-253613377,compleatang,"@silasdavis ideally this is a 0.12.0-battlemarmot addition
",2016-10-13 19:26:22,2016-10-13 19:26:22
https://api.github.com/repos/hyperledger/burrow/issues/271,https://api.github.com/repos/hyperledger/burrow/issues/comments/262815011,https://github.com/hyperledger/burrow/issues/271#issuecomment-262815011,silasdavis,Will be superseded by RPC framework,2016-11-24 16:42:27,2016-11-24 16:42:27
https://api.github.com/repos/hyperledger/burrow/issues/271,https://api.github.com/repos/hyperledger/burrow/issues/comments/368510230,https://github.com/hyperledger/burrow/issues/271#issuecomment-368510230,silasdavis,This is a WONTFIX for v0 which is in maintenance mode,2018-02-26 13:53:09,2018-02-26 13:53:09
https://api.github.com/repos/hyperledger/burrow/issues/270,https://api.github.com/repos/hyperledger/burrow/issues/comments/262814909,https://github.com/hyperledger/burrow/issues/270#issuecomment-262814909,silasdavis,Will be superseded by RPC work,2016-11-24 16:41:56,2016-11-24 16:41:56
https://api.github.com/repos/hyperledger/burrow/issues/270,https://api.github.com/repos/hyperledger/burrow/issues/comments/276334960,https://github.com/hyperledger/burrow/issues/270#issuecomment-276334960,benjaminbollen,This should not have been closed; rather should now be addressed in #465 ,2017-01-31 11:03:58,2017-01-31 11:03:58
https://api.github.com/repos/hyperledger/burrow/issues/269,https://api.github.com/repos/hyperledger/burrow/issues/comments/246181751,https://github.com/hyperledger/burrow/pull/269#issuecomment-246181751,benjaminbollen,"LGTM
",2016-09-11 14:01:36,2016-09-11 14:01:36
https://api.github.com/repos/hyperledger/burrow/issues/268,https://api.github.com/repos/hyperledger/burrow/issues/comments/246178094,https://github.com/hyperledger/burrow/pull/268#issuecomment-246178094,benjaminbollen,"FIPF, same hotfix as applied on master in #266 
",2016-09-11 12:38:05,2016-09-11 12:38:05
https://api.github.com/repos/hyperledger/burrow/issues/267,https://api.github.com/repos/hyperledger/burrow/issues/comments/246178049,https://github.com/hyperledger/burrow/pull/267#issuecomment-246178049,benjaminbollen,"FIPF, same hotfix as applied on masterr in #266 
",2016-09-11 12:36:39,2016-09-11 12:36:39
https://api.github.com/repos/hyperledger/burrow/issues/266,https://api.github.com/repos/hyperledger/burrow/issues/comments/246177998,https://github.com/hyperledger/burrow/pull/266#issuecomment-246177998,benjaminbollen,"FIPF, I'm not sure I fully understand what is happening under the hood of the event system that this is the sensible solution, but it does not seem to be breaking and can make sense.
",2016-09-11 12:35:21,2016-09-11 12:35:21
https://api.github.com/repos/hyperledger/burrow/issues/266,https://api.github.com/repos/hyperledger/burrow/issues/comments/246296800,https://github.com/hyperledger/burrow/pull/266#issuecomment-246296800,silasdavis,"The core problem is that `FireEvent` assumes that a listener callback will not block indefinitely. But in our case we have following execution:
1. First matching AccCall event arrives
2. Blocking send of event data into channel `wc`
3. Receive of event data on `wc`
4. Callback unblocks
5. Second matching AccCall event arrives
6. Blocking send of event data into channel `wc`
7. No further reads on `wc`, callback remains blocking... (`FireEvent` is blocked)
8. transactAndHold tries to unsubscribe but can't because it needs the same mutex `FireEvent` has locked

So what we have is doubly bad:
1. The execution of the VM is halted waiting for the return of `FireEvent`
2. transactAndHold is blocked waiting for `Unsubscribe` to return which is deadlocked over a shared mutex with `FireEvent`

Here's my suggestion to go-events to fix it: https://github.com/tendermint/go-events/pull/6

Also just thinking about our code here.... The reason this arises is partly because we are only expecting to see one AccCall event with matching transaction receipt hash, but we see two. we ought to be able to better distinguish the original call made by the transaction and the subsequent ones. The contract that shows the bug is:

```
contract MyTest{                                          
    bool 

    function call1(address contractB)public{
        result = MyTest(contractB).call2(this);
    }

    function call2(address contractA)public returns(bool){
        bool mycall = MyTest(contractA).call3();
        return mycall;
    }

    function call3()public returns(bool){
        return true;
    }

    function getResult()public returns(bool){
        return result;
    }
}
```

Perhaps thinking about this is for another day, but it maybe raises the question of what are are the proper 'fire and wait' semantics. Do we just want the first call event triggered, the last?
",2016-09-12 09:35:36,2016-09-12 09:35:36
https://api.github.com/repos/hyperledger/burrow/issues/265,https://api.github.com/repos/hyperledger/burrow/issues/comments/245439155,https://github.com/hyperledger/burrow/issues/265#issuecomment-245439155,benjaminbollen,"Why does it matter which blockheight the values were changed in; also pretty sure that that information is already accessible with some work, but just looking for some more context.
",2016-09-07 22:26:29,2016-09-07 22:26:29
https://api.github.com/repos/hyperledger/burrow/issues/265,https://api.github.com/repos/hyperledger/burrow/issues/comments/245450519,https://github.com/hyperledger/burrow/issues/265#issuecomment-245450519,VoR0220,"Verify that youre working on the proper contract. 
",2016-09-07 23:28:28,2016-09-07 23:28:28
https://api.github.com/repos/hyperledger/burrow/issues/265,https://api.github.com/repos/hyperledger/burrow/issues/comments/245450638,https://github.com/hyperledger/burrow/issues/265#issuecomment-245450638,VoR0220,"That the bytecode deployed at address x at block y was this bytecode is very useful for formal verification. 
",2016-09-07 23:29:07,2016-09-07 23:29:07
https://api.github.com/repos/hyperledger/burrow/issues/265,https://api.github.com/repos/hyperledger/burrow/issues/comments/245539950,https://github.com/hyperledger/burrow/issues/265#issuecomment-245539950,compleatang,"Get block at height X, Get address and done. This is pms job to orchestrate not clients'. Client isn't built to give every single helper needed to do the things. It is built to provide a low level golang access to DBs functionality. Some processing and further calling is almost always required. But those will need to happen at the pm level or wherever the library is being used. 
",2016-09-08 09:13:59,2016-09-08 09:13:59
https://api.github.com/repos/hyperledger/burrow/issues/264,https://api.github.com/repos/hyperledger/burrow/issues/comments/245300712,https://github.com/hyperledger/burrow/issues/264#issuecomment-245300712,benjaminbollen,"- [x] GetChainId exposed from library
",2016-09-07 14:36:13,2016-09-17 19:40:30
https://api.github.com/repos/hyperledger/burrow/issues/264,https://api.github.com/repos/hyperledger/burrow/issues/comments/245304492,https://github.com/hyperledger/burrow/issues/264#issuecomment-245304492,VoR0220,"- [ ] List validators
- [ ] Rebond, Bond, Unbond
- [x] Permissions
",2016-09-07 14:47:34,2016-09-17 19:40:39
https://api.github.com/repos/hyperledger/burrow/issues/264,https://api.github.com/repos/hyperledger/burrow/issues/comments/247348120,https://github.com/hyperledger/burrow/issues/264#issuecomment-247348120,benjaminbollen,"TODO: NameGetter https://github.com/eris-ltd/eris-db/pull/187#discussion-diff-78937360R191
",2016-09-15 14:41:15,2016-09-15 14:41:30
https://api.github.com/repos/hyperledger/burrow/issues/264,https://api.github.com/repos/hyperledger/burrow/issues/comments/262814843,https://github.com/hyperledger/burrow/issues/264#issuecomment-262814843,silasdavis,@benjaminbollen is this still serving a purpose please reopen with information for the uninitiated,2016-11-24 16:41:30,2016-11-24 16:41:30
https://api.github.com/repos/hyperledger/burrow/issues/262,https://api.github.com/repos/hyperledger/burrow/issues/comments/245270188,https://github.com/hyperledger/burrow/pull/262#issuecomment-245270188,benjaminbollen,"@pietv @compleatang does this make sense to you?  -- happy to receive feedback.  If we do something similar, then we'll best do it for e-cm (and e-pm, maybe not needed for cli?)
",2016-09-07 12:50:20,2016-09-07 12:50:20
https://api.github.com/repos/hyperledger/burrow/issues/262,https://api.github.com/repos/hyperledger/burrow/issues/comments/245272622,https://github.com/hyperledger/burrow/pull/262#issuecomment-245272622,compleatang,"++ I think this is a good paradigm that we should be adopting for all the major repos moving forward.
",2016-09-07 13:00:09,2016-09-07 13:00:23
https://api.github.com/repos/hyperledger/burrow/issues/262,https://api.github.com/repos/hyperledger/burrow/issues/comments/245274203,https://github.com/hyperledger/burrow/pull/262#issuecomment-245274203,pietv,":+1:
",2016-09-07 13:06:27,2016-09-07 13:06:27
https://api.github.com/repos/hyperledger/burrow/issues/259,https://api.github.com/repos/hyperledger/burrow/issues/comments/252921751,https://github.com/hyperledger/burrow/issues/259#issuecomment-252921751,benjaminbollen,"Nested account generation is fixed on 0.12.0-rc3 https://github.com/eris-ltd/eris-db/blob/develop/manager/eris-mint/evm/vm.go#L849
",2016-10-11 13:48:22,2016-10-11 13:48:22
https://api.github.com/repos/hyperledger/burrow/issues/259,https://api.github.com/repos/hyperledger/burrow/issues/comments/252923845,https://github.com/hyperledger/burrow/issues/259#issuecomment-252923845,benjaminbollen,"metablock issue ported over in : https://github.com/eris-ltd/eris-db/pull/322
",2016-10-11 13:55:52,2016-10-11 13:55:52
https://api.github.com/repos/hyperledger/burrow/issues/259,https://api.github.com/repos/hyperledger/burrow/issues/comments/253379134,https://github.com/hyperledger/burrow/issues/259#issuecomment-253379134,compleatang,"this can be closed, no?
",2016-10-13 00:38:36,2016-10-13 00:38:36
https://api.github.com/repos/hyperledger/burrow/issues/258,https://api.github.com/repos/hyperledger/burrow/issues/comments/244907196,https://github.com/hyperledger/burrow/issues/258#issuecomment-244907196,somak12,"Eris version :  0.11.4
go version xgcc (Ubuntu 4.9.3-0ubuntu4) 4.9.3 linux/amd64
",2016-09-06 10:08:40,2016-09-06 10:08:40
https://api.github.com/repos/hyperledger/burrow/issues/258,https://api.github.com/repos/hyperledger/burrow/issues/comments/300166115,https://github.com/hyperledger/burrow/issues/258#issuecomment-300166115,silasdavis,"Sorry for the delay @somak12, I have looked into this issue and it relates to how solidity stores the array length. I'm going to consolidate this ticket into https://github.com/hyperledger/burrow/issues/413. 

I have a fix in hand, please see there for further discussion. ",2017-05-09 13:36:46,2017-05-09 13:36:46
https://api.github.com/repos/hyperledger/burrow/issues/258,https://api.github.com/repos/hyperledger/burrow/issues/comments/300450453,https://github.com/hyperledger/burrow/issues/258#issuecomment-300450453,silasdavis,I was a bit hasty to close this. I'm going to verify that your code works as expected against the #607. Would you mind if I used it to make test case in monax/cli?,2017-05-10 11:11:00,2017-05-10 11:11:31
https://api.github.com/repos/hyperledger/burrow/issues/258,https://api.github.com/repos/hyperledger/burrow/issues/comments/300529545,https://github.com/hyperledger/burrow/issues/258#issuecomment-300529545,silasdavis,"@somak12 so having looked into this, the initialisation-time dynamic memory arrays (size is a parameter you pass the constructor at runtime) are not yet supported as return values by the EVM. As you correctly point out on remix (browser solidity) it does work, and I am told this is implemented as something of an internal work-around in web3 that uses internal knowledge of their state to allow for dynamic array returns. From a pure EVM level and so Solidity it is not currently possible.

The problem is that when you make a `CALL` you have to specify the return position and size in memory ahead of time, but that is not known for dynamic arrays, see here for more detail: https://github.com/ethereum/solidity/issues/164. So there is not a general solution in Solidity. However there is a proposal to provide a mechanism in Ethereum to do this more efficiently via two new opcodes see: https://github.com/ethereum/EIPs/pull/211. I would expect us to support that in due course once added to the EVM spec.

In the meantime, the following will work (will return the arrays) (I have been trying this against #607):

```javascript
    function getMarket() constant returns(uint[20], uint[20], uint[20], uint[20]){
        uint[20] memory optionIDs;
        uint[20] memory strikes_;
        uint[20] memory positions_;
        uint[20] memory cashes;
        uint z = 0;
          for (uint i=0; i<10; i++) {
            optionIDs[i] = i;
            strikes_[i] = i+10;
            positions_[i] = i+100;
            cashes[i] = i+50;
            z++;
          }
        return (optionIDs, strikes_, positions_, cashes);
      }
```

If you want to use dynamic arrays internally (as in without returning those values) then you will be able to do so after #607 is merged.",2017-05-10 15:59:42,2017-05-10 16:02:28
https://api.github.com/repos/hyperledger/burrow/issues/258,https://api.github.com/repos/hyperledger/burrow/issues/comments/313312892,https://github.com/hyperledger/burrow/issues/258#issuecomment-313312892,somak12,👍 ,2017-07-06 06:58:52,2017-07-06 06:59:06
https://api.github.com/repos/hyperledger/burrow/issues/257,https://api.github.com/repos/hyperledger/burrow/issues/comments/244993932,https://github.com/hyperledger/burrow/pull/257#issuecomment-244993932,silasdavis,"I'm not entirely sure what this is for, so I will leave @benjaminbollen to do final signoff
",2016-09-06 15:43:59,2016-09-06 15:43:59
https://api.github.com/repos/hyperledger/burrow/issues/257,https://api.github.com/repos/hyperledger/burrow/issues/comments/245300201,https://github.com/hyperledger/burrow/pull/257#issuecomment-245300201,benjaminbollen,"will track in #264 
",2016-09-07 14:34:39,2016-09-07 14:34:39
https://api.github.com/repos/hyperledger/burrow/issues/256,https://api.github.com/repos/hyperledger/burrow/issues/comments/245300098,https://github.com/hyperledger/burrow/pull/256#issuecomment-245300098,benjaminbollen,"will track in #264 
",2016-09-07 14:34:20,2016-09-07 14:34:20
https://api.github.com/repos/hyperledger/burrow/issues/255,https://api.github.com/repos/hyperledger/burrow/issues/comments/244353992,https://github.com/hyperledger/burrow/pull/255#issuecomment-244353992,compleatang,"LGTM
",2016-09-02 11:47:38,2016-09-02 11:47:38
https://api.github.com/repos/hyperledger/burrow/issues/254,https://api.github.com/repos/hyperledger/burrow/issues/comments/244071333,https://github.com/hyperledger/burrow/issues/254#issuecomment-244071333,compleatang,"`INFO[0032] Hit UnpackProcessType` <- ugh.... cc @VoR0220 
",2016-09-01 13:01:48,2016-09-01 13:01:48
https://api.github.com/repos/hyperledger/burrow/issues/254,https://api.github.com/repos/hyperledger/burrow/issues/comments/244085165,https://github.com/hyperledger/burrow/issues/254#issuecomment-244085165,VoR0220,"Already been fixed in rc3. 
",2016-09-01 13:52:24,2016-09-01 13:52:24
https://api.github.com/repos/hyperledger/burrow/issues/254,https://api.github.com/repos/hyperledger/burrow/issues/comments/244086497,https://github.com/hyperledger/burrow/issues/254#issuecomment-244086497,VoR0220,"As for the main issue. I'm curious if the tightly packed features might be playing in here...which they shouldn't, our stack should be designed for that. 

Edit: Upon further examination, tight packing should not be effecting this at all. 
",2016-09-01 13:56:41,2016-09-01 13:59:43
https://api.github.com/repos/hyperledger/burrow/issues/254,https://api.github.com/repos/hyperledger/burrow/issues/comments/262811477,https://github.com/hyperledger/burrow/issues/254#issuecomment-262811477,silasdavis,">Already been fixed in rc3.

Assume you were replying to Casey's comment not regarding this issue @VoR0220 

",2016-11-24 16:22:09,2016-11-24 16:22:21
https://api.github.com/repos/hyperledger/burrow/issues/254,https://api.github.com/repos/hyperledger/burrow/issues/comments/262811715,https://github.com/hyperledger/burrow/issues/254#issuecomment-262811715,silasdavis,Also this looks to me like a signed/unsigned issue in two's complement ,2016-11-24 16:23:24,2016-11-24 16:23:24
https://api.github.com/repos/hyperledger/burrow/issues/254,https://api.github.com/repos/hyperledger/burrow/issues/comments/393106441,https://github.com/hyperledger/burrow/issues/254#issuecomment-393106441,compleatang,closing this as an old issue. ,2018-05-30 10:09:07,2018-05-30 10:09:07
https://api.github.com/repos/hyperledger/burrow/issues/253,https://api.github.com/repos/hyperledger/burrow/issues/comments/244131261,https://github.com/hyperledger/burrow/issues/253#issuecomment-244131261,ebuchman,"The issue may be that the tx argument in BroadcastTx rpc call is expected to come as []byte, not pre-encoded to hex.

Eg. in a tendermint test: https://github.com/tendermint/tendermint/blob/master/rpc/test/client_test.go#L66
(see the testTx() function which returns []byte)

Whereas erisdb is encoded to hex first: https://github.com/eris-ltd/eris-db/blob/develop/manager/eris-mint/eris-mint.go#L98

The go-rpc client takes care of encoding to hex so you don't have to: https://github.com/tendermint/go-rpc/blob/master/client/http_client.go#L176
",2016-09-01 16:16:07,2016-09-01 16:16:36
https://api.github.com/repos/hyperledger/burrow/issues/253,https://api.github.com/repos/hyperledger/burrow/issues/comments/262810727,https://github.com/hyperledger/burrow/issues/253#issuecomment-262810727,silasdavis,"@compleatang is this still a live issue? Can we close?

Is it actually the issue with needing to send quotation marks for hex string?",2016-11-24 16:18:11,2016-11-24 16:18:11
https://api.github.com/repos/hyperledger/burrow/issues/253,https://api.github.com/repos/hyperledger/burrow/issues/comments/262836381,https://github.com/hyperledger/burrow/issues/253#issuecomment-262836381,compleatang,"I'm not sure. I tried to get slams to work, but don't understand the setup well enough to move beyond a bunch of setup errors. @NodeGuy have you tested the slams benchmark against 0.15.6 / 0.12.1 ...?",2016-11-24 19:39:36,2016-11-24 19:39:36
https://api.github.com/repos/hyperledger/burrow/issues/253,https://api.github.com/repos/hyperledger/burrow/issues/comments/262877847,https://github.com/hyperledger/burrow/issues/253#issuecomment-262877847,NodeGuy,No I haven't.  I've been focused on fixing bugs in eris-contract.js first.  It's on my to do list to test slams with 0.12.1 and to create documentation for it at the same time.,2016-11-25 04:15:46,2016-11-25 04:15:46
https://api.github.com/repos/hyperledger/burrow/issues/253,https://api.github.com/repos/hyperledger/burrow/issues/comments/274959163,https://github.com/hyperledger/burrow/issues/253#issuecomment-274959163,ratranqu,"A bit remote, but this might be fixed by https://github.com/eris-ltd/eris-db/pull/453",2017-01-24 22:25:05,2017-01-24 22:25:05
https://api.github.com/repos/hyperledger/burrow/issues/253,https://api.github.com/repos/hyperledger/burrow/issues/comments/380597558,https://github.com/hyperledger/burrow/issues/253#issuecomment-380597558,compleatang,Fixed,2018-04-11 21:13:20,2018-04-11 21:13:20
https://api.github.com/repos/hyperledger/burrow/issues/252,https://api.github.com/repos/hyperledger/burrow/issues/comments/245253526,https://github.com/hyperledger/burrow/issues/252#issuecomment-245253526,silasdavis,"This falls under an existing epic
",2016-09-07 11:33:53,2016-09-07 11:33:53
https://api.github.com/repos/hyperledger/burrow/issues/251,https://api.github.com/repos/hyperledger/burrow/issues/comments/262793809,https://github.com/hyperledger/burrow/issues/251#issuecomment-262793809,silasdavis,"At time of writing current `Dockerfile` is:

```
FROM quay.io/eris/build
MAINTAINER Monax <support@monax.io>

# Install eris-db, a go app that manages relationships
ENV TARGET eris-db
ENV REPO $GOPATH/src/github.com/eris-ltd/$TARGET

ADD ./glide.yaml $REPO/
ADD ./glide.lock $REPO/
WORKDIR $REPO
RUN glide install

COPY . $REPO/.
RUN cd $REPO/cmd/$TARGET && \
  go build --ldflags '-extldflags ""-static""' -o $INSTALL_BASE/$TARGET

# build customizations start here
RUN cd $REPO/client/cmd/eris-client && \
  go build --ldflags '-extldflags ""-static""' -o $INSTALL_BASE/eris-client
```

So linked PR would be out-of-date.

@AFDudley arm tag for eris/build image looks out of date. Will you be able to update? https://quay.io/repository/eris/build?tab=tags

If updated, will the Dockerfiles be otherwise identical to above? I think so.

If it is too onerous/we do not plan to keep arm up-to-date I strongly recommend we drop support for ARM rather than maintain out-of-date support. ",2016-11-24 14:54:05,2016-11-24 14:54:05
https://api.github.com/repos/hyperledger/burrow/issues/251,https://api.github.com/repos/hyperledger/burrow/issues/comments/263067163,https://github.com/hyperledger/burrow/issues/251#issuecomment-263067163,zramsay,@silasdavis go ahead and drop IoT support for the time being. I've added this issue to the IoT epic which will be able to be cleaner post `0.16.0`,2016-11-26 14:48:25,2016-11-26 14:48:58
https://api.github.com/repos/hyperledger/burrow/issues/251,https://api.github.com/repos/hyperledger/burrow/issues/comments/284125675,https://github.com/hyperledger/burrow/issues/251#issuecomment-284125675,zramsay,to be dealt with in https://github.com/eris-ltd/eris/issues/1088,2017-03-04 04:10:07,2017-03-04 04:10:07
https://api.github.com/repos/hyperledger/burrow/issues/250,https://api.github.com/repos/hyperledger/burrow/issues/comments/244017443,https://github.com/hyperledger/burrow/pull/250#issuecomment-244017443,silasdavis,"We also have: https://github.com/eris-ltd/eris-db/blob/develop/Dockerfile.armhf which should been shown the same love. I don't want these two Dockerfiles to get out of sync, if this become a burden we might consider scripting it:

https://github.com/devTristan/dockerscript
https://github.com/avirshup/DockerMake

There is some talk of a Dockerfile `INCLUDE` statement which would also help us not repeat ourselves in these two files. But it's not implemented yet: https://github.com/docker/docker/issues/735

For the time being could you make the corresponding changes in both places, otherwise LGTM
",2016-09-01 08:53:52,2016-09-01 08:54:26
https://api.github.com/repos/hyperledger/burrow/issues/250,https://api.github.com/repos/hyperledger/burrow/issues/comments/244024228,https://github.com/hyperledger/burrow/pull/250#issuecomment-244024228,benjaminbollen,"smart!  happy to merge this and we will update the armhf dockerfile accordingly.
",2016-09-01 09:21:42,2016-09-01 09:21:42
https://api.github.com/repos/hyperledger/burrow/issues/249,https://api.github.com/repos/hyperledger/burrow/issues/comments/262809446,https://github.com/hyperledger/burrow/issues/249#issuecomment-262809446,silasdavis,This was fixed by CLI,2016-11-24 16:11:05,2016-11-24 16:11:05
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/242774728,https://github.com/hyperledger/burrow/pull/247#issuecomment-242774728,benjaminbollen,"so reasoning is:
- act on storage of `callee`
- preserve `caller`
- run code from destination
- do not transfer value to destination
",2016-08-26 15:54:43,2016-08-26 15:54:43
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/243007687,https://github.com/hyperledger/burrow/pull/247#issuecomment-243007687,VoR0220,"Did you look at this yet? https://github.com/ethereum/go-ethereum/search?utf8=%E2%9C%93&q=delegatecall This has everywhere that is delegate call related in some way and could be an excellent reference point. 
",2016-08-28 23:55:34,2016-08-28 23:55:34
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/244341694,https://github.com/hyperledger/burrow/pull/247#issuecomment-244341694,silasdavis,"I'm going to state my understanding of this operation and see if other people agree. ""Caller"" and ""Callee"" can get a bit confusing because we an intermediate account (named B below; the delegate) that is both caller and callee.

Suppose we have 3 accounts: A, B, and C with the following psuedo-code contracts attached:

A: 

```
int n := 0
address addr := nil

CALL B
```

B: 

```
int n := 0
address addr := nil

DELEGATECALL C
```

C:

```
int n := 0
address addr := nil

n++
addr = msg.sender
```

Then the result of invoking A (message or transaction) should be the following sequence:

| Stack | A | B | C |
| --- | --- | --- | --- |
| [] | n = 0, addr = nil | n = 0, addr = nil | n = 0, addr = nil |
| [CALL B] | n = 0, addr = nil | n = 0, addr = nil | n = 0, addr = nil |
| [DELEGATECALL C, CALL B] | n = 0, addr = nil | n = 1, addr = A | n = 0, addr = nil |

That is B acts a 'delegate' for A in terms of the message sender and value, but like with `CALLCODE` it is B's storage that gets updated by the code in C.

Is this correct?
",2016-09-02 10:35:02,2016-09-02 10:37:37
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/244341792,https://github.com/hyperledger/burrow/pull/247#issuecomment-244341792,silasdavis,"> `// [ -->] Different to the normal CALL or CALLCODE, the value does not need to be transferred to the callee. [<-- CORRECT?]`

I need clarification on what this means, and if it is indeed correct...
",2016-09-02 10:35:32,2016-09-02 10:35:45
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/244343779,https://github.com/hyperledger/burrow/pull/247#issuecomment-244343779,benjaminbollen,"> That is B acts a 'delegate' for A in terms of the message sender and value, but like with CALLCODE it is > B's storage that gets updated by the code in C.
> Is this correct?

yes, that is also how i understand it and the pseudo-code example is consistent.
",2016-09-02 10:46:43,2016-09-02 10:46:53
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/244344918,https://github.com/hyperledger/burrow/pull/247#issuecomment-244344918,benjaminbollen,"> // [ -->] Different to the normal CALL or CALLCODE, the value does not need to be transferred to the > callee. [<-- CORRECT?]
> I need clarification on what this means, and if it is indeed correct...

in the code, opcodes `CALL` and `CALLCODE` will start a new stack and memory by calling the funnction `Call`, which atomically transfers the value from caller to callee; then calls the function `call` which executes the ethereum opcodes;

I understand that the value sent with the `message` (starting a new stack+memory) does not require the value sent from `A` to `B` to be passed to the delegated contract `C`; a few notes:
- whether or not to pass on this value from B to C; does not affect the succes of e-pm test `app35`
- go-ethereum code - from my reading - does also not pass this value to the delegated contract `C`
",2016-09-02 10:52:49,2016-09-02 10:52:49
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/244349322,https://github.com/hyperledger/burrow/pull/247#issuecomment-244349322,compleatang,"the key diff between CALL and DELEGATECALL is the storage and memory zone in which the code operates. namely CALL will execute in the storage and memory zone of the CALLEE while DELEGATECALL will execute the in the storage and memory zone of the CALLER. 
",2016-09-02 11:18:47,2016-09-02 11:18:47
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/244350787,https://github.com/hyperledger/burrow/pull/247#issuecomment-244350787,benjaminbollen,"so in the proposed impl here; for `switch CALL, CALLCODE, DELEGATECALL` it essential hinges on this: 

```
if op == CALLCODE {
    [...]
    ret, err = vm.Call(callee, callee, acc.Code, args, value, gas)
} else if op == DELEGATECALL {
    [...]               
    ret, err = vm.DelegateCall(caller, callee, acc.Code, args, value, gas)
} else {
    [...]
    ret, err = vm.Call(callee, acc, acc.Code, args, value, gas)
}
```

https://github.com/eris-ltd/eris-db/pull/247/files#diff-cad6213f6a08c87e4110c4006789e2b7R832

where then `vm.DelegateCall` _does not_ transfer the value from `caller` to `callee`, although that - as referred to above, here does not mean much because it is currently called with `caller==callee`
",2016-09-02 11:28:08,2016-09-02 11:29:33
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/244351298,https://github.com/hyperledger/burrow/pull/247#issuecomment-244351298,compleatang,"I'm pretty sure there's a few nuances in the proposed `vm.DelegateCall` which are not captured in geths -> https://github.com/ethereum/go-ethereum/blob/b7e3dfc5a2bc7e2f4d653fbe0ec9774277a10643/core/execution.go#L138-L169
",2016-09-02 11:31:15,2016-09-02 11:31:15
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/244375794,https://github.com/hyperledger/burrow/pull/247#issuecomment-244375794,VoR0220,"The original EIP with all the specifications. https://github.com/ethereum/EIPs/issues/23
",2016-09-02 13:33:05,2016-09-02 13:33:05
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/244542658,https://github.com/hyperledger/burrow/pull/247#issuecomment-244542658,silasdavis,"I just want to emphasise the difference between `DELEGATECALL` and `CALLCODE` in the example I gave before. I think the following execution would occur with `CALLCODE`: 

| Stack | A | B | C |
| --- | --- | --- | --- |
| [] | n = 0, addr = nil | n = 0, addr = nil | n = 0, addr = nil |
| [CALL B] | n = 0, addr = nil | n = 0, addr = nil | n = 0, addr = nil |
| [CALLCODE C, CALL B] | n = 0, addr = nil | n = 1, addr = **B** | n = 0, addr = nil |

Do we agree?
",2016-09-03 12:03:53,2016-09-03 12:03:53
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/244613632,https://github.com/hyperledger/burrow/pull/247#issuecomment-244613632,benjaminbollen,"Yes, I agree that the stored address would be now stored as `B` as the message sender.
",2016-09-04 16:41:12,2016-09-04 16:41:12
https://api.github.com/repos/hyperledger/burrow/issues/247,https://api.github.com/repos/hyperledger/burrow/issues/comments/245242454,https://github.com/hyperledger/burrow/pull/247#issuecomment-245242454,silasdavis,"So other than my suggestion for a rewording of the comment describing the crucial implementation fact for DELEGATECALL, this looks good to me!

Great work Ben
",2016-09-07 10:40:31,2016-09-07 10:40:31
https://api.github.com/repos/hyperledger/burrow/issues/246,https://api.github.com/repos/hyperledger/burrow/issues/comments/262809229,https://github.com/hyperledger/burrow/issues/246#issuecomment-262809229,silasdavis,"This may be broader than area/EVM, that is TBC. We have various plans for event streams for domain events (like EVM events) scoped to participant/network level and consensus/governance events.",2016-11-24 16:09:47,2016-11-24 16:09:47
https://api.github.com/repos/hyperledger/burrow/issues/246,https://api.github.com/repos/hyperledger/burrow/issues/comments/262844814,https://github.com/hyperledger/burrow/issues/246#issuecomment-262844814,VoR0220,Agreed but in the meanwhile can we maintain the logging structure that the EVM has? Perhaps be able to return logs and make those automatically printable by eris-db particularly when interacting with EPM jobs. ,2016-11-24 21:08:55,2016-11-24 21:08:55
https://api.github.com/repos/hyperledger/burrow/issues/246,https://api.github.com/repos/hyperledger/burrow/issues/comments/368514064,https://github.com/hyperledger/burrow/issues/246#issuecomment-368514064,silasdavis,Ethereum stores Log directly in blocks (redundantly) making it queryable.,2018-02-26 14:06:35,2018-02-26 14:06:35
https://api.github.com/repos/hyperledger/burrow/issues/246,https://api.github.com/repos/hyperledger/burrow/issues/comments/393106613,https://github.com/hyperledger/burrow/issues/246#issuecomment-393106613,compleatang,closing in favor of #658 ,2018-05-30 10:09:45,2018-05-30 10:09:45
https://api.github.com/repos/hyperledger/burrow/issues/245,https://api.github.com/repos/hyperledger/burrow/issues/comments/252034990,https://github.com/hyperledger/burrow/issues/245#issuecomment-252034990,NodeGuy,"Another request: https://support.erisindustries.com/helpdesk/tickets/387
",2016-10-06 17:38:49,2016-10-06 17:38:49
https://api.github.com/repos/hyperledger/burrow/issues/245,https://api.github.com/repos/hyperledger/burrow/issues/comments/253369335,https://github.com/hyperledger/burrow/issues/245#issuecomment-253369335,NodeGuy,"Another request: http://ethereum.stackexchange.com/questions/9188/is-there-a-way-to-view-all-events-on-all-blocks-for-eris-blockchain
",2016-10-12 23:31:59,2016-10-12 23:31:59
https://api.github.com/repos/hyperledger/burrow/issues/245,https://api.github.com/repos/hyperledger/burrow/issues/comments/380595489,https://github.com/hyperledger/burrow/issues/245#issuecomment-380595489,compleatang,Dealt with elsewhere,2018-04-11 21:05:34,2018-04-11 21:05:34
https://api.github.com/repos/hyperledger/burrow/issues/244,https://api.github.com/repos/hyperledger/burrow/issues/comments/245291696,https://github.com/hyperledger/burrow/issues/244#issuecomment-245291696,benjaminbollen,"fixed in #261 on develop
fixed in #247 on master
",2016-09-07 14:07:54,2016-09-07 14:07:54
https://api.github.com/repos/hyperledger/burrow/issues/243,https://api.github.com/repos/hyperledger/burrow/issues/comments/243070139,https://github.com/hyperledger/burrow/pull/243#issuecomment-243070139,benjaminbollen,"first addressing this in #247 on old tendermint
",2016-08-29 08:58:12,2016-08-29 08:58:12
https://api.github.com/repos/hyperledger/burrow/issues/243,https://api.github.com/repos/hyperledger/burrow/issues/comments/243172607,https://github.com/hyperledger/burrow/pull/243#issuecomment-243172607,benjaminbollen,"Thanks; I'll leave the branch, as for implementing `delegatecall` on `develop` / e-db 0.12.0-rc3 I will want to pull in your start-off commit.  Only for edb on `master` I had to do it in the godeps
",2016-08-29 16:15:29,2016-08-29 16:15:29
https://api.github.com/repos/hyperledger/burrow/issues/242,https://api.github.com/repos/hyperledger/burrow/issues/comments/242923731,https://github.com/hyperledger/burrow/pull/242#issuecomment-242923731,silasdavis,"@benjaminbollen just tagging you here because I have updated and expanded this pull request.
",2016-08-27 15:31:48,2016-08-27 15:31:48
https://api.github.com/repos/hyperledger/burrow/issues/242,https://api.github.com/repos/hyperledger/burrow/issues/comments/243069580,https://github.com/hyperledger/burrow/pull/242#issuecomment-243069580,benjaminbollen,"L very GTM
",2016-08-29 08:55:30,2016-08-29 08:55:30
https://api.github.com/repos/hyperledger/burrow/issues/242,https://api.github.com/repos/hyperledger/burrow/issues/comments/243237573,https://github.com/hyperledger/burrow/pull/242#issuecomment-243237573,silasdavis,":) 
",2016-08-29 20:00:24,2016-08-29 20:00:24
https://api.github.com/repos/hyperledger/burrow/issues/241,https://api.github.com/repos/hyperledger/burrow/issues/comments/241742955,https://github.com/hyperledger/burrow/pull/241#issuecomment-241742955,benjaminbollen,"tracked in #238 
",2016-08-23 14:09:29,2016-08-23 14:09:29
https://api.github.com/repos/hyperledger/burrow/issues/241,https://api.github.com/repos/hyperledger/burrow/issues/comments/241769857,https://github.com/hyperledger/burrow/pull/241#issuecomment-241769857,silasdavis,"Closing in favour of: https://github.com/eris-ltd/eris-db/pull/242 
",2016-08-23 15:26:52,2016-08-23 15:26:52
https://api.github.com/repos/hyperledger/burrow/issues/240,https://api.github.com/repos/hyperledger/burrow/issues/comments/242018549,https://github.com/hyperledger/burrow/pull/240#issuecomment-242018549,silasdavis,"Ok nice this makes loads of sense now I catch up
",2016-08-24 10:19:15,2016-08-24 10:19:15
https://api.github.com/repos/hyperledger/burrow/issues/239,https://api.github.com/repos/hyperledger/burrow/issues/comments/241547733,https://github.com/hyperledger/burrow/pull/239#issuecomment-241547733,silasdavis,"TestHTTPNameReg works for me, can you check that, otherwise happy to merge
",2016-08-22 20:56:51,2016-08-22 20:56:51
https://api.github.com/repos/hyperledger/burrow/issues/238,https://api.github.com/repos/hyperledger/burrow/issues/comments/243073440,https://github.com/hyperledger/burrow/issues/238#issuecomment-243073440,benjaminbollen,"Verified, all is back in order !
",2016-08-29 09:13:05,2016-08-29 09:13:05
https://api.github.com/repos/hyperledger/burrow/issues/237,https://api.github.com/repos/hyperledger/burrow/issues/comments/241484849,https://github.com/hyperledger/burrow/pull/237#issuecomment-241484849,benjaminbollen,"LGTM
",2016-08-22 17:21:20,2016-08-22 17:21:20
https://api.github.com/repos/hyperledger/burrow/issues/236,https://api.github.com/repos/hyperledger/burrow/issues/comments/241737411,https://github.com/hyperledger/burrow/issues/236#issuecomment-241737411,benjaminbollen,"#240 deprecates TENDERMINT_VERSION = 0.5.0
",2016-08-23 13:51:32,2016-08-23 13:51:32
https://api.github.com/repos/hyperledger/burrow/issues/236,https://api.github.com/repos/hyperledger/burrow/issues/comments/284125695,https://github.com/hyperledger/burrow/issues/236#issuecomment-284125695,zramsay,we're beyond this,2017-03-04 04:10:32,2017-03-04 04:10:32
https://api.github.com/repos/hyperledger/burrow/issues/235,https://api.github.com/repos/hyperledger/burrow/issues/comments/241394926,https://github.com/hyperledger/burrow/pull/235#issuecomment-241394926,benjaminbollen,"LGTM, but breaks API to clients (e-pm) and eris-db.js;  this is okay as 0.12.0 is a big transfer, but we need to coordinate.  Hence Im holding off merging and will ping @dennismckinnon @NodeGuy 
",2016-08-22 12:15:32,2016-08-22 12:15:32
https://api.github.com/repos/hyperledger/burrow/issues/235,https://api.github.com/repos/hyperledger/burrow/issues/comments/241677814,https://github.com/hyperledger/burrow/pull/235#issuecomment-241677814,silasdavis,"Contrary to what I had thought, 46657 did have a subscribe and unsubscribe websocket implementation here: https://github.com/eris-ltd/eris-db/blob/master/Godeps/_workspace/src/github.com/tendermint/tendermint/rpc/server/handlers.go#L331

This implementation only allows a single subscription to the same event from the same host. On the face of it that might seem okay, but it puts the onus on the client to maintain a global websocket connection pool per event and reuse/share the same one for the same event. This isn't terribly nice for writing less stateful Javascript apps and furthermore there is no warning that by re-registering the event will clobber any previous connections (they will no longer receive the event). This is because AddListener in go-events overwrites any existing callback:

```
func (cell *eventCell) AddListener(listenerID string, cb eventCallback) {
    cell.mtx.Lock()
    cell.listeners[listenerID] = cb
    cell.mtx.Unlock()
}
```
",2016-08-23 09:32:33,2016-08-23 09:32:33
https://api.github.com/repos/hyperledger/burrow/issues/235,https://api.github.com/repos/hyperledger/burrow/issues/comments/241680280,https://github.com/hyperledger/burrow/pull/235#issuecomment-241680280,benjaminbollen,"Your arguments are very strong; I will want to wait for develop to be green; then rerun this build and then Im happy to push forward on this.
",2016-08-23 09:42:29,2016-08-23 09:42:29
https://api.github.com/repos/hyperledger/burrow/issues/235,https://api.github.com/repos/hyperledger/burrow/issues/comments/241681655,https://github.com/hyperledger/burrow/pull/235#issuecomment-241681655,silasdavis,"I'm a bit worried about breaking compatibility, but using this approach the worst that happens is we break unsubscribe (they pass event name rather than subscription id, it's a no-op) -- something we have to rely on the clients doing anyway. Subscribe will work as before. And both methods have identical signatures so Unsubscribe will fail silently -- not the end of the world.
",2016-08-23 09:48:24,2016-08-23 09:48:24
https://api.github.com/repos/hyperledger/burrow/issues/235,https://api.github.com/repos/hyperledger/burrow/issues/comments/241681845,https://github.com/hyperledger/burrow/pull/235#issuecomment-241681845,silasdavis,"Actually I guess the JSON versions would break because the key name has changed from `event` to `subscriptionId`. The HTTP version will fail silently.
",2016-08-23 09:49:19,2016-08-23 09:49:19
https://api.github.com/repos/hyperledger/burrow/issues/235,https://api.github.com/repos/hyperledger/burrow/issues/comments/241682138,https://github.com/hyperledger/burrow/pull/235#issuecomment-241682138,silasdavis,"Rebased
",2016-08-23 09:50:32,2016-08-23 09:50:32
https://api.github.com/repos/hyperledger/burrow/issues/235,https://api.github.com/repos/hyperledger/burrow/issues/comments/241688562,https://github.com/hyperledger/burrow/pull/235#issuecomment-241688562,benjaminbollen,"LGTM
",2016-08-23 10:17:56,2016-08-23 10:17:56
https://api.github.com/repos/hyperledger/burrow/issues/234,https://api.github.com/repos/hyperledger/burrow/issues/comments/241370338,https://github.com/hyperledger/burrow/issues/234#issuecomment-241370338,silasdavis,"I'll fix shortly
",2016-08-22 10:14:19,2016-08-22 10:14:19
https://api.github.com/repos/hyperledger/burrow/issues/233,https://api.github.com/repos/hyperledger/burrow/issues/comments/241380202,https://github.com/hyperledger/burrow/pull/233#issuecomment-241380202,benjaminbollen,"FIPF
",2016-08-22 11:01:46,2016-08-22 11:01:46
https://api.github.com/repos/hyperledger/burrow/issues/232,https://api.github.com/repos/hyperledger/burrow/issues/comments/241390469,https://github.com/hyperledger/burrow/pull/232#issuecomment-241390469,silasdavis,"@benjaminbollen Stopped panicking 
",2016-08-22 11:53:12,2016-08-22 11:53:12
https://api.github.com/repos/hyperledger/burrow/issues/232,https://api.github.com/repos/hyperledger/burrow/issues/comments/241392799,https://github.com/hyperledger/burrow/pull/232#issuecomment-241392799,benjaminbollen,"LGTM
",2016-08-22 12:05:00,2016-08-22 12:05:00
https://api.github.com/repos/hyperledger/burrow/issues/231,https://api.github.com/repos/hyperledger/burrow/issues/comments/241368026,https://github.com/hyperledger/burrow/pull/231#issuecomment-241368026,benjaminbollen,"A mock of ErisMintPipe exists in `/tests/mock`
",2016-08-22 10:03:44,2016-08-22 10:03:44
https://api.github.com/repos/hyperledger/burrow/issues/231,https://api.github.com/repos/hyperledger/burrow/issues/comments/241368675,https://github.com/hyperledger/burrow/pull/231#issuecomment-241368675,benjaminbollen,"LGTM; I would even phrase it stronger than you have in the issue description: the correct implementation of `BlockchainInfo` is over the `consensusEngine` interface.  The unit tests should be both purely at RPC level with a hollow mock of Pipe; and at the consensusEngine interface, with a mock of consensusEngine
",2016-08-22 10:06:37,2016-08-22 10:06:37
https://api.github.com/repos/hyperledger/burrow/issues/231,https://api.github.com/repos/hyperledger/burrow/issues/comments/241369166,https://github.com/hyperledger/burrow/pull/231#issuecomment-241369166,benjaminbollen,"I noticed that the tests of Event are broken; this is - by assumption - unrelated to the current PR, and has been merged under the radar in a previous PR when touching on the events structure.
",2016-08-22 10:08:59,2016-08-22 10:08:59
https://api.github.com/repos/hyperledger/burrow/issues/229,https://api.github.com/repos/hyperledger/burrow/issues/comments/241362873,https://github.com/hyperledger/burrow/pull/229#issuecomment-241362873,silasdavis,"I'd like to separately merge this, and have the more general solution discussed there
",2016-08-22 09:42:25,2016-08-22 09:42:25
https://api.github.com/repos/hyperledger/burrow/issues/229,https://api.github.com/repos/hyperledger/burrow/issues/comments/241367023,https://github.com/hyperledger/burrow/pull/229#issuecomment-241367023,benjaminbollen,"Given the design of Tendermint Socket Protocol, we need to raise an issue and harmonise this with FlushSync (and FlushAsync); but in general I also do not see that this introduces an error in the logic (as I initially was concerned about in your previous PR), and for summary of arguments see #228.

I think you are right that we should drive the logic as close as possible to the blocktick.
",2016-08-22 09:59:10,2016-08-22 09:59:10
https://api.github.com/repos/hyperledger/burrow/issues/229,https://api.github.com/repos/hyperledger/burrow/issues/comments/241367179,https://github.com/hyperledger/burrow/pull/229#issuecomment-241367179,benjaminbollen,"Looks good to me, but we should keep this change in the back of our heads as we evaluate it in depth.
",2016-08-22 09:59:52,2016-08-22 09:59:52
https://api.github.com/repos/hyperledger/burrow/issues/228,https://api.github.com/repos/hyperledger/burrow/issues/comments/241195610,https://github.com/hyperledger/burrow/issues/228#issuecomment-241195610,silasdavis,"Great this captures what we spoke about perfectly.
",2016-08-20 11:59:24,2016-08-20 11:59:30
https://api.github.com/repos/hyperledger/burrow/issues/228,https://api.github.com/repos/hyperledger/burrow/issues/comments/380597910,https://github.com/hyperledger/burrow/issues/228#issuecomment-380597910,compleatang,Handled in new concurrency paradigm.,2018-04-11 21:14:45,2018-04-11 21:14:45
https://api.github.com/repos/hyperledger/burrow/issues/227,https://api.github.com/repos/hyperledger/burrow/issues/comments/241008464,https://github.com/hyperledger/burrow/issues/227#issuecomment-241008464,benjaminbollen,"Thanks @Fukunaga42 

I opened a mirror issue in eris-db.js, where it should be discussed first: https://github.com/eris-ltd/eris-db.js/issues/36

We can keep both issues to track the solution on both sides of the connection. 
",2016-08-19 12:44:33,2016-08-19 12:44:33
https://api.github.com/repos/hyperledger/burrow/issues/227,https://api.github.com/repos/hyperledger/burrow/issues/comments/245412282,https://github.com/hyperledger/burrow/issues/227#issuecomment-245412282,NodeGuy,"@dennismckinnon What's the expected behavior here?  Are we confusing users by not explaining that they need to send ether to the new account?
",2016-09-07 20:43:32,2016-09-07 20:43:32
https://api.github.com/repos/hyperledger/burrow/issues/227,https://api.github.com/repos/hyperledger/burrow/issues/comments/245419443,https://github.com/hyperledger/burrow/issues/227#issuecomment-245419443,Fukunaga42,"@NodeGuy  Hi, yes the confusion come from this page:
https://docs.erisindustries.com/tutorials/advanced/chain-maintaining/
on the ""Maintenance Task 1: Adding Actors"" Part
You run `eris keys gen` and you run `mintx permission set_base` on the new address generated, and the result seems to be that the new adress is deploy on the blockchain.
",2016-09-07 21:07:13,2016-09-07 21:07:13
https://api.github.com/repos/hyperledger/burrow/issues/227,https://api.github.com/repos/hyperledger/burrow/issues/comments/253482870,https://github.com/hyperledger/burrow/issues/227#issuecomment-253482870,silasdavis,"I'm closing this as I think it should be addressed by a rework of the docs: https://github.com/eris-ltd/monax.io/issues/118
",2016-10-13 11:04:14,2016-10-13 11:04:14
https://api.github.com/repos/hyperledger/burrow/issues/226,https://api.github.com/repos/hyperledger/burrow/issues/comments/241011059,https://github.com/hyperledger/burrow/pull/226#issuecomment-241011059,benjaminbollen,"@silasdavis can you git force this chance on eris-mint into a separate PR; then Im happy to review and merge the test fixes;  with regards to the erismint change, I want to hold a reservation; elaborate discussion and maybe we can even work on a unit test
",2016-08-19 12:56:48,2016-08-19 12:56:48
https://api.github.com/repos/hyperledger/burrow/issues/226,https://api.github.com/repos/hyperledger/burrow/issues/comments/241013535,https://github.com/hyperledger/burrow/pull/226#issuecomment-241013535,benjaminbollen,"""Tests part"" looks good to me
",2016-08-19 13:08:16,2016-08-19 13:08:16
https://api.github.com/repos/hyperledger/burrow/issues/226,https://api.github.com/repos/hyperledger/burrow/issues/comments/241039817,https://github.com/hyperledger/burrow/pull/226#issuecomment-241039817,benjaminbollen,"LGTM, or FIPF
",2016-08-19 14:51:14,2016-08-19 14:51:14
https://api.github.com/repos/hyperledger/burrow/issues/223,https://api.github.com/repos/hyperledger/burrow/issues/comments/252865027,https://github.com/hyperledger/burrow/issues/223#issuecomment-252865027,compleatang,"is this staying in 0.12.0 and/or done? or are we moving to 0.12.1|0.16.0?
",2016-10-11 09:54:52,2016-10-11 09:54:52
https://api.github.com/repos/hyperledger/burrow/issues/223,https://api.github.com/repos/hyperledger/burrow/issues/comments/252918204,https://github.com/hyperledger/burrow/issues/223#issuecomment-252918204,silasdavis,"I'm a little unclear exactly what this is asking for
",2016-10-11 13:35:42,2016-10-11 13:35:42
https://api.github.com/repos/hyperledger/burrow/issues/223,https://api.github.com/repos/hyperledger/burrow/issues/comments/252918944,https://github.com/hyperledger/burrow/issues/223#issuecomment-252918944,benjaminbollen,"To be done, and it is super, crystal clear :)
",2016-10-11 13:38:35,2016-10-11 13:38:35
https://api.github.com/repos/hyperledger/burrow/issues/223,https://api.github.com/repos/hyperledger/burrow/issues/comments/252920448,https://github.com/hyperledger/burrow/issues/223#issuecomment-252920448,silasdavis,"Let me point out the bit that is unclear:

> Run integration tests for in-process tendermint as consumer unit tests in /consensus/tendermint asserting advertised behaviour from Tendermint
",2016-10-11 13:44:02,2016-10-11 13:44:02
https://api.github.com/repos/hyperledger/burrow/issues/223,https://api.github.com/repos/hyperledger/burrow/issues/comments/262807948,https://github.com/hyperledger/burrow/issues/223#issuecomment-262807948,silasdavis,Closing this in favour of #405 and #406 ,2016-11-24 16:04:15,2016-11-24 16:04:15
https://api.github.com/repos/hyperledger/burrow/issues/215,https://api.github.com/repos/hyperledger/burrow/issues/comments/240125774,https://github.com/hyperledger/burrow/issues/215#issuecomment-240125774,silasdavis,"Suspect this a race on go-wire RegisterInterface, or at least them fighting each other through the reflection type and values of objects
",2016-08-16 14:49:33,2016-08-16 14:49:33
https://api.github.com/repos/hyperledger/burrow/issues/214,https://api.github.com/repos/hyperledger/burrow/issues/comments/240136937,https://github.com/hyperledger/burrow/issues/214#issuecomment-240136937,benjaminbollen,"#215 indicates possible race condition in go-wire RegisterInterface
",2016-08-16 15:23:06,2016-08-16 15:23:06
https://api.github.com/repos/hyperledger/burrow/issues/214,https://api.github.com/repos/hyperledger/burrow/issues/comments/380596892,https://github.com/hyperledger/burrow/issues/214#issuecomment-380596892,compleatang,Cloaing. Covered elsewhere.,2018-04-11 21:10:48,2018-04-11 21:10:48
https://api.github.com/repos/hyperledger/burrow/issues/213,https://api.github.com/repos/hyperledger/burrow/issues/comments/253592906,https://github.com/hyperledger/burrow/issues/213#issuecomment-253592906,compleatang,"Putting the FT in BFT!
",2016-10-13 18:10:40,2016-10-13 18:10:40
https://api.github.com/repos/hyperledger/burrow/issues/213,https://api.github.com/repos/hyperledger/burrow/issues/comments/262804635,https://github.com/hyperledger/burrow/issues/213#issuecomment-262804635,silasdavis,@benjaminbollen I don't understand the goal and scope of this ticket from the description. Could you clarify or simplify or expand on it?,2016-11-24 15:47:48,2016-11-24 15:47:48
https://api.github.com/repos/hyperledger/burrow/issues/212,https://api.github.com/repos/hyperledger/burrow/issues/comments/253593605,https://github.com/hyperledger/burrow/issues/212#issuecomment-253593605,compleatang,"ensure that, as a good open source project, we are publishing these results. 
",2016-10-13 18:13:07,2016-10-13 18:13:07
https://api.github.com/repos/hyperledger/burrow/issues/212,https://api.github.com/repos/hyperledger/burrow/issues/comments/479541803,https://github.com/hyperledger/burrow/issues/212#issuecomment-479541803,compleatang,"this issue is largely finalized with the work against caliper and our internal stress tests. although we are blocked by the implementation of a hyperledger CI system for operating stress networks I think we should close this issue for now. 

see: https://lists.hyperledger.org/g/tsc/topic/30876684 for future work.",2019-04-03 15:34:35,2019-04-03 15:34:35
https://api.github.com/repos/hyperledger/burrow/issues/211,https://api.github.com/repos/hyperledger/burrow/issues/comments/253593408,https://github.com/hyperledger/burrow/issues/211#issuecomment-253593408,compleatang,"blocked until post Jenkins migration.
",2016-10-13 18:12:25,2016-10-13 18:12:25
https://api.github.com/repos/hyperledger/burrow/issues/206,https://api.github.com/repos/hyperledger/burrow/issues/comments/239805313,https://github.com/hyperledger/burrow/pull/206#issuecomment-239805313,benjaminbollen,"LGTM
",2016-08-15 13:45:38,2016-08-15 13:45:38
https://api.github.com/repos/hyperledger/burrow/issues/205,https://api.github.com/repos/hyperledger/burrow/issues/comments/252865145,https://github.com/hyperledger/burrow/issues/205#issuecomment-252865145,compleatang,"this is done, no?
",2016-10-11 09:55:25,2016-10-11 09:55:25
https://api.github.com/repos/hyperledger/burrow/issues/205,https://api.github.com/repos/hyperledger/burrow/issues/comments/252870524,https://github.com/hyperledger/burrow/issues/205#issuecomment-252870524,benjaminbollen,"It's not checked off on being carried onto erismint/develop 0.12.0-rc3 so will check that.

There is an ""overview issue"" at https://github.com/eris-ltd/eris-db/issues/259
",2016-10-11 10:16:06,2016-10-11 10:16:06
https://api.github.com/repos/hyperledger/burrow/issues/205,https://api.github.com/repos/hyperledger/burrow/issues/comments/252924880,https://github.com/hyperledger/burrow/issues/205#issuecomment-252924880,benjaminbollen,"e-pm test needs to be implemented/asserted; bugfix has been applied to 0.12.0-rc3; moving the e-pm test forward to 0.12.1
",2016-10-11 13:59:34,2016-10-11 14:00:22
https://api.github.com/repos/hyperledger/burrow/issues/205,https://api.github.com/repos/hyperledger/burrow/issues/comments/262802056,https://github.com/hyperledger/burrow/issues/205#issuecomment-262802056,silasdavis,@benjaminbollen is this done now?,2016-11-24 15:34:38,2016-11-24 15:34:38
https://api.github.com/repos/hyperledger/burrow/issues/202,https://api.github.com/repos/hyperledger/burrow/issues/comments/239477056,https://github.com/hyperledger/burrow/issues/202#issuecomment-239477056,silasdavis,"Need to look into panic from TestHTTPNameReg so that we don't crash test suite, can add additional issues to this epic once that is working
",2016-08-12 15:25:40,2016-08-12 15:25:40
https://api.github.com/repos/hyperledger/burrow/issues/201,https://api.github.com/repos/hyperledger/burrow/issues/comments/240120972,https://github.com/hyperledger/burrow/issues/201#issuecomment-240120972,silasdavis,"We define some event types in our package `txs`. But we deserialise them into `TMEventData` in subscribe which is owned by tendermint. Probably need to take control of that interface, or else use tendermint's events. See `EventDataTx` for example defined:

https://github.com/eris-ltd/eris-db/blob/develop/txs/events.go#L74

and here:
https://github.com/tendermint/tendermint/blob/64f773c88644650f0ca550ee744ad9adada5e994/types/events.go#L74 
",2016-08-16 14:34:27,2016-08-16 14:34:27
https://api.github.com/repos/hyperledger/burrow/issues/201,https://api.github.com/repos/hyperledger/burrow/issues/comments/240121496,https://github.com/hyperledger/burrow/issues/201#issuecomment-240121496,benjaminbollen,"Yes, this is a bug in the TMSP refactor;  this has been copied and should be fully owned from `txs.events`
",2016-08-16 14:36:10,2016-08-16 14:36:10
https://api.github.com/repos/hyperledger/burrow/issues/201,https://api.github.com/repos/hyperledger/burrow/issues/comments/240121790,https://github.com/hyperledger/burrow/issues/201#issuecomment-240121790,benjaminbollen,"Possibly, for TMSP (which has the log field), we may look to add the log field to the txs.events type?
",2016-08-16 14:37:08,2016-08-16 14:37:08
https://api.github.com/repos/hyperledger/burrow/issues/199,https://api.github.com/repos/hyperledger/burrow/issues/comments/239419501,https://github.com/hyperledger/burrow/pull/199#issuecomment-239419501,benjaminbollen,"asserted only formatting; LGTM
",2016-08-12 11:03:59,2016-08-12 11:03:59
https://api.github.com/repos/hyperledger/burrow/issues/198,https://api.github.com/repos/hyperledger/burrow/issues/comments/238661014,https://github.com/hyperledger/burrow/pull/198#issuecomment-238661014,silasdavis,"I've split this commit to remove some of the incidental cruft
",2016-08-09 19:18:19,2016-08-09 19:18:19
https://api.github.com/repos/hyperledger/burrow/issues/198,https://api.github.com/repos/hyperledger/burrow/issues/comments/239126505,https://github.com/hyperledger/burrow/pull/198#issuecomment-239126505,benjaminbollen,"also correct the signature

``` github.com/eris-ltd/eris-db/test/mock
test/mock/pipe.go:45: cannot use eventer (type *eventer) as type event.EventEmitter in field value:
    *eventer does not implement event.EventEmitter (wrong type for Subscribe method)
        have Subscribe(string, string, func(events.EventData)) (bool, error)
        want Subscribe(string, string, func(events.EventData)) error
```
",2016-08-11 10:36:58,2016-08-11 10:37:11
https://api.github.com/repos/hyperledger/burrow/issues/198,https://api.github.com/repos/hyperledger/burrow/issues/comments/239126915,https://github.com/hyperledger/burrow/pull/198#issuecomment-239126915,benjaminbollen,"and

`````` github.com/eris-ltd/eris-db/event
event/event_cache_test.go:79: cannot use mee (type *mockEventEmitter) as type EventEmitter in argument to NewEventSubscriptions:
    *mockEventEmitter does not implement EventEmitter (wrong type for Subscribe method)
        have Subscribe(string, string, func(events.EventData)) (bool, error)
        want Subscribe(string, string, func(events.EventData)) error
event/event_cache_test.go:124: cannot use mee (type *mockEventEmitter) as type EventEmitter in argument to NewEventSubscriptions:
    *mockEventEmitter does not implement EventEmitter (wrong type for Subscribe method)
        have Subscribe(string, string, func(events.EventData)) (bool, error)
        want Subscribe(string, string, func(events.EventData)) error
event/event_cache_test.go:173: cannot use mee (type *mockEventEmitter) as type EventEmitter in argument to NewEventSubscriptions:
    *mockEventEmitter does not implement EventEmitter (wrong type for Subscribe method)
        have Subscribe(string, string, func(events.EventData)) (bool, error)
        want Subscribe(string, string, func(events.EventData)) error
FAIL    github.com/eris-ltd/eris-db/event [build failed]```
``````
",2016-08-11 10:39:22,2016-08-11 10:39:22
https://api.github.com/repos/hyperledger/burrow/issues/198,https://api.github.com/repos/hyperledger/burrow/issues/comments/239127617,https://github.com/hyperledger/burrow/pull/198#issuecomment-239127617,benjaminbollen,"and trivially 

``` github.com/eris-ltd/eris-db/rpc/tendermint/client
rpc/tendermint/client/client.go:4: imported and not used: ""fmt""
```

is causing these tests to not show up in the circle output
",2016-08-11 10:43:09,2016-08-11 10:44:18
https://api.github.com/repos/hyperledger/burrow/issues/198,https://api.github.com/repos/hyperledger/burrow/issues/comments/239187818,https://github.com/hyperledger/burrow/pull/198#issuecomment-239187818,benjaminbollen,"LGTM
",2016-08-11 15:00:05,2016-08-11 15:00:05
https://api.github.com/repos/hyperledger/burrow/issues/197,https://api.github.com/repos/hyperledger/burrow/issues/comments/238585978,https://github.com/hyperledger/burrow/issues/197#issuecomment-238585978,silasdavis,"@benjaminbollen 
",2016-08-09 15:15:05,2016-08-09 15:15:05
https://api.github.com/repos/hyperledger/burrow/issues/197,https://api.github.com/repos/hyperledger/burrow/issues/comments/239486492,https://github.com/hyperledger/burrow/issues/197#issuecomment-239486492,silasdavis,"Fixed by #198 
",2016-08-12 16:00:50,2016-08-12 16:00:50
https://api.github.com/repos/hyperledger/burrow/issues/195,https://api.github.com/repos/hyperledger/burrow/issues/comments/238506472,https://github.com/hyperledger/burrow/pull/195#issuecomment-238506472,benjaminbollen,"Great update already ! thanks
",2016-08-09 09:50:25,2016-08-09 09:50:25
https://api.github.com/repos/hyperledger/burrow/issues/194,https://api.github.com/repos/hyperledger/burrow/issues/comments/238016480,https://github.com/hyperledger/burrow/issues/194#issuecomment-238016480,zramsay,"duplicate of #148; eris-db will remain GPL3 for the foreseeable future. Please see [this post](https://db.erisindustries.com/products/2015/08/30/on-licensing/) for our rationale.
",2016-08-06 10:14:01,2016-08-06 10:14:01
https://api.github.com/repos/hyperledger/burrow/issues/194,https://api.github.com/repos/hyperledger/burrow/issues/comments/284118904,https://github.com/hyperledger/burrow/issues/194#issuecomment-284118904,zramsay,"@sirinath you'll be glad to hear we've relicensed to Apache 2:
https://github.com/eris-ltd/eris-db/blob/master/license.md",2017-03-04 02:13:30,2017-03-04 02:13:30
https://api.github.com/repos/hyperledger/burrow/issues/193,https://api.github.com/repos/hyperledger/burrow/issues/comments/237519153,https://github.com/hyperledger/burrow/issues/193#issuecomment-237519153,benjaminbollen,"follows up on #120; merged into master on #192 
",2016-08-04 10:47:22,2016-08-04 10:47:22
https://api.github.com/repos/hyperledger/burrow/issues/193,https://api.github.com/repos/hyperledger/burrow/issues/comments/252865288,https://github.com/hyperledger/burrow/issues/193#issuecomment-252865288,compleatang,"this appears done and can be closed no?
",2016-10-11 09:55:58,2016-10-11 09:55:58
https://api.github.com/repos/hyperledger/burrow/issues/192,https://api.github.com/repos/hyperledger/burrow/issues/comments/237517938,https://github.com/hyperledger/burrow/pull/192#issuecomment-237517938,benjaminbollen,"Tested locally to assert solution to #120 on master 0.11.4 (up to 0.12.0-rc2)

closes #191 as redundant
",2016-08-04 10:41:14,2016-08-04 10:41:14
https://api.github.com/repos/hyperledger/burrow/issues/190,https://api.github.com/repos/hyperledger/burrow/issues/comments/262801881,https://github.com/hyperledger/burrow/issues/190#issuecomment-262801881,silasdavis,@benjaminbollen can you explain a bit more about why we would want to do this?,2016-11-24 15:33:47,2016-11-24 15:33:47
https://api.github.com/repos/hyperledger/burrow/issues/189,https://api.github.com/repos/hyperledger/burrow/issues/comments/253592167,https://github.com/hyperledger/burrow/issues/189#issuecomment-253592167,compleatang,"Ben, is this done?
",2016-10-13 18:07:55,2016-10-13 18:07:55
https://api.github.com/repos/hyperledger/burrow/issues/189,https://api.github.com/repos/hyperledger/burrow/issues/comments/262801645,https://github.com/hyperledger/burrow/issues/189#issuecomment-262801645,silasdavis,"@benjaminbollen can you elaborate, also does this relate to: #149 or #188 ? ",2016-11-24 15:32:38,2016-11-24 15:32:38
https://api.github.com/repos/hyperledger/burrow/issues/188,https://api.github.com/repos/hyperledger/burrow/issues/comments/240167061,https://github.com/hyperledger/burrow/issues/188#issuecomment-240167061,benjaminbollen,"https://github.com/eris-ltd/eris-pm/issues/192
",2016-08-16 17:00:00,2016-08-16 17:00:00
https://api.github.com/repos/hyperledger/burrow/issues/188,https://api.github.com/repos/hyperledger/burrow/issues/comments/262801034,https://github.com/hyperledger/burrow/issues/188#issuecomment-262801034,silasdavis,"@benjaminbollen the eris-pm issue link is dead. Can you comment on whether this is still a live issue, also does it relate to #149 ? If so can we merge the issues.

If it is live then we should transcribe the code snippets and text in the PDF to markdown and replace the link to a PDF with the text therein. If it is not let's close this.",2016-11-24 15:29:43,2016-11-24 15:31:05
https://api.github.com/repos/hyperledger/burrow/issues/187,https://api.github.com/repos/hyperledger/burrow/issues/comments/243261025,https://github.com/hyperledger/burrow/pull/187#issuecomment-243261025,VoR0220,"one thing this needs is a getChainID method. 
",2016-08-29 21:23:35,2016-08-29 21:23:35
https://api.github.com/repos/hyperledger/burrow/issues/187,https://api.github.com/repos/hyperledger/burrow/issues/comments/243261306,https://github.com/hyperledger/burrow/pull/187#issuecomment-243261306,VoR0220,"or a chain status method that only needs the address of the chain.
",2016-08-29 21:24:42,2016-08-29 21:24:42
https://api.github.com/repos/hyperledger/burrow/issues/187,https://api.github.com/repos/hyperledger/burrow/issues/comments/245300485,https://github.com/hyperledger/burrow/pull/187#issuecomment-245300485,benjaminbollen,"additional requirements (other than given by mint-client) will be tracked in #264 
",2016-09-07 14:35:30,2016-09-07 14:35:30
https://api.github.com/repos/hyperledger/burrow/issues/187,https://api.github.com/repos/hyperledger/burrow/issues/comments/247211160,https://github.com/hyperledger/burrow/pull/187#issuecomment-247211160,benjaminbollen,"has transaction factory in `client/core` for Send, Call, Name, and Permissions; with very simple test framework for construction.  This unit test framework can significantly be improved, and should be.

Tomorrow I will open a new PR to expose the RPC functions that are needed for e-pm @VoR0220 ; see line comment for `GetAccount`
",2016-09-15 01:54:21,2016-09-15 01:54:21
https://api.github.com/repos/hyperledger/burrow/issues/187,https://api.github.com/repos/hyperledger/burrow/issues/comments/247361831,https://github.com/hyperledger/burrow/pull/187#issuecomment-247361831,silasdavis,"LGTM
",2016-09-15 15:28:38,2016-09-15 15:28:38
https://api.github.com/repos/hyperledger/burrow/issues/185,https://api.github.com/repos/hyperledger/burrow/issues/comments/236366750,https://github.com/hyperledger/burrow/issues/185#issuecomment-236366750,benjaminbollen,"Why what?
",2016-07-30 13:59:23,2016-07-30 13:59:23
https://api.github.com/repos/hyperledger/burrow/issues/185,https://api.github.com/repos/hyperledger/burrow/issues/comments/236366782,https://github.com/hyperledger/burrow/issues/185#issuecomment-236366782,dennismckinnon,"cause you know... things
",2016-07-30 13:59:56,2016-07-30 13:59:56
https://api.github.com/repos/hyperledger/burrow/issues/185,https://api.github.com/repos/hyperledger/burrow/issues/comments/236380617,https://github.com/hyperledger/burrow/issues/185#issuecomment-236380617,silasdavis,"I wish all bugs were reported like this
",2016-07-30 18:13:39,2016-07-30 18:13:39
https://api.github.com/repos/hyperledger/burrow/issues/185,https://api.github.com/repos/hyperledger/burrow/issues/comments/236380852,https://github.com/hyperledger/burrow/issues/185#issuecomment-236380852,dennismckinnon,"Thanks for taking this on Silas
",2016-07-30 18:18:40,2016-07-30 18:18:40
https://api.github.com/repos/hyperledger/burrow/issues/185,https://api.github.com/repos/hyperledger/burrow/issues/comments/236951445,https://github.com/hyperledger/burrow/issues/185#issuecomment-236951445,benjaminbollen,"Just for sanities sake; the related question was: why are there different default account balance initiations.
",2016-08-02 15:59:46,2016-08-02 15:59:46
https://api.github.com/repos/hyperledger/burrow/issues/182,https://api.github.com/repos/hyperledger/burrow/issues/comments/235962631,https://github.com/hyperledger/burrow/pull/182#issuecomment-235962631,benjaminbollen,"Looks good to me;

At cost of greater overhead we can update at the call itself, but should be updated now as persisted state is nonce, balance, code and storage.
",2016-07-28 17:17:22,2016-07-28 17:17:22
https://api.github.com/repos/hyperledger/burrow/issues/181,https://api.github.com/repos/hyperledger/burrow/issues/comments/235771942,https://github.com/hyperledger/burrow/pull/181#issuecomment-235771942,benjaminbollen,"callee in vm is the current contract being executed; while this makes the test pass, it is not the correct answer to the problem.
",2016-07-28 01:32:19,2016-07-28 01:32:19
https://api.github.com/repos/hyperledger/burrow/issues/180,https://api.github.com/repos/hyperledger/burrow/issues/comments/262800406,https://github.com/hyperledger/burrow/issues/180#issuecomment-262800406,silasdavis,In hand with: #343 ,2016-11-24 15:26:30,2016-11-24 15:26:30
https://api.github.com/repos/hyperledger/burrow/issues/179,https://api.github.com/repos/hyperledger/burrow/issues/comments/235667343,https://github.com/hyperledger/burrow/issues/179#issuecomment-235667343,dennismckinnon,"Hello thank you for the question. The preferred method of calling the function in a contract is via the function attached to the contract object in eris contracts as this will automatically format the transaction according to the contract's abi and erisdb will not. For example if your contract has a function MyFunc(arg, arg2). And you got a contract object either from the .new or .at functions then contract.MyFunc(arg, arg2, callback(err, data)) would be the correct way to call it. You can also use contract.MyFunc.sendTransaction(...) to ensure you form a transaction as opposed to a query which would be contract.MyFunc.query(arg...). The difference between these two is that in a query no transaction is formed. The transaction is only simulated. This means that no state change will occur.

I hope this helped clear things up.
",2016-07-27 17:58:02,2016-07-27 17:58:02
https://api.github.com/repos/hyperledger/burrow/issues/179,https://api.github.com/repos/hyperledger/burrow/issues/comments/235671538,https://github.com/hyperledger/burrow/issues/179#issuecomment-235671538,getsachmail,"Thx for quick response, yes it helped.

Regard
Sachin

On 27-Jul-2016 11:28 PM, ""Dennis Mckinnon"" notifications@github.com wrote:

> Hello thank you for the question. The preferred method of calling the
> function in a contract is via the function attached to the contract object
> in eris contracts as this will automatically format the transaction
> according to the contract's abi and erisdb will not. For example if your
> contract has a function MyFunc(arg, arg2). And you got a contract object
> either from the .new or .at functions then contract.MyFunc(arg, arg2,
> callback(err, data)) would be the correct way to call it. You can also use
> contract.MyFunc.sendTransaction(...) to ensure you form a transaction as
> opposed to a query which would be contract.MyFunc.query(arg...). The
> difference between these two is that in a query no transaction is formed.
> The transaction is only simulated. This means that no state change will
> occur.
> 
> I hope this helped clear things up.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub, or mute the thread.
",2016-07-27 18:12:11,2016-07-27 18:12:11
https://api.github.com/repos/hyperledger/burrow/issues/179,https://api.github.com/repos/hyperledger/burrow/issues/comments/235837607,https://github.com/hyperledger/burrow/issues/179#issuecomment-235837607,getsachmail,"Contract
contract ChainCoin {  
    event Send(address from, address to, uint value);
    function send(address receiver, uint amount) {
        receiver.send(amount);
        Send(msg.sender, receiver, msg.value);
    }  
}

can you please help me with parameters

e.g.
ChainCoinObj.Send.sendTransaction(receiver, amount ,{from: '0x036a03fc47084741f83938296a1c8ef67f6e34fa', to: '0xa8ade7feab1ece71446bed25fa0cf6745c19c3d5', value: web3.toWei(1, ""ether"")}))
",2016-07-28 08:52:18,2016-07-28 08:52:18
https://api.github.com/repos/hyperledger/burrow/issues/179,https://api.github.com/repos/hyperledger/burrow/issues/comments/235934017,https://github.com/hyperledger/burrow/issues/179#issuecomment-235934017,getsachmail,"Do we need to send PrivateKey to sendTransaction method?
",2016-07-28 15:38:49,2016-07-28 15:38:49
https://api.github.com/repos/hyperledger/burrow/issues/178,https://api.github.com/repos/hyperledger/burrow/issues/comments/253384732,https://github.com/hyperledger/burrow/issues/178#issuecomment-253384732,compleatang,":+1: this may be closed no?
",2016-10-13 01:22:08,2016-10-13 01:22:08
https://api.github.com/repos/hyperledger/burrow/issues/177,https://api.github.com/repos/hyperledger/burrow/issues/comments/234540971,https://github.com/hyperledger/burrow/pull/177#issuecomment-234540971,benjaminbollen,"LGTM
",2016-07-22 13:17:18,2016-07-22 13:17:18
https://api.github.com/repos/hyperledger/burrow/issues/173,https://api.github.com/repos/hyperledger/burrow/issues/comments/233627766,https://github.com/hyperledger/burrow/pull/173#issuecomment-233627766,benjaminbollen,"will rebase
",2016-07-19 13:12:49,2016-07-19 13:12:49
https://api.github.com/repos/hyperledger/burrow/issues/171,https://api.github.com/repos/hyperledger/burrow/issues/comments/370229449,https://github.com/hyperledger/burrow/issues/171#issuecomment-370229449,silasdavis,Replaced by firehose: #658 ,2018-03-04 13:29:05,2018-03-04 13:29:05
https://api.github.com/repos/hyperledger/burrow/issues/170,https://api.github.com/repos/hyperledger/burrow/issues/comments/232970971,https://github.com/hyperledger/burrow/pull/170#issuecomment-232970971,benjaminbollen,"`FAIL   github.com/eris-ltd/eris-db/txs [build failed]`

```
# github.com/eris-ltd/eris-db/txs
txs/tx_test.go:41: undefined: bondTx
txs/tx_test.go:41: assignment count mismatch: 2 = 1
txs/tx_test.go:66: undefined: bondTx
txs/tx_test.go:66: assignment count mismatch: 2 = 1
txs/tx_test.go:89: undefined: bondTx
txs/tx_test.go:89: assignment count mismatch: 2 = 1
txs/tx_test.go:129: assignment count mismatch: 2 = 1
txs/tx_test.go:146: undefined: bondTx
txs/tx_test.go:146: assignment count mismatch: 2 = 1
txs/tx_test.go:163: undefined: bondTx
txs/tx_test.go:163: too many errors
```
",2016-07-15 14:44:29,2016-07-15 14:45:40
https://api.github.com/repos/hyperledger/burrow/issues/170,https://api.github.com/repos/hyperledger/burrow/issues/comments/232973527,https://github.com/hyperledger/burrow/pull/170#issuecomment-232973527,silasdavis,"Oops, yep fixed
",2016-07-15 14:53:08,2016-07-15 14:53:08
https://api.github.com/repos/hyperledger/burrow/issues/170,https://api.github.com/repos/hyperledger/burrow/issues/comments/233570092,https://github.com/hyperledger/burrow/pull/170#issuecomment-233570092,benjaminbollen,"LGTM
",2016-07-19 08:51:32,2016-07-19 08:51:32
https://api.github.com/repos/hyperledger/burrow/issues/168,https://api.github.com/repos/hyperledger/burrow/issues/comments/368511045,https://github.com/hyperledger/burrow/issues/168#issuecomment-368511045,silasdavis,Closing in favour of #670 ,2018-02-26 13:56:02,2018-02-26 13:56:02
https://api.github.com/repos/hyperledger/burrow/issues/167,https://api.github.com/repos/hyperledger/burrow/issues/comments/233057852,https://github.com/hyperledger/burrow/issues/167#issuecomment-233057852,ebuchman,"I think the only argument for not knowing is redundancy. it's redundant extra information added to _every_ tx in the chain. that said, I sympathize with the extra complexity of having to grab it from somewhere magic to validate a signature, but you'll need to do that anyways to validate that it's on the right chain. so in reality the only effect of this is to add useless data to the chain. 
",2016-07-15 20:10:58,2016-07-15 20:10:58
https://api.github.com/repos/hyperledger/burrow/issues/167,https://api.github.com/repos/hyperledger/burrow/issues/comments/233058167,https://github.com/hyperledger/burrow/issues/167#issuecomment-233058167,ebuchman,"actually, maybe there's a use case for knowing what chain a tx should be on just by looking at the tx, rather than checking the CanonicalBytes are for a chain you know about. but maybe you can make a privacy argument against that as well
",2016-07-15 20:12:23,2016-07-15 20:12:23
https://api.github.com/repos/hyperledger/burrow/issues/167,https://api.github.com/repos/hyperledger/burrow/issues/comments/233059021,https://github.com/hyperledger/burrow/issues/167#issuecomment-233059021,benjaminbollen,"at the interface level we don't need to affect the wire format.  That said, we can take a shorter hash of the `ChainIdHash`, and include it in the tx on the wire, especially for situations where multiple chains run on shared nodes.

@ebuchman can you point to where Tendermint adds a ""mapping-identifier"", assuming the need for this from GnuClear, or please correct me if Im wrong assuming that. 
",2016-07-15 20:16:15,2016-07-15 20:16:15
https://api.github.com/repos/hyperledger/burrow/issues/167,https://api.github.com/repos/hyperledger/burrow/issues/comments/233251676,https://github.com/hyperledger/burrow/issues/167#issuecomment-233251676,silasdavis,"As I think Ben is saying, we don't have to add the ChainId to the serialisation of a transaction, we could just grab the ChainId from somewhere suitable when you need to deserialise or create a new Tx in memory.

I'm not sure about this case, but I often like to follow the principle of including redundant information in a piece of data if it makes it more self-describing when divorced from it's context. Can be convenient when processing from another tool, when debugging, etc.
",2016-07-18 07:12:49,2016-07-18 07:12:49
https://api.github.com/repos/hyperledger/burrow/issues/167,https://api.github.com/repos/hyperledger/burrow/issues/comments/233309518,https://github.com/hyperledger/burrow/issues/167#issuecomment-233309518,AFDudley,"Doesn't the application have a protocol version in the transaction?

I haven't had any caffeine yet, but people shouldn't be process ""loose"" transactions outside of blocks unless it's crosstalk between two networks, in which case it seems reasonable to kick the identification into either the block(transaction log) and/or let the application manage it.
",2016-07-18 11:59:30,2016-07-18 11:59:30
https://api.github.com/repos/hyperledger/burrow/issues/167,https://api.github.com/repos/hyperledger/burrow/issues/comments/233331528,https://github.com/hyperledger/burrow/issues/167#issuecomment-233331528,silasdavis,"> Doesn't the application have a protocol version in the transaction?

I don't think so neither in the concrete Tx types or the block header... What would be the bearing of this if it did?

> but people shouldn't be process ""loose"" transactions outside

Perhaps not, my point doesn't really amount to much more than ""metadata is good""

Having the ChainId on the Tx interface is convenient whether or not we include on the wire. 
",2016-07-18 13:41:48,2016-07-18 13:41:48
https://api.github.com/repos/hyperledger/burrow/issues/167,https://api.github.com/repos/hyperledger/burrow/issues/comments/233345873,https://github.com/hyperledger/burrow/issues/167#issuecomment-233345873,ebuchman,"I see. I can see value in storing the chainID in the tx struct but not in the serialization for convenience. but no really ;)
",2016-07-18 14:31:40,2016-07-18 14:31:40
https://api.github.com/repos/hyperledger/burrow/issues/167,https://api.github.com/repos/hyperledger/burrow/issues/comments/380596476,https://github.com/hyperledger/burrow/issues/167#issuecomment-380596476,compleatang,Done,2018-04-11 21:09:14,2018-04-11 21:09:14
https://api.github.com/repos/hyperledger/burrow/issues/166,https://api.github.com/repos/hyperledger/burrow/issues/comments/380595956,https://github.com/hyperledger/burrow/issues/166#issuecomment-380595956,compleatang,Dealt with elsewhere,2018-04-11 21:07:15,2018-04-11 21:07:15
https://api.github.com/repos/hyperledger/burrow/issues/165,https://api.github.com/repos/hyperledger/burrow/issues/comments/361976672,https://github.com/hyperledger/burrow/issues/165#issuecomment-361976672,silasdavis,Replacing,2018-01-31 15:55:48,2018-01-31 15:55:48
https://api.github.com/repos/hyperledger/burrow/issues/165,https://api.github.com/repos/hyperledger/burrow/issues/comments/361976829,https://github.com/hyperledger/burrow/issues/165#issuecomment-361976829,silasdavis,Replacing https://github.com/hyperledger/burrow/issues/670,2018-01-31 15:56:12,2018-01-31 15:56:12
https://api.github.com/repos/hyperledger/burrow/issues/164,https://api.github.com/repos/hyperledger/burrow/issues/comments/235754455,https://github.com/hyperledger/burrow/issues/164#issuecomment-235754455,dennismckinnon,"All in one simplified test @j-h-scheufen @VoR0220 

[factory-test.zip](https://github.com/eris-ltd/eris-db/files/387389/factory-test.zip)
",2016-07-27 23:40:15,2016-07-27 23:40:15
https://api.github.com/repos/hyperledger/burrow/issues/164,https://api.github.com/repos/hyperledger/burrow/issues/comments/235759848,https://github.com/hyperledger/burrow/issues/164#issuecomment-235759848,dennismckinnon,"[factory-test.zip](https://github.com/eris-ltd/eris-db/files/387424/factory-test.zip)
better
",2016-07-28 00:10:05,2016-07-28 00:10:05
https://api.github.com/repos/hyperledger/burrow/issues/163,https://api.github.com/repos/hyperledger/burrow/issues/comments/262799829,https://github.com/hyperledger/burrow/issues/163#issuecomment-262799829,silasdavis,"@benjaminbollen please reopen if you think I'm being too hasty. I think this is interesting, but I am not sure how helpful it is to have it as an issue. This is certainly in the collective consciousness, perhaps a wiki or document could store this or an RFC. I am tending towards keeping only actionable issues open. ",2016-11-24 15:23:32,2016-11-24 15:23:32
https://api.github.com/repos/hyperledger/burrow/issues/162,https://api.github.com/repos/hyperledger/burrow/issues/comments/232030218,https://github.com/hyperledger/burrow/issues/162#issuecomment-232030218,silasdavis,"I'd probably make sure they both use the exact same serialisation code path first, but yes.
",2016-07-12 12:17:48,2016-07-12 12:17:48
https://api.github.com/repos/hyperledger/burrow/issues/162,https://api.github.com/repos/hyperledger/burrow/issues/comments/262796401,https://github.com/hyperledger/burrow/issues/162#issuecomment-262796401,silasdavis,Will be superseded by upcoming RPC work,2016-11-24 15:07:12,2016-11-24 15:07:12
https://api.github.com/repos/hyperledger/burrow/issues/160,https://api.github.com/repos/hyperledger/burrow/issues/comments/233579841,https://github.com/hyperledger/burrow/pull/160#issuecomment-233579841,silasdavis,"LGTM
",2016-07-19 09:32:12,2016-07-19 09:32:12
https://api.github.com/repos/hyperledger/burrow/issues/158,https://api.github.com/repos/hyperledger/burrow/issues/comments/231734676,https://github.com/hyperledger/burrow/pull/158#issuecomment-231734676,benjaminbollen,"LGTM; only gofmt changes
",2016-07-11 13:31:33,2016-07-11 13:31:33
https://api.github.com/repos/hyperledger/burrow/issues/157,https://api.github.com/repos/hyperledger/burrow/issues/comments/231753787,https://github.com/hyperledger/burrow/pull/157#issuecomment-231753787,silasdavis,"Roger that, MergeyMcMergeFace
",2016-07-11 14:37:44,2016-07-11 14:37:44
https://api.github.com/repos/hyperledger/burrow/issues/155,https://api.github.com/repos/hyperledger/burrow/issues/comments/246031925,https://github.com/hyperledger/burrow/issues/155#issuecomment-246031925,silasdavis,"I note playing with latest eris-db out of a container the default is to look for a 'config.toml'.

Are there any tickets for CLI to integrate with the new config of eris-db? Presumably this will involve copying a server config file into the chain dir and making sure the CLI calls the eris-db docker container with appropriate flags. Apologies if I've missed conversations about this but was just wondering. @benjaminbollen 
",2016-09-09 20:34:30,2016-09-09 20:35:11
https://api.github.com/repos/hyperledger/burrow/issues/155,https://api.github.com/repos/hyperledger/burrow/issues/comments/246048141,https://github.com/hyperledger/burrow/issues/155#issuecomment-246048141,compleatang,"Definitely. CLI side discussion here -> 

https://github.com/eris-ltd/eris-cli/issues/336
https://github.com/eris-ltd/eris-cli/issues/651
https://github.com/eris-ltd/eris-cli/issues/899
",2016-09-09 21:40:06,2016-09-09 21:40:06
https://api.github.com/repos/hyperledger/burrow/issues/155,https://api.github.com/repos/hyperledger/burrow/issues/comments/246063276,https://github.com/hyperledger/burrow/issues/155#issuecomment-246063276,VoR0220,"Epic time?
",2016-09-09 22:57:00,2016-09-09 22:57:00
https://api.github.com/repos/hyperledger/burrow/issues/154,https://api.github.com/repos/hyperledger/burrow/issues/comments/262796068,https://github.com/hyperledger/burrow/issues/154#issuecomment-262796068,silasdavis,@benjaminbollen I believe you have done this. Will this ticket progress or can we close and see work represented elsewhere?,2016-11-24 15:05:41,2016-11-24 15:05:49
https://api.github.com/repos/hyperledger/burrow/issues/154,https://api.github.com/repos/hyperledger/burrow/issues/comments/267236687,https://github.com/hyperledger/burrow/issues/154#issuecomment-267236687,AFDudley,doesn't Eris-marmont do this?,2016-12-15 04:34:38,2016-12-15 04:34:38
https://api.github.com/repos/hyperledger/burrow/issues/154,https://api.github.com/repos/hyperledger/burrow/issues/comments/361976173,https://github.com/hyperledger/burrow/issues/154#issuecomment-361976173,silasdavis,"This is still worth doing. The old work is not of any current relevance. The test client can be implemented using bosmarmot. It would involve writing a transaction recorder that captures transactions from EPM as JSON and records the account state after each call, then replays them against a running node. Then dumps the account state verifying the state hashes etc match the captured versions.

",2018-01-31 15:54:32,2018-01-31 15:54:32
https://api.github.com/repos/hyperledger/burrow/issues/153,https://api.github.com/repos/hyperledger/burrow/issues/comments/262795791,https://github.com/hyperledger/burrow/issues/153#issuecomment-262795791,silasdavis,"Sorry @zramsay :) cruel to be kind, please reopen if you have more information.",2016-11-24 15:04:20,2016-11-24 15:04:20
https://api.github.com/repos/hyperledger/burrow/issues/153,https://api.github.com/repos/hyperledger/burrow/issues/comments/263008777,https://github.com/hyperledger/burrow/issues/153#issuecomment-263008777,zramsay,"it's for https://github.com/eris-ltd/eris-cli/issues/984
The idea is an endpoint that performs a bunch of health checks and returns `ok` or `!ok`. It's supposed to be an emerging standard for golang/anylang APIs but maybe isn't picking up",2016-11-25 18:32:01,2016-11-25 18:32:01
https://api.github.com/repos/hyperledger/burrow/issues/153,https://api.github.com/repos/hyperledger/burrow/issues/comments/263009571,https://github.com/hyperledger/burrow/issues/153#issuecomment-263009571,silasdavis,"This is an interesting idea. There is an emerging theme of work around system observability. One way to frame system health is by implementing metrics and remote tracing and setting conditions on metrics remotely to define 'healthiness'. This may be complementary to this where the node itself has built-in understanding of its health. Though it needs to be able to introspect that information.

It could be convenient for health check endpoint when being managed behind a load balancer like those provided by AWS",2016-11-25 18:40:00,2016-11-25 18:49:04
https://api.github.com/repos/hyperledger/burrow/issues/153,https://api.github.com/repos/hyperledger/burrow/issues/comments/284125749,https://github.com/hyperledger/burrow/issues/153#issuecomment-284125749,zramsay,handled by https://github.com/eris-ltd/eris/issues/1011,2017-03-04 04:11:56,2017-03-04 04:11:56
https://api.github.com/repos/hyperledger/burrow/issues/151,https://api.github.com/repos/hyperledger/burrow/issues/comments/231733298,https://github.com/hyperledger/burrow/pull/151#issuecomment-231733298,benjaminbollen,"Remain commits can be merged through specific PRs
",2016-07-11 13:26:12,2016-07-11 13:26:12
https://api.github.com/repos/hyperledger/burrow/issues/150,https://api.github.com/repos/hyperledger/burrow/issues/comments/230558164,https://github.com/hyperledger/burrow/pull/150#issuecomment-230558164,silasdavis,"So... I'm not sure I'm going to code review this as is... this is organisational right?
",2016-07-05 18:14:39,2016-07-05 18:14:39
https://api.github.com/repos/hyperledger/burrow/issues/149,https://api.github.com/repos/hyperledger/burrow/issues/comments/229172716,https://github.com/hyperledger/burrow/issues/149#issuecomment-229172716,dennismckinnon,"Can you provide materials on how to re-create? epm.yaml, javascript and solidity files? a gist or pastebin would be sufficient and would be extremely helpful in tracking down the issue. I ran into something similar to this recently but was unable to isolate it from the project it occurred in.
",2016-06-28 20:28:45,2016-06-28 20:28:45
https://api.github.com/repos/hyperledger/burrow/issues/149,https://api.github.com/repos/hyperledger/burrow/issues/comments/230599938,https://github.com/hyperledger/burrow/issues/149#issuecomment-230599938,PathHomotopy,"Hi Dennis and Ben,

Issue recreation is below. Thanks!

Bytes32 Issue Replication:
I made a contract that takes in a bytes32 data type and returns it. The contract is interacted with via the NPM package eris-contracts. After running an application in javascript that interacts with the contract, a null type is returned rather than the input.
I did the same thing with type string, but with string, no null type is returned. Rather, the input is correctly returned. This contract is also below.

epm.yaml:
```yaml
jobs:

- name: deployStorageK
  job:
    deploy:
      contract: testing.sol
      wait: true
```

JAVASCRIPT APPLICATION:
```javascript
'use strict'

//for calling contract:
var contracts = require('eris-contracts')
var fs = require('fs')
var http = require('http')
var address = require('./epm.json').deployStorageK
var abi = JSON.parse(fs.readFileSync('./abi/' + address, 'utf8'))
var accounts = require('./accounts.json')
var chainUrl
var manager
var contract


var request = require('request');


//API for chain
chainUrl = 'http://localhost:1337/rpc'
//instantiate contract object manager (uses chain URL and account data)
manager = contracts.newContractManagerDev(chainUrl, accounts.demochain_full_000)


//Make the contract object using ABI and address of deployed contract
contract = manager.newContractFactory(abi).at(address)


contract.passVal(""this is of type bytes32"",function(error,result){
        console.log(result);
})
```

CONTRACT:
```javascript
contract testing{

function testing()
{
}

function passVal(bytes32 val) returns (bytes32 theVal)
{
        theVal = val;
}


}
```

When the contract above has the type changed from bytes32 to string, it instead works. Here it is:
```javascript
contract testing{

function testing()
{
}

function passVal(string val) returns (string theVal)
{
        theVal = val;
}


}
```",2016-07-05 20:54:12,2016-11-24 14:58:13
https://api.github.com/repos/hyperledger/burrow/issues/149,https://api.github.com/repos/hyperledger/burrow/issues/comments/233682982,https://github.com/hyperledger/burrow/issues/149#issuecomment-233682982,benjaminbollen,"Can you help me out here on understanding the issue.

```
contract.passVal(""this is of type bytes32"",function(error,result){
        console.log(result);
})
```

here you're passing a string to a function that expects a byte32, but you're not sending it hex characters.  The string would not be auto-converted to hex (as it would be impossible to determine whether the string already is hex or should be converted. )  Arguably we should error more clearly here.

Please tell me if I am fully and completely misunderstanding the problem at hand here. 
",2016-07-19 16:08:28,2016-07-19 16:08:39
https://api.github.com/repos/hyperledger/burrow/issues/149,https://api.github.com/repos/hyperledger/burrow/issues/comments/235696689,https://github.com/hyperledger/burrow/issues/149#issuecomment-235696689,PathHomotopy,"Are you sure bytes32 only takes in hex? We are able to put nonhex strings in bytes32 in Eris.
",2016-07-27 19:40:25,2016-07-27 19:40:25
https://api.github.com/repos/hyperledger/burrow/issues/149,https://api.github.com/repos/hyperledger/burrow/issues/comments/262795144,https://github.com/hyperledger/burrow/issues/149#issuecomment-262795144,silasdavis,@NodeGuy could you take a look at this. Is it possible to send a string and have it interpreted as bytes32? If it is then I expect it should not be. How would you send this. Would like to close this issue.,2016-11-24 15:00:51,2016-11-24 15:00:51
https://api.github.com/repos/hyperledger/burrow/issues/149,https://api.github.com/repos/hyperledger/burrow/issues/comments/263038314,https://github.com/hyperledger/burrow/issues/149#issuecomment-263038314,NodeGuy,I don't know if this is causing the problem but formatting of `bytes` types was broken in web3 until they accepted [my pull request](https://github.com/ethereum/web3.js/pull/520) to fix it yesterday.  I'm doing some more work on web3 in this area and when I've finished I'll take a look at this.,2016-11-26 01:51:13,2016-11-26 01:51:13
https://api.github.com/repos/hyperledger/burrow/issues/149,https://api.github.com/repos/hyperledger/burrow/issues/comments/263043928,https://github.com/hyperledger/burrow/issues/149#issuecomment-263043928,VoR0220,Great work @NodeGuy ! ,2016-11-26 04:44:35,2016-11-26 04:44:35
https://api.github.com/repos/hyperledger/burrow/issues/149,https://api.github.com/repos/hyperledger/burrow/issues/comments/264342722,https://github.com/hyperledger/burrow/issues/149#issuecomment-264342722,NodeGuy,Thank you!,2016-12-02 00:56:02,2016-12-02 00:56:02
https://api.github.com/repos/hyperledger/burrow/issues/148,https://api.github.com/repos/hyperledger/burrow/issues/comments/228608692,https://github.com/hyperledger/burrow/issues/148#issuecomment-228608692,compleatang,"Hello there. Thanks for the question. We have spent many hours considering the pros and cons of various open source licenses and are satisfied with our current licensing posture. 

We have detailed our posture and thinking [here](https://db.erisindustries.com/products/2015/08/30/on-licensing/) if you would like to dig into our reasoning.
",2016-06-26 16:10:08,2016-06-26 16:10:08
https://api.github.com/repos/hyperledger/burrow/issues/146,https://api.github.com/repos/hyperledger/burrow/issues/comments/253609296,https://github.com/hyperledger/burrow/issues/146#issuecomment-253609296,compleatang,"closing in favor of #190 please follow along there @aubreychen 
",2016-10-13 19:09:54,2016-10-13 19:09:54
https://api.github.com/repos/hyperledger/burrow/issues/145,https://api.github.com/repos/hyperledger/burrow/issues/comments/227141358,https://github.com/hyperledger/burrow/pull/145#issuecomment-227141358,silasdavis,"Yes LGTM
",2016-06-20 13:26:54,2016-06-20 13:26:54
https://api.github.com/repos/hyperledger/burrow/issues/144,https://api.github.com/repos/hyperledger/burrow/issues/comments/227139912,https://github.com/hyperledger/burrow/issues/144#issuecomment-227139912,silasdavis,"Wanted to make a quick response, so does this provide what you need:

https://github.com/eris-ltd/eris-db/blob/develop/Godeps/_workspace/src/github.com/tendermint/tendermint/rpc/test/client_rpc_test.go#L100

Calls this:

https://github.com/eris-ltd/eris-db/blob/develop/Godeps/_workspace/src/github.com/tendermint/tendermint/rpc/test/tests.go#L73

I don't see the relation to the issue of Casey's you linked. Could you provide more context for what you are looking for? What seems not to be working currently?
",2016-06-20 13:21:09,2016-06-20 13:21:40
https://api.github.com/repos/hyperledger/burrow/issues/144,https://api.github.com/repos/hyperledger/burrow/issues/comments/231238002,https://github.com/hyperledger/burrow/issues/144#issuecomment-231238002,NodeGuy,"Thank you for the quick response.  This appears to be working for permission transactions!  I'm going to keep the issue open as I work on converting more transaction types.
",2016-07-07 23:33:59,2016-07-07 23:33:59
https://api.github.com/repos/hyperledger/burrow/issues/144,https://api.github.com/repos/hyperledger/burrow/issues/comments/231752502,https://github.com/hyperledger/burrow/issues/144#issuecomment-231752502,benjaminbollen,"on 1337 the call is routed to https://github.com/eris-ltd/eris-db/blob/develop/manager/eris-mint/transactor.go#L197
`func (this *transactor) TransactAndHold(privKey, address, data []byte, gasLimit, fee int64) (*txs.EventDataCall, error) {`

and on 46657 there is no direct equivalent of `TransactAndHold`, but `BroadcastTxSync`  (or Async) is implemented https://github.com/eris-ltd/eris-db/blob/develop/manager/eris-mint/pipe.go#L460: (edited)

 `func (pipe *ErisMintPipe) BroadcastTxSync(tx transaction.Tx) (*rpc_tendermint_types.ResultBroadcastTx,
    error) {`

port 1337 does have https://github.com/eris-ltd/eris-db/blob/develop/manager/eris-mint/transactor.go#L123:  
`func (this *transactor) BroadcastTx(tx txs.Tx) (*core_types.Receipt, error) {`

so what we have done is to ""move code around"" so that double implementations are now right next to eachother and we can communicate more clearly with you (the users) what the api is that we can unify this into
",2016-07-11 14:33:31,2016-07-11 14:33:31
https://api.github.com/repos/hyperledger/burrow/issues/144,https://api.github.com/repos/hyperledger/burrow/issues/comments/233439835,https://github.com/hyperledger/burrow/issues/144#issuecomment-233439835,NodeGuy,"This appears to be working now, thank you.
",2016-07-18 19:56:31,2016-07-18 19:56:31
https://api.github.com/repos/hyperledger/burrow/issues/143,https://api.github.com/repos/hyperledger/burrow/issues/comments/226084275,https://github.com/hyperledger/burrow/issues/143#issuecomment-226084275,ebuchman,"fascinating. version? reproducible? contract do anything fancy?
",2016-06-15 04:20:22,2016-06-15 04:20:22
https://api.github.com/repos/hyperledger/burrow/issues/143,https://api.github.com/repos/hyperledger/burrow/issues/comments/226084675,https://github.com/hyperledger/burrow/issues/143#issuecomment-226084675,ebuchman,"well this is obviously the culprit, and wrong: https://github.com/eris-ltd/eris-db/blob/develop/Godeps/_workspace/src/github.com/tendermint/tendermint/events/events.go#L70

that should not be an RLock, but a normal Lock. serious bug!
",2016-06-15 04:24:24,2016-06-15 04:24:24
https://api.github.com/repos/hyperledger/burrow/issues/143,https://api.github.com/repos/hyperledger/burrow/issues/comments/226191093,https://github.com/hyperledger/burrow/issues/143#issuecomment-226191093,dennismckinnon,"Thanks E, Sorry for crap issue but came across just as I was about ready to head home and didn't want to lose the log.

The version was whatever version eris-cli is running with on develop branch. it is repeatable it seems to occur when I am sending a lot of transactions in quick successions. however I have not isolated this behaviour to be nicely reproducible. The network configuration is a three validator chain running elsewhere and I'm connected to and sending transactions through a non-validator node.

Edit: This morning I managed to produce this bug on an entirely local chain so Network configuration does not play a role it seems.
",2016-06-15 13:44:17,2016-06-15 13:45:48
https://api.github.com/repos/hyperledger/burrow/issues/143,https://api.github.com/repos/hyperledger/burrow/issues/comments/226208594,https://github.com/hyperledger/burrow/issues/143#issuecomment-226208594,benjaminbollen,"I started writing unit tests for tendermint/go-events and work towards reproducing the bug in the tests; then applying the fix as proposed
",2016-06-15 14:41:50,2016-06-15 14:41:50
https://api.github.com/repos/hyperledger/burrow/issues/142,https://api.github.com/repos/hyperledger/burrow/issues/comments/229228065,https://github.com/hyperledger/burrow/pull/142#issuecomment-229228065,benjaminbollen,"This PR now does have the outlines for the Tendermint exposed routes; implementations now have to move to the application managers implementation of the RPC calls (for /rpc/tendermint these are still defined in /rpc/tendermint/core)
",2016-06-29 00:59:55,2016-06-29 00:59:55
https://api.github.com/repos/hyperledger/burrow/issues/140,https://api.github.com/repos/hyperledger/burrow/issues/comments/225323457,https://github.com/hyperledger/burrow/pull/140#issuecomment-225323457,benjaminbollen,"if people like this proposal, please comment here on which key servers need to be added to the list:
- pgp.mit.edu
- keyserver.pgp.com
",2016-06-11 00:09:09,2016-06-11 00:29:32
https://api.github.com/repos/hyperledger/burrow/issues/140,https://api.github.com/repos/hyperledger/burrow/issues/comments/225640269,https://github.com/hyperledger/burrow/pull/140#issuecomment-225640269,benjaminbollen,"@silasdavis we don't have to merge this but we can use it as a discussion starter on what we would want to adhere to as a policy towards signing commit history
",2016-06-13 16:49:44,2016-06-13 16:49:44
https://api.github.com/repos/hyperledger/burrow/issues/140,https://api.github.com/repos/hyperledger/burrow/issues/comments/225903603,https://github.com/hyperledger/burrow/pull/140#issuecomment-225903603,silasdavis,"This seems like a good idea, but what are we actually trying to achieve?

Seems like we need a human-maintained whitelist of keys, where we can check identities against something like keybase.io and have some degree of belief that commits link to a somewhat known identity.

This might fit in well if we decide that we need a contributor license agreement (CLA) to be signed by individuals contributing.

Another general advantage is that we only add a specific key, and we don't end up with commits from unknown keys being mixed in with a pull request seemingly from a known identity. I wouldn't imagine us trying to do a very deep audit on identities as this would be onerous and somewhat against the spirit of open source.
",2016-06-14 14:41:33,2016-06-14 14:41:33
https://api.github.com/repos/hyperledger/burrow/issues/140,https://api.github.com/repos/hyperledger/burrow/issues/comments/225917498,https://github.com/hyperledger/burrow/pull/140#issuecomment-225917498,benjaminbollen,"Yes, I think the biggest danger here is putting up a barrier for other people to start contributing code, and that is what we absolutely want, not the opposite.

So maybe we can have more stringent checks on merging in commits into develop or master (but then those need to happen locally, and we would lose the GH gui, a minor inconvenience)
",2016-06-14 15:23:34,2016-06-14 15:23:34
https://api.github.com/repos/hyperledger/burrow/issues/140,https://api.github.com/repos/hyperledger/burrow/issues/comments/225922604,https://github.com/hyperledger/burrow/pull/140#issuecomment-225922604,AFDudley,"Yeah, it seems like anyone can submit a pull request, unsigned. But whomever audits it on the Eris side will have to sign their merge? I don't know how that would work within the git flow model, but that seems like the best of both worlds.
",2016-06-14 15:39:28,2016-06-14 15:39:28
https://api.github.com/repos/hyperledger/burrow/issues/140,https://api.github.com/repos/hyperledger/burrow/issues/comments/225931495,https://github.com/hyperledger/burrow/pull/140#issuecomment-225931495,benjaminbollen,"This PR does not allow that, so we can change it to assert the signatures of all merge commits
",2016-06-14 16:07:31,2016-06-14 16:07:31
https://api.github.com/repos/hyperledger/burrow/issues/140,https://api.github.com/repos/hyperledger/burrow/issues/comments/226754714,https://github.com/hyperledger/burrow/pull/140#issuecomment-226754714,benjaminbollen,"I needed my `develop` branch so I have parked these commits on https://github.com/benjaminbollen/eris-db/tree/check_signatures_henceforth
",2016-06-17 12:19:39,2016-06-17 12:19:39
https://api.github.com/repos/hyperledger/burrow/issues/139,https://api.github.com/repos/hyperledger/burrow/issues/comments/225258017,https://github.com/hyperledger/burrow/issues/139#issuecomment-225258017,benjaminbollen,"also, arm support (above patch on blockchain.go in #137 ) will get lost when we move the re-organised code; so this is a reminder to port it over;
",2016-06-10 18:21:24,2016-06-10 18:21:24
https://api.github.com/repos/hyperledger/burrow/issues/139,https://api.github.com/repos/hyperledger/burrow/issues/comments/225259006,https://github.com/hyperledger/burrow/issues/139#issuecomment-225259006,zramsay,"hopefully we'll have test for ARM support by then
",2016-06-10 18:25:12,2016-06-10 18:25:12
https://api.github.com/repos/hyperledger/burrow/issues/139,https://api.github.com/repos/hyperledger/burrow/issues/comments/253602003,https://github.com/hyperledger/burrow/issues/139#issuecomment-253602003,compleatang,"is this (now) a dupe of #251 ?
",2016-10-13 18:43:59,2016-10-13 18:43:59
https://api.github.com/repos/hyperledger/burrow/issues/139,https://api.github.com/repos/hyperledger/burrow/issues/comments/262792264,https://github.com/hyperledger/burrow/issues/139#issuecomment-262792264,silasdavis,"Yes, closing.",2016-11-24 14:46:33,2016-11-24 14:46:33
https://api.github.com/repos/hyperledger/burrow/issues/138,https://api.github.com/repos/hyperledger/burrow/issues/comments/225248506,https://github.com/hyperledger/burrow/pull/138#issuecomment-225248506,benjaminbollen,"LGTM; copies #136 into develop-tmsp
",2016-06-10 17:44:13,2016-06-10 17:44:13
https://api.github.com/repos/hyperledger/burrow/issues/138,https://api.github.com/repos/hyperledger/burrow/issues/comments/225249321,https://github.com/hyperledger/burrow/pull/138#issuecomment-225249321,benjaminbollen,"I also added these changes to my local branch of `discuss-eris-gateway`, so they should not get lost
",2016-06-10 17:47:30,2016-06-10 17:47:30
https://api.github.com/repos/hyperledger/burrow/issues/137,https://api.github.com/repos/hyperledger/burrow/issues/comments/225238859,https://github.com/hyperledger/burrow/pull/137#issuecomment-225238859,zramsay,"LGTM, @benjaminbollen @silasdavis can we get a :+1: for the changes in the edb binary
",2016-06-10 17:03:23,2016-06-10 17:03:23
https://api.github.com/repos/hyperledger/burrow/issues/137,https://api.github.com/repos/hyperledger/burrow/issues/comments/225242621,https://github.com/hyperledger/burrow/pull/137#issuecomment-225242621,benjaminbollen,"As an additional point, e-db is undergoing a restructuring, so we will have to port these changes to the new branches (ideally discuss-eris-gateway), but we can take this onboard as we make the transition
",2016-06-10 17:19:32,2016-06-10 17:19:32
https://api.github.com/repos/hyperledger/burrow/issues/137,https://api.github.com/repos/hyperledger/burrow/issues/comments/225243146,https://github.com/hyperledger/burrow/pull/137#issuecomment-225243146,benjaminbollen,"The changes in blockchain.go refer to `MaxUInt32` which is replaced by `MaxInt32`?  This only occurs in this file?
",2016-06-10 17:21:41,2016-06-10 17:21:41
https://api.github.com/repos/hyperledger/burrow/issues/137,https://api.github.com/repos/hyperledger/burrow/issues/comments/225256691,https://github.com/hyperledger/burrow/pull/137#issuecomment-225256691,benjaminbollen,"Please note that this will be overwritten as these files have moved in the restructuring of the consensus and pipe code.  The preferred solution will be to use `uint64` (or `uint32` if someone wants to argue for that as a max height), and replace the types consistently everywhere.

@zramsay thanks for linking this PR in a new issue
",2016-06-10 18:15:59,2016-06-10 18:15:59
https://api.github.com/repos/hyperledger/burrow/issues/136,https://api.github.com/repos/hyperledger/burrow/issues/comments/225238261,https://github.com/hyperledger/burrow/pull/136#issuecomment-225238261,compleatang,"OK. Tests now passing. GTM. Will open another against develop-tmsp which captures the changes. Don't think we have hotfixed master, but I've pushed the changes to quay manually and we're about to move to rc1 at any rate so I think it'll be a waste of time to PR to master.
",2016-06-10 17:00:58,2016-06-10 17:00:58
https://api.github.com/repos/hyperledger/burrow/issues/136,https://api.github.com/repos/hyperledger/burrow/issues/comments/225248319,https://github.com/hyperledger/burrow/pull/136#issuecomment-225248319,benjaminbollen,"LGTM
",2016-06-10 17:43:25,2016-06-10 17:43:25
https://api.github.com/repos/hyperledger/burrow/issues/132,https://api.github.com/repos/hyperledger/burrow/issues/comments/225031989,https://github.com/hyperledger/burrow/pull/132#issuecomment-225031989,benjaminbollen,"mirrors #130 in branch https://github.com/eris-ltd/eris-db/tree/discuss_eris_gateway
@compleatang feel free to merge if it looks good to you
",2016-06-09 21:26:54,2016-06-09 21:26:54
https://api.github.com/repos/hyperledger/burrow/issues/132,https://api.github.com/repos/hyperledger/burrow/issues/comments/225033647,https://github.com/hyperledger/burrow/pull/132#issuecomment-225033647,compleatang,"LGTM.
",2016-06-09 21:33:48,2016-06-09 21:33:48
https://api.github.com/repos/hyperledger/burrow/issues/131,https://api.github.com/repos/hyperledger/burrow/issues/comments/225028836,https://github.com/hyperledger/burrow/pull/131#issuecomment-225028836,benjaminbollen,"already proposed by #130 
",2016-06-09 21:14:23,2016-06-09 21:14:23
https://api.github.com/repos/hyperledger/burrow/issues/130,https://api.github.com/repos/hyperledger/burrow/issues/comments/225029177,https://github.com/hyperledger/burrow/pull/130#issuecomment-225029177,benjaminbollen,"Looks good to me
",2016-06-09 21:15:45,2016-06-09 21:15:45
https://api.github.com/repos/hyperledger/burrow/issues/129,https://api.github.com/repos/hyperledger/burrow/issues/comments/224976456,https://github.com/hyperledger/burrow/pull/129#issuecomment-224976456,benjaminbollen,"Looks good to me
",2016-06-09 17:59:21,2016-06-09 17:59:21
https://api.github.com/repos/hyperledger/burrow/issues/127,https://api.github.com/repos/hyperledger/burrow/issues/comments/223429438,https://github.com/hyperledger/burrow/pull/127#issuecomment-223429438,zramsay,"replaced by #128 
",2016-06-02 21:33:32,2016-06-02 21:33:32
https://api.github.com/repos/hyperledger/burrow/issues/126,https://api.github.com/repos/hyperledger/burrow/issues/comments/219779340,https://github.com/hyperledger/burrow/pull/126#issuecomment-219779340,silasdavis,"@ebuchman tagging you for heads up
",2016-05-17 16:45:41,2016-05-17 16:45:41
https://api.github.com/repos/hyperledger/burrow/issues/126,https://api.github.com/repos/hyperledger/burrow/issues/comments/219800051,https://github.com/hyperledger/burrow/pull/126#issuecomment-219800051,silasdavis,"@benjaminbollen let me know what you think
",2016-05-17 17:54:36,2016-05-17 17:54:36
https://api.github.com/repos/hyperledger/burrow/issues/126,https://api.github.com/repos/hyperledger/burrow/issues/comments/219808032,https://github.com/hyperledger/burrow/pull/126#issuecomment-219808032,benjaminbollen,"1. we don't have to delete anything, we can rename to `_tes.go` instead of `_test.go`
2. I would want the tests that currently pass to still be run
",2016-05-17 18:21:40,2016-05-17 18:21:40
https://api.github.com/repos/hyperledger/burrow/issues/126,https://api.github.com/repos/hyperledger/burrow/issues/comments/219831429,https://github.com/hyperledger/burrow/pull/126#issuecomment-219831429,ebuchman,"what non passing tests are left, besides rpc? 
lets take all failing nonrpc to _tes.go, and just be explicit for now in the circle which package tests to run and which specific tests of rpc to run. and as we fix up those rpc tests we can add them until the whole package is fixed
",2016-05-17 19:44:30,2016-05-17 19:44:30
https://api.github.com/repos/hyperledger/burrow/issues/126,https://api.github.com/repos/hyperledger/burrow/issues/comments/220277650,https://github.com/hyperledger/burrow/pull/126#issuecomment-220277650,silasdavis,"So we don't need to rename any tests, I am just compiling the tests that are there.

I deleted test/ independently because it doesn't compile and rather than fix that I know we have questioned its value. I can reinstate test/ if that was too rash.
",2016-05-19 09:47:21,2016-05-19 09:47:21
https://api.github.com/repos/hyperledger/burrow/issues/126,https://api.github.com/repos/hyperledger/burrow/issues/comments/220296829,https://github.com/hyperledger/burrow/pull/126#issuecomment-220296829,benjaminbollen,"while /test isnt ideal; I do favor:
1. not deleting it; and it should compile
2. I prefer disabling tests over deleting them as they serve as a placeholder for what needs to be there
",2016-05-19 11:22:54,2016-05-19 11:22:54
https://api.github.com/repos/hyperledger/burrow/issues/126,https://api.github.com/repos/hyperledger/burrow/issues/comments/220330863,https://github.com/hyperledger/burrow/pull/126#issuecomment-220330863,silasdavis,"Yeah I am not suggesting deleting tests in general. I'll reinstate test/
",2016-05-19 13:53:44,2016-05-19 13:53:44
https://api.github.com/repos/hyperledger/burrow/issues/126,https://api.github.com/repos/hyperledger/burrow/issues/comments/230492918,https://github.com/hyperledger/burrow/pull/126#issuecomment-230492918,benjaminbollen,"will close this
",2016-07-05 14:24:07,2016-07-05 14:24:07
https://api.github.com/repos/hyperledger/burrow/issues/125,https://api.github.com/repos/hyperledger/burrow/issues/comments/219770762,https://github.com/hyperledger/burrow/pull/125#issuecomment-219770762,benjaminbollen,"looks good to me
",2016-05-17 16:17:08,2016-05-17 16:17:08
https://api.github.com/repos/hyperledger/burrow/issues/124,https://api.github.com/repos/hyperledger/burrow/issues/comments/219757829,https://github.com/hyperledger/burrow/pull/124#issuecomment-219757829,ebuchman,"oops
",2016-05-17 15:37:04,2016-05-17 15:37:04
https://api.github.com/repos/hyperledger/burrow/issues/122,https://api.github.com/repos/hyperledger/burrow/issues/comments/219527582,https://github.com/hyperledger/burrow/pull/122#issuecomment-219527582,benjaminbollen,"where is the :fire: ?
",2016-05-16 19:50:47,2016-05-16 19:50:47
https://api.github.com/repos/hyperledger/burrow/issues/122,https://api.github.com/repos/hyperledger/burrow/issues/comments/219537167,https://github.com/hyperledger/burrow/pull/122#issuecomment-219537167,silasdavis,"Raw emoji meant to be there... okay without :fire: this time?
",2016-05-16 20:26:35,2016-05-16 20:26:35
https://api.github.com/repos/hyperledger/burrow/issues/122,https://api.github.com/repos/hyperledger/burrow/issues/comments/219661268,https://github.com/hyperledger/burrow/pull/122#issuecomment-219661268,silasdavis,"I've removed the subpackages directive, but I will reintroduce if there is a reason to do so, but I think we can merge now anyway (see: https://github.com/Masterminds/glide/issues/424)
",2016-05-17 09:07:53,2016-05-17 09:07:53
https://api.github.com/repos/hyperledger/burrow/issues/122,https://api.github.com/repos/hyperledger/burrow/issues/comments/219682103,https://github.com/hyperledger/burrow/pull/122#issuecomment-219682103,benjaminbollen,"looks good to me
",2016-05-17 10:42:33,2016-05-17 10:42:33
https://api.github.com/repos/hyperledger/burrow/issues/121,https://api.github.com/repos/hyperledger/burrow/issues/comments/219753541,https://github.com/hyperledger/burrow/pull/121#issuecomment-219753541,silasdavis,"so this LGTM, but assuming WIP means you don't want it merged yet
",2016-05-17 15:24:57,2016-05-17 15:24:57
https://api.github.com/repos/hyperledger/burrow/issues/121,https://api.github.com/repos/hyperledger/burrow/issues/comments/224973772,https://github.com/hyperledger/burrow/pull/121#issuecomment-224973772,benjaminbollen,"Closing this PR as it is not ready to move into `develop-tmsp`.  These commits are pushed at branch `discuss-eris-gateway` as the essentials of ErisMint as an application are tied up with Tendermint as an in-process consensus engine.
At this point the E-DB servers need to be loaded in this new structure and the RPC calls need to be separated to application and consensus behind the pipe.
",2016-06-09 17:50:13,2016-06-09 17:50:13
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/223562326,https://github.com/hyperledger/burrow/issues/120#issuecomment-223562326,benjaminbollen,"@NodeGuy can I close this issue ?
",2016-06-03 12:08:56,2016-06-03 12:08:56
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/224332097,https://github.com/hyperledger/burrow/issues/120#issuecomment-224332097,ebuchman,"I fixed this here: https://github.com/eris-ltd/eris-db/tree/fix_get_blocks

Never heard back about it. Probably should get merged in.
",2016-06-07 16:14:22,2016-06-07 16:14:22
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/224417878,https://github.com/hyperledger/burrow/issues/120#issuecomment-224417878,NodeGuy,"No, please don't close the issue until the bug is fixed!
",2016-06-07 21:19:36,2016-06-07 21:19:36
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/224526555,https://github.com/hyperledger/burrow/issues/120#issuecomment-224526555,benjaminbollen,"I did review it, and looks good to me, and I can merge it in.
",2016-06-08 08:43:23,2016-06-08 08:43:23
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/224531237,https://github.com/hyperledger/burrow/issues/120#issuecomment-224531237,benjaminbollen,"@NodeGuy can you confirm this branch fixes the problem, or shall I?
",2016-06-08 09:03:15,2016-06-08 09:03:15
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/224656768,https://github.com/hyperledger/burrow/issues/120#issuecomment-224656768,NodeGuy,"This is bug prevents basic advertised functionality from working and should have been caught by an automated test before it got to customers.

Please write an automated test for the `GetBlocks` feature such that CircleCI doesn't approve the build unless it passes.
",2016-06-08 16:57:23,2016-06-08 16:57:23
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/224685829,https://github.com/hyperledger/burrow/issues/120#issuecomment-224685829,benjaminbollen,"I fully agree.  The work we are putting into eris-db is precisely to make it possible to define different areas of unit testing on the rpc (and interface to you).  This should have been done already obviously.
",2016-06-08 18:33:13,2016-06-08 18:33:13
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/237495299,https://github.com/hyperledger/burrow/issues/120#issuecomment-237495299,TheBlockchainGuy,"Hello,
I'm using erisbd-0.12.0 and still encountering the problem of empty block_metas. Is this problem fixed and how can I get the fix please ?
",2016-08-04 09:01:47,2016-08-04 09:01:47
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/237528850,https://github.com/hyperledger/burrow/issues/120#issuecomment-237528850,benjaminbollen,"@TheBlockchainGuy we tested and merged this hotfix on master; so in a couple of minutes the fix is pushed out and having eris pull the latest docker images should give you access to this fix.  Sorry this was pushed down the road and thanks for reminding us.
",2016-08-04 11:39:06,2016-08-04 11:39:06
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/237540288,https://github.com/hyperledger/burrow/issues/120#issuecomment-237540288,TheBlockchainGuy,"Ok, thank you.
I downgraded to 0.11.4 because .12 is not stable enough yet. When it's done, would I get the fix after an ""eris init"" and could you please add a comment here to say it's done ?
",2016-08-04 12:38:14,2016-08-04 12:38:14
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/244412101,https://github.com/hyperledger/burrow/issues/120#issuecomment-244412101,TheBlockchainGuy,"Hello,
Is this bug fixed ? if not, are there any workaround ?
",2016-09-02 15:45:08,2016-09-02 15:45:08
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/244412337,https://github.com/hyperledger/burrow/issues/120#issuecomment-244412337,benjaminbollen,"this has been fixed and merged into master.  If it does not work for you, please report it.
",2016-09-02 15:45:56,2016-09-02 15:45:56
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/244413503,https://github.com/hyperledger/burrow/issues/120#issuecomment-244413503,compleatang,"If you'd like to use the fix currently on master with 0.11.4 we think it will work (although we do not test this). 

To try it run 

```
docker pull quay.io/eris/erisdb:0.12.0-rc2
docker tag quay.io/eris/erisdb:0.12.0-rc2 quay.io/eris/erisdb:0.11.4
```
",2016-09-02 15:50:45,2016-09-02 15:50:45
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/244416158,https://github.com/hyperledger/burrow/issues/120#issuecomment-244416158,TheBlockchainGuy,"Yes it works with 0.11.4. Thank you guys.
",2016-09-02 16:00:31,2016-09-02 16:00:31
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/244424218,https://github.com/hyperledger/burrow/issues/120#issuecomment-244424218,TheBlockchainGuy,"Casey,
When I did ""docker tag ..."" in my local/root machine, and then deployed locally the chain, my GetBlocks service did worked but when I deployed the chain to a remote docker-machine it looks like it's using the old erisdb:0.11.4. Do you confirm this behaviour and how to get the fix for my remote machines ?
",2016-09-02 16:31:20,2016-09-02 16:31:41
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/244425252,https://github.com/hyperledger/burrow/issues/120#issuecomment-244425252,benjaminbollen,"This fix should be in 0.12.0-rc2 as well; so you can use latest master; that probably makes it easier to make sure the remote machines have the right build.  Let us know if you find problems.
",2016-09-02 16:35:48,2016-09-02 16:35:48
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/244426322,https://github.com/hyperledger/burrow/issues/120#issuecomment-244426322,compleatang,"@TheBlockchainGuy so the images that you have on one machine are entirely confined to that machine and that machine only. So you'll have to perform the above sequence for each of the docker-machines you are trying to utilize. To do this first you bring a machine ""in scope""  with the following line:

``` bash
eval ""$(docker-machine env $machine)""
```

After the machine is in scope then rerun the above pull and tag command. Repeat as necessary for each of the machines.
",2016-09-02 16:40:30,2016-09-02 16:40:30
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/244435549,https://github.com/hyperledger/burrow/issues/120#issuecomment-244435549,TheBlockchainGuy,"OK, I did it and it worked (via docker-machine env).
I agree with benjamin to use the last version. Is this 0.12.0-rc2 stable enough (I've had troubles with the 0.12.0 couple of weeks ago) ?
",2016-09-02 17:18:23,2016-09-02 17:18:23
https://api.github.com/repos/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/comments/244436074,https://github.com/hyperledger/burrow/issues/120#issuecomment-244436074,benjaminbollen,"depends on your requirements; I would still recommend 0.11.4 if you want the (most) stable release;  You'll be missing the latest advances, but 0.11 is most battle tested, and 0.12 is a moving target.
",2016-09-02 17:20:38,2016-09-02 17:20:38
https://api.github.com/repos/hyperledger/burrow/issues/119,https://api.github.com/repos/hyperledger/burrow/issues/comments/231787995,https://github.com/hyperledger/burrow/issues/119#issuecomment-231787995,benjaminbollen,"duplicates #74 
",2016-07-11 16:29:02,2016-07-11 16:29:02
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/218998100,https://github.com/hyperledger/burrow/pull/118#issuecomment-218998100,benjaminbollen,"""github.com/eris-ltd/eris-db/config"" is still imported in 12 locations (2 in edbss)
",2016-05-13 09:41:07,2016-05-13 09:41:07
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/218998825,https://github.com/hyperledger/burrow/pull/118#issuecomment-218998825,benjaminbollen,"Im also confused by the `TMROOT=~/tmroot tendermint init` instruction, what does `tendermint init` do for us if we're inproc; I assume writing the config?
",2016-05-13 09:44:22,2016-05-13 09:49:13
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/219417749,https://github.com/hyperledger/burrow/pull/118#issuecomment-219417749,silasdavis,"@ebuchman by WIP, do you want to make some more changes before merging this, or would you like us to consider it now?
",2016-05-16 12:53:50,2016-05-16 12:53:50
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/219420606,https://github.com/hyperledger/burrow/pull/118#issuecomment-219420606,benjaminbollen,"I changed the title to WIP as per comment above, there are still 10 locations where the deleted global config is used
",2016-05-16 13:08:52,2016-05-16 13:08:52
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/219461356,https://github.com/hyperledger/burrow/pull/118#issuecomment-219461356,ebuchman,"hey ben, eris-db/config is out of scope for what I'm trying to achieve here. Note there's two configs, one for eris-db (using actual structs, defined in eris-db/config), and one from tendermint (using the tendermint/go-config abstraction).  this is merely about the latter. 

In other words, I don't think ""there are still 10 locations where the deleted global config is used"" is true. did you try running it?

`tendermint init` is to drop a simple genesis.json so you can start the chain.
",2016-05-16 15:48:13,2016-05-16 15:49:00
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/219462468,https://github.com/hyperledger/burrow/pull/118#issuecomment-219462468,benjaminbollen,"yes, I tried compiling this branch and that failed
",2016-05-16 15:51:59,2016-05-16 15:51:59
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/219466581,https://github.com/hyperledger/burrow/pull/118#issuecomment-219466581,benjaminbollen,"apologies, must have made a merging error while testing, can't reproduce what I complained about above
",2016-05-16 16:06:10,2016-05-16 16:06:10
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/219476977,https://github.com/hyperledger/burrow/pull/118#issuecomment-219476977,benjaminbollen,"https://github.com/eris-ltd/eris-db/pull/118/files#diff-d6abc2eecc18d84fbcfff38ac962d404R70

It reads ""config.toml"", should this not be moved back to ""server_config.toml"" - at least for now.   Then it works for me (ie produces blocks)

Currently it reads with above instructions the tendermint config.toml, then produces a runtime error when unmarshalling the toml config file into the ErisDBConfig struct, reading from it on L96.  Preferably we also panic on the error to read the config.

```
✔ ~/golang/src/github.com/eris-ltd/eris-db [test_no_global_config L|…3⚑ 6] 
18:25 $ ./prog ~/tmroot inproc
INFO[05-16|18:28:22] ErisDB Serve initializing.               module=eris/erisdb_server
EROR[05-16|18:28:22] Server config file error.                module=eris/erisdb_server error=""toml: unmarshal: line 6: field corresponding to `node_laddr' is not defined in `*config.ErisDBConfig'""
panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x1 addr=0x0 pc=0x48acd2]

goroutine 1 [running]:
github.com/eris-ltd/eris-db/erisdb.ServeErisDB(0x7ffcb4739160, 0x14, 0xbe3701, 0x6, 0x0, 0x0)
    /home/bbollen/golang/src/github.com/eris-ltd/eris-db/erisdb/serve.go:96 +0x3c2
main.main()
    /home/bbollen/golang/src/github.com/eris-ltd/eris-db/cmd/erisdb/main.go:25 +0x13f

goroutine 17 [syscall, locked to thread]:
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:1721 +0x1

goroutine 20 [syscall]:
os/signal.loop()
    /usr/local/go/src/os/signal/signal_unix.go:22 +0x18
created by os/signal.init.1
    /usr/local/go/src/os/signal/signal_unix.go:28 +0x37
```
",2016-05-16 16:45:02,2016-05-16 16:48:41
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/219482155,https://github.com/hyperledger/burrow/pull/118#issuecomment-219482155,benjaminbollen,"when I locally fix the config files, it works for me and produces blocks !
@ebuchman can you review the above comment? thx
@silasdavis pinging you on this PR, for me this is good to go as a step forward.
",2016-05-16 17:04:01,2016-05-16 17:04:01
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/219489906,https://github.com/hyperledger/burrow/pull/118#issuecomment-219489906,ebuchman,"oh ya - we should add to the defaults in config/config.go - mind making that change?
",2016-05-16 17:32:53,2016-05-16 17:32:53
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/219514269,https://github.com/hyperledger/burrow/pull/118#issuecomment-219514269,silasdavis,"I'm not seeing the runtime error. I had to update glide deps to get log15 working though, so not sure if that has a bearing. I'm going to merge this even though I don't entirely understand Ben's remark, because I'm wild, and I want to PR some dependency clean-up on top of this.
",2016-05-16 18:58:57,2016-05-16 18:58:57
https://api.github.com/repos/hyperledger/burrow/issues/118,https://api.github.com/repos/hyperledger/burrow/issues/comments/219518525,https://github.com/hyperledger/burrow/pull/118#issuecomment-219518525,benjaminbollen,"The error should be reproducible if your `workdir` has a `config.toml` file but of the ""united format"", instead the current tendermint config file ; ie, hence my suggestion to have the edb config file under the different name, as is currently
",2016-05-16 19:14:46,2016-05-16 19:14:46
https://api.github.com/repos/hyperledger/burrow/issues/117,https://api.github.com/repos/hyperledger/burrow/issues/comments/234773230,https://github.com/hyperledger/burrow/issues/117#issuecomment-234773230,benjaminbollen,"Resolved on develop for 0.12.0rc2
",2016-07-24 11:55:24,2016-07-24 11:55:24
https://api.github.com/repos/hyperledger/burrow/issues/116,https://api.github.com/repos/hyperledger/burrow/issues/comments/218499925,https://github.com/hyperledger/burrow/pull/116#issuecomment-218499925,silasdavis,"Otherwise LGTM and will merge
",2016-05-11 15:42:54,2016-05-11 15:42:54
https://api.github.com/repos/hyperledger/burrow/issues/115,https://api.github.com/repos/hyperledger/burrow/issues/comments/253608616,https://github.com/hyperledger/burrow/issues/115#issuecomment-253608616,compleatang,"is this done?
",2016-10-13 19:07:11,2016-10-13 19:07:11
https://api.github.com/repos/hyperledger/burrow/issues/115,https://api.github.com/repos/hyperledger/burrow/issues/comments/256776521,https://github.com/hyperledger/burrow/issues/115#issuecomment-256776521,NodeGuy,"I object because I'm [using Send in slam-a-chain](https://github.com/eris-ltd/hello-eris/blob/60d13b332cb362036b63bb2b9bd48b5ca92a7ab2/benchmarks/slam_a_chain/lib/index.js#L111).
",2016-10-27 21:34:20,2016-10-27 21:34:20
https://api.github.com/repos/hyperledger/burrow/issues/115,https://api.github.com/repos/hyperledger/burrow/issues/comments/262791598,https://github.com/hyperledger/burrow/issues/115#issuecomment-262791598,silasdavis,"This was reintroduced, closing.",2016-11-24 14:43:21,2016-11-24 14:43:21
https://api.github.com/repos/hyperledger/burrow/issues/114,https://api.github.com/repos/hyperledger/burrow/issues/comments/218309026,https://github.com/hyperledger/burrow/pull/114#issuecomment-218309026,AFDudley,"oh... something just clicked, the proper fix should be a one-liner, so i'm looking into that.
",2016-05-10 22:19:02,2016-05-10 22:19:02
https://api.github.com/repos/hyperledger/burrow/issues/114,https://api.github.com/repos/hyperledger/burrow/issues/comments/218314513,https://github.com/hyperledger/burrow/pull/114#issuecomment-218314513,benjaminbollen,"@silasdavis alright, so this has been a bit messy, but at least it is at the state of ""failing tests""; I have to put these test-passes and test-failures next to those currently in tmsp-unified to get some picture of how successful this merge has been.  Hope this makes some sense to you :)
",2016-05-10 22:47:07,2016-05-10 22:47:07
https://api.github.com/repos/hyperledger/burrow/issues/114,https://api.github.com/repos/hyperledger/burrow/issues/comments/218406989,https://github.com/hyperledger/burrow/pull/114#issuecomment-218406989,silasdavis,"can we include all the commits on 10th May from here: https://github.com/eris-ltd/eris-db/commits/tmsp-unified there are a number of fixes relating to renaming txs
",2016-05-11 09:23:52,2016-05-11 09:23:52
https://api.github.com/repos/hyperledger/burrow/issues/114,https://api.github.com/repos/hyperledger/burrow/issues/comments/218408398,https://github.com/hyperledger/burrow/pull/114#issuecomment-218408398,benjaminbollen,"absolutely, but they should be there.  I will now both check explicit commits are included and put the tests side-by-side
",2016-05-11 09:29:37,2016-05-11 09:29:37
https://api.github.com/repos/hyperledger/burrow/issues/114,https://api.github.com/repos/hyperledger/burrow/issues/comments/218443829,https://github.com/hyperledger/burrow/pull/114#issuecomment-218443829,silasdavis,"Merging this to try and get us all to a consistent base to work off, @benjaminbollen will open another to work through some issues, develop-tmsp should become our base to accept PRs into
",2016-05-11 12:24:57,2016-05-11 12:24:57
https://api.github.com/repos/hyperledger/burrow/issues/113,https://api.github.com/repos/hyperledger/burrow/issues/comments/218208020,https://github.com/hyperledger/burrow/pull/113#issuecomment-218208020,benjaminbollen,"looks good to me, after correction on `.json`
",2016-05-10 16:09:37,2016-05-10 16:09:37
https://api.github.com/repos/hyperledger/burrow/issues/112,https://api.github.com/repos/hyperledger/burrow/issues/comments/218148748,https://github.com/hyperledger/burrow/issues/112#issuecomment-218148748,AFDudley,"Okay, this relates to some of my other tickets, so I will start on it now.
",2016-05-10 12:56:16,2016-05-10 12:56:16
https://api.github.com/repos/hyperledger/burrow/issues/112,https://api.github.com/repos/hyperledger/burrow/issues/comments/253589831,https://github.com/hyperledger/burrow/issues/112#issuecomment-253589831,compleatang,"closing this ticket as this is well covered by more precise tickets and the Jenkins Epic.
",2016-10-13 17:59:47,2016-10-13 17:59:47
https://api.github.com/repos/hyperledger/burrow/issues/111,https://api.github.com/repos/hyperledger/burrow/issues/comments/218123251,https://github.com/hyperledger/burrow/issues/111#issuecomment-218123251,benjaminbollen,"Specifically with regards to `tendermint` and `tendermint/go-config`:
1. Tendermint supports reading the config file from `TMROOT/config.toml` or `HOME/.tendermint/config.toml`, we can use this for a consistent approach on the configuration handling across modules
",2016-05-10 10:49:49,2016-05-10 10:49:49
https://api.github.com/repos/hyperledger/burrow/issues/111,https://api.github.com/repos/hyperledger/burrow/issues/comments/223563074,https://github.com/hyperledger/burrow/issues/111#issuecomment-223563074,benjaminbollen,"This has been addressed in #121 by implementing the github.com/tendermint/go-config `Config interface` in Eris-DB and wrapping it around a subtree of a single Eris-DB configuration file now.
",2016-06-03 12:13:16,2016-06-03 12:13:16
https://api.github.com/repos/hyperledger/burrow/issues/110,https://api.github.com/repos/hyperledger/burrow/issues/comments/218095712,https://github.com/hyperledger/burrow/issues/110#issuecomment-218095712,benjaminbollen,"1. https://github.com/eris-ltd/eris-db/issues/109
",2016-05-10 08:46:58,2016-05-10 08:46:58
https://api.github.com/repos/hyperledger/burrow/issues/110,https://api.github.com/repos/hyperledger/burrow/issues/comments/225889581,https://github.com/hyperledger/burrow/issues/110#issuecomment-225889581,silasdavis,"closing this as just a reference to single other ticket that may itself have been superceded by the big refactor
",2016-06-14 13:59:49,2016-06-14 13:59:49
https://api.github.com/repos/hyperledger/burrow/issues/109,https://api.github.com/repos/hyperledger/burrow/issues/comments/218206578,https://github.com/hyperledger/burrow/issues/109#issuecomment-218206578,silasdavis,"Picking this up
",2016-05-10 16:05:07,2016-05-10 16:05:07
https://api.github.com/repos/hyperledger/burrow/issues/108,https://api.github.com/repos/hyperledger/burrow/issues/comments/217506105,https://github.com/hyperledger/burrow/pull/108#issuecomment-217506105,benjaminbollen,"Lets have full word naming conventions
",2016-05-06 17:26:06,2016-05-06 17:26:06
https://api.github.com/repos/hyperledger/burrow/issues/108,https://api.github.com/repos/hyperledger/burrow/issues/comments/218165974,https://github.com/hyperledger/burrow/pull/108#issuecomment-218165974,silasdavis,"@benjaminbollen what are you suggesting, to rename txs package to transactions?
",2016-05-10 14:00:19,2016-05-10 14:00:19
https://api.github.com/repos/hyperledger/burrow/issues/108,https://api.github.com/repos/hyperledger/burrow/issues/comments/218166903,https://github.com/hyperledger/burrow/pull/108#issuecomment-218166903,benjaminbollen,"yes, but we don't have to do this now; I mentioned it as a coding style Id prefer moving forward
",2016-05-10 14:03:19,2016-05-10 14:03:19
https://api.github.com/repos/hyperledger/burrow/issues/108,https://api.github.com/repos/hyperledger/burrow/issues/comments/218185119,https://github.com/hyperledger/burrow/pull/108#issuecomment-218185119,benjaminbollen,"fails on tests, but looks good to me 
",2016-05-10 15:00:19,2016-05-10 15:00:19
https://api.github.com/repos/hyperledger/burrow/issues/105,https://api.github.com/repos/hyperledger/burrow/issues/comments/215499260,https://github.com/hyperledger/burrow/pull/105#issuecomment-215499260,silasdavis,"OK cool are we good here now?
",2016-04-28 17:16:13,2016-04-28 17:16:13
https://api.github.com/repos/hyperledger/burrow/issues/102,https://api.github.com/repos/hyperledger/burrow/issues/comments/215465129,https://github.com/hyperledger/burrow/pull/102#issuecomment-215465129,benjaminbollen,"CI will timeout
",2016-04-28 15:25:08,2016-04-28 15:25:08
https://api.github.com/repos/hyperledger/burrow/issues/100,https://api.github.com/repos/hyperledger/burrow/issues/comments/218499811,https://github.com/hyperledger/burrow/pull/100#issuecomment-218499811,silasdavis,"@benjaminbollen @ebuchman I think we are planning to close this in favour of changes based off develop-tmsp branch that should unite these changes and some dangling changes that were in develop. 
",2016-05-11 15:42:32,2016-05-11 15:42:32
https://api.github.com/repos/hyperledger/burrow/issues/98,https://api.github.com/repos/hyperledger/burrow/issues/comments/211981766,https://github.com/hyperledger/burrow/pull/98#issuecomment-211981766,silasdavis,"Closing this in favour of https://github.com/eris-ltd/eris-db/pull/100, which bundles tmsp_dev and tmsp_inproc changes with dependency updates.
",2016-04-19 15:35:00,2016-04-19 15:35:00
https://api.github.com/repos/hyperledger/burrow/issues/97,https://api.github.com/repos/hyperledger/burrow/issues/comments/209972059,https://github.com/hyperledger/burrow/issues/97#issuecomment-209972059,AFDudley,"got it resolved, thanks folks!
",2016-04-14 14:32:36,2016-04-14 14:32:36
https://api.github.com/repos/hyperledger/burrow/issues/97,https://api.github.com/repos/hyperledger/burrow/issues/comments/209972660,https://github.com/hyperledger/burrow/issues/97#issuecomment-209972660,AFDudley,"might be an error in the docs, but i'm too busy to check...
",2016-04-14 14:33:35,2016-04-14 14:33:35
https://api.github.com/repos/hyperledger/burrow/issues/96,https://api.github.com/repos/hyperledger/burrow/issues/comments/209365521,https://github.com/hyperledger/burrow/issues/96#issuecomment-209365521,benjaminbollen,"Possible relation to failure reported by @dennismckinnon : 

```
Ethan (964B1493BBE3312278B7DEB 94C39149F7899A345) [12:30 AM] 
so, this subscribe should happen before the transact

[12:30] 
https://github.com/eris-ltd/eris-db/blob/master/erisdb/pipe/transactor.go#L270

[12:31] 
(also the other one https://github.com/eris-ltd/eris-db/blob/master/erisdb/pipe/transactor.go#L182)

[7:53] 
notice the event emitter subscription happens after the transaction has been sent

[7:53] 
it seems like it might be possible for the send to finish before the event is captured

[7:54] 
but this was just a hypothesis as to why the transactions were never getting callbacks
```
",2016-04-13 10:54:28,2016-04-13 10:54:28
https://api.github.com/repos/hyperledger/burrow/issues/96,https://api.github.com/repos/hyperledger/burrow/issues/comments/223603691,https://github.com/hyperledger/burrow/issues/96#issuecomment-223603691,benjaminbollen,"debugging against eris-db v0.11.4; eris-contracts.js branch #29 (forked into `eris-db#96` where one can supply addres, public and private key of an explicit account set on a local chain running; this is to bypass the integrated use of eris-cli to speed up recompiling eris-db without rebuilding the docker image)
",2016-06-03 15:02:35,2017-03-18 02:17:17
https://api.github.com/repos/hyperledger/burrow/issues/96,https://api.github.com/repos/hyperledger/burrow/issues/comments/253480795,https://github.com/hyperledger/burrow/issues/96#issuecomment-253480795,silasdavis,"@benjaminbollen can we close this? If there is a still an issue can we fix it against current code?
",2016-10-13 10:53:20,2016-10-13 10:53:20
https://api.github.com/repos/hyperledger/burrow/issues/96,https://api.github.com/repos/hyperledger/burrow/issues/comments/262791475,https://github.com/hyperledger/burrow/issues/96#issuecomment-262791475,silasdavis,@NodeGuy @benjaminbollen has this been fixed? Can it be closed?,2016-11-24 14:42:50,2016-11-24 14:42:50
https://api.github.com/repos/hyperledger/burrow/issues/96,https://api.github.com/repos/hyperledger/burrow/issues/comments/265027467,https://github.com/hyperledger/burrow/issues/96#issuecomment-265027467,NodeGuy,"I don't know.
",2016-12-06 00:52:24,2016-12-06 00:52:24
https://api.github.com/repos/hyperledger/burrow/issues/96,https://api.github.com/repos/hyperledger/burrow/issues/comments/361971701,https://github.com/hyperledger/burrow/issues/96#issuecomment-361971701,silasdavis,"Closing as ancient without reproduction, will test v0 eventing with reintegration from current develop ",2018-01-31 15:41:44,2018-01-31 15:41:44
https://api.github.com/repos/hyperledger/burrow/issues/95,https://api.github.com/repos/hyperledger/burrow/issues/comments/209362688,https://github.com/hyperledger/burrow/issues/95#issuecomment-209362688,benjaminbollen,"executed in tmsp branch
",2016-04-13 10:43:28,2016-04-13 10:43:28
https://api.github.com/repos/hyperledger/burrow/issues/94,https://api.github.com/repos/hyperledger/burrow/issues/comments/205394442,https://github.com/hyperledger/burrow/pull/94#issuecomment-205394442,benjaminbollen,"I will test this locally to see if we can merge it
",2016-04-04 17:03:15,2016-04-04 17:03:15
https://api.github.com/repos/hyperledger/burrow/issues/94,https://api.github.com/repos/hyperledger/burrow/issues/comments/205395590,https://github.com/hyperledger/burrow/pull/94#issuecomment-205395590,silasdavis,"AH.... hold on we have implicit submodules, see https://github.com/Masterminds/glide/issues/112
",2016-04-04 17:05:43,2016-04-04 17:05:43
https://api.github.com/repos/hyperledger/burrow/issues/94,https://api.github.com/repos/hyperledger/burrow/issues/comments/205395709,https://github.com/hyperledger/burrow/pull/94#issuecomment-205395709,silasdavis,"Will have to look into this some more, don't merge
",2016-04-04 17:05:59,2016-04-04 17:05:59
https://api.github.com/repos/hyperledger/burrow/issues/94,https://api.github.com/repos/hyperledger/burrow/issues/comments/208468782,https://github.com/hyperledger/burrow/pull/94#issuecomment-208468782,silasdavis,"@benjaminbollen fixed the tests on this, I'll make another PR to address the data races I've found
",2016-04-11 17:43:46,2016-04-11 17:43:46
https://api.github.com/repos/hyperledger/burrow/issues/94,https://api.github.com/repos/hyperledger/burrow/issues/comments/208490394,https://github.com/hyperledger/burrow/pull/94#issuecomment-208490394,benjaminbollen,"Looks very good. 
",2016-04-11 18:37:36,2016-04-11 18:37:36
https://api.github.com/repos/hyperledger/burrow/issues/93,https://api.github.com/repos/hyperledger/burrow/issues/comments/203611512,https://github.com/hyperledger/burrow/issues/93#issuecomment-203611512,AFDudley,"Naively bumping the version breaks the ""-e lxc"" flag in the ubuntu upstart script. sed patching around that returns a new error regarding docker failing to load its apparmor profile.

I assume the cirlceci patch is incompatible with the ubuntu version we are using. Ben says the priority is low, so I'm not looking into it further

Citations:
https://github.com/docker/docker/pull/17700
https://github.com/docker/docker/issues/15340
https://github.com/docker/docker/issues/21505
",2016-03-30 20:08:50,2016-03-30 20:08:50
https://api.github.com/repos/hyperledger/burrow/issues/93,https://api.github.com/repos/hyperledger/burrow/issues/comments/212009532,https://github.com/hyperledger/burrow/issues/93#issuecomment-212009532,AFDudley,"@NodeGuy are you working on a fix for this?
",2016-04-19 16:39:14,2016-04-19 16:39:14
https://api.github.com/repos/hyperledger/burrow/issues/93,https://api.github.com/repos/hyperledger/burrow/issues/comments/234773298,https://github.com/hyperledger/burrow/issues/93#issuecomment-234773298,benjaminbollen,"@AFDudley is this worth revisiting now with the alpine base image?
",2016-07-24 11:57:12,2016-07-24 11:57:12
https://api.github.com/repos/hyperledger/burrow/issues/93,https://api.github.com/repos/hyperledger/burrow/issues/comments/237076129,https://github.com/hyperledger/burrow/issues/93#issuecomment-237076129,NodeGuy,"@AFDudley Sorry, I didn't see your April comment until now for some reason.  No, I'm not working on Eris DB.
",2016-08-02 23:02:39,2016-08-02 23:02:39
https://api.github.com/repos/hyperledger/burrow/issues/90,https://api.github.com/repos/hyperledger/burrow/issues/comments/253479451,https://github.com/hyperledger/burrow/issues/90#issuecomment-253479451,silasdavis,"@benjaminbollen is this still relevant or can it be closed?
",2016-10-13 10:46:10,2016-10-13 10:46:10
https://api.github.com/repos/hyperledger/burrow/issues/90,https://api.github.com/repos/hyperledger/burrow/issues/comments/262790166,https://github.com/hyperledger/burrow/issues/90#issuecomment-262790166,silasdavis,I believe this was fixed with fixed behaviour on TransactAndHold. But I don't think this ticket helps us since will be superceded by new RPC.,2016-11-24 14:36:21,2016-11-24 14:36:21
https://api.github.com/repos/hyperledger/burrow/issues/88,https://api.github.com/repos/hyperledger/burrow/issues/comments/200292585,https://github.com/hyperledger/burrow/issues/88#issuecomment-200292585,benjaminbollen,"@NodeGuy you might have an interest to look at this bug.
",2016-03-23 10:46:46,2016-03-23 10:46:46
https://api.github.com/repos/hyperledger/burrow/issues/88,https://api.github.com/repos/hyperledger/burrow/issues/comments/200326781,https://github.com/hyperledger/burrow/issues/88#issuecomment-200326781,benjaminbollen,"The similar API calls pass in the mock test, specifically
https://github.com/eris-ltd/eris-db/blob/master/test/mock/mock_web_api_test.go#L313

there however no contract code is supplied
",2016-03-23 12:23:11,2016-03-23 12:50:19
https://api.github.com/repos/hyperledger/burrow/issues/88,https://api.github.com/repos/hyperledger/burrow/issues/comments/200333005,https://github.com/hyperledger/burrow/issues/88#issuecomment-200333005,benjaminbollen,"tests pass for `/unsafe/txpool` rather than `/unsafe/txpool?hold=true`; patching test and raising new issue for holding
",2016-03-23 12:51:56,2016-03-23 12:51:56
https://api.github.com/repos/hyperledger/burrow/issues/88,https://api.github.com/repos/hyperledger/burrow/issues/comments/200935920,https://github.com/hyperledger/burrow/issues/88#issuecomment-200935920,NodeGuy,"Why would I be interested in this bug?
",2016-03-24 17:22:25,2016-03-24 17:22:25
https://api.github.com/repos/hyperledger/burrow/issues/87,https://api.github.com/repos/hyperledger/burrow/issues/comments/199377756,https://github.com/hyperledger/burrow/issues/87#issuecomment-199377756,AFDudley,"Did you change the config files as required?
",2016-03-21 16:57:09,2016-03-21 16:57:09
https://api.github.com/repos/hyperledger/burrow/issues/87,https://api.github.com/repos/hyperledger/burrow/issues/comments/199465554,https://github.com/hyperledger/burrow/issues/87#issuecomment-199465554,slowtokyo,"Yes. Followed the tutorial exactly. 

> On 2016/03/22, at 3:57, A. F. Dudley notifications@github.com wrote:
> 
> Did you change the config files as required?
> 
> ―
> You are receiving this because you authored the thread.
> Reply to this email directly or view it on GitHub
",2016-03-21 20:34:19,2016-03-21 20:34:19
https://api.github.com/repos/hyperledger/burrow/issues/87,https://api.github.com/repos/hyperledger/burrow/issues/comments/204353522,https://github.com/hyperledger/burrow/issues/87#issuecomment-204353522,slowtokyo,"Think I might have found the problem but not sure what to do about it: Digital Ocean sets you up with rsyslog logger. So `root@ohalo-val-000:~/.eris/chains# ls -d /etc/*syslog*
/etc/rsyslog.conf  /etc/rsyslog.d`
The `logspout.toml` file assumes you are using seems to assume you are using the syslog logger. The reason I don't know what to do about it is I'm not sure what syntax should be used for the rsyslog logger in the toml file.
",2016-04-01 11:21:55,2016-04-01 11:21:55
https://api.github.com/repos/hyperledger/burrow/issues/87,https://api.github.com/repos/hyperledger/burrow/issues/comments/204648108,https://github.com/hyperledger/burrow/issues/87#issuecomment-204648108,slowtokyo,"Also, running `eris services start logspout -d` gives the following output. Shouldn't the `volume` and `ports` argument be passed in as well to docker run? 

```
root@ohalo-val-000:~# eris services start logspout -d
Checking Linux Docker socket                  unix:///var/run/docker.sock
Connecting to Docker                          unix:///var/run/docker.sock
Successfully connected to Docker daemon
Building services group                  args=[logspout]
Building services group for                   logspout
                                    services#=0
Loading service definition                    logspout
Could not find service container              logspout
Preparing to build chain
                                 dependencies=&{[] []}
                                        links=[]
                                         name=logspout
                                 volumes from=[]

Checking services after build chain
                                 dependencies=&{[] []}
                                        links=[]
                                         name=logspout
                                 volumes from=[]

Starting services group             services#=1
Performing container start                    logspout
Running container                             eris_service_logspout_1
Parsing containers                            eris_service_logspout_1:running
Container not found                           eris_service_logspout_1
Manage data containers?              autodata=false
Parsing containers                            eris_service_logspout_1:existing
Container not found                           eris_service_logspout_1
Container does not exist. Creating      image=gliderlabs/logspout
Starting container                            eris_service_logspout_1
                                          cmd=[syslog://logs4.papertrailapp.com:14212]
                               data container=eris_data_logspout_1
                                   entrypoint=[/bin/logspout]
                                  environment=[]
                                        image=gliderlabs/logspout
                              published ports=false
Container started                             eris_service_logspout_1
```
",2016-04-02 05:08:16,2016-04-02 05:19:29
https://api.github.com/repos/hyperledger/burrow/issues/87,https://api.github.com/repos/hyperledger/burrow/issues/comments/206636875,https://github.com/hyperledger/burrow/issues/87#issuecomment-206636875,compleatang,"i have also been unable to get logspout to work. wonder what edb/tmint are actually writing to.
",2016-04-07 00:43:19,2016-04-07 00:43:19
https://api.github.com/repos/hyperledger/burrow/issues/87,https://api.github.com/repos/hyperledger/burrow/issues/comments/253608257,https://github.com/hyperledger/burrow/issues/87#issuecomment-253608257,compleatang,"this isssue is mostly closed now and there are too many dead code paths. can revisit after logger migration if it reappears.
",2016-10-13 19:05:52,2016-10-13 19:05:52
https://api.github.com/repos/hyperledger/burrow/issues/86,https://api.github.com/repos/hyperledger/burrow/issues/comments/198950508,https://github.com/hyperledger/burrow/issues/86#issuecomment-198950508,ebuchman,"this should just be a config option for erisdb: https://github.com/eris-ltd/eris-db/blob/master/erisdb/serve.go#L69

Is there something else? 

We should make it a bit more robust - right now if the http con to keys fails itll panic, should retry a few times instead
",2016-03-20 15:30:11,2016-03-20 15:30:11
https://api.github.com/repos/hyperledger/burrow/issues/86,https://api.github.com/repos/hyperledger/burrow/issues/comments/198950661,https://github.com/hyperledger/burrow/issues/86#issuecomment-198950661,compleatang,"Great. Anyway we just need to have that as our default rather than the current system. Does tmint still need the priv_validator.json in what we're using and/or on current (TMSP based) master?
",2016-03-20 15:32:57,2016-03-20 15:32:57
https://api.github.com/repos/hyperledger/burrow/issues/86,https://api.github.com/repos/hyperledger/burrow/issues/comments/198951035,https://github.com/hyperledger/burrow/issues/86#issuecomment-198951035,ebuchman,"Neither! 
",2016-03-20 15:38:58,2016-03-20 15:38:58
https://api.github.com/repos/hyperledger/burrow/issues/86,https://api.github.com/repos/hyperledger/burrow/issues/comments/198951321,https://github.com/hyperledger/burrow/issues/86#issuecomment-198951321,ebuchman,"Though, the expectation for now is that consumers using their own keys system should fork tendermint to make the appropriate changes in the node/node.go file
",2016-03-20 15:43:21,2016-03-20 15:43:21
https://api.github.com/repos/hyperledger/burrow/issues/86,https://api.github.com/repos/hyperledger/burrow/issues/comments/198952350,https://github.com/hyperledger/burrow/issues/86#issuecomment-198952350,compleatang,"Where do we set the right public key to use for signing?
",2016-03-20 15:58:27,2016-03-20 15:58:27
https://api.github.com/repos/hyperledger/burrow/issues/86,https://api.github.com/repos/hyperledger/burrow/issues/comments/198952956,https://github.com/hyperledger/burrow/issues/86#issuecomment-198952956,ebuchman,"right. so currently the strategy is to use a priv_validator.json but without the privkey! we should probably just make that another config option tho instead and do away with that file completely? That file is useful tho to prevent double signing - if we get rid of it, we should have at least something to take its place
",2016-03-20 16:02:13,2016-03-20 16:02:13
https://api.github.com/repos/hyperledger/burrow/issues/86,https://api.github.com/repos/hyperledger/burrow/issues/comments/199070725,https://github.com/hyperledger/burrow/issues/86#issuecomment-199070725,compleatang,"Cool. So the plan from the tmint side is to use priv vals but to remove the private key string from the priv val and when it talks to the signer it will be using the pub key in the priv Val. 

Is that right? 
",2016-03-21 00:40:34,2016-03-21 00:40:34
https://api.github.com/repos/hyperledger/burrow/issues/86,https://api.github.com/repos/hyperledger/burrow/issues/comments/199072559,https://github.com/hyperledger/burrow/issues/86#issuecomment-199072559,ebuchman,"We don't have an explicit plan as of yet for what to do about keys. I made those changes to easily support eris-keys, but tendermint is still using full on priv_validator.json. Might be worth seeing if the Ledger guys can incorporate some rule based system somehow for what not to sign, and then ideally we can adopt that too.
",2016-03-21 00:54:44,2016-03-21 00:54:44
https://api.github.com/repos/hyperledger/burrow/issues/86,https://api.github.com/repos/hyperledger/burrow/issues/comments/262789328,https://github.com/hyperledger/burrow/issues/86#issuecomment-262789328,silasdavis,"The essence of this is still relevant, but I think we have a clear idea about the future of keys that has moved on from this.",2016-11-24 14:32:24,2016-11-24 14:32:24
https://api.github.com/repos/hyperledger/burrow/issues/84,https://api.github.com/repos/hyperledger/burrow/issues/comments/226566619,https://github.com/hyperledger/burrow/issues/84#issuecomment-226566619,zramsay,"replaced by #135 
",2016-06-16 18:09:11,2016-06-16 18:09:11
https://api.github.com/repos/hyperledger/burrow/issues/83,https://api.github.com/repos/hyperledger/burrow/issues/comments/199343633,https://github.com/hyperledger/burrow/issues/83#issuecomment-199343633,benjaminbollen,"I confirm for erisdbss, will also look at certgen
",2016-03-21 15:36:07,2016-03-21 15:36:07
https://api.github.com/repos/hyperledger/burrow/issues/83,https://api.github.com/repos/hyperledger/burrow/issues/comments/253378809,https://github.com/hyperledger/burrow/issues/83#issuecomment-253378809,compleatang,"this issue can be closed.
",2016-10-13 00:36:11,2016-10-13 00:36:11
https://api.github.com/repos/hyperledger/burrow/issues/82,https://api.github.com/repos/hyperledger/burrow/issues/comments/231795619,https://github.com/hyperledger/burrow/issues/82#issuecomment-231795619,benjaminbollen,"resolved example: https://github.com/eris-ltd/eris-db/blob/develop/cmd/serve.go
",2016-07-11 16:56:07,2016-07-11 16:56:15
https://api.github.com/repos/hyperledger/burrow/issues/81,https://api.github.com/repos/hyperledger/burrow/issues/comments/199345628,https://github.com/hyperledger/burrow/issues/81#issuecomment-199345628,benjaminbollen,"this is probably a topic worth discussing and getting right when we sit together later in the week; I can look to prepare a proposal
",2016-03-21 15:42:00,2016-03-21 15:42:00
https://api.github.com/repos/hyperledger/burrow/issues/81,https://api.github.com/repos/hyperledger/burrow/issues/comments/253378873,https://github.com/hyperledger/burrow/issues/81#issuecomment-253378873,compleatang,"this can be closed.
",2016-10-13 00:36:42,2016-10-13 00:36:42
https://api.github.com/repos/hyperledger/burrow/issues/80,https://api.github.com/repos/hyperledger/burrow/issues/comments/253383956,https://github.com/hyperledger/burrow/issues/80#issuecomment-253383956,compleatang,"this should be on the cli side as it is a runtime consideration.
",2016-10-13 01:16:15,2016-10-13 01:16:15
https://api.github.com/repos/hyperledger/burrow/issues/80,https://api.github.com/repos/hyperledger/burrow/issues/comments/253383980,https://github.com/hyperledger/burrow/issues/80#issuecomment-253383980,compleatang,"Issue moved to [eris-ltd/eris-cli #995](https://github.com/eris-ltd/eris-cli/issues/995) via [**ZenHub**](https://www.zenhub.com/)
",2016-10-13 01:16:24,2016-10-13 01:16:24
https://api.github.com/repos/hyperledger/burrow/issues/79,https://api.github.com/repos/hyperledger/burrow/issues/comments/252863813,https://github.com/hyperledger/burrow/issues/79#issuecomment-252863813,compleatang,"This is done. Closing.
",2016-10-11 09:49:20,2016-10-11 09:49:20
https://api.github.com/repos/hyperledger/burrow/issues/78,https://api.github.com/repos/hyperledger/burrow/issues/comments/252864783,https://github.com/hyperledger/burrow/issues/78#issuecomment-252864783,compleatang,"moving to 0.12.1|0.16.0 so that we have time to appropriately look at this issue. 
",2016-10-11 09:53:42,2016-10-11 09:53:42
https://api.github.com/repos/hyperledger/burrow/issues/78,https://api.github.com/repos/hyperledger/burrow/issues/comments/262788969,https://github.com/hyperledger/burrow/issues/78#issuecomment-262788969,silasdavis,"I am tentatively closing this because I think with keys and cm coming under eris-db some of this is subsumed. Also I am not clear what the eris platform logging standards are, and discussions has arrived at the idea that CLI tooling does not need to have identical style logging to eris-db. I think the 'spirit' in which the issue was created has better expression in the parent Epic and its children.",2016-11-24 14:30:34,2016-11-24 14:30:34
https://api.github.com/repos/hyperledger/burrow/issues/77,https://api.github.com/repos/hyperledger/burrow/issues/comments/232002672,https://github.com/hyperledger/burrow/issues/77#issuecomment-232002672,benjaminbollen,"Currently all environment variables are being ported to `ERIS_DB_*`;
I have to integrate environment variables from the shell scripts into the `eris-db` command, and I will transition for 0.12.0-rc2 both versions of the ENV (with and without prefix); then deprecate the without prefix
",2016-07-12 10:37:43,2016-07-12 10:37:43
https://api.github.com/repos/hyperledger/burrow/issues/77,https://api.github.com/repos/hyperledger/burrow/issues/comments/252864442,https://github.com/hyperledger/burrow/issues/77#issuecomment-252864442,compleatang,"This is done, no?
",2016-10-11 09:52:16,2016-10-11 09:52:16
https://api.github.com/repos/hyperledger/burrow/issues/77,https://api.github.com/repos/hyperledger/burrow/issues/comments/255526169,https://github.com/hyperledger/burrow/issues/77#issuecomment-255526169,benjaminbollen,"yes
",2016-10-22 12:40:28,2016-10-22 12:40:28
https://api.github.com/repos/hyperledger/burrow/issues/76,https://api.github.com/repos/hyperledger/burrow/issues/comments/253597880,https://github.com/hyperledger/burrow/issues/76#issuecomment-253597880,compleatang,"Dupe of #212 Closing here.
",2016-10-13 18:29:10,2016-10-13 18:29:10
https://api.github.com/repos/hyperledger/burrow/issues/75,https://api.github.com/repos/hyperledger/burrow/issues/comments/198950705,https://github.com/hyperledger/burrow/issues/75#issuecomment-198950705,ebuchman,"lets have a `tools` dir in erisdb and we can move them all there and drop the `mint` prefixes. not sure if it needs to be in the binary either, might be nice to keep the binary as just a server and the low level tooling separate
",2016-03-20 15:33:28,2016-03-20 15:33:28
https://api.github.com/repos/hyperledger/burrow/issues/73,https://api.github.com/repos/hyperledger/burrow/issues/comments/252864871,https://github.com/hyperledger/burrow/issues/73#issuecomment-252864871,compleatang,"overly broad. and also done.
",2016-10-11 09:54:11,2016-10-11 09:54:11
https://api.github.com/repos/hyperledger/burrow/issues/72,https://api.github.com/repos/hyperledger/burrow/issues/comments/202977012,https://github.com/hyperledger/burrow/issues/72#issuecomment-202977012,silasdavis,"@benjaminbollen @compleatang capturing what we decided in Berlin for this ticket:
- Fork Ethereum to allow changes or track upstream as we wish
- Update eris/tendermint to match the [godeps vendored tendermint in eris/eris-db](https://github.com/eris-ltd/eris-db/tree/master/Godeps/_workspace/src/github.com/tendermint)
- Sync the vendored version of tendermint with eris/tendermint
- Pull up the tendermint repository to the top level of this repository
- Make tests pass
- Factor out some of the tendermint/\* stuff then pull tendermint/tendermint to top level
- Make tests pass
- Make eris-db depend on appropriate packages in eris/ethereum (for current VM)
- Remove [old tendermint VM](https://github.com/eris-ltd/eris-db/tree/master/Godeps/_workspace/src/github.com/tendermint/tendermint/vm)
- Manually apply work-in-progress unforking changes from #69 
- Complete unforking of Ethereum VM so eris/eris-db/tendermint depends on current Ethereum VM as a proper dependency
",2016-03-29 16:07:03,2016-03-29 16:07:43
https://api.github.com/repos/hyperledger/burrow/issues/72,https://api.github.com/repos/hyperledger/burrow/issues/comments/203163271,https://github.com/hyperledger/burrow/issues/72#issuecomment-203163271,AFDudley,"How are we planning to address ed22519 support in the unforked EVM?
",2016-03-30 00:02:08,2016-03-30 00:02:08
https://api.github.com/repos/hyperledger/burrow/issues/72,https://api.github.com/repos/hyperledger/burrow/issues/comments/205308115,https://github.com/hyperledger/burrow/issues/72#issuecomment-205308115,silasdavis,"@AFDudley I don't know, could you elaborate? Assuming we have some patched ed22519 support in current eris-db -> vendored tendermint -> 'forked' eth? 
",2016-04-04 14:05:07,2016-04-04 14:05:16
https://api.github.com/repos/hyperledger/burrow/issues/72,https://api.github.com/repos/hyperledger/burrow/issues/comments/205308773,https://github.com/hyperledger/burrow/issues/72#issuecomment-205308773,AFDudley,"Yeah. That's the assumption, I don't have the details, but it should be trivial to check by looking at imports.
",2016-04-04 14:07:23,2016-04-04 14:07:23
https://api.github.com/repos/hyperledger/burrow/issues/72,https://api.github.com/repos/hyperledger/burrow/issues/comments/262788174,https://github.com/hyperledger/burrow/issues/72#issuecomment-262788174,silasdavis,"With erismint and other priorities consider this superceded and ticket not needed to remind us that this is a thing, let's create another ticket before we embark on such integration.",2016-11-24 14:26:27,2016-11-24 14:26:27
https://api.github.com/repos/hyperledger/burrow/issues/71,https://api.github.com/repos/hyperledger/burrow/issues/comments/198913155,https://github.com/hyperledger/burrow/issues/71#issuecomment-198913155,compleatang,"what is currently in erisdb is likely to become the base for our `messenger` component of `eris chains` ...
",2016-03-20 12:04:55,2016-03-20 12:04:55
https://api.github.com/repos/hyperledger/burrow/issues/71,https://api.github.com/repos/hyperledger/burrow/issues/comments/198951010,https://github.com/hyperledger/burrow/issues/71#issuecomment-198951010,ebuchman,"right. so this is a big one. we need to strategize a bit about what httpserver/rpc framework we want to use here. I like tendermint/go-rpc because it exposes the same endpoints as GET requests (so we can see in browser), as jsonrpc POST, and as websocket messages. of course the js libs use the erisdb ""rest"" api but I believe there have been some issues there and dave has even started using the 46657 api.  granted there's no rush on this but maybe we should put @NodeGuy in charge of this interface since he's responsible for the js tools which will be talking to it, and we can make the mint-client tools conform to whatever he thinks is best for the API here. 
",2016-03-20 15:38:23,2016-03-20 15:38:23
https://api.github.com/repos/hyperledger/burrow/issues/71,https://api.github.com/repos/hyperledger/burrow/issues/comments/198951290,https://github.com/hyperledger/burrow/issues/71#issuecomment-198951290,compleatang,"It's bigger than the js tooling. We will discuss this at the chains team summit next week.
",2016-03-20 15:42:54,2016-03-20 15:42:54
https://api.github.com/repos/hyperledger/burrow/issues/71,https://api.github.com/repos/hyperledger/burrow/issues/comments/253612992,https://github.com/hyperledger/burrow/issues/71#issuecomment-253612992,compleatang,"overly broad. closing
",2016-10-13 19:24:54,2016-10-13 19:24:54
https://api.github.com/repos/hyperledger/burrow/issues/70,https://api.github.com/repos/hyperledger/burrow/issues/comments/252864316,https://github.com/hyperledger/burrow/issues/70#issuecomment-252864316,compleatang,"I think I logged a duplicate issue here. In `feature-smaller-docker` I made the necessary switches for the dockerfile to _only_ reference the binary. The bash wrapper **is** in the dockerfile so folks can use if needed. However, by default the binary rather than the bash wrapper is called by the docker CMD. Also, cli, once the branch of the same name is merged there, will **only** utilize the binary. Tl'dr the bash wrapper can safely be removed in 0.12.1 once we smoke test that no weird side effects from this change settle. 
",2016-10-11 09:51:41,2016-10-11 09:51:41
https://api.github.com/repos/hyperledger/burrow/issues/70,https://api.github.com/repos/hyperledger/burrow/issues/comments/254914691,https://github.com/hyperledger/burrow/issues/70#issuecomment-254914691,benjaminbollen,"the bash script set `ERIS_DB_WORKDIR`

```
if [ ""$ERIS_DB_WORKDIR"" = """" ]; then
    ERIS_DB_WORKDIR=""$ERIS/chains/$CHAIN_ID""
fi

if [ ! -d ""$ERIS_DB_WORKDIR"" ]; then
    mkdir -p $ERIS_DB_WORKDIR
    ifExit ""Error making working directory $ERIS_DB_WORKDIR""
fi

export ERIS_DB_WORKDIR
export ERIS_DB_DATADIR=$ERIS_DB_WORKDIR/data
```

also adds `$CONFIG_OPTS` to serve; does cli deal with this?
",2016-10-19 19:24:03,2016-10-19 19:24:03
https://api.github.com/repos/hyperledger/burrow/issues/70,https://api.github.com/repos/hyperledger/burrow/issues/comments/262787746,https://github.com/hyperledger/burrow/issues/70#issuecomment-262787746,silasdavis,Bumped up estimate... Time taken suggest more than a 1. Is this for current sprint?,2016-11-24 14:24:24,2016-11-24 14:24:24
https://api.github.com/repos/hyperledger/burrow/issues/70,https://api.github.com/repos/hyperledger/burrow/issues/comments/262816247,https://github.com/hyperledger/burrow/issues/70#issuecomment-262816247,compleatang,"CLI currently does not use the bash script at all.... It sets the env vars and then calls the eris-db binary directly. It was a 1 because all that needs to happen is the build script updated and the bash script removed from the repo... 

https://github.com/eris-ltd/eris-cli/blob/master/chains/chains.go#L383-L390",2016-11-24 16:49:39,2016-11-24 16:49:39
https://api.github.com/repos/hyperledger/burrow/issues/70,https://api.github.com/repos/hyperledger/burrow/issues/comments/361971016,https://github.com/hyperledger/burrow/issues/70#issuecomment-361971016,silasdavis,Done and supercede,2018-01-31 15:39:44,2018-01-31 15:39:44
https://api.github.com/repos/hyperledger/burrow/issues/68,https://api.github.com/repos/hyperledger/burrow/issues/comments/195436737,https://github.com/hyperledger/burrow/pull/68#issuecomment-195436737,benjaminbollen,"looks (diagonally) good to me
",2016-03-11 16:19:47,2016-03-11 16:19:47
https://api.github.com/repos/hyperledger/burrow/issues/65,https://api.github.com/repos/hyperledger/burrow/issues/comments/194866060,https://github.com/hyperledger/burrow/issues/65#issuecomment-194866060,benjaminbollen,"this does not necessarily address our ability to test in an integration test that bad transactions get flushed from the mempool, but happy to start here.
",2016-03-10 14:17:00,2016-03-10 14:17:00
https://api.github.com/repos/hyperledger/burrow/issues/65,https://api.github.com/repos/hyperledger/burrow/issues/comments/262787435,https://github.com/hyperledger/burrow/issues/65#issuecomment-262787435,silasdavis,"I don't think we will want to do this, if we do we can revisit in context of RPC",2016-11-24 14:22:55,2016-11-24 14:22:55
https://api.github.com/repos/hyperledger/burrow/issues/64,https://api.github.com/repos/hyperledger/burrow/issues/comments/253613063,https://github.com/hyperledger/burrow/issues/64#issuecomment-253613063,compleatang,"overly broad. closing.
",2016-10-13 19:25:12,2016-10-13 19:25:12
https://api.github.com/repos/hyperledger/burrow/issues/63,https://api.github.com/repos/hyperledger/burrow/issues/comments/193571703,https://github.com/hyperledger/burrow/pull/63#issuecomment-193571703,ebuchman,"hey i just merged this to `fixes` (0ba27d8dcf53532a96f2d475ddff144b807dd642)
",2016-03-08 02:48:49,2016-03-08 02:48:49
https://api.github.com/repos/hyperledger/burrow/issues/61,https://api.github.com/repos/hyperledger/burrow/issues/comments/193552587,https://github.com/hyperledger/burrow/issues/61#issuecomment-193552587,benjaminbollen,"following branches are stale and have no unmerged commits  - will remove tomorrow evening (17 CET)
- [ethans fixes](https://github.com/eris-ltd/eris-db/tree/ethansfixes)
- [project bruno](https://github.com/eris-ltd/eris-db/tree/project_bruno)

two branches are fixes by @ebuchman  from project genesis
- [disable IP cap](https://github.com/eris-ltd/eris-db/tree/disable_ip_caps) - exclusive godeps/ quick fix; do we want the limit revoked ?
- [fixes](https://github.com/eris-ltd/eris-db/tree/fixes) - common root for genesis p2p handshake has been added to eris-db/godep/tmint in ethvm branch; should this also be ported to tmint/tmint; tmint/go-p2p ? @ebuchman does this have other fixes from genesis?

not sure who committed this (@dennismckinnon ?)
- [updateState](https://github.com/eris-ltd/eris-db/commit/40a6546b60dd9021564ebc98c7fb69aab9464e8a#diff-78d9256fa9145e403e8cb7aad542b9a5R80) not sure whether this is a legitimate update

@ebuchman is the work from these included elsewhere or part deprecated?
- [tmsp](https://github.com/eris-ltd/eris-db/tree/tmsp)
- [mempool](https://github.com/eris-ltd/eris-db/tree/mempool) 
",2016-03-08 01:57:33,2016-03-08 01:57:33
https://api.github.com/repos/hyperledger/burrow/issues/61,https://api.github.com/repos/hyperledger/burrow/issues/comments/193552877,https://github.com/hyperledger/burrow/issues/61#issuecomment-193552877,compleatang,"can you push a tag for project bruno (think there's still some code running which uses that, but better a tag than a branch)
",2016-03-08 01:59:10,2016-03-08 01:59:10
https://api.github.com/repos/hyperledger/burrow/issues/61,https://api.github.com/repos/hyperledger/burrow/issues/comments/193560531,https://github.com/hyperledger/burrow/issues/61#issuecomment-193560531,benjaminbollen,"pushed tag and removed branch `project_bruno`
",2016-03-08 02:23:14,2016-03-08 02:23:14
https://api.github.com/repos/hyperledger/burrow/issues/61,https://api.github.com/repos/hyperledger/burrow/issues/comments/193570050,https://github.com/hyperledger/burrow/issues/61#issuecomment-193570050,ebuchman,"ok, i deleted `ethansfixes`, `mempool`, `lessLogs`, and `disableipcaps`.

`updateState` is being used by dennis right now, lets leave that. It has some changes we might want to merge to mint-client/mintdump instead.

`fixes` has the project genesis fixes and some other stuff. i'll merge it this week for the 0.11.3 release.

`ethvm` is branched from `fixes`. it will be the branch for 0.11.4 (hopefully!) and will include geth's vm (hopefully you can help out getting it there).

`tmsp` I'm targeting for 0.12.0, which should align with `eris chains` refactor. It will inherit things like the `ethvm` and other fixes going into the 0.11 series, but by the time we're using tmsp all the peer/consensus stuff will be in tendermint core (or whatever other consensus erisdb plugs into), so many of the fixes made to erisdb are already replicated there  (ill compile a short list of what's missing - ie. p2p handshake with genesis state root).

Hope that helps.
",2016-03-08 02:44:18,2016-03-08 02:44:18
https://api.github.com/repos/hyperledger/burrow/issues/61,https://api.github.com/repos/hyperledger/burrow/issues/comments/193572866,https://github.com/hyperledger/burrow/issues/61#issuecomment-193572866,benjaminbollen,"Thanks !
",2016-03-08 02:51:09,2016-03-08 02:51:09
https://api.github.com/repos/hyperledger/burrow/issues/60,https://api.github.com/repos/hyperledger/burrow/issues/comments/191721921,https://github.com/hyperledger/burrow/issues/60#issuecomment-191721921,benjaminbollen,"also saw an intermittent failure on app13

```
Testing eris-pm using fixture =>    app13/

* tests binding the abi of a get set contract using contract naming pattern and explicit abi fields.
* tests instance: all functionality to deploy all contracts from a single file

Performing action. This can sometimes take a wee while
Executing Job                                 defaultAddr
Executing Job                                 addr1
Executing Job                                 addr2
Executing Job                                 addr2_pub
Executing Job                                 setStorageBase
Executing Job                                 deployGSFactory
Contract Address                              7155638E88C07C2B4DC6948F36859CD5BD588B9A
Transaction Hash                              9A9666E1D11617FD2A4CEA14C45AB5BA92841436
Contract Address                              5DF4020089F17E0A12BC2063B04E68A09B711CFE
Transaction Hash                              363D8127839204DDA7DEA42391F418A138D06241
Executing Job                                 createGSContract
Return Value                                  
Executing Job                                 getGSAddr
Too little data                           end=0
                                          len=20
                                         name=
                                         next=32
                                       retBlk=32
                                        start=0
                                         type=
                                          val=
Too little data; usually means a bad return from a contract

Container eris_interactive_eris_service_app13_tmp__1 exited with status 1

Stopping (may take a few seconds)             keys
Removing file                            file=/root/.eris/chains/eris-pm-tests-21397b8b7355.toml
```
",2016-03-03 11:44:59,2016-03-03 11:44:59
https://api.github.com/repos/hyperledger/burrow/issues/60,https://api.github.com/repos/hyperledger/burrow/issues/comments/192314307,https://github.com/hyperledger/burrow/issues/60#issuecomment-192314307,benjaminbollen,"I have it consistently failing now on a different error type; asserting the (Factory)Addr; so I broke something here :)

```
Performing action. This can sometimes take a wee while
Executing Job Named                           defaultAddr
Executing Job Named                           addr1
Executing Job Named                           addr2
Executing Job Named                           addr2_pub
Executing Job Named                           setStorageBase
Executing Job Named                           deployGSFactoryFactory
Contract Address                              9C0C95E53A1E8277EA9BB8F41FE65437697E57ED
Transaction Hash                              189F27B094EA3BFE09E588110925981CF72C42A2
Executing Job Named                           createGSFactory
Transaction Hash                              536BD440AF8BBCD283A88FF170D54A5B3E8F34CE
Return Value                                  000000000000000000000000C58D81C459E912CD6F870032B7010D3FB13F50FD
Executing Job Named                           getGSFactoryAddr
Return Value                                  C58D81C459E912CD6F870032B7010D3FB13F50FD
Executing Job Named                           assertFactoryAddr
Assertion Failed =>     C58D81C459E912CD6F870032B7010D3FB13F50FD:536BD440AF8BBCD283A88FF170D54A5B3E8F34CE
    [67 53 56 68 56 49 67 52 53 57 69 57 49 50 67 68 54 70 56 55 48 48 51 50 66 55 48 49 48 68 51 70 66 49 51 70 53 48 70 68]:[53 51 54 66 68 52 52 48 65 70 56 66 66 67 68 50 56 51 65 56 56 70 70 49 55 48 68 53 52 65 53 66 51 69 56 70 51 52 67 69]
Container eris_interactive_eris_service_app17_tmp_deploy_1 exited with status 1
```
",2016-03-04 15:05:48,2016-03-04 15:06:39
https://api.github.com/repos/hyperledger/burrow/issues/60,https://api.github.com/repos/hyperledger/burrow/issues/comments/193471848,https://github.com/hyperledger/burrow/issues/60#issuecomment-193471848,ebuchman,"so in eris-compilers we use a map to store the solc contracts
then we loop over the map and put it in an array, and thats whats returned to epm
but looping over a map is non-determinisitc
so when epm goes to deploy, whether it deploys one or all, it will be in a different order every time
so either we need to be smarter with the return object, or we want to preserve order in the compiler (probably not)
and it seems like we also shouldn't be doing ""Deploy all"" on app17 at least
but we do need to specify which of the three contracts we do want to deploy
",2016-03-07 21:53:43,2016-03-07 21:53:43
https://api.github.com/repos/hyperledger/burrow/issues/60,https://api.github.com/repos/hyperledger/burrow/issues/comments/193476828,https://github.com/hyperledger/burrow/issues/60#issuecomment-193476828,AFDudley,"Shouldn't the map just be replaced with an ordered object?
",2016-03-07 22:05:41,2016-03-07 22:05:41
https://api.github.com/repos/hyperledger/burrow/issues/60,https://api.github.com/repos/hyperledger/burrow/issues/comments/193478048,https://github.com/hyperledger/burrow/issues/60#issuecomment-193478048,ebuchman,"that only solves some of the problem. epm still needs to be smarter about which contracts from that list/map it deploys. in this case, it should have only deployed one but seemed to deploy all. which _one_ needs to be specified more intelligently, and may be better to use names than order
",2016-03-07 22:09:15,2016-03-07 22:09:15
https://api.github.com/repos/hyperledger/burrow/issues/60,https://api.github.com/repos/hyperledger/burrow/issues/comments/193480637,https://github.com/hyperledger/burrow/issues/60#issuecomment-193480637,compleatang,"i was explicitly testing `all` here.

this is why the odds were failing. the evens were ""smarter"" according to E's definition.
",2016-03-07 22:17:59,2016-03-07 22:17:59
https://api.github.com/repos/hyperledger/burrow/issues/60,https://api.github.com/repos/hyperledger/burrow/issues/comments/193503116,https://github.com/hyperledger/burrow/issues/60#issuecomment-193503116,compleatang,"confirmed to be an epm bug.
",2016-03-07 23:26:19,2016-03-07 23:26:19
https://api.github.com/repos/hyperledger/burrow/issues/60,https://api.github.com/repos/hyperledger/burrow/issues/comments/227271068,https://github.com/hyperledger/burrow/issues/60#issuecomment-227271068,ebuchman,"Putting this here since just came across it and wanted to document: 

Output from a failed run looked like:

```
Performing action. This can sometimes take a wee while
Executing Job                                 defaultAddr
Executing Job                                 addr1
Executing Job                                 addr2
Executing Job                                 addr2_pub
Executing Job                                 setStorageBase
Executing Job                                 deployGSFactory
Contract Address                              7155638E88C07C2B4DC6948F36859CD5BD588B9A
Transaction Hash                              9A9666E1D11617FD2A4CEA14C45AB5BA92841436
Contract Address                              5DF4020089F17E0A12BC2063B04E68A09B711CFE
Transaction Hash                              363D8127839204DDA7DEA42391F418A138D06241
Executing Job                                 createGSContract
Return Value                                  
Executing Job                                 getGSAddr
Too little data                           end=0
                                          len=20
                                         name=
                                         next=32
                                       retBlk=32
                                        start=0
                                         type=
                                          val=
Too little data; usually means a bad return from a contract
```

The test fails on getGSAddr, but the actual problem seems to be the step before, where `Return Value` is empty for `createGSContract`. 
Presumably, the return value should be the address of this new GSContract, so let's find out why we never got (maybe the contract was never created).

First off, we need more logs. Using `--debug` with `eris pks do` gives us that. Here's the relevant output (from a different run than the above one):

```
Executing Job                                 createGSFactory
Type                                          Call
Fixing Variables =>                       res=8A7ADFC12D7A157824AD4B36780A658E2B01FC49
                                          var=deployGSFactoryFactory
ABI Specification (Formulate)                 [{""constant"":false,""inputs"":[],""name"":""getLast"",""outputs"":[{""name"":""GSAddr"",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""create"",""outputs"":[{""name"":""GSAdd
r"",""type"":""address""}],""type"":""function""}]
Packing Call via ABI                arguments=[]
                                function name=create
Nothing to pack
Calling                                  data=efc81a8c
                                  destination=8A7ADFC12D7A157824AD4B36780A658E2B01FC49
No return from contract.
Return Value
Executing Job                                 getGSFactoryAddr
Type                                          QueryContract
Fixing Variables =>                       res=8A7ADFC12D7A157824AD4B36780A658E2B01FC49
                                          var=deployGSFactoryFactory
ABI Specification (Formulate)                 [{""constant"":false,""inputs"":[],""name"":""getLast"",""outputs"":[{""name"":""GSAddr"",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""create"",""outputs"":[{""name"":""GSAddr"",""type"":""address""}],""type"":""function""}]
Packing Call via ABI                arguments=[]
                                function name=getLast
Nothing to pack
Decoding Raw Result                       res=
                                          abi=GSFactoryFactory
ABI Specification (Decode)                    [{""constant"":false,""inputs"":[],""name"":""getLast"",""outputs"":[{""name"":""GSAddr"",""type"":""address""}],""type"":""function""},{""constant"":false,""inputs"":[],""name"":""create"",""outputs"":[{""name"":""GSAddr"",""type"":""address""}],""type"":""function""}]
Too little data                           end=0
                                          len=20
                                         name=
                                         next=32
                                       retBlk=32
                                        start=0
                                         type=
                                          val=
Too little data; usually means a bad return from a contract
```

So the job  `createGSFactory` is calling the contract `8A7ADFC12D7A157824AD4B36780A658E2B01FC49`, specifically the `create` method, which has the function id `efc81a8c` (function id is the first four bytes of the data sent to an ethereum contract).

Let's go search for `8A7ADFC12D7A157824AD4B36780A658E2B01FC49` in the chain logs, so we can see what went wrong when we try to call it. Here are some places that address shows up:

When it's created:

```
^[[34mINFO^[[0m[03-07|21:16:54] Created new contract 0000000000000000000000008A7ADFC12D7A157824AD4B36780A658E2B01FC49 ^[[34mmodule^[[0m=state
^[[34mINFO^[[0m[03-07|21:16:54] Code for this contract: 606060405260978060106000396000F360606040526000357C01000000000000000000000000000000000000000000000000000000009004806360FE47B11460415780636D4CE63C14605757603F565B005B605560048080359060200190919050506078565B005B606260048050506086565B6040518082815260200191505060405180910390F35B806000600050819055505B50565B600060006000505490506094565B9056 ^[[34mmodule^[[0m=state
(1) (00000000) 0000000000000000000000008A7ADFC12D7A157824AD4B36780A658E2B01FC49 (code=0) gas: 1111111111 (d) 606060405260978060106000396000F360606040526000357C01000000000000000000000000000000000000000000000000000000009004806360FE47B11460415780636D4CE63C14605757603F565B005B605560048080359060200190919050506078565B005B606260048050506086565B6040518082815260200191505060405180910390F35B806000600050819055505B50565B600060006000505490506094565B9056
```

When it's called:

```
^[[34mINFO^[[0m[03-07|21:16:56] Account has permission                   ^[[34mmodule^[[0m=state ^[[34maddress^[[0m=1266E9536C8CF38AE1EC38B7A3552DC263456991 ^[[34mperm^[[0m=call
^[[34mINFO^[[0m[03-07|21:16:56] Out account: Account{8A7ADFC12D7A157824AD4B36780A658E2B01FC49:<nil> B:8765 C:151 S: P:{Base: 100011111110; Set: 11111111111111 []}} ^[[34mmodule^[[0m=state
^[[34mINFO^[[0m[03-07|21:16:56] Calling contract 0000000000000000000000008A7ADFC12D7A157824AD4B36780A658E2B01FC49 with code 60606040526000357C01000000000000000000000000000000000000000000000000000000009004806360FE47B11460415780636D4CE63C14605757603F565B005B605560048080359060200190919050506078565B005B606260048050506086565B6040518082815260200191505060405180910390F35B806000600050819055505B50565B600060006000505490506094565B9056 ^[[34mmodule^[[0m=state
^[[34mINFO^[[0m[03-07|21:16:56] Code for this contract: 60606040526000357C01000000000000000000000000000000000000000000000000000000009004806360FE47B11460415780636D4CE63C14605757603F565B005B605560048080359060200190919050506078565B005B606260048050506086565B6040518082815260200191505060405180910390F35B806000600050819055505B50565B600060006000505490506094565B9056 ^[[34mmodule^[[0m=state
(1) (00000000) 0000000000000000000000008A7ADFC12D7A157824AD4B36780A658E2B01FC49 (code=151) gas: 1111111111 (d) EFC81A8C
(pc) 0   (op) PUSH1          (st) 0     => 0x0000000000000000000000000000000000000000000000000000000000000060
(pc) 2   (op) PUSH1          (st) 1     => 0x0000000000000000000000000000000000000000000000000000000000000040
(pc) 4   (op) MSTORE         (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000060
(pc) 5   (op) PUSH1          (st) 0     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 7   (op) CALLDATALOAD   (st) 1     => 0xEFC81A8C00000000000000000000000000000000000000000000000000000000
(pc) 8   (op) PUSH29         (st) 1     => 0x0000000100000000000000000000000000000000000000000000000000000000
(pc) 38  (op) SWAP1          (st) 2     => [2] EFC81A8C00000000000000000000000000000000000000000000000000000000
(pc) 39  (op) DIV            (st) 2     108456323444153893642889178342637841560964329563846489711067256640281426001920 / 26959946667150639794667015087019630673637144422540572481103610249216 = 4022868620 (00000000000000000000000000000000000000000000000000000000EFC81A8C)
(pc) 40  (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000EFC81A8C
(pc) 41  (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000060FE47B1
(pc) 46  (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000060FE47B1 == 00000000000000000000000000000000000000000000000000000000EFC81A8C = 0
(pc) 47  (op) PUSH1          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000041
(pc) 49  (op) JUMPI          (st) 3     ~> false
(pc) 50  (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000EFC81A8C
(pc) 51  (op) PUSH4          (st) 2     => 0x000000000000000000000000000000000000000000000000000000006D4CE63C
(pc) 56  (op) EQ             (st) 3     000000000000000000000000000000000000000000000000000000006D4CE63C == 00000000000000000000000000000000000000000000000000000000EFC81A8C = 0
(pc) 57  (op) PUSH1          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000057
(pc) 59  (op) JUMPI          (st) 3     ~> false
(pc) 60  (op) PUSH1          (st) 1     => 0x000000000000000000000000000000000000000000000000000000000000003F
(pc) 62  (op) JUMP           (st) 2     ~> 63
(pc) 63  (op) JUMPDEST       (st) 1
(pc) 64  (op) STOP           (st) 1    ^[[34mINFO^[[0m[03-07|21:16:56] Successful execution                     ^[[34mmodule^[[0m=state
^[[32mNOTE^[[0m[03-07|21:16:56] VM call complete                         ^[[32mmodule^[[0m=state ^[[32mcaller^[[0m=""VMAccount{0000000000000000000000001266E9536C8CF38AE1EC38B7A3552DC263456991 B:99999999960003 C: N:7}"" ^[[32mcallee^[[0m=""VMAccount{0000000000000000000000008A7ADFC12D7A157824AD4B36780A658E2B01FC49 B:17530 C:60606040526000357C01000000000000000000000000000000000000000000000000000000009004806360FE47B11460415780636D4CE63C14605757603F565B005B605560048080359060200190919050506078565B005B606260048050506086565B6040518082815260200191505060405180910390F35B806000600050819055505B50565B600060006000505490506094565B9056 N:0}"" ^[[32mreturn^[[0m= ^[[32merr^[[0m=nil
?8A7ADFC12D7A157824AD4B36780A658E2B01FC49                                                                                                                 
```

Note how the execution is very short and just STOPs. Solidity contracts have functions which are called by passing a 4 byte function id. 
The first thing the contract does is try to match the id against its available functions. Here, the id is `EFC81A8C` (the id for `create`).
But note, it checks it against two other values:

```
102 (pc) 46  (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000060FE47B1 == 00000000000000000000000000000000000000000000000000000000EFC81A8C = 0
103 (pc) 47  (op) PUSH1          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000041
104 (pc) 49  (op) JUMPI          (st) 3     ~> false
105 (pc) 50  (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000EFC81A8C
106 (pc) 51  (op) PUSH4          (st) 2     => 0x000000000000000000000000000000000000000000000000000000006D4CE63C
107 (pc) 56  (op) EQ             (st) 3     000000000000000000000000000000000000000000000000000000006D4CE63C == 00000000000000000000000000000000000000000000000000000000EFC81A8C = 0
```

So this contract has functions with ids `60FE47B1` and `6D4CE63C`. So let's take a look at the ABI files for our contracts and try and find what these ids correspond to.

```
minty@vultr$ ls
00A5FAD29488BB83EE80F112B9F92D4CAD7AA4DA  6B94925D299B1BFE3BD8B2DD5C2E240F352FEEC4  A81B2648212F93E9E21225F24390DCAEE465C9B1  GSContract  GSFactory  GSFactoryFactory
minty@vultr$ pwd
/home/minty/goApps/src/github.com/eris-ltd/eris-pm/tests/fixtures/app17/abi
minty@vultr$ cat GSFactoryFactory | jq . | grep name
    ""name"": ""getLast"",
        ""name"": ""GSAddr"",
    ""name"": ""create"",
        ""name"": ""GSAddr"",
minty@vultr$ eris-abi pack --input=file GSFactoryFactory getLast
4d622831

minty@vultr$ eris-abi pack --input=file GSFactoryFactory create
efc81a8c

minty@vultr$ cat GSFactory | jq . | grep name
    ""name"": ""getLast"",
        ""name"": ""GSAddr"",
    ""name"": ""create"",
        ""name"": ""GSAddr"",
minty@vultr$ eris-abi pack --input=file GSFactory getLast
4d622831

minty@vultr$ eris-abi pack --input=file GSFactory create
efc81a8c

minty@vultr$ cat GSContract | jq . | grep name
        ""name"": ""x"",
    ""name"": ""set"",
    ""name"": ""get"",
        ""name"": ""retVal"",
minty@vultr$ eris-abi pack --input=file GSContract set
argument count mismatch: 0 for 1
minty@vultr$ eris-abi pack --input=file GSContract set 50
60fe47b10000000000000000000000000000000000000000000000000000000000000032

minty@vultr$ eris-abi pack --input=file GSContract get
6d4ce63c

minty@vultr$ 
```

Aha! So `60FE47B1` and `6D4CE63C` are `set` and `get`, respectively, which means we deployed the GSContract when we thought we deployed GSFactoryFactory.

This means there's some non-determinism somewhere.

Take a look at deploy code (eris-pm/perform/jobs_contracts.go):

```
}

    // loop through objects returned from compiler
    switch {
    case len(resp.Objects) == 1:
        log.WithField(""path"", p).Info(""Deploying the only contract in file"")
        r := resp.Objects[0]
        if r.Bytecode != nil {
            result, err = deployContract(deploy, do, r, p)
            if err != nil {
                return """", err
            }
        }
    case deploy.Instance == ""all"":
        log.WithField(""path"", p).Info(""Deploying all contracts"")
        for _, r := range resp.Objects {
            if r.Bytecode == nil {
                continue
            }
            result, err = deployContract(deploy, do, r, p)
            if err != nil {
                return """", err
            }
        }
    default:
        log.WithField(""contr"", deploy.Instance).Info(""Deploying a single contract"")
        for _, r := range resp.Objects {
            if r.Bytecode == nil {
                continue
            }
            if strings.ToLower(r.Objectname) == strings.ToLower(deploy.Instance) {
                result, err = deployContract(deploy, do, r, p)
                if err != nil {
                    return """", err
                }
            }
        }
    }
```

From the logs we see that we triggered `Deploying all contracts`. This is first of all wrong - we only wanted to deploy GSFactoryFactory, not the other two contracts also in that solidity file.
And the result from deploying the last contract is what we return.
But more worryingly, the order is obviously randomized, since sometimes we deploy the right contract and sometimes we don't. But `resp.Objects` is list, which is ordered,
and there's no maps in eris-pm that might be relevant (remember iteration over maps is non-deterministic). So let's look at compilers code.
Grepping for `map` shows us the Solc.Contracts map, and we eventually discover this gem (eris-ltd/eris-compilers/server.go):

```
                respItemArray := make([]ResponseItem, 0)

                for contract, item := range solcResp.Contracts {
                        b, err := hex.DecodeString(strings.TrimSpace(item.Bin))
                        if err == nil {
                                respItem := ResponseItem{
                                        Objectname: strings.TrimSpace(contract),
                                        Bytecode:   b,  
                                        ABI:        strings.TrimSpace(item.Abi),
                                }   
                                respItemArray = append(respItemArray, respItem)
                        } else {
                                fmt.Errorf(""Error decoding contract string\t=>\n%v\n"", err)
                                return &Response{
                                        Objects: nil,
                                        Error:   fmt.Sprintf(""%v"", err),
                                }   
                        }   
                }
```

which is randomly ordering the solcResp.Contracts (a map) into the respItemArray!

TADA!

 905 (pc) 46  (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000060FE47B1 == 00000000000000000000000000000000000000000000000000000000EFC81A8C = 0

 887 (pc) 57  (op) EQ             (st) 3     00000000000000000000000000000000000000000000000000000000EFC81A8C == 00000000000000000000000000000000000000000000000000000000EFC81A8C = 1

557 (pc) 41  (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000060FE47B1
558 (pc) 46  (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000060FE47B1 == 00000000000000000000000000000000000000000000000000000000EFC81A8C = 0
559 (pc) 47  (op) PUSH1          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000041
560 (pc) 49  (op) JUMPI          (st) 3     ~> false
561 (pc) 50  (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000EFC81A8C
562 (pc) 51  (op) PUSH4          (st) 2     => 0x000000000000000000000000000000000000000000000000000000006D4CE63C
563 (pc) 56  (op) EQ             (st) 3     000000000000000000000000000000000000000000000000000000006D4CE63C == 00000000000000000000000000000000000000000000000000000000EFC81A8C = 0

557 (pc) 41  (op) push4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000060fe47b1
558 (pc) 46  (op) eq             (st) 3     0000000000000000000000000000000000000000000000000000000060fe47b1 == 00000000000000000000000000000000000000000000000000000000efc81a8c = 0
559 (pc) 47  (op) push1          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000041
560 (pc) 49  (op) jumpi          (st) 3     ~> false
561 (pc) 50  (op) dup1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000efc81a8c
562 (pc) 51  (op) push4          (st) 2     => 0x000000000000000000000000000000000000000000000000000000006d4ce63c
563 (pc) 56  (op) eq             (st) 3     000000000000000000000000000000000000000000000000000000006d4ce63c == 00000000000000000000000000000000000000000000000000000000efc81a8c = 0
",2016-06-20 21:12:27,2016-06-20 21:12:27
https://api.github.com/repos/hyperledger/burrow/issues/59,https://api.github.com/repos/hyperledger/burrow/issues/comments/193187128,https://github.com/hyperledger/burrow/issues/59#issuecomment-193187128,compleatang,"This was a problem with eris-pm not with the EVM. I was not packing the strings correctly. Strings tests are passing now :)
",2016-03-07 09:59:51,2016-03-07 09:59:51
https://api.github.com/repos/hyperledger/burrow/issues/58,https://api.github.com/repos/hyperledger/burrow/issues/comments/198911389,https://github.com/hyperledger/burrow/issues/58#issuecomment-198911389,compleatang,"@ebuchman can you confirm whether you will be able to close this issue before the end of the month? otherwise we will reassign to Ben or Silas.
",2016-03-20 12:00:06,2016-03-20 12:00:06
https://api.github.com/repos/hyperledger/burrow/issues/58,https://api.github.com/repos/hyperledger/burrow/issues/comments/198950573,https://github.com/hyperledger/burrow/issues/58#issuecomment-198950573,ebuchman,"happy to stay assigned whether or not I finish by months end. this should be synced with the ethvm work
",2016-03-20 15:31:28,2016-03-20 15:31:28
https://api.github.com/repos/hyperledger/burrow/issues/58,https://api.github.com/repos/hyperledger/burrow/issues/comments/199863214,https://github.com/hyperledger/burrow/issues/58#issuecomment-199863214,VoR0220,"Keep an eye out, this name has since been changed in solc to selfdestruct...the opcode is on course to change as well IIRC
",2016-03-22 15:23:28,2016-03-22 15:23:28
https://api.github.com/repos/hyperledger/burrow/issues/58,https://api.github.com/repos/hyperledger/burrow/issues/comments/253479802,https://github.com/hyperledger/burrow/issues/58#issuecomment-253479802,silasdavis,"@ebuchman could you elaborate on what the outcome of this ticket was intended to be?
",2016-10-13 10:48:03,2016-10-13 10:48:03
https://api.github.com/repos/hyperledger/burrow/issues/58,https://api.github.com/repos/hyperledger/burrow/issues/comments/262787129,https://github.com/hyperledger/burrow/issues/58#issuecomment-262787129,silasdavis,eris-db contains the changes in vm.go referenced here: https://github.com/tendermint/tendermint/pull/133/files ,2016-11-24 14:21:27,2016-11-24 14:21:27
https://api.github.com/repos/hyperledger/burrow/issues/57,https://api.github.com/repos/hyperledger/burrow/issues/comments/194874373,https://github.com/hyperledger/burrow/issues/57#issuecomment-194874373,benjaminbollen,"can we detail the intention here, and the desired timeline?
",2016-03-10 14:36:06,2016-03-10 14:36:06
https://api.github.com/repos/hyperledger/burrow/issues/57,https://api.github.com/repos/hyperledger/burrow/issues/comments/194967521,https://github.com/hyperledger/burrow/issues/57#issuecomment-194967521,ebuchman,"intention here is to clear some cumbersomeness with the namereg. currently names expire based on how much funds you register with, which is annoying, so we should have permanent names. we also, presumably, want names that can be owned by contracts or managed by multisig. there's no priority on this, its just something to bring in down the road once other pieces have settled
",2016-03-10 17:29:31,2016-03-10 17:29:31
https://api.github.com/repos/hyperledger/burrow/issues/57,https://api.github.com/repos/hyperledger/burrow/issues/comments/198911627,https://github.com/hyperledger/burrow/issues/57#issuecomment-198911627,compleatang,"will revisit in preparation for hardening for 1.0
",2016-03-20 12:00:45,2016-03-20 12:00:45
https://api.github.com/repos/hyperledger/burrow/issues/57,https://api.github.com/repos/hyperledger/burrow/issues/comments/253480094,https://github.com/hyperledger/burrow/issues/57#issuecomment-253480094,silasdavis,"@compleatang @benjaminbollen Is this issue worth keeping around, I feel like when it becomes relevant many other things may have moved and I'd like to reduce clutter in the issues?
",2016-10-13 10:49:33,2016-10-13 10:49:33
https://api.github.com/repos/hyperledger/burrow/issues/56,https://api.github.com/repos/hyperledger/burrow/issues/comments/190266366,https://github.com/hyperledger/burrow/issues/56#issuecomment-190266366,benjaminbollen,"relates to https://github.com/tendermint/tendermint/issues/185
",2016-02-29 15:53:30,2016-02-29 15:53:30
https://api.github.com/repos/hyperledger/burrow/issues/53,https://api.github.com/repos/hyperledger/burrow/issues/comments/262786251,https://github.com/hyperledger/burrow/issues/53#issuecomment-262786251,silasdavis,This code is scheduled for replacement by the new RPC layer,2016-11-24 14:17:05,2016-11-24 14:17:05
https://api.github.com/repos/hyperledger/burrow/issues/52,https://api.github.com/repos/hyperledger/burrow/issues/comments/173423919,https://github.com/hyperledger/burrow/issues/52#issuecomment-173423919,ebuchman,"i believe the idea here is you can easily create more chains with the same accounts/validators but different names by always specifying the name on the command line
",2016-01-21 01:38:21,2016-01-21 01:38:21
https://api.github.com/repos/hyperledger/burrow/issues/46,https://api.github.com/repos/hyperledger/burrow/issues/comments/193563543,https://github.com/hyperledger/burrow/pull/46#issuecomment-193563543,benjaminbollen,"Looks good to me
",2016-03-08 02:32:58,2016-03-08 02:32:58
https://api.github.com/repos/hyperledger/burrow/issues/46,https://api.github.com/repos/hyperledger/burrow/issues/comments/193571617,https://github.com/hyperledger/burrow/pull/46#issuecomment-193571617,benjaminbollen,"proposed to develop branch in PR #63 
",2016-03-08 02:48:20,2016-03-08 02:48:20
https://api.github.com/repos/hyperledger/burrow/issues/45,https://api.github.com/repos/hyperledger/burrow/issues/comments/165163998,https://github.com/hyperledger/burrow/issues/45#issuecomment-165163998,ebuchman,"ok. I'm gonna just drop all the old ""stale"" stuff that hasn't been touched in months. 
",2015-12-16 16:24:03,2015-12-16 16:24:03
https://api.github.com/repos/hyperledger/burrow/issues/45,https://api.github.com/repos/hyperledger/burrow/issues/comments/165167314,https://github.com/hyperledger/burrow/issues/45#issuecomment-165167314,ebuchman,"much nicer. not sure what the deal is with project_bruno branch or develop. I've been based off 0.10.3. Thats what tmsp and 0.10.4 branches are based on. 0.10.4 is just support for eris-keys signing for consensus. maybe we roll 0.10.3 into 0.11, and shoot for the 0.12 release being just supporting the eris-keys signing for validators (that will involve most elements of the stack harmonizing on fixing their tests to use that). Then we can go back to the refactor. Thoughts?
",2015-12-16 16:33:44,2015-12-16 16:34:02
https://api.github.com/repos/hyperledger/burrow/issues/44,https://api.github.com/repos/hyperledger/burrow/issues/comments/169734689,https://github.com/hyperledger/burrow/issues/44#issuecomment-169734689,benjaminbollen,"```
// proposal:
// ipfs_db acts as a persistent (levelDB) db that additionally stores
// the values to IPFS, and stores the retrieved IPFS hash for the stored value,
// under the key.
// It is proposed that only the value []byte are stored to IPFS,
// and not the key []byte + value []byte.  The main argument is that the
// key []byte + value IPFS hash, can be separately stored to IPFS; however,
// at the user level the structure of the data might desire a more optimal
// graph structure where the key-value is absorbed into a named link of a
// higher object (commit or transaction block).
```

An initial draft of the proposal is here (wrongly in tendermint/go-db, but it was ""easier"" or more clear for me to start there).  This is clearly needs to be moved to eris:db/tendermint before any merge, as it intends to depend on eris-ltd/common/go/ipfs, where I will also open a PR.

To invite comments, I already link my first skeleton
https://github.com/tendermint/go-db/compare/master...benjaminbollen:erisdb_issue44_ipfsdb?expand=1
",2016-01-07 17:13:34,2016-01-07 17:13:34
https://api.github.com/repos/hyperledger/burrow/issues/44,https://api.github.com/repos/hyperledger/burrow/issues/comments/169756463,https://github.com/hyperledger/burrow/issues/44#issuecomment-169756463,benjaminbollen,"Ethan (964B1493BBE3312278B7DEB 94C39149F7899A345) [6:37 PM] 
the better thing, and maybe actually simpler, then, is to use ipfs instead of the merkle tree
[...]
Ethan (964B1493BBE3312278B7DEB 94C39149F7899A345) [6:45 PM] 
or, maybe find a way to parameterize the hash function in go-merkle, so we can pass in what we want from above, eg. ripemd160 or sha3 or ipfs itself
[...]
Ethan (964B1493BBE3312278B7DEB 94C39149F7899A345) [6:52 PM] 
sounds good. ya i think using it for the hashes in go-merkle instead of ripemd160 will work nicely
",2016-01-07 17:57:09,2016-01-07 17:57:09
https://api.github.com/repos/hyperledger/burrow/issues/44,https://api.github.com/repos/hyperledger/burrow/issues/comments/191083273,https://github.com/hyperledger/burrow/issues/44#issuecomment-191083273,compleatang,"will revisit this later.
",2016-03-02 06:10:30,2016-03-02 06:10:30
https://api.github.com/repos/hyperledger/burrow/issues/42,https://api.github.com/repos/hyperledger/burrow/issues/comments/191081498,https://github.com/hyperledger/burrow/issues/42#issuecomment-191081498,compleatang,"coming soon.
",2016-03-02 06:06:51,2016-03-02 06:06:51
https://api.github.com/repos/hyperledger/burrow/issues/41,https://api.github.com/repos/hyperledger/burrow/issues/comments/141979067,https://github.com/hyperledger/burrow/issues/41#issuecomment-141979067,ebuchman,"this has been updated to point to localhost in 0.10.3
",2015-09-21 13:34:03,2015-09-21 13:34:03
https://api.github.com/repos/hyperledger/burrow/issues/40,https://api.github.com/repos/hyperledger/burrow/issues/comments/190296469,https://github.com/hyperledger/burrow/issues/40#issuecomment-190296469,ebuchman,"done
",2016-02-29 17:16:29,2016-02-29 17:16:29
https://api.github.com/repos/hyperledger/burrow/issues/39,https://api.github.com/repos/hyperledger/burrow/issues/comments/139887043,https://github.com/hyperledger/burrow/issues/39#issuecomment-139887043,compleatang,"At this point eris-db does not officially support windows. That said, we will definitely try to help you get set up as much as we can.

This is telling you that you'll need `gcc` installed on your machine. I am not a windows user, and I have no way of checking, but [this article](http://preshing.com/20141108/how-to-install-the-latest-gcc-on-windows/) seems at first glance reasonable. You may need to do some googling around to find the best way to get gcc and also lib-gmp installed for your machine. 

One thing to make sure of is that eris-db definitely _does not_ support 32 bit arch on Windows. 

Gonna leave the issue open because we do need to fix that second error. Once you have gcc installed change the referenced line from `isWritable` to `IsWritable`. 
",2015-09-13 15:22:24,2015-09-13 15:22:24
https://api.github.com/repos/hyperledger/burrow/issues/39,https://api.github.com/repos/hyperledger/burrow/issues/comments/139887399,https://github.com/hyperledger/burrow/issues/39#issuecomment-139887399,vinaychhabra21,"Thanks I'll try installing GCC
",2015-09-13 15:30:08,2015-09-13 15:30:08
https://api.github.com/repos/hyperledger/burrow/issues/39,https://api.github.com/repos/hyperledger/burrow/issues/comments/139887859,https://github.com/hyperledger/burrow/issues/39#issuecomment-139887859,compleatang,"@vinaychhabra21 if that becomes a rabbit hole of inefficient depths, then take a look at installing docker and using the eris-cli to get everything sorted much easier for you.
",2015-09-13 15:33:25,2015-09-13 15:33:25
https://api.github.com/repos/hyperledger/burrow/issues/39,https://api.github.com/repos/hyperledger/burrow/issues/comments/139888189,https://github.com/hyperledger/burrow/issues/39#issuecomment-139888189,vinaychhabra21,"we have installed docker and getting error on docker only
",2015-09-13 15:38:59,2015-09-13 15:38:59
https://api.github.com/repos/hyperledger/burrow/issues/39,https://api.github.com/repos/hyperledger/burrow/issues/comments/139888397,https://github.com/hyperledger/burrow/issues/39#issuecomment-139888397,compleatang,"sorry, you're getting the above error installing docker? or a different error?
",2015-09-13 15:40:16,2015-09-13 15:40:16
https://api.github.com/repos/hyperledger/burrow/issues/39,https://api.github.com/repos/hyperledger/burrow/issues/comments/139889163,https://github.com/hyperledger/burrow/issues/39#issuecomment-139889163,vinaychhabra21,"I have installed docker and able to create services and chain

but while using creating Eris-DB getting error
",2015-09-13 15:44:37,2015-09-13 15:44:37
https://api.github.com/repos/hyperledger/burrow/issues/39,https://api.github.com/repos/hyperledger/burrow/issues/comments/139889239,https://github.com/hyperledger/burrow/issues/39#issuecomment-139889239,vinaychhabra21,"![untitled](https://cloud.githubusercontent.com/assets/14261468/9837444/a373a3ca-5a5c-11e5-9852-bd90f8c7a22c.png)
",2015-09-13 15:46:08,2015-09-13 15:46:08
https://api.github.com/repos/hyperledger/burrow/issues/39,https://api.github.com/repos/hyperledger/burrow/issues/comments/139889446,https://github.com/hyperledger/burrow/issues/39#issuecomment-139889446,compleatang,"Ah. I see. So eris-cli runs with docker which isolates the need to have natively installed the eris tool chain. If you would like to natively install rather than use docker to isolate the environment that is not a problem, but these are very different paradigms.  

If you would like to use the cli platform then you should not need to worry about the compilation vagaries for eris-db on windows. If you want to install erisdb natively then you will need to (at least) install gcc and correct the line mentioned above.

Let us know if you have any other errors on windows native install besides correcting that line 15 and installing gcc and we'll try to make this path a bit smoother for folks who wish to natively installed eris-db.
",2015-09-13 15:50:16,2015-09-13 15:50:16
https://api.github.com/repos/hyperledger/burrow/issues/39,https://api.github.com/repos/hyperledger/burrow/issues/comments/190296648,https://github.com/hyperledger/burrow/issues/39#issuecomment-190296648,ebuchman,"closing for inactivity. 
",2016-02-29 17:17:09,2016-02-29 17:17:09
https://api.github.com/repos/hyperledger/burrow/issues/38,https://api.github.com/repos/hyperledger/burrow/issues/comments/136893897,https://github.com/hyperledger/burrow/issues/38#issuecomment-136893897,compleatang,"links to: https://support.erisindustries.com/support/discussions/topics/6000011848
",2015-09-01 23:47:03,2015-09-01 23:47:03
https://api.github.com/repos/hyperledger/burrow/issues/37,https://api.github.com/repos/hyperledger/burrow/issues/comments/164498657,https://github.com/hyperledger/burrow/issues/37#issuecomment-164498657,ebuchman,"The license.md currently says Apache. We should change this.
",2015-12-14 17:13:48,2015-12-14 17:13:48
https://api.github.com/repos/hyperledger/burrow/issues/35,https://api.github.com/repos/hyperledger/burrow/issues/comments/135125329,https://github.com/hyperledger/burrow/pull/35#issuecomment-135125329,androlo,"Awesome. Is it ok if I cancel and merge the branch into dev? Got some more things to add.
",2015-08-26 18:02:31,2015-08-26 18:02:31
https://api.github.com/repos/hyperledger/burrow/issues/35,https://api.github.com/repos/hyperledger/burrow/issues/comments/135125592,https://github.com/hyperledger/burrow/pull/35#issuecomment-135125592,androlo,"nm, i'll just pull in and merge to dev locally.
",2015-08-26 18:03:54,2015-08-26 18:03:54
https://api.github.com/repos/hyperledger/burrow/issues/33,https://api.github.com/repos/hyperledger/burrow/issues/comments/134743422,https://github.com/hyperledger/burrow/issues/33#issuecomment-134743422,androlo,"Yes. That was written when eris-cli was still pre 0.10. I'll update. Probably just put a series of commands there.
",2015-08-25 21:12:36,2015-08-25 21:12:36
https://api.github.com/repos/hyperledger/burrow/issues/33,https://api.github.com/repos/hyperledger/burrow/issues/comments/134744910,https://github.com/hyperledger/burrow/issues/33#issuecomment-134744910,androlo,"wow... that is a hefty readme.. also looks like much of it isn't even on usage. Either way, I'll add a few lines in the eris-cli portion. simple step-by-step instructions on how to create a simple test-chain.
",2015-08-25 21:19:38,2015-08-25 21:19:38
https://api.github.com/repos/hyperledger/burrow/issues/33,https://api.github.com/repos/hyperledger/burrow/issues/comments/134747511,https://github.com/hyperledger/burrow/issues/33#issuecomment-134747511,compleatang,"Need a new chain?

```
eris chains new CHAINNAME
```

The options for creating a chain are in `eris chains new -h`

To start a chain

```
eris chains start CHAINNAME
```

Need to sync with an existing chain?

```
eris chains install CHAINID
```

The options for installing chains is `eris chains install -h`
",2015-08-25 21:29:41,2015-08-25 21:29:41
https://api.github.com/repos/hyperledger/burrow/issues/33,https://api.github.com/repos/hyperledger/burrow/issues/comments/134750233,https://github.com/hyperledger/burrow/issues/33#issuecomment-134750233,androlo,"Great. Thank you. I will play around with this in a little while and update the readme. 
",2015-08-25 21:41:57,2015-08-25 21:41:57
https://api.github.com/repos/hyperledger/burrow/issues/33,https://api.github.com/repos/hyperledger/burrow/issues/comments/134750308,https://github.com/hyperledger/burrow/issues/33#issuecomment-134750308,androlo,"ah, right. it's just the regular chain creation process...
",2015-08-25 21:42:16,2015-08-25 21:42:16
https://api.github.com/repos/hyperledger/burrow/issues/33,https://api.github.com/repos/hyperledger/burrow/issues/comments/135086746,https://github.com/hyperledger/burrow/issues/33#issuecomment-135086746,androlo,"Experimenting with the new eris-cli now. I'll update the README as soon as 0.10.1 is merged to master, which should be today. 
",2015-08-26 16:21:41,2015-08-26 16:21:41
https://api.github.com/repos/hyperledger/burrow/issues/33,https://api.github.com/repos/hyperledger/burrow/issues/comments/135124177,https://github.com/hyperledger/burrow/issues/33#issuecomment-135124177,androlo,"Installation instructions are pretty clear for eris-cli - just go get and init, so no need to change under installation I think. Under usage I'll add a 'Docker' section which explains how to create and run chains with 'eris-cli' (pretty much what Casey posted here).
",2015-08-26 17:57:59,2015-08-26 17:57:59
https://api.github.com/repos/hyperledger/burrow/issues/33,https://api.github.com/repos/hyperledger/burrow/issues/comments/135124420,https://github.com/hyperledger/burrow/issues/33#issuecomment-135124420,androlo,"(and point them to the eris-cli help / docs for more advanced usage)
",2015-08-26 17:59:01,2015-08-26 17:59:01
https://api.github.com/repos/hyperledger/burrow/issues/29,https://api.github.com/repos/hyperledger/burrow/issues/comments/133706978,https://github.com/hyperledger/burrow/issues/29#issuecomment-133706978,compleatang,"As in read from env var and write the file if it's present. 
",2015-08-22 14:06:35,2015-08-22 14:06:35
https://api.github.com/repos/hyperledger/burrow/issues/27,https://api.github.com/repos/hyperledger/burrow/issues/comments/128593093,https://github.com/hyperledger/burrow/issues/27#issuecomment-128593093,androlo,"This is being worked on in Tendermint, which is the actual blockchain client. Right now theyr'e adding new log levels but I can't say for sure when it will be committed (you may have noticed other things as well, such as VM dumps that can't be filtered at all). Leaving this open.
",2015-08-07 04:22:54,2015-08-07 04:22:54
https://api.github.com/repos/hyperledger/burrow/issues/27,https://api.github.com/repos/hyperledger/burrow/issues/comments/190297275,https://github.com/hyperledger/burrow/issues/27#issuecomment-190297275,ebuchman,"This happens through app/core separation and tmsp
",2016-02-29 17:19:03,2016-02-29 17:19:03
https://api.github.com/repos/hyperledger/burrow/issues/24,https://api.github.com/repos/hyperledger/burrow/issues/comments/126401916,https://github.com/hyperledger/burrow/issues/24#issuecomment-126401916,androlo,"this will not be fun
",2015-07-30 16:59:49,2015-07-30 16:59:49
https://api.github.com/repos/hyperledger/burrow/issues/21,https://api.github.com/repos/hyperledger/burrow/issues/comments/135126024,https://github.com/hyperledger/burrow/issues/21#issuecomment-135126024,androlo,"haven't seen this in a month so closing. making a new issue if i see it again.
",2015-08-26 18:05:40,2015-08-26 18:05:40
https://api.github.com/repos/hyperledger/burrow/issues/20,https://api.github.com/repos/hyperledger/burrow/issues/comments/135126314,https://github.com/hyperledger/burrow/issues/20#issuecomment-135126314,androlo,"done
",2015-08-26 18:06:54,2015-08-26 18:06:54
https://api.github.com/repos/hyperledger/burrow/issues/19,https://api.github.com/repos/hyperledger/burrow/issues/comments/123894219,https://github.com/hyperledger/burrow/issues/19#issuecomment-123894219,androlo,"This is not an eris-db specific issue, it's because the client does not set an address for `call` or ""simulated calls"", but it does so for transactions. Setting the address (so it works like it does with transactions) will be done temporarily but we need to go over Ethereums code and see that we do the same thing they do. 

Keeping this issue open.
",2015-07-22 22:39:01,2015-07-22 22:39:01
https://api.github.com/repos/hyperledger/burrow/issues/19,https://api.github.com/repos/hyperledger/burrow/issues/comments/135126112,https://github.com/hyperledger/burrow/issues/19#issuecomment-135126112,androlo,"done
",2015-08-26 18:05:57,2015-08-26 18:05:57
https://api.github.com/repos/hyperledger/burrow/issues/18,https://api.github.com/repos/hyperledger/burrow/issues/comments/123515902,https://github.com/hyperledger/burrow/issues/18#issuecomment-123515902,compleatang,"tag's would be a good idea. for docker the key will be having an automated way for circle to build the docker images such that the tenderment which is put in godeps is and compiled into the erisdb binary is the same commit (or tag, either fine) as is compiled into the tendermint binary (both of which should be available to the docker image, which may be unconventional, but adds lots of flexibility for us).
",2015-07-22 00:23:57,2015-07-22 00:23:57
https://api.github.com/repos/hyperledger/burrow/issues/18,https://api.github.com/repos/hyperledger/burrow/issues/comments/135126245,https://github.com/hyperledger/burrow/issues/18#issuecomment-135126245,androlo,"no need to track this. it's solving itself.
",2015-08-26 18:06:34,2015-08-26 18:06:34
https://api.github.com/repos/hyperledger/burrow/issues/17,https://api.github.com/repos/hyperledger/burrow/issues/comments/125758903,https://github.com/hyperledger/burrow/issues/17#issuecomment-125758903,androlo,"done and added in 0.11.0
",2015-07-28 21:29:38,2015-07-28 21:29:38
https://api.github.com/repos/hyperledger/burrow/issues/16,https://api.github.com/repos/hyperledger/burrow/issues/comments/125759039,https://github.com/hyperledger/burrow/issues/16#issuecomment-125759039,androlo,"did not put in 0.11, maybe next time.
",2015-07-28 21:30:12,2015-07-28 21:30:12
https://api.github.com/repos/hyperledger/burrow/issues/14,https://api.github.com/repos/hyperledger/burrow/issues/comments/121504646,https://github.com/hyperledger/burrow/issues/14#issuecomment-121504646,androlo,"what is this?
",2015-07-15 06:29:28,2015-07-15 06:29:28
https://api.github.com/repos/hyperledger/burrow/issues/14,https://api.github.com/repos/hyperledger/burrow/issues/comments/121511568,https://github.com/hyperledger/burrow/issues/14#issuecomment-121511568,ebuchman,"`ecm` = eris chain manager = the shell scripts in erisdb/DOCKER
",2015-07-15 07:08:10,2015-07-15 07:08:10
https://api.github.com/repos/hyperledger/burrow/issues/12,https://api.github.com/repos/hyperledger/burrow/issues/comments/126404695,https://github.com/hyperledger/burrow/issues/12#issuecomment-126404695,androlo,"might be other flags needed too i guess. eris-db doesn't have a system for flags yet. all it does is take a path to the database folder as argument. i'll schedule an update once we've discussed what will be needed (thinking especially about eris-cli).
",2015-07-30 17:10:00,2015-07-30 17:10:00
https://api.github.com/repos/hyperledger/burrow/issues/12,https://api.github.com/repos/hyperledger/burrow/issues/comments/195439147,https://github.com/hyperledger/burrow/issues/12#issuecomment-195439147,hughht5,"was this ever implemented? It takes a long time for a node to catch up currently.
",2016-03-11 16:27:54,2016-03-11 16:27:54
https://api.github.com/repos/hyperledger/burrow/issues/12,https://api.github.com/repos/hyperledger/burrow/issues/comments/195442645,https://github.com/hyperledger/burrow/issues/12#issuecomment-195442645,compleatang,"yes it has been implemented. check the `config.toml` for your chain (in ~/.eris/chains/chainname/config.toml) make sure that the `fast_sync` field is true.

If you do not have a config.toml in ~/.eris/chains/chainname then just copy the config from ~/.eris/chains/default/config.toml and make the change. Next time you run ""new"" it'll catch up faster.

If you'd like to change it for a running chain, stop the chain, then `eris chains exec chainName -i` (that will enter you into a bash shell ""inside the chain's"" containers). From there edit ~/.eris/chainName/config.toml and `exit`. After you exit out of the shell restart the chain and things should catch up faster.
",2016-03-11 16:37:36,2016-03-11 16:37:36
https://api.github.com/repos/hyperledger/burrow/issues/7,https://api.github.com/repos/hyperledger/burrow/issues/comments/121505552,https://github.com/hyperledger/burrow/issues/7#issuecomment-121505552,androlo,"need to update the api doc soon and finalize + extend the events section. will do when pulling in the new tm version with solidity baked in.
",2015-07-15 06:31:52,2015-07-15 06:31:52
https://api.github.com/repos/hyperledger/burrow/issues/7,https://api.github.com/repos/hyperledger/burrow/issues/comments/125760338,https://github.com/hyperledger/burrow/issues/7#issuecomment-125760338,androlo,"old. will re-visit when we get into erisindustries.com docs integration.
",2015-07-28 21:36:51,2015-07-28 21:36:51
https://api.github.com/repos/hyperledger/burrow/issues/6,https://api.github.com/repos/hyperledger/burrow/issues/comments/112981822,https://github.com/hyperledger/burrow/issues/6#issuecomment-112981822,androlo,"these are bugs. crappy docs cause just as much headache as bugs.
",2015-06-17 23:50:44,2015-06-17 23:50:44
https://api.github.com/repos/hyperledger/burrow/issues/6,https://api.github.com/repos/hyperledger/burrow/issues/comments/125760430,https://github.com/hyperledger/burrow/issues/6#issuecomment-125760430,androlo,"fixed a lot of docs. will be updating continuously. don't need an issue for this.
",2015-07-28 21:37:23,2015-07-28 21:37:23
