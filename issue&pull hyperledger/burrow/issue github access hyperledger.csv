name repository,creator user,url_html issue,url_api issue,title,body,state,pull request,data open,updated at
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/1085,https://api.github.com/repos/hyperledger/burrow/issues/1085,add validator docs,"Signed-off-by: Gregory Hill <greg.hill@monax.io>

Resolves #1064",closed,True,2019-04-04 10:31:24,2019-04-04 10:36:49
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1084,https://api.github.com/repos/hyperledger/burrow/issues/1084,Add some documentation on dump and restore,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2019-04-04 09:36:36,2019-04-04 09:51:05
burrow,compleatang,https://github.com/hyperledger/burrow/issues/1083,https://api.github.com/repos/hyperledger/burrow/issues/1083,[SNatives] Contract Call Scheduler,"> Blockchains are good at two things: time & ordering

- @silasdavis 

Currently in most blockchain designs we do not have an ability to schedule future processing. However there are many useful reasons why such a feature would be leveraged. This ticket summarizes the two key user stories for leveraging such a feature.

### User Story A: Account Driven Scheduling

As a properly permissioned user of a burrow blockchain, I need to be able to send a transaction at `time.Now()` that is properly signed and has the transaction signature along the lines of `destination, executionTime, data`. Upon receiving and ensuring such a transaction is properly signed and permissioned, the nodes operating a burrow network should schedule this transaction for execution in the block which covers the unixTime placed in the `executionTime` with the original sender built into the transaction envelope. 

### User Story B: Contract Drive Scheduling

As a properly permissioned user of a burrow blockchain, I need to be able to deploy a contract that can interact with the scheduler in a similar manner to the user story listed above. ",open,False,2019-04-03 15:31:51,2019-04-03 15:31:51
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1082,https://api.github.com/repos/hyperledger/burrow/issues/1082,Upgrade to tendermint 0.31.2,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2019-04-01 12:31:09,2019-04-03 15:12:23
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1081,https://api.github.com/repos/hyperledger/burrow/issues/1081,Fix NoConsensus Mode. Refactor tests. Test NoConsensus mode.,"No consensus mode was not resetting the checker which meant CallTxSim was not working.

This PR fixes this and also heavily refactors tests to avoid the use of main_test which leads to poor encapsulation and stops us from running tests over different kernel configurations.

Subtests can be used to achieve the same effect and also lead to easier parallelism. Reworked the integration test helpers to facilitate this.",open,True,2019-03-30 13:43:50,2019-04-04 10:34:42
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/1080,https://api.github.com/repos/hyperledger/burrow/issues/1080,add configurable dump timeout,Signed-off-by: Gregory Hill <greg.hill@monax.io>,closed,True,2019-03-29 10:22:43,2019-03-29 10:30:54
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1079,https://api.github.com/repos/hyperledger/burrow/issues/1079,Teach burrow deploy to execute multiple deploy jobs concurrently,burrow deploy can exe,closed,True,2019-03-21 17:20:50,2019-04-03 16:24:14
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1078,https://api.github.com/repos/hyperledger/burrow/issues/1078,Merge for v0.24.6 release,,closed,True,2019-03-19 17:37:28,2019-03-19 17:37:48
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1077,https://api.github.com/repos/hyperledger/burrow/issues/1077,Master,,closed,True,2019-03-19 17:30:38,2019-03-19 17:30:57
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1076,https://api.github.com/repos/hyperledger/burrow/issues/1076,"Fix metrics, block time iota, and prepare release",Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2019-03-19 16:48:57,2019-03-19 17:00:04
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1075,https://api.github.com/repos/hyperledger/burrow/issues/1075,Update multiple validators docs with new --test-burrow-configs,"Fixes #1055

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2019-03-19 09:41:42,2019-03-19 17:15:10
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/1074,https://api.github.com/repos/hyperledger/burrow/issues/1074,[Consensus] Unfork Tendermint pubsub,"Tendermint have fixed the issues with blocking that caused me to fork their implementation (described here: https://github.com/tendermint/tmlibs/issues/153) with:

https://github.com/tendermint/tendermint/pull/3227 (released with Tendermint 0.31.0)

Other changes look like a modest improvement over what we have so suggest we unfork event/pubsub",open,False,2019-03-18 17:36:09,2019-04-03 15:39:40
burrow,fastchain,https://github.com/hyperledger/burrow/pull/1073,https://api.github.com/repos/hyperledger/burrow/issues/1073,Update README.md,url fix,closed,True,2019-03-18 05:33:31,2019-04-03 15:20:10
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1072,https://api.github.com/repos/hyperledger/burrow/issues/1072,Release 0.24.5,,closed,True,2019-03-14 12:18:30,2019-03-14 12:18:43
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1071,https://api.github.com/repos/hyperledger/burrow/issues/1071,"Refactor metrics, fix a few issues, don't swallow errors, add tests","There were a couple of mistakes in the metrics exporter:

1. Previously we were using `ConstSummary` but without calculating quantiles it requries (a previous commit changed us to use `ConstHistogram` which was closer to the usage, but on closer inspection...

2. We were binning TxPerBlock and TimePerBlock into a map and passing this to `MustNewConstHistogram` but reading the docs (which could probably be a bit clearer) this is not what it requires - in fact it wants a cumulative frequency distribution (see https://prometheus.io/docs/concepts/metric_types/#histogram)

This also cleans up the code, adds tests, removes a swallowed error, avoid stringly typing, etc.

The significant change for 2 can be seen comparing `getTxBuckets` and `getBlockTimeBuckets` from old export.go and new exporter.go (unfortunately not detected as rename)",closed,True,2019-03-14 07:56:20,2019-03-15 13:23:59
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1070,https://api.github.com/repos/hyperledger/burrow/issues/1070,Consensus timings and logging defaults,"This adds a single configuration paramater of `TimeoutFactor` that allows scaling up or down of the Tendermint consensus timeouts. A setting of 1.0 gives the default Tendermint timeouts, a setting of 0.5 gives half the default timeouts. Burrow's default `TimeoutFactor` is 0.33 which waits 1 second (down from 3) for each proposal.

Some other operational niceties:
- Server-side transaction timeout can now be supplied by tx or otherwise capped at 1 hour
- SyncInfo includes the interval (block duration) between the last and one-before-last commits
- All log lines include height
- Default logging excludes trace (now inverted to `Trace`) and filters Tendermint logs for a much quieter default
- KeyStore has no logger and no longer complains about permissions
- Metrics time/tx per block are Histogram rather than Summary (for which they are missing quantile calculations required on our side)",closed,True,2019-03-13 22:38:41,2019-03-14 09:15:41
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1069,https://api.github.com/repos/hyperledger/burrow/issues/1069,Downgrade to Tendermint 0.29.1,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2019-03-12 15:44:45,2019-03-13 22:57:20
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1068,https://api.github.com/repos/hyperledger/burrow/issues/1068,Generate burrow toml config for all validators,"See commit messages for detailed descriptions.

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2019-03-12 14:20:24,2019-03-18 10:34:29
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1067,https://api.github.com/repos/hyperledger/burrow/issues/1067,Downgrade tendermint to 0.27.0,,closed,True,2019-03-12 11:34:13,2019-03-12 11:42:07
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1066,https://api.github.com/repos/hyperledger/burrow/issues/1066,Add height to all logs messages,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2019-03-12 11:09:09,2019-03-12 11:39:41
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/1065,https://api.github.com/repos/hyperledger/burrow/issues/1065,refactor kernel,"Signed-off-by: Gregory Hill <greg.hill@monax.io>

This PR makes the kernel structure more modular. When Tendermint isn't configured this enables non-consensus (closing #1026) with rapid transaction throughput.",closed,True,2019-03-11 11:12:58,2019-03-22 11:37:29
burrow,yuvi76,https://github.com/hyperledger/burrow/issues/1064,https://api.github.com/repos/hyperledger/burrow/issues/1064,[Question] How Can i add peer in running network?,"Please include in your bug report:

- [ ] `burrow version` (0.24.2+2019-03-01T16:43:24Z)
- [ ] `go version` (1.11.3 linux/amd64)
- [ ] operating system details (Ubuntu 16.04.1)

### Expected Behavior
 I have 2 peer in network. Now i want to add 3rd peer without restarting chain from genesis block.

### Steps to reproduction
I have network of 2 validator. I had created using this [documentation](https://github.com/hyperledger/burrow/blob/develop/docs/quickstart/multiple-validators.md). 

Now in this network i want to add one more peer without restarting chain from genesis block.
How can i?

",closed,False,2019-03-11 10:41:49,2019-04-04 10:36:49
burrow,mrsirja,https://github.com/hyperledger/burrow/issues/1063,https://api.github.com/repos/hyperledger/burrow/issues/1063,[SeedMode] Can't Connect validators to seed-node and validators not syncing with each other.,"Please include in your bug report:

- [ ] `burrow version` (0.24.2+ 2019-03-01T16:43:24Z)
- [ ] `go version` (go1.11.3 linux/amd64)
- [ ] `operating system` (Ubuntu 16.04.1.)

### Expected to happen
Nodes will connect to seed node and request addresses, then they will connect to each other and start submitting and voting on blocks.

### Actual Behavior
I am trying to connect multiple nodes to seed-node with help of this [documentation](https://github.com/hyperledger/burrow/blob/develop/docs/quickstart/seed-nodes.md). 

I have started seed node and assigned  seed node id to all other validator node and started all nodes. But no nodes are connected to seed node and also they won't connect with each other. I had uploaded the full logs, you can see that at the link below.

> **SeedMode = true**

If i keep SeedMode true than no nodes will get connected with seed node and also didn't connect with each other. As per the documentation validator nodes needs to be connected with seed node and after that they will be connected with each other. But in my case nodes can't get connected with seed node.

This is my **current** network of nodes:
```
$ curl -s 127.0.0.1:10001/network | jq -r '.result.peers[].node_info.listen_addr'
(no result)

$ curl -s 127.0.0.1:20001/network | jq -r '.result.peers[].node_info.listen_addr'
(no result)

$ curl -s 127.0.0.1:30001/network | jq -r '.result.peers[].node_info.listen_addr'
(no result)

$ curl -s 127.0.0.1:40001/network | jq -r '.result.peers[].node_info.listen_addr'
(no result)
```

This is **expected** network of nodes:
```
$ curl -s 127.0.0.1:10001/network | jq -r '.result.peers[].node_info.listen_addr'
tcp://0.0.0.0:20000
tcp://0.0.0.0:30000
tcp://0.0.0.0:40000

$ curl -s 127.0.0.1:20001/network | jq -r '.result.peers[].node_info.listen_addr'
tcp://0.0.0.0:30000
tcp://0.0.0.0:40000

$ curl -s 127.0.0.1:30001/network | jq -r '.result.peers[].node_info.listen_addr'
tcp://0.0.0.0:20000
tcp://0.0.0.0:40000

$ curl -s 127.0.0.1:40001/network | jq -r '.result.peers[].node_info.listen_addr'
tcp://0.0.0.0:20000
tcp://0.0.0.0:30000
```

> **SeedMode=false**

If i keep SeedMode false than there is different behavior all the validator nodes get connected with seed node and seed node get connected with all the validator nodes but validator peer didn't connect with other peers. Validator only connects with seed node.  Below is network for all the nodes:
```
$ curl -s 127.0.0.1:10001/network | jq -r '.result.peers[].node_info.listen_addr'
tcp://0.0.0.0:20000
tcp://0.0.0.0:30000
tcp://0.0.0.0:40000

$ curl -s 127.0.0.1:20001/network | jq -r '.result.peers[].node_info.listen_addr'
tcp://0.0.0.0:10000

$ curl -s 127.0.0.1:30001/network | jq -r '.result.peers[].node_info.listen_addr'
tcp://0.0.0.0:10000

$ curl -s 127.0.0.1:40001/network | jq -r '.result.peers[].node_info.listen_addr'
tcp://0.0.0.0:10000
```

I can't figure out what is the problem. Is there issue with SeedMode?

### Steps to Reproduction
I followed this documentation: [Seed-Nodes](https://github.com/hyperledger/burrow/blob/develop/docs/quickstart/seed-nodes.md)

### Files & Logs:
`.burrow_seed.toml` : https://bit.ly/2Ha1dCQ
`.burrow_val0.toml`: https://bit.ly/2NYifEO
`.burrow_val1.toml`: https://bit.ly/2ETfNer
`.burrow_val2.toml`: https://bit.ly/2CeuMiN

`.burrow_seed.log`: https://bit.ly/2XQ7QPV
`.burrow_val0.log`: https://bit.ly/2VPwONx
`.burrow_val1.log`: https://bit.ly/2UCW4WU
`.burrow_val2.log`: https://bit.ly/2NXANEV
",open,False,2019-03-11 10:23:10,2019-03-11 12:15:13
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1062,https://api.github.com/repos/hyperledger/burrow/issues/1062,Use modules,"Go has finally lost the plot and acknowledged software comes in chunks and has versions.

This PR migrates us to the new official go modules system:
- Vendor is no more - should make for cleaner PRs amongst other things
- I could not get protobuf to work properly without having it place files within the GOPATH (or at least a deeper path). Seemed like I was hitting some bugs in gogo, but for an easy life `make protobuf` currently relies upon us living in `$GOPATH/src/github.com/hyperledger/burrow` (nothing else does), but this also mean you need `export GOMODULE111=on` if you are using from a checkout in your GOPATH
- For versions 0 - as we are - we are not expected to create a new vN suffix for every breaking change so adopting modules shouldn't change are pre-1 approach to semver - i.e. breaking stuff on minor bumps. Post v1 (i.e. v2 and higher) breaking any exported API requires a version bump",open,True,2019-03-09 21:30:55,2019-03-12 11:23:54
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1061,https://api.github.com/repos/hyperledger/burrow/issues/1061,Remove errant test file,Fix tests,closed,True,2019-03-08 17:29:20,2019-03-09 21:31:10
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1060,https://api.github.com/repos/hyperledger/burrow/issues/1060,Refactor keys server test as integration test,"I noticed some intermittent failures with the keys go test, I think it was to do with timing issues and the keys server setup being done in `init()`. The right way to do this is with TestMain so I implemented it. While I was at it I also made the keys sever test an integration test since it binds to ports and touches the filesystem.",closed,True,2019-03-08 16:04:42,2019-03-08 16:36:31
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1059,https://api.github.com/repos/hyperledger/burrow/issues/1059,Release 0.24.4,,closed,True,2019-03-08 15:35:46,2019-03-08 15:43:36
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1058,https://api.github.com/repos/hyperledger/burrow/issues/1058,Add SequenceNonce utility function,"Downstream library users sometimes want to use sequence number based addresses for newly created accounts. This change exposes a helper in order to form such nonces.

Also preps these nonce related changes for a 0.24.4 release.

For context: https://github.com/hyperledger/fabric-chaincode-evm/pull/3/commits/77c3f7c1b0c2d5fb3bcde22e04d36f46f39c1175",closed,True,2019-03-08 13:35:13,2019-03-08 15:34:40
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1057,https://api.github.com/repos/hyperledger/burrow/issues/1057,Don't pull in Tx to EVM ,Be nicer to downstream.,closed,True,2019-03-08 12:52:15,2019-03-08 13:26:29
burrow,Villem-OskarOssip,https://github.com/hyperledger/burrow/issues/1056,https://api.github.com/repos/hyperledger/burrow/issues/1056,Send transactions to a burrow network,"Go version: 1.11.5 darwin/amd64
OS: macOS High Sierra version 10.13.6

Hello,

I am trying to deploy transaction to a burrow network. I am following [these](https://github.com/hyperledger/burrow/blob/develop/docs/quickstart/send-transactions.md) instructions, but I am getting: `Error: incorrect usage Usage: burrow deploy [OPTIONS]` when trying to deploy.

1)
```
➜  burrow git:(develop) ✗ cat burrow.toml 
ValidatorAddress = ""A50387161B7E51184F7ECECC596C4BDBCE16F274""

[GenesisDoc]
  GenesisTime = 2019-03-07T16:22:16Z
  ChainName = ""BurrowChain_FAB3C1""
  [GenesisDoc.Params]
    ProposalThreshold = 3
  [GenesisDoc.GlobalPermissions]
    [GenesisDoc.GlobalPermissions.Base]
      Perms = ""send | call | createContract | createAccount | bond | name | proposal | input | batch | hasBase | hasRole""
      SetBit = ""root | send | call | createContract | createAccount | bond | name | proposal | input | batch | hasBase | setBase | unsetBase | setGlobal | hasRole | addRole | removeRole""

  [[GenesisDoc.Accounts]]
    Address = ""A50387161B7E51184F7ECECC596C4BDBCE16F274""
    PublicKey = ""{\""CurveType\"":\""ed25519\"",\""PublicKey\"":\""B897E56A09EFD1C22858656BE3F6B4B5A51B52A8C1C3531AA9CF965269B17F38\""}""
    Amount = 99999999999999
    Name = ""Full_0""
    [GenesisDoc.Accounts.Permissions]
      [GenesisDoc.Accounts.Permissions.Base]
        Perms = ""root | send | call | createContract | createAccount | bond | name | proposal | input | batch | hasBase | setBase | unsetBase | setGlobal | hasRole | addRole | removeRole""
        SetBit = ""root | send | call | createContract | createAccount | bond | name | proposal | input | batch | hasBase | setBase | unsetBase | setGlobal | hasRole | addRole | removeRole""

  [[GenesisDoc.Accounts]]
    Address = ""C146F02C3DA2335B7E0E4B8544BF2ADDA489FE93""
    PublicKey = ""{\""CurveType\"":\""ed25519\"",\""PublicKey\"":\""4D5C5B27ACCCC6D7B20A3DEE469E49181D8C71D2A4FDE3F64847E4E2BA9C152B\""}""
    Amount = 9999999999
    Name = ""Participant_0""
    [GenesisDoc.Accounts.Permissions]
      [GenesisDoc.Accounts.Permissions.Base]
        Perms = ""send | call | name | proposal | input | hasRole""
        SetBit = ""send | call | name | proposal | input | hasRole""

  [[GenesisDoc.Validators]]
    Address = ""A50387161B7E51184F7ECECC596C4BDBCE16F274""
    PublicKey = ""{\""CurveType\"":\""ed25519\"",\""PublicKey\"":\""B897E56A09EFD1C22858656BE3F6B4B5A51B52A8C1C3531AA9CF965269B17F38\""}""
    Amount = 9999999999
    Name = ""Full_0""

    [[GenesisDoc.Validators.UnbondTo]]
      Address = ""A50387161B7E51184F7ECECC596C4BDBCE16F274""
      PublicKey = ""{\""CurveType\"":\""ed25519\"",\""PublicKey\"":\""B897E56A09EFD1C22858656BE3F6B4B5A51B52A8C1C3531AA9CF965269B17F38\""}""
      Amount = 9999999999

```

2) Destination address is same as the second account nr found from burrow.toml [[GenesisDoc.Accounts]]
```
➜  burrow git:(develop) ✗ cat test.yaml 
jobs:
- name: sendTxTest1
  send:
      destination: C146F02C3DA2335B7E0E4B8544BF2ADDA489FE93
      amount: 42
```

3) Address is same as found from burrow.toml under [[GenesisDoc.Validators]]
`➜  burrow git:(develop) ✗ SIGNING_ADDRESS=A50387161B7E51184F7ECECC596C4BDBCE16F274    
`

4) `A50387161B7E51184F7ECECC596C4BDBCE16F274` which is found from field with the ValidatorAddress at the top of your burrow.toml
```
➜  burrow git:(develop) ✗ burrow deploy A50387161B7E51184F7ECECC596C4BDBCE16F274 $SIGNING_ADDRESS -f test.yaml
Error: incorrect usage

Usage: burrow deploy [OPTIONS]

Deploy and test contracts
```

What am I doing wrong?
",closed,False,2019-03-07 17:08:25,2019-03-11 10:40:29
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/1055,https://api.github.com/repos/hyperledger/burrow/issues/1055,Update multiple-validators.md and enhance multi-node local setup,"Current docs on multiple validators does not quite work, see: https://github.com/hyperledger/burrow/issues/1050

Also could it be streamlined? In particular `burrow configure` can generate node keys ahead of time. We should be able support this kind of try-out case without a lot of manual/scripted config text manipulation.",closed,False,2019-03-07 11:50:43,2019-03-19 17:15:10
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/1054,https://api.github.com/repos/hyperledger/burrow/issues/1054,[Consensus] Normalise node IDs passed to Tendermint,"Node IDs are addresses of the ed25519 node key - Tendermint now expects them to be lower case in seed, persistent peers, and for dialing. I see no reason not to normalise them (that is downcase the ID) before passing to Tendermint. For example this would help with:

https://github.com/hyperledger/burrow/issues/1050
",open,False,2019-03-07 11:48:39,2019-04-03 15:39:23
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1053,https://api.github.com/repos/hyperledger/burrow/issues/1053,Release 0.24.3,,closed,True,2019-03-06 14:58:33,2019-03-06 14:58:49
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1052,https://api.github.com/repos/hyperledger/burrow/issues/1052,Logging and error tweaks and fix of KVCache,"- Transactor reports the chain's SyncInfo when a tx times out (may shed light on issue with burrow deploy timing out)
- Burrow deploy timeout now 1.5 times transactor blocking timeout
- KVCache iterator updated to work as per latest DB interfaces making CacheDB work for replay/forensics (still not used in main runtime code).",closed,True,2019-03-06 13:36:54,2019-03-06 14:02:32
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1051,https://api.github.com/repos/hyperledger/burrow/issues/1051,Remove stack traces from errors that might make there way into,"TxExecutions and so merkle state causing non-determinism.

Signed-off-by: Silas Davis <silas@monax.io>",closed,True,2019-03-06 09:02:33,2019-03-06 09:16:26
burrow,mrsirja,https://github.com/hyperledger/burrow/issues/1050,https://api.github.com/repos/hyperledger/burrow/issues/1050,[Error] Can't connect multiple validators,"- [ ] `burrow version` (0.24.2+commit.v0.24.1-21-gac9771cc+2019-03-05)
- [ ] `go version` (go1.11 linux/amd64)
- [ ] `os` ( Ubuntu 16.04.1 x86_64)

### Expected to happen
Two peers connected with each other and empty blocks automatically created Sending vote message and Finalizing commit of block with 0 txs

### Actual Behavior
I am trying to connect multiple validator with the help of this [documentation](https://github.com/hyperledger/burrow/blob/develop/docs/quickstart/multiple-validators.md). I followed each step described in the documentation. But when i start node i see following error in logs.

.burrow_val0.toml logs:

> {""caller"":""reactor.go:260"",""component"":""Tendermint"",""inbound"":0,""log_channel"":""Trace"",""message"":""Consensus ticker"",""module"":""blockchain"",""numPending"":0,""outbound"":0,""run_id"":""9344b8cd-3fdb-11e9-8ec5-ebff76d9d01f"",""scope"":""tendermint.NewNode"",""time"":""2019-03-06T06:47:12.435217803Z"",""total"":0}
{""caller"":""pool.go:167"",""component"":""Tendermint"",""log_channel"":""Trace"",""message"":""Blockpool has no peers"",""module"":""blockchain"",""run_id"":""9344b8cd-3fdb-11e9-8ec5-ebff76d9d01f"",""scope"":""tendermint.NewNode"",""time"":""2019-03-06T06:47:12.435279749Z""}
{""caller"":""switch.go:493"",""component"":""Tendermint"",""err"":""auth failure: handshake failed: EOF"",""log_channel"":""Info"",""message"":""Inbound Peer rejected"",""module"":""p2p"",""numPeers"":0,""run_id"":""9344b8cd-3fdb-11e9-8ec5-ebff76d9d01f"",""scope"":""tendermint.NewNode"",""time"":""2019-03-06T06:47:12.435623463Z""}

.burrow_val1.toml logs:


> {""caller"":""pex_reactor.go:399"",""component"":""Tendermint"",""log_channel"":""Info"",""message"":""Ensure peers"",""module"":""pex"",""numDialing"":0,""numInPeers"":0,""numOutPeers"":0,""numToDial"":10,""run_id"":""992ecbc9-3fdb-11e9-8f96-b2d53295bac4"",""scope"":""tendermint.NewNode"",""time"":""2019-03-06T06:47:11.394169472Z""}
> {""caller"":""pex_reactor.go:456"",""component"":""Tendermint"",""log_channel"":""Info"",""message"":""No addresses to dial nor connected peers. Falling back to seeds"",""module"":""pex"",""run_id"":""992ecbc9-3fdb-11e9-8f96-b2d53295bac4"",""scope"":""tendermint.NewNode"",""time"":""2019-03-06T06:47:11.394258804Z""}
> {""caller"":""pex_reactor.go:551"",""component"":""Tendermint"",""log_channel"":""Info"",""message"":""Couldn't connect to any seeds"",""module"":""p2p"",""run_id"":""992ecbc9-3fdb-11e9-8f96-b2d53295bac4"",""scope"":""tendermint.NewNode"",""time"":""2019-03-06T06:47:11.394290864Z""}
> {""address"":""0.0.0.0:20000"",""caller"":""switch.go:561"",""component"":""Tendermint"",""log_channel"":""Info"",""message"":""Dialing peer"",""module"":""p2p"",""run_id"":""992ecbc9-3fdb-11e9-8f96-b2d53295bac4"",""scope"":""tendermint.NewNode"",""time"":""2019-03-06T06:47:12.300685303Z""}
> {""caller"":""reactor.go:260"",""component"":""Tendermint"",""inbound"":0,""log_channel"":""Trace"",""message"":""Consensus ticker"",""module"":""blockchain"",""numPending"":0,""outbound"":0,""run_id"":""992ecbc9-3fdb-11e9-8f96-b2d53295bac4"",""scope"":""tendermint.NewNode"",""time"":""2019-03-06T06:47:12.395341038Z"",""total"":0}
> {""addr"":""0.0.0.0:20000"",""caller"":""switch.go:347"",""component"":""Tendermint"",""err"":""auth failure: conn.ID (d6018980487bfe80e77aad6b85f84e3248ef1c8a) dialed ID () missmatch"",""log_channel"":""Info"",""message"":""Error reconnecting to peer. Trying again"",""module"":""p2p"",""run_id"":""992ecbc9-3fdb-11e9-8f96-b2d53295bac4"",""scope"":""tendermint.NewNode"",""time"":""2019-03-06T06:47:12.424919227Z"",""tries"":4}

Network of both nodes:
```
$ curl -s 127.0.0.1:20001/network
{
  ""jsonrpc"": ""2.0"",
  ""id"": """",
  ""result"": {
    ""ThisNode"": {
      ""ID"": ""D6018980487BFE80E77AAD6B85F84E3248EF1C8A"",
      ""ListenAddress"": ""tcp://0.0.0.0:20000"",
      ""Network"": ""BurrowChain_B8849F-55AFD9"",
      ""Version"": ""0.30.1"",
      ""Channels"": ""4020212223303800"",
      ""Moniker"": ""BurrowChain_B8849F-55AFD9_Validator_74DD3ED70E2095D8706B0AC05BD1C8F7107A5F96"",
      ""TxIndex"": ""on""
    },
    ""listening"": true,
    ""listeners"": null,
    ""n_peers"": 0,
    ""peers"": []
  }
}

$ curl -s 127.0.0.1:30001/network
{
  ""jsonrpc"": ""2.0"",
  ""id"": """",
  ""result"": {
    ""ThisNode"": {
      ""ID"": ""66942160C681F59141FCB9B61E3EE4D294A4C3E4"",
      ""ListenAddress"": ""tcp://0.0.0.0:30000"",
      ""Network"": ""BurrowChain_B8849F-55AFD9"",
      ""Version"": ""0.30.1"",
      ""Channels"": ""4020212223303800"",
      ""Moniker"": ""BurrowChain_B8849F-55AFD9_Validator_E59863D76BA20DD20D870C0574A6CC70F0252CB7"",
      ""TxIndex"": ""on""
    },
    ""listening"": true,
    ""listeners"": null,
    ""n_peers"": 0,
    ""peers"": []
  }
```

### Steps to Reproduction
`burrow spec -f2 | burrow configure -s- > .burrow_init.toml`
`burrow start --validator-index=0 --config=.burrow_val0.toml`
```
NODE_0_URL=`curl -s 127.0.0.1:20001/network | jq -r '.result.ThisNode | [.ID, .ListenAddress] | join(""@"") | ascii_downcase'`
sed -i s%PUT_HERE_NODE_0_ID@LISTEN_EXTERNAL_ADDRESS%${NODE_0_URL}% .burrow_val1.toml
```
`burrow start --validator-index=1 --config=.burrow_val1.toml`

### Files and full Logs

`.burrow_val0.toml` https://pastebin.com/JmqGvWiU
`.burrow_val1.toml` https://pastebin.com/18NMkdK7
`Node 1 logs` https://pastebin.com/jg47UxEx
`Node 2 logs` https://pastebin.com/yGY6gRGG
",closed,False,2019-03-06 07:17:32,2019-03-08 07:16:47
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1049,https://api.github.com/repos/hyperledger/burrow/issues/1049,Re-release with docs,,closed,True,2019-03-01 16:23:17,2019-03-01 16:31:07
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1048,https://api.github.com/repos/hyperledger/burrow/issues/1048,Update docs,,closed,True,2019-03-01 16:15:20,2019-03-01 16:22:42
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1047,https://api.github.com/repos/hyperledger/burrow/issues/1047,Release 0.24.2,,closed,True,2019-03-01 15:52:12,2019-03-01 15:59:43
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1046,https://api.github.com/repos/hyperledger/burrow/issues/1046,0.24.2: stop vent from swallowing and use patched Tendermint,,closed,True,2019-02-28 16:19:54,2019-03-01 15:50:47
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1045,https://api.github.com/repos/hyperledger/burrow/issues/1045,Create bin directory for build jobs,"This fixes a regression in commit 71e3bfc7: create bin directory before
we try to read it.

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2019-02-28 15:18:33,2019-02-28 16:20:38
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1044,https://api.github.com/repos/hyperledger/burrow/issues/1044,Print dirty checkout items,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2019-02-28 12:02:45,2019-02-28 16:20:30
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1043,https://api.github.com/repos/hyperledger/burrow/issues/1043,Release 0.24.1,,closed,True,2019-02-28 10:17:11,2019-02-28 10:17:24
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1042,https://api.github.com/repos/hyperledger/burrow/issues/1042,0.24.1: fix abi and deploy library usage,This needs change log and to be release as 0.24.1 and is required by API,closed,True,2019-02-27 22:27:05,2019-02-28 09:39:10
burrow,Villem-OskarOssip,https://github.com/hyperledger/burrow/issues/1041,https://api.github.com/repos/hyperledger/burrow/issues/1041,Single full node,"Go version: 1.11.5 darwin/amd64
OS: macOS High Sierra version 10.13.6

Hello,

I have successfully installed GO, set GOPATH `(export GOPATH=$HOME/go)` and [installed](https://github.com/hyperledger/burrow/blob/develop/docs/INSTALL.md) burrow. 
I am having trouble executing command `burrow spec -p1 -f1 | burrow configure -s- > burrow.toml`as it returns `command not found: burrow`.

1) My current path
```
➜  burrow git:(develop) ✗ pwd
/Users/villemossip/go/src/github.com/hyperledger/burrow
```

2) Make build works fine
```
➜  burrow git:(develop) ✗ make build
Checking code for formatting style compliance.
go build -ldflags ""-extldflags '-static' \
	-X github.com/hyperledger/burrow/project.commit=v0.23.3-152-ge3c0d46a \
	-X github.com/hyperledger/burrow/project.date=2019-02-27"" \
	-o /Users/villemossip/go/src/github.com/hyperledger/burrow/bin/burrow ./cmd/burrow
```

3) Im stuck here
```
➜  burrow git:(develop) ✗ burrow spec -p1 -f1 | burrow configure -s- > burrow.toml
zsh: command not found: burrow
zsh: command not found: burrow
```

4) GOPATH
```
➜  burrow git:(develop) ✗ env
GOPATH=/Users/villemossip/go
SSH_AUTH_SOCK=/private/tmp/com.apple.launchd.kOsfItZfOn/Listeners
PATH=/Users/villemossip/.rvm/gems/ruby-head/bin:/Users/villemossip/.rvm/gems/ruby-head@global/bin:/Users/villemossip/.rvm/rubies/ruby-head/bin:/Users/villemossip/.nvm/versions/node/v8.11.3/bin:/Library/Frameworks/Python.framework/Versions/3.7/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/usr/local/go/bin:/Applications/Visual Studio Code.app/Contents/Resources/app/bin:/Users/villemossip/.rvm/bin
```

5) whats inside directory
```
➜  burrow git:(develop) ✗ ls
CHANGELOG.md       acm                config             dump               logging            sync
Dockerfile         bcm                consensus          event              permission         test
Gopkg.lock         bin                core               execution          process            tests
Gopkg.toml         binary             crypto             forensics          project            txs
LICENSE.md         burrow.toml        deploy             genesis            protobuf           util
Makefile           chain_dir          deployment         governance         rpc                vendor
NOTES.md           cmd                docker-compose.yml integration        scripts            vent
README.md          commit_hash.txt    docs               keys               storage
```

What am I doing wrong?


",closed,False,2019-02-27 17:49:20,2019-02-28 06:15:19
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1040,https://api.github.com/repos/hyperledger/burrow/issues/1040,Atomically write solidity compiler output as bin file,"If we are running multiple burow deploy jobs concurrently, then one might compile a solidity contract and save the bin file. Another burrow deploy might want to use the bin file for that contract and might read it before it was completely written.
",closed,True,2019-02-27 13:31:56,2019-02-27 18:12:14
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1039,https://api.github.com/repos/hyperledger/burrow/issues/1039,Use consistent Signature message type,"Signatures in `Signatory` were being encoded as protobuf bytes of signature message rather than signature message itself via the use of gogoproto custom type dating from a time when `type Signature []byte`...

Signed-off-by: Silas Davis <silas@monax.io>",closed,True,2019-02-27 11:06:58,2019-02-27 13:19:55
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1038,https://api.github.com/repos/hyperledger/burrow/issues/1038,Concurrent test,,closed,True,2019-02-27 10:14:49,2019-02-27 10:38:46
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1037,https://api.github.com/repos/hyperledger/burrow/issues/1037,Improve performance of finding abi for events,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2019-02-26 20:28:26,2019-02-26 21:45:46
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1036,https://api.github.com/repos/hyperledger/burrow/issues/1036,Fix dev builds,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2019-02-26 17:09:09,2019-02-26 17:10:16
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1035,https://api.github.com/repos/hyperledger/burrow/issues/1035,Prepare for 0.24.0 release,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2019-02-26 14:37:22,2019-02-26 15:04:16
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1034,https://api.github.com/repos/hyperledger/burrow/issues/1034,Dump,,closed,True,2019-02-26 14:26:27,2019-02-26 14:34:41
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1033,https://api.github.com/repos/hyperledger/burrow/issues/1033,Prepare for release,"My signoff is missing from https://github.com/hyperledger/burrow/pull/1033/commits/de870e3783d0c0e91fe8b25afddaf38a5de842f8 

I hereby sign off on it...",closed,True,2019-02-26 13:05:32,2019-02-27 13:31:52
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1032,https://api.github.com/repos/hyperledger/burrow/issues/1032,burrow depends on go 1.11,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2019-02-25 10:26:56,2019-02-25 16:52:27
burrow,SchulerSimon,https://github.com/hyperledger/burrow/issues/1031,https://api.github.com/repos/hyperledger/burrow/issues/1031,Formatting error while installing burrow,"When I follow the instructions in INSTALL.md I get this Error while executing `sudo make build`

```
Checking code for formatting style compliance.
/home/cloud/go/src/github.com/hyperledger/burrow/vent/sqldb/adapters/postgres_adapter.go
diff -u /home/cloud/go/src/github.com/hyperledger/burrow/vent/sqldb/adapters/postgres_adapter.go.orig /home/cloud/go/src/github.com/hyperledger/burrow/vent/sqldb/adapters/postgres_adapter.go
--- /home/cloud/go/src/github.com/hyperledger/burrow/vent/sqldb/adapters/postgres_adapter.go.orig       2019-02-23 13:07:41.838903140 +0100
+++ /home/cloud/go/src/github.com/hyperledger/burrow/vent/sqldb/adapters/postgres_adapter.go    2019-02-23 13:07:41.838903140 +0100
@@ -497,7 +497,7 @@
                $trigger$
                LANGUAGE 'plpgsql';
                `,
-               adapter.schemaName(function),                                             // create function
+               adapter.schemaName(function), // create function
                channel, types.SQLColumnLabelAction, jsonBuildObjectArgs(""OLD"", columns), // case delete
                channel, types.SQLColumnLabelAction, jsonBuildObjectArgs(""NEW"", columns), // case else
        )
@@ -511,10 +511,10 @@
                FOR EACH ROW
                EXECUTE FUNCTION %s();
                `,
-               trigger,                          // drop
-               table,                            // on
-               trigger,                          // create
-               table,                            // on
+               trigger, // drop
+               table,   // on
+               trigger, // create
+               table,   // on
                adapter.schemaName(functionName), // function
        )
 }
/home/cloud/go/src/github.com/hyperledger/burrow/vent/sqldb/adapters/postgres_adapter.go
diff -u /home/cloud/go/src/github.com/hyperledger/burrow/vent/sqldb/adapters/postgres_adapter.go.orig /home/cloud/go/src/github.com/hyperledger/burrow/vent/sqldb/adapters/postgres_adapter.go
--- /home/cloud/go/src/github.com/hyperledger/burrow/vent/sqldb/adapters/postgres_adapter.go.orig       2019-02-23 13:07:41.886889871 +0100
+++ /home/cloud/go/src/github.com/hyperledger/burrow/vent/sqldb/adapters/postgres_adapter.go    2019-02-23 13:07:41.886889871 +0100
@@ -497,7 +497,7 @@
                $trigger$
                LANGUAGE 'plpgsql';
                `,
-               adapter.schemaName(function),                                             // create function
+               adapter.schemaName(function), // create function
                channel, types.SQLColumnLabelAction, jsonBuildObjectArgs(""OLD"", columns), // case delete
                channel, types.SQLColumnLabelAction, jsonBuildObjectArgs(""NEW"", columns), // case else
        )
@@ -511,10 +511,10 @@
                FOR EACH ROW
                EXECUTE FUNCTION %s();
                `,
-               trigger,                          // drop
-               table,                            // on
-               trigger,                          // create
-               table,                            // on
+               trigger, // drop
+               table,   // on
+               trigger, // create
+               table,   // on
                adapter.schemaName(functionName), // function
        )
 }

Your marmot has found a problem with the formatting style of the code.
Makefile:30: recipe for target 'check' failed
make: *** [check] Error 1
```

I exported GOPATH to `/home/cloud/go/`, as instructed


- [latest (go get github.com/hyperledger/burrow)] `burrow version` (docker image tag or branch if built from source)
- [go1.10.4 linux/amd64] `go version` (if applicable)
- [Ubuntu 18.04.2 LTS] operating system details (osx/windows/linux)
- [install] what you expected to happen
- [formatting error] what actually happened
- [just follow the INSTALL.md, when executing `sudo make build` it prints `Checking code for formatting style compliance.` and then failes] steps to reproduction
",closed,False,2019-02-23 12:15:21,2019-03-25 04:39:12
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1030,https://api.github.com/repos/hyperledger/burrow/issues/1030,Further streamify state event storage,"This gives us a reasonable expectation that we will not blow the GRPC message size limits.

It also seems to me to raise the status of execution events and lower the importance of blocks, hopefully lending us some flexibility in constructing projections over events, and executing in contexts where we may not be concerned with blocks (like restored chain events and state channels).",closed,True,2019-02-22 17:19:41,2019-02-26 10:18:36
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1029,https://api.github.com/repos/hyperledger/burrow/issues/1029,Upgrade to Tendermint 0.30.1,And upgrade other deps,closed,True,2019-02-22 09:59:39,2019-02-22 13:38:01
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1028,https://api.github.com/repos/hyperledger/burrow/issues/1028,Warn if call type job is used for constant function,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2019-02-20 15:09:44,2019-02-21 10:58:31
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1027,https://api.github.com/repos/hyperledger/burrow/issues/1027,Testcase for EXTCODEHASH,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2019-02-20 10:15:50,2019-02-21 12:11:20
burrow,compleatang,https://github.com/hyperledger/burrow/issues/1026,https://api.github.com/repos/hyperledger/burrow/issues/1026,[Core] EVM Only Mode,"There are a range of highly utilized scenarios where having a consensus engine gets in our way in rather significant ways. The scenarios which currently come to mind are: 

* rapid developer testing of smart contracts
* CI testing of smart contract suites
* creation of dumps to be restored for down stream testing
* throwaway environments (such as Monax Studio and other)

In these scenarios it is important to keep the ""outer"" dynamics of burrow intact in terms of its inbound transactor and outbound grpc port. It is important to keep the EVM operational. But it is not important to turn on the tendermint consensus engine. 

If we were able to plug our base transactor which inputs into tendermint directly into our ABCI reciever we could achieve an absolutely enormous speed up for the scenarios outlined above. ",closed,False,2019-02-20 02:51:50,2019-04-01 15:41:42
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/1025,https://api.github.com/repos/hyperledger/burrow/issues/1025,[State] Expose account storage hash,When moving to the merkle forest one of the aims was to reintroduce the ability to provide a single-account storage hash (rather than only being able to provide the total state root hash). We currently have individual storage trees per account (we do need to understand performance implications of this better though there is a benchmark). It would be nice to expose this knowledge of the info/query RPCs. It allows you to do things like watch for changes to an account.,open,False,2019-02-19 17:10:25,2019-04-03 15:38:50
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/1024,https://api.github.com/repos/hyperledger/burrow/issues/1024,[State] Content address account code ,"With #1020 we will add EVM support for `EXTCODEHASH` and #1000 should make it fairly straight forward to maintain a separate tree of code stored by the hash of bytecode. For some sets of contracts this should save a fair amount of storage and simplifies providing on-chain ABI storage: #858.

Some considerations:

- We will need to change the `account.Code()` to store a reference. We could just store the hash as bytes, but at this stage we might do well to consider the possibility of alternative bytecode formats (i.e. WASM bytecode). Even then we could still use a single consistent hash, but we may want to use a self-describing hash. I have looked at https://github.com/multiformats/multihash in the past.

- Currently deleting a contract deletes its code (well... it would if we didn't keep every previous version of our forest - perhaps this in itself makes the point moot - we have considered abbreviating our versioning - i.e. thinning to snapshots in distant past). Under this model we would have a garbage collection issue - i.e. knowing when the last reference has dropped. Minor issue but we should note our approach.

- With a view to establishing a link between code hash and EVM ABI it would be useful to understand under which circumstances marginally different bytecode (i.e. solidity writes a metadata footer to the EVM code) actually maps to the same ABI. I suppose we can just duplicate registration/storage of the ABI. What about reverse lookup? Do we care?",open,False,2019-02-19 17:07:14,2019-02-19 17:07:14
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1023,https://api.github.com/repos/hyperledger/burrow/issues/1023,Fix vent command,I messed up making `burrow vent start` subcommand.,closed,True,2019-02-19 16:17:32,2019-02-19 16:32:38
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1022,https://api.github.com/repos/hyperledger/burrow/issues/1022,Make quickstart work in solidity 0.5,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2019-02-19 13:09:54,2019-02-19 13:16:16
burrow,Villem-OskarOssip,https://github.com/hyperledger/burrow/issues/1021,https://api.github.com/repos/hyperledger/burrow/issues/1021,Make build,"Hello,

I am successfully installed burrow from github, but I am having trouble running command `make build`. First cmd returned `'make' is not recognized as an internal or external command`. After a bit googling I found out that I need to install **make** for my **Windows 10** machine. Someone from stackoverflow recommended installing **Chocolatey** to install make. After successful installation I tried to run `make build` again. This time it gave me the following result:

```
C:\Users\Villem Ossip\go\src\github.com\hyperledger\burrow>make build
process_begin: CreateProcess(NULL, pwd, ...) failed.
make: Makefile:9: pipe: No such file or directory
process_begin: CreateProcess(NULL, go list -f {{.Dir}} ./..., ...) failed.
make: Makefile:10: pipe: No such file or directory
process_begin: CreateProcess(NULL, go list ./..., ...) failed.
make: Makefile:11: pipe: No such file or directory
File not found - *.proto
File not found - *.sol
""Checking code for formatting style compliance.""
process_begin: CreateProcess(NULL, gofmt -l -d, ...) failed.
make (e=2): The system cannot find the file specified.
make: *** [Makefile:31: check] Error 2
```
-------------------------------------------------------------
On the other hand I can successfully execute `make build` on my **macos** without installing anything. This what it returns:

```
➜  burrow git:(develop) ✗ make build
Checking code for formatting style compliance.
go build -ldflags ""-extldflags '-static' \
	-X github.com/hyperledger/burrow/project.commit=v0.23.3-152-ge3c0d46a \
	-X github.com/hyperledger/burrow/project.date=2019-02-19"" \
	-o /Users/villemossip/go/src/github.com/hyperledger/burrow/bin/burrow ./cmd/burrow
```
Proceeding on my macos and trying to set up single full account node. After executing `burrow spec -p1 -f1 | burrow configure -s- > burrow.toml` terminal returns:
```
➜  burrow git:(develop) ✗ burrow spec -p1 -f1 | burrow configure -s- > burrow.toml
zsh: command not found: burrow
```
-------------------------------------------------------------
What am I doing wrong on both machines?
",closed,False,2019-02-19 08:41:20,2019-02-19 13:17:23
burrow,phymbert,https://github.com/hyperledger/burrow/pull/1020,https://api.github.com/repos/hyperledger/burrow/issues/1020,[EVM] Support EXTCODEHASH,"Fixes #996

Signed-off-by: phymbert <pierrick.hymbert@gmail.com>",closed,True,2019-02-17 10:01:59,2019-02-19 17:43:52
burrow,phymbert,https://github.com/hyperledger/burrow/issues/1019,https://api.github.com/repos/hyperledger/burrow/issues/1019,[Build] Move to go module,"Moving to `go mod` instead of `dep` and vendoring approach will bring us several advantages:
 
1. Reduce the line of code in the repo
1. Ease other framework to depend on burrow
1. Secure dependency management with hash and version management with `go.mod` and `go.sum`

**WARNING** It implies to update go lang minimal version requirement to 1.11.

More information can be found on the [go module documentation](https://github.com/golang/go/wiki/Modules).",open,False,2019-02-17 08:44:53,2019-02-19 21:14:25
burrow,phymbert,https://github.com/hyperledger/burrow/pull/1018,https://api.github.com/repos/hyperledger/burrow/issues/1018,[DOCS] Rename BIPs to ADRs.,"BIP is confusing with Bitcoin Improvement Proposal.
Furthermore, we are looking for Architecture Decision more than design specification.

Signed-off-by: phymbert <pierrick.hymbert@gmail.com>",closed,True,2019-02-17 08:30:21,2019-02-18 14:13:28
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1017,https://api.github.com/repos/hyperledger/burrow/issues/1017,Solidity 0.5.4,Call forwarding and callling permissions contract is broken,closed,True,2019-02-14 12:33:16,2019-02-21 11:56:23
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1016,https://api.github.com/repos/hyperledger/burrow/issues/1016,Test case for static call,"Provided by @swetharepakula see:
	https://github.com/swetharepakula/burrow-deploy-test

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2019-02-14 10:29:57,2019-02-14 12:52:55
burrow,Villem-OskarOssip,https://github.com/hyperledger/burrow/issues/1015,https://api.github.com/repos/hyperledger/burrow/issues/1015,No Go files / can't load package,"OS: macOS High Sierra version 10.13.6
Go version on mac: go1.11.5 windows/amd64

OS: Windows 10 Enterprise, 64-bit, version 1511
Go version on Windows: go1.11.5 darwin/amd64

Hello,

I am following burrow [installation instructions](https://github.com/hyperledger/burrow/blob/develop/docs/INSTALL.md). When trying to execute command:
 `go get github.com/hyperledger/burrow` 
command prompt returns: 
`can't load package: package github.com/hyperledger/burrow: no Go files in C:\Users\Villem Ossip\go\src\github.com\hyperledger\burrow`. 

I have successfully downloaded the latest version of GO and have set up the environment variable `$GOPATH`.  I made demo Go programm `hello.go`, from my desktop,  which successfully printed out 
what was expected.

Exactly same issue occured from both of my computers (mac and windows).

What might be the issue of this error?
",closed,False,2019-02-13 13:12:53,2019-02-15 18:20:27
burrow,MHBauer,https://github.com/hyperledger/burrow/pull/1014,https://api.github.com/repos/hyperledger/burrow/issues/1014,fix STATICCALL for cross contract query,"resolves #1011

there doesn't appear to be a test that exercises this.

Not sure how to prove anything, but the scenario in #1011 runs sucessfully with this change.",closed,True,2019-02-13 08:24:31,2019-02-14 10:24:08
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1013,https://api.github.com/repos/hyperledger/burrow/issues/1013,Vent triggers and projections refactor,"The primary purpose of this PR was to add the ability to specify event notification triggers using postgres' `LISTEN/NOTIFY` functionality. This is a core part of providing synchronised vent/burrow.js access and can also be used to build a resilient external event system.

In particular the log table now emits a `{""_height"": ""<the block height as string>""}` payload on the `height` channel for chain synchronisation purposes - wait for the height in a `TxExecution` and you know the database will be caught up with chain (for exact synchronisation with fields you can set a notification on a particular event table and subset of fields).

By specifying `Notify` channels as an array in the `EventClass` that table will register a row trigger that fires an event on each channel that is referenced in that event class/table spec. The payload sent by `NOTIFY` will be the JSON serialised collection of key values from `FieldMappings` for each mapping in which a particular channel is referenced.

```
  {
    ""TableName"": ""EventTest"",
    ""Filter"": ""EventType = 'LogEvent'"",
    ""DeleteMarkerField"": ""__DELETE__"",
    ""FieldMappings"": [
      {
        ""Field"": ""key"",
        ""ColumnName"": ""testkey"",
        ""Type"": ""bytes32"",
        ""Primary"": true,
        ""Notify"": [""keyed_meta""]
      },
      {
        ""Field"": ""name"",
        ""ColumnName"": ""testname"",
        ""Type"": ""bytes32"",
        ""Primary"": true,
        ""BytesToString"": true,
        ""Notify"": [""meta"", ""keyed_meta""]
      },
      {
        ""Field"": ""description"",
        ""ColumnName"": ""testdescription"",
        ""Type"": ""bytes32"",
        ""Primary"": false,
        ""Notify"": [""meta"", ""keyed_meta""]
      }
    ]
  },
```

In adding this functionality it was clear there were a number of problems with the structure being used to represent mappings, so included in this PR are various changes (including breaking changes that I will document with a subsequent commit), including:

- Case sensitive column names
- Clear separation between event field names and the columns to which they map
- Deletion marker made less busy just expecting a named field
- `burrow vent schema` now generates a JSON schema to check the event spec against
- EventSpecs can be merged together provided they agree on table definitions exactly
- Height is handled as a uint64 rather than a string (though still stored as varchar - we may want to use numeric but the way things work it doesn't hurt us as it is)
- A number of renames and restructuring to make the code more logical and easier to understand (e.g. `s/Parser/Projection` - parser was not a parser)",closed,True,2019-02-07 15:11:27,2019-02-18 19:02:13
burrow,nagarajmanjunath,https://github.com/hyperledger/burrow/issues/1012,https://api.github.com/repos/hyperledger/burrow/issues/1012,Unable to get PersistentPeers address ,"Please include in your bug report:

 `burrow version` (0.23.3+2018-12-20T12:00:18Z)
 `go version` (go1.10.4 darwin/amd64)
  operating system details (osx)

  what you expected to happen
 I have to generate the **PersistentPeers address**  using below cmd
 NODE_0_URL=`curl -s 127.0.0.1:20001/network | jq -r '.result.ThisNode | [.ID, .ListenAddress] | join(""@"") | ascii_downcase'`

  what actually happened
 when  I execute  **echo  $NODE_0_URL** after executing above code, i get empty value in NODE_0_URL. Unable get the **PersistentPeers address** 

Please do let me know how i can generate **PersistentPeers address** 
I am following the steps to create multiple validator from the doc [`multiple-validators`](https://github.com/hyperledger/burrow/blob/develop/docs/quickstart/multiple-validators.md)
",closed,False,2019-02-07 03:58:42,2019-02-08 07:00:27
burrow,swetharepakula,https://github.com/hyperledger/burrow/issues/1011,https://api.github.com/repos/hyperledger/burrow/issues/1011,Error on querying contract array from another contract,"Burrow Version: 0.23.3
Go: 1.10

Given Contract A which has an array and Contract B that is querying the Contract A, the keys that is queried from the state ReadWriter uses the Contract B's address rather than Contract A.

I have an example using `burrow deploy` that highlights the problem here: https://github.com/swetharepakula/burrow-deploy-test. The example is adapted from the [Truffle Pet Shop Tutorial](https://truffleframework.com/tutorials/pet-shop).

There are two main contracts, Adoption and AdoptionTest. Adoption has an array that stores the owners of the pets. When the AdoptionTest adopts a pet, we can query the Adoption contract to see that the array has updated the owner of the pet to AdoptionTest's address. However from AdoptionTest when querying Adoption's array we get the zero address back.

I initially tested this in the EVM and was able to get this queries that were sent to the state ReadWriter Interface when both contracts are querying for Adoption's Array:

Adoption (0xb047ca4869fbc70b9bb3829a0a13d3c680f85d60)
```
019-02-05 03:12:06.619 UTC [statemanager] GetAccount -> INFO 023 Get Account - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60
2019-02-05 03:12:06.622 UTC [statemanager] GetStorage -> INFO 024 Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 0000000000000000000000000000000000000000000000000000000000000000

2019-02-05 03:12:06.625 UTC [statemanager] GetStorage -> INFO 025 Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 0000000000000000000000000000000000000000000000000000000000000001
2019-02-05 03:12:06.627 UTC [statemanager] GetStorage -> INFO 026 Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 0000000000000000000000000000000000000000000000000000000000000002
2019-02-05 03:12:06.628 UTC [statemanager] GetStorage -> INFO 027 Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 0000000000000000000000000000000000000000000000000000000000000003
2019-02-05 03:12:06.628 UTC [statemanager] GetStorage -> INFO 028 Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 0000000000000000000000000000000000000000000000000000000000000004
2019-02-05 03:12:06.630 UTC [statemanager] GetStorage -> INFO 029 Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 0000000000000000000000000000000000000000000000000000000000000005
2019-02-05 03:12:06.631 UTC [statemanager] GetStorage -> INFO 02a Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 0000000000000000000000000000000000000000000000000000000000000006
2019-02-05 03:12:06.632 UTC [statemanager] GetStorage -> INFO 02b Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 0000000000000000000000000000000000000000000000000000000000000007
2019-02-05 03:12:06.633 UTC [statemanager] GetStorage -> INFO 02c Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 0000000000000000000000000000000000000000000000000000000000000008
2019-02-05 03:12:06.635 UTC [statemanager] GetStorage -> INFO 02d Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 0000000000000000000000000000000000000000000000000000000000000009
2019-02-05 03:12:06.636 UTC [statemanager] GetStorage -> INFO 02e Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 000000000000000000000000000000000000000000000000000000000000000a
2019-02-05 03:12:06.637 UTC [statemanager] GetStorage -> INFO 02f Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 000000000000000000000000000000000000000000000000000000000000000b
2019-02-05 03:12:06.638 UTC [statemanager] GetStorage -> INFO 030 Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 000000000000000000000000000000000000000000000000000000000000000c
2019-02-05 03:12:06.639 UTC [statemanager] GetStorage -> INFO 031 Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 000000000000000000000000000000000000000000000000000000000000000d
2019-02-05 03:12:06.640 UTC [statemanager] GetStorage -> INFO 032 Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 000000000000000000000000000000000000000000000000000000000000000e
2019-02-05 03:12:06.642 UTC [statemanager] GetStorage -> INFO 033 Get Storage - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60, Key: 000000000000000000000000000000000000000000000000000000000000000f
```

AdoptionTest (0x18b021770f805b622e6f7df3ac76fd1b95dd0ba6)
I would expect the 5th query onwards should all have the address (0xb047ca4869fbc70b9bb3829a0a13d3c680f85d60)
```
2019-02-05 03:12:41.176 UTC [statemanager] GetAccount -> INFO 001 Get Account - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6
2019-02-05 03:12:41.179 UTC [statemanager] GetStorage -> INFO 002 Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 0000000000000000000000000000000000000000000000000000000000000000
2019-02-05 03:12:41.179 UTC [statemanager] GetAccount -> INFO 003 Get Account - Address: b047ca4869fbc70b9bb3829a0a13d3c680f85d60
2019-02-05 03:12:41.180 UTC [statemanager] GetAccount -> INFO 004 Get Account - Address: 0000000000000000000000000000000000000000
2019-02-05 03:12:41.182 UTC [statemanager] GetStorage -> INFO 005 Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 0000000000000000000000000000000000000000000000000000000000000001
2019-02-05 03:12:41.183 UTC [statemanager] GetStorage -> INFO 006 Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 0000000000000000000000000000000000000000000000000000000000000002
2019-02-05 03:12:41.184 UTC [statemanager] GetStorage -> INFO 007 Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 0000000000000000000000000000000000000000000000000000000000000003
2019-02-05 03:12:41.186 UTC [statemanager] GetStorage -> INFO 008 Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 0000000000000000000000000000000000000000000000000000000000000004
2019-02-05 03:12:41.187 UTC [statemanager] GetStorage -> INFO 009 Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 0000000000000000000000000000000000000000000000000000000000000005
2019-02-05 03:12:41.188 UTC [statemanager] GetStorage -> INFO 00a Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 0000000000000000000000000000000000000000000000000000000000000006
2019-02-05 03:12:41.189 UTC [statemanager] GetStorage -> INFO 00b Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 0000000000000000000000000000000000000000000000000000000000000007
2019-02-05 03:12:41.190 UTC [statemanager] GetStorage -> INFO 00c Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 0000000000000000000000000000000000000000000000000000000000000008
2019-02-05 03:12:41.192 UTC [statemanager] GetStorage -> INFO 00d Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 0000000000000000000000000000000000000000000000000000000000000009
2019-02-05 03:12:41.193 UTC [statemanager] GetStorage -> INFO 00e Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 000000000000000000000000000000000000000000000000000000000000000a
2019-02-05 03:12:41.194 UTC [statemanager] GetStorage -> INFO 00f Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 000000000000000000000000000000000000000000000000000000000000000b
2019-02-05 03:12:41.195 UTC [statemanager] GetStorage -> INFO 010 Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 000000000000000000000000000000000000000000000000000000000000000c
2019-02-05 03:12:41.197 UTC [statemanager] GetStorage -> INFO 011 Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 000000000000000000000000000000000000000000000000000000000000000d
2019-02-05 03:12:41.198 UTC [statemanager] GetStorage -> INFO 012 Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 000000000000000000000000000000000000000000000000000000000000000e
2019-02-05 03:12:41.199 UTC [statemanager] GetStorage -> INFO 013 Get Storage - Address: 18b021770f805b622e6f7df3ac76fd1b95dd0ba6, Key: 000000000000000000000000000000000000000000000000000000000000000f
```

**Update** These contracts were also run in Remix to verify the expected behavior.",closed,False,2019-02-06 22:12:01,2019-02-14 10:23:51
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1010,https://api.github.com/repos/hyperledger/burrow/issues/1010,Dump restore fixes,"Various fixes to dump/restore:
 - dump contains chain id and blocktime (populate Origin)
 - benchmask for loading mock restore file
 - require AppHash on restore
 - works with t5 dump",closed,True,2019-02-06 16:40:03,2019-02-07 19:00:24
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1009,https://api.github.com/repos/hyperledger/burrow/issues/1009,Add GetBlockHeader to rpcquery,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2019-02-06 11:36:03,2019-02-06 12:26:53
burrow,compleatang,https://github.com/hyperledger/burrow/pull/1008,https://api.github.com/repos/hyperledger/burrow/issues/1008,Fixes vent's behaviour when it cannot find ABIs,"Currently when vent fails to find an ABI for an event it reads from the
chain it just exit(1)'s. This is nonsensical behaviour on complex chains
which may evolve and especially on public or semi-public chains where
the operational unit running a single instance of vent may not be able
to control a given event type+filter. The way vent currently operates
it would be trivially easy to take down a system by deploying a contract
which it's ABIs are not registered with vent instances and have that
contract emit events which are filtered in other's vent instances.

This patch starts to change that behaviour by refusing to fail when an
event cannot be decoded (this happens in pretty much every case when
vent doesn't have the ABI for an event). Instead vent logs the _txhash
and error for further decoding by operators if they need to do so. Vent
still will fall over in the previously defined cases and will fall over
if it cannot save the error log in the table. So that behaviour is not
modified by this patch.

**Note**: this patch will require some tests; however due to other
obligations I do not have time to add those just now. I'll leave that to
another of the burrow maintainers for now.

Signed-off-by: Casey Kuhlman <casey@monax.io>",closed,True,2019-02-06 02:41:29,2019-02-19 10:41:01
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1007,https://api.github.com/repos/hyperledger/burrow/issues/1007,Fix forest non-determinism and remove CacheDB,"@seanyoung discovered non-determinism when testing dump/restore. This was because we were iterating of a map when updating dirty trees. It felt like this would not matter but of course IAVL is order dependent and our commit tree is an IAVL tree.

`KVCache` was also soaking up tens of seconds as used by `CacheDB` because of excessive sorting. It could be sped up by maintaining a sorted list and performing sorted inserts but since keeping it was a marginal act of database sync paranoia I've opted to remove it.

We note there is a slight speed-up by using a single storage tree rather than one for acocunt, but since this was a major motivation behind introducing `MutableForest` and the speedup is modest compared to the above we avoid reverting that for now. Down the line we could probably do with a prefix tree (maybe https://github.com/monax/trieste will see the light of day...)",closed,True,2019-02-05 17:49:07,2019-02-18 19:02:13
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1006,https://api.github.com/repos/hyperledger/burrow/issues/1006,Change unit of aggregation in state to BlockEvent,"With the inclusion of dump/restore (in its current incarnation) we have the possibility of a very large zeroth block. Each time we dump/restore a chain we import all EVM log events into a zeroth pseudo-block. So this block can grow without bounds.

However GRPC has a relatively small message size limit of 4MB (https://github.com/grpc/grpc/issues/7927). The streaming RPC is designed to be used for large messages by breaking them into multiple parts. We have a natural batching with block and transaction but currently we store entire blocks in state. We would like to be able to naturally stream blocks in terms of the their transactions, however just streaming transactions makes it difficult to know when you have received the last transaction in a block. We work round this by introducing `BlockEvent` that can be either `BeginBlock`, `TxExecution`, or `EndBlock` (similar to the tendermint ABCI types). The block messages serve as delimiters.

This PR changes our fundamental execution event state to a stream of `BlockEvents`. Some remarks on this approach:

-  We can pull out a single transaction without decoding an entire (potentially very large) `BlockExecution`
- It relegates blocks (from the point of view of `State`) to being secondary to execution events (which kind of feels right given the separation we have between 'our state' and 'tendermint's state'. The aim is that state is only faintly aware it is running on a blockchain (whether this really makes sense is up for debate - but it does have some advantages for things like checkpointing and restore)
- We could go further and wrap `TxExecution` so we have a 'pure' event stream - for various reasons this seemed like going too far (would affect a lot of code and require a lot of reassembly). I decided in the end that `TxExecution` was a good unit to work with (indeed it is a transaction).
- However since block boundaries are our synchronisation markers, so when consuming a stream of transactions you often want to know when you have reached the end of a block (and code is nicer if you can still do this with a single stream).
- Consumers can still consume `BlockExecutions` with the function `rpcevents.ConsumeBlockExecutions` hiding the details of their reconstruction - so they just benefit from the streaming transport.

This PR also includes:
- KeyFormatStore construct to make sure we do not have colliding prefixes in state and improve readability
- Slight change to Vent - it chose to remain in an invite loop when receiving EOF (on non-streaming bounds) which did not seem like the right thing to do.

Signed-off-by: Silas Davis <silas@monax.io>",closed,True,2019-02-04 14:29:09,2019-02-18 19:02:12
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1005,https://api.github.com/repos/hyperledger/burrow/issues/1005,WIP: TxExecution based state,,closed,True,2019-02-01 18:09:21,2019-02-18 19:02:12
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/1004,https://api.github.com/repos/hyperledger/burrow/issues/1004,[Transactor] Notice if a mempool signed transaction is double submitted,"If we send two identical unsigned tx payloads to two burrow nodes within the same block interval - they will both attempt to mempool sign the tx. If they are successful they will both checktx locally successfully too. However two burrow nodes will assign the same sequence number (since the mempool signing is only montonic within a single node because locks are held in memory). This means they will both send the same tx (same bytes, same hash).

This is a race. In the tendermint logs we will see that one gets included in a block and one will be flagged as duplicate `Tx already exists in cache`. It will never get committed because the sequence is wrong (even if retried).

However BroadcastTxSync subscribes purely by the TxHash for the result. A valid TxExecution will be broadcast internally by all burrow nodes so both clients (to each burrow node) will receive a successful return. But only one will have run!

This is a misuse of mempool signing it is down to you to only use the same input account with the same burrow instance when using mempool signing (we can't do any better than that with this feature). However it is _bad_ that we lie to the submitter of the rejected transaction that it has been processed successfully.

For example if two clients call the same function:

`function addVote(bytes32 name) (bool added)`

With `addVote(""pedro"")`

Both receive a return of `true`. Between them they should expect two votes have been counted for pedro but only 1 will have!

To avoid this I think validators performing mempool signing should themselves too be inputs to the tx and sign it. They will act as multisig countersignatories and by the presence of their sequence numbers (and the uniqueness of validators) these two transaction will be recognised as different transactions (different bytes, different) hash. The tx that loses the race will still get rejected, but this time by sequence number, and the submitter will be informed.

Here's a thing we could do:

```go
type Tx struct {
	ChainID string
	payload.Payload
	// Maybe call them 'countersignatories' or something...
	Inputs []*payload.TxInput
	txHash []byte
}

func (tx *Tx) GetInputs() []*payload.TxInput {
	payloadInputs := tx.Payload.GetInputs()
	inputs := make([]*payload.TxInput, len(payloadInputs), len(tx.Inputs))
	copy(inputs[copy(inputs, payloadInputs):], tx.Inputs)
	return inputs
}
```",open,False,2019-01-31 16:27:58,2019-04-03 15:38:24
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1003,https://api.github.com/repos/hyperledger/burrow/issues/1003,BlockHash improvements,"Based off: https://github.com/hyperledger/burrow/pull/1000 so make sure that is merged before reviewing this.

This PR:
- Provides `Blockchain` with access to Tendermint's `Blockstore`. I anticipate us needing this if we move to not duplicating tendermint information in our storage anyway and feels a bit cleaner than what we have.
- Fixes that current implementation uses `AppHash` - it is a little arguably but probably it should be using the tendermint block hash proper
- Fixes off-by-one with 256 lookback on `BLOCKHASH` opcode",closed,True,2019-01-31 13:57:45,2019-02-18 19:02:12
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1002,https://api.github.com/repos/hyperledger/burrow/issues/1002,WIP: Blocktime2,,closed,True,2019-01-31 10:36:31,2019-02-07 17:41:40
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/1001,https://api.github.com/repos/hyperledger/burrow/issues/1001,Fix restore bug,"When loading a dump during restore, the events are restored without their
transactions. The TxHash field is all 0s; however we added a txHash
reference, which also has the b prefix. Then when iterating over the blocks,
we find the TxHash reference which is then decoded as a block, which fails.

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2019-01-29 13:19:09,2019-01-31 09:50:29
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/1000,https://api.github.com/repos/hyperledger/burrow/issues/1000,Introduce forest of trees for state and move validator state to core state,"This manages a collection of trees rather than a single monolithic tree.

With IAVL this will allow us in the future to: 

- Independently version sub-trees
- Obtain storage, proposal, name, or account sub-state hashes
- Lazy load trees

This also move validator state into core state and whilst I was there I've split state into separate files and tried to introduce a clear split between read and write state.

Suggest to grab local checkout and examine:

- `MutableForest`
- `ImmutableForest`
- `RWTree`
- `Ring`
- `State`
- `Blockchain` (for a list of things to try and find elsewhere)
- `state/validators.go`
- `state/validators_test.go`
- `integration/core/kernel_test.go`

I think most other changes are 'slaves' to changes in those places... mostly.",closed,True,2019-01-24 12:48:44,2019-02-18 19:02:13
burrow,joeriexelmans,https://github.com/hyperledger/burrow/issues/999,https://api.github.com/repos/hyperledger/burrow/issues/999,Block timestamps wrong when Tendermint is configured to not create empty blocks,"burrow 0.23.3+2018-12-20T12:00:18Z

Note: Possibly a Tendermint bug.

For every new block, Burrow sets the timestamp of that block to the previous block timestamp + 1 second.
Tendermint can however create more or fewer than one block per second, depending on whether there are transactions, resulting in wrong timestamps. Only the genesis timestamp is correct in this case.

I'm not sure if Burrow has anything to say about the timestamps that are used or if it is strictly a Tendermint thing.",closed,False,2019-01-23 16:05:50,2019-01-31 16:17:59
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/998,https://api.github.com/repos/hyperledger/burrow/issues/998,dump fixes,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2019-01-23 14:01:05,2019-01-24 13:31:28
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/997,https://api.github.com/repos/hyperledger/burrow/issues/997,Ensure bytes sequences intended for storage as utf8 strings are valid utf8 bytes,Ported from: https://github.com/monax/bosmarmot/pull/194/files,closed,True,2019-01-23 11:40:53,2019-02-18 19:02:13
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/996,https://api.github.com/repos/hyperledger/burrow/issues/996,Support EXTCODEHASH,See: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1052.md,closed,False,2019-01-15 10:56:04,2019-02-19 17:43:52
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/995,https://api.github.com/repos/hyperledger/burrow/issues/995,Extra debug metadata for logs,"Some things that would be rather useful to capture in logs:

- Full burrow version (possibly in via nodeInfo string in passed to app.go) or at least log at boot (Burrow version XXX booting)
- Burrow start time
- Burrow restart counter - this would need to be stored in state and would complement the run ID - in k8s we could backtrack to the nth restart against the same on-disc state",closed,False,2019-01-10 13:50:36,2019-03-07 11:53:58
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/994,https://api.github.com/repos/hyperledger/burrow/issues/994,Ventilation,"This adds Vent into Burrow so we can release as a common unit with a common version. In the process we:

- Update Vent to longer TxHash (and remove our dependency on tmhash - though we match their current version for now)
- Integrate the vent command into the `burrow` command migrating it to mow.cli
- Separate out sqlite support with a build tag to avoid CGO for our default postgres build
- Fix up tests to run in docker-compose and on circle-ci
",closed,True,2019-01-09 13:15:51,2019-01-23 12:04:46
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/993,https://api.github.com/repos/hyperledger/burrow/issues/993,Make account tags/values nicer for querying,"The default tags created by `MustReflectTags` for accounts were not very nice for querying permissions or roles. This fixes that and also tries to produce query values from the `TextMarshaler` interface if it is available.

While I was in the query code I also realised that using `NewBuilder` for complete query strings was unnecessary and rather wasteful so removed that.",closed,True,2019-01-07 22:09:16,2019-01-08 11:24:16
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/992,https://api.github.com/repos/hyperledger/burrow/issues/992,Sync up with master,,closed,True,2019-01-07 17:17:35,2019-01-07 17:33:07
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/991,https://api.github.com/repos/hyperledger/burrow/issues/991,WIP: Trie implementation,"This is a prototype implementation of a space-efficient sparse trie structure based on compressed branching and a sparse child array at each branch.

As a trie it supports range queries and is lexicographically sorted. It also makes restricting to or iterating over a prefix straightforward. This has applications for our various caching layers that are currently map based and for state where if we extended it to form a merkle tree it would be easy to maintain hashes for any prefix (making it possible to have finer grain hashes for accounts and so on in a way not possible with IAVL).",closed,True,2019-01-02 22:11:03,2019-02-18 19:02:13
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/990,https://api.github.com/repos/hyperledger/burrow/issues/990,Reinstate initial version save to maintain compatibility!,"Oops... 

Running against existing state will fail since we start on the wrong version offset. This _probably_ ought to be released over the top of v0.23.3 unless we want to be strict and bump again.",closed,True,2018-12-19 21:44:56,2019-01-04 11:42:54
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/989,https://api.github.com/repos/hyperledger/burrow/issues/989,Bring in changes for 0.23.2 and 0.23.3 onto develop,,closed,True,2018-12-19 18:09:53,2018-12-20 10:15:06
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/988,https://api.github.com/repos/hyperledger/burrow/issues/988,Ensure tree version is synchronised with height,"Since the version of the IAVL tree is written into the node structure with every write and contribute to hash we much ensure that it is consistent between reloads.

Currently if no writes are made between successive commits we have:

```
AppHash_A -> CommitID {Version: 100 } written at Height 99
AppHash_A -> CommitID {Version: 101} written at Height 100
```
But suppose we attempt to restore starting from height 99. Now we end up starting with version 101 - which we are _meant_ to be overwriting. This will lead to AppHash mismatch on the next write.

To make things less confusing this also synchronises height and tree version (and checks this each commit).

With IAVL 0.12.0 we can make the checkpointing/rollback work as really intended with `LoadVersionForOverwriting`",closed,True,2018-12-19 15:17:04,2018-12-19 17:43:33
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/987,https://api.github.com/repos/hyperledger/burrow/issues/987,Release checkpointing hotfix 0.23.2,,closed,True,2018-12-18 13:00:21,2018-12-19 13:46:13
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/986,https://api.github.com/repos/hyperledger/burrow/issues/986,Fix checkpointing with RWTree,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-12-18 11:50:11,2019-01-04 11:42:54
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/985,https://api.github.com/repos/hyperledger/burrow/issues/985,Checkpoint fix,"This fixes the issue with checkpointing whereby when reloading state at a time when transactions are occurring we get an AppHash mismatch. The crux of the problem is that `RWTree` was loading its `readTree` from `version - 1`. Usually the read tree is one behind, apart from at the instant we save when the two trees should match!

This also introduces `LoadVersionForOverwriting` so we don't get any weirdness when loading a previous version - it will delete future versions from state.

The kernel tests now generate transactions as they are restarted and make sure the only errors we see are GRPC `Unavailable` coded errors - which should be a more solid test for this sort of thing.",closed,True,2018-12-18 11:02:06,2019-01-04 11:41:26
burrow,seanyoung,https://github.com/hyperledger/burrow/issues/984,https://api.github.com/repos/hyperledger/burrow/issues/984,"[Deploy] mempool-signing in ""burrow deploy --mempool-signing"" needs a better name","Someone new to blockchain is not going to know what mempool-signing is, and mempool is a very overloaded term.
Please make suggestions for a better name.

burrow deploy --server-signing
burrow deploy --burrow-signing",open,False,2018-12-18 10:43:07,2019-04-03 15:37:28
burrow,seanyoung,https://github.com/hyperledger/burrow/issues/983,https://api.github.com/repos/hyperledger/burrow/issues/983,"[Core] make it possible to start validator by key name ""burrow start -v Validator_0""",This improves usability.,open,False,2018-12-18 10:40:39,2019-04-03 15:37:15
burrow,seanyoung,https://github.com/hyperledger/burrow/issues/982,https://api.github.com/repos/hyperledger/burrow/issues/982,[Core] .burrow and .keys should not be hidden directories,"Both the .keys and the .burrow directory are hard to find since they start with a dot, and thus are hidden on unix. This makes them harder to find and affects usability.",open,False,2018-12-18 10:29:32,2019-04-03 15:35:46
burrow,carlosfaria94,https://github.com/hyperledger/burrow/issues/981,https://api.github.com/repos/hyperledger/burrow/issues/981,[SNatives] Update account balance,"Hello, I created a SNative contract to update the account balance, but the `stateWriter.SubtractFromBalance` is not persisting the state change (I.e. the account balance don't change).

File changed: https://github.com/hyperledger/burrow/blob/develop/execution/evm/snative.go

**SNative Contract description:**

```go
NewSNativeContract(`
* Interface for gas consumption.
`,
  ""Balance"",
  &SNativeFunctionDescription{Comment: `
  * @notice Test decreaseBalance
  * @return result a bool
  `,
    Name:      ""decreaseBalance"",
    PermFlag:  permission.Send,
    Arguments: reflect.TypeOf(decreaseBalanceArgs{}),
    Returns:   reflect.TypeOf(decreaseBalanceRets{}),
    F:         decreaseBalance},
)
```

**Function implementation:**

```go

type decreaseBalanceArgs struct {
	Account crypto.Address
	Amount  uint64
}

type decreaseBalanceRets struct {
	Result uint64
}

func decreaseBalance(stateWriter Interface, caller crypto.Address, gas *uint64, logger *logging.Logger,
	a interface{}) (interface{}, error) {
	args := a.(*decreaseBalanceArgs)

	exists := stateWriter.Exists(args.Account)
	if !exists {
		return false, fmt.Errorf(""unknown account %s"", args.Account)
	}

	stateWriter.SubtractFromBalance(args.Account, args.Amount)

	return decreaseBalanceRets{Result: args.Amount}, nil
}
```

The state cache is updated accordingly, but the final state is not persisted.

I can read the final state using SNative's, but I cannot write a new state.

Something is missing?

System overview:
- Burrow `0.23.1`
- Go `1.11.2`
- OS: macOS 10.14

",closed,False,2018-12-17 17:10:24,2019-01-02 23:01:49
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/980,https://api.github.com/repos/hyperledger/burrow/issues/980,Allow KeyNames to be used in deploy yaml,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-12-15 13:46:27,2018-12-19 15:40:44
burrow,phymbert,https://github.com/hyperledger/burrow/pull/979,https://api.github.com/repos/hyperledger/burrow/issues/979,[P2P] Expose config p2p AddrBookStrict to allow local ip,,closed,True,2018-12-14 14:22:15,2018-12-14 14:29:54
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/978,https://api.github.com/repos/hyperledger/burrow/issues/978,Add missing GetStats() rpc query interface,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-12-12 10:03:46,2018-12-15 10:46:27
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/977,https://api.github.com/repos/hyperledger/burrow/issues/977,Add dump interface,,closed,True,2018-12-11 20:59:49,2019-01-22 14:14:45
burrow,enriquefynn,https://github.com/hyperledger/burrow/issues/976,https://api.github.com/repos/hyperledger/burrow/issues/976,[Question] Contract's storage merkle tree,"AFAIK it is not possible to prove the state of a contract's storage variable by using the block header and a merkle path, like in ethereum.
Is Burrow planning to do something about that? if so, using a merkle-patricia-trie like in ethereum, so it supports fast state modification in the merkle-trie, or even better, use tendermint's implementation of a IAVL tree (https://github.com/tendermint/iavl)",closed,False,2018-12-10 17:26:48,2018-12-11 10:13:32
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/975,https://api.github.com/repos/hyperledger/burrow/issues/975,Report stats on accounts with and without code,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-12-07 14:20:06,2018-12-07 16:25:24
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/974,https://api.github.com/repos/hyperledger/burrow/issues/974,Provide more efficient non-string parsing based query for TxExecution,This probably helps mitigate #973 - though it's not clear where the leak is what is happening now is manifestly inefficient.,closed,True,2018-12-06 15:46:10,2019-01-04 11:41:26
burrow,joeriexelmans,https://github.com/hyperledger/burrow/issues/973,https://api.github.com/repos/hyperledger/burrow/issues/973,[Core] Memory usage keeps going up over time,"Burrow version: 0.23.1+2018-11-14T18:42:35Z (linux 64-bit binary from 'releases' page)
OS: Ubuntu 16.04.2 LTS

A 2-node setup was created, both burrow processes were running on the same machine. Then, for about 64 hours:

- Every 10 minutes, a batch of 50 contracts was deployed
- Every 5 minutes, 1 contract was deployed and 100 transactions were made to this contract (a setter function was called, which also emitted an event)
- Every minute, the CPU and memory usage of one of the burrow processes were logged as CSV data
- Every 5 minutes, the total size of the blockchain directory of one of the burrow processes was calculated and logged as CSV data
- Empty blocks enabled, one block every 1s

Disk & CPU seemed normal. Memory kept going up however, (up to 1 GB). Possibly a memory leak?

I've made some graphs...

![contracts-vs-disk-usage](https://user-images.githubusercontent.com/37209254/49435461-f4ebc200-f7b6-11e8-8cf4-50b5e68f1192.png)
![cpu usage](https://user-images.githubusercontent.com/37209254/49435462-f4ebc200-f7b6-11e8-8863-2565bb314159.png)
![memory usage](https://user-images.githubusercontent.com/37209254/49435463-f4ebc200-f7b6-11e8-8541-da8e1e03cddb.png)
(note: 'seconds' should be 'milliseconds' in those graphs)
[raw_data.txt](https://github.com/hyperledger/burrow/files/2643436/raw_data.txt)
[contract.sol.txt](https://github.com/hyperledger/burrow/files/2643449/contract.sol.txt)


",open,False,2018-12-04 10:25:34,2018-12-17 09:22:53
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/972,https://api.github.com/repos/hyperledger/burrow/issues/972,WIP: Fix checkpointing issue,This currently just extends the kernel tests to reproduce the issue which is that in the case of rollback but the issue is with rewind and overwrite for which we need new IAVL,closed,True,2018-12-03 13:43:13,2018-12-18 15:49:02
burrow,devrajsinghrawat,https://github.com/hyperledger/burrow/pull/971,https://api.github.com/repos/hyperledger/burrow/issues/971,Port Update for RPC.GRPC in .burrow_val0.toml,"According to standard documentation for Multiple validators - advanced consensus setup -> https://github.com/hyperledger/burrow/blob/develop/docs/quickstart/multiple-validators.md

while setting up RPC.GRPC address information in file .burrow_val0.toml, it is suggested to maintain ListenAddress = ""127.0.0.1:20002""
while it was found that the default port should be 10997 so it should be ListenAddress = ""127.0.0.1:10997""

[Tendermint]
  Seeds = """"
  SeedMode = false
  PersistentPeers = """"
  ListenAddress = ""tcp://0.0.0.0:20000""
  Moniker = ""val_node_0""
  TendermintRoot = "".burrow_node0""

[Execution]

[Keys]
  GRPCServiceEnabled = false
  AllowBadFilePermissions = true
  RemoteAddress = """"
  KeysDirectory = "".keys""

[RPC]
  [RPC.Info]
    Enabled = true
    ListenAddress = ""tcp://127.0.0.1:20001""
  [RPC.Profiler]
    Enabled = false
  [RPC.GRPC]
    Enabled = true
    ListenAddress = ""127.0.0.1:20002""   <------------ Change here
  [RPC.Metrics]
    Enabled = false

During this setup my peer node was not able to connect to node0, then I have checked and found that the default port should be 10997.After this change my issue was resolved.

Recently I had come across a documentation which also stat that the Default should be 10997.
",closed,True,2018-11-27 08:50:18,2018-12-18 15:49:35
burrow,helderjnpinto,https://github.com/hyperledger/burrow/issues/970,https://api.github.com/repos/hyperledger/burrow/issues/970,problems with burrow deploy ,"Please include in your bug report:

- [0.23.1+commit.v0.23.0-12-g7760a372+2018-11-19  ] `burrow version` (docker image tag or branch if built from source) 
- [ go version go1.10 linux/amd64] `go version` (if applicable)
- [Linux bd 4.15.0-39-generic #42-Ubuntu SMP Tue Oct 23 15:48:01 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux
 ] operating system details (osx/windows/linux)
- [burrow deploy --address `with success` ] what you expected to happen
- [burrow deploy not deploy an Smart contract with emit <Event>  ] what actually happened
- [
- bin/burrow deploy  --address BF6B575E6C7CECE899B04EA5D4FA56FD406BC5D2 --file deploy.yaml
 ] steps to reproduction
with this contract: 
``` js 

pragma solidity ^0.5.00;

contract Storage {
    event NewMsg(
        address sender,
        string msgx
    );

    string private storageMsg = """";

    constructor(string memory initmsg) public {
        setMsg(initmsg);
    }

    function setMsg(string memory msgx) public {
        storageMsg = msgx;
       \\ emit NewMsg(msg.sender, msgx); <- I need to comment this to made an successful deploy 
    }

    function getMsg() public view returns (string memory) {
        return storageMsg;
    }
    
}

```

ERROR: 

``` bash
                                          
*****Executing Job*****
                    
Job Name                                    => deployStorage

                                           
Deploying Contract                          name => Storage
                                            rawErr => rpc error: code = Unknown desc = exception during transaction execution: Call error: call error: cannot grow memory because it would exceed the current maximum limit of 16777216 bytes
Stack trace: [state.go:97 memory.go:125 memory.go:95 vm.go:647 vm.go:167 vm.go:141 call_context.go:199 call_context.go:48 execution.go:232 app.go:203 app.go:175 local_client.go:76 app_conn.go:73 execution.go:205 execution.go:76 state.go:1324 state.go:1255 state.go:1203 state.go:1232 state.go:1639 state.go:1497 state.go:650 state.go:615 asm_amd64.s:2361]
trace: Call: BF6B575E6C7CECE899B04EA5D4FA56FD406BC5D2 -> F9AF704A7D7CA861E14D8EFD764C911C170289E2:  [cannot grow memory because it would exceed the current maximum limit of 16777216 bytes
Stack trace: [state.go:97 memory.go:125 memory.go:95 vm.go:647 vm.go:167 vm.go:141 call_context.go:199 call_context.go:48 execution.go:232 app.go:203 app.go:175 local_client.go:76 app_conn.go:73 execution.go:205 execution.go:76 state.go:1324 state.go:1255 state.go:1203 state.go:1232 state.go:1639 state.go:1497 state.go:650 state.go:615 asm_amd64.s:2361]], nested call errors:
error in nested call at depth 0: F9AF704A7D7CA861E14D8EFD764C911C170289E2 (callee) -> BF6B575E6C7CECE899B04EA5D4FA56FD406BC5D2 (caller): cannot grow memory because it would exceed the current maximum limit of 16777216 bytes
Stack trace: [state.go:97 memory.go:125 memory.go:95 vm.go:647 vm.go:167 vm.go:141 call_context.go:199 call_context.go:48 execution.go:232 app.go:203 app.go:175 local_client.go:76 app_conn.go:73 execution.go:205 execution.go:76 state.go:1324 state.go:1255 state.go:1203 state.go:1232 state.go:1639 state.go:1497 state.go:650 state.go:615 asm_amd64.s:2361]
defAddr => BF6B575E6C7CECE899B04EA5D4FA56FD406BC5D2
Error finalizing contract deploy ./contracts/storage.sol: 
There has been an error talking to your Burrow chain using account BF6B575E6C7CECE899B04EA5D4FA56FD406BC5D2.


```",closed,False,2018-11-21 18:38:37,2018-11-22 10:07:21
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/969,https://api.github.com/repos/hyperledger/burrow/issues/969,Contract creation nonce for predictable addresses,"This uses the TxHash along with an alternative sequence number within the VM to generate new contract addresses. The vm therefore no longer modifies input account sequence numbers which means the input account sequence number just always goes up by one as a result of: https://github.com/hyperledger/burrow/blob/develop/execution/execution.go#L414  and not every time a contract is created.

Provided the TxHash is unique with high probability then this still avoid collisions in generated addresses. It does mean that generated addresses are not predictable in the same way. We d not currently use this fact, but I am concerned that may be desirable (will look at other EVMs implementations).",closed,True,2018-11-21 18:31:03,2018-11-23 16:49:59
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/968,https://api.github.com/repos/hyperledger/burrow/issues/968,Proposal,,closed,True,2018-11-20 14:48:09,2019-01-04 14:05:36
burrow,phymbert,https://github.com/hyperledger/burrow/pull/967,https://api.github.com/repos/hyperledger/burrow/issues/967, [evm] BLOCKHASH opcode,close #909 ,closed,True,2018-11-16 14:02:31,2019-01-31 10:16:06
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/966,https://api.github.com/repos/hyperledger/burrow/issues/966,Make debugging easier by printing event during deploy,"This debugging solidity much easier. For example, add the following to the contract:

 event Foo(string trace, address owner);

Now at any point you can do:
        emit Foo(""owner"", _owner);
        emit Foo(""ecosystem"", _ecosystem);

And borrow deploy -debug will say:
```shell
*****Executing Job*****
                    
Job Name                                    => testParticipantsManager
Type                                        => Call

                                           
Tried, not found                            abifile => /home/sean/git/blackstone/contracts/src/bin/ParticipantsManagerTest
Found ABI                                   abifile => /home/sean/git/blackstone/contracts/src/bin/ParticipantsManagerTest.bin
ABI Specification (Formulate)               => [{""constant"":false,""inputs"":[],""name"":""testUserAccountSecurity"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""testOrganizationAuthorization"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""testOrganizationsManagement"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""testParticipantsManager"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""}]
Packing Call via ABI                        function => testParticipantsManagerarguments => []
Calling                                     destination => E9C4EAC1CA456AB6C3E3A182191FCE3A62F0F040function => testParticipantsManagerdata => a0edd12c
CallTx                                      Sequence => Address => E9C4EAC1CA456AB6C3E3A182191FCE3A62F0F040Fee => 9999Gas => 1111111111Data => a0edd12cInput => B2736CA2E352761BB98B18CDDDF96E307709A007Amount => 9999
Using mempool signing                       
event LogSystemOwnerChanged                 previousOwner => EF7FBC22B794ADCA15C24B545A375AC973F72C94newOwner => EF7FBC22B794ADCA15C24B545A375AC973F72C94
event Foo                                   trace => ownerowner => 0000000000000000000000000000000000000000
event Foo                                   trace => ecosystemowner => C5CB681D4A97C3048D445F8A7F8888A60B18771F
event LogUserCreation                       id => 1446owner => 0000000000000000000000000000000000000000eventId => AN://user-accountsuser_account_address => D0EB5B19E1FEBF0A1648602762047D4AAAE64D16
event Foo                                   trace => ownerowner => 0000000000000000000000000000000000000000
event Foo                                   trace => ecosystemowner => C5CB681D4A97C3048D445F8A7F8888A60B18771F
event LogUserCreation                       eventId => AN://user-accountsuser_account_address => 1A568B75F0472E365724CA3E8E0430021A269948id => dummyIdowner => 0000000000000000000000000000000000000000
event Foo                                   trace => ownerowner => 0000000000000000000000000000000000000000
event Foo                                   trace => ecosystemowner => C5CB681D4A97C3048D445F8A7F8888A60B18771F
event Foo                                   trace => ownerowner => E9C4EAC1CA456AB6C3E3A182191FCE3A62F0F040
event Foo                                   owner => C5CB681D4A97C3048D445F8A7F8888A60B18771Ftrace => ecosystem
event LogUserCreation                       id => dummyId2owner => E9C4EAC1CA456AB6C3E3A182191FCE3A62F0F040eventId => AN://user-accountsuser_account_address => 5AB856A24F3136CB4E23A12BC64F79AFE1089734
[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 32 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 7 115 117 99 99 101 115 115 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]
Decoding Raw Result                         => 
Tried, not found                            abifile => /home/sean/git/blackstone/contracts/src/bin/ParticipantsManagerTest
Found ABI                                   abifile => /home/sean/git/blackstone/contracts/src/bin/ParticipantsManagerTest.bin
ABI Specification (Decode)                  => [{""constant"":false,""inputs"":[],""name"":""testUserAccountSecurity"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""testOrganizationAuthorization"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""testOrganizationsManagement"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":false,""inputs"":[],""name"":""testParticipantsManager"",""outputs"":[{""name"":"""",""type"":""string""}],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""}]
call variables:                             => [0xc4201c3da0]
Debugging: success                          
Return Value                                => success
Job Vars                                    => 0,success
Replacement Match Found                     match => $testParticipantsManager
Fixing Variables =>                         var => testParticipantsManagerres => success
```


Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2018-11-14 17:52:26,2018-11-20 12:46:49
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/965,https://api.github.com/repos/hyperledger/burrow/issues/965,remove double added,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-11-14 17:51:51,2018-11-14 17:52:08
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/964,https://api.github.com/repos/hyperledger/burrow/issues/964,Release 0.23.1,,closed,True,2018-11-14 17:48:38,2018-11-14 18:14:59
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/963,https://api.github.com/repos/hyperledger/burrow/issues/963,Add solc to docker container,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-11-14 16:14:26,2018-11-14 17:47:10
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/962,https://api.github.com/repos/hyperledger/burrow/issues/962,Minors,,closed,True,2018-11-14 14:53:04,2018-11-14 15:42:40
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/961,https://api.github.com/repos/hyperledger/burrow/issues/961,Prevent SetStorage on non-existent accounts,"This prevents some subsequent errors observed in http://github.com/agreements-network/blackstone that arise from breaking the invariant of only writing storage after accounts have been created.

It also breaks some of our integration tests...",closed,True,2018-11-14 12:25:49,2018-11-14 14:50:54
burrow,compleatang,https://github.com/hyperledger/burrow/issues/960,https://api.github.com/repos/hyperledger/burrow/issues/960,[State] Implement BIP-2 Identify Transaction,See BIP for more information.,open,False,2018-11-13 04:01:46,2018-12-05 12:30:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/959,https://api.github.com/repos/hyperledger/burrow/issues/959,Fix docker tagging 2,,closed,True,2018-11-10 17:56:56,2018-11-10 19:06:40
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/958,https://api.github.com/repos/hyperledger/burrow/issues/958,Fix docker latest release tag,,closed,True,2018-11-09 22:07:42,2018-11-10 19:06:19
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/957,https://api.github.com/repos/hyperledger/burrow/issues/957,Release 0.23.0,,closed,True,2018-11-09 16:52:31,2018-11-09 17:30:47
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/956,https://api.github.com/repos/hyperledger/burrow/issues/956,Prepare for release,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-11-09 16:41:23,2018-11-09 16:58:55
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/955,https://api.github.com/repos/hyperledger/burrow/issues/955,Introuduce single error transmission mechanism,"- Fix various logical errors in EVM
- Deal with various errors previously swallowed in tests
- Upgrade go-hex
- Add unreleased changelog entries

Also: fixes #905 

Signed-off-by: Silas Davis <silas@monax.io>",closed,True,2018-11-08 19:15:51,2019-01-04 11:41:26
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/954,https://api.github.com/repos/hyperledger/burrow/issues/954,[Deploy] Replace ad-hoc templating in deploy.yaml with Go text/template,"Currently we have a rather ad-hoc tangle of code that allows us to substitute variables from previous jobs in a deploy.yaml into later jobs. 

The parsing and syntax is provided by some regular expressions mixed with string splitting and other logic that is very far from declarative. Also the structure of the variables you can access is untyped and depends on the job you are referencing, for example:

```yaml
# could be an address from a deploy job
- name: queryStorage
  query-contract:
      destination: $deployStorageK
      function: get
# in a query-account we get named fields
- name: queryPerm1
  query-account:
      account: $addr2
      field: permissions.roles
# In a query-vals we can have jq style deep queries with substitution thrown in!
- name: CheckPower
  query-vals:
    field: ""Set.${AddValidator.address}.Power""
```
A much better tool for this sort of work would be text/template. This would firstly give us a decent non-fragile syntax that already exists. The way it would work is by lazily evaluating all keys in our parsed yaml structure as if the are text templates and pass a global object representing the state of past (and future) jobs. This would give the same power as what we have now (the ability to dynamically reference variables initialised in earlier jobs) but we can give each job a strongly typed structure to query over which we can use a reference as what is available. Each job can have a struct describing its result rather than `interface{}` as it is now.",open,False,2018-11-08 12:43:49,2018-12-05 12:29:51
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/953,https://api.github.com/repos/hyperledger/burrow/issues/953,Add EVM state interface,"This change was motivated by issue with STATICCALL, which revealed deeper issues with the state inferfaces as they are used by the VM. Chiefly the fact that the mutable account objects act as yet another (unnecessary and confusing) layer of caching that requires synchronisation between call frames.

To make this clearer I have introduced a direct read/write interface for the EVM that captures the state freshness requirements of the EVM. This also allowed for simplification of the account model transferring some of the functionality of `MutableAccount` to this interface and removing the rather complicated nested accounts structure.",closed,True,2018-11-07 13:19:51,2018-11-07 16:49:05
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/952,https://api.github.com/repos/hyperledger/burrow/issues/952,Proposal,,closed,True,2018-11-04 15:31:25,2018-11-09 15:18:26
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/951,https://api.github.com/repos/hyperledger/burrow/issues/951,remaining staticcall tests & add call verification,"checks sync err against call value as edge case 

Signed-off-by: greg <greg.hill@monax.io>",closed,True,2018-11-01 16:52:45,2018-11-07 13:21:20
burrow,siyopao,https://github.com/hyperledger/burrow/pull/950,https://api.github.com/repos/hyperledger/burrow/issues/950,Fix some broken links,Signed-off-by: Craig Pastro <iamcap7@gmail.com>,closed,True,2018-11-01 06:26:54,2018-11-09 16:43:30
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/949,https://api.github.com/repos/hyperledger/burrow/issues/949,refactor staticcall tests,Signed-off-by: greg <greg.hill@monax.io>,closed,True,2018-10-31 16:46:57,2018-10-31 16:52:20
burrow,terasum,https://github.com/hyperledger/burrow/pull/948,https://api.github.com/repos/hyperledger/burrow/issues/948,docs: fix installation instruction typo,,closed,True,2018-10-31 03:09:27,2018-10-31 12:12:20
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/947,https://api.github.com/repos/hyperledger/burrow/issues/947,Added .sol and .yaml files for test fixture app51-user-account-forwar…,"…d-proxy-pattern

Signed-off-by: Jan Hendrik Scheufen <j.h.scheufen@gmail.com>
Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2018-10-29 11:32:03,2018-10-29 15:12:58
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/946,https://api.github.com/repos/hyperledger/burrow/issues/946,tag master release with latest,"Signed-off-by: greg <greg.hill@monax.io>

Fixes #939 ",closed,True,2018-10-26 19:53:28,2018-10-29 12:44:32
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/945,https://api.github.com/repos/hyperledger/burrow/issues/945,tag master release with latest,"Signed-off-by: greg <greg.hill@monax.io>

Fix for #939",closed,True,2018-10-26 19:49:06,2018-10-26 19:51:52
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/944,https://api.github.com/repos/hyperledger/burrow/issues/944,Create2 OpCode & Unit Tests,Includes basic support for the [CREATE2 opcode](https://eips.ethereum.org/EIPS/eip-1014).,closed,True,2018-10-24 11:23:28,2018-12-04 17:48:41
burrow,j-h-scheufen,https://github.com/hyperledger/burrow/pull/943,https://api.github.com/repos/hyperledger/burrow/issues/943,Test fixture for problems with forward proxy pattern,"The implementation of a forward proxy pattern leads to `Error 5: Memory out of bounds` for functions returning a string (most likely this is a problem for all functions returning dynamic types).
This PR adds a test fixture to reproduce the problem.

Signed-off-by: Jan Hendrik Scheufen <j.h.scheufen@gmail.com>",closed,True,2018-10-22 18:55:17,2018-10-29 13:00:30
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/942,https://api.github.com/repos/hyperledger/burrow/issues/942,Block header,This gets us the full block header in BlockExecution. Along with some tooling related code fixes and upgrade of protoc compiler.,closed,True,2018-10-22 17:28:35,2019-01-04 11:41:26
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/941,https://api.github.com/repos/hyperledger/burrow/issues/941,add staticall tests,Signed-off-by: greg <greg.hill@monax.io>,closed,True,2018-10-22 12:27:23,2018-10-31 16:48:02
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/940,https://api.github.com/repos/hyperledger/burrow/issues/940,Implement staticcall and tidy up nested error handling,"This builds on @gregdhill's work and improves our handling of exceptions but catching them as events at the VM level and surfacing into a nested call error structure only later on when necessary. This means that traversing an error/call trace is more standardised and cleans up a few issues with testing this opcode.

The remaining piece of work is to fix up `TestStaticCall` so it generates valid bytecode sequence for the mutating opcodes (i.e. set up their arguments appropriately on the stack) so that the tests will run under the current implementation.

@gregdhill if you do this just PR into this feature branch and we will merge from here. Please also review this!",closed,True,2018-10-20 14:25:07,2018-11-07 13:27:00
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/939,https://api.github.com/repos/hyperledger/burrow/issues/939,Add 'latest' tag to docker hub image,Currently we are not adding a `latest` tag to https://hub.docker.com/r/hyperledger/burrow via CI. This means a bare pull will not grab the latest. We should push this tag for better discovery.,closed,False,2018-10-19 11:53:17,2018-10-29 12:45:20
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/938,https://api.github.com/repos/hyperledger/burrow/issues/938,Empty deploy,,closed,True,2018-10-17 13:09:11,2018-10-19 15:03:20
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/937,https://api.github.com/repos/hyperledger/burrow/issues/937,Fix issue with burrow killing,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-10-16 09:32:59,2018-10-16 09:37:50
burrow,phymbert,https://github.com/hyperledger/burrow/pull/936,https://api.github.com/repos/hyperledger/burrow/issues/936,[BIP] BIP2: Identify Transaction,"Initially discussed on Hyperledger Chat, Burrow Contributors channel

Address #933

Signed-off-by: phymbert <pierrick.hymbert@gmail.com>",closed,True,2018-10-09 21:11:00,2018-10-29 13:01:23
burrow,phymbert,https://github.com/hyperledger/burrow/pull/935,https://api.github.com/repos/hyperledger/burrow/issues/935,[docs] Introduce the Burrow Improvment Proposals (BIPs),"Heavily derived from [Ethereum's EIP1]

Signed-off-by: phymbert <pierrick.hymbert@gmail.com>",closed,True,2018-10-09 20:14:32,2018-10-11 18:18:59
burrow,phymbert,https://github.com/hyperledger/burrow/pull/934,https://api.github.com/repos/hyperledger/burrow/issues/934,[docs] Improve seed mode quick start,"Add precision on seed mode from @silasdavis.
Fix wrong config for validator #3. Configure a non-seed-mode as seed example.

Solidity highlight syntax in docs smart contract example.

Signed-off-by: phymbert <pierrick.hymbert@gmail.com>",closed,True,2018-10-09 18:31:35,2018-10-09 21:01:46
burrow,compleatang,https://github.com/hyperledger/burrow/issues/933,https://api.github.com/repos/hyperledger/burrow/issues/933,[governance] Expose network setting to require automatically register validators in Registry,"This is expected for the Agreements Network, but not for launch. The Network's validator pool should be relatively static. We should also have a defined space for registering these validators. Once a validator has agreed to the validators TOS then they should next register in nameReg their details. 

The data type envisioned is as follows:

```json
{
  ""name"": ""validator/$VALIDATOR_ADDRESS"",
  ""value"":
  {
    ""moniker"": ""$VALIDATOR_MONIKER"",
    ""email"": ""$VALIDATOR_EMAIL"",
    ""nodeKey"": ""$VALIDATOR_NODE_KEY"",
    ""pubKey"": ""$VALIDATOR_PUB_KEY""
  }
}
```",closed,False,2018-10-08 21:16:54,2018-12-05 12:26:28
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/932,https://api.github.com/repos/hyperledger/burrow/issues/932,Allow reading abi from abi file or bin file and merging of abis,"This makes handling of abis simpler in vent.

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2018-10-08 10:19:06,2018-10-08 11:52:14
burrow,phymbert,https://github.com/hyperledger/burrow/pull/931,https://api.github.com/repos/hyperledger/burrow/issues/931,"[docs] Updating docs with multiple validators config, initialize docs folder structure","Hello, this PR to introduce documentation quick start and initiate documentation movement.

I took the liberty to move some part of the README.md to the docs folder (install, quick config and logging). Tell me if I have to revert.

I have also tried to add some goodies on the main page, maybe adding Line Of Code is not pertinent when dependencies are vendoring.

Move quick start steps in main README.md to docs folder.

Signed-off-by: phymbert <pierrick.hymbert@gmail.com>",closed,True,2018-10-05 19:30:57,2018-10-08 21:19:57
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/930,https://api.github.com/repos/hyperledger/burrow/issues/930,Record event name and allow fast lookup on eventid,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-10-05 14:38:34,2018-10-05 15:34:47
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/929,https://api.github.com/repos/hyperledger/burrow/issues/929,STATICCALL,Provides EVM functionality for the `0xfa` opcode (#594) by way of a new vm flag `inStaticCall` to enforce read-only calls at runtime. This also contains unit tests for all state changing operations as defined in the [proposal](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-214.md).,closed,True,2018-10-05 10:07:50,2018-10-20 14:25:51
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/928,https://api.github.com/repos/hyperledger/burrow/issues/928,abi: Ensure event signature ID is available as EventID member,"When reading the abi, calculate the signature ID and add test cases.

This is done so we can select the correct event abi based on event
signature id which is passed as log.Topics[0] as long the the event
is not declared anonymous.

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2018-10-05 09:35:33,2018-10-05 09:47:57
burrow,phymbert,https://github.com/hyperledger/burrow/pull/927,https://api.github.com/repos/hyperledger/burrow/issues/927,[consensus] Expose Tendermint config CreateEmptyBlocks and CreateEmptyBlocksInterval,"fix #923

Signed-off-by: phymbert <pierrick.hymbert@gmail.com>",closed,True,2018-10-05 09:28:56,2018-10-17 15:22:02
burrow,phymbert,https://github.com/hyperledger/burrow/pull/926,https://api.github.com/repos/hyperledger/burrow/issues/926,"[EVM] dynamically allocate stack depth, enforce call stack depth similarly","fix #386 

Signed-off-by: phymbert <pierrick.hymbert@gmail.com>",closed,True,2018-10-04 15:12:35,2018-10-16 10:52:22
burrow,gregdhill,https://github.com/hyperledger/burrow/pull/925,https://api.github.com/repos/hyperledger/burrow/issues/925,implement staticcall,"#594 

Signed-off-by: greg <greg.hill@monax.io>",closed,True,2018-10-02 14:38:37,2018-10-03 13:33:44
burrow,phymbert,https://github.com/hyperledger/burrow/pull/924,https://api.github.com/repos/hyperledger/burrow/issues/924,[consensus] Authorized only node sync / Peers filter support,"Ability to lock down a network syncing with unauthorized peers. Currently any node that can connect to the network will begin syncing and be able to pull the state. However, for a lot of use cases this is not desired and what is more desired is a network setup where validators only sync with validators/fullNodes that have been authorized.

Designed to support static configuration or dynamic peers ids/addresses provided at peer handkshaking time.

fix #669",closed,True,2018-10-01 19:32:59,2018-10-03 13:49:42
burrow,phymbert,https://github.com/hyperledger/burrow/issues/923,https://api.github.com/repos/hyperledger/burrow/issues/923,[consensus] Expose Tendermint config CreateEmptyBlocks and CreateEmptyBlocksInterval,"It should be possible to disable empty block and/or set empty block creation interval by burrow config:

```toml
[Tendermint]
  CreateEmptyBlocks = false
```",closed,False,2018-09-29 12:00:33,2018-10-17 15:22:02
burrow,phymbert,https://github.com/hyperledger/burrow/pull/922,https://api.github.com/repos/hyperledger/burrow/issues/922,[core] Expose kernel Transactor as public field,"Expose kernel Transactor as other interfaces (State, Node, Blockchain) to allow programmatic extension of the Kernel by other projects

fix #921 

Signed-off-by: phymbert <pierrick.hymbert@gmail.com>",closed,True,2018-09-29 07:02:21,2018-10-15 17:22:19
burrow,phymbert,https://github.com/hyperledger/burrow/issues/921,https://api.github.com/repos/hyperledger/burrow/issues/921,[core] Expose kernel.Transactor as public field,"## Feature request

- [ ] `burrow version:` 0.22.0
- [ ] `what you expected to happen:` Send transaction in Burrow without exposing GRPC Interface
- [ ] `what actually happened:` Not possible to access kernel.Transactor

It would be useful to have access to kernel transactor to access Burrow directly from code without exposing any grpc port - keeping in mind the idea of Burrow as a Module.

## Example:
```go
type Kernel struct {
...
	State      *execution.State
	Blockchain *bcm.Blockchain
	Transactor *execution.Transactor // Execution transactor
...
}

tx := &payload.SendTx{...}
kernel.Transactor .BroadcastTxSync(context.Background(), txEnv)
txEnv := txs.Enclose(chainId, tx)
txEnv, _ := transactor.SignTx(txEnv)
transactor.BroadcastTxSync(context.Background(), txEnv)
```

If you are ok with this idea, I may submit a PR.

Thank you all contributors for your great work on Burrow 👍 ",closed,False,2018-09-25 19:35:08,2018-10-15 17:22:19
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/920,https://api.github.com/repos/hyperledger/burrow/issues/920,Do not open connection for each meta job,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-09-25 14:00:07,2018-09-26 11:48:12
burrow,anume1234,https://github.com/hyperledger/burrow/issues/919,https://api.github.com/repos/hyperledger/burrow/issues/919,[question] chain connection error,"
- [ ] `burrow version` (docker image tag or branch if built from source):- 0.21.0
[ ] `monax version` (if applicable) 
- [ ] `go version` (if applicable)g 1.11fi
- [ ] `docker version` (if applicable) 18.06.1-ce
- [ ] operating system details (osx/windows/linux) Ubuntu 16.04 64-bit
- [ ] burrow deploy --address=F71831847564B7008AD30DD56336D9C42787CF63
- [ ] could not connect to server
gave error as following:
rpc error: code = Unavailable desc = all SubConns are in TransientFailure, latest connection error: connection error: desc = ""transport: Error while dialing dial tcp 127.0.0.1:10997: connect: connection refused""




",closed,False,2018-09-23 09:38:53,2018-10-09 21:38:20
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/918,https://api.github.com/repos/hyperledger/burrow/issues/918,Merge for v0.22.0,,closed,True,2018-09-21 16:45:32,2018-09-21 16:52:50
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/917,https://api.github.com/repos/hyperledger/burrow/issues/917,Tm0.24,,closed,True,2018-09-20 21:17:34,2018-09-24 09:39:01
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/916,https://api.github.com/repos/hyperledger/burrow/issues/916,"An empty bytes32 literal can be written as """" or 0",Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-09-18 12:20:33,2018-09-19 13:39:29
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/915,https://api.github.com/repos/hyperledger/burrow/issues/915,nil pointer exception when name does not exist,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-09-17 16:06:34,2018-09-17 16:13:02
burrow,phymbert,https://github.com/hyperledger/burrow/pull/914,https://api.github.com/repos/hyperledger/burrow/issues/914,Minor typo fix in error message when account address is not found,Signed-off-by: phymbert <pierrick.hymbert@gmail.com>,closed,True,2018-09-16 09:34:37,2018-09-17 14:06:19
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/913,https://api.github.com/repos/hyperledger/burrow/issues/913,Reduce the number of concurrent solc's we run,"This is causing file systems errors on Mac.

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2018-09-14 12:34:01,2018-09-14 12:38:33
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/912,https://api.github.com/repos/hyperledger/burrow/issues/912,Refactor state into refs and tree.,"This prepares the way for various state manipulations and introduces a top-level storage package that takes makes some steps towards Cosmos SDK compatibility. Changes included:

- `Prefix` and `KeyFormat` types for handling prefixed lexicographic keys consistently
- A `CacheDB` that wraps all changes within a block into a single DB transaction - i.e. Batch
- A separate 'tree' and 'refs' storage in state. The former describes those values that contribute to the state hash and the latter does not - this gives us more latitude in disabling, for example, block storage or running nodes that opt to store somewhat different derived data whilst agreeing the the core account state.
- Upgrade IAVL dependency to version including: https://github.com/tendermint/iavl/pull/107 

Some changes that may follow in a future PR:

- Content address account code for some deduplication
- Content address blocks to allow their hash to be stored in main tree for consistency (not sure about this one)
- Make block storage configurable
- Consider using a Trie implementation in various places including caches for some reduced string -> []byte copying.
 ",closed,True,2018-09-14 10:33:10,2019-01-04 11:42:14
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/911,https://api.github.com/repos/hyperledger/burrow/issues/911,Better support revert with no reason,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-09-12 16:21:00,2018-09-12 17:01:46
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/910,https://api.github.com/repos/hyperledger/burrow/issues/910,Bigint,,closed,True,2018-09-12 12:27:15,2018-09-12 12:44:29
burrow,knkski,https://github.com/hyperledger/burrow/issues/909,https://api.github.com/repos/hyperledger/burrow/issues/909,[EVM] BLOCKHASH opcode unimplemented,"- `burrow version`: master
- `go version`: 1.10
- what you expected to happen: To be able to use the `BLOCKHASH` opcode in Seth contracts
- what actually happened: The `BLOCKHASH` opcode is currently a no-op
- steps to reproduction: See vendored files in https://github.com/hyperledger/sawtooth-seth/pull/73

It would be useful to allow implementing the `BLOCKHASH` opcode in Burrow, as Seth provides this functionality (see https://github.com/hyperledger/sawtooth-seth/commit/b5475d45b2a4982fd83df1c7a572c284be65cf19 for where it was introduced to the vendored version of Burrow). The above-mentioned PR un-vendorizes Burrow, but runs into the issue of Burrow not allowing a way to call `GetBlockHash`.

The PR fixes this by overwriting bits of Burrow in the Dockerfile to introduce a `BlockHashGetter` interface used by `Reader`, and adding no-op implementations on relevant structs. This is a hack however, and should be added in Burrow proper. Is this something that could be added to Burrow?",closed,False,2018-09-11 21:29:51,2019-01-31 10:16:06
burrow,knkski,https://github.com/hyperledger/burrow/issues/908,https://api.github.com/repos/hyperledger/burrow/issues/908,[State] Burrow panics without global permissions address,"Please include in your bug report:

- `burrow version`: master
- `go version`: 1.10
- what you expected to happen: Burrow to handle the global permissions address not existing
- what actually happened: Burrow panicked without the global permission step
- steps to reproduction: Run the tests in this PR: https://github.com/hyperledger/sawtooth-seth/pull/73

The panic in question:

```go
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x38 pc=0x9b9cd1]

goroutine 20 [running]:
github.com/hyperledger/burrow/acm/state.GlobalAccountPermissions(0x7f9fbdc30230, 0xc4201b81b8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)
	/project/sawtooth-seth/processor/src/github.com/hyperledger/burrow/acm/state/state.go:122 +0x91
github.com/hyperledger/burrow/execution/evm.HasPermission(0xd8c260, 0xc4201b81b8, 0xd8d160, 0xc4201b81d0, 0x8, 0xc4201b81c8)
	/project/sawtooth-seth/processor/src/github.com/hyperledger/burrow/execution/evm/vm.go:108 +0xee
seth_tp/handler.CreateContractAccount(0xc4201c1590, 0xc4201cd400, 0xc4201b81b8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)
	/project/sawtooth-seth/processor/src/seth_tp/handler/transaction_handlers.go:245 +0x3f3
seth_tp/handler.(*BurrowEVMHandler).Apply(0x13980b0, 0xc4201e4ae0, 0xc4201bff00, 0xc4201c76c0, 0xd8a4e0)
	/project/sawtooth-seth/processor/src/seth_tp/handler/handler.go:110 +0x3ef
github.com/hyperledger/sawtooth-sdk-go/processor.worker(0xc4201beb80, 0xbdda48, 0x10, 0xc4201e4720, 0xc4202001c0, 0xc4201b6660, 0x1, 0x1)
	/project/sawtooth-seth/processor/src/github.com/hyperledger/sawtooth-sdk-go/processor/worker.go:67 +0x340
created by github.com/hyperledger/sawtooth-sdk-go/processor.(*TransactionProcessor).start
	/project/sawtooth-seth/processor/src/github.com/hyperledger/sawtooth-sdk-go/processor/processor.go:140 +0x4b0
```

The unit tests for Seth don't set up the global permissions account, which breaks Burrow. The version we were using (0.17) worked without it set up. The unit tests work with this diff applied:

```diff
115c115,123
< 	return GlobalPermissionsAccount(getter).Permissions()
---
>
> 	global := GlobalPermissionsAccount(getter)
> 	if global == nil {
> 		return permission.AccountPermissions{
> 			Roles: []string{},
> 		}
> 	}
>
> 	return global.Permissions()
```

Would it be possible to have this or a similar fix applied to Burrow to allow running without the global permissions account set up?",open,False,2018-09-11 21:14:04,2018-12-05 12:32:20
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/907,https://api.github.com/repos/hyperledger/burrow/issues/907,Fix abi decoding of bytes32,"Note that any indexed string or array will be stored as a hash, so
we need to make that clear. The new Hashed field marks that.

We might want to store strings in bytes32 so that it does not get
hashed. If this is the case then use code similar to the test
TestEventEmitterBytes32isString.

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2018-09-10 14:02:52,2018-09-10 14:16:06
burrow,compleatang,https://github.com/hyperledger/burrow/pull/906,https://api.github.com/repos/hyperledger/burrow/issues/906,Update README.md,"fix install burrow in readme

Signed-off-by: Casey Kuhlman <casey@monax.io>",closed,True,2018-09-05 12:33:14,2018-11-09 16:40:41
burrow,GoodFaithParadigm8,https://github.com/hyperledger/burrow/issues/905,https://api.github.com/repos/hyperledger/burrow/issues/905,[ Bug ] SIGILL illegal instruction err 0C2 privileged operation error running Burrow ,"-  0.21.0  `burrow version` 
-  go1.10.2   `go version` 
-  linux/amd64 Ubuntu 16.04LTS operating system details 

### What you expected to happen
Build burrow binary and execute to generate burrow.toml and proceed.
### What actually happened
Binary was built and installed, when executed received a SIGILL illegal instruction err 0C2 privileged operation error
###  Steps to reproduction

1. make build_burrow
2. make install_burrow
3. burrow spec -p1 -f1 | burrow configure -s- > burrow.toml

```
burrow spec -p1 -f1 | burrow configure -s- > burrow.toml
SIGILL: illegal instruction
PC=0x735e2e m=0 sigcode=2

goroutine 1 [running, locked to thread]:
< ... > 

SIGILL: illegal instruction
PC=0x735e2e m=0 sigcode=2

< ... >

rax    0xc420245c58
rbx    0x4
rcx    0x14
rdx    0x179ce40
rdi    0xc4207e6030
rsi    0xc420245c58
rbp    0xc420245b48
rsp    0xc420245b18
r8     0x1
r9     0x0
r10    0xc4207e6030
r11    0x1
r12    0xffffffffffffffff
r13    0x2
r14    0x1
r15    0xaa
rip    0x735e2e
rflags 0x10246
cs     0x33
fs     0x0
gs     0x0

```

",closed,False,2018-09-04 15:49:51,2018-11-09 10:13:48
burrow,puneetverma05,https://github.com/hyperledger/burrow/pull/904,https://api.github.com/repos/hyperledger/burrow/issues/904,Update command name | README.md,UPDATE: command name 'serve' to 'start'.,closed,True,2018-09-04 08:25:47,2018-09-04 11:34:43
burrow,puneetverma05,https://github.com/hyperledger/burrow/pull/903,https://api.github.com/repos/hyperledger/burrow/issues/903,Update command name | README.md,"UPDATE: command name 'serve' to 'start'.
Severity: Low
Signed-off-by: Puneet Verma <puneet@saanvis.com>",closed,True,2018-09-04 08:12:04,2018-09-04 08:21:01
burrow,puneetverma05,https://github.com/hyperledger/burrow/pull/902,https://api.github.com/repos/hyperledger/burrow/issues/902,Update command name | README.md,"UPDATE: command name 'serve' to 'start'.
Severity: Low
Signed-off-by: Puneet Verma <puneet@saanvis.com>",closed,True,2018-09-04 07:54:00,2018-09-04 08:04:33
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/901,https://api.github.com/repos/hyperledger/burrow/issues/901,burrow deploy should show revert message and fail job,"```
   *****Executing Job*****
                    
Job Name                                    => doRevert

                                           
transaction reverted                        Revert Message => arbeidsongeschiktheidsverzekeringsmaatschappij
Call error: Error 16: Execution reverted
```",closed,True,2018-08-31 11:22:25,2018-08-31 12:20:33
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/900,https://api.github.com/repos/hyperledger/burrow/issues/900,Minor cleanup of execution tests,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-08-29 14:38:58,2018-08-29 15:00:56
burrow,seanyoung,https://github.com/hyperledger/burrow/issues/899,https://api.github.com/repos/hyperledger/burrow/issues/899,[Keys] Mempool signing can sign using validator key,"When using mempool signing, if the validator address is used, then burrow will happily sign the transaction using the validator key. This is not good.

Also we should consider whether mempool signing should be off by default.",open,False,2018-08-28 15:26:42,2018-12-05 12:28:57
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/898,https://api.github.com/repos/hyperledger/burrow/issues/898,"Fix solidity warnings, make tests use abi and add event/revert abi functionality",Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-08-28 11:56:32,2018-08-30 16:19:08
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/897,https://api.github.com/repos/hyperledger/burrow/issues/897,Limit the number of concurrent solidity compilers,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-08-24 17:36:26,2018-08-27 09:34:49
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/896,https://api.github.com/repos/hyperledger/burrow/issues/896,Set storage to 0 does not work,"fixes #847 

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2018-08-24 12:29:18,2018-08-24 18:19:39
burrow,yihua1995,https://github.com/hyperledger/burrow/issues/895,https://api.github.com/repos/hyperledger/burrow/issues/895,[EVM]The use of memory in evm,"I notice that the evm initial a memory space for using at the begining of the call function. However, I think that the memory should be a space which is prepared for the contract to use, so this should be initial at the begining of the Call function and the call function just using the same space which is allocated at the begining of the Call function.
Please tell me if my idea is wrong.
Much thanks.",closed,False,2018-08-24 09:05:32,2018-08-24 11:04:36
burrow,compleatang,https://github.com/hyperledger/burrow/pull/894,https://api.github.com/repos/hyperledger/burrow/issues/894,fix reference to local_version to properly source,Signed-off-by: Casey Kuhlman <casey@monax.io>,closed,True,2018-08-23 13:51:54,2019-02-06 12:14:31
burrow,compleatang,https://github.com/hyperledger/burrow/pull/893,https://api.github.com/repos/hyperledger/burrow/issues/893,fix docker tagging,,closed,True,2018-08-23 13:32:35,2018-08-23 13:42:23
burrow,compleatang,https://github.com/hyperledger/burrow/pull/892,https://api.github.com/repos/hyperledger/burrow/issues/892,fixup docker login to use dockers established paradigm and login to quay,,closed,True,2018-08-23 13:08:17,2018-08-23 13:14:21
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/891,https://api.github.com/repos/hyperledger/burrow/issues/891,Fix compiling solidity from a different directory,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-08-23 12:52:39,2018-08-23 12:56:48
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/890,https://api.github.com/repos/hyperledger/burrow/issues/890,Early build,,closed,True,2018-08-22 15:27:28,2018-08-23 09:36:54
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/889,https://api.github.com/repos/hyperledger/burrow/issues/889,"Update dump to use amino, fix dev release, and stop non-deterministic GovTx execution","The biggest issue this addresses is using `KeyClient` -  which is entirely node depedent to change the outcome of a `GovTx` -- oops.

Also cleans up some stuff, improves logging, fixes dev release.",closed,True,2018-08-22 11:09:26,2018-08-23 16:39:30
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/888,https://api.github.com/repos/hyperledger/burrow/issues/888,Fix docker login,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-08-21 12:13:13,2018-08-21 12:18:48
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/887,https://api.github.com/repos/hyperledger/burrow/issues/887,Try to release 0.21.0 again,,closed,True,2018-08-21 11:47:31,2018-08-21 11:55:59
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/886,https://api.github.com/repos/hyperledger/burrow/issues/886,Fix validation messages and circleci,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-08-21 11:19:52,2018-08-21 11:47:10
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/885,https://api.github.com/repos/hyperledger/burrow/issues/885,Upgrade to Tendermint 0.23.0,,closed,True,2018-08-21 10:19:44,2019-02-18 19:02:13
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/884,https://api.github.com/repos/hyperledger/burrow/issues/884,Rename RPC/TM and add safety to metrics,Supercedes #881 ,closed,True,2018-08-21 08:12:00,2018-08-21 08:18:23
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/883,https://api.github.com/repos/hyperledger/burrow/issues/883,Sort out docker release,,closed,True,2018-08-20 20:30:56,2018-08-21 08:10:28
burrow,compleatang,https://github.com/hyperledger/burrow/pull/882,https://api.github.com/repos/hyperledger/burrow/issues/882,add proper docker labels per container label schema; s/monax/burrow/g on users,,closed,True,2018-08-20 14:41:30,2018-08-22 08:15:20
burrow,compleatang,https://github.com/hyperledger/burrow/pull/881,https://api.github.com/repos/hyperledger/burrow/issues/881,fix panic in metrics collector when no blocks have been formed in col…,…lection window,closed,True,2018-08-20 14:23:57,2018-08-22 08:15:35
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/880,https://api.github.com/repos/hyperledger/burrow/issues/880,Changes to burrow deploy to generate devdocs,,closed,True,2018-08-20 12:27:09,2018-08-20 20:36:07
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/879,https://api.github.com/repos/hyperledger/burrow/issues/879,Release 0.21.0,,closed,True,2018-08-20 11:35:47,2018-08-21 11:23:09
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/878,https://api.github.com/repos/hyperledger/burrow/issues/878,Upgrade IAVL  for 0.20.2 release,"Previous versions of IAVL not only load previous version root references but also every node from disk. This ends up being a costly (and unnecessary) process that causes chain load times from a few weeks of state to take tens of minutes.

Updating to IAVL 0.10.0 fixes this by providing true lazy loading of roots - as well as some nice features around immutable trees and better performance with old verions. ",closed,True,2018-08-20 10:59:45,2018-08-20 11:34:39
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/877,https://api.github.com/repos/hyperledger/burrow/issues/877,Sync up release with master and don't push dev images,Currently have no way to delete image from Hyperledger repo so stop pushing dev ones.,closed,True,2018-08-17 15:35:22,2018-09-05 13:55:05
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/876,https://api.github.com/repos/hyperledger/burrow/issues/876,Remove docker push from release,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-08-17 13:46:42,2018-08-17 13:46:51
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/875,https://api.github.com/repos/hyperledger/burrow/issues/875,Missing brackets on release,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-08-17 13:17:39,2018-08-17 13:17:48
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/874,https://api.github.com/repos/hyperledger/burrow/issues/874,Master,,closed,True,2018-08-17 13:17:21,2018-08-17 13:18:07
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/873,https://api.github.com/repos/hyperledger/burrow/issues/873,Release,,closed,True,2018-08-17 13:17:13,2018-08-17 13:18:18
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/872,https://api.github.com/repos/hyperledger/burrow/issues/872,Release 0.20.1,,closed,True,2018-08-17 13:05:13,2018-08-17 13:05:24
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/871,https://api.github.com/repos/hyperledger/burrow/issues/871,Missed checkout for release,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-08-17 13:04:41,2018-08-17 13:04:49
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/870,https://api.github.com/repos/hyperledger/burrow/issues/870,Release 0.20.1,,closed,True,2018-08-17 12:46:12,2018-08-17 12:55:26
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/869,https://api.github.com/repos/hyperledger/burrow/issues/869,Added external-address option,"Also made various options available from configure and start.

Plus finalise for 0.20.1 release today.
",closed,True,2018-08-17 12:08:37,2018-08-17 12:47:16
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/868,https://api.github.com/repos/hyperledger/burrow/issues/868,Prepare 0.20.1 release,,closed,True,2018-08-16 21:04:20,2018-08-16 21:21:35
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/867,https://api.github.com/repos/hyperledger/burrow/issues/867,Use hyperledger/burrow and release binaries using goreleaser,,closed,True,2018-08-16 15:10:04,2018-08-16 17:50:52
burrow,compleatang,https://github.com/hyperledger/burrow/issues/866,https://api.github.com/repos/hyperledger/burrow/issues/866,[Logging] Vent and Deploy should use `burrow/logging`,"- [ ] remove vent custom levelled logger 
- [x] remove logrus from deploy packages and use burrow's logger package.
- [x] TBD whether to remove the formatter (which is suitable for deploy's purposes) or not.",open,False,2018-08-16 13:55:21,2019-04-04 09:03:16
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/865,https://api.github.com/repos/hyperledger/burrow/issues/865,[rpc] Rename 'tm' to 'info' in burrow config,Currently we still have the rpc/tm config section for compatibility,closed,False,2018-08-16 13:14:02,2018-08-24 16:27:06
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/864,https://api.github.com/repos/hyperledger/burrow/issues/864,Make simulated call use same path as call_context,"This means revert can be handled correctly by JS - should fix: https://github.com/monax/bosmarmot/pull/120 

Also remove bos integration test and just test burrow-js

also fixes #483 ",closed,True,2018-08-16 12:35:53,2018-08-16 13:12:25
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/863,https://api.github.com/repos/hyperledger/burrow/issues/863,Upgrade Tendermint to 0.22.8,"Also changed signature to carry around its `CurveType`

Standardised on `PublicKey.PublicKey` `PrivateKey.PrivateKey` `Signature.Signature` for the field containing the raw bytes. It's consistent across types and once you get over the stutter it makes sense. This did stop me from having a `PublicKey()` function on `PublicKey` which in turned stopped my from being able to treat it as an `Addressable` which I was mostly doing as a convenience in the validator package. I've reworked that to accept `PublicKey` directly but iterate over `Addressable` which achieves the same memoisation.

",closed,True,2018-08-16 10:50:13,2018-08-16 12:38:11
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/862,https://api.github.com/repos/hyperledger/burrow/issues/862,move snatives to burrow executable,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-08-16 10:39:58,2018-08-16 16:26:48
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/861,https://api.github.com/repos/hyperledger/burrow/issues/861,Exclude events from TxExecutions that were exceptions,,closed,True,2018-08-15 21:58:39,2018-08-16 09:35:53
burrow,fulldecent,https://github.com/hyperledger/burrow/pull/860,https://api.github.com/repos/hyperledger/burrow/issues/860,Add test 49 returndatacopy,https://github.com/hyperledger/burrow/pull/767#issuecomment-413200966,closed,True,2018-08-15 20:31:08,2018-08-17 06:04:38
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/859,https://api.github.com/repos/hyperledger/burrow/issues/859,Refactor rpc/tm to rpcinfo changing various names.,"Add more useful information to /status /network and /consensus
Blockchain now records when it last committed a block as well as the
block time itself. Status can be used for a liveness probed with
block_seen_time_within param and block_time_within  for readiness

fixes #809 ",closed,True,2018-08-15 17:17:39,2018-08-15 18:03:24
burrow,compleatang,https://github.com/hyperledger/burrow/issues/858,https://api.github.com/repos/hyperledger/burrow/issues/858,[State] Register and expose ABIs via inbuilt chain state/storage,"a new field should be added to the `deploy` job which should be a boolean titled `register` (or some synonym of that) -- it should default to `false`.

the result of `register: true` should register the ABI of a contract in the name registry of burrow with the following convention in pseudocode:

```
name: abi.$(sha256(bytecode)[:40]
value: $(json.Stringify(ABI))
```
",open,False,2018-08-15 10:58:55,2018-12-12 08:02:01
burrow,compleatang,https://github.com/hyperledger/burrow/issues/857,https://api.github.com/repos/hyperledger/burrow/issues/857,[tests] refactor test contracts to remove warnings,"Example:

```
Warning Generated during Contract Compilation
                                      Warning=ef50c3be35f6f68d9c4d26fbfeea0edd493bc8971de6e1ef2bd9ba87411bd1e3.sol:6:3: Warning: No visibility specified. Defaulting to ""public"". 
  function set(uint x) {
  ^ (Relevant source part starts here and spans across multiple lines).
ef50c3be35f6f68d9c4d26fbfeea0edd493bc8971de6e1ef2bd9ba87411bd1e3.sol:10:3: Warning: No visibility specified. Defaulting to ""public"". 
  function get() constant returns (uint retVal) {
  ^ (Relevant source part starts here and spans across multiple lines).
ef50c3be35f6f68d9c4d26fbfeea0edd493bc8971de6e1ef2bd9ba87411bd1e3.sol:17:2: Warning: No visibility specified. Defaulting to ""public"". 
	function create() returns (address GSAddr) {
 ^ (Relevant source part starts here and spans across multiple lines).
ef50c3be35f6f68d9c4d26fbfeea0edd493bc8971de6e1ef2bd9ba87411bd1e3.sol:22:2: Warning: No visibility specified. Defaulting to ""public"". 
	function getLast() returns (address GSAddr) {
 ^ (Relevant source part starts here and spans across multiple lines).
ef50c3be35f6f68d9c4d26fbfeea0edd493bc8971de6e1ef2bd9ba87411bd1e3.sol:22:2: Warning: Function state mutability can be restricted to view
	function getLast() returns (address GSAddr) {
 ^ (Relevant source part starts here and spans across multiple lines).
```

assertion still succeeds so NBD (for now)",closed,False,2018-08-15 10:57:34,2018-08-30 16:32:59
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/856,https://api.github.com/repos/hyperledger/burrow/issues/856,Update relic and add dates,"I updated relic to follow some recommendations from https://keepachangelog.com/en/1.0.0/: https://github.com/monax/relic/compare/v1.1.0...v2.0.0

This updates to that version adding some dates and github compare links between our versions. Going forward we can try and follow the keepachangelog style with the same headers of:

- Changed
- Deprecated
- Added
- Removed
- Fixed

This will help those running validators to keep up to date",closed,True,2018-08-15 09:46:50,2018-08-15 09:52:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/855,https://api.github.com/repos/hyperledger/burrow/issues/855,Support log capture dumping and stop keys writing to home dir,"This builds on the existing capture logger and logging signals to enable the ability to dump logs or when asked for by the appropriate unix signal. We have:

- `SIGUSR1` -> `SyncSignal` -> causes file and `CaptureLogger`s to flush and any stream loggers with `Sync() error`-able writers to sync
- `SIGHUP` -> `ReloadSignal` -> causes `FileLogger` to reload file (supporting log rotation)

Example configuration can be generated with:
```go
burrow configure -l capture,hello,10000,file,/dev/termination-log,json,top,include-any,info,stderr,json
```

Also adds a bit of logging and fixes a couple of potential logging race conditions.",closed,True,2018-08-14 14:37:19,2018-08-14 16:22:18
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/854,https://api.github.com/repos/hyperledger/burrow/issues/854,Move to new abi,Note that the breaking change is what causes the bosmarmot test to fail.,closed,True,2018-08-14 13:48:41,2018-08-15 18:14:47
burrow,miguelmartinezinf,https://github.com/hyperledger/burrow/issues/853,https://api.github.com/repos/hyperledger/burrow/issues/853,[question] Burrow server gets blocked when using more than 1 validator,"Please include in your bug report:

- [ ] `monax version` (if applicable)
- [ ] `go version` 1.10.3
- [ ] `burrow version` (docker image tag or branch if built from source)
- [ ] `OS` ubuntu 16.04

## Expected Behavior
The burrow server should run and start adding blocks to the blockchain, increasing the height number.

## Actual Behavior 
When I try to start burrow server using this command `burrow start -v 0` the log shows how the server gets blocked, showing the following error (full log on `burrow.log`):

> {""caller"":""reactor.go:253"",""component"":""Tendermint"",""inbound"":0,""log_channel"":""Trace"",""message"":""Consensus ticker"",""module"":""blockchain"",""numPending"":1000,""outbound"":0,""run_id"":""c3e0997a-9ef6-11e8-83c2-62c3cbe0a8a3"",""scope"":""tendermint.NewNode"",""time"":""2018-08-13T12:45:44.061684388Z"",""total"":1000}
> {""caller"":""pool.go:167"",""component"":""Tendermint"",""log_channel"":""Trace"",""message"":""Blockpool has no peers"",""module"":""blockchain"",""run_id"":""c3e0997a-9ef6-11e8-83c2-62c3cbe0a8a3"",""scope"":""tendermint.NewNode"",""time"":""2018-08-13T12:45:44.062149982Z""}
> {""caller"":""reactor.go:253"",""component"":""Tendermint"",""inbound"":0,""log_channel"":""Trace"",""message"":""Consensus ticker"",""module"":""blockchain"",""numPending"":1000,""outbound"":0,""run_id"":""c3e0997a-9ef6-11e8-83c2-62c3cbe0a8a3"",""scope"":""tendermint.NewNode"",""time"":""2018-08-13T12:45:45.061588604Z"",""total"":1000}
> {""caller"":""pool.go:167"",""component"":""Tendermint"",""log_channel"":""Trace"",""message"":""Blockpool has no peers"",""module"":""blockchain"",""run_id"":""c3e0997a-9ef6-11e8-83c2-62c3cbe0a8a3"",""scope"":""tendermint.NewNode"",""time"":""2018-08-13T12:45:45.061963911Z""}

## Steps to Reproduce the Problem

  1. `burrow spec -f 1 -v 1 -p 1 >genesis-spec.json`
  2. `burrow configure -s genesis-spec.json >burrow.toml`
  3. `burrow start -v 0`

## Files

`burrow.toml` [https://pastebin.com/i25mSSFp](https://pastebin.com/i25mSSFp)
`genesis-spec.json` [https://pastebin.com/EEddmLZu](https://pastebin.com/EEddmLZu)
`burrow.log` [https://pastebin.com/MBaXGmD8](https://pastebin.com/MBaXGmD8)


Thanks in advance
",closed,False,2018-08-13 13:02:02,2018-10-09 21:08:17
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/852,https://api.github.com/repos/hyperledger/burrow/issues/852,Bos transplant,Move bos into burrow and rename to burrow deploy. Note that epm.yaml is also renamed to deploy.yaml.,closed,True,2018-08-09 12:31:40,2018-08-14 14:25:59
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/851,https://api.github.com/repos/hyperledger/burrow/issues/851,[rpc] Status needs to consider local time,"tm/status is used as our liveness and readiness probe. It compares current time with block time to determine if blocks have occurred within a window, but this gives the impression a node that is catching up is not live. Need to provide option to compare with 'last time block seen' as a local timestamp that is not persisted to state.",closed,False,2018-08-08 19:57:32,2018-08-16 13:11:35
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/850,https://api.github.com/repos/hyperledger/burrow/issues/850,[state] Prevent events from being fired from REVERTed txs,Currently the TxExecution has events sinked to it from a transaction that may be reverted. The TxExecution ends up in state and so `GetEvents` serves them to vent or other consumers. Either need to strip reverted events or not serve them,closed,False,2018-08-08 19:53:56,2018-10-31 10:27:07
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/849,https://api.github.com/repos/hyperledger/burrow/issues/849,"Add test for revert, return nested errors, and convert non-revert errors","to actual GRPC error returns (execepting REVERT errors)

Signed-off-by: Silas Davis <silas@monax.io>",closed,True,2018-08-07 14:57:41,2018-08-07 15:51:39
burrow,miguelmartinezinf,https://github.com/hyperledger/burrow/issues/848,https://api.github.com/repos/hyperledger/burrow/issues/848,Unable to test and deploy with bosmarmot over burrow,"Please include in your bug report:

- [ ] `burrow version` 0.20.1+commit.v0.18.0-202-gb6c40e46
- [ ] `bos version` 0.4.0+commit.9ba2079e
- [ ] `go version` 1.10.3
- [ ] `OS` ubuntu 16.04

I am following Getting Started tutorial of Bosmarmot (https://github.com/monax/bosmarmot/).

## Expected Behavior
The smart contract should be tested and deployed on the burrow currently running blockchain.

## Actual Behavior 
When I try to test and deploy the smart contract (I have an emp.yaml and a .sol in the same dir). So I execute`bos --address=C00EBA326E7E0E72C9E4A03AD0555D1496939601` and it fails, saying:

> invalid character 'E' looking for beginning of value
> Error compiling contracts: Language error: 
> invalid character 'E' looking for beginning of value

## Steps to Reproduce the Problem

  1. `burrow spec --participant-accounts=1 --full-accounts=1 > genesis-spec.json`
  2. `burrow configure --genesis-spec=genesis-spec.json > burrow.toml`
  3. `burrow start --validator-index=0 2>burrow.log &`
  4. `cd my_folder_with_epm_and_sol`
  5. `bos --address=C00EBA326E7E0E72C9E4A03AD0555D1496939601`

## Files

burrow.tml [https://pastebin.com/vNp6hEBf](https://pastebin.com/vNp6hEBf)
genesis-spec.json [https://pastebin.com/B0AjMwn5](https://pastebin.com/B0AjMwn5)
storage.sol (taken from the official example) [https://pastebin.com/mDbKSKSK](https://pastebin.com/mDbKSKSK)
epm.yaml (taken from the official example) [https://pastebin.com/ZDppzRdC](https://pastebin.com/ZDppzRdC)


Thanks in advance",closed,False,2018-08-06 09:33:24,2018-08-13 11:27:37
burrow,Luker501,https://github.com/hyperledger/burrow/issues/847,https://api.github.com/repos/hyperledger/burrow/issues/847,[evm] Cannot reset an int/uint to zero,"Please include in your bug report:

- `burrow version`: 0.20.1+commit.v0.18.0-186-g92dad94
- `go version`: 1.10.3 linux/amd64
- operating system details: Ubuntu 16.04.4 LTS
- what you expected to happen: to be able to reset a uint or an int to zero 
- what actually happened: I cannot get this to work via yaml or solidity.
- steps to reproduction:

I've modified the storage.sol and epm.yaml from [this tutorial](https://github.com/monax/bosmarmot) to show the issue. 

Firstly see the storageIssueWithZero.sol below. Note that I have added two functions (setIntToZero and setUintToZero) to set the int/uint to zero within the code:

```
pragma solidity ^0.4.20;

contract storageIssueWithZero {

  int private storedInt;
  uint private storedUint;

  function setInt(int x) public {
    storedInt = x;
  }

  function setIntToZero() public {
    storedInt = 0;
  }

  function getInt() constant public returns (int retInt) {
    return storedInt;
  }

  function setUint(uint x) public {
    storedUint = x;
  }

  function setUintToZero() public {
    storedUint = 0;
  }

  function getUint() constant public returns (uint retUint) {
    return storedUint;
  }

}
```

Now my yaml test file is as follows:

```
jobs:

- name: deployStorageK
  deploy:
    contract: storageIssueWithZero.sol

- name: makeSureDeployed
  assert:
    key: $deployStorageK
    relation: ne
    val: """"

#set Int to 5000
- name: setStorageBaseInt
  set:
    val: 50000

- name: setStorageInt
  call:
    destination: $deployStorageK
    function: setInt
    data: [$setStorageBaseInt]

- name: queryStorageInt
  query-contract:
    destination: $deployStorageK
    function: getInt

- name: assertStorageInt
  assert:
    key: $queryStorageInt
    relation: eq
    val: $setStorageBaseInt

#set Int to Zero using Yaml
- name: setStorageBaseInt2
  set:
    val: 0

- name: setStorageInt2
  call:
    destination: $deployStorageK
    function: setInt
    data: [$setStorageBaseInt2]

- name: queryStorageInt2
  query-contract:
    destination: $deployStorageK
    function: getInt

- name: assertStorageInt2
  assert:
    key: $queryStorageInt2
    relation: ne
    val: $setStorageBaseInt2

#set Int to Zero using solidity
- name: setStorageInt3
  call:
    destination: $deployStorageK
    function: setIntToZero
    data: 

- name: queryStorageInt3
  query-contract:
    destination: $deployStorageK
    function: getInt

- name: assertStorageInt3
  assert:
    key: $queryStorageInt3
    relation: ne
    val: 0

#set Int to another number
- name: setStorageBaseInt4
  set:
    val: 777

- name: setStorageInt4
  call:
    destination: $deployStorageK
    function: setInt
    data: [$setStorageBaseInt4]

- name: queryStorageInt4
  query-contract:
    destination: $deployStorageK
    function: getInt

- name: assertStorageInt4
  assert:
    key: $queryStorageInt4
    relation: eq
    val: $setStorageBaseInt4

#set Uint to 9999
- name: setStorageBaseUint
  set:
    val: 9999

- name: setStorageUint
  call:
    destination: $deployStorageK
    function: setUint
    data: [$setStorageBaseUint]

- name: queryStorageUint
  query-contract:
    destination: $deployStorageK
    function: getUint

- name: assertStorageUint
  assert:
    key: $queryStorageUint
    relation: eq
    val: $setStorageBaseUint

#set Uint to 0 using Yaml
- name: setStorageBaseUint2
  set:
    val: 0

- name: setStorageUint2
  call:
    destination: $deployStorageK
    function: setUint
    data: [$setStorageBaseUint2]

- name: queryStorageUint2
  query-contract:
    destination: $deployStorageK
    function: getUint

- name: assertStorageUint2
  assert:
    key: $queryStorageUint2
    relation: ne
    val: $setStorageBaseUint2

#set Uint to 0 using solidity
- name: setStorageUint3
  call:
    destination: $deployStorageK
    function: setUintToZero
    data: 

- name: queryStorageUint3
  query-contract:
    destination: $deployStorageK
    function: getUint

- name: assertStorageUint3
  assert:
    key: $queryStorageUint3
    relation: ne
    val: 0

#set Uint to another number
- name: setStorageBaseUint4
  set:
    val: 111

- name: setStorageUint4
  call:
    destination: $deployStorageK
    function: setUint
    data: [$setStorageBaseUint4]

- name: queryStorageUint4
  query-contract:
    destination: $deployStorageK
    function: getUint

- name: assertStorageUint4
  assert:
    key: $queryStorageUint4
    relation: eq
    val: $setStorageBaseUint4

```
I would expect assertStorageInt2, assertStorageInt3, assertStorageUint2 and assertStorageUint3 to FAIL but they pass, indicating that every time I attempted to reset an int/uint to zero it did not work. 

I am not having this issue on remix. Also I have tried a version of the yaml file with a wait attached to every call, but that did not work either.

Regards, 
",closed,False,2018-08-01 16:16:11,2018-08-24 18:19:39
burrow,Luker501,https://github.com/hyperledger/burrow/issues/846,https://api.github.com/repos/hyperledger/burrow/issues/846,Solidity file with an abstract function is undeployable,"- `burrow version`: 0.20.1+commit.v0.18.0-186-g92dad94
- `go version`: 1.10.3 linux/amd64
- operating system details (osx/windows/linux): Ubuntu 16.04.4 LTS
- what you expected to happen: A solidity smart contract with an abstract function to be deployable
- what actually happened:  The smart contract was not deployable
- steps to reproduction:

Following [this tutorial](https://github.com/monax/bosmarmot) the burrow chain is on, contract storage.sol has been deployed and the tests in the epm.yaml file have passed.

Next I created a basic solidity file with an abstract function in named AbstractContract.sol:

```
pragma solidity ^0.4.20;

contract AbstractContract {

  function getBool() public returns (bool retBool);

}
```

This contract has no compile errors according to remix.ethereum.org. But it does not deploy to the chain. I added the following in my epm.yaml file to check:

```
- name: deployAbstractContract
  deploy:
    contract: AbstractContract.sol

- name: makeSureDeployed1
  assert:
    key: $deployAbstractContract
    relation: ne
    val: """"
```

The above fails. But if I change the AbstractContract to the following, the above will succeed:

```
pragma solidity ^0.4.20;

contract AbstractContract {

  function getBool() public returns (bool retBool){
	return true;
  }

}
```	

  

 ",closed,False,2018-08-01 11:39:15,2018-08-28 09:25:06
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/845,https://api.github.com/repos/hyperledger/burrow/issues/845,"Return TxExecution when reverted error, fix logging non-errors",Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-07-30 17:04:34,2019-01-04 11:41:26
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/844,https://api.github.com/repos/hyperledger/burrow/issues/844,Fix keys import to match keys export,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-07-30 08:15:47,2018-07-30 13:04:59
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/843,https://api.github.com/repos/hyperledger/burrow/issues/843,Governance fixes and tweaks,"The biggest thing this addresses is the fact that sequence checking was omitted from `GovernanceContext` and as such there is no replay protection. In addressing this I've made it so that such an omission could not happen again by handling tx inputs and their sequence number generically at the `executor` rather than in each individual execution `Context`.

 This also reintroduces the lazy-loading/harvesting of public keys to associate with accounts as and when the chain receives txs signed by an account (and so first has access to its verifiable public key).",closed,True,2018-07-28 16:11:11,2018-07-30 14:36:28
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/842,https://api.github.com/repos/hyperledger/burrow/issues/842,Reintroduce public key setting and add protobuf for JS,,closed,True,2018-07-27 14:28:22,2018-07-27 14:42:31
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/841,https://api.github.com/repos/hyperledger/burrow/issues/841,Release lock earlier in BroadcastTxSync and support mempool signing in,"BroadcastTxAsync

Signed-off-by: Silas Davis <silas@monax.io>",closed,True,2018-07-24 22:49:29,2018-07-25 11:06:11
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/840,https://api.github.com/repos/hyperledger/burrow/issues/840,Slacken Resubscribe timeout for circle,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-07-24 13:04:44,2018-07-24 13:09:11
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/839,https://api.github.com/repos/hyperledger/burrow/issues/839,Release 0.20.0,,closed,True,2018-07-24 12:42:31,2018-07-24 12:56:21
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/838,https://api.github.com/repos/hyperledger/burrow/issues/838,Fix duplicated docs,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-07-24 12:41:51,2018-07-24 12:48:41
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/837,https://api.github.com/repos/hyperledger/burrow/issues/837,Prepare for 0.20.0 release,,closed,True,2018-07-24 11:47:11,2018-07-24 12:32:34
burrow,compleatang,https://github.com/hyperledger/burrow/pull/836,https://api.github.com/repos/hyperledger/burrow/issues/836,upgrade bos version used for integration tests,,closed,True,2018-07-24 09:12:13,2018-07-24 09:56:51
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/835,https://api.github.com/repos/hyperledger/burrow/issues/835,Fix various test flakes,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-07-24 08:59:14,2018-07-24 09:51:22
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/834,https://api.github.com/repos/hyperledger/burrow/issues/834,Tweaks for bos integration,"to QueryServer for use by both and others. Status now serves as
healthcheck with blockWithin parameter

Signed-off-by: Silas Davis <silas@monax.io>",closed,True,2018-07-23 14:40:30,2018-07-24 08:44:33
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/833,https://api.github.com/repos/hyperledger/burrow/issues/833,Check ChainID in Verify!,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-07-23 12:34:19,2018-07-23 12:40:05
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/832,https://api.github.com/repos/hyperledger/burrow/issues/832,Add 0.20.0 changelog,Signed-off-by: Sean Young <sean.young@monax.io>,closed,True,2018-07-23 12:26:40,2018-07-24 08:10:25
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/831,https://api.github.com/repos/hyperledger/burrow/issues/831,Remove redundant validator from SendTx,Also code errors and improve sequence number error and prevent overpayment in SendTx,closed,True,2018-07-20 09:29:09,2018-09-05 13:55:05
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/830,https://api.github.com/repos/hyperledger/burrow/issues/830,Implemented GovTx,"This adds support and test for a `GovTx` which allows fairly arbitrary updates to be made to accounts by accounts with the (previously unused) `Root` permission. Currently it simply allows any account with `Root` to make the changes but it should be a relatively modest extension to make this based on a multi-sig threshold, and a further extension to build governance voting. This allows us to start using the dynamics of changing accounts post genesis. It allows you to change in bulk (i.e. you can supply multiple account updates):

- Account power balance (i.e. Tendermint voting power)
- Account native balance
- Account permissions
- Account roles

To follow will be the ability to update account code (bulk deploy) making way for a mechanism for network upgrades.

Related changes also included are:

- Upgrade to Tendermint 0.22.4
- Added mutliple typed account balances (currently only `Native` and `Power` type are implemented and currently only on `TemplateAccount`, but may make it to `Account` model proper
- Validator `Set` and `Ring` objects for modelling validator changes and bounding flow of power to less than one third. `Ring` holds a sliding window of deltas and cumulative powers that can be used to calculate a variety of rolling averages of validator power and availability which will be needed for fee calculation. It also serves as a cache/accumulator for validator power changes and gives us a history of validator changes for some consistency checks against Tendermint (checks are made in the ABCI App)
- Validator history method added to rpcquery service 

The next change will include command line tooling for building declarative 'make my chain this way' transactions via an extension to `burrow spec` and a new CLI command for submitting transactions from the command line (including and particularly for `GovTx`).

The next iteration of the the governance execution will be to provide an 'online' multisig whereby parties can submit candidate `GovTx` transactions signed by themselves that are only executed when other parties choose to also sign them. This will need a pending transaction service probably on rpcgovernance.

We also need to layer policies around bonding and unbonding on top of `GovTx`.

",closed,True,2018-07-19 22:49:15,2018-07-23 12:16:56
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/829,https://api.github.com/repos/hyperledger/burrow/issues/829,"Massively enhanced GRPC services including NameReg, transaction index, blocks service","This PR has at its core an extension and refactoring of our GRPC services. There are three associated decisions that mean it has ended up as large as it is:

1. I have integrated gogoproto protobuf types tightly with many of our major types - this means everything eats the same dogfood internally as our RPC and gives us consistent models for most things
2. I have eliminate v0 completely and tm methods for events and broadcast - which entailed porting tests over to the new structure
3. I have stripped much of the event system complexity AND pulled in Tendermint's pubsub with a change to make it non-blocking

All of the RPC now runs off execution events called `BlockExecution` and `TxExecution` that mirror the Tendermint objects but contain the full execution trace as burrow sees it. These objects are meant to be self-describing and contain most data useful to querier. 

Rather than moving broken or redundant code I have tried to clean it up with the aim of making our breaking RPC changes all at once.",closed,True,2018-07-08 22:16:49,2018-09-05 13:55:05
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/828,https://api.github.com/repos/hyperledger/burrow/issues/828,Add new yaml function to burrow configure templating,"Now the the genesis spec can be generated as yaml, or yaml as a string.

<< yaml .Config >>

This would would generate the genesis spec as yaml; alternatively, it
can be string escaped by using the json function:

<< json (yaml .Config) >>

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2018-07-04 15:11:22,2018-07-08 22:07:28
burrow,compleatang,https://github.com/hyperledger/burrow/pull/827,https://api.github.com/repos/hyperledger/burrow/issues/827,move dockerfile,,closed,True,2018-07-02 22:37:25,2018-07-03 12:05:33
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/826,https://api.github.com/repos/hyperledger/burrow/issues/826,Provide ability to set value to transfer in Transact* methods,,closed,True,2018-07-02 11:18:44,2018-07-02 13:36:11
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/825,https://api.github.com/repos/hyperledger/burrow/issues/825,Improve solidity fixture handling and fix off by one in execution events,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-06-28 10:46:34,2018-07-19 08:56:48
burrow,compleatang,https://github.com/hyperledger/burrow/issues/824,https://api.github.com/repos/hyperledger/burrow/issues/824,[release] reconfigure release path,,closed,False,2018-06-26 21:53:14,2018-08-24 16:28:14
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/823,https://api.github.com/repos/hyperledger/burrow/issues/823,Don't panic on nil Bounds,Also tweak event test to be more useful documentation for events consumer,closed,True,2018-06-26 21:39:53,2018-06-27 11:16:02
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/822,https://api.github.com/repos/hyperledger/burrow/issues/822,Merge Burrow 0.19.0 to master for release,:tada: ,closed,True,2018-06-26 18:31:58,2018-06-26 18:57:36
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/821,https://api.github.com/repos/hyperledger/burrow/issues/821,Upgrade Tendemint to 0.21.0 add tests for EventsServer,This PR upgrade Tendermint to 0.21.0 along with other deps. Also adds tests for various events types emitted from `EventsServer`.,closed,True,2018-06-26 17:33:45,2018-06-26 17:42:19
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/820,https://api.github.com/repos/hyperledger/burrow/issues/820,Add healthcheck endpoint and prepare for release,"This PR primarily adds an endpoint suitable for implementing healthchecks, liveness probes, and readiness probes in rpc/TM as `last_block_info`. It reads data directly from memory and does not suffer from any possible database or lock contention like `status`. It also supports returning a 500 error if no blocks have been seen sufficiently recently.

When called bare it just returns the last block time, hash, and height: 
```javascript
http ""localhost:46657/last_block_info""                
HTTP/1.1 200 OK
Access-Control-Allow-Credentials: true
Access-Control-Allow-Origin: 
Access-Control-Expose-Headers: X-Server-Time
Content-Length: 196
Content-Type: application/json
Date: Tue, 26 Jun 2018 14:23:33 GMT
X-Server-Time: 1530023013

{
    ""id"": """",
    ""jsonrpc"": ""2.0"",
    ""result"": {
        ""LastBlockHash"": ""81B11B917B1C8F9858127743A0F72B76474AA263"",
        ""LastBlockHeight"": 3313,
        ""LastBlockTime"": ""2018-06-26T15:23:32+01:00""
    }
}
```
When called with the parameter `block_within` which takes a `time.ParseDuration()` parsesable string then this endpoint will return with the same result as above if the last block committed has a `BlockTime` that falls within that duration counting back from now. If it does then the status is 200:
```javascript
http "":46657/last_block_info?block_within=5s""
HTTP/1.1 200 OK
Access-Control-Allow-Credentials: true
Access-Control-Allow-Origin: 
Access-Control-Expose-Headers: X-Server-Time
Content-Length: 196
Content-Type: application/json
Date: Tue, 26 Jun 2018 14:21:47 GMT
X-Server-Time: 1530022907

{
    ""id"": """",
    ""jsonrpc"": ""2.0"",
    ""result"": {
        ""LastBlockHash"": ""C7E38544D8DEBD01B04A1E69C1FB75BA4CB538B2"",
        ""LastBlockHeight"": 3211,
        ""LastBlockTime"": ""2018-06-26T15:21:46+01:00""
    }
}
```
If not then it returns an error with status code 500. The last block info is embedded in the error (since we cannot return an error and result under the JSONRPC 2.0 spec:
```javascript
http ""localhost:46657/last_block_info?block_within=1ns""
HTTP/1.1 500 Internal Server Error
Access-Control-Allow-Credentials: true
Access-Control-Allow-Origin: 
Access-Control-Expose-Headers: X-Server-Time
Content-Length: 350
Content-Type: application/json
Date: Tue, 26 Jun 2018 14:28:45 GMT
X-Server-Time: 1530023325

{
    ""error"": {
        ""code"": -32603,
        ""data"": ""no block committed within the last 1ns (cutoff: 2018-06-26T15:28:45+01:00), last block info: {\""LastBlockHeight\"":3611,\""LastBlockTime\"":\""2018-06-26T15:28:44+01:00\"",\""LastBlockHash\"":\""197188B37FC8E5ABD0117B49F9C7180F35A43A4F\""}"",
        ""message"": ""Internal Error""
    },
    ""id"": """",
    ""jsonrpc"": ""2.0""
}
```
We used a 1 nanosecond `block_within` interval in the above but the idea is the network operator can set the parameter to whatever they deem reasonable to probe either liveness or readiness. For simple liveness the no parameter version can be used.

This also prepares for the burrow 0.19.0 release and:
- Don't store Tx in state for every EventDataTx 
- Update changelog
- Remove logging that reveals private key for input account",closed,True,2018-06-26 14:22:32,2018-07-19 08:56:49
burrow,compleatang,https://github.com/hyperledger/burrow/issues/819,https://api.github.com/repos/hyperledger/burrow/issues/819,[State] Upgrade-ability of burrow runtime,"As a pre-1.0 project, burrow provides no guarantee to operators that they will be able to keep their data but upgrade their runtime over that data. However, as we prepare to harden the binary for 1.0 applicability we need to be able to provide users with such a guarantee (at least within the confines of a major version from the semVer perspective).

While tendermint is changing dramatically underneath us it may not be viable to do this until they've hardened to a 1.0 state and are able to provide such guarantees on their end. OR, we need to build upgrade tooling (although given go package limitations this is unlikely to be as straight-forward as one would hope). ",closed,False,2018-06-25 22:12:50,2018-10-09 21:07:31
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/818,https://api.github.com/repos/hyperledger/burrow/issues/818,Don't run protoc during regular build,"protoc might not be available.

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2018-06-25 17:02:59,2018-06-26 09:58:07
burrow,Nagaraj007,https://github.com/hyperledger/burrow/issues/817,https://api.github.com/repos/hyperledger/burrow/issues/817,[RPC] How i can get the transcation history from RPC,"Please include in your bug report:

- [ ] `burrow version` (0.18.0)
- [ ]  'rpc version '(0.7.0/3"")
- [ ] operating system details (osx)

  I am trying to send the transaction its working fine and i will get the response has transaction hash 
( TXhash). But i am unable to get the details of particular Txhash and Transaction history from burrow.
I want to know which RPC method is used to get the Txhash and Transaction history details.

",closed,False,2018-06-25 09:16:15,2018-08-16 13:12:35
burrow,compleatang,https://github.com/hyperledger/burrow/issues/816,https://api.github.com/repos/hyperledger/burrow/issues/816,[state] burrow diagnose,"Administrators of chains unfamiliar with the particularities of burrow will need assistance if there is flakiness with their node or if it falls out of consensus with the chain. 

Having a tool which can understand what the problem with a node is will be essential.

I would expect when I run `burrow diagnose` that it boots in some sort of ""safe mode"" that won't panic on me, attempts to connect into the network, and then provides me with a human readable output that lets me know why the node is flaky.",closed,False,2018-06-24 22:36:00,2018-10-09 21:12:55
burrow,compleatang,https://github.com/hyperledger/burrow/issues/815,https://api.github.com/repos/hyperledger/burrow/issues/815,[State] burrow rollback,"As an administrator of a burrow chain, if I have a situation where a node is acting up, I need to be able, at times, to rollback to the blockchain + state to a block which I know is in consensus. 

Currently if we have a catastrophic incident on a node we have to remove it's `.burrow` directory entirely which cause a full resync with the entire chain. For short running chains this isn't a huge issue but fast_sync isn't incredibly fast and it can take upwards of a day or two to fully resync on some longer running chains. ",closed,False,2018-06-24 22:32:52,2019-02-21 13:12:13
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/814,https://api.github.com/repos/hyperledger/burrow/issues/814,Kubernetes secret,,closed,True,2018-06-20 11:42:48,2018-06-21 15:56:02
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/813,https://api.github.com/repos/hyperledger/burrow/issues/813,Export template,,closed,True,2018-06-19 15:16:27,2018-06-25 12:47:39
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/812,https://api.github.com/repos/hyperledger/burrow/issues/812,Use http.Server as Process to get graceful shutdown,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-06-19 09:30:37,2018-06-19 10:11:27
burrow,basilji,https://github.com/hyperledger/burrow/issues/811,https://api.github.com/repos/hyperledger/burrow/issues/811,Issue in contract deployment,"- [ ] `burrow version` (docker image tag or branch if built from source)
- [ ] `monax version` (if applicable)
- [ ] `go version` (if applicable)
- [ ] `docker version` (if applicable)
- [ ] operating system details (osx/windows/linux)
- [ ] what you expected to happen
- [ ] what actually happened
- [ ] steps to reproduction


burrow version	: 	0.18.1+commit.v0.18.0-100-g19b8b07
go version	:	go1.10.1 linux/amd64
bos version	:	0.2.0+commit.b5f6db7
os		:	Ubuntu 16.04.3 LTS  


Issue :
----------
We were not able to deploy a sample contract. It is giving below error

*************************************************************************************************
With ChainURL                               => tcp://localhost:46657
Using Signer at                             => localhost:10997
Loading monax Jobs Definition File.
Loading monax jobs file                     path => /home/twinapp/chain_dir_newname => epm

*****Executing Job*****

Job Name                                    => defaultAddr
Type                                        => Account
Setting Account                             => 30B96CEC85FED075A452A43CFB51A27BFB146143

*****Executing Job*****

Job Name                                    => deployStorageK
Type                                        => Deploy
Library String                              =>
Contract path                               => idi.sol
Cached Item(s)                              cached? => false
Could not find cached object, compiling...
To Cache                                    Filepath of include:  => a0bbb9f9c11a8640af1674bd8828c41d3021de6eca900875f0cebf8b1d525659.sol
Command Input                               Command:  => [solc --combined-json bin,abi --libraries monax-libs a0bbb9f9c11a8640af1674bd8828c41d3021de6eca900875f0cebf8b1d525659.sol]
Output from command:                        => {""contracts"":{""a0bbb9f9c11a8640af1674bd8828c41d3021de6eca900875f0cebf8b1d525659.sol:IdisContractsFTW"":{""abi"":""[{\""constant\"":false,\""inputs\"":[{\""name\"":\""x\"",\""type\"":\""uint256\""}],\""name\"":\""set\"",\""outputs\"":[],\""payable\"":false,\""stateMutability\"":\""nonpayable\"",\""type\"":\""function\""},{\""constant\"":true,\""inputs\"":[],\""name\"":\""get\"",\""outputs\"":[{\""name\"":\""retVal\"",\""type\"":\""uint256\""}],\""payable\"":false,\""stateMutability\"":\""view\"",\""type\"":\""function\""}]"",""bin"":""608060405234801561001057600080fd5b5060df8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146078575b600080fd5b348015605957600080fd5b5060766004803603810190808035906020019092919050505060a0565b005b348015608357600080fd5b50608a60aa565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a72305820156e0dd82471b100b213740402c63be0b1cd4bc13895d7b8792dc439fda071360029""}},""version"":""0.4.25-develop.2018.6.6+commit.59b35fa5.Linux.g++""}
Command Output                              Json:  => {""contracts"":{""a0bbb9f9c11a8640af1674bd8828c41d3021de6eca900875f0cebf8b1d525659.sol:IdisContractsFTW"":{""abi"":""[{\""constant\"":false,\""inputs\"":[{\""name\"":\""x\"",\""type\"":\""uint256\""}],\""name\"":\""set\"",\""outputs\"":[],\""payable\"":false,\""stateMutability\"":\""nonpayable\"",\""type\"":\""function\""},{\""constant\"":true,\""inputs\"":[],\""name\"":\""get\"",\""outputs\"":[{\""name\"":\""retVal\"",\""type\"":\""uint256\""}],\""payable\"":false,\""stateMutability\"":\""view\"",\""type\"":\""function\""}]"",""bin"":""608060405234801561001057600080fd5b5060df8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146078575b600080fd5b348015605957600080fd5b5060766004803603810190808035906020019092919050505060a0565b005b348015608357600080fd5b50608a60aa565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a72305820156e0dd82471b100b213740402c63be0b1cd4bc13895d7b8792dc439fda071360029""}},""version"":""0.4.25-develop.2018.6.6+commit.59b35fa5.Linux.g++""}
Response formulated                         name => IdisContractsFTWbin => 608060405234801561001057600080fd5b5060df8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146078575b600080fd5b348015605957600080fd5b5060766004803603810190808035906020019092919050505060a0565b005b348015608357600080fd5b50608a60aa565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a72305820156e0dd82471b100b213740402c63be0b1cd4bc13895d7b8792dc439fda071360029abi => [{""constant"":false,""inputs"":[{""name"":""x"",""type"":""uint256""}],""name"":""set"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""get"",""outputs"":[{""name"":""retVal"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""}]
Response                                    name => IdisContractsFTWbin => 608060405234801561001057600080fd5b5060df8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146078575b600080fd5b348015605957600080fd5b5060766004803603810190808035906020019092919050505060a0565b005b348015608357600080fd5b50608a60aa565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a72305820156e0dd82471b100b213740402c63be0b1cd4bc13895d7b8792dc439fda071360029abi => [{""constant"":false,""inputs"":[{""name"":""x"",""type"":""uint256""}],""name"":""set"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""get"",""outputs"":[{""name"":""retVal"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""}]
Warning during contract compilation         => Warning: This is a pre-release compiler version, please do not use it in production.
a0bbb9f9c11a8640af1674bd8828c41d3021de6eca900875f0cebf8b1d525659.sol:6:3: Warning: No visibility specified. Defaulting to ""public"".
  function set(uint x) {
  ^ (Relevant source part starts here and spans across multiple lines).
a0bbb9f9c11a8640af1674bd8828c41d3021de6eca900875f0cebf8b1d525659.sol:10:3: Warning: No visibility specified. Defaulting to ""public"".
  function get() constant returns (uint retVal) {
  ^ (Relevant source part starts here and spans across multiple lines).

Deploying the only contract in file         path => idi.sol
Abi                                         => [{""constant"":false,""inputs"":[{""name"":""x"",""type"":""uint256""}],""name"":""set"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""get"",""outputs"":[{""name"":""retVal"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""}]
Bin                                         => 608060405234801561001057600080fd5b5060df8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146078575b600080fd5b348015605957600080fd5b5060766004803603810190808035906020019092919050505060a0565b005b348015608357600080fd5b50608a60aa565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a72305820156e0dd82471b100b213740402c63be0b1cd4bc13895d7b8792dc439fda071360029
ABI Specification (From Compilers)          => [{""constant"":false,""inputs"":[{""name"":""x"",""type"":""uint256""}],""name"":""set"",""outputs"":[],""payable"":false,""stateMutability"":""nonpayable"",""type"":""function""},{""constant"":true,""inputs"":[],""name"":""get"",""outputs"":[{""name"":""retVal"",""type"":""uint256""}],""payable"":false,""stateMutability"":""view"",""type"":""function""}]
Saving ABI                                  => abi/IdisContractsFTW
Deploying Contract                          name => IdisContractsFTW
                                            source => 30B96CEC85FED075A452A43CFB51A27BFB146143code => 608060405234801561001057600080fd5b5060df8061001f6000396000f3006080604052600436106049576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806360fe47b114604e5780636d4ce63c146078575b600080fd5b348015605957600080fd5b5060766004803603810190808035906020019092919050505060a0565b005b348015608357600080fd5b50608a60aa565b6040518082815260200191505060405180910390f35b8060008190555050565b600080549050905600a165627a7a72305820156e0dd82471b100b213740402c63be0b1cd4bc13895d7b8792dc439fda071360029chain-url => tcp://localhost:46657
                                            defAddr => 30B96CEC85FED075A452A43CFB51A27BFB146143rawErr => Response error: RPC error -32603 - Internal error: runtime error: invalid memory address or nil pointer dereference
Error finalizing contract deploy idi.sol:
There has been an error talking to your monax chain.

Response error: RPC error -32603 - Internal error: runtime error: invalid memory address or nil pointer dereference

Debugging this error is tricky, but don't worry the marmot recovery checklist is...
  * is the 30B96CEC85FED075A452A43CFB51A27BFB146143 account right?
  * is the account you want to use in your keys service: burrow keys list ?
  * is the account you want to use in your genesis.json: see http://localhost:46657/genesis
  * do you have permissions to do what you're trying to do on the chain?
*****************************************************************************************

Steps to reproduce the issue :
------------------------------

export GOROOT=""/usr/local/go""
export GOPATH=""/home/twinapp/burrowchain""

go get github.com/hyperledger/burrow
cd $GOPATH/src/github.com/hyperledger/burrow
make build

go get github.com/monax/bosmarmot
cd $GOPATH/src/github.com/monax/bosmarmot
make build

mkdir chain_dir_new
cd chain_dir_new

burrow spec --participant-accounts=1 --full-accounts=1 > genesis-spec.json
burrow configure --genesis-spec=genesis-spec.json > burrow.toml

burrow start --validator-index=0 2>burrow.log &

bos --address=""30B96CEC85FED075A452A43CFB51A27BFB146143""

where ""30B96CEC85FED075A452A43CFB51A27BFB146143"" is the address of validator[0] 


burrow.toml file content
--------------------------

[GenesisDoc]
  GenesisTime = 2018-06-19T04:09:28Z
  ChainName = ""BurrowChain_2BE507""
  [GenesisDoc.GlobalPermissions]
    Roles = []
    [GenesisDoc.GlobalPermissions.Base]
      Perms = 2302
      SetBit = 16383

  [[GenesisDoc.Accounts]]
    Address = ""30B96CEC85FED075A452A43CFB51A27BFB146143""
    PublicKey = ""{\""CurveType\"":\""ed25519\"",\""PublicKey\"":\""E191F15D03FDF76138D6B4EE7503CD0110AC3FDDD72A129F6BFF3E30C9976F20\""}""
    Amount = 99999999999999
    Name = ""Full_0""
    [GenesisDoc.Accounts.Permissions]
      [GenesisDoc.Accounts.Permissions.Base]
        Perms = 16383
        SetBit = 16383

  [[GenesisDoc.Accounts]]
    Address = ""33FD006E8619FC7F9F969D6C8B7AF7C261221184""
    PublicKey = ""{\""CurveType\"":\""ed25519\"",\""PublicKey\"":\""27AE53D00C96065B0AD443402ED9E1C978B34257A242B6741E6F9FA626E1125D\""}""
    Amount = 9999999999
    Name = ""Participant_0""
    [GenesisDoc.Accounts.Permissions]
      [GenesisDoc.Accounts.Permissions.Base]
        Perms = 2118
        SetBit = 2118

  [[GenesisDoc.Validators]]
    Address = ""30B96CEC85FED075A452A43CFB51A27BFB146143""
    PublicKey = ""{\""CurveType\"":\""ed25519\"",\""PublicKey\"":\""E191F15D03FDF76138D6B4EE7503CD0110AC3FDDD72A129F6BFF3E30C9976F20\""}""
    Amount = 9999999999
    Name = ""Full_0""

    [[GenesisDoc.Validators.UnbondTo]]
      Address = ""30B96CEC85FED075A452A43CFB51A27BFB146143""
      PublicKey = ""{\""CurveType\"":\""ed25519\"",\""PublicKey\"":\""E191F15D03FDF76138D6B4EE7503CD0110AC3FDDD72A129F6BFF3E30C9976F20\""}""
      Amount = 9999999999

[Tendermint]
  Seeds = """"
  PersistentPeers = """"
  ListenAddress = ""tcp://0.0.0.0:46656""
  Moniker = """"
  TendermintRoot = "".burrow""

[Keys]
  GRPCServiceEnabled = true
  AllowBadFilePermissions = false
  RemoteAddress = """"
  KeysDirectory = "".keys""

[RPC]
  [RPC.V0]
    Enabled = true
    [RPC.V0.Server]
      [RPC.V0.Server.bind]
        address = ""localhost""
        port = 1337
      [RPC.V0.Server.TLS]
        tls = false
        cert_path = """"
        key_path = """"
      [RPC.V0.Server.CORS]
        enable = false
        allow_credentials = false
        max_age = 0
      [RPC.V0.Server.HTTP]
        json_rpc_endpoint = ""/rpc""
      [RPC.V0.Server.web_socket]
        websocket_endpoint = ""/socketrpc""
        max_websocket_sessions = 50
        read_buffer_size = 4096
        write_buffer_size = 4096
  [RPC.TM]
    Enabled = true
    ListenAddress = ""tcp://localhost:46657""
  [RPC.Profiler]
    Enabled = false
    ListenAddress = ""tcp://localhost:6060""
  [RPC.GRPC]
    Enabled = true
    ListenAddress = ""localhost:10997""

[Logging]
  ExcludeTrace = false
  NonBlocking = false
  [Logging.RootSink]
    [Logging.RootSink.Output]
      OutputType = ""stderr""
      Format = ""json""

epm.yaml 
-------------


jobs:

- name: deployStorageK
  deploy:
      contract: idi.sol

- name: setStorageBase
  set:
      val: 5

- name: setStorage
  call:
      destination: $deployStorageK
      function: set
      data:
        - $setStorageBase

- name: queryStorage
  query-contract:
      destination: $deployStorageK
      function: get

idi.sol
------

pragma solidity ^0.4.0;

contract IdisContractsFTW {
  uint storedData;

  function set(uint x) {
    storedData = x;
  }

  function get() constant returns (uint retVal) {
    return storedData;
  }
}






",closed,False,2018-06-19 04:48:28,2018-06-20 14:56:42
burrow,compleatang,https://github.com/hyperledger/burrow/pull/810,https://api.github.com/repos/hyperledger/burrow/issues/810,migrate burrow metrics exporter work into burrow proper,"close #790 and deprecates @monax/burrow-exporter

in process metrics are lightweight and give us a clean picture of the entire runtime profile for free. this will be crucial to monitor as we move forward toward production.",closed,True,2018-06-19 00:29:20,2018-06-19 08:42:30
burrow,compleatang,https://github.com/hyperledger/burrow/issues/809,https://api.github.com/repos/hyperledger/burrow/issues/809,[RPC] Cleanup RPCs,"Note, this issue is blocking on the migration of `bos` and `burrow.js` to GPRC. Once that work is complete, we should clean up the RPCs.

- [x] remove all interactivity from 46657; this should become a pure informational port served over http/s that sends JSON objects back to the caller
- [x] remove websockets from 46657
- [x] migrate default 46657 -> 8080 (or similar port)
- [x] rename 46657 to info port (or similar)
- [ ] collapse the metrics server into the info port (still serve on `/metrics`)
- [x] add `/healthz` endpoint to info port that returns `200` if burrow is up and has made blocks in the last 30(?) seconds or a reasonable error code (`4xx` or `5xx`) if it has not made blocks in the last 30(?) seconds [probably need to have a carve out for the first couple of minutes after boot where it returns `200`]. This will allow ReadinessProbes (e.g., https://github.com/kubernetes/charts/blob/master/stable/burrow/templates/deployments.yaml#L92) to fail the node over for a reboot if it has not made blocks recently
- [ ] implement Swagger or similar auto documentation for (old) 46657 informational endpoints
- [x] remove v0 completely
- [ ] implement Swagger or similar auto documentation for GRPC port",closed,False,2018-06-18 22:43:16,2018-08-15 18:03:23
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/808,https://api.github.com/repos/hyperledger/burrow/issues/808,Implement ExecutionEvents service in GRPC,"This change implements persisting events to state binary serialised under a 16 byte key of `height index` in big endian format meaning that we can iterate events in order using IAVL's range query (and get a proof of the result if we want - though this is not currently exposed).

This core function added to state is:

```go
GetEvents(startBlock, endBlock uint64, queryable query.Queryable) (<-chan *events.Event, error)
```
and a GRPC based on this is provided by `ExecutionServer` that allows dynamic ranges (relative to latest block) to be specified as well as for events to be streamed continuously as they are generated by new blocks.

We sync events to our state tree before also broadcasting them over pubsub so existing functionality is still preserved.

This PR also:

- Reorganises protobuf and generation from makefile
- Fixes keys service using non-pointer receiver
- Fixes keys command checking keys options for nil rather than default values
- Adds `EventsService implementing with `Subscriptions`
- Adds `ExecutionEventsService` service state persisted events
- Further refines state handling and safety following through with some earlier changes to interfaces
- Improves read/write lock on state by maintaining a previous tree version for reading
- Provides an event endpoint with a query string
- Adds timeout to `SubscribeCallback` to prevent from blocking subscribers from halting pubsub
- Make multiple `NewBlock` event subscriptions safe

",closed,True,2018-06-18 21:57:30,2018-07-19 08:56:48
burrow,pietv,https://github.com/hyperledger/burrow/pull/807,https://api.github.com/repos/hyperledger/burrow/issues/807,Solve a few glitches for integration tests on Mac and Linux environment,"This PR adds a few fixes for the burrow integration tests for them to run on a development machine:
* a check for dependent binaries that might not be present in a Docker container (`jq`, `xxd`, ...)
* The Darwin `base64` doesn't support the `-d` flag: change to `openssl base64 -d`.
* The LibreSSL `openssl base64 -d` command produces an empty result without the `-A` flag.
* Use the `trap EXIT` Bash command to kill the `burrow keys server` (occasionally the server keeps running after the integration tests failure).",closed,True,2018-06-18 16:09:07,2018-06-18 22:20:00
burrow,Nagaraj007,https://github.com/hyperledger/burrow/issues/806,https://api.github.com/repos/hyperledger/burrow/issues/806,How i can get my transaction history using  burrow JSONRPC,"i am running the burrow,i am able to get details of Blocks and block height using JSON RPC, How i can get transaction history.

",closed,False,2018-06-17 07:11:30,2018-06-18 12:15:04
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/805,https://api.github.com/repos/hyperledger/burrow/issues/805,[Logging] Implement logging hotswap endpoint with presets support,"Burrow produces a large volume of logging with no filters and `ExcludeTrace = false`. This can be a burden when capturing logs across many validators and chains. Often we are temporarily interested in an increased amount of logging - often regarding a particular area, e.g. consensus, p2p, EVM, accounts,... For example when deploying contracts with Bos we may want to up the EVM logging to max in order to debug issues. Similarly if a node has lost connectivity it is useful to ramp up the p2p logging.

Burrow has two core latent features already implemented that can be combined to provide just this functionality.

1. The logger supports concurrent hot swapping of its output logger (which can contain an arbitrary pipeline of filters and transforms): https://github.com/hyperledger/burrow/blob/develop/logging/logger.go#L112-L114

2. There exists a system of logging presets that can be defined to provide a particular verbosity or topic focused logging: https://github.com/hyperledger/burrow/blob/develop/logging/config/presets/instructions.go

What we would like to do is:
- Define a logging service in our new GRPC layer: https://github.com/hyperledger/burrow/blob/develop/rpc/burrow/burrow.proto (for reference see: https://github.com/hyperledger/burrow/blob/develop/rpc/burrow/transaction_server.go)
- Have this endpoint support a `Swap` method that allows you to specify either a preset logging mode from instructions.go or a custom logging config provided as JSON/TOML payload. Either config can be used to hotswap the output logger to a new one.

Once that basic functionality is in place it would be nice to have:
- Logging presets defined in Burrow config to augment hard-coded ones
- The ability to define new presets at runtime (by supplying a name when calling `Swap` with a custom config)

To make this really useful we should think about presets that are operationally useful and try and come up with some good default presets. We can work with the Monax product and operations team who have good experience in production and can provide feedback.

Here is a suggested logging RPC protobuf interfacce:

```protobuf
service Logger {
    rpc Swap (SwapLoggerRequest) returns (SwapLoggerResponse);
}

message SwapLoggerRequest {
    // If provided with LoggingConfig - try to save the provided config as this preset name
    // If provided without LoggingConfig try to load an existing preset with this name
    string PresetName = 1;
    // JSON or TOML logging config
    string LoggingConfig = 2;
}

message SwapLoggerResponse {

}
```",open,False,2018-06-16 11:54:04,2018-12-05 12:28:00
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/804,https://api.github.com/repos/hyperledger/burrow/issues/804,Simplify account structure and use struct for MutableAccount,Based on the core idea of: https://github.com/hyperledger/burrow/pull/800 but more minimal and incremental,closed,True,2018-06-15 22:10:59,2018-07-10 17:32:06
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/803,https://api.github.com/repos/hyperledger/burrow/issues/803,Add last block checkpointing and versioned state loading,"This reintroduces some of the logic around saving a version number but with some tweaks:

- The multiple writes to db are not atomic, but instead of this we can use a checkpoint on the _last_ block to get the same safety
- When we start we load application and blockchain state from the last hash -> state version we were _certain_ had been fully committed

This needs a long-running statistically evaluated test where we randomly kill burrow so we cover various intervals in the commit process to prove that it is robust, but that will have to wait.",closed,True,2018-06-14 18:33:47,2018-06-15 08:56:05
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/802,https://api.github.com/repos/hyperledger/burrow/issues/802,Add GRPC transaction service,"This:
- Adds GRPC transaction service
- Fixes a load broken deps relating to Tendermint
- Simplifies state loading
- Uses binary codec for txs, namereg
- kills go-wire DED
- Updates IAVL
- Errors on bad tx envelopes
- Respects launcher `Enabled` status",closed,True,2018-06-13 22:38:46,2018-07-24 12:29:06
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/801,https://api.github.com/repos/hyperledger/burrow/issues/801,Merge to master,"master currently is out-of-sync with bosmarmot, this addresses that and we can stabilise for a release",closed,True,2018-06-13 11:35:57,2018-06-13 11:38:33
burrow,b00f,https://github.com/hyperledger/burrow/pull/800,https://api.github.com/repos/hyperledger/burrow/issues/800,Refactoring Account object,"In this change list, the `Account` object is refactored and the interfaces are removed. 
Also `state_cache` has minor changes in order to keep a copy of account structure not the pointer. It is more safe because any further changes in account object  won't affect the state cache unless it gets update again. ",closed,True,2018-06-13 07:18:56,2018-07-19 22:23:59
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/799,https://api.github.com/repos/hyperledger/burrow/issues/799,Add GRPC transaction service,"This:
- Adds GRPC transaction service
- Fixes a load broken deps relating to Tendermint
- Simplifies state loading
- Uses binary codec for txs, namereg
- kills go-wire DED
- Updates IAVL
- Errors on bad tx envelopes
- Respects launcher `Enabled` status",closed,True,2018-06-12 22:48:16,2018-06-13 22:38:14
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/798,https://api.github.com/repos/hyperledger/burrow/issues/798,Upgrade Tendermint to 0.20.0,Merge after: https://github.com/hyperledger/burrow/pull/797,closed,True,2018-06-12 15:28:45,2018-07-19 22:50:49
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/797,https://api.github.com/repos/hyperledger/burrow/issues/797,Refactor execution logic,"This PR:
- Adds coded exceptions to the execution layer (supporting REVERT amongst other things)
- Refactors the giant `Execute` function into some contextual `Executors` per transaction type (removing awful GOTO logic) - preparation for GovernanceTx
- Renames namereg to match events/state",closed,True,2018-06-12 15:03:09,2018-07-19 22:50:34
burrow,dennismckinnon,https://github.com/hyperledger/burrow/pull/796,https://api.github.com/repos/hyperledger/burrow/issues/796,Add the first draft of grpc protobuf files,Signed-off-by: Dennis Mckinnon <dennis.r.mckinnon@gmail.com>,closed,True,2018-06-11 16:33:11,2018-06-12 15:29:40
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/795,https://api.github.com/repos/hyperledger/burrow/issues/795,Governance groundwork,"This PR includes various groundwork for GovernanceTx, chiefly making our Tx model a bit more sane and dropping go-wire serialisation. Included:
- Split crypto into multiple files
- Introduce `Envelope` as a container for a transaction and signatures, make Tx a wrapper struct, and describe existing txs with `Payload` interface. Remove all signatures and public keys from `Payloads`.
- Use standard JSON marshalling to generate `SignBytes` (with possibility to use something else down the road).
- Have `Tx` remember it's `ChainID` context rather than passing it around all over the place. Memoize `TxHash`
- Introduce `Validators` multiset that acts as a cache of validator set changes (for manipulation from GovernanceTx)
- Introduce `ValidatorsWindow` as a history of validator changes so that we can calculate rolling power changes needed for fee disbursement
- Remove `RebondTx`

",closed,True,2018-06-11 10:44:39,2018-06-11 13:27:20
burrow,compleatang,https://github.com/hyperledger/burrow/pull/794,https://api.github.com/repos/hyperledger/burrow/issues/794,upgrade bos so tests will pass,,closed,True,2018-06-09 10:35:13,2018-06-09 11:15:34
burrow,b00f,https://github.com/hyperledger/burrow/issues/793,https://api.github.com/repos/hyperledger/burrow/issues/793,Making logger globally accessible  ,I think it's not bad idea using Singleton pattern for logger system. **Thread-Safe Singleton logger** can reduce the code and make logger to be accessible everywhere without passing it hierarchy between objects. ,closed,False,2018-06-07 11:47:57,2018-06-13 23:25:44
burrow,compleatang,https://github.com/hyperledger/burrow/issues/792,https://api.github.com/repos/hyperledger/burrow/issues/792,[evm] Downstream libraries panic on building if they already invoke `trace`,"Talking to @guoger in #fabric-evm room regarding a panic they've been seeing on building fabric with burrow's evm.

```
hi, thank you so much for helping us out! by looking at this graph, 
both projects ultimately depend on `x/net/trace`. When we load 
burrow-evm as a plugin, `init` in `trace` is called for the second 
time, which triggers a panic because the `/debug/requests` 
endpoint is registered already.

so I think it's a problem with grpc, instead of tendermint. 
(possibly `go-kit/kit` as well)
```

He also dumped their dep graph which I've attached here.

It seems if we're running a trace init in the evm itself that would be very bad for downstream libraries and we should seek to instantiate that a level ""up"" from the evm to avoid this if possible.

![dep](https://user-images.githubusercontent.com/590037/41092083-f20f03f8-6a3f-11e8-85c2-95eedb567306.png)
",closed,False,2018-06-07 09:46:19,2018-06-14 09:50:36
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/791,https://api.github.com/repos/hyperledger/burrow/issues/791,Fixes,,closed,True,2018-06-07 08:17:43,2018-06-11 09:27:17
burrow,compleatang,https://github.com/hyperledger/burrow/issues/790,https://api.github.com/repos/hyperledger/burrow/issues/790,[metrics] Implement Prometheus exporter,"User story: As an administrator I want to leverage cloud tools to monitor the health and performance of my running chain. 

## Background

It is important to monitor things beyond CPU and Memory usage of a running burrow node. We want to make this as easy as possible for overloaded DevOps/SysAdmin/SRE folks by leveraging existing cloud monitoring pipelines. We should begin with Prometheus which is hugely popular, written in go, and has solid and easy to use client libraries. 

This should be a configurable feature which serves on the standard prometheus reaping port on the `/metrics` endpoint. 

## Labels

Metrics exported should label with the following values

* chain_id
* moniker

These labels will make graphing and reporting easy within grafana and other visualization tooling when multiple nodes/chains are reporting to a centralized monitoring service. 

## Mertics 

The following metrics (there could be more) should be exported

* ~block height~
* ~block time (ave, min, max over last X blocks)~
* ~transactions per block (ave, min, max over last X blocks)~
* ~current mempool depth~
* ~total peers~",closed,False,2018-06-07 02:09:45,2018-06-19 08:40:10
burrow,compleatang,https://github.com/hyperledger/burrow/issues/789,https://api.github.com/repos/hyperledger/burrow/issues/789,"[consensus] if possible, recover from bad host errors on peers dialing","while it is true that DNS propagation is the worst, we should be able to recover from this, or at least eat the error for a predefined set of dials.

```
{""book"":"".burrow/config/addrbook.json"",""caller"":""service.go:129"",""component"":""Tendermint"",""impl"":""AddrBook"",""log_channel"":""Info"",""message"":""Starting AddrBook"",""module"":""
p2p"",""run_id"":""4778b37f-69eb-11e8-8ec9-fc0450ed4674"",""scope"":""tendermint.NewNode"",""time"":""2018-06-07T00:39:50.283601797Z""}
could not boot Burrow kernel: error launching Tendermint server: error starting Tendermint node: failed to start PEXReactor: Error in address tcp://000000000000000000000
0000000000000000002@002.peers.t2.agreements.network:46656: lookup 002.peers.t2.agreements.network on 10.63.240.10:53: no such host
```

The above error throws and the node's process fails with that error. ",closed,False,2018-06-07 00:43:04,2018-08-17 12:44:36
burrow,dennismckinnon,https://github.com/hyperledger/burrow/pull/788,https://api.github.com/repos/hyperledger/burrow/issues/788,Add rpc proto-buf specs,,closed,True,2018-06-06 00:35:41,2018-06-11 16:34:04
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/787,https://api.github.com/repos/hyperledger/burrow/issues/787,Update tendermint constraint,Signed-off-by: Silas Davis <silas@monax.io>,closed,True,2018-06-05 14:23:10,2018-06-05 14:26:06
burrow,compleatang,https://github.com/hyperledger/burrow/pull/786,https://api.github.com/repos/hyperledger/burrow/issues/786,add logo to readme,"![screenshot-github com-2018 06 05-13-50-20](https://user-images.githubusercontent.com/590037/40976930-7523aab6-68c7-11e8-8de7-737f878d8db9.png)
",closed,True,2018-06-05 12:47:50,2018-06-09 10:32:56
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/785,https://api.github.com/repos/hyperledger/burrow/issues/785,local key client does not return curve type,"This breaks voting:

{""caller"":""state.go:836"",""component"":""Tendermint"",""err"":""invalid curve type"",""height"":1,""log_channel"":""Info"",""message"":""enterPropose: Error signing proposal"",""module"":""consensus"",""round"":0,""run_id"":""ae20372c-68ab-11e8-827b-6da5986ff0ad"",""scope"":""tendermint.NewNode"",""time"":""2018-06-05T10:32:03.568661284Z""}

Signed-off-by: Sean Young <sean.young@monax.io>",closed,True,2018-06-05 11:04:54,2018-06-05 11:22:34
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/784,https://api.github.com/repos/hyperledger/burrow/issues/784,Upgrade to Tendermint 0.20.0-rc2,"Because we like to bleed...

This PR:
- Updates us to Tendermint 0.20.0-rc2
- Add back in sign_info.go since Tendermint have removed it (want to make PR of this file back in)
- Pulls in Tendermint rpc lib so we stop chasing the numerous upstream changes AND purges go-amino from it
- Updates some RPC types",closed,True,2018-06-05 10:09:06,2018-07-19 08:56:48
burrow,compleatang,https://github.com/hyperledger/burrow/pull/783,https://api.github.com/repos/hyperledger/burrow/issues/783,bring our log fields in line with tendermints on ABCI-App component,"currently our structured logging fields differ frustratingly slightly from tendermints. this adjusts the predomoninant logging output on our end to use the same fields as they do to avoid the overlap in the screenshot below.

![screenshot-logs cluster monax io-2018 06 04-18-35-41](https://user-images.githubusercontent.com/590037/40932532-8f38a948-6826-11e8-96c2-ce3014634282.png)
",closed,True,2018-06-04 17:39:08,2018-06-04 19:53:56
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/782,https://api.github.com/repos/hyperledger/burrow/issues/782,Permission check,Check that key files have the correct permission.,closed,True,2018-06-04 11:45:53,2018-06-05 09:27:10
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/781,https://api.github.com/repos/hyperledger/burrow/issues/781,Add burrow dump command,"Backed by new forensics package containing block explorer.

From directory containing `.burrow` and `burrow.toml` (or suitable config from `-c` flag) Provides:

```shell
# dump all block from 200 to last
burrow dump blocks 200:
# dump all tx from blocks 500 to 505
burrow dump txs 500:505
```",closed,True,2018-06-01 13:45:49,2018-06-04 11:13:19
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/780,https://api.github.com/repos/hyperledger/burrow/issues/780,[WIP] Examine Finterra Burrow extensions,,closed,True,2018-05-29 12:59:05,2018-07-25 03:03:03
burrow,TheAlienMind,https://github.com/hyperledger/burrow/pull/779,https://api.github.com/repos/hyperledger/burrow/issues/779,Updated GetData return value descriptor,Used a JSON returned via RPC to understand the structure of returned object.,closed,True,2018-05-24 10:25:21,2018-05-29 11:18:41
burrow,smblucker,https://github.com/hyperledger/burrow/pull/778,https://api.github.com/repos/hyperledger/burrow/issues/778,Implementing revert opcode,"These changes implement the revert opcode as referenced here:

https://github.com/hyperledger/burrow/issues/600",closed,True,2018-05-23 18:50:32,2018-05-29 13:44:59
burrow,smblucker,https://github.com/hyperledger/burrow/pull/777,https://api.github.com/repos/hyperledger/burrow/issues/777,Reintroducing ecrecover and implementing ed25519 signature verification,"These changes reintroduce functionality for ecrecover implement ed25519 signature verification as defined here:

https://github.com/ethereum/go-ethereum/pull/16453
",closed,True,2018-05-22 17:38:07,2018-07-24 12:55:02
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/776,https://api.github.com/repos/hyperledger/burrow/issues/776,Merge monax-keys into burrow using grpc and consolidated crypto,This replaces the monax-keys service with a built-in keys service,closed,True,2018-05-17 12:14:37,2018-06-02 16:50:45
burrow,b00f,https://github.com/hyperledger/burrow/pull/775,https://api.github.com/repos/hyperledger/burrow/issues/775,Update key.go,This method generated wrong address from public_key.,closed,True,2018-05-17 08:19:23,2018-05-24 11:47:03
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/774,https://api.github.com/repos/hyperledger/burrow/issues/774,Fix smoke test and typo,Also refactored CLI to take an output interface,closed,True,2018-05-16 15:01:41,2018-06-09 10:31:08
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/773,https://api.github.com/repos/hyperledger/burrow/issues/773,Reorganisation of mock keys and add deployment,"deployment package will provide a singular object to provide to
provisioning and orchestration systems like ansible, kubernetes,
terraform",closed,True,2018-05-16 14:09:39,2018-05-16 14:36:16
burrow,smblucker,https://github.com/hyperledger/burrow/pull/772,https://api.github.com/repos/hyperledger/burrow/issues/772,Adding create2 opcode placeholder,"These changes provide a placeholder for the create2 opcode. This PR is meant to satisfy issue found here:

fixes https://github.com/hyperledger/burrow/issues/769",closed,True,2018-05-15 16:28:28,2018-05-23 13:54:34
burrow,smblucker,https://github.com/hyperledger/burrow/pull/771,https://api.github.com/repos/hyperledger/burrow/issues/771,"Implementing shl, shr, and sar opcodes","These changes implement shl, shr, and sar opcodes.

",closed,True,2018-05-14 20:46:09,2018-05-15 15:01:42
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/770,https://api.github.com/repos/hyperledger/burrow/issues/770,Update bos dependency and expose persistent peers,,closed,True,2018-05-14 19:38:04,2018-05-14 19:49:06
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/769,https://api.github.com/repos/hyperledger/burrow/issues/769,Support CREATE2 opcode (possibly),"See: https://github.com/ethereum/EIPs/blob/abcf1153ae3939fab9dd30fae8a94c26c9d18db6/EIPS/eip-86.md

Though that EIP has a rather vague 'specification' in terms of what `CREATE2` is exactly meant to do with rather a lot of background. Worth noting that go-ethereum does not appear to support this yet. We should at least add a 'not implemented error' on this opcode",closed,False,2018-05-14 11:45:45,2018-05-23 13:54:33
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/768,https://api.github.com/repos/hyperledger/burrow/issues/768,Burrow deploy tweaks,"This is related to improving out kubernetes integration and includes:

- Splitting up of CLI for readability/maintainability
- `burrow spec` now takes multiple specs as variadic arg
- `burrow serve` rename `burrow start` to distinguish keys and other serve operations
- `MockKeyClient.DumpKeys` can now generate monax-keys keys files",closed,True,2018-05-14 11:12:48,2018-05-14 11:39:54
burrow,smblucker,https://github.com/hyperledger/burrow/pull/767,https://api.github.com/repos/hyperledger/burrow/issues/767,returndatasize-returndatacopy implementation,"These changes implement retrundatasize and returndatacopy; these changes attempt to resolve issue found here:

fixes https://github.com/hyperledger/burrow/issues/705",closed,True,2018-05-11 17:54:35,2018-08-15 20:31:26
burrow,smblucker,https://github.com/hyperledger/burrow/pull/766,https://api.github.com/repos/hyperledger/burrow/issues/766,retdatasize-retdatacopy-implementation,"These changes implement returndatasize and returndatacopy: changes are meant to resolve issue found here:

https://github.com/hyperledger/burrow/issues/705",closed,True,2018-05-11 17:49:11,2018-05-11 17:50:30
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/765,https://api.github.com/repos/hyperledger/burrow/issues/765,Cleanup some subscription code on V0,"Increase reap threshold to 20 seconds

Signed-off-by: Silas Davis <silas@monax.io>",closed,True,2018-05-11 12:26:39,2018-07-19 08:56:49
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/764,https://api.github.com/repos/hyperledger/burrow/issues/764,Introduce InputAccount on param to simplify JS,,closed,True,2018-05-10 20:07:13,2018-05-10 22:25:30
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/763,https://api.github.com/repos/hyperledger/burrow/issues/763,Develop,,closed,True,2018-05-10 20:04:02,2018-05-10 20:05:25
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/762,https://api.github.com/repos/hyperledger/burrow/issues/762,Use sed for indentation to not interpret shell characters,This now also contains a fix to what must have been a long-standing in principle test flake.,closed,True,2018-05-08 23:34:07,2018-05-10 17:51:21
burrow,smblucker,https://github.com/hyperledger/burrow/pull/761,https://api.github.com/repos/hyperledger/burrow/issues/761,"Editing grammar, spelling and style in readme",Changes fix minor problems in readme.md,closed,True,2018-05-08 18:39:38,2018-05-08 18:46:58
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/760,https://api.github.com/repos/hyperledger/burrow/issues/760,Flush events after hashing to fix timing issue in test,"I've seen this on CI, and I think this may resolve it. An artefact of the way this `WSCallNoWait` works mean there is a race.",closed,True,2018-05-08 18:26:20,2018-05-08 18:41:55
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/759,https://api.github.com/repos/hyperledger/burrow/issues/759,Merge develop to master for release,merge first: https://github.com/hyperledger/burrow/pull/758,closed,True,2018-05-08 17:21:30,2018-05-08 19:07:22
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/758,https://api.github.com/repos/hyperledger/burrow/issues/758,"Update project history for 0.18.0 release, add moniker flag",This prepare develop for merge to master and 0.18.0 release,closed,True,2018-05-08 17:19:15,2018-05-08 17:31:31
burrow,smblucker,https://github.com/hyperledger/burrow/pull/757,https://api.github.com/repos/hyperledger/burrow/issues/757,Implementing INVALID opcode,"These changes implement the invalid opcode; these changes attempt to resolve issue here:

https://github.com/hyperledger/burrow/issues/601

",closed,True,2018-05-07 18:00:40,2018-05-09 14:00:52
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/756,https://api.github.com/repos/hyperledger/burrow/issues/756,"Fix test issues, and reorganise CLI UX. Read validator address on startup.","This PR:

- Fixes broken test that slipped through broken CircleCI notification on a previous PR
- Updates docs to point at roadmap and get keys and burrow running
- (Re)introduces `burrow serve` replacing `burrow` since current usage was not ideal and broke some uses of `Spec`
- Adds a smoke test for the mow.cli app
- Moves setting the `ValidatorAddress` from `burrow configure` to `burrow serve`, i.e. boot time. This allows us to use identical configuration for each validator in a pool in many cases and just specify the validator address. We can also set this via an environment variable",closed,True,2018-05-04 19:04:04,2018-05-07 14:51:38
burrow,smblucker,https://github.com/hyperledger/burrow/pull/755,https://api.github.com/repos/hyperledger/burrow/issues/755,Implementing RETURNDATASIZE and RETURNDATACOPY,"These changes implement the RETURNDATASIZE and RETURNDATACOPY opcodes as described here:

https://github.com/ethereum/EIPs/blob/dde2fe59532290f285a3ae79bd7347f0a7b69d6d/EIPS/eip-211.md

This implementation attempts to resolve issue here:

https://github.com/hyperledger/burrow/issues/705",closed,True,2018-05-03 20:09:23,2018-05-11 15:48:47
burrow,b00f,https://github.com/hyperledger/burrow/pull/754,https://api.github.com/repos/hyperledger/burrow/issues/754,Detect JSON from config file,"NOTE: Genesis file contains some JSON data (ex. crypto.PublicKey)
This patch is for detecting JSON format from TOML
",closed,True,2018-05-03 08:19:50,2018-05-04 20:11:07
burrow,paulvi,https://github.com/hyperledger/burrow/pull/753,https://api.github.com/repos/hyperledger/burrow/issues/753,#748 roadmap link in README,"#748 roadmap link in README

+Roadmap, future plans and other information about the project can be found at
+<https://wiki.hyperledger.org/projects/burrow>
+",closed,True,2018-05-02 03:06:21,2018-05-07 01:25:39
burrow,paulvi,https://github.com/hyperledger/burrow/issues/752,https://api.github.com/repos/hyperledger/burrow/issues/752,make GitHub show `develop` branch by default,"As pointed in #748, it is not clear when looking at https://github.com/hyperledger/burrow that the code is under active development.

The solution is to change GitHub default shown branch to `develop`

![](https://user-images.githubusercontent.com/1614482/39366339-39d62030-4a66-11e8-8fb7-08253c0d1909.png)",closed,False,2018-05-02 03:02:11,2018-05-16 14:08:52
burrow,smblucker,https://github.com/hyperledger/burrow/pull/751,https://api.github.com/repos/hyperledger/burrow/issues/751,"Implementing SHL, SHR and SAR opcodes","These changes implement bitwise shifting operations (shift left, shift right, shift arithmetic right) as described in EIP here: 

https://github.com/ethereum/EIPs/blob/e451b058521ba6ccd5d3205456f755b1d2d52bb8/EIPS/eip-145.md

This implementation resolves Issue here:

fixes #705 ",closed,True,2018-05-01 21:58:18,2018-05-14 20:52:02
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/750,https://api.github.com/repos/hyperledger/burrow/issues/750,Network spec,"This PR:

- Allows ingestion of JSON or TOML without specifying by detecting the input format
- Allows you to provide base genesis specs to merge into a final spec
- Allows the generation and output of secret keys using `burrow congfigure`

so `burrow spec -p1 | burrow configure --genesis-spec=- --separate-genesis-doc genesis.json --generate-keys keys.json` now outputs separate genesis (from a previous PR) and this for `keys.json`:

```json
{
  ""Keys"": [
    {
      ""Name"": ""Full_0"",
      ""Address"": ""7432F2067106C6879615DA6E8F9CA014C9392828"",
      ""PublicKey"": ""52MU2qwSabiAlyoN2bVBGEPOQyYLeyw5xJjdJwOGIPY="",
      ""PrivateKey"": ""llI1W+K5QMz12HG/sYbvWcktFBmLncMh+YP0GLiutDDnYxTarBJpuICXKg3ZtUEYQ85DJgt7LDnEmN0nA4Yg9g==""
    },
    {
      ""Name"": ""Participant_0"",
      ""Address"": ""C0A4FC8E7968F9717F8530BD6126C52D3C183357"",
      ""PublicKey"": ""X9ImxdjsiEGfZtmMeWAHpVDG/LFgosPAwcot0bEpPX8="",
      ""PrivateKey"": ""bSH4OsspagMjTRTLr5ckVOSsC3OetO25IfvW9HeaVCtf0ibF2OyIQZ9m2Yx5YAelUMb8sWCiw8DByi3RsSk9fw==""
    }
  ]
}%
```

You can also provide a Go template for the keys output, the default would look like:

```shell
--keys-template '{\
  ""Keys"": [<< range $index, $key := . >><< if $index>>,<< end >>\
    {\
      ""Name"": ""<< $key.Name >>"",\
      ""Address"": ""<< $key.Address >>"",\
      ""PublicKey"": ""<< $key.PublicKeyBase64 >>"",\
      ""PrivateKey"": ""<< $key.PrivateKeyBase64 >>""\
    }<< end >>\
  ]\
}
```",closed,True,2018-04-27 18:02:57,2018-07-19 22:50:12
burrow,paulvi,https://github.com/hyperledger/burrow/issues/749,https://api.github.com/repos/hyperledger/burrow/issues/749,Change repository metadata URL to https://www.hyperledger.org/projects/hyperledger-burrow,"Change repository metadata URL to https://www.hyperledger.org/projects/hyperledger-burrow

Currently it is https://www.hyperledger.org",closed,False,2018-04-27 14:02:30,2018-05-01 13:20:21
burrow,paulvi,https://github.com/hyperledger/burrow/issues/748,https://api.github.com/repos/hyperledger/burrow/issues/748,Roadmap and plans,Where is roadmap and future plans for this project?,closed,False,2018-04-27 02:03:58,2018-05-14 11:40:29
burrow,smblucker,https://github.com/hyperledger/burrow/pull/747,https://api.github.com/repos/hyperledger/burrow/issues/747,Adding tests to state_cache_test.go,This PR completes the testing functions for state_cache.,closed,True,2018-04-25 20:39:10,2018-05-16 18:51:39
burrow,smblucker,https://github.com/hyperledger/burrow/pull/746,https://api.github.com/repos/hyperledger/burrow/issues/746,Making substantive and cosmetic changes to api.md,This PR corrects errors concerning the function and handling of public (and private) keys and the statement of the appropriate HTTP method for GenPrivAccount. This PR also makes some cosmetic/grammatical changes.,closed,True,2018-04-23 18:30:17,2018-04-27 13:29:21
burrow,smblucker,https://github.com/hyperledger/burrow/issues/745,https://api.github.com/repos/hyperledger/burrow/issues/745,Issues with draft of api.md,"There is a substantive issue at LN# 135:

""When using a client-server setup, do NOT send public keys over non-secure connections. The only time this is fine is during development when the keys are nothing but test data and does not protect anything of value. Normally they should either be kept locally and used to sign transactions locally, held on the server where the blockchain client is running, or be passed over secure channels.""

I believe what is meant here is that 'private keys' should not be sent over non-secure connections. This is also indicted by the reference to signing transactions, as private keys are used to cryptographically sign data, transactions, etc.

There is another substantive issue at LN# 520:

The HTTP method indicated for GenPrivAccount is 'GET'; this is contradicted by its elaboration at LN# 1927 where the indicated method is 'POST'.

In addition, there are numerous cosmetic and grammatical changes that could be made to clean up this document--see LN#'s 21, 26, 73, 104, 113, 127, 257, 259, 261, 267, 269, 307, 309, 360, 362, 430, 446, 536, 538, 635, 642, 684, 951, 1170, 1213, 1235, 1621, 1692, 1812, 1961, 1980, 2033, and 2039.
",closed,False,2018-04-20 19:50:56,2018-05-01 13:34:47
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/744,https://api.github.com/repos/hyperledger/burrow/issues/744,Ensure storing zero value removes the key rather than panics,"`SetStorage` with a zero value is meant to indicate removal but in new IAVL would cause a panic. This resolves that by calling remove on underlying tree when a nil value is passed to execution state

See: https://github.com/hyperledger/burrow/blob/develop/vendor/github.com/tendermint/iavl/tree.go#L92",closed,True,2018-04-20 16:45:01,2018-05-10 20:06:25
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/743,https://api.github.com/repos/hyperledger/burrow/issues/743,Add file and json logging instructions.,"With this change, running `burrow configure -l json,file,/tmp/foo.log` produces a burrow config containing:

```toml
[Logging]
  ExcludeTrace = false
  NonBlocking = false
  [Logging.RootSink]
    [Logging.RootSink.Output]
      OutputType = ""file""
      Format = ""json""
      Path = ""/tmp/foo.log""
```",closed,True,2018-04-20 15:53:09,2018-05-10 20:06:56
burrow,b00f,https://github.com/hyperledger/burrow/pull/742,https://api.github.com/repos/hyperledger/burrow/issues/742,Better function naming,"Changes:
Rename `NewBlockChain` to `newBlockchain` and `LoadBlockchain` to `loadBlockchain`",closed,True,2018-04-16 11:45:19,2018-04-19 20:37:35
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/741,https://api.github.com/repos/hyperledger/burrow/issues/741,Disable authenticated peer connections ,"To preserve pre-Tendermint-0.16.0 behaviour in private validator pool.
",closed,True,2018-04-15 20:28:28,2018-05-10 20:06:56
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/740,https://api.github.com/repos/hyperledger/burrow/issues/740,Upgrade to Tendermint 0.18.0 (and other dependencies),"Stacked on: https://github.com/hyperledger/burrow/pull/739

Includes:
- Upgrade Tendermint to 0.18.0
- Upgrade IAVL to latest version
- Upgrade all other deps
- Add `burrow configure --separate-genesis-doc genesis.json` to create genesis.json
- Run bosmarmot integration tests including new JS tests
- Update docker file alpine and go versions and build burrow binary with full version coding (commit etc) ",closed,True,2018-04-13 13:24:09,2018-07-19 22:50:49
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/739,https://api.github.com/repos/hyperledger/burrow/issues/739,Ensure that the full tendermint commit phase has finished before accepting new transactions,"This PR uses a `RWMutex` on the `executor` (i.e. the checker) to make transactor calls wait until Tendermint's commit phase has ended. Our ABCI app acquires the mempool lock as a signal that the commit phase has ended.

The mechanism is as follows:

The `checker` (an `executor`) contains a `StateCache`. The `checker` is passed to the ABCI `App` and also to the `Service`. In the app `CheckTx` updates the checker's state via calls to `Execute`. The checker has a RWMutex and when the checkers `state.Reader` methods are called it acquires a read lock. The write lock however is controlled externally (this allows us to block reads while we update).

The app locks the checker during commit and schedule it to be unlocked as soon as we area able to acquire a lock on tendermint's mempool. The service wraps the checker in an `Accounts` object and the `Transactor` is passed this object. When the `Transactor` tries to sign a transaction it queries the checker it has been passed to get the sequence number. If the checker is locked then this call blocks and this is how we avoid transact calls concurrent with a mempool update (which would result in us signing with a previous sequence number).

Anything that wants to read synchronised mempool state should use the checker. 

",closed,True,2018-04-11 18:59:06,2018-05-10 20:06:56
burrow,b00f,https://github.com/hyperledger/burrow/pull/738,https://api.github.com/repos/hyperledger/burrow/issues/738,Test ci,test,closed,True,2018-04-10 11:17:10,2018-04-11 08:08:16
burrow,b00f,https://github.com/hyperledger/burrow/pull/737,https://api.github.com/repos/hyperledger/burrow/issues/737,Upgrade to tendermint 18.0.0,"Changes:

* Upgrade to tendermint 18
* remove validators from blockchain object (it's needed to show validators per round)
* Rename Validator to GenValidator in genesis.go for better code understanding
* Remove vendor folder from project (it's not necessary)
* removing json tags
",closed,True,2018-04-10 11:03:46,2018-04-12 11:24:23
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/736,https://api.github.com/repos/hyperledger/burrow/issues/736,WIP: add debug for mystery non-issue of the perfect mutual exclusion,,closed,True,2018-04-10 09:20:28,2018-09-05 13:55:26
burrow,mandarvaze,https://github.com/hyperledger/burrow/pull/735,https://api.github.com/repos/hyperledger/burrow/issues/735,Fixed link to DEVELOPER_CERTIFICATE_OF_ORIGIN.md,"an extra `.github` lead to https://github.com/hyperledger/burrow/blob/master/.github/.github/DEVELOPER_CERTIFICATE_OF_ORIGIN.md which was 404

Signed-off-by: Mandar Vaze <mandarvaze@gmail.com>",closed,True,2018-04-06 15:17:16,2018-04-08 12:40:45
burrow,mandarvaze,https://github.com/hyperledger/burrow/pull/734,https://api.github.com/repos/hyperledger/burrow/issues/734,Fixed URL for glide in the README,"Without https - the URL was resolved as https://github.com/hyperledger/burrow/blob/master/github.com/Masterminds/glide - which was 404

Signed-off-by: Mandar Vaze <mandarvaze@gmail.com>",closed,True,2018-04-06 13:40:13,2018-04-08 12:40:28
burrow,seanyoung,https://github.com/hyperledger/burrow/pull/733,https://api.github.com/repos/hyperledger/burrow/issues/733,State cache fixes,,closed,True,2018-04-06 13:11:34,2018-04-06 23:29:25
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/732,https://api.github.com/repos/hyperledger/burrow/issues/732,Add install_db target and dirty hash,"Add install_db make target and a hash summarising any tracked changes in
the working directory that will be added to burrow --version output when
burrow is build with a dirty working dir - useful for distinguishing
builds against uncommitted code.",closed,True,2018-04-06 09:57:13,2018-04-06 13:03:34
burrow,compleatang,https://github.com/hyperledger/burrow/pull/731,https://api.github.com/repos/hyperledger/burrow/issues/731,fix key management on known accounts; add chain name flags,"this PR integrates two changes:

* the addition of a `--chain-name` flag to both `burrow configure` and `burrow spec`. since we write the output via both commands, it should be overwrite-able by both commands. if we want to only allow the flag to exist in one place it should go in `burrow configure` rather than in burrow spec.
* fixing of a problem when the genesisSpec was given known accounts. the result of those known account|pubKeys were not properly passed through the parser. ",closed,True,2018-04-04 23:11:57,2018-04-06 09:55:42
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/730,https://api.github.com/repos/hyperledger/burrow/issues/730,To be consistent with GenesisDoc GenesisSpec should use 'PublicKey' as,"field name

Signed-off-by: Silas Davis <silas@monax.io>",closed,True,2018-04-04 20:12:56,2018-04-06 09:56:22
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/729,https://api.github.com/repos/hyperledger/burrow/issues/729,Genesis spec public key,,closed,True,2018-04-04 20:12:54,2018-04-06 09:56:22
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/728,https://api.github.com/repos/hyperledger/burrow/issues/728,Mempool sequence numbers and address based transact,"This PR introduces address-based signing for the Transactor initially exposed via the V0 RPC. It includes a number of refactorings along the way relating to transaction signing, mempool state, sequence numbers, and transaction formation, including:

- Use of `AddressableSigner` in most places `PrivateAccount` was used abstracting over key client based signing and private key signing
- Refactoring transactions to capture all signing under a single method that is added to the `Tx` interface (breaking out txs into their own files for clarity)
- Adds some additional state tests
- Factors out integration test logic and uses this to add sorely needed v0 integration tests similar to tm integration test and identically wrapped
- Adds simple benchmark for transact
- Fixes #715 ensuring transact handles recursive calls correctly
- Enables access to the mempool as a `state.AccountGetter` so that `Transactor` can optimistically assign sequence numbers as a delegated signer
- Enables address based signing via the `InputAddress` field on various of the v0 methods while maintaining backward-compatibility by keeping `PrivKey`. Both options share the same refactored `Transactor` by using the `InputAccount` abstraction.
- Ensures that a mempool backlog produced by the transactor spanning many blocks will succeed if the transactions are compatible by committing state before reseting check cache 
",closed,True,2018-04-03 22:03:56,2018-09-05 13:54:45
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/727,https://api.github.com/repos/hyperledger/burrow/issues/727,State refresh logging and debug,"This PR aims to stabilise Burrow on our large real-world set of contracts exercising a large portion of EVM and SNative functionality. In particular it:

- Implements EIP 150 so that EVM produced by recent (tested with solc 0.4.21) passes expected gas to child call frames
- Adds overflow safety checking when producing 64-bit integers from 256-bit EVM words
- Ensures that we refresh our mutable pointers to immutable account state after calls and creation (else we may not get latest snative permissions or other account state altered down the call stack)
- Massively optimises logging particularly providing a fast past for logging that does not dominate CPU usage
- Also refactors our `Logger` to be a somewhat simpler struct wrapper around two go-kit loggers
- Adds debug profiling server options and makes EVM-level debug accessible via an options system
- Various Go usage improves (e.g. dropping singleton interfaces)
- Adds a few more tests to `state.Cache` (more ought to be added)
- Adds git commit version to `burrow --version` when built with `make build_db` via `-ldflags ""-X ...""`",closed,True,2018-04-03 15:03:18,2018-05-25 17:31:50
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/726,https://api.github.com/repos/hyperledger/burrow/issues/726,T1 network stabilisation,This is stacked on: https://github.com/hyperledger/burrow/pull/721 so merge that first.,closed,True,2018-04-02 18:42:37,2018-04-03 15:06:36
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/725,https://api.github.com/repos/hyperledger/burrow/issues/725,Awful stacked misc branch,,closed,True,2018-03-29 15:29:06,2018-04-15 20:27:59
burrow,ktr0731,https://github.com/hyperledger/burrow/issues/724,https://api.github.com/repos/hyperledger/burrow/issues/724,what is difference between Account and PrivAccount?,"Burrow has a development RPC `burrow.genPrivAccount` which creates PrivAccount. but I couldn't find the RPC which creates Account.
what is difference Account and PrivAccount? and we can create new Accounts (not PrivAccount) by Burrow RPC?",closed,False,2018-03-23 07:40:16,2018-05-01 13:47:15
burrow,qpakzk,https://github.com/hyperledger/burrow/pull/723,https://api.github.com/repos/hyperledger/burrow/issues/723,Fix the Table of Contents in README.md,PR again! Previous PR was #720 .,closed,True,2018-03-17 04:58:28,2018-03-19 06:01:31
burrow,qpakzk,https://github.com/hyperledger/burrow/pull/722,https://api.github.com/repos/hyperledger/burrow/issues/722,Fix the Table of Contents in README.md,"First, synchronize headers with contents' name.
Equalize uppercase or lowercase letters with headers. Add a question mark.

Second, fix the link of ""What is Burrow ?"", which didn't work.

Third, change the loction of  ""Future work"" and ""License"".
Because the text has a different order with the table of contents.",closed,True,2018-03-16 15:38:29,2018-03-16 15:39:45
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/721,https://api.github.com/repos/hyperledger/burrow/issues/721,State improvements,"This PR provides a number of state-related fixes and improvements:

- Reintroduces the saving and loading on startup of Burrow state to disk via go-db with blockchain and execution state stored separately but synchronised by the state root hash
- Remove poorly implemented `BlockCache` and `TxCache` in favour of a unified `StateCache` that does not access database
- Provides a separate `NameRegCache`
- Localises database access to `execution/state.go`
- Implement state writes/reads through the `account/state.go` interfaces only
- Upgrades our merkle tree to the one being maintained in https://github.com/tendermint/iavl (though not the latest version because it depends on a newer tmlibs version than the one required by our version of Tendermint)
- Provides versioned snapshots of state for every block - laying groundwork for doing something similar for events. Currently we are not exposing this versioned access
- Fixes some issues with test timings by subscribing to the account input event instead of new block


**Currently outstanding**
- Unit tests for `StateCache`, `NameRegCache`, and `State`
- StorageRoot is no longer being set on `ConcreteAccount`. We are using a single tree and a safer mechanism for database access, but we are not storing a tree per account so don't have easy access to a storage root for _each_ account. We can either scrap this, store a multitude of trees, or compute it on demand
- Upgrading to the newest IAVL tree - possibly we should depend on our own fork where we can vendor (or remove) the problematic dependencies as well as add some useful features (like the ability to store a forest of trees in the same database and load the roots).
- Deal with intermittent failure affecting `TestWSCall*` tests

Hoping that @smblucker @seanyoung can take a look at these issues",closed,True,2018-03-15 14:35:02,2018-09-05 13:54:37
burrow,qpakzk,https://github.com/hyperledger/burrow/pull/720,https://api.github.com/repos/hyperledger/burrow/issues/720,Fix the Table of Contents in README.md,"First, synchronize headers with contents' name.
Equalize uppercase or lowercase letters with headers. Add a question mark.

Second, fix the link of ""What is Burrow ?"", which didn't work.

Third, change the loction of  ""Future work"" and ""License"".
Because the text has a different order with the table of contents.",closed,True,2018-03-15 11:04:26,2018-03-16 08:16:05
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/719,https://api.github.com/repos/hyperledger/burrow/issues/719,[State] replace merkle tree and BlockCache,"The `BlockCache` is badly designed (writes directly to database for storage using merkle trees sharing a database that become invalid by orphan reaping and external saves) and badly implemented (keeps writing to the database and hashing stored values every block even though they are not dirty). It has been the source of various panics.

It had been set up to store cache lines across blocks until this hotfix: https://github.com/hyperledger/burrow/pull/718 - but it clearly leaks memory (nothing is ever removed) and it. It's not clear there any benefit keeping cache between blocks and this may have been an accident all along.

We need to reimplement the cache so it works against a `StateWriter` interface and we may want to/need to take the time to upgrade to a version of http://github.com/tendermint/iavl at the same time.",closed,False,2018-03-14 12:39:02,2018-05-01 13:48:57
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/718,https://api.github.com/repos/hyperledger/burrow/issues/718,Hotfix BlockCache accumulating writes when it shouldn't,This is a near-term fix for #713. Rather than accumulating a cache across block we just maintain it while a single block of transactions are being applied. This does not logically effect the result of a block.,closed,True,2018-03-14 12:31:16,2018-05-01 14:05:43
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/717,https://api.github.com/repos/hyperledger/burrow/issues/717,Protect against panics in websocket process,"This is an updated version of: https://github.com/hyperledger/burrow/pull/625

We seem to be protected from panics on 1337 in the `JSONService` already",closed,True,2018-03-08 19:26:37,2018-05-10 20:06:56
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/716,https://api.github.com/repos/hyperledger/burrow/issues/716,Fix IAVL transitive dependency to make Burrow easier to depend on.,Also sync bos version,closed,True,2018-03-08 12:47:13,2018-03-12 10:05:37
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/715,https://api.github.com/repos/hyperledger/burrow/issues/715,Ensure TransactAndHold waits for the root AccountCall event,"This issue is extracted from: https://github.com/hyperledger/burrow/pull/624.

`TransactAndHold` subscribes to the AccountCall event here: 

https://github.com/hyperledger/burrow/blob/develop/execution/transactor.go#L243

This waits for an AccountCall event that has a `TxHash` matching the broadcast transaction. However any nested call will also post an AccountCall event and since they are fired in post-order nested calls will be the earlier event. We need to wait for the root (externally generated) AccountCall event to be received. To do this we can attach the call depth (already tracked in the VM) to the event (and event tags) and when subscribing ensure we are at call depth 0 (the root frame).

The PR to solve this should include a test in execution_test.go that demonstrates that subscription to AccountCall can yield the wrong call event in the current implementation. We do not necessarily need to replicate at the integration test level against `TransactAndHold`
",closed,False,2018-03-08 12:45:27,2018-05-01 13:51:53
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/714,https://api.github.com/repos/hyperledger/burrow/issues/714,Bump bos version to one that tests SIGNEXTEND,"and version bump to pre-release
",closed,True,2018-03-07 23:09:00,2018-03-08 12:34:46
burrow,pascalverlinden,https://github.com/hyperledger/burrow/issues/713,https://api.github.com/repos/hyperledger/burrow/issues/713,High cpu load and performance problem,"
**Version info**
Monax CLI Version: 0.17.0 & 0.18.0
Monax db 0.16.3
docker  17.03.0-ce 
OS: Ubuntu 14.04.5 LTS

**Description**
Creating many contracts leads to high CPU load and performance problems with the chain. After stopping the chain the CPU usage drops, but then it is no longer possible to start the chain as this leads to an error ""panic: Paniced on a Sanity Check: Expected storeHeight (1867) and stateHeight (1866) to match"", which seems to be a problem with Tendermint ( see https://github.com/tendermint/tendermint/issues/388 ). There has been a fix in Tendermint (version 0.9) but this version is not used yet by monax, apparently.

There might be a relation with the following issue: https://github.com/hyperledger/burrow/issues/611

**Steps to reproduce**
Example code is available in https://github.com/pascalverlinden/perfo
",closed,False,2018-03-07 15:18:53,2018-05-01 13:52:52
burrow,haojun,https://github.com/hyperledger/burrow/issues/712,https://api.github.com/repos/hyperledger/burrow/issues/712,How to deploy the chain with multiple validators on a single host?,"Hi all, 
I want to test burrow on my machine so I tried to initiate a chain with 1 root and 5 validators with:
```
monax chains make simplechain --account-types=Root:1,Validator:5 --unsafe
```

Then I tried to initiate root and validators on the same host (the seeds and service ports were modified to prevent conflicts):
 ```
monax chains start simplechain --init-dir ~/.monax/chains/simplechain/simplechain_root_000/
monax chains start simplechain --init-dir ~/.monax/chains/simplechain/simplechain_validator_000/
......
```
It failed, and i guess because monax does not allow starting chains repeatedly with the same name. 
I also tried to give a new chain name for each validator, but that would violate the definition in genesis block. 

So is there any simple way to initiate multiple validators on the same host?
Thanks in advance.",closed,False,2018-03-07 07:15:24,2018-03-08 00:53:43
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/711,https://api.github.com/repos/hyperledger/burrow/issues/711,Making case and naming conventions consistent,"for return types shared by the RPC - leaving v0 only one as they were
(for now). This is for integration in Bosmarmot.
",closed,True,2018-03-06 18:41:51,2018-03-08 12:35:02
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/710,https://api.github.com/repos/hyperledger/burrow/issues/710,Add some more useful comments in permissions.go ,Hardly perfection but better than being slapped in the face with a haddock.,closed,True,2018-03-06 13:55:46,2018-03-07 11:11:42
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/709,https://api.github.com/repos/hyperledger/burrow/issues/709,Constrain Tendermint dependency versions more tightly,"Needed for Bosmarmot to not upgrade deps inadvertently. This change does not effect the versions of the dependencies we have vendored.

I have also removed a dependency on fatih/set that was used by a single unused helper function `AnalyzeJumpDests` of historical origin by removing that function, since I don't consider that to be 'pulling its weight'",closed,True,2018-03-05 21:37:45,2018-03-05 22:03:17
burrow,b00f,https://github.com/hyperledger/burrow/issues/708,https://api.github.com/repos/hyperledger/burrow/issues/708,Black-box test strategy,"Suggestion:

Having different package name for test files will make sure the package will test as a black box entity. 
I suggest you to follow this naming convention for test files, like: 
`package evm_test`
instead of 
`package evm`

you can check this here for more testing strategies in go:
https://stackoverflow.com/questions/19998250/proper-package-naming-for-testing-with-the-go-language

Let me know if you agree with it, then I can help you fixing it.
",closed,False,2018-03-05 07:07:34,2018-06-10 03:55:27
burrow,phymbert,https://github.com/hyperledger/burrow/pull/707,https://api.github.com/repos/hyperledger/burrow/issues/707,Support of embedded keys pair for tendermint private validator inside burrow instead of monax.keys,"This PR allows you to configure inmemory crypto validator if you do not want to depend on an external keys API to sign messages for private tendermint validator:

By API:
```go
        conf := config.DefaultBurrowConfig()
...
	conf.Crypto.KeysServer = nil // Disable external call to sign and load public key
        // Generate keys OR load your own pair programatically
	conf.Crypto.InMemoryCrypto, err = inmemory.DefaultInMemoryCryptoConfig() 
...
```

Or by Config (not **safest** approach to store private key in file) - example:
```toml
[Crypto]
  [Crypto.InMemoryCrypto]
     PrivateKey = ""{\""type\"":\""ed25519\"",\""data\"":\""YOUR PRIVATE KEY\""}""
     PublicKey = ""{\""type\"":\""ed25519\"",\""data\"":\""2e4bbbffad9325db4e18725c6f31234ee303ac43f8ff4bee167b6e83a4c49197\""}""
```

Fixes #702",closed,True,2018-03-04 07:02:04,2018-06-04 18:28:53
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/706,https://api.github.com/repos/hyperledger/burrow/issues/706,Support bitwise shift opcodes SHL SHR and SAR,See: https://github.com/ethereum/EIPs/blob/e451b058521ba6ccd5d3205456f755b1d2d52bb8/EIPS/eip-145.md,closed,False,2018-03-03 11:27:01,2018-05-14 11:40:40
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/705,https://api.github.com/repos/hyperledger/burrow/issues/705,[EVM] Support RETURNDATACOPY and RETURNDATASIZE opcodes,See: https://github.com/ethereum/EIPs/blob/dde2fe59532290f285a3ae79bd7347f0a7b69d6d/EIPS/eip-211.md,closed,False,2018-03-03 11:23:08,2018-06-05 09:32:06
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/704,https://api.github.com/repos/hyperledger/burrow/issues/704,Fix SIGNEXTEND EVM issue and harden execution layer,"This fixes an implementation bug in the `SIGNEXTEND` (https://github.com/hyperledger/burrow/blob/master/manager/burrow-mint/evm/vm.go#L355-L372) where the mask was added rather than anded: `numb.Add(numb, mask)` when it should have been: `numb.And(numb, mask)`

In fixing this I took the opportunity to centralise our logic for using `big.Int`, clean up our arithmetic code, and do a manual audit of other opcodes to see if there were any other issues on inspection. I didn't find anything else so the refactored code should function in a mostly identical way (we have some added safety around overflow by the use of big ints. This fixes #696. I have a full integration test coming in Bosmarmot.

This also removes a panic from memory fixing #697 and uses `big.Int` for bounds checking and future expansion (e.g. paging memory).

It also stops panics caused by a tx triggering a bug from taking down a chain by recovering from the panic and returning an error. 

",closed,True,2018-03-02 18:52:47,2018-03-05 20:12:51
burrow,zramsay,https://github.com/hyperledger/burrow/issues/703,https://api.github.com/repos/hyperledger/burrow/issues/703,[Docs] document logging,see comment in #700 ,closed,False,2018-03-02 07:11:50,2018-11-13 03:59:59
burrow,phymbert,https://github.com/hyperledger/burrow/issues/702,https://api.github.com/repos/hyperledger/burrow/issues/702,[Keys] Support in-burrow crypto API instead of external monax.keys REST API,"Would be nice to use burrow without any external crypto API REST server call like monax.keys.

There is already everything in MockKeyClient and tendermint/go-crypto to do it: allow an entry point in config API to override default monax.keys dependency within kernel creation:

1. Make ValidatorAddress not mandatory
2. Create tendermint.NewNode with a new burrow privValidator API
3. New entry in BurrowConfig that wrap Keys or new InMemoryCrypto struct
3. Support flexible API to acccess node private key in InMemoryCrypto

Example to be discussed:
```go
type BurrowConfig struct {
	// ValidatorAddress *acm.Address =>  Moved to Keys
	GenesisDoc       *genesis.GenesisDoc
	Tendermint       *tendermint.BurrowTendermintConfig
        // Keys             *keys.KeysConfig ==> Moved to CryptoConfig and Keys Server
	Crypto           *CryptoConfig // New top crypto config
	RPC              *rpc.RPCConfig
	Logging          *logging_config.LoggingConfig
}

type CryptoConfig struct {
	KeysServer  *keys.KeysConfig // If the user wants to keep current behavior
	InMemoryCrypto *InMemoryCrypto // If user wants in-node crypto
}

type InMemoryCrypto struct {
	Address    acm.Address
	PrivateKey [ed25519.PrivateKeySize]byte
	PublicKey  []byte
} 

type KeysConfig struct {
	URL string,
        ValidatorAddress *acm.Address
}

```
I think it is usefull for user who want to use only burrow and tendermint while minimizing REST invocations.

Thank you for your review, if you are ok with this idea I may submit a PR.

_like burrow, keep it up!_ 
",closed,False,2018-02-28 06:41:47,2018-06-05 09:34:27
burrow,RobertDiebels,https://github.com/hyperledger/burrow/issues/701,https://api.github.com/repos/hyperledger/burrow/issues/701,VirtualBox related LevelDB illegal argument error,"Please include in your bug report:

- [x] `burrow version` (docker image tag or branch if built from source) 
- [ ] `monax version` (if applicable)
- [ ] `go version` (if applicable) 
- [x] `docker version` (if applicable) Chosen by kubernetes
- [ ] operating system details (osx/windows/linux) 
- [x] what you expected to happen
- [x] what actually happened
- [x] steps to reproduction

**Note**: This is something Hyperledger Burrow can not solve. I'm putting this up so others do not have to waste 2 days trying to solve the issue. Feel free to close it.

### Behaviour
Mounting a hostpath from a Virtualbox VM into a docker container causes a Illegal Argument error by LevelDB.

### Expected behaviour
I'd expect it to be possible to mount a path into

### Software Versions
_Related to the host OS_:
Host OS: Windows 10 Home
VirtualBox: 5.2.6 r120293 (Qt5.6.2)
Minikube version: v0.25.0

_Running inside VirtualBox_:
Burrow version: quay.io/db:0.17.0 
Kubernetes version: 1.9

### Reproduction
To ease reproduction I created a repository: https://github.com/RobertDiebels/virtualbox-minikube-illegal-argument

- Launch a virtualbox VM.
  - Make sure it has docker installed.
- Follow the the instructions in the README.md here: https://github.com/eugeneware/mmap#test-if-mmap-works-using-volume-mapping
  - It showcases the issue of mounting a path from a VirtualBox VM into a Docker container.
  - There are two variations you should try here.
    1. Use a path in the VM that is **not** shared to the Host OS.
       - So: ``docker run --rm -it -v `pwd`/local.txt:/app/test.txt eugeneware/mmap``
    2. Use a path in the VM that **is** shared to the Host OS.
       - So: ``docker run --rm -it -v /path/to/shared/folder/local.txt:/app/test.txt eugeneware/mmap``
  - I've attempted both using the Kubernetes equivalent (a Pod) in both cases the container crashed.
    - My assumption here is that Kubernetes essentially does a ``docker run --rm -it -v /path/to/shared/folder/local.txt:/app/test.txt eugeneware/mmap`` under the hood.

### Cause
I added this cause section so it's clear what is causing the problem.

The problem seems to be a very low-level interoperability issue between VirtualBox and Docker.
Where mounting a folder which Virtualbox mounted from the Host OS is mounted using `vboxfs`.
When mounting that shared folder into a Docker container that runs LevelDB a ``illegal argument`` error is thrown.
There seem to be some indications that this is due to an inability to use `mmap` on `vboxfs`.

See this issue: https://github.com/syndtr/goleveldb/issues/103

#### System overview
I'll explain the system call stack with arrows so it is clear what the hierarchy is.
``Windows 10 Home -> Minikube -> VirtualBox -> Kubernetes -> Docker -> Hyperledger Burrow -> Tendermint -> LevelDB``

Shown as actions through nested bullet points.
- Windows 10: Install ``minikube`` and `kubectl`.
  - Minikube: Run ``minikube start`` and `kubectl proxy`.
  - VirtualBox: Use the ``/c/Users/`` shared folder between Windows and VirtualBox.
    - Kubernetes: Create a Pod 
      - The Pod uses a Persistent Volume (PV) with a HostPath definition set to ``/c/Users`` through a Persistent Volume Claim (PVC).
      - The PVC is mounted into the pod as a volume.
      - It should run Hyperledger Burrow as a container.
        - The container mounts the PVC volume to ``/home/monax/.monax``
      - Docker: Kubernetes handles mounting the ``/c/Users`` hostPath defined in the PV to ``/home/monax/.monax``
        - Hyperledger Burrow: Tries to start Tendermint as a consensus engine.
          - Tendermint: Tries to start LevelDB.
            - LevelDB: Tries to sync ``/home/monax/.monax/data/burrowmint/data/burrowmint.db``
              - This throws the ``illegal argument`` error `Panicked on a Sanity Check: Error initializing DB: sync /home/monax/.monax/data/burrowmint/data/burrowmint.db: invalid argument`

#### Shared folder usage overview
The problem is essentially caused by the filesystem used by VirtualBox to actually share the folder.

I'll explain the folder call-stack with arrows so it is clear what the hierarchy is.
``/home/monax/.monax/data/burrowmint/data/burrowmint.db/ -> /c/Users -> C:\Users\``

To illustrated further here's the same call-stack with system components.
``LevelDB (Docker) -> VirtualBox (Kubernetes Node) -> Windows 10``

The core issue lies with the mounting of a shared folder from VirtualBox into the Docker container. I.e. 
``VirtualBox (Kubernetes Node)-> LevelDB (Docker)``

The shared folder is mounted into the Docker container using ``vboxfs``. 
I.e. `/home/monax/.monax/data/burrowmint/data/burrowmint.db/ -> /c/Users `

Turns out that LevelDB has some issues with reading folders that are mounted into Docker using ``vboxfs``.

### Solution attempts
Here are the solutions I've attempted to resolve this issue.

#### Kubernetes-based
1. Simply do not use the Shared folder as a Persistent Volume (PV) to begin with.
   - I tried this but I ran into other issues. 
   - I will be exploring this further but I'm unsure whether this will resolve the core issue of VirtualBox mounting hostPaths as ``vboxfs``
1. Allow Kubernetes to dynamically provision a PV to a Persistent Volume Claim.
   - This crashes the Pod with a ``Persistent Volume Claim is not bound`` error.
1. Use a Hostpath volume instead of a Persistent Volume Claim volume.
   - Doesn't work. 
   - This crashes the Container with an error that states it cannot create a directory at ``/home/monax/.monax/data``
   - This could be due to container privileges or the ``vboxfs`` issue.
     - I might attempt running the container in privileged mode but I'm uncertain this will resolve the issue.

#### Minikube-based
1. Mount a different folder into the VirtualBox VM.
   - Not possible. 
   - An issue arises where Minikube cannot find the VM's IP causing the mount to fail: https://github.com/kubernetes/minikube/issues/2072
1. Use a different Minikube driver.
   - Not possible. 
   - My host OS is Windows 10 Home. The other drivers are not available on that OS.
1. Do not use Minikube to run a Kubernets cluster locally.
   - Currently the only valid alternative to Minikube on Windows is IBM Private Cloud.
     - IBM Private Cloud also uses VirtualBox under the hood. 
     - However, it uses Vagrant to launch VirtualBox VM's. This allows one to share folders using ``nfs`` instead of `vboxfs`.
       - This is offered as a workaround in this comment: 
   - I've opened an issue with IBM Private Cloud asking how I would achieve this: https://github.com/IBM/deploy-ibm-cloud-private/issues/89

### Related issues:
- LevelDB Illegal Argument bug report: https://github.com/syndtr/goleveldb/issues/103
  - GoLevelDB is used by Tendermint.
- LevelDB/LevelUp Illegal Argument bug report: https://github.com/Level/levelup/issues/222
  - VirtualBox mention: https://github.com/Level/levelup/issues/222#issuecomment-30524071
  - Vagrant workaround: https://github.com/Level/levelup/issues/222#issuecomment-35228431
- Docker/VirtualBox 
  - Mounting issue mention: https://github.com/Level/levelup/issues/222#issuecomment-35227878
  - Mounting issue mention: https://github.com/syndtr/goleveldb/issues/103#issuecomment-110880961
- VirtualBox ``mmap`` bug report: https://www.virtualbox.org/ticket/819#comment:55
- IBM Private cloud ``nfs`` mount request: https://github.com/IBM/deploy-ibm-cloud-private/issues/89",closed,False,2018-02-27 12:13:44,2018-04-18 09:19:41
burrow,zramsay,https://github.com/hyperledger/burrow/pull/700,https://api.github.com/repos/hyperledger/burrow/issues/700,Update readme,,closed,True,2018-02-27 03:23:42,2018-03-02 23:44:12
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/699,https://api.github.com/repos/hyperledger/burrow/issues/699, Support creating contracts with Transact by accepting empty address,"This restores correct behaviour for JS libs, making this smoke test pass: https://github.com/monax/bosmarmot/blob/master/test/test.js.

This PR is stacked on top of: https://github.com/hyperledger/burrow/pull/695 so merge that first.",closed,True,2018-02-26 22:12:55,2018-03-24 18:31:35
burrow,smblucker,https://github.com/hyperledger/burrow/pull/698,https://api.github.com/repos/hyperledger/burrow/issues/698,WIP: Implement Revert Opcode,"These changes represent a first attempt at implementing the REVERT opcode (0xFD) into burrow's EVM; this includes assigning its hex and string value, writing its case definition, writing checks in relevant case definitions, and writing a test.",closed,True,2018-02-26 16:27:41,2018-04-26 13:33:10
burrow,pouladzade,https://github.com/hyperledger/burrow/issues/697,https://api.github.com/repos/hyperledger/burrow/issues/697,panic: runtime error: slice bounds out of range,"Please include in your bug report:

- [0.17.1 ] `burrow version` (docker image tag or branch if built from source)
- [ No] `monax version` (if applicable)
- [1.9.4 ] `go version` (if applicable)
- [No ] `docker version` (if applicable)
- [Ubuntu 16.4 LTS amd64 ] operating system details (osx/windows/linux)
- [ ] what you expected to happen
- [ ] what actually happened
- [manipulating bytes in solidity assembly ] steps to reproduction

[burrow-log.txt](https://github.com/hyperledger/burrow/files/1759074/burrow-log.txt)

```
DBUG[02-26|21:48:09] Account has permission                   log_channel=Trace run_id=aaa20d58-1afb-11e8-801c-d770f71e1cc1 trace=""[convention.go:35 log.go:134 convention.go:50 convention.go:35 execution.go:1019 execution.go:1048 execution.go:400 burrow-mint.go:120 local_client.go:74 app_conn.go:73 execution.go:93 execution.go:29 execution.go:212 replay.go:360 replay.go:346 replay.go:296 replay.go:235 multi_app_conn.go:99 service.go:99 node.go:84 tendermint.go:119 consensus.go:37 core.go:63 serve.go:159 serve.go:177 command.go:635 command.go:710 command.go:669 burrow.go:45 main.go:22 proc.go:195 asm_amd64.s:2337]"" scope=""[Serve Core BurrowMintPipe BurrowMint ExecTx]"" account_address=C43A1F81D8AB6C75B7A1916A95BED38A5EA5FFA8 perm_flag=call
DBUG[02-26|21:48:09]                                          log_channel=Trace run_id=aaa20d58-1afb-11e8-801c-d770f71e1cc1 trace=""[execution.go:445 burrow-mint.go:120 local_client.go:74 app_conn.go:73 execution.go:93 execution.go:29 execution.go:212 replay.go:360 replay.go:346 replay.go:296 replay.go:235 multi_app_conn.go:99 service.go:99 node.go:84 tendermint.go:119 consensus.go:37 core.go:63 serve.go:159 serve.go:177 command.go:635 command.go:710 command.go:669 burrow.go:45 main.go:22 proc.go:195 asm_amd64.s:2337]"" scope=""[Serve Core BurrowMintPipe BurrowMint ExecTx]"" output_account=""Account{269A5DA1325AFF9D3D1E1429577EFF5C9F0AE17A:<nil> B:0 C:1241 S: P:{Base: 11111111111111; Set: 11111111111111 []}}""
DBUG[02-26|21:48:09] Calling existing contract                log_channel=Trace run_id=aaa20d58-1afb-11e8-801c-d770f71e1cc1 trace=""[convention.go:35 log.go:134 convention.go:50 convention.go:35 execution.go:505 burrow-mint.go:120 local_client.go:74 app_conn.go:73 execution.go:93 execution.go:29 execution.go:212 replay.go:360 replay.go:346 replay.go:296 replay.go:235 multi_app_conn.go:99 service.go:99 node.go:84 tendermint.go:119 consensus.go:37 core.go:63 serve.go:159 serve.go:177 command.go:635 command.go:710 command.go:669 burrow.go:45 main.go:22 proc.go:195 asm_amd64.s:2337]"" scope=""[Serve Core BurrowMintPipe BurrowMint ExecTx]"" contract_address=000000000000000000000000269A5DA1325AFF9D3D1E1429577EFF5C9F0AE17A contract_code
DBUG[02-26|21:48:09]                                          log_channel=Trace run_id=aaa20d58-1afb-11e8-801c-d770f71e1cc1 trace=""[execution.go:510 burrow-mint.go:120 local_client.go:74 app_conn.go:73 execution.go:93 execution.go:29 execution.go:212 replay.go:360 replay.go:346 replay.go:296 replay.go:235 multi_app_conn.go:99 service.go:99 node.go:84 tendermint.go:119 consensus.go:37 core.go:63 serve.go:159 serve.go:177 command.go:635 command.go:710 command.go:669 burrow.go:45 main.go:22 proc.go:195 asm_amd64.s:2337]"" scope=""[Serve Core BurrowMintPipe BurrowMint ExecTx]"" callee_=(MISSING)
panic: runtime error: slice bounds out of range

goroutine 1 [running]:
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*dynamicMemory).Read(0xc421e44b00, 0xffffffffffffffe0, 0x20, 0xc421e60e30, 0x3, 0x3, 0x0, 0x0)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/memory.go:67 +0x178
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).call(0xc421e62240, 0xc4216e9480, 0xc4216e9500, 0xc42177c500, 0x4d9, 0x4d9, 0xc42001d040, 0x44, 0x44, 0x0, ...)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:657 +0x13520
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).Call(0xc421e62240, 0xc4216e9480, 0xc4216e9500, 0xc42177c500, 0x4d9, 0x4d9, 0xc42001d040, 0x44, 0x44, 0x0, ...)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:155 +0x218
github.com/hyperledger/burrow/manager/burrow-mint/state.ExecTx(0xc4201ffbf0, 0x11aaf00, 0xc421c36e60, 0xc4213b1901, 0x11ac180, 0xc4201ffe00, 0x11b7f00, 0xc421ad0a80, 0xc4213b53f0, 0xc421e96ca0)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/manager/burrow-mint/state/execution.go:521 +0x3535
github.com/hyperledger/burrow/manager/burrow-mint.(*BurrowMint).DeliverTx(0xc420083770, 0xc4201741e0, 0xf0, 0xf0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/manager/burrow-mint/burrow-mint.go:120 +0x2b2
github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client.(*localClient).DeliverTxAsync(0xc4204deb40, 0xc4201741e0, 0xf0, 0xf0, 0x0)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client/local_client.go:74 +0x85
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*appConnConsensus).DeliverTxAsync(0xc420049500, 0xc4201741e0, 0xf0, 0xf0, 0xc42133db00)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/app_conn.go:73 +0x51
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.execBlockOnProxyApp(0x0, 0x0, 0x11b8980, 0xc420049500, 0xc421e85d40, 0xc421ad0780, 0x11aa300, 0xc4214cd710)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:93 +0x749
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).ValExecBlock(0xc4204dd2b0, 0x0, 0x0, 0x11b8980, 0xc420049500, 0xc421e85d40, 0xc420170e20, 0xc421e85d40, 0x0)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:29 +0x82
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).ApplyBlock(0xc4204dd2b0, 0x0, 0x0, 0x11b8980, 0xc420049500, 0xc421e85d40, 0x1, 0xc421e96960, 0x14, 0x14, ...)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:212 +0x73
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*Handshaker).replayBlock(0xc4201fed80, 0x99c, 0x11b8980, 0xc420049500, 0x14, 0x20, 0x0, 0x0, 0xc420280a88)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/replay.go:360 +0x108
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*Handshaker).replayBlocks(0xc4201fed80, 0x11ba2c0, 0xc4204ae000, 0x0, 0x99c, 0x1, 0x0, 0x0, 0x4, 0x4, ...)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/replay.go:346 +0x2d8
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*Handshaker).ReplayBlocks(0xc4201fed80, 0x0, 0x0, 0x0, 0x0, 0x11ba2c0, 0xc4204ae000, 0x0, 0x0, 0x0, ...)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/replay.go:296 +0x67a
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*Handshaker).Handshake(0xc4201fed80, 0x11ba2c0, 0xc4204ae000, 0x0, 0x0)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/replay.go:235 +0x41a
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*multiAppConn).OnStart(0xc4204ae000, 0xc420155f60, 0x15)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/multi_app_conn.go:99 +0x1eb
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.(*BaseService).Start(0xc4204ae000, 0x0, 0x0, 0x0)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/service.go:99 +0x290
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node.NewNode(0x11bac20, 0xc4204cc2b8, 0xc4200a2820, 0x11ac380, 0xc4204f33c0, 0x2)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node/node.go:84 +0x58e
github.com/hyperledger/burrow/consensus/tendermint.NewTendermint(0xc4204d3700, 0x11b9bc0, 0xc420083770, 0x11b7f00, 0xc42021e780, 0xb34260, 0xe19e70, 0xb34260)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/consensus/tendermint/tendermint.go:119 +0xb4d
github.com/hyperledger/burrow/consensus.LoadConsensusEngineInPipe(0xc4204d3700, 0x11bacc0, 0xc4204d2600, 0x24, 0x0)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/consensus/consensus.go:37 +0x180
github.com/hyperledger/burrow/core.NewCore(0xc4201e0790, 0xa, 0xc4204d3700, 0xc4204d3780, 0x11b7f00, 0xc42021f340, 0x4, 0x0, 0x0)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/core/core.go:63 +0x2fe
github.com/hyperledger/burrow/cmd.NewCoreFromDo(0xc4204ded80, 0x7ffe9ac2204e, 0x13, 0xc54bfa)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/cmd/serve.go:159 +0x9a1
github.com/hyperledger/burrow/cmd.ServeRunner.func1(0xc4201b66c0, 0xc4204d7f20, 0x0, 0x2)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/cmd/serve.go:177 +0xaf
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).execute(0xc4201b66c0, 0xc4204d7ea0, 0x2, 0x2, 0xc4201b66c0, 0xc4204d7ea0)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:635 +0x23d
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x11fe940, 0x1, 0x1, 0xc4201b66c0)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:710 +0x2fe
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).Execute(0x11fe940, 0x0, 0xc4204e7f20)
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:669 +0x2b
github.com/hyperledger/burrow/cmd.Execute()
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/cmd/burrow.go:45 +0x312
main.main()
	/home/ahmad/projects/golang/src/github.com/hyperledger/burrow/cmd/burrow/main.go:22 +0x20
```

Contract that caused the issue, calling `test`:

```solidity
pragma solidity ^0.4.16;

contract StringTest{
    
    function test(string _in ) public returns( bytes memory _out,string memory _str){
        
        _out = new bytes(128);
        _str = new string(128);
        uint _size= bytes(_in).length;
        stringToBytes(128,bytes(_in),_out);
        bytesToString(128,_out,_size,bytes(_str));
        
    }
    
    function stringToBytes(uint256 _offst, bytes memory _input, bytes memory _output) public  {
        uint256 stack_size = _input.length / 32;
        if(_input.length % 32 > 0) stack_size++;
        
        assembly {
            let chunk := 0
            stack_size := add(stack_size,1)//adding because of 32 first bytes as the length
        loop:
            chunk := add(_input,sub(mul(32 ,stack_size),32))
            mstore(add(_output, _offst), mload(chunk))
            _offst := sub(_offst , 32)
            stack_size := sub(stack_size ,1)
            jumpi(loop , gt(stack_size,1))
        }
    }
    
    function bytesToString(uint256 _offst, bytes memory _input,uint256 _size, bytes memory _output) public  {

        uint256 stack_size = _size/32;
        if(_size % 32 > 0) stack_size++;
        
        assembly {
            let chunk_index := 1
            mstore(_output, _size)
            
        loop:
           mstore(add(_output,mul(chunk_index,32)), mload(add(_input,_offst)))
           _offst := sub(_offst , 32)
           stack_size := sub(stack_size ,1)
           chunk_index := add(chunk_index,1)
           jumpi(loop , gt(stack_size,0))
        }
    }
    
    function sizeOfInt64() public pure returns(uint8){return 8; }
}
```",closed,False,2018-02-26 14:58:27,2018-05-01 13:54:07
burrow,pouladzade,https://github.com/hyperledger/burrow/issues/696,https://api.github.com/repos/hyperledger/burrow/issues/696,Burrow's EVM returns results different from Remix(Javascript VM),"Please include in your bug report:

- [0.17.1 ] `burrow version` (docker image tag or branch if built from source)
- [ No monax] `monax version` (if applicable)
- [1.9.4 ] `go version` (if applicable)
- [No ducker ] `docker version` (if applicable)
- [Ubuntu 16.04 amd64 ] operating system details (osx/windows/linux)

- [ ] steps to reproduction



Burrow's EVM issue :
I did deployed this smart contract on the Burrow, and called the Test method with this parameters 5,6,7 
but the result is very different with Remix Ide (Ethereum JavaScript VM)
Here is the issue information :
*******************************************************************
Smart Contract :

```solidity
pragma solidity ^0.4.16;


contract ByteCasting {
    

      function Test(int8 _in1, int256 _in2, int16 _in3) public pure 
	  			returns(bytes out,int8 _out1, int256 _out2, int16 _out3) {

        bytes memory _buff = new  bytes(128);

        //////////////
        // Serializing
        uint128 _offst = 128;

        int8ToBytes(_offst,_in1,_buff);
        _offst -= 1;
        
        int256ToBytes(_offst,_in2,_buff);
        _offst -= 32;        
        
        int16ToBytes(_offst,_in3,_buff);
        _offst -= 2; 
        
        out = _buff;
        ////////////////
        // Deserializing
        _offst = 128;
    
        _out1 = bytesToInt8(_offst,_buff);
        _offst -= 1;
        
        _out2 = bytesToInt256(_offst,_buff);
        _offst -= 32;
        
        _out3 = bytesToInt16(_offst,_buff);
        _offst -= 2;

    }
    

    function int8ToBytes(uint128 _offst, int8 _input, bytes _output) public pure {

        assembly {
            mstore(add(_output, _offst), _input)
        }
    }
    
    function int16ToBytes(uint128 _offst, int16 _input, bytes _output) public pure {

        assembly {
            mstore(add(_output, _offst), _input)
        }
    }

    function int256ToBytes(uint128 _offst, int256 _input, bytes _output) public pure {

        assembly {
            mstore(add(_output, _offst), _input)
        }
    }
    

    function bytesToInt8(uint128 _offst, bytes _input) public pure returns (int8 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }
    
    function bytesToInt16(uint128 _offst, bytes _input) public pure returns (int16 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }

    function bytesToInt256(uint128 _offst, bytes _input) public pure returns (int256 _output) {
        
        assembly {
            _output := mload(add(_input, _offst))
        }
    }
}
```

*******************************************************************
Function call :

Test(5,6,7)



*******************************************************************
what actually happened:
Burrow's output :+1: 
[Burrow-EVM-Issue.txt](https://github.com/hyperledger/burrow/files/1759021/Burrow-EVM-Issue.txt)


""0000000000000000000000000000000000000000000000000000000000000000
 0000000000000000000000000000000000000000000000000000000000000000
 0000000000000000000000000000000000000000000000000000000000800600
 0000000000000000000000000000000000000000000000000000000000000684"",
""-124"",
""6"",
""-32762""


*******************************************************************
-  what you expected to happen
Remix(Ethereum) output :

 0000000000000000000000000000000000000000000000000000000000000000
 0000000000000000000000000000000000000000000000000000000000000000 
 0000000000000000000000000000000000000000000000000000000000000700
 0000000000000000000000000000000000000000000000000000000000000605"",
	""1"": ""int8: 	_out1 5"",
	""2"": ""int256: 	_out2 6"",
	""3"": ""int16: 	_out3 7""
	
",closed,False,2018-02-26 14:50:28,2018-05-01 14:01:58
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/695,https://api.github.com/repos/hyperledger/burrow/issues/695,Run integration tests from Bosmarmot,"Runs integration tests from Bosmarmot pinned to a particular version

Signed-off-by: Silas Davis <silas@monax.io>",closed,True,2018-02-26 12:54:34,2018-03-01 12:21:18
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/694,https://api.github.com/repos/hyperledger/burrow/issues/694,Hotfix on config wal overwrite,This fixes a typo that was causing overwrite of WAL config by addrbook,closed,True,2018-02-24 14:23:49,2018-02-24 14:26:28
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/693,https://api.github.com/repos/hyperledger/burrow/issues/693,Adopt Relic for release infrastructure,"Imported Relic to control release process and versioning:
- Stores change notes and versions in a slice of structs as a single source of truth to generate runtime change information, print version, generate changelogs, and tag releases
- Enforces that versions numbers advance in semantic versioning increments
- Adds scripts to automate version tagging for releases (actual release triggered by CircleCI)

I didn't pull in Goreleaser for releasing binaries for Burrow just yet - will save that for a future PR when we review how docker image we are pushing as current 'release'
",closed,True,2018-02-23 14:45:24,2018-07-19 22:50:34
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/692,https://api.github.com/repos/hyperledger/burrow/issues/692,"More vendor pruning, more better",This adds pruning of non-go files in vendor.,closed,True,2018-02-22 23:07:59,2018-02-23 01:38:58
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/691,https://api.github.com/repos/hyperledger/burrow/issues/691,Merge back master and simplify CI,This gets us purely ahead of master anticipating merge and also exploits the fact we don' use glide any more to simplify our CircleCI script,closed,True,2018-02-22 20:31:42,2018-05-10 20:06:55
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/690,https://api.github.com/repos/hyperledger/burrow/issues/690,Fix permissioning related issues from Bosmarmot integration,"This PR all comes out of work integrating the Bosmarmot (EPM) tests. In a couple of places we previously swallowed errors that meant some issue have always been here but were not previously noticed.

It consists of three commits:
1. Some additional logging features I found I wanted when debugging (template format logging and some other serialisation cleanup)

2. Fixes and tidies up the Permissions method in client in Burrow which was dropping some fields from `PermArgs` (with corresponding changes in Bosmarmot to follow)

3. General clean up of permission checking - in particular to avoid unnecessary panics and support composite permissions checking - which I was surprised to find unsupported. Our tests seem to expect it but some swallowed errors allowed them to pass in the past.

Once merged to develop this can be vendored into Bosmarmot where the integration tests are now all passing.

Also fixes #667 - subslice function being able to panic with negative index",closed,True,2018-02-21 23:51:46,2018-07-19 22:51:09
burrow,Gaurav094,https://github.com/hyperledger/burrow/issues/689,https://api.github.com/repos/hyperledger/burrow/issues/689,Unable to sync newly created accounts in burrow chain,"Please include in your bug report:

[ 0.17.1] burrow version (docker image tag or branch if built from source)
[0.18.0 ] monax version (if applicable)
[ 1.9.3] go version (if applicable)
[ 17.12.0-ce] docker version (if applicable)
[ linux- ubuntu 16.0.4] operating system details (osx/windows/linux)
- [ Create a new account in running burrow chain dynamically using rpc endpoint ] what you expected to happen

- [ I am able to create new account using rpc endpoint using below code:

var burrowFactory = require('@monax/legacy-db');
let chainUrl = 'http://localhost:1337/rpc';
let accounts = require('./accounts.json');
var burrow = burrowFactory.createInstance(chainUrl);
var myAccount = burrow.accounts();
myAccount.genPrivAccount(accounts.node1_full_000, function(error, result){
if (!error){
console.log('result = ', JSON.stringify(result,null,4));
}
else{
console.log(error);
}
});

I am able to get the address along with pubKey and PrivKey but I cannot see this account is added in blockchain when I run the below code:

function showAccounts(error,data){
if(data){
var str = JSON.stringify(data,null,4);
console.log(str);
} 
else{
console.log(error); 
}
}

var loadAccounts = ()=>{
var burrow = burrowDbFactory.createInstance(""http://localhost:1337/rpc"");
var accounts = burrow.accounts();
accounts.getAccounts(showAccounts);
}

Neither any file in burrow chain are reflected. ] what actually happened
- [ 
Tried to add manually newly generated address in burrow files but no outcomes
] steps to reproduction
![accountcreate](https://user-images.githubusercontent.com/36070107/36364554-c29bace0-156a-11e8-9a46-527b96953279.png)

",closed,False,2018-02-19 06:19:35,2018-02-26 10:42:44
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/688,https://api.github.com/repos/hyperledger/burrow/issues/688,Fix accidental compositing of logging config,We use the default config as a base (so you only need to set non-default values) but in the case of the recursive logging structure this means that when you explicitly set a logging config it gets merged into the default that just outputs unfiltered thus breaking custom logging config. This fixes that.,closed,True,2018-02-18 14:17:29,2018-02-19 00:09:50
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/687,https://api.github.com/repos/hyperledger/burrow/issues/687,Simplify SubscribeCallback and bump version,This will have us push an appropriately versioned docker base image,closed,True,2018-02-15 09:38:22,2018-02-15 10:02:41
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/686,https://api.github.com/repos/hyperledger/burrow/issues/686,Allow callbacks to close subscriptions.,"I noticed that we were accumulating subscriptions that were repeatedly trying to write their results to closed websockets. This is wasteful and leaks memory. This PR allows callbacks to signal they are finished even if the subscription is not explicitly closed when we fail to write a response to a websocket, which happens either when it is closed or the `writeChan` buffer is full - we can't tell which currently, but the buffer default is 1000 messages. It seems reasonable to drop a subscription if a subscriber is failing to keep up with this many messages.

Also since event types are now fired as pointers `ResultEvent` constructed needed to be changed.",closed,True,2018-02-14 23:42:35,2018-02-15 08:39:06
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/685,https://api.github.com/repos/hyperledger/burrow/issues/685,Upgrade dependencies and events system,"This PR upgrade all dependencies, in particular it:
- Takes Tendermint to v0.15.0
- Overhauls event system to use Tendermint pubsub - removing issues with blocking and adds query system
- Removes various instances of go-wire in favour of cleaner approach

The first commit is all vendor changes, review the latter commits.",closed,True,2018-02-13 22:52:14,2018-05-10 20:06:56
burrow,Gaurav094,https://github.com/hyperledger/burrow/issues/684,https://api.github.com/repos/hyperledger/burrow/issues/684,Unable to Connect burrow server using node js code,"Please include in your bug report:

- [ 0.17.1] `burrow version` (docker image tag or branch if built from source)
- [0.18.0 ] `monax version` (if applicable)
- [ 1.9.3] `go version` (if applicable)
- [ 17.12.0-ce] `docker version` (if applicable)
- [ linux- ubuntu 16.0.4] operating system details (osx/windows/linux)
- [Want to connect burrow server using monax/legacy-db to access burrow chain functionality ] what you expected to happen
- [ **Burrow {
  server: undefined,
  _unsafe: 
   Unsafe {
     server: undefined,
     _validator: SinglePolicyValidator { _policy: true } },
  _accounts: 
   Accounts {
     server: undefined,
     _unsafe: Unsafe { server: undefined, _validator: [SinglePolicyValidator] } },
  _blockChain: BlockChain { server: undefined },
  _consensus: Consensus { server: undefined },
  _events: 
   Events {
     _pollingInterval: 1000,
     server: undefined,
     _sub: { [Function: HttpEventSub] super_: [Function: EventSub] } },
  _namereg: 
   NameReg {
     server: undefined,
     _unsafe: Unsafe { server: undefined, _validator: [SinglePolicyValidator] },
     _events: Events { _pollingInterval: 1000, server: undefined, _sub: [Function] } },
  _network: Network { server: undefined },
  _transactions: 
   Transactions {
     server: undefined,
     _unsafe: Unsafe { server: undefined, _validator: [SinglePolicyValidator] } } }
Accounts {
  server: undefined,
  _unsafe: 
   Unsafe {
     server: undefined,
     _validator: SinglePolicyValidator { _policy: true } } }
Received request for details.
server started at 10.0.0.141:8000
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Error: socket hang up"".
(node:4743) UnhandledPromiseRejectionWarning: TypeError: Cannot destructure property `reject` of 'undefined' or 'null'.
    at values.next.then (/home/gauravagarwal/.monax/apps/legacydb/node_modules/@nodeguy/json-rpc/lib/index.js:13:57)
    at <anonymous>
(node:4743) UnhandledPromiseRejectionWarning: Unhandled promise rejection. This error originated either by throwing inside of an async function without a catch block, or by rejecting a promise which was not handled with .catch(). (rejection id: 1)
(node:4743) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.**
] what actually happened

screenshot of error-
https://user-images.githubusercontent.com/36070107/36086471-9c575f16-0ff2-11e8-867b-ffffab589a54.png


my code 
var burrowFactory = require('@monax/legacy-db');


  var burrow = burrowFactory.createInstance(""http://172.17.0.3:1337/rpc"");//got the ip use monax chains ip <CHIAN-NAME>
  console.log(burrow);
  console.log(burrow.accounts());
",closed,False,2018-02-12 07:19:12,2018-03-03 21:44:57
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/683,https://api.github.com/repos/hyperledger/burrow/issues/683,Add Bytecode lexer and remove panic from Splice,This adds to the `Bytecode` type to provide a opcode tokeniser which is useful for building test cases and printing human readable EVM code.,closed,True,2018-02-09 21:28:40,2018-02-11 13:37:43
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/682,https://api.github.com/repos/hyperledger/burrow/issues/682,Feature/vm testing,😺 ,closed,True,2018-02-08 16:25:49,2018-02-09 14:29:40
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/681,https://api.github.com/repos/hyperledger/burrow/issues/681,Add VM test to check return of msg.sender,Courtesy of @guoger (thanks) - with some updates to use initialised contract code,closed,True,2018-02-07 17:13:49,2018-02-09 16:04:29
burrow,mohitsharma18,https://github.com/hyperledger/burrow/issues/680,https://api.github.com/repos/hyperledger/burrow/issues/680,unable to connect burrow and nodejs,"

- `burrow version`: 0.17.1
- `monax version`: 0.18.0
- `go version`: go1.9.3 linux/amd64
- `docker version`: 17.12.0-ce
- `operating system details`: linux Ubuntu 16.04

- `what you expected to happen`

Burrow must be connected with the nodejs server

- `what actually happened`

Burrow is not connecting with the nodejs server

- `steps to reproduction`

after stating the burrow, it start creating blocks every second.
But when we try to connect it with the nodejs server is throws the error

'code':

var burrowFactory = require('@monax/legacy-db');

console.log(burrowFactory);

var contracts = require('@monax/legacy-contracts');

console.log(contracts);

var burrow = burrowFactory.createInstance('http://10.0.3.198:1337/rpc');

console.log(burrow);

`Here burrow thows an error as given below`

Burrow {
  server: undefined,
  _unsafe: 
   Unsafe {
     server: undefined,
     _validator: SinglePolicyValidator { _policy: true } },
  _accounts: 
   Accounts {
     server: undefined,
     _unsafe: Unsafe { server: undefined, _validator: [Object] } },
  _blockChain: BlockChain { server: undefined },
  _consensus: Consensus { server: undefined },
  _events: 
   Events {
     _pollingInterval: 1000,
     server: undefined,
     _sub: { [Function: HttpEventSub] super_: [Function: EventSub] } },
  _namereg: 
   NameReg {
     server: undefined,
     _unsafe: Unsafe { server: undefined, _validator: [Object] },
     _events: Events { _pollingInterval: 1000, server: undefined, _sub: [Object] } },
  _network: Network { server: undefined },
  _transactions: 
   Transactions {
     server: undefined,
     _unsafe: Unsafe { server: undefined, _validator: [Object] } } }
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
Burrow error:  Call of method ""toJSON"" with parameters 'server' responded with ""Method not found: burrow.toJSON"".
(node:5915) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 1): TypeError: Cannot convert a Symbol value to a string
(node:5915) [DEP0018] DeprecationWarning: Unhandled promise rejections are deprecated. In the future, promise rejections that are not handled will terminate the Node.js process with a non-zero exit code.

could anybody tell me what is the error or what is the correct way to do it????

Thanks
Mohit
",closed,False,2018-02-02 09:48:07,2018-05-01 14:01:17
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/679,https://api.github.com/repos/hyperledger/burrow/issues/679,Merge Hypermarmot refactor to develop,Now we have tests passing this is ready to be stabilised on develop,closed,True,2018-01-31 14:22:08,2018-02-09 14:30:12
burrow,smblucker,https://github.com/hyperledger/burrow/pull/678,https://api.github.com/repos/hyperledger/burrow/issues/678,Compressing bytecode with Splice helper in vm_test.go,These fixes utilize the Splice helper function to convert raw byte values to opcode constants in testing functions. This simultaneously improves readability and understanding of what the functions accomplish at a bytecode level. ,closed,True,2018-01-30 16:37:18,2018-05-16 18:50:55
burrow,guoger,https://github.com/hyperledger/burrow/pull/677,https://api.github.com/repos/hyperledger/burrow/issues/677,Format code by `make fmt`.,Signed-off-by: Jay Guo <guojiannan1101@gmail.com>,closed,True,2018-01-30 02:06:22,2018-01-31 14:34:04
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/676,https://api.github.com/repos/hyperledger/burrow/issues/676,Reinstate RPC/V0,"This reinstates the V0 RPC; plugging it in to the new `Service` backend, with the intention of maintaining substantial wire-level compatibility (though since the case convention used for accounts has changed this may break the Javascript libraries downstream - the fix can be straight-forward but I will revisit when testing legacy-contracts).

This includes the following changes:
- Remove the restful URL interface to V0
- Drop `rpc.Result` and go-wire from the `Service` interface types and rpc/TM
- Improve the event subscriptions websocket code to make use of the JSON-RPC ID
- Drop the V0 mocked and 'scumbag' tests which were fragile and of limited usefulness
- Make use of the graceful `Shutdown(context.Context) error` supported by Go's `http.Server` since 1.8 in anticipation of replacing much of the hand-rolled server code (in particular when adding web3)
- Fixes tests for new vendored code

",closed,True,2018-01-29 13:55:21,2018-02-23 14:45:02
burrow,smblucker,https://github.com/hyperledger/burrow/issues/675,https://api.github.com/repos/hyperledger/burrow/issues/675,EVM: Badjumpdest in vm_test.go-->func TestSubcurrency,"func TestSubcurrency in hyperledger/burrow/execution/evm/vm_test.go contains bytecode that produces a bad jumpdest error when debugging code using evm tool but not when running 'go test'.

**System Details**

Burrow Version: 0.16
Ethereum Version: 1.8.0
Go Version: 1.9.3
Operation System: Ubuntu 16.04

**Expected Results**

'go test' results and evm tool dumps to be consistent--i.e. Either both run without error or both produce the same error(s)

**Actual Results**

1) Go Test Output

`PASS
ok  	github.com/hyperledger/burrow/execution/evm	17.828s`

2) EVM Tool Output

`bytecode = 620f424033557c0100000000000000000000000000000000000000000000000000000000
	   600035046315cf2684811415610046576004356040526040515460605260206060f35b63
	   693200ce8114156100875760043560805260243560a052335460c0523360e05260a05160
	   c0511215156100865760a05160c0510360e0515560a05160805154(01)608051555b5b505b
	   6000f3


{
    ""root"": ""a635bfba7aa1c7e3ace1ad5097befcf076ccef0bf1979df07d2888123425b70f"",
    ""accounts"": {
        ""0000000000000000000000007265636569766572"": {
            ""balance"": ""0"",
            ""nonce"": 0,
            ""root"": ""56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"",
            ""codeHash"": ""0359cac2d007f91e11b8987679975e309bdfbdde758d958db6f1e03c1a15c1c2"",
            ""code"": """",
            ""storage"": {}
        }
    }
}
#### TRACE ####
PUSH3           pc=00000000 gas=100000000000000000 cost=3

CALLER          pc=00000004 gas=99999999999999997 cost=2
Stack:
00000000  00000000000000000000000000000000000000000000000000000000000f4240

SSTORE          pc=00000005 gas=99999999999999995 cost=20000
Stack:
00000000  000000000000000000000000000000000000000000000000000073656e646572
00000001  00000000000000000000000000000000000000000000000000000000000f4240
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH29          pc=00000006 gas=99999999999979995 cost=3
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH1           pc=00000036 gas=99999999999979992 cost=3
Stack:
00000000  0000000100000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

CALLDATALOAD    pc=00000038 gas=99999999999979989 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000100000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

DIV             pc=00000039 gas=99999999999979986 cost=5
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000100000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH4           pc=00000040 gas=99999999999979981 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

DUP2            pc=00000045 gas=99999999999979978 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000015cf2684
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

EQ              pc=00000046 gas=99999999999979975 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000015cf2684
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

ISZERO          pc=00000047 gas=99999999999979972 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH2           pc=00000048 gas=99999999999979969 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000001
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

JUMPI           pc=00000051 gas=99999999999979966 cost=10
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000046
00000001  0000000000000000000000000000000000000000000000000000000000000001
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

JUMPDEST        pc=00000070 gas=99999999999979956 cost=1
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH4           pc=00000071 gas=99999999999979955 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

DUP2            pc=00000076 gas=99999999999979952 cost=3
Stack:
00000000  00000000000000000000000000000000000000000000000000000000693200ce
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

EQ              pc=00000077 gas=99999999999979949 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  00000000000000000000000000000000000000000000000000000000693200ce
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

ISZERO          pc=00000078 gas=99999999999979946 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH2           pc=00000079 gas=99999999999979943 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000001
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240


###################################################################################
PROBLEM: BAD JUMPDEST @ PC = 135
###################################################################################

JUMPI           pc=00000082 gas=99999999999979940 cost=10
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000087 //Requires jump to PC=135; PC[135]=x01=ADD; Bad Jumpdest
00000001  0000000000000000000000000000000000000000000000000000000000000001
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

###################################################################################
###################################################################################

#### LOGS ####
evm execution time: 105.436µs
heap objects:       9981
allocations:        1720824
total allocations:  1720824
GC calls:           0
Gas used:           100000000000000000`

**Reproduction**

1) 'go test'

- checkout hypermarmot branch
- run 'go test' in 'hyperledger/burrow/execution/evm'

2) 'evm tool'

- clone ethereum/go-ethereum repo in GOPATH

- ensure $GOPATH/bin is in system PATH

- install evm: go install ./cmd/evm

- run 'evm --debug --dump --statdump -- code 620f424033557c01000000000000000000000000000
00000000000000000000000000000600035046315cf26848114156100465760043560405260405154
60605260206060f35b63693200ce8114156100875760043560805260243560a052335460c0523360
e05260a05160c0511215156100865760a05160c0510360e0515560a051608051540160805155
5b5b505b6000f3' 

**Attempted Fix 1**

I attempted to change the badjump dest to a valid jumpdest and this led to a stack underflow

Resulting Output:

`bytecode = 620f424033557c0100000000000000000000000000000000000000000000000000000000
	   600035046315cf2684811415610046576004356040526040515460605260206060f35b63
	   693200ce8114156100875760043560805260243560a052335460c0523360e05260a05160
	   c0511215156100865760a05160c0510360e0515560a05160805154(5b)608051555b5b(50)
	   5b6000f3 

{
    ""root"": ""95a1314c5b9e524799eea02cef10bdcba0bbb5451c03db36bd79e9bc6a563034"",
    ""accounts"": {
        ""0000000000000000000000007265636569766572"": {
            ""balance"": ""0"",
            ""nonce"": 0,
            ""root"": ""56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421"",
            ""codeHash"": ""e03b2f362e84b9906c7efd5a6c8a5d6201649f9a8b218c8f5d230d0e2340e098"",
            ""code"": """",
            ""storage"": {}
        }
    }
}
#### TRACE ####
PUSH3           pc=00000000 gas=100000000000000000 cost=3

CALLER          pc=00000004 gas=99999999999999997 cost=2
Stack:
00000000  00000000000000000000000000000000000000000000000000000000000f4240

SSTORE          pc=00000005 gas=99999999999999995 cost=20000
Stack:
00000000  000000000000000000000000000000000000000000000000000073656e646572
00000001  00000000000000000000000000000000000000000000000000000000000f4240
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH29          pc=00000006 gas=99999999999979995 cost=3
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH1           pc=00000036 gas=99999999999979992 cost=3
Stack:
00000000  0000000100000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

CALLDATALOAD    pc=00000038 gas=99999999999979989 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000100000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

DIV             pc=00000039 gas=99999999999979986 cost=5
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000100000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH4           pc=00000040 gas=99999999999979981 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

DUP2            pc=00000045 gas=99999999999979978 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000015cf2684
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

EQ              pc=00000046 gas=99999999999979975 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000015cf2684
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

ISZERO          pc=00000047 gas=99999999999979972 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH2           pc=00000048 gas=99999999999979969 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000001
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

JUMPI           pc=00000051 gas=99999999999979966 cost=10
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000046
00000001  0000000000000000000000000000000000000000000000000000000000000001
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

JUMPDEST        pc=00000070 gas=99999999999979956 cost=1
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH4           pc=00000071 gas=99999999999979955 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

DUP2            pc=00000076 gas=99999999999979952 cost=3
Stack:
00000000  00000000000000000000000000000000000000000000000000000000693200ce
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

EQ              pc=00000077 gas=99999999999979949 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  00000000000000000000000000000000000000000000000000000000693200ce
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

ISZERO          pc=00000078 gas=99999999999979946 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH2           pc=00000079 gas=99999999999979943 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000001
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

JUMPI           pc=00000082 gas=99999999999979940 cost=10
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000087
00000001  0000000000000000000000000000000000000000000000000000000000000001
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240



###################################################################################
JUMPDEST FIX
###################################################################################

JUMPDEST        pc=00000135 gas=99999999999979930 cost=1 //Replaced x01=ADD with x5b=JUMPDEST; eliminates bad jumpdest	
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

###################################################################################
###################################################################################

PUSH1           pc=00000136 gas=99999999999979929 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

MLOAD           pc=00000138 gas=99999999999979926 cost=18
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000080
00000001  0000000000000000000000000000000000000000000000000000000000000000
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

SSTORE          pc=00000139 gas=99999999999979908 cost=5000
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000000000000
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240
0000000000000000000000000000000000000000000000000000000000000000: 0000000000000000000000000000000000000000000000000000000000000000

JUMPDEST        pc=00000140 gas=99999999999974908 cost=1
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240
0000000000000000000000000000000000000000000000000000000000000000: 0000000000000000000000000000000000000000000000000000000000000000

JUMPDEST        pc=00000141 gas=99999999999974907 cost=1
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240
0000000000000000000000000000000000000000000000000000000000000000: 0000000000000000000000000000000000000000000000000000000000000000



###################################################################################
NEW PROBLEM: STACK UNDERFLOW
###################################################################################

POP             pc=00000142 gas=99999999999974906 cost=1 ERROR: stack underflow (0 <=> 1) //Nothing on the stack here
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240
0000000000000000000000000000000000000000000000000000000000000000: 0000000000000000000000000000000000000000000000000000000000000000

###################################################################################
###################################################################################

#### LOGS ####
evm execution time: 136.959µs
heap objects:       10177
allocations:        1753848
total allocations:  1753848
GC calls:           0
Gas used:           100000000000000000`

**Final Fix**

I finally altered the bytecode to place arbitrary items on the stack so as to avoid the stack underflow; however, this is more than likely not the intended outcome for the bytecode.

Resulting Output:

`bytecode = 620f424033557c0100000000000000000000000000000000000000000000000000000000
	   600035046315cf2684811415610046576004356040526040515460605260206060f35b63
	   693200ce8114156100875760043560805260243560a052335460c0523360e05260a05160
	   c0511215156100865760a05160c0510360e0515560a051608051545b60805155(5b6000
	   60006000)50f3


{
    ""root"": ""a60027657814c3e9ac7cfe54135dd349d121a57f68046dc62662449fdca5dfcc"",
    ""accounts"": {
        ""0000000000000000000000007265636569766572"": {
            ""balance"": ""0"",
            ""nonce"": 0,
            ""root"": ""e4bdca94c485b4edb192b3c1745e7f4f419543e7b49ad2dc9c233fd3a477fa85"",
            ""codeHash"": ""69feca197b576a5f75d642954d022fe36ec25963db9a805017088b7414ed62cb"",
            ""code"": """",
            ""storage"": {}
        }
    }
}
#### TRACE ####
PUSH3           pc=00000000 gas=100000000000000000 cost=3

CALLER          pc=00000004 gas=99999999999999997 cost=2
Stack:
00000000  00000000000000000000000000000000000000000000000000000000000f4240

SSTORE          pc=00000005 gas=99999999999999995 cost=20000
Stack:
00000000  000000000000000000000000000000000000000000000000000073656e646572
00000001  00000000000000000000000000000000000000000000000000000000000f4240
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH29          pc=00000006 gas=99999999999979995 cost=3
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH1           pc=00000036 gas=99999999999979992 cost=3
Stack:
00000000  0000000100000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

CALLDATALOAD    pc=00000038 gas=99999999999979989 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000100000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

DIV             pc=00000039 gas=99999999999979986 cost=5
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000100000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH4           pc=00000040 gas=99999999999979981 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

DUP2            pc=00000045 gas=99999999999979978 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000015cf2684
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

EQ              pc=00000046 gas=99999999999979975 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000015cf2684
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

ISZERO          pc=00000047 gas=99999999999979972 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH2           pc=00000048 gas=99999999999979969 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000001
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

JUMPI           pc=00000051 gas=99999999999979966 cost=10
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000046
00000001  0000000000000000000000000000000000000000000000000000000000000001
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

JUMPDEST        pc=00000070 gas=99999999999979956 cost=1
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH4           pc=00000071 gas=99999999999979955 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

DUP2            pc=00000076 gas=99999999999979952 cost=3
Stack:
00000000  00000000000000000000000000000000000000000000000000000000693200ce
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

EQ              pc=00000077 gas=99999999999979949 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  00000000000000000000000000000000000000000000000000000000693200ce
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

ISZERO          pc=00000078 gas=99999999999979946 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH2           pc=00000079 gas=99999999999979943 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000001
00000001  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

JUMPI           pc=00000082 gas=99999999999979940 cost=10
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000087
00000001  0000000000000000000000000000000000000000000000000000000000000001
00000002  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

JUMPDEST        pc=00000135 gas=99999999999979930 cost=1
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

PUSH1           pc=00000136 gas=99999999999979929 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

MLOAD           pc=00000138 gas=99999999999979926 cost=18
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000080
00000001  0000000000000000000000000000000000000000000000000000000000000000
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

SSTORE          pc=00000139 gas=99999999999979908 cost=5000
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000000000000
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240
0000000000000000000000000000000000000000000000000000000000000000: 0000000000000000000000000000000000000000000000000000000000000000

JUMPDEST        pc=00000140 gas=99999999999974908 cost=1
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240
0000000000000000000000000000000000000000000000000000000000000000: 0000000000000000000000000000000000000000000000000000000000000000

PUSH1           pc=00000141 gas=99999999999974907 cost=3
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240
0000000000000000000000000000000000000000000000000000000000000000: 0000000000000000000000000000000000000000000000000000000000000000

PUSH1           pc=00000143 gas=99999999999974904 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240
0000000000000000000000000000000000000000000000000000000000000000: 0000000000000000000000000000000000000000000000000000000000000000

PUSH1           pc=00000145 gas=99999999999974901 cost=3
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000000000000
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240
0000000000000000000000000000000000000000000000000000000000000000: 0000000000000000000000000000000000000000000000000000000000000000

POP             pc=00000147 gas=99999999999974898 cost=2
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000000000000
00000002  0000000000000000000000000000000000000000000000000000000000000000
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
0000000000000000000000000000000000000000000000000000000000000000: 0000000000000000000000000000000000000000000000000000000000000000
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240

RETURN          pc=00000148 gas=99999999999974896 cost=0
Stack:
00000000  0000000000000000000000000000000000000000000000000000000000000000
00000001  0000000000000000000000000000000000000000000000000000000000000000
Memory:
00000000  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000010  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000020  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000030  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000040  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000050  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000060  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000070  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000080  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
00000090  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|
Storage:
000000000000000000000000000000000000000000000000000073656e646572: 00000000000000000000000000000000000000000000000000000000000f4240
0000000000000000000000000000000000000000000000000000000000000000: 0000000000000000000000000000000000000000000000000000000000000000

#### LOGS ####
evm execution time: 159.561µs
heap objects:       10311
allocations:        1769472
total allocations:  1769472
GC calls:           0
Gas used:           25104`",closed,False,2018-01-26 16:33:04,2018-05-08 18:02:59
burrow,smblucker,https://github.com/hyperledger/burrow/issues/674,https://api.github.com/repos/hyperledger/burrow/issues/674,[EVM] EVM Compliance Issues,"The following are a compiled list of issues related to the EVM; it includes all issues compiled in [#588](https://github.com/hyperledger/burrow/issues/588) by @silasdavis as well as subsequent issues:

Table of Contents:
- EIP Implementation Issues
- Bad/Invalid Jumpdest Issues
- Invalid Opcodes
- Chain Stopping Issues

**EIP Implementation Issues**
Byzantium:
- [INVALID opcode - #601](https://github.com/hyperledger/burrow/issues/601)
- [STATICCALL opcode - #594](https://github.com/hyperledger/burrow/issues/594)

- [REVERT opcode - #600](https://github.com/hyperledger/burrow/issues/600)

- [RETURNDATASIZE and RETURNDATACOPY opcodes- #705](https://github.com/hyperledger/burrow/issues/705)

Constantinople:
- [SHL, SHR, and SAR opcodes - #705](https://github.com/hyperledger/burrow/issues/706) 



**Bad/Invalid Jumpdest Issues**

- [String concatenation issue - #300](https://github.com/hyperledger/burrow/issues/300), **see failing test**: https://github.com/monax/bosmarmot/blob/develop/legacy-contracts.js/failing%20tests/%2327.js

- [Subcurrency test causes panic in EVM tool but not burrow - #675](https://github.com/hyperledger/burrow/issues/675)

**Invalid Opcodes**

- [Bad EVM interpretation on non-opcode - #526](https://github.com/hyperledger/burrow/issues/526), **see failing test**: https://github.com/monax/bosmarmot/blob/develop/legacy-contracts.js/failing%20tests/WebSocket.js

**Chain Stopping Issues**

- [Storage/Merkle related panic #626](https://github.com/hyperledger/burrow/issues/626)

- [Storage/BlockCache related panic #627](https://github.com/hyperledger/burrow/issues/627)
















",closed,False,2018-01-25 16:51:00,2018-11-08 20:20:51
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/673,https://api.github.com/repos/hyperledger/burrow/issues/673,[Hotfix] Fix Burrow build dependency on go-clist (develop),"This deals with deleted go-clist dependency by updating to use tmlibs version and also depending on a fork of tendermint with updated import.

Making as a hotfix since this will not be an issue once #666 is merged since we will vendor and won't rely on upstream immutability.

Credit to @tommling for getting this started: #662 but also relies on a patched Tendermint I have pushed here: https://github.com/monax/tendermint/tree/go-clist-hotfix-0.9.2",closed,True,2018-01-24 12:12:09,2018-01-24 12:26:22
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/672,https://api.github.com/repos/hyperledger/burrow/issues/672,[Hotfix] Fix Burrow build dependency on go-clist ,"This deals with deleted go-clist dependency by updating to use tmlibs version and also depending on a fork of tendermint with updated import.

Making as a hotfix since this will not be an issue once https://github.com/hyperledger/burrow/pull/666 is merged since we will vendor and won't rely on upstream immutability.

Credit to @tommling for getting this started: https://github.com/hyperledger/burrow/pull/662 but also relies on a patched Tendermint I have pushed here: https://github.com/monax/tendermint/tree/go-clist-hotfix-0.9.2  ",closed,True,2018-01-24 11:55:55,2018-01-29 20:35:01
burrow,robert-zaremba,https://github.com/hyperledger/burrow/pull/671,https://api.github.com/repos/hyperledger/burrow/issues/671,Gofmt -s,"The repository contains some `gofmt -s`  issues. This changeset is an autofix of solve them and Makefile integration.

## Motivation and Context

For clarity in future pull-requests, the `gofmt -s` issues should be solved once and for all.

This change doesn't break the code, because it uses official `gofmt` to only do the code formatting.
",closed,True,2018-01-18 14:17:33,2018-01-24 12:01:33
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/670,https://api.github.com/repos/hyperledger/burrow/issues/670,[Serialisation] replace go-wire with something better,"go-wire is not widely deployed or tested, not particularly idiomatic, registers types in a global variable, and generally depends on a bit too much magic (and reflection). Something like: https://github.com/ugorji/go/ looks good - well tested, multiple codecs, codegen, and a canonical flag for deterministic encodings.

go-wire does provide a 'lookup struct for interface' functionality - but this could probably be better handled by a single 'sum' envelope type: a struct with a type field/flag and pointers to each underlying type. In many cases it could be avoided altogether but needs some thought.

We use go-wire in the following places:
- `Account` serialisation in state
- `Tx` serialisation for broadcast
- `Result*` type serialisation for RPC/tm
- JSON serialisation for RPC/v0

All of these could be relatively easily replaced. Binc looks interesting: https://github.com/ugorji/binc",closed,False,2018-01-16 10:56:32,2018-06-18 12:10:10
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/669,https://api.github.com/repos/hyperledger/burrow/issues/669,[consensus] Support authorised-only node sync,"We need to implement the ability to lock down a network syncing with unauthorized peers. This was shipped in Tendermint 0.9 ish. The idea being that currently any node that can connect to the network will begin syncing and be able to pull the state. However, for a lot of use cases this is not desired and what is more desired is a network setup where validators only sync with validators/fullNodes that have been authorized.

Need to investigate how this functionality is provided by Tendermint and expose it through Burrow configuration.",closed,False,2018-01-16 10:26:45,2018-10-03 13:49:42
burrow,ashlinSajan,https://github.com/hyperledger/burrow/issues/668,https://api.github.com/repos/hyperledger/burrow/issues/668,VM panic: Paniced on a Sanity Check,"**The chain got stopped.
 Server is using same versions as follows  ##Tendermint  ## version 0.8  and   ## Burrow-Mint ## version 0.16.**

```
INFO[01-09|05:30:35] Successful execution                     module=state
NOTE[01-09|05:30:35] VM call complete                         module=state caller=""VMAccount{000000000000000000000000007C2AA41154BAAE0C3164C2E004BAA9FA796F00 B:99999999613975 C: N:6148}"" callee=""VMAccount{
} return=0000000000000000000000000000000000000000000000000000000000000001 err=nil
INFO[01-09|05:30:35] Executed block                           module=state height=919310 valid txs=1 invalid txs=0
INFO[01-09|05:30:35] Committing block                         channel=Info run_id=ee8af2b1-ec98-11e7-8c5a-6c86c4a2147a trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 burrow-mint.go:151 local_client.go:197 app_conn.go:81 execution.go:258 execution.go:243 state.go:1251 state.go:1198 state.go:1151 state.go:1178 state.go:1467 state.go:1356 state.go:699 state.go:655 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe BurrowMint]"" last_block_height=919310
**panic: Paniced on a Sanity Check: Value missing for key 63C608177B90F9F3464FDE22D24D56E67BE598FD**

goroutine 53 [running]:
panic(0x7fe31079b6e0, 0xc4294d0d10)
	/usr/lib/go/src/runtime/panic.go:500 +0x1a5
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.PanicSanity(0x7fe31079b6e0, 0xc4294d0cf0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/errors.go:26 +0xe2
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*nodeDB).GetNode(0xc4204a4a00, 0xc421b4cf40, 0xc4308359c0, 0x14, 0x14, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_tree.go:236 +0x55a
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).getRightNode(0xc42d1c63c0, 0xc421b4cf40, 0x20)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:364 +0x68
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).set(0xc42d1c63c0, 0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0x7fe3108748c0, 0xc42d1c6140)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:290 +0x84a
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).set(0xc42d1c61e0, 0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0x7fe3108748c0, 0xc42d1c60a0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:287 +0x744
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).set(0xc42d1c6140, 0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0x7fe3108748c0, 0xc42d1c6000)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:287 +0x744
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).set(0xc42d1c60a0, 0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0x7fe3108748c0, 0xc426233f40)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:290 +0x8b3
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).set(0xc42d1c6000, 0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0x7fe3108748c0, 0xc426233ea0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:287 +0x744
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).set(0xc426233f40, 0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0x7fe3108748c0, 0xc426233e00)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:287 +0x744
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).set(0xc426233ea0, 0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0x7fe3108748c0, 0xc426233d60)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:287 +0x744
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).set(0xc426233e00, 0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0x7fe3108748c0, 0xc426233cc0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:287 +0x744
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).set(0xc426233d60, 0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0x7fe3108748c0, 0xc426233c20)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:287 +0x744
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).set(0xc426233cc0, 0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0xc426233000, 0xc430835b20)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:287 +0x744
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).set(0xc426233c20, 0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0x20, 0x7fe31084b2e0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:287 +0x744
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLTree).Set(0xc421b4cf40, 0xc430835b40, 0x20, 0x20, 0xc430835b60, 0x20, 0x20, 0x1)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_tree.go:100 +0x8d
github.com/hyperledger/burrow/manager/burrow-mint/state.(*BlockCache).Sync(0xc4201b5170)
	/go/src/github.com/hyperledger/burrow/manager/burrow-mint/state/block_cache.go:209 +0x7f1
github.com/hyperledger/burrow/manager/burrow-mint.(*BurrowMint).Commit(0xc42011dea0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/manager/burrow-mint/burrow-mint.go:154 +0x1e3
github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client.(*localClient).CommitSync(0xc42005e660, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client/local_client.go:197 +0x6b
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*appConnConsensus).CommitSync(0xc420132d90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/app_conn.go:81 +0x5b
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).CommitStateUpdateMempool(0xc4223c5e40, 0x7fe310bceb00, 0xc420132d90, 0xc423f629a0, 0x7fe310bcaea0, 0xc42017c2a0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:258 +0xb4
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).ApplyBlock(0xc4223c5e40, 0x7fe3104b0b08, 0xc42576ae10, 0x7fe310bceb00, 0xc420132d90, 0xc423f629a0, 0x1, 0xc427219620, 0x14, 0x20, ...)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:243 +0x274
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).finalizeCommit(0xc4204fbba0, 0xe070e)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1251 +0xb64
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).tryFinalizeCommit(0xc4204fbba0, 0xe070e)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1198 +0x179
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).enterCommit.func1(0xc4204fbba0, 0x0, 0xe070e)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1151 +0x9f
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).enterCommit(0xc4204fbba0, 0xe070e, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1178 +0x748
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).addVote(0xc4204fbba0, 0xc420108e00, 0x0, 0x0, 0xc420180438, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1467 +0x9e1
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).tryAddVote(0xc4204fbba0, 0xc420108e00, 0x0, 0x0, 0x20, 0x7fe31080e860)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1356 +0x69
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).handleMsg(0xc4204fbba0, 0x7fe3107ca7c0, 0xc422cf8538, 0x0, 0x0, 0xe070e, 0x0, 0x6, 0xed1e64a7b, 0x2e9697fd, ...)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:699 +0x668
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).receiveRoutine(0xc4204fbba0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:655 +0x460
created by github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).OnStart
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:389 +0x55b
DBUG[01-09|06:06:39] Loading configuration for serve command  channel=Trace run_id=41a31c52-f503-11e7-8879-51e75734a421 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 info_trace_logger.go:139 convention.go:60 serve.go:133 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve chainId=ddchain workingDirectory=/home/monax/.monax/chains/ddchain dataDirectory=/home/monax/.monax/chains/ddchain/data genesisFile=/home/monax/.monax/chains/ddchain/genesis.json
DBUG[01-09|06:06:39] Modules configured                       channel=Trace run_id=41a31c52-f503-11e7-8879-51e75734a421 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 info_trace_logger.go:139 convention.go:60 serve.go:147 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve consensusModule=tendermint-0.8 applicationManager=burrowmint-0.16
DBUG[01-01|00:00:00] Starting EventSwitch                     channel=Info run_id=41a31c52-f503-11e7-8879-51e75734a421 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 capture.go:43 handler_go14.go:14 handler_go14.go:14 logger.go:120 logger.go:142 service.go:93 core.go:52 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve captured_logging_source=tendermint_log15 module=events impl=EventSwitch
INFO[01-09|06:06:39] Loading BurrowMint                       channel=Info run_id=41a31c52-f503-11e7-8879-51e75734a421 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 manager.go:47 core.go:57 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core]"" compatibleConsensus=tendermint-0.8 burrowMintVersion=burrowmint-0.16.3
INFO[01-09|06:06:41] Loaded state                             channel=Info run_id=41a31c52-f503-11e7-8879-51e75734a421 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 pipe.go:83 manager.go:48 core.go:57 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" chainId=ddchain lastBlockHeight=919309 lastBlockHash=
DBUG[01-09|06:06:41] Loaded pipe with application manager     channel=Trace run_id=41a31c52-f503-11e7-8879-51e75734a421 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 convention.go:35 log.go:143 convention.go:60 convention.go:45 core.go:61 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core]""
DBUG[01-09|06:06:41] Loaded Tendermint sub-configuration      channel=Trace run_id=41a31c52-f503-11e7-8879-51e75734a421 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 convention.go:35 log.go:143 convention.go:60 convention.go:45 tendermint.go:103 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" chainId=ddchain genesisFile=/home/monax/.monax/chains/ddchain/genesis.json nodeLocalAddress=0.0.0.0:46656 moniker=ddchain_full_000 seeds= fastSync=false rpcLocalAddress=0.0.0.0:46657 databaseDirectory=/home/monax/.monax/chains/ddchain/data/tendermint/data privateValidatorFile=/home/monax/.monax/chains/ddchain/priv_validator.json privValFile=priv_validator.json
DBUG[01-01|00:00:00] Loaded PrivValidator                     channel=Info run_id=41a31c52-f503-11e7-8879-51e75734a421 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 capture.go:43 handler_go14.go:14 handler_go14.go:14 logger.go:120 logger.go:146 priv_validator.go:122 tendermint.go:110 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve captured_logging_source=tendermint_log15 module=types file=/home/monax/.monax/chains/ddchain/priv_validator.json privValidator=""PrivValidator{007C2AA41154BAAE0C3164C2E004BAA9FA796F00 LH:919310, LR:0, LS:3}""
INFO[01-09|06:06:41] Force disabling Tendermint's native RPC  channel=Info run_id=41a31c52-f503-11e7-8879-51e75734a421 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 tendermint.go:118 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" provided_rpc_laddr=0.0.0.0:46657
**panic: Paniced on a Sanity Check**: Expected storeHeight (919310) and stateHeight (919309) to match.

goroutine 1 [running]:
panic(0x7f3bfb3da6e0, 0xc420211ca0)
	/usr/lib/go/src/runtime/panic.go:500 +0x1a5
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.PanicSanity(0x7f3bfb3da6e0, 0xc420211c80)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/errors.go:26 +0xe2
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*Handshaker).ReplayBlocks(0xc42022cea0, 0x0, 0x0, 0x0, 0x0, 0x7f3bfb80db00, 0xc420211970, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:400 +0xda4
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*Handshaker).Handshake(0xc42022cea0, 0x7f3bfb80f200, 0xc4201481b0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:329 +0x485
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*multiAppConn).OnStart(0xc4201481b0, 0xc420537b40, 0x15)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/multi_app_conn.go:100 +0x208
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.(*BaseService).Start(0xc4201481b0, 0x0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/service.go:96 +0x548
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node.NewNode(0x7f3bfb80f820, 0xc4204682a0, 0xc4201423c0, 0x7f3bfb801ca0, 0xc42021d160, 0x2)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node/node.go:68 +0x485
github.com/hyperledger/burrow/consensus/tendermint.NewTendermint(0xc420148bd0, 0x7f3bfb80d2c0, 0xc42046d720, 0x7f3bfb80bf40, 0xc420554e60, 0xc420554e60, 0x7f3bfa840baa, 0x7f3bfb803e60)
	/go/src/github.com/hyperledger/burrow/consensus/tendermint/tendermint.go:123 +0x114b
github.com/hyperledger/burrow/consensus.LoadConsensusEngineInPipe(0xc420148bd0, 0x7f3bfb80f8c0, 0xc420452a00, 0x24, 0x0)
	/go/src/github.com/hyperledger/burrow/consensus/consensus.go:30 +0x155
github.com/hyperledger/burrow/core.NewCore(0xc420016009, 0x7, 0xc420148bd0, 0xc420148ea0, 0x7f3bfb80bf40, 0xc42012c570, 0x4, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/core/core.go:63 +0x360
github.com/hyperledger/burrow/cmd.NewCoreFromDo(0xc4204ed560, 0xc4200120cf, 0x21, 0x7f3bfae1cf2a)
	/go/src/github.com/hyperledger/burrow/cmd/serve.go:149 +0xa88
github.com/hyperledger/burrow/cmd.ServeRunner.func1(0xc420178d80, 0x7f3bfb85d830, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/cmd/serve.go:167 +0xcb
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).execute(0xc420178d80, 0x7f3bfb85d830, 0x0, 0x0, 0xc420178d80, 0x7f3bfb85d830)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:575 +0x43b
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x7f3bfb7f9cc0, 0x1, 0x1, 0xc420178d80)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:661 +0x369
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).Execute(0x7f3bfb7f9cc0, 0x0, 0xc420196d50)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:620 +0x2d
github.com/hyperledger/burrow/cmd.Execute()
	/go/src/github.com/hyperledger/burrow/cmd/burrow.go:46 +0x33d
main.main()
	/go/src/github.com/hyperledger/burrow/cmd/burrow/main.go:22 +0x16
```",closed,False,2018-01-10 06:57:50,2018-03-03 12:03:58
burrow,ashlinSajan,https://github.com/hyperledger/burrow/issues/667,https://api.github.com/repos/hyperledger/burrow/issues/667,Chain getting stopped on transaction execution,"##Tendermint  ## version 0.8

 ## Burrow-Mint ## version 0.16

**On below transaction execution chain got stopped.**

```
Commit{
    BlockID:    428C54FEC3AE006A45CFFFB3F4B97C31D5A28852:1:3B6E2E0FD9A0
    Precommits: Vote{0:3974B6BA812F 948/00/2(Precommit) 428C54FEC3AE /7E91A34537F3.../}
  }#7A3CD861DE35C02F239E7A5A4B0D9CB8595AA01F
}#4B524B032D3A5628735036D5E685320BBB1D8D43 module=consensus
INFO[01-01|04:37:22] Account has permission                   module=state address=3974B6BA812F915E59FDD11332ABF00EF97A36B8 perm=call
INFO[01-01|04:37:22] Out account: Account{5C1985894DFE860B8D767A0DE3DD554172D5163C:<nil> B:0 C:1202 S: P:{Base: 100011111110; Set: 11111111111111 []}} module=state
INFO[01-01|04:37:22] Calling contract 0000000000000000000000005C1985894DFE860B8D767A0DE3DD554172D5163C with codemodule=state
INFO[01-01|04:37:22] Code for this contractmodule=state
panic: runtime error: slice bounds out of range

goroutine 51 [running]:
panic(0x55c8d82dbca0, 0xc4200160c0)
/usr/lib/go/src/runtime/panic.go:500 +0x1a5
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).call(0xc424584be8, 0xc423b18980, 0xc423b18a00, 0xc421ac3400, 0x4b2, 0x4b2, 0xc424554480, 0x204, 0x204, 0x0, ...)
/go/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:530 +0x57b7
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).Call(0xc424584be8, 0xc423b18980, 0xc423b18a00, 0xc421ac3400, 0x4b2, 0x4b2, 0xc424554480, 0x204, 0x204, 0x0, ...)
/go/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:154 +0x22c
github.com/hyperledger/burrow/manager/burrow-mint/state.ExecTx(0xc4201c2fc0, 0x55c8d86c0ba0, 0xc423af2960, 0xc424564601, 0x55c8d86c1b20, 0xc4201c30b0, 0xc42415ed10, 0x55c8d8275080)
/go/src/github.com/hyperledger/burrow/manager/burrow-mint/state/execution.go:502 +0x6084
github.com/hyperledger/burrow/manager/burrow-mint.(*BurrowMint).DeliverTx(0xc4204a7a40, 0xc424181340, 0x2b1, 0x2b1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
/go/src/github.com/hyperledger/burrow/manager/burrow-mint/burrow-mint.go:110 +0x1a1
github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client.(*localClient).DeliverTxAsync(0xc42011a4e0, 0xc424181340, 0x2b1, 0x2b1, 0x0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client/local_client.go:74 +0x87
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*appConnConsensus).DeliverTxAsync(0xc420181a40, 0xc424181340, 0x2b1, 0x2b1, 0xc423b127e0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/app_conn.go:73 +0x53
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.execBlockOnProxyApp(0x7f4705c60328, 0xc423b10a80, 0x55c8d86cdb00, 0xc420181a40, 0xc42046d280, 0x0, 0x0, 0x0, 0x28, 0x55c8d7e6ce63)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:116 +0x4e1
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).ExecBlock(0xc423b1c420, 0x7f4705c60328, 0xc423b10a80, 0x55c8d86cdb00, 0xc420181a40, 0xc42046d280, 0x1, 0xc4201617c0, 0x14, 0x20, ...)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:38 +0x151
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).ApplyBlock(0xc423b1c420, 0x7f4705c60328, 0xc423b10a80, 0x55c8d86cdb00, 0xc420181a40, 0xc42046d280, 0x1, 0xc4201617c0, 0x14, 0x20, ...)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:237 +0xb7
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).finalizeCommit(0xc420219040, 0x3b5)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1251 +0xb64
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).tryFinalizeCommit(0xc420219040, 0x3b5)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1198 +0x179
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).enterCommit.func1(0xc420219040, 0x0, 0x3b5)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1151 +0x9f
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).enterCommit(0xc420219040, 0x3b5, 0x0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1178 +0x748
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).addVote(0xc420219040, 0xc423b47c80, 0x0, 0x0, 0xc4204ad298, 0x0, 0x0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1467 +0x9e1
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).tryAddVote(0xc420219040, 0xc423b47c80, 0x0, 0x0, 0x20, 0x55c8d830d860)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1356 +0x69
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).handleMsg(0xc420219040, 0x55c8d82c97c0, 0xc420462e00, 0x0, 0x0, 0x3b5, 0x0, 0x6, 0xed1dbb202, 0x23f8088b, ...)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:699 +0x668
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).receiveRoutine(0xc420219040, 0x0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:655 +0x460
created by github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).OnStart
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:389 +0x55b




**when tried to call another contract it gives below error (seems error is due to chain got stopped).**


Burrow error:  Call of method ""eventPoll"" with parameters { sub_id: '412843E0D559BF3CC82837EE16F13FB13CF01C7314E7AE01C0520E053575E419' } responded with ""Error: connect ECONNREFUSED 127.0.0.1:1337"".
(node:9561) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 32969): TypeError: Cannot read property 'args' of undefined
Burrow error:  Call of method ""eventPoll"" with parameters { sub_id: '4C59506BA9269F04B464616E4F2ABE797B64256C630979B61EDBBDF897DB1E64' } responded with ""Error: connect ECONNREFUSED 127.0.0.1:1337"".
(node:9561) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 32970): TypeError: Cannot read property 'args' of undefined
Burrow error:  Call of method ""eventPoll"" with parameters { sub_id: 'D83066652A467CFB5A02BF6627CF60B9198DACF67F414CDE8095594D5E94A5D8' } responded with ""Error: connect ECONNREFUSED 127.0.0.1:1337"".
(node:9561) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 32971): TypeError: Cannot read property 'args' of undefined
Burrow error:  Call of method ""eventPoll"" with parameters { sub_id: '412843E0D559BF3CC82837EE16F13FB13CF01C7314E7AE01C0520E053575E419' } responded with ""Error: connect ECONNREFUSED 127.0.0.1:1337"".
(node:9561) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 32972): TypeError: Cannot read property 'args' of undefined
Burrow error:  Call of method ""eventPoll"" with parameters { sub_id: '4C59506BA9269F04B464616E4F2ABE797B64256C630979B61EDBBDF897DB1E64' } responded with ""Error: connect ECONNREFUSED 127.0.0.1:1337"".
(node:9561) UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: 32973): TypeError: Cannot read property 'args' of undefined




**Below is the error log which got when tried to restart the chain**


DBUG[01-01|07:41:30] Loading configuration for serve command  channel=Trace run_id=2e8331ab-eec7-11e7-874f-be6eee4f30a7 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 info_trace_logger.go:139 convention.go:60 serve.go:133 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve chainId=bchain workingDirectory=/home/monax/.monax/chains/bchain dataDirectory=/home/monax/.monax/chains/bchain/data genesisFile=/home/monax/.monax/chains/bchain/genesis.json
DBUG[01-01|07:41:30] Modules configured                       channel=Trace run_id=2e8331ab-eec7-11e7-874f-be6eee4f30a7 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 info_trace_logger.go:139 convention.go:60 serve.go:147 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve consensusModule=tendermint-0.8 applicationManager=burrowmint-0.16
DBUG[01-01|00:00:00] Starting EventSwitch                     channel=Info run_id=2e8331ab-eec7-11e7-874f-be6eee4f30a7 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 capture.go:43 handler_go14.go:14 handler_go14.go:14 logger.go:120 logger.go:142 service.go:93 core.go:52 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve captured_logging_source=tendermint_log15 module=events impl=EventSwitch
INFO[01-01|07:41:30] Loading BurrowMint                       channel=Info run_id=2e8331ab-eec7-11e7-874f-be6eee4f30a7 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 manager.go:47 core.go:57 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core]"" compatibleConsensus=tendermint-0.8 burrowMintVersion=burrowmint-0.16.3
INFO[01-01|07:41:30] Loaded state                             channel=Info run_id=2e8331ab-eec7-11e7-874f-be6eee4f30a7 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 pipe.go:83 manager.go:48 core.go:57 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" chainId=bchain lastBlockHeight=948 lastBlockHash=
DBUG[01-01|07:41:30] Loaded pipe with application manager     channel=Trace run_id=2e8331ab-eec7-11e7-874f-be6eee4f30a7 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 convention.go:35 log.go:143 convention.go:60 convention.go:45 core.go:61 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core]""
DBUG[01-01|07:41:30] Loaded Tendermint sub-configuration      channel=Trace run_id=2e8331ab-eec7-11e7-874f-be6eee4f30a7 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 convention.go:35 log.go:143 convention.go:60 convention.go:45 tendermint.go:103 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" chainId=bchain genesisFile=/home/monax/.monax/chains/bchain/genesis.json nodeLocalAddress=0.0.0.0:46656 moniker=bchain_full_000 seeds= fastSync=false rpcLocalAddress=0.0.0.0:46657 databaseDirectory=/home/monax/.monax/chains/bchain/data/tendermint/data privateValidatorFile=/home/monax/.monax/chains/bchain/priv_validator.json privValFile=priv_validator.json
DBUG[01-01|00:00:00] Loaded PrivValidator                     channel=Info run_id=2e8331ab-eec7-11e7-874f-be6eee4f30a7 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 capture.go:43 handler_go14.go:14 handler_go14.go:14 logger.go:120 logger.go:146 priv_validator.go:122 tendermint.go:110 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve captured_logging_source=tendermint_log15 module=types file=/home/monax/.monax/chains/bchain/priv_validator.json privValidator=""PrivValidator{3974B6BA812F915E59FDD11332ABF00EF97A36B8 LH:949, LR:0, LS:3}""
INFO[01-01|07:41:30] Force disabling Tendermint's native RPC  channel=Info run_id=2e8331ab-eec7-11e7-874f-be6eee4f30a7 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 tendermint.go:118 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" provided_rpc_laddr=0.0.0.0:46657
panic: Paniced on a Sanity Check: Expected storeHeight (949) and stateHeight (948) to match.

goroutine 1 [running]:
panic(0x560b852756e0, 0xc4201e7260)
/usr/lib/go/src/runtime/panic.go:500 +0x1a5
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.PanicSanity(0x560b852756e0, 0xc4201e7230)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/errors.go:26 +0xe2
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*Handshaker).ReplayBlocks(0xc4201bdbf0, 0x0, 0x0, 0x0, 0x0, 0x560b856a8b00, 0xc4201e7080, 0x0, 0x0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:400 +0xda4
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*Handshaker).Handshake(0xc4201bdbf0, 0x560b856aa200, 0xc420086240, 0x0, 0x0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:329 +0x485
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*multiAppConn).OnStart(0xc420086240, 0xc4201e4a60, 0x15)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/multi_app_conn.go:100 +0x208
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.(*BaseService).Start(0xc420086240, 0x0, 0x0, 0x0)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/service.go:96 +0x548
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node.NewNode(0x560b856aa820, 0xc42011a338, 0xc4204f00a0, 0x560b8569cca0, 0xc4201b92c0, 0x2)
/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node/node.go:68 +0x485
github.com/hyperledger/burrow/consensus/tendermint.NewTendermint(0xc42013cab0, 0x560b856a82c0, 0xc4204989b0, 0x560b856a6f40, 0xc4201f70b0, 0xc4201f70b0, 0x560b846dbbaa, 0x560b8569ee60)
/go/src/github.com/hyperledger/burrow/consensus/tendermint/tendermint.go:123 +0x114b
github.com/hyperledger/burrow/consensus.LoadConsensusEngineInPipe(0xc42013cab0, 0x560b856aa8c0, 0xc420454800, 0x24, 0x0)
/go/src/github.com/hyperledger/burrow/consensus/consensus.go:30 +0x155
github.com/hyperledger/burrow/core.NewCore(0xc420016009, 0x6, 0xc42013cab0, 0xc42013cd80, 0x560b856a6f40, 0xc420214d90, 0x4, 0x0, 0x0)
/go/src/github.com/hyperledger/burrow/core/core.go:63 +0x360
github.com/hyperledger/burrow/cmd.NewCoreFromDo(0xc420120f00, 0xc4200120cf, 0x20, 0x560b84cb7f2a)
/go/src/github.com/hyperledger/burrow/cmd/serve.go:149 +0xa88
github.com/hyperledger/burrow/cmd.ServeRunner.func1(0xc420158d80, 0x560b856f8830, 0x0, 0x0)
/go/src/github.com/hyperledger/burrow/cmd/serve.go:167 +0xcb
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).execute(0xc420158d80, 0x560b856f8830, 0x0, 0x0, 0xc420158d80, 0x560b856f8830)
/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:575 +0x43b
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x560b85694cc0, 0x1, 0x1, 0xc420158d80)
/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:661 +0x369
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).Execute(0x560b85694cc0, 0x0, 0xc4204d9d70)
/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:620 +0x2d
github.com/hyperledger/burrow/cmd.Execute()
/go/src/github.com/hyperledger/burrow/cmd/burrow.go:46 +0x33d
main.main()
/go/src/github.com/hyperledger/burrow/cmd/burrow/main.go:22 +0x16
```

",closed,False,2018-01-10 06:18:22,2018-03-03 21:46:47
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/666,https://api.github.com/repos/hyperledger/burrow/issues/666,Hypermarmot refactor,"# Refactor Summary:
For background see: https://lists.hyperledger.org/pipermail/hyperledger-tsc/2017-October/001163.html

About this PR:
**Note: rpc/v0 is currently out of action, I will resolve this with a future commit (possibly future PR)**

The feature/hypermarmot branch is even with develop/master apart from it containing this large commit: https://github.com/hyperledger/burrow/pull/666/commits/3ba7d190c2ece6b2baefb11b7bf0064b8ea5680c that pulls in the new vendor directory on which these commits have been rebased. This is to avoid third party code that we were acquiring through glide polluting this PR.

Key themes:
- Be a better EVM/execution library; more interfaces for key data structures and clearer boundaries
- Try to be a good Tendermint App rather than fight against it
- More immutability and type safety - ask if you want a mutable type, use stronger typing, offer more specific mutations (e.g. `MutableAccount.IncSequence()`)
- Pull monax tool functionality and tests into Burrow
- Large amounts of residual cleanup dating from original split with Tendermint
- Vendor dependencies for better reproducibility of builds

## Code hygiene
- Unified `Account` notion and introduced interface to support 
- Introduce composable State interfaces
- Use appropriate unsigned types for non-negative quantities
- Default to immutable types
- Move types to where their core functionality is defined (e.g. drop core/types and other delocalisation of types)
- Dial back punning of Tendermint types - but maintain some separation between execution, serialisation, and display types (for the same logical construct) where necessary (i.e. when they may reasonably change for different reasons)
 
- Communication between `TxCache`, `BlockCache`, and `State` strictly through 'State' interfaces rather than database sharing (prepares way for Merkle tree refactor)

## Project infrastructure 
- Transitioned from Glide to Dep
- Vendored dependencies
- Upgraded all dependencies

## Technical debt
- Removed manually mapped config
- Dropped pluggable modules notion
- Removed independent module versioning
- Dropped 'Pipe' notion and lazy loading
- Removed some unnecessary layers of indirection (interfaces)

## Accounts
Replaced the following structs with interfaces to encapsulate and allow immutability:
- Account
- Validator
- PrivateAccount
- Added `Concrete*` serialisation type
- Added 20 byte `Address` type (as opposed to `[]byte`) with various conveniences

## State
- account/state interfaces provide boundary over which state is accessed uniformly
- Introduced `Blockchain`, `Tip`, and `Root` to represent 'our' side of the blockchain state - that which we track, keep synchronised, and use in execution

## Execution
- `BatchExecutor` and `BatchCommitter` wrap `BlockCache` preparing for improved implementation
- `TxEncoder` and `TxDecoder` introduced to make possible to migrate to different binary encoding

## RPC
- Introduce central unified service.go
- Serialisation of `Result` via go-wire data mapper

### tm
- Rename to 'tm' in an effort to forget its origins and avoid confusion with our consensus engine/modules

## Tendermint
- Upgraded to 0.12.0 (and counting)
- Provided read-only view of node
- Implemented monax-keys interface backed PrivValidator (having requested change in Tendermint)
- Provide GenesisDoc in memory - derived from our GenesisDoc rather than passing around file
- Stopped exposing all possible config - will expose the bare minimum and coordinate those values

## Genesis
- `GenesisSpec` provides genesis templating and `monax chains make` type functionality, e.g.
```shell
# Chain one-liner to create keys according to spec, formulate GenesisDoc and config
burrow spec --participant-accounts 2 --full-accounts 1 | burrow configure --genesis-spec=- --validator-index 0 | burrow -c-
```
- Burrow -> TM genesis closed in via AppHash
- Genesis account types made compatible and convertible to/from `Account`/`PrivateAccount`

## Config
- Mapped automatically to/from `BurrowConfig` struct
- sources package providers ability to chain `ConfigProviders` (e.g. environment, file, XDG) together, to use a single file, split across multiple, or read directly from stdin.

## Events
- Serialisation via go-wire data mapper
- Introduce `AnyEventData` sum type
- Separate EVM and execution events
- Fixed empty cache bug

## Tx
- Serialise via data-mapper

## Serialisation
- Drop unnecessary tags and support TOML/JSON
  
  ",closed,True,2018-01-09 19:38:22,2018-02-23 14:45:13
burrow,smblucker,https://github.com/hyperledger/burrow/pull/665,https://api.github.com/repos/hyperledger/burrow/issues/665,Magic bytes to opcodes and comments,"Convert magic byte values to constant opcode references and add comments in vm_test.go

[vm_test.go.zip](https://github.com/hyperledger/burrow/files/1612108/vm_test.go.zip)
",closed,True,2018-01-08 15:42:46,2018-01-24 12:01:05
burrow,zitterbewegung,https://github.com/hyperledger/burrow/pull/664,https://api.github.com/repos/hyperledger/burrow/issues/664,Fixed broken links in Contributing and README.md,"Addresses issue #663 where there was a broken link in README.md (monax link) and the Contributor Guidelines link
Signed-off-by: Joshua Jay Herman <zitterbewegung@gmail.com>
",closed,True,2018-01-01 18:16:32,2018-01-01 18:20:30
burrow,zitterbewegung,https://github.com/hyperledger/burrow/issues/663,https://api.github.com/repos/hyperledger/burrow/issues/663,Broken links in documentation,"663-broken_links
Burrow version: commit a140ca605340c6adfd84ed6123a5a766d0eaca55 on MASTER

Operating System : Mac OS 10.13.2 Darwin ASC 17.3.0 Darwin Kernel Version 17.3.0: Thu Nov  9 18:09:22 PST 2017; root:xnu-4570.31.3~1/RELEASE_X86_64 x86_64

What you expected to happen
Link would load correctly when clicked on in Safari (Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_2) AppleWebKit/604.4.7 (KHTML, like Gecko) Version/11.0.2 Safari/604.4.7) 
What actually happened:

The link was broken.

Steps to reproduction:
Click the link
",closed,False,2017-12-31 14:20:06,2018-02-26 13:48:55
burrow,tommling,https://github.com/hyperledger/burrow/pull/662,https://api.github.com/repos/hyperledger/burrow/issues/662,Glide dev install patch 660,"**Summary:**
As per issue 660, fix the dependency missing issue when using glide-install. This is mainly a work around while burrow catches up to a slightly newer tendermint version.


**Why the pull request?**
Basically, v0.9.2 tries to pull
```
[WARN]	Unable to checkout github.com/tendermint/go-clist
[ERROR]	Error looking for github.com/tendermint/go-clist: Unable to get repository: Cloning into '/home/t/.glide/cache/src/https-github.com-tendermint-go-clist'...
ERROR: Repository not found.
```
but go-clist now lives in a subpackage of github.com/tendermint/tmlibz

Unfortunately, not all the packages were migrated so we have some issues with multiple versions i.e.:
```
[ERROR]	Unable to import from github.com/tendermint/go-p2p. Err: Import github.com/tendermint/tmlibs repeated with different versions '' and 'develop'
```

**What does it do?**
Simply points glide to package it needs.
",closed,True,2017-12-29 18:22:11,2018-01-24 11:57:33
burrow,tommling,https://github.com/hyperledger/burrow/pull/661,https://api.github.com/repos/hyperledger/burrow/issues/661,Glide dev install patch 660,"**Summary:**
As per issue 660, fix the dependency missing issue when using glide-install. This is mainly a work around while burrow catches up to a slightly newer tendermint version.


**Why the pull request?**
Basically, v0.9.2 tries to pull
```
[WARN]	Unable to checkout github.com/tendermint/go-clist
[ERROR]	Error looking for github.com/tendermint/go-clist: Unable to get repository: Cloning into '/home/t/.glide/cache/src/https-github.com-tendermint-go-clist'...
ERROR: Repository not found.
```
but go-clist now lives in a subpacjage of github.com/tendermint/tmlibz

Unfortunately, not all the packages were migrated so we have some issues with multiple versions i.e.:
```
[ERROR]	Unable to import from github.com/tendermint/go-p2p. Err: Import github.com/tendermint/tmlibs repeated with different versions '' and 'develop'
```

**What does it do?**
Simply points glide to package it needs.
",closed,True,2017-12-29 18:18:35,2017-12-29 18:21:32
burrow,tommling,https://github.com/hyperledger/burrow/issues/660,https://api.github.com/repos/hyperledger/burrow/issues/660,Glide install from source fails due to outdated / migrated dependencies on tendermint packages,"**Summary:**
The install process laid out in https://github.com/hyperledger/burrow#for-developers is slightly outdated. I have found this to be true at least in repeated observation that the go-clist package no longer exists in the github.com/tendermint/tendermint repository. A lot of the packages that were present here have been migrated to github.com/tendermint/tmlibs/ as the tendermint project has matured.


- [a140ca605340c6adfd84ed6123a5a766d0eaca55] `burrow version`
- [0.9.2] `go version` (if applicable)
- [ Ubuntu 16.04 (virtual) ] operating system details (osx/windows/linux)
- [ Smooth `gliding` installation ] what you expected to happen
- [ Crash and burn installation ] what actually happened
- [ https://github.com/hyperledger/burrow#for-developers ] steps to reproduction



**Initial observation:**
```
>>>>>#glide install
...
...
[INFO]	--> Fetching gopkg.in/fatih/set.v0
[INFO]	--> Fetching gopkg.in/go-playground/validator.v8
[INFO]	--> Fetching gopkg.in/tylerb/graceful.v1
[INFO]	--> Fetching gopkg.in/yaml.v2

Password for 'https://github.com': 
[WARN]	Unable to checkout github.com/tendermint/go-clist
[ERROR]	Update failed for github.com/tendermint/go-clist: Unable to get repository: Cloning into '/home/t/.glide/cache/src/https-github.com-tendermint-go-clist'...
remote: Repository not found.
fatal: Authentication failed for 'https://github.com/tendermint/go-clist/'
: exit status 128
[ERROR]	Failed to install: Unable to get repository: Cloning into '/home/t/.glide/cache/src/https-github.com-tendermint-go-clist'...
remote: Repository not found.
fatal: Authentication failed for 'https://github.com/tendermint/go-clist/'
: exit status 128
```


**Side note:**
Also, note that the workaround in ( https://github.com/Masterminds/glide/issues/675 ) recommends setting global git config via command line with:
`git config --global url.""git@github.com:"".insteadOf ""https://github.com/""`

This avoids the authentication catch, but does not fix the problem.

**Propose Fix:**
A pull request on this issue to develop that updates glide.lock and glide.yaml that points to new tendermint/tmlibs repo. This does not entierly fix the problem because the tendermint version currently used is ~0.9.2, while the migration occurred at a later version closer to ~0.12.1 I believe.




",closed,False,2017-12-29 18:04:50,2018-02-08 16:27:33
burrow,dineshrivankar,https://github.com/hyperledger/burrow/issues/659,https://api.github.com/repos/hyperledger/burrow/issues/659,docker build . is not working,"Step 1/22 : FROM golang:1.9.0-alpine3.6 as builder
Error parsing reference: ""golang:1.9.0-alpine3.6 as builder"" is not a valid repository/tag: invalid reference format

**docker version**
**Client:**
 Version:      17.09.1-ce
 API version:  1.26 (downgraded from 1.32)
 Go version:   go1.8.3
 Git commit:   19e2cf6
 Built:        Thu Dec  7 22:24:23 2017
 OS/Arch:      linux/amd64

**Server:**
 Version:      17.03.0-ce
 API version:  1.26 (minimum version 1.12)
 Go version:   go1.7.5
 Git commit:   3a232c8
 Built:        Tue Feb 28 07:52:04 2017
 OS/Arch:      linux/amd64
 Experimental: false
",closed,False,2017-12-14 13:48:41,2017-12-15 04:59:24
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/658,https://api.github.com/repos/hyperledger/burrow/issues/658,[events] Provide event firehose,"This is now being implemented, will consist of:

- EventCache stored in state each block with event index and block height as metadata
- a GRPC service that allows a query `GetEvents(fromBlock, toBlock)` to get all events in range (likely extensions to follow are simple filters using existing query language and streaming support that will keep sending new event batches if `toBlock` is omitted

Future work: a block and transaction service built along the same lines.

Optimisation: we can store events for a block (or possibly more granular batches) as protobuf-encoded bytes. We should be able to serve these directly over GRPC without incurring another decoding-encoding cycle (need to look into the appropriate places to hook this in).",closed,False,2017-11-29 14:36:21,2018-08-16 12:54:20
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/657,https://api.github.com/repos/hyperledger/burrow/issues/657,WIP: Hypermarmot refactor,"# WIP Refactor Summary:

**Please note the commits prefixed with `WIP:` will be rebased in the future, you may need to force pull in the future**

**This PR is offensively large, but I promise it is roughly 2/3 renames, comments, and tests**

For background see: https://lists.hyperledger.org/pipermail/hyperledger-tsc/2017-October/001163.html 

Key themes:
- Be a better EVM/execution library; more interfaces for key data structures and clearer boundaries
- Try to be a good Tendermint App rather than fight against it
- More immutability and type safety - ask if you want a mutable type, use stronger typing, offer more specific mutations (e.g. `MutableAccount.IncSequence()`)
- Pull monax tool functionality and tests into Burrow
- Large amounts of residual cleanup dating from original split with Tendermint

## Code hygiene
- Unified `Account` notion and introduced interface to support 
- Introduce composable State interfaces
- Use appropriate unsigned types for non-negative quantities
- Default to immutable types
- Move types to where their core functionality is defined (e.g. drop core/types and other delocalisation of types)
- Dial back punning of Tendermint types - but maintain some separation between execution, serialisation, and display types (for the same logical construct) where necessary (i.e. when they may reasonably change for different reasons)
 
- Communication between `TxCache`, `BlockCache`, and `State` strictly through 'State' interfaces rather than database sharing (prepares way for Merkle tree refactor)

## Project infrastructure 
- Transitioned from Glide to Dep
- Vendored dependencies
- Upgraded all dependencies

## Technical debt
- Removed manually mapped config
- Dropped pluggable modules notion
- Removed independent module versioning
- Dropped 'Pipe' notion and lazy loading
- Removed some unnecessary layers of indirection (interfaces)

## Accounts
Replaced the following structs with interfaces to encapsulate and allow immutability:
- Account
- Validator
- PrivateAccount
- Added `Concrete*` serialisation type
- Added 20 byte `Address` type (as opposed to `[]byte`) with various conveniences

## State
- account/state interfaces provide boundary over which state is accessed uniformly
- Introduced `Blockchain`, `Tip`, and `Root` to represent 'our' side of the blockchain state - that which we track, keep synchronised, and use in execution

## Execution
- `BatchExecutor` and `BatchCommitter` wrap `BlockCache` preparing for improved implementation
- `TxEncoder` and `TxDecoder` introduced to make possible to migrate to different binary encoding

## RPC
- Introduce central unified service.go
- Serialisation of `Result` via go-wire data mapper

### tm
- Rename to 'tm' in an effort to forget its origins and avoid confusion with our consensus engine/modules

## Tendermint
- Upgraded to 0.12.0 (and counting)
- Provided read-only view of node
- Implemented monax-keys interface backed PrivValidator (having requested change in Tendermint)
- Provide GenesisDoc in memory - derived from our GenesisDoc rather than passing around file
- Stopped exposing all possible config - will expose the bare minimum and coordinate those values

## Genesis
- `GenesisSpec` provides genesis templating and `monax chains make` type functionality, e.g.
```shell
# Chain one-liner to create keys according to spec, formulate GenesisDoc and config
burrow spec --participant-accounts 2 --full-accounts 1 | burrow configure --genesis-spec=- --validator-index 0 | burrow -c-
```
- Burrow -> TM genesis closed in via AppHash
- Genesis account types made compatible and convertible to/from `Account`/`PrivateAccount`

## Config
- Mapped automatically to/from `BurrowConfig` struct
- sources package providers ability to chain `ConfigProviders` (e.g. environment, file, XDG) together, to use a single file, split across multiple, or read directly from stdin.

## Events
- Serialisation via go-wire data mapper
- Introduce `AnyEventData` sum type
- Separate EVM and execution events
- Fixed empty cache bug

## Tx
- Serialise via data-mapper

## Serialisation
- Drop unnecessary tags and support TOML/JSON",closed,True,2017-11-23 15:56:09,2018-01-30 22:00:18
burrow,ryjones,https://github.com/hyperledger/burrow/pull/656,https://api.github.com/repos/hyperledger/burrow/issues/656,Create DCO,DO NOT MERGE,closed,True,2017-10-03 21:27:59,2017-10-03 21:36:25
burrow,kevinaquick,https://github.com/hyperledger/burrow/issues/655,https://api.github.com/repos/hyperledger/burrow/issues/655,Installation problem,"Hi

We have been trying to install Burrow following the instructions, but have been unable to do so.

Details as follows:

We are running Ubuntu 16.04.3
Monax CLI Version: 0.16.0
go version go1.6.2 linux/amd64

Following the install instructions and running the following from the command line:

go get -d github.com/hyperledger/burrow

We get the following error:
""can't load package: package github.com/hyperledger/burrow: no buildable Go source files in /root/.go/src/github.com/hyperledger/burrow""

Not to be totally thrown by this we did try installing by hand by going to:
/.go/src/github.com/hyperledger/burrow/cmd  (where .go is our $GOPATH) and running go install from there however, this threw up a list of packages which were missing (tendermint related etc). SO we went through and installed each of these individually except one which wouldn't install - namely:

github.com/tendermint/go-p2p

which throws up the error:

# github.com/tendermint/go-p2p
../../../tendermint/go-p2p/peer.go:169: cannot use p.PubKey() (type ""github.com/tendermint/go-crypto"".PubKeyEd25519) as type ""github.com/tendermint/go-crypto"".PubKey in argument to peerNodeInfo.PubKey.Equals
../../../tendermint/go-p2p/secret_connection.go:51: invalid type assertion: locPrivKey.PubKey().(""github.com/tendermint/go-crypto"".PubKeyEd25519) (non-interface type ""github.com/tendermint/go-crypto"".PubKey on left)
../../../tendermint/go-p2p/secret_connection.go:99: invalid type assertion: remPubKey.(""github.com/tendermint/go-crypto"".PubKeyEd25519) (non-interface type ""github.com/tendermint/go-crypto"".PubKey on left)
../../../tendermint/go-p2p/secret_connection.go:258: invalid type assertion: locPrivKey.Sign(challenge[:]).(""github.com/tendermint/go-crypto"".SignatureEd25519) (non-interface type ""github.com/tendermint/go-crypto"".Signature on left)
../../../tendermint/go-p2p/secret_connection.go:273: cannot use pubKey (type ""github.com/tendermint/go-crypto"".PubKeyEd25519) as type ""github.com/tendermint/go-crypto"".PubKey in field value
../../../tendermint/go-p2p/secret_connection.go:273: cannot use signature (type ""github.com/tendermint/go-crypto"".SignatureEd25519) as type ""github.com/tendermint/go-crypto"".Signature in field value
../../../tendermint/go-p2p/secret_connection.go:297: cannot use remSignature (type ""github.com/tendermint/go-crypto"".SignatureEd25519) as type ""github.com/tendermint/go-crypto"".Signature in argument to remPubKey.VerifyBytes
../../../tendermint/go-p2p/switch.go:157: invalid type assertion: nodePrivKey.PubKey().(""github.com/tendermint/go-crypto"".PubKeyEd25519) (non-interface type ""github.com/tendermint/go-crypto"".PubKey on left)
../../../tendermint/go-p2p/switch.go:216: cannot use peer.PubKey() (type ""github.com/tendermint/go-crypto"".PubKeyEd25519) as type ""github.com/tendermint/go-crypto"".PubKey in argument to sw.nodeInfo.PubKey.Equals
../../../tendermint/go-p2p/switch.go:534: invalid type assertion: privKey.PubKey().(""github.com/tendermint/go-crypto"".PubKeyEd25519) (non-interface type ""github.com/tendermint/go-crypto"".PubKey on left)
../../../tendermint/go-p2p/switch.go:534: too many errors
root@kmi-blockcn02:~/.go/src/github.com/hyperledger/burrow/cmd#


Any help and suggestions would be appreciated

Thanks
Kevin",closed,False,2017-09-13 10:46:57,2018-08-29 14:37:52
burrow,RobertDiebels,https://github.com/hyperledger/burrow/issues/654,https://api.github.com/repos/hyperledger/burrow/issues/654,Error initializing DB: sync /home/monax/.monax/data/burrowmint/data/burrowmint.db: invalid argument,"Please include in your bug report:

- [ x ] `burrow version` (docker image tag or branch if built from source)  
017.0
- [ ] `monax version` (if applicable)
- [ ] `go version` (if applicable)
- [ x ] `docker version` (if applicable) 
17.05.0-ce 
- [ x ] operating system details (osx/windows/linux) 
Windows 10
- [ x ] what you expected to happen
I expected burrow to boot leveldb.
- [ x ] what actually happened
LevelDB threw an Invalid argument exception
- [ x ] steps to reproduction
1. Run: docker run -v /c/Users/$LocalUser/Containers/burrowconfig:/home/monax/.monax --rm --name burrow-node quay.io/monax/db:0.17.0
2. Behold the `Invalid argument` error.

**Info**
So I did some digging before I dropped an issue here. I found an issue (where I also commented) https://github.com/google/leveldb/issues/281 which describes the same issue.
It might have something to do with the fact that Docker Quickstart Terminal uses shared folders for volumes on Windows.

Maybe @silasdavis could tell me how he tested the container? That would be great.

**Edit:** I can't reproduce on Linux so I guess this is Windows only. Which is no longer supported in 0.17.0 of the Monax-cli I believe. Is this also the case for Burrow?",closed,False,2017-09-10 10:14:25,2017-09-16 19:20:40
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/653,https://api.github.com/repos/hyperledger/burrow/issues/653,Fix 0.17.1,,closed,True,2017-09-06 14:04:20,2017-09-06 15:34:11
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/652,https://api.github.com/repos/hyperledger/burrow/issues/652,Make sure we check for presence of burrow binary and that build succeeds,This fixes the missing Burrow binary from v0.17.1 and adds a test of the docker container to ensure it doesn't happen again.,closed,True,2017-09-06 13:21:09,2018-01-08 11:44:53
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/651,https://api.github.com/repos/hyperledger/burrow/issues/651,Ensure check and build included in pre-release CI jobs,"Missing a check (gofmt etc) in our pre-develop branch CI, thus failure when PRing to master not spotted when PRing to develop. Fixed here.",closed,True,2017-09-05 13:22:24,2018-01-08 11:44:53
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/650,https://api.github.com/repos/hyperledger/burrow/issues/650,Slacken multiplex test timing,,closed,True,2017-09-05 13:02:28,2017-09-05 13:12:21
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/649,https://api.github.com/repos/hyperledger/burrow/issues/649,Release 0.17.1,,closed,True,2017-09-05 12:53:31,2017-09-05 13:50:51
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/648,https://api.github.com/repos/hyperledger/burrow/issues/648,Use arg in dockerfile and remove volume,Will push this shortly as a patch release,closed,True,2017-09-05 10:39:30,2017-09-05 12:52:07
burrow,compleatang,https://github.com/hyperledger/burrow/pull/647,https://api.github.com/repos/hyperledger/burrow/issues/647,remove volume from dockerfile,"This negatively affects downstream images who will be locked into root ownership of `$MONAX_PATH`. Removing the `VOLUME` invocation allows for normal transfer of ownership of the `$MONAX_PATH` by downstream images, and within this image.",closed,True,2017-09-04 22:42:30,2017-09-05 10:40:40
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/646,https://api.github.com/repos/hyperledger/burrow/issues/646,Release 0.17.0,"Prepare master to have commit tagged 0.17.0, triggering release.

## Changelog
This is a service release with some significant ethereum/solidity compatibility improvements and new logging features. It includes:

- [Upgrade to use Tendermint v0.9.2](https://github.com/hyperledger/burrow/pull/595)
- [Implemented dynamic memory](https://github.com/hyperledger/burrow/pull/607) assumed by the EVM bytecode produce by solidity, fixing various issues.
- Logging sinks and configuration - providing a flexible mechanism for configuring log flows and outputs see [logging section in readme](https://github.com/hyperledger/burrow#logging). Various other logging enhancements.
- Fix event unsubscription
- Remove module-specific versioning
- Rename suicide to selfdestruct
- SNative tweaks

Known issues:

- SELFDESTRUCT opcode causes a panic when an account is removed. A [fix](https://github.com/hyperledger/burrow/pull/605) was produced but was [reverted](https://github.com/hyperledger/burrow/pull/636) pending investigation of a possible regression.",closed,True,2017-09-04 11:32:21,2018-09-25 21:00:35
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/645,https://api.github.com/repos/hyperledger/burrow/issues/645,Fix various logging issues revealed by PaaS deployment,,closed,True,2017-09-02 14:58:46,2017-09-02 23:49:58
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/644,https://api.github.com/repos/hyperledger/burrow/issues/644,Upgrade our CI/CD process,"Initially motivated by wanting to upgrade our images to use alpine 3.6 I have streamlined and improved the build process in the following ways:

- Upgraded our base image to alpine 3.6 and go 1.9.0
- Upgraded to CircleCI 2.0 (mostly to get access to docker >= 17.05, but this will be the version they support going forward)
- Changed our two-step build process + script to a single multistage build (this gives us the same small build image without juggling artefacts
- Dropped out dependence on Monax build and base images (defined in https://github.com/monax/monax). We now just depend on our own Dockerfile and a well maintained external images, so it should be easier to upgrade and get security fixes. 
- Enhanced our immutability guarantees around released images by:
  - Not pushing a release unless code version and tag version match
  - Pushing a separate `db-dev-${time}-${commit}` images from develop to avoid accidentally depending on a 'mutable pre-release'

Note that in order to get branch and tag filtering on CircleCI 2.0 I had to use their 'workflow' feature. We could potentially use this for other things, but frankly it was a bit of a pain to get it to do something as obvious as this setup is. Still it's nice to watch the workflow graph when it works...

I have been testing and iterating the circle process on my own fork. A commit to develop will trigger a build like this:
https://circleci.com/workflow-run/02e47d4f-dac1-4380-bce0-07d794e52f99

A tag is similar, but the build tool would tag it with the version in version.go (provided it the tag version matches).

Any other commit just tests:
https://circleci.com/workflow-run/6f4c8d9a-b828-472c-b74b-fd0917fab1bd

I have run https://github.com/monax/monax/blob/master/tests/test_jobs.sh against a chain running the image built from this and the tests pass.",closed,True,2017-08-31 15:06:02,2017-09-06 06:36:05
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/643,https://api.github.com/repos/hyperledger/burrow/issues/643,Fix various data races in events tests,Various data races in events (some are still outstanding) that cause intermittent test failures removed. Events could just do with an overhaul but every little helps.,closed,True,2017-08-30 13:49:34,2018-01-08 11:44:53
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/642,https://api.github.com/repos/hyperledger/burrow/issues/642,Specify log15 time key,The absence of this was causing an empty string for time key in log output,closed,True,2017-08-29 14:42:20,2017-08-29 14:51:49
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/641,https://api.github.com/repos/hyperledger/burrow/issues/641,Release 0.17.0,,closed,True,2017-08-25 21:20:24,2017-08-25 21:31:38
burrow,rjones-lf,https://github.com/hyperledger/burrow/pull/640,https://api.github.com/repos/hyperledger/burrow/issues/640,trigger cla,don't merge,closed,True,2017-08-25 21:04:45,2017-08-25 21:05:13
burrow,rjones-lf,https://github.com/hyperledger/burrow/pull/639,https://api.github.com/repos/hyperledger/burrow/issues/639,Create cla,,closed,True,2017-08-25 21:00:47,2017-08-25 21:04:02
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/638,https://api.github.com/repos/hyperledger/burrow/issues/638,Add documentation and changelog for 0.17.0,Prepares for merging develop to master for tagging and releasing 0.17.0 ,closed,True,2017-08-25 19:20:21,2018-07-19 22:50:34
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/637,https://api.github.com/repos/hyperledger/burrow/issues/637,Make sure we log somewhere if no config supplied,,closed,True,2017-08-25 15:41:07,2018-01-08 11:44:53
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/636,https://api.github.com/repos/hyperledger/burrow/issues/636,Revert SELFDESTRUCT fix,"This reverts commit 288737d6ebec0888d131897489de7deb69969831 due to a possible regression described in: https://github.com/hyperledger/burrow/issues/626.

We don't have a reproduction of issue yet but we'll release with broken SELFDESTRUCT instead of possible bug here.",closed,True,2017-08-25 14:51:39,2018-01-08 11:45:54
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/635,https://api.github.com/repos/hyperledger/burrow/issues/635,Only push tagged version to their quay.io label,"This PR:

- Only pushes to quay.io from a tagged version or from develop
- Adds the commit and date to the docker label if building from a commit that is not tagged like a version (e.g. v0.17.0)

So:

- tagged commits should build and push to: `quay.io/monax/db:0.17.0`
- later on, commits to develop will push to `quay.io/monax/db:0.17.0-dev-20172408-c4c4651` (and so on...)

This means we can drop the idea of a 'mutable docker image for pre-release versions' which has been problematic. It also means we do not need to defensively version bump (before we know what kind of bump we want to do) on master/develop and the various pain that comes with version bump commits ending up as unexpected ancestors on branches we did not expect. This should generally remove some busywork.

The big bang of doing a release should be pushing the version tag. Note that if the version tag disagrees with the version in version.go then `build_tool.sh` will fail noisily.",closed,True,2017-08-24 16:42:28,2018-01-08 11:45:54
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/634,https://api.github.com/repos/hyperledger/burrow/issues/634,Some missing commits from master needed for clean merge on develop,,closed,True,2017-08-24 15:45:33,2018-01-08 11:45:54
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/633,https://api.github.com/repos/hyperledger/burrow/issues/633,Port up,,closed,True,2017-08-24 14:56:00,2017-08-24 14:59:43
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/632,https://api.github.com/repos/hyperledger/burrow/issues/632,Release 0.17.0,"*Merge first this: #629 to get develop upstream of maser. This PR is branched from the source of #629.*

This PR includes all changes currently on develop omitting 288737d6ebec0888d131897489de7deb69969831 due to suspicious over a regression that may have been introduced by that change (see here: https://github.com/hyperledger/burrow/issues/626)

Once merged to master, tagged, and released this will become fixed as the default Burrow version that the https://github.com/monax/monax 0.18.0 depends on. ",closed,True,2017-08-24 13:39:15,2017-08-24 14:30:28
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/631,https://api.github.com/repos/hyperledger/burrow/issues/631,Port master to develop,"This is mostly to make the version bump to 0.16.1 and ancestor of changes on develop so develop is mergeable to master.

I've also taken opportunity to add goimports fix directive that is useful to have in Makefile",closed,True,2017-08-24 13:31:33,2017-08-24 13:57:54
burrow,varun2887,https://github.com/hyperledger/burrow/issues/630,https://api.github.com/repos/hyperledger/burrow/issues/630,Go source file missing,"> # go get -d github.com/hyperledger/burrow

`can't load package: package github.com/hyperledger/burrow: no buildable Go source files in /root/go/src/github.com/hyperledger/burrow`",closed,False,2017-08-08 08:33:44,2017-08-08 08:47:22
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/629,https://api.github.com/repos/hyperledger/burrow/issues/629,Port changes from master,"This is mostly to make the version bump to 0.16.1 and ancestor of changes on develop so develop is mergeable to master.

I've also taken opportunity to add goimports fix directive that is useful to have in Makefile",closed,True,2017-08-04 15:55:53,2017-08-24 14:03:38
burrow,ghimire,https://github.com/hyperledger/burrow/pull/628,https://api.github.com/repos/hyperledger/burrow/issues/628,Fix incorrect link references in README.md,,closed,True,2017-07-27 16:41:46,2017-08-24 13:55:52
burrow,ratranqu,https://github.com/hyperledger/burrow/issues/627,https://api.github.com/repos/hyperledger/burrow/issues/627,Panic in SLOAD when trying to access contract storage,"Please include in your bug report:

- [ ] `burrow version` (docker image tag or branch if built from source)
develop

- [ ] steps to reproduction
` burrow serve --work-dir ~/decpub/single -d`

In this case, `burrow` recovers however, the storage is somewhat corrupted as it is requesting for a key that it can't find.

--
```
ubuntu@ip-172-31-46-168:~$ burrow serve --work-dir ~/decpub/single -d
(1) (00000000) 00000000000000000000000076458C984DC86C704392960E5EC80E34C916E314 (code=8934) gas: 1000000 (d) D40A42C6
(pc) 0   (op) PUSH1          (st) 0     => 0x0000000000000000000000000000000000000000000000000000000000000060
(pc) 2   (op) PUSH1          (st) 1     => 0x0000000000000000000000000000000000000000000000000000000000000040
(pc) 4   (op) MSTORE         (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000060
(pc) 5   (op) CALLDATASIZE   (st) 0     => 4
(pc) 6   (op) ISZERO         (st) 1      == 0 = 0
(pc) 7   (op) PUSH2          (st) 1     => 0x000000000000000000000000000000000000000000000000000000000000012F
(pc) 10  (op) JUMPI          (st) 2     ~> false
(pc) 11  (op) PUSH1          (st) 0     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 13  (op) CALLDATALOAD   (st) 1     => 0xD40A42C600000000000000000000000000000000000000000000000000000000
(pc) 14  (op) PUSH29         (st) 1     => 0x0000000100000000000000000000000000000000000000000000000000000000
(pc) 44  (op) SWAP1          (st) 2     => [2] D40A42C600000000000000000000000000000000000000000000000000000000
(pc) 45  (op) DIV            (st) 2     95908453223628586451477204973283000389714216043549107193303019803679586779136 / 26959946667150639794667015087019630673637144422540572481103610249216 = 3557442246 (00000000000000000000000000000000000000000000000000000000D40A42C6)
(pc) 46  (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 47  (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000009428941
(pc) 52  (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000009428941 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 53  (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000141
(pc) 56  (op) JUMPI          (st) 3     ~> false
(pc) 57  (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 58  (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000012065FE0
(pc) 63  (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000012065FE0 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 64  (op) PUSH2          (st) 2     => 0x000000000000000000000000000000000000000000000000000000000000016B
(pc) 67  (op) JUMPI          (st) 3     ~> false
(pc) 68  (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 69  (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000030B8F86D
(pc) 74  (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000030B8F86D == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 75  (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000193
(pc) 78  (op) JUMPI          (st) 3     ~> false
(pc) 79  (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 80  (op) PUSH4          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000352F3070
(pc) 85  (op) EQ             (st) 3     00000000000000000000000000000000000000000000000000000000352F3070 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 86  (op) PUSH2          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000000001B0
(pc) 89  (op) JUMPI          (st) 3     ~> false
(pc) 90  (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 91  (op) PUSH4          (st) 2     => 0x000000000000000000000000000000000000000000000000000000003A067CA6
(pc) 96  (op) EQ             (st) 3     000000000000000000000000000000000000000000000000000000003A067CA6 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 97  (op) PUSH2          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000000001CD
(pc) 100 (op) JUMPI          (st) 3     ~> false
(pc) 101 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 102 (op) PUSH4          (st) 2     => 0x000000000000000000000000000000000000000000000000000000003F6C756D
(pc) 107 (op) EQ             (st) 3     000000000000000000000000000000000000000000000000000000003F6C756D == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 108 (op) PUSH2          (st) 2     => 0x000000000000000000000000000000000000000000000000000000000000020B
(pc) 111 (op) JUMPI          (st) 3     ~> false
(pc) 112 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 113 (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000042087D4F
(pc) 118 (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000042087D4F == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 119 (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000228
(pc) 122 (op) JUMPI          (st) 3     ~> false
(pc) 123 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 124 (op) PUSH4          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000488DD387
(pc) 129 (op) EQ             (st) 3     00000000000000000000000000000000000000000000000000000000488DD387 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 130 (op) PUSH2          (st) 2     => 0x000000000000000000000000000000000000000000000000000000000000025B
(pc) 133 (op) JUMPI          (st) 3     ~> false
(pc) 134 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 135 (op) PUSH4          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000628FA5A7
(pc) 140 (op) EQ             (st) 3     00000000000000000000000000000000000000000000000000000000628FA5A7 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 141 (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000283
(pc) 144 (op) JUMPI          (st) 3     ~> false
(pc) 145 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 146 (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000062CFD3AB
(pc) 151 (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000062CFD3AB == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 152 (op) PUSH2          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000000002DE
(pc) 155 (op) JUMPI          (st) 3     ~> false
(pc) 156 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 157 (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000069D94266
(pc) 162 (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000069D94266 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 163 (op) PUSH2          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000000002FB
(pc) 166 (op) JUMPI          (st) 3     ~> false
(pc) 167 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 168 (op) PUSH4          (st) 2     => 0x000000000000000000000000000000000000000000000000000000007E79E8BA
(pc) 173 (op) EQ             (st) 3     000000000000000000000000000000000000000000000000000000007E79E8BA == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 174 (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000318
(pc) 177 (op) JUMPI          (st) 3     ~> false
(pc) 178 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 179 (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000081713422
(pc) 184 (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000081713422 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 185 (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000398
(pc) 188 (op) JUMPI          (st) 3     ~> false
(pc) 189 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 190 (op) PUSH4          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000860459B5
(pc) 195 (op) EQ             (st) 3     00000000000000000000000000000000000000000000000000000000860459B5 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 196 (op) PUSH2          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000000003B5
(pc) 199 (op) JUMPI          (st) 3     ~> false
(pc) 200 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 201 (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000094510240
(pc) 206 (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000094510240 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 207 (op) PUSH2          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000000003DB
(pc) 210 (op) JUMPI          (st) 3     ~> false
(pc) 211 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 212 (op) PUSH4          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000AA23E03D
(pc) 217 (op) EQ             (st) 3     00000000000000000000000000000000000000000000000000000000AA23E03D == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 218 (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000422
(pc) 221 (op) JUMPI          (st) 3     ~> false
(pc) 222 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 223 (op) PUSH4          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000CACBAF56
(pc) 228 (op) EQ             (st) 3     00000000000000000000000000000000000000000000000000000000CACBAF56 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 229 (op) PUSH2          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000000004A2
(pc) 232 (op) JUMPI          (st) 3     ~> false
(pc) 233 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 234 (op) PUSH4          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000CC006F59
(pc) 239 (op) EQ             (st) 3     00000000000000000000000000000000000000000000000000000000CC006F59 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 0
(pc) 240 (op) PUSH2          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000000004E9
(pc) 243 (op) JUMPI          (st) 3     ~> false
(pc) 244 (op) DUP1           (st) 1     => [1] 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 245 (op) PUSH4          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000D40A42C6
(pc) 250 (op) EQ             (st) 3     00000000000000000000000000000000000000000000000000000000D40A42C6 == 00000000000000000000000000000000000000000000000000000000D40A42C6 = 1
(pc) 251 (op) PUSH2          (st) 2     => 0x000000000000000000000000000000000000000000000000000000000000051C
(pc) 254 (op) JUMPI          (st) 3     ~> 1308
(pc) 1308 (op) JUMPDEST       (st) 1    
(pc) 1309 (op) CALLVALUE      (st) 1     => 0
(pc) 1310 (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000002
(pc) 1313 (op) JUMPI          (st) 3     ~> false
(pc) 1314 (op) PUSH2          (st) 1     => 0x000000000000000000000000000000000000000000000000000000000000052E
(pc) 1317 (op) PUSH1          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000004
(pc) 1319 (op) DUP1           (st) 3     => [1] 0x0000000000000000000000000000000000000000000000000000000000000004
(pc) 1320 (op) POP            (st) 4     => 0x0000000000000000000000000000000000000000000000000000000000000004
(pc) 1321 (op) POP            (st) 3     => 0x0000000000000000000000000000000000000000000000000000000000000004
(pc) 1322 (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000002141
(pc) 1325 (op) JUMP           (st) 3     ~> 8513
(pc) 8513 (op) JUMPDEST       (st) 2    
(pc) 8514 (op) PUSH1          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 8516 (op) PUSH1          (st) 3     => 0x0000000000000000000000000000000000000000000000000000000000000009
(pc) 8518 (op) PUSH1          (st) 4     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 8520 (op) POP            (st) 5     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 8521 (op) SLOAD          (st) 4    

2017/07/14 19:44:28 [Recovery] panic recovered:
POST /rpc HTTP/1.1
Host: api.katalysis.io
Connection: close
Accept: */*
Connection: close
Content-Length: 220
Content-Type: application/json
User-Agent: curl/7.54.0
X-Forwarded-For: 80.56.3.148
X-Nginx-Proxy: true
X-Real-Ip: 80.56.3.148


Panicked on a Sanity Check: Value missing for key A9D0F659170A53D1970DFB0C2573CA26ECD9DE47
/usr/local/go/src/runtime/panic.go:489 (0x42bdbf)
	gopanic: reflectcall(nil, unsafe.Pointer(d.fn), deferArgs(d), uint32(d.siz), uint32(d.siz))
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/errors.go:26 (0x7e754d)
	PanicSanity: panic(Fmt(""Panicked on a Sanity Check: %v"", v))
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_tree.go:238 (0x88ff84)
	(*nodeDB).GetNode: PanicSanity(Fmt(""Value missing for key %X"", hash))
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:356 (0x88c46c)
	(*IAVLNode).getLeftNode: return t.ndb.GetNode(t, node.leftHash)
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:125 (0x88a1db)
	(*IAVLNode).get: return node.getLeftNode(t).get(t, key)
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:128 (0x88a2ba)
	(*IAVLNode).get: index, value, exists = rightNode.get(t, key)
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:128 (0x88a2ba)
	(*IAVLNode).get: index, value, exists = rightNode.get(t, key)
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_tree.go:144 (0x88f21a)
	(*IAVLTree).Get: return t.root.get(t, key)
/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/state/block_cache.go:117 (0xa66e83)
	(*BlockCache).GetStorage: _, val_, _ := storage.Get(key.Bytes())
/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/state/tx_cache.go:124 (0xa74dfb)
	(*TxCache).GetStorage: return cache.backend.GetStorage(addr, key)
/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:681 (0xa5e7e2)
	(*VM).call: data := vm.appState.GetStorage(callee.Address, loc)
/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:154 (0xa49acc)
	(*VM).Call: output, err = vm.call(caller, callee, code, input, value, gas)
/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/transactor.go:91 (0xa814ea)
	(*transactor).Call: ret, err := vmach.Call(caller, callee, callee.Code, data, 0, &gas)
/home/ubuntu/src/github.com/hyperledger/burrow/rpc/v0/methods.go:340 (0xac6915)
	(*BurrowMethods).Call: call, errC := burrowMethods.pipe.Transactor().Call(from, to, data)
/home/ubuntu/src/github.com/hyperledger/burrow/rpc/v0/methods.go:121 (0xad2b88)
	(*BurrowMethods).Call-fm: dhMap[CALL] = burrowMethods.Call
/home/ubuntu/src/github.com/hyperledger/burrow/rpc/v0/json_service.go:115 (0xac1c77)
	(*BurrowJsonService).Process: resp, errCode, err := handler(req, w)
/home/ubuntu/src/github.com/hyperledger/burrow/rpc/v0/json_service.go:63 (0xac1599)
	(*JsonRpcServer).handleFunc: this.service.Process(r, w)
/home/ubuntu/src/github.com/hyperledger/burrow/rpc/v0/json_service.go:43 (0xad1b84)
	handleFunc)-fm: router.POST(config.HTTP.JsonRpcEndpoint, this.handleFunc)
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/gin-gonic/gin/context.go:97 (0xaa416a)
	(*Context).Next: c.handlers[c.index](c)
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tommy351/gin-cors/cors.go:77 (0xab4a36)
	Middleware.func1: c.Next()
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/gin-gonic/gin/context.go:97 (0xaa416a)
	(*Context).Next: c.handlers[c.index](c)
/home/ubuntu/src/github.com/hyperledger/burrow/server/server.go:270 (0xabb2a3)
	contentTypeMW: c.Next()
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/gin-gonic/gin/context.go:97 (0xaa416a)
	(*Context).Next: c.handlers[c.index](c)
/home/ubuntu/src/github.com/hyperledger/burrow/server/server.go:238 (0xabdaff)
	logHandler.func1: c.Next()
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/gin-gonic/gin/context.go:97 (0xaa416a)
	(*Context).Next: c.handlers[c.index](c)
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/gin-gonic/gin/recovery.go:45 (0xab24ca)
	RecoveryWithWriter.func1: c.Next()
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/gin-gonic/gin/context.go:97 (0xaa416a)
	(*Context).Next: c.handlers[c.index](c)
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/gin-gonic/gin/gin.go:284 (0xaaa070)
	(*Engine).handleHTTPRequest: context.Next()
/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/gin-gonic/gin/gin.go:265 (0xaa998b)
	(*Engine).ServeHTTP: engine.handleHTTPRequest(c)
/usr/local/go/src/net/http/server.go:2568 (0x739002)
	serverHandler.ServeHTTP: handler.ServeHTTP(rw, req)
/usr/local/go/src/net/http/server.go:1825 (0x7351a2)
	(*conn).serve: serverHandler{c.server}.ServeHTTP(w, w.req)
/usr/local/go/src/runtime/asm_amd64.s:2197 (0x45afb1)
	goexit: BYTE	$0x90	// NOP

```",closed,False,2017-07-18 12:34:30,2018-05-01 14:04:53
burrow,ratranqu,https://github.com/hyperledger/burrow/issues/626,https://api.github.com/repos/hyperledger/burrow/issues/626,Panic in SLOAD when reloading the chain after it died or during normal chain operation,"Please include in your bug report:

- [ ] `burrow version` (docker image tag or branch if built from source)
develop branch

Panic on SLOAD when rebuilding the chain or during normal operation of the chain (it just happens).
- [ ] steps to reproduction
`burrow serve --work-dir /home/ubuntu/decpub/single -d`
If issue is a feature request, tell us why this feature is useful.
Last op and stack trace below:
--
```
(4) (00000000) 0000000000000000000000007B02183F9397EB10AF226693385C1C900409229D (code=18053) gas: 999996903 (d) 3A067CA6
(pc) 0   (op) PUSH1          (st) 0     => 0x0000000000000000000000000000000000000000000000000000000000000060
(pc) 2   (op) PUSH1          (st) 1     => 0x0000000000000000000000000000000000000000000000000000000000000040
(pc) 4   (op) MSTORE         (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000060 @ 0x40
(pc) 5   (op) CALLDATASIZE   (st) 0     => 4
(pc) 6   (op) ISZERO         (st) 1      == 0 = 0
(pc) 7   (op) PUSH2          (st) 1     => 0x00000000000000000000000000000000000000000000000000000000000000ED
(pc) 10  (op) JUMPI          (st) 2     ~> false
(pc) 11  (op) PUSH1          (st) 0     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 13  (op) CALLDATALOAD   (st) 1     => 0x3A067CA600000000000000000000000000000000000000000000000000000000
(pc) 14  (op) PUSH29         (st) 1     => 0x0000000100000000000000000000000000000000000000000000000000000000
(pc) 44  (op) SWAP1          (st) 2     => [2] 3A067CA600000000000000000000000000000000000000000000000000000000
(pc) 45  (op) DIV            (st) 2     26245606592116269608546148900486738430516241565468967273606210530203626635264 / 26959946667150639794667015087019630673637144422540572481103610249216 = 973503654 (000000000000000000000000000000000000000000000000000000003A067CA6)
(pc) 46  (op) DUP1           (st) 1     => [1] 0x000000000000000000000000000000000000000000000000000000003A067CA6
(pc) 47  (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000012065FE0
(pc) 52  (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000012065FE0 == 000000000000000000000000000000000000000000000000000000003A067CA6 = 0
(pc) 53  (op) PUSH2          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000000000FF
(pc) 56  (op) JUMPI          (st) 3     ~> false
(pc) 57  (op) DUP1           (st) 1     => [1] 0x000000000000000000000000000000000000000000000000000000003A067CA6
(pc) 58  (op) PUSH4          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000014EC51FB
(pc) 63  (op) EQ             (st) 3     0000000000000000000000000000000000000000000000000000000014EC51FB == 000000000000000000000000000000000000000000000000000000003A067CA6 = 0
(pc) 64  (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000127
(pc) 67  (op) JUMPI          (st) 3     ~> false
(pc) 68  (op) DUP1           (st) 1     => [1] 0x000000000000000000000000000000000000000000000000000000003A067CA6
(pc) 69  (op) PUSH4          (st) 2     => 0x000000000000000000000000000000000000000000000000000000001965BC3B
(pc) 74  (op) EQ             (st) 3     000000000000000000000000000000000000000000000000000000001965BC3B == 000000000000000000000000000000000000000000000000000000003A067CA6 = 0
(pc) 75  (op) PUSH2          (st) 2     => 0x000000000000000000000000000000000000000000000000000000000000014F
(pc) 78  (op) JUMPI          (st) 3     ~> false
(pc) 79  (op) DUP1           (st) 1     => [1] 0x000000000000000000000000000000000000000000000000000000003A067CA6
(pc) 80  (op) PUSH4          (st) 2     => 0x000000000000000000000000000000000000000000000000000000001C6957BD
(pc) 85  (op) EQ             (st) 3     000000000000000000000000000000000000000000000000000000001C6957BD == 000000000000000000000000000000000000000000000000000000003A067CA6 = 0
(pc) 86  (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000182
(pc) 89  (op) JUMPI          (st) 3     ~> false
(pc) 90  (op) DUP1           (st) 1     => [1] 0x000000000000000000000000000000000000000000000000000000003A067CA6
(pc) 91  (op) PUSH4          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000204357BA
(pc) 96  (op) EQ             (st) 3     00000000000000000000000000000000000000000000000000000000204357BA == 000000000000000000000000000000000000000000000000000000003A067CA6 = 0
(pc) 97  (op) PUSH2          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000000001C9
(pc) 100 (op) JUMPI          (st) 3     ~> false
(pc) 101 (op) DUP1           (st) 1     => [1] 0x000000000000000000000000000000000000000000000000000000003A067CA6
(pc) 102 (op) PUSH4          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000216E7275
(pc) 107 (op) EQ             (st) 3     00000000000000000000000000000000000000000000000000000000216E7275 == 000000000000000000000000000000000000000000000000000000003A067CA6 = 0
(pc) 108 (op) PUSH2          (st) 2     => 0x00000000000000000000000000000000000000000000000000000000000001FC
(pc) 111 (op) JUMPI          (st) 3     ~> false
(pc) 112 (op) DUP1           (st) 1     => [1] 0x000000000000000000000000000000000000000000000000000000003A067CA6
(pc) 113 (op) PUSH4          (st) 2     => 0x000000000000000000000000000000000000000000000000000000003A067CA6
(pc) 118 (op) EQ             (st) 3     000000000000000000000000000000000000000000000000000000003A067CA6 == 000000000000000000000000000000000000000000000000000000003A067CA6 = 1
(pc) 119 (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000224
(pc) 122 (op) JUMPI          (st) 3     ~> 548
(pc) 548 (op) JUMPDEST       (st) 1    
(pc) 549 (op) CALLVALUE      (st) 1     => 0
(pc) 550 (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000002
(pc) 553 (op) JUMPI          (st) 3     ~> false
(pc) 554 (op) PUSH2          (st) 1     => 0x0000000000000000000000000000000000000000000000000000000000000236
(pc) 557 (op) PUSH1          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000004
(pc) 559 (op) DUP1           (st) 3     => [1] 0x0000000000000000000000000000000000000000000000000000000000000004
(pc) 560 (op) POP            (st) 4     => 0x0000000000000000000000000000000000000000000000000000000000000004
(pc) 561 (op) POP            (st) 3     => 0x0000000000000000000000000000000000000000000000000000000000000004
(pc) 562 (op) PUSH2          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000B7E
(pc) 565 (op) JUMP           (st) 3     ~> 2942
(pc) 2942 (op) JUMPDEST       (st) 2    
(pc) 2943 (op) PUSH1          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 2945 (op) PUSH1          (st) 3     => 0x0000000000000000000000000000000000000000000000000000000000000003
(pc) 2947 (op) PUSH1          (st) 4     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 2949 (op) SWAP1          (st) 5     => [2] 0000000000000000000000000000000000000000000000000000000000000003
(pc) 2950 (op) SLOAD          (st) 5     {0x0000000000000000000000000000000000000000000000000000000000000003 : 0x0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB}
(pc) 2951 (op) SWAP1          (st) 5     => [2] 0000000000000000000000000000000000000000000000000000000000000000
(pc) 2952 (op) PUSH2          (st) 5     => 0x0000000000000000000000000000000000000000000000000000000000000100
(pc) 2955 (op) EXP            (st) 6     256 ** 0 = 1 (0000000000000000000000000000000000000000000000000000000000000001)
(pc) 2956 (op) SWAP1          (st) 5     => [2] 0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB
(pc) 2957 (op) DIV            (st) 5     697540357585017921034752128164944730699623392475 / 1 = 697540357585017921034752128164944730699623392475 (0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB)
(pc) 2958 (op) PUSH20         (st) 4     => 0x000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
(pc) 2979 (op) AND            (st) 5     000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB = 0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB
(pc) 2980 (op) SWAP1          (st) 4     => [2] 0000000000000000000000000000000000000000000000000000000000000000
(pc) 2981 (op) POP            (st) 4     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 2982 (op) PUSH2          (st) 3     => 0x0000000000000000000000000000000000000000000000000000000000000BAA
(pc) 2985 (op) JUMP           (st) 4     ~> 2986
(pc) 2986 (op) JUMPDEST       (st) 3    
(pc) 2987 (op) SWAP1          (st) 3     => [2] 0000000000000000000000000000000000000000000000000000000000000236
(pc) 2988 (op) JUMP           (st) 3     ~> 566
(pc) 566 (op) JUMPDEST       (st) 2    
(pc) 567 (op) PUSH1          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000040
(pc) 569 (op) MLOAD          (st) 3     => 0x0000000000000000000000000000000000000000000000000000000000000060 @ 0x40
(pc) 570 (op) DUP1           (st) 3     => [1] 0x0000000000000000000000000000000000000000000000000000000000000060
(pc) 571 (op) DUP3           (st) 4     => [3] 0x0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB
(pc) 572 (op) PUSH20         (st) 5     => 0x000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
(pc) 593 (op) AND            (st) 6     000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB = 0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB
(pc) 594 (op) DUP2           (st) 5     => [2] 0x0000000000000000000000000000000000000000000000000000000000000060
(pc) 595 (op) MSTORE         (st) 6     => 0x0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB @ 0x60
(pc) 596 (op) PUSH1          (st) 4     => 0x0000000000000000000000000000000000000000000000000000000000000020
(pc) 598 (op) ADD            (st) 5     32 + 96 = 128 (0000000000000000000000000000000000000000000000000000000000000080)
(pc) 599 (op) SWAP2          (st) 4     => [3] 0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB
(pc) 600 (op) POP            (st) 4     => 0x0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB
(pc) 601 (op) POP            (st) 3     => 0x0000000000000000000000000000000000000000000000000000000000000060
(pc) 602 (op) PUSH1          (st) 2     => 0x0000000000000000000000000000000000000000000000000000000000000040
(pc) 604 (op) MLOAD          (st) 3     => 0x0000000000000000000000000000000000000000000000000000000000000060 @ 0x40
(pc) 605 (op) DUP1           (st) 3     => [1] 0x0000000000000000000000000000000000000000000000000000000000000060
(pc) 606 (op) SWAP2          (st) 4     => [3] 0000000000000000000000000000000000000000000000000000000000000080
(pc) 607 (op) SUB            (st) 4     128 - 96 = 32 (0000000000000000000000000000000000000000000000000000000000000020)
(pc) 608 (op) SWAP1          (st) 3     => [2] 0000000000000000000000000000000000000000000000000000000000000060
(pc) 609 (op) RETURN         (st) 3     => [96, 32] (32) 0x0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB
resume 0000000000000000000000008C47FC114D5AD90872C4A10BB0128C6707913EC8 (0xc421f74118)
(pc) 2143 (op) ISZERO         (st) 9      == 0 = 0
(pc) 2144 (op) PUSH2          (st) 9     => 0x0000000000000000000000000000000000000000000000000000000000000002
(pc) 2147 (op) JUMPI          (st) 10    ~> false
(pc) 2148 (op) POP            (st) 8     => 0x0000000000000000000000000000000000000000000000000000000000000064
(pc) 2149 (op) POP            (st) 7     => 0x000000000000000000000000000000000000000000000000000000003A067CA6
(pc) 2150 (op) POP            (st) 6     => 0x0000000000000000000000007B02183F9397EB10AF226693385C1C900409229D
(pc) 2151 (op) PUSH1          (st) 5     => 0x0000000000000000000000000000000000000000000000000000000000000040
(pc) 2153 (op) MLOAD          (st) 6     => 0x0000000000000000000000000000000000000000000000000000000000000060 @ 0x40
(pc) 2154 (op) DUP1           (st) 6     => [1] 0x0000000000000000000000000000000000000000000000000000000000000060
(pc) 2155 (op) MLOAD          (st) 7     => 0x0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB @ 0x60
(pc) 2156 (op) SWAP1          (st) 7     => [2] 0000000000000000000000000000000000000000000000000000000000000060
(pc) 2157 (op) PUSH1          (st) 7     => 0x0000000000000000000000000000000000000000000000000000000000000020
(pc) 2159 (op) ADD            (st) 8     32 + 96 = 128 (0000000000000000000000000000000000000000000000000000000000000080)
(pc) 2160 (op) POP            (st) 7     => 0x0000000000000000000000000000000000000000000000000000000000000080
(pc) 2161 (op) PUSH20         (st) 6     => 0x000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
(pc) 2182 (op) AND            (st) 7     000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF & 0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB = 0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB
(pc) 2183 (op) EQ             (st) 6     0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB == 0000000000000000000000007A2ECA9A87849E167F63632EAF98F3316B8564DB = 1
(pc) 2184 (op) ISZERO         (st) 5      == 0 = 0
(pc) 2185 (op) ISZERO         (st) 5      == 0 = 1
(pc) 2186 (op) PUSH2          (st) 5     => 0x0000000000000000000000000000000000000000000000000000000000000892
(pc) 2189 (op) JUMPI          (st) 6     ~> 2194
(pc) 2194 (op) JUMPDEST       (st) 4    
(pc) 2195 (op) PUSH1          (st) 4     => 0x0000000000000000000000000000000000000000000000000000000000000001
(pc) 2197 (op) PUSH1          (st) 5     => 0x0000000000000000000000000000000000000000000000000000000000000008
(pc) 2199 (op) PUSH1          (st) 6     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 2201 (op) DUP3           (st) 7     => [3] 0x0000000000000000000000000000000000000000000000000000000000000001
(pc) 2202 (op) DUP3           (st) 8     => [3] 0x0000000000000000000000000000000000000000000000000000000000000008
(pc) 2203 (op) DUP3           (st) 9     => [3] 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 2204 (op) POP            (st) 10    => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 2205 (op) SLOAD          (st) 9     {0x0000000000000000000000000000000000000000000000000000000000000008 : 0x0000000000000000000000000000000000000000000000000000000000000007}
(pc) 2206 (op) ADD            (st) 9     7 + 1 = 8 (0000000000000000000000000000000000000000000000000000000000000008)
(pc) 2207 (op) SWAP3          (st) 8     => [4] 0000000000000000000000000000000000000000000000000000000000000001
(pc) 2208 (op) POP            (st) 8     => 0x0000000000000000000000000000000000000000000000000000000000000001
(pc) 2209 (op) POP            (st) 7     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 2210 (op) DUP2           (st) 6     => [2] 0x0000000000000000000000000000000000000000000000000000000000000008
(pc) 2211 (op) SWAP1          (st) 7     => [2] 0000000000000000000000000000000000000000000000000000000000000008
(pc) 2212 (op) SSTORE         (st) 7     {0x0000000000000000000000000000000000000000000000000000000000000008 : 0x0000000000000000000000000000000000000000000000000000000000000008}
(pc) 2213 (op) POP            (st) 5     => 0x0000000000000000000000000000000000000000000000000000000000000008
(pc) 2214 (op) PUSH1          (st) 4     => 0x0000000000000000000000000000000000000000000000000000000000000005
(pc) 2216 (op) PUSH1          (st) 5     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 2218 (op) POP            (st) 6     => 0x0000000000000000000000000000000000000000000000000000000000000000
(pc) 2219 (op) DUP1           (st) 5     => [1] 0x0000000000000000000000000000000000000000000000000000000000000005
(pc) 2220 (op) SLOAD          (st) 6    panic: Panicked on a Sanity Check: Value missing for key 4440B2DB04149DB6636438C9744A6ACBDEF40C7A

goroutine 1 [running]:
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.PanicSanity(0xb5a3a0, 0xc4215a6b50)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/errors.go:26 +0xdd
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*nodeDB).GetNode(0xc42367d8b0, 0xc421ac9f60, 0xc420f58d40, 0x14, 0x14, 0x0)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_tree.go:238 +0x504
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).getLeftNode(0xc421adaa00, 0xc421ac9f60, 0x20)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:356 +0x6c
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).get(0xc421adaa00, 0xc421ac9f60, 0xc420f58c80, 0x20, 0x20, 0x20, 0x0, 0xc42044c3e0, 0x14, 0x14)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:125 +0x1bb
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).get(0xc421ada1e0, 0xc421ac9f60, 0xc420f58c80, 0x20, 0x20, 0x20, 0xffffffffffffffff, 0xc42044c220, 0x14, 0x14)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:128 +0x29a
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).get(0xc421ada140, 0xc421ac9f60, 0xc420f58c80, 0x20, 0x20, 0x20, 0xffffffffffffffff, 0xc42044c0e0, 0x14, 0x14)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:125 +0x1f7
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).get(0xc421ada0a0, 0xc421ac9f60, 0xc420f58c80, 0x20, 0x20, 0x20, 0xffffffffffffffff, 0xc420f58c80, 0x0, 0x11bbb00)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:125 +0x1f7
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).get(0xc421ada000, 0xc421ac9f60, 0xc420f58c80, 0x20, 0x20, 0x4115f8, 0x20, 0xc14fa0, 0xc42005c801, 0xc420f58c80)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:125 +0x1f7
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLTree).Get(0xc421ac9f60, 0xc420f58c80, 0x20, 0x20, 0xc42005c998, 0x46e384, 0x46b905, 0x1, 0x1)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_tree.go:144 +0x5a
github.com/hyperledger/burrow/manager/burrow-mint/state.(*BlockCache).GetStorage(0xc4201211a0, 0x0, 0x11fc478c00000000, 0xba1c47208d95a4d, 0xc83e9107678c12b0, 0x0, 0x0, 0x0, 0x500000000000000, 0x0, ...)
	/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/state/block_cache.go:117 +0x263
github.com/hyperledger/burrow/manager/burrow-mint/state.(*TxCache).GetStorage(0xc4207aa000, 0x0, 0x11fc478c00000000, 0xba1c47208d95a4d, 0xc83e9107678c12b0, 0x0, 0x0, 0x0, 0x500000000000000, 0x0, ...)
	/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/state/tx_cache.go:124 +0x19b
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).call(0xc4230d6020, 0xc420d15d00, 0xc420d15b80, 0xc42012cf00, 0x22e6, 0x22e6, 0xc424fac150, 0x24, 0x24, 0x0, ...)
	/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:685 +0x131d9
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).Call(0xc4230d6020, 0xc420d15d00, 0xc420d15b80, 0xc42012cf00, 0x22e6, 0x22e6, 0xc424fac150, 0x24, 0x24, 0x0, ...)
	/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:155 +0x23c
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).call(0xc4230d6020, 0xc420d15880, 0xc420d15d00, 0xc420481500, 0x29e7, 0x29e7, 0xc420481500, 0x29e7, 0x29e7, 0x0, ...)
	/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:887 +0x19504
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).Call(0xc4230d6020, 0xc420d15880, 0xc420d15d00, 0xc420481500, 0x29e7, 0x29e7, 0xc420481500, 0x29e7, 0x29e7, 0x0, ...)
	/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:155 +0x23c
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).call(0xc4230d6020, 0xc420d15800, 0xc420d15880, 0xc420463800, 0x4685, 0x4685, 0xc421c9c2d0, 0xe4, 0xe4, 0x0, ...)
	/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:802 +0x1798c
github.com/hyperledger/burrow/manager/burrow-mint/evm.(*VM).Call(0xc4230d6020, 0xc420d15800, 0xc420d15880, 0xc420463800, 0x4685, 0x4685, 0xc421c9c2d0, 0xe4, 0xe4, 0x0, ...)
	/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/evm/vm.go:155 +0x23c
github.com/hyperledger/burrow/manager/burrow-mint/state.ExecTx(0xc4201211a0, 0x1166cc0, 0xc4201071d0, 0xc423680401, 0x1167dc0, 0xc420121440, 0x1173bc0, 0xc4238b7a40, 0xc421bfd460, 0x20)
	/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/state/execution.go:522 +0x3a52
github.com/hyperledger/burrow/manager/burrow-mint.(*BurrowMint).DeliverTx(0xc4204bae10, 0xc420147a00, 0x190, 0x190, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
	/home/ubuntu/src/github.com/hyperledger/burrow/manager/burrow-mint/burrow-mint.go:120 +0x2b7
github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client.(*localClient).DeliverTxAsync(0xc4200587e0, 0xc420147a00, 0x190, 0x190, 0x0)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client/local_client.go:74 +0x85
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*appConnConsensus).DeliverTxAsync(0xc4216246d0, 0xc420147a00, 0x190, 0x190, 0xc42268cbd0)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/app_conn.go:73 +0x51
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.execBlockOnProxyApp(0x0, 0x0, 0x1174640, 0xc4216246d0, 0xc420978a00, 0xc423492640, 0x1166300, 0xc4238b77d0)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:93 +0x764
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).ValExecBlock(0xc42005bba0, 0x0, 0x0, 0x1174640, 0xc4216246d0, 0xc420978a00, 0x11d7748, 0xc42378a770, 0x40edc8)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:29 +0x82
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).ApplyBlock(0xc42005bba0, 0x0, 0x0, 0x1174640, 0xc4216246d0, 0xc420978a00, 0x1, 0xc420979040, 0x14, 0x14, ...)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:212 +0x73
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*Handshaker).replayBlock(0xc420155e00, 0x32467, 0x1174640, 0xc4216246d0, 0x14, 0x20, 0x0, 0x0, 0xc42005ea00)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/replay.go:360 +0x173
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*Handshaker).replayBlocks(0xc420155e00, 0x1175ec0, 0xc4200ee090, 0x0, 0x32467, 0x1, 0xc420102bb0, 0xc4200ee1b0, 0x0, 0x0, ...)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/replay.go:346 +0x323
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*Handshaker).ReplayBlocks(0xc420155e00, 0x0, 0x0, 0x0, 0x0, 0x1175ec0, 0xc4200ee090, 0x0, 0x0, 0x0, ...)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/replay.go:296 +0x766
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*Handshaker).Handshake(0xc420155e00, 0x1175ec0, 0xc4200ee090, 0x0, 0x0)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/replay.go:235 +0x451
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*multiAppConn).OnStart(0xc4200ee090, 0xc42014d540, 0x15)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/multi_app_conn.go:99 +0x212
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.(*BaseService).Start(0xc4200ee090, 0x0, 0x0, 0x0)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/service.go:99 +0x2c2
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node.NewNode(0x11767a0, 0xc42000e3e8, 0xc4204466e0, 0x1167fc0, 0xc421623340, 0x2)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node/node.go:84 +0x592
github.com/hyperledger/burrow/consensus/tendermint.NewTendermint(0xc420142200, 0x1175740, 0xc4204bae10, 0x1173bc0, 0xc420121080, 0xb5a3a0, 0xc420150280, 0xb5a3a0)
	/home/ubuntu/src/github.com/hyperledger/burrow/consensus/tendermint/tendermint.go:120 +0xda2
github.com/hyperledger/burrow/consensus.LoadConsensusEngineInPipe(0xc420142200, 0x1176840, 0xc42005eb00, 0x24, 0x0)
	/home/ubuntu/src/github.com/hyperledger/burrow/consensus/consensus.go:38 +0x191
github.com/hyperledger/burrow/core.NewCore(0xc4204c9e80, 0x6, 0xc420142200, 0xc420142280, 0x1173bc0, 0xc420135dd0, 0x4, 0x0, 0x0)
	/home/ubuntu/src/github.com/hyperledger/burrow/core/core.go:63 +0x302
github.com/hyperledger/burrow/cmd.NewCoreFromDo(0xc4204d0840, 0x7fff8e0897bb, 0x1a, 0xc78aab)
	/home/ubuntu/src/github.com/hyperledger/burrow/cmd/serve.go:159 +0xaf1
github.com/hyperledger/burrow/cmd.ServeRunner.func1(0xc42008dd40, 0xc4204dce70, 0x0, 0x3)
	/home/ubuntu/src/github.com/hyperledger/burrow/cmd/serve.go:177 +0xab
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).execute(0xc42008dd40, 0xc4204dcd50, 0x3, 0x3, 0xc42008dd40, 0xc4204dcd50)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:635 +0x23a
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x11b2c00, 0x1, 0x1, 0xc42008dd40)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:710 +0x339
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).Execute(0x11b2c00, 0x0, 0xc4204dcc00)
	/home/ubuntu/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:669 +0x2b
github.com/hyperledger/burrow/cmd.Execute()
	/home/ubuntu/src/github.com/hyperledger/burrow/cmd/burrow.go:46 +0x3a5
main.main()
	/home/ubuntu/src/github.com/hyperledger/burrow/cmd/burrow/main.go:22 +0x20
```",closed,False,2017-07-18 12:11:17,2018-05-30 10:28:03
burrow,ratranqu,https://github.com/hyperledger/burrow/pull/625,https://api.github.com/repos/hyperledger/burrow/issues/625,Protect WS endpoint against PANIC,"Currently, any Panic encountered during a WS call will kill the burrow process. This is not the case with http as gin-gonic protects against Panic (recovery.go).

This PR implements the same behaviour. ",closed,True,2017-07-15 20:12:45,2018-03-12 10:10:13
burrow,ratranqu,https://github.com/hyperledger/burrow/pull/624,https://api.github.com/repos/hyperledger/burrow/issues/624,"Develop: fixed Tx&Hold bug, added Broadcast&Hold","1/ Fix TransactAndHold bug when the the contract called ends up calling itself (leading to a nested event subscribe before the correct event is fired). Added a check that the code called leading to the event is the same as the one we are waiting the event for.

2/ Added a BroadcastAndHold JSON-RPC call over HTTP. This is to bypass instability of the Websocket API.",closed,True,2017-07-10 21:13:30,2018-03-08 12:45:46
burrow,dmjones,https://github.com/hyperledger/burrow/issues/623,https://api.github.com/repos/hyperledger/burrow/issues/623,"Running glide update fails, prevents building Burrow with forked dependencies","Please include in your bug report:

- [ Master branch, commit 61a1bb2781bac614d5c467430483706e89ff9456 ] `burrow version` (docker image tag or branch if built from source)
- [ N/A ] `monax version` (if applicable)
- [ go1.8.3 linux/amd64] `go version` (if applicable)
- [ N/A ] `docker version` (if applicable)
- [ Ubuntu 16.04.2 LTS ] operating system details (osx/windows/linux)
- [  ] what you expected to happen

Running `glide update` should refresh the `glide.lock` file and produce a set of dependencies that Burrow can build against. This is necessary if one wants to build Burrow against forked versions of dependencies (e.g. to test new features). 

- [  ] what actually happened

The `glide update` command produced an error:

> Error scanning github.com/tendermint/abci/example/nil: open /home/ubuntu/.glide/cache/src/https-github.com-tendermint-abci/example/nil: no such file or directory.
> This error means the referenced package was not found. Missing file or directory errors usually occur when multiple packages share a common dependency and the first reference encountered by the scanner sets the version to one that does not contain a subpackage needed required by another package that uses the shared dependency. Try setting a version in your glide.yaml that works for all packages that share this dependency.

A few days ago, the `update` command completed successfully, however Burrow would not compile against the set of dependencies that were downloaded. Looking at the commit history, it looks like the `glide.lock` file has seen some hand-edits, so perhaps the YAML file is outdated?

- [  ] steps to reproduction

Download a fresh copy of the Burrow source. Run `glide update`.",closed,False,2017-07-04 09:55:48,2017-07-14 12:16:42
burrow,katiehennells,https://github.com/hyperledger/burrow/issues/622,https://api.github.com/repos/hyperledger/burrow/issues/622,Getting Started,"Trying to set up Burrow using monax chains and I am receiving a Time Out error

`INFO[06-21|15:39:55] Timed out                                module=consensus dur=3s height=1 round=0 step=RoundStepPropose`

before connecting to the server. 

I used the readme instructions to set up burrow, and then followed the monax [getting started tutorial ](https://monax.io/docs/getting-started/) to set up the config, genesis, and priv_validator file

Please include in your bug report:

- [x] `burrow version` (docker image tag or branch if built from source)
- [ 0.17.0] `monax version` (if applicable)
- [ 1.8.2] `go version` (if applicable)
- [ 1.12.6] `docker version` (if applicable)
- [ osx] operating system details (osx/windows/linux)
- [ expect to connect to server] what you expected to happen
- [ got timeout] what actually happened
- [ followed getting started tutorials in readme] steps to reproduction

If issue is a feature request, tell us why this feature is useful.
",closed,False,2017-06-21 20:59:45,2017-06-22 17:50:02
burrow,zramsay,https://github.com/hyperledger/burrow/pull/621,https://api.github.com/repos/hyperledger/burrow/issues/621,apply the megacheck code vet tool,"- applies _some_ of the recommendations from the `megacheck` tool, which itself runs `unused`, `gosimple`, and `staticcheck`. See https://github.com/dominikh/go-tools/tree/master/cmd/megacheck for more information.
- only the least controversial edits were made. Bulk removal of unused functions/variables left untouched as they may have a planned usage.
- introduces `make megacheck` to the Makefile with the eventual goal of adding it to the test sequence.",closed,True,2017-05-31 04:03:03,2017-08-24 13:49:19
burrow,tkuhrt,https://github.com/hyperledger/burrow/issues/620,https://api.github.com/repos/hyperledger/burrow/issues/620,[docs] specs/api.md points to non-existent file,"The link ""burrow-js"" in https://github.com/hyperledger/burrow/blob/master/docs/specs/api.md points to non-existent https://github.com/hyperledger/burrow.js.",closed,False,2017-05-26 23:28:01,2017-07-14 12:19:48
burrow,tkuhrt,https://github.com/hyperledger/burrow/issues/619,https://api.github.com/repos/hyperledger/burrow/issues/619,[docs] README.md links to non-existent file,"In https://github.com/hyperledger/burrow/blob/master/README.md#usage, the link ""javascript api"" points to non-existent file (https://github.com/hyperledger/burrow.js).",closed,False,2017-05-26 23:26:44,2017-07-14 12:19:10
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/618,https://api.github.com/repos/hyperledger/burrow/issues/618,[Logging] integrate logging config/presets with burrow-client ,"Currently no logging config is selected from `ClientDo`, it should probably use presets:

https://github.com/hyperledger/burrow/blob/master/core/config.go#L122-L125

Also `ClientDo.Verbose"" does nothing. Either it should bear some relation to presets or should be removed. ",closed,False,2017-05-24 21:49:50,2018-08-16 12:54:34
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/617,https://api.github.com/repos/hyperledger/burrow/issues/617,[Logging] Capture debug logging from EVM,,closed,False,2017-05-24 21:32:27,2017-05-24 21:41:37
burrow,bonen,https://github.com/hyperledger/burrow/issues/616,https://api.github.com/repos/hyperledger/burrow/issues/616,Can't restart the chain after it failed,"Running this line inside a smart contract caused the chain to stop running.
--bytes20(keccak256(msg.sender, block.blockhash(block.number - 1)))

I can't restart the chain, the logs show:
$monax chains logs [CHAIN]

DBUG[05-24|15:27:45] Loading configuration for serve command  channel=Trace run_id=895ae9c7-4095-11e7-8838-fa30d7d11bb1 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 info_trace_logger.go:139 convention.go:60 serve.go:133 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve chainId=localbloqnetwork workingDirectory=/home/monax/.monax/chains/localbloqnetwork dataDirectory=/home/monax/.monax/chains/localbloqnetwork/data genesisFile=/home/monax/.monax/chains/localbloqnetwork/genesis.json
DBUG[05-24|15:27:45] Modules configured                       channel=Trace run_id=895ae9c7-4095-11e7-8838-fa30d7d11bb1 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 info_trace_logger.go:139 convention.go:60 serve.go:147 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve consensusModule=tendermint-0.8 applicationManager=burrowmint-0.16
DBUG[01-01|00:00:00] Starting EventSwitch                     channel=Info run_id=895ae9c7-4095-11e7-8838-fa30d7d11bb1 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 capture.go:43 handler_go14.go:14 handler_go14.go:14 logger.go:120 logger.go:142 service.go:93 core.go:52 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve captured_logging_source=tendermint_log15 module=events impl=EventSwitch
INFO[05-24|15:27:45] Loading BurrowMint                       channel=Info run_id=895ae9c7-4095-11e7-8838-fa30d7d11bb1 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 manager.go:47 core.go:57 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core]"" compatibleConsensus=tendermint-0.8 burrowMintVersion=burrowmint-0.16.2
INFO[05-24|15:27:45] Loaded state                             channel=Info run_id=895ae9c7-4095-11e7-8838-fa30d7d11bb1 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 pipe.go:83 manager.go:48 core.go:57 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" chainId=localbloqnetwork lastBlockHeight=656811 lastBlockHash=
DBUG[05-24|15:27:45] Loaded pipe with application manager     channel=Trace run_id=895ae9c7-4095-11e7-8838-fa30d7d11bb1 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 convention.go:35 log.go:143 convention.go:60 convention.go:45 core.go:61 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core]""
DBUG[05-24|15:27:45] Loaded Tendermint sub-configuration      channel=Trace run_id=895ae9c7-4095-11e7-8838-fa30d7d11bb1 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 convention.go:35 log.go:143 convention.go:60 convention.go:45 tendermint.go:103 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" chainId=localbloqnetwork genesisFile=/home/monax/.monax/chains/localbloqnetwork/genesis.json nodeLocalAddress=0.0.0.0:46656 moniker=localbloqnetwork_full_000 seeds= fastSync=false rpcLocalAddress=0.0.0.0:46657 databaseDirectory=/home/monax/.monax/chains/localbloqnetwork/data/tendermint/data privateValidatorFile=/home/monax/.monax/chains/localbloqnetwork/priv_validator.json privValFile=priv_validator.json
DBUG[01-01|00:00:00] Loaded PrivValidator                     channel=Info run_id=895ae9c7-4095-11e7-8838-fa30d7d11bb1 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 capture.go:43 handler_go14.go:14 handler_go14.go:14 logger.go:120 logger.go:146 priv_validator.go:122 tendermint.go:110 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve captured_logging_source=tendermint_log15 module=types file=/home/monax/.monax/chains/localbloqnetwork/priv_validator.json privValidator=""PrivValidator{E0DE09DC0D42F255BBF4D16FA79445555905790C LH:656812, LR:0, LS:3}""
INFO[05-24|15:27:45] Force disabling Tendermint's native RPC  channel=Info run_id=895ae9c7-4095-11e7-8838-fa30d7d11bb1 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 tendermint.go:118 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" provided_rpc_laddr=0.0.0.0:46657
panic: Paniced on a Sanity Check: Expected storeHeight (656812) and stateHeight (656811) to match.

goroutine 1 [running]:
panic(0x561a116dc6e0, 0xc420ec4320)
	/usr/lib/go/src/runtime/panic.go:500 +0x1a5
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.PanicSanity(0x561a116dc6e0, 0xc420ec4300)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/errors.go:26 +0xe2
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*Handshaker).ReplayBlocks(0xc4204f9380, 0x0, 0x0, 0x0, 0x0, 0x561a11b0fb00, 0xc420ec4160, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:400 +0xda4
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*Handshaker).Handshake(0xc4204f9380, 0x561a11b11200, 0xc42006c120, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:329 +0x485
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*multiAppConn).OnStart(0xc42006c120, 0xc420250be0, 0x15)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/multi_app_conn.go:100 +0x208
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.(*BaseService).Start(0xc42006c120, 0x0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/service.go:96 +0x548
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node.NewNode(0x561a11b11820, 0xc4200246b0, 0xc42049e1e0, 0x561a11b03ca0, 0xc4201716a0, 0x2)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node/node.go:68 +0x485
github.com/hyperledger/burrow/consensus/tendermint.NewTendermint(0xc42006d0e0, 0x561a11b0f2c0, 0xc4200cd900, 0x561a11b0df40, 0xc4201870b0, 0xc4201870b0, 0x561a10b42baa, 0x561a11b05e60)
	/go/src/github.com/hyperledger/burrow/consensus/tendermint/tendermint.go:123 +0x114b
github.com/hyperledger/burrow/consensus.LoadConsensusEngineInPipe(0xc42006d0e0, 0x561a11b118c0, 0xc42047a680, 0x24, 0x0)
	/go/src/github.com/hyperledger/burrow/consensus/consensus.go:30 +0x155
github.com/hyperledger/burrow/core.NewCore(0xc42000c0e9, 0x10, 0xc42006d0e0, 0xc42006d3b0, 0x561a11b0df40, 0xc4201872f0, 0x4, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/core/core.go:63 +0x360
github.com/hyperledger/burrow/cmd.NewCoreFromDo(0xc4204ea2a0, 0xc42001400f, 0x2a, 0x561a1111ef2a)
	/go/src/github.com/hyperledger/burrow/cmd/serve.go:149 +0xa88
github.com/hyperledger/burrow/cmd.ServeRunner.func1(0xc4204fa000, 0x561a11b5f830, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/cmd/serve.go:167 +0xcb
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).execute(0xc4204fa000, 0x561a11b5f830, 0x0, 0x0, 0xc4204fa000, 0x561a11b5f830)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:575 +0x43b
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x561a11afbcc0, 0x1, 0x1, 0xc4204fa000)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:661 +0x369
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).Execute(0x561a11afbcc0, 0x0, 0xc4204f80c0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:620 +0x2d
github.com/hyperledger/burrow/cmd.Execute()
	/go/src/github.com/hyperledger/burrow/cmd/burrow.go:46 +0x33d
main.main()
	/go/src/github.com/hyperledger/burrow/cmd/burrow/main.go:22 +0x16
DBUG[05-24|15:28:30] Loading configuration for serve command  channel=Trace run_id=a429b2ed-4095-11e7-88fa-cbc76ee83e5f trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 info_trace_logger.go:139 convention.go:60 serve.go:133 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve chainId=localbloqnetwork workingDirectory=/home/monax/.monax/chains/localbloqnetwork dataDirectory=/home/monax/.monax/chains/localbloqnetwork/data genesisFile=/home/monax/.monax/chains/localbloqnetwork/genesis.json
DBUG[05-24|15:28:30] Modules configured                       channel=Trace run_id=a429b2ed-4095-11e7-88fa-cbc76ee83e5f trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 info_trace_logger.go:139 convention.go:60 serve.go:147 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve consensusModule=tendermint-0.8 applicationManager=burrowmint-0.16
DBUG[01-01|00:00:00] Starting EventSwitch                     channel=Info run_id=a429b2ed-4095-11e7-88fa-cbc76ee83e5f trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 capture.go:43 handler_go14.go:14 handler_go14.go:14 logger.go:120 logger.go:142 service.go:93 core.go:52 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve captured_logging_source=tendermint_log15 module=events impl=EventSwitch
INFO[05-24|15:28:30] Loading BurrowMint                       channel=Info run_id=a429b2ed-4095-11e7-88fa-cbc76ee83e5f trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 manager.go:47 core.go:57 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core]"" compatibleConsensus=tendermint-0.8 burrowMintVersion=burrowmint-0.16.2
INFO[05-24|15:28:30] Loaded state                             channel=Info run_id=a429b2ed-4095-11e7-88fa-cbc76ee83e5f trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 pipe.go:83 manager.go:48 core.go:57 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" chainId=localbloqnetwork lastBlockHeight=656811 lastBlockHash=
DBUG[05-24|15:28:30] Loaded pipe with application manager     channel=Trace run_id=a429b2ed-4095-11e7-88fa-cbc76ee83e5f trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 convention.go:35 log.go:143 convention.go:60 convention.go:45 core.go:61 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core]""
DBUG[05-24|15:28:30] Loaded Tendermint sub-configuration      channel=Trace run_id=a429b2ed-4095-11e7-88fa-cbc76ee83e5f trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 convention.go:35 log.go:143 convention.go:60 convention.go:45 tendermint.go:103 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" chainId=localbloqnetwork genesisFile=/home/monax/.monax/chains/localbloqnetwork/genesis.json nodeLocalAddress=0.0.0.0:46656 moniker=localbloqnetwork_full_000 seeds= fastSync=false rpcLocalAddress=0.0.0.0:46657 databaseDirectory=/home/monax/.monax/chains/localbloqnetwork/data/tendermint/data privateValidatorFile=/home/monax/.monax/chains/localbloqnetwork/priv_validator.json privValFile=priv_validator.json
DBUG[01-01|00:00:00] Loaded PrivValidator                     channel=Info run_id=a429b2ed-4095-11e7-88fa-cbc76ee83e5f trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 capture.go:43 handler_go14.go:14 handler_go14.go:14 logger.go:120 logger.go:146 priv_validator.go:122 tendermint.go:110 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve captured_logging_source=tendermint_log15 module=types file=/home/monax/.monax/chains/localbloqnetwork/priv_validator.json privValidator=""PrivValidator{E0DE09DC0D42F255BBF4D16FA79445555905790C LH:656812, LR:0, LS:3}""
INFO[05-24|15:28:30] Force disabling Tendermint's native RPC  channel=Info run_id=a429b2ed-4095-11e7-88fa-cbc76ee83e5f trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 tendermint.go:118 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" provided_rpc_laddr=0.0.0.0:46657
panic: Paniced on a Sanity Check: Expected storeHeight (656812) and stateHeight (656811) to match.

goroutine 1 [running]:
panic(0x55d7e4f146e0, 0xc4204fcf40)
	/usr/lib/go/src/runtime/panic.go:500 +0x1a5
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.PanicSanity(0x55d7e4f146e0, 0xc4204fcf20)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/errors.go:26 +0xe2
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*Handshaker).ReplayBlocks(0xc4204e7830, 0x0, 0x0, 0x0, 0x0, 0x55d7e5347b00, 0xc4204fcd30, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:400 +0xda4
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*Handshaker).Handshake(0xc4204e7830, 0x55d7e5349200, 0xc42006c120, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:329 +0x485
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*multiAppConn).OnStart(0xc42006c120, 0xc420459400, 0x15)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/multi_app_conn.go:100 +0x208
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.(*BaseService).Start(0xc42006c120, 0x0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/service.go:96 +0x548
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node.NewNode(0x55d7e5349820, 0xc4200246b8, 0xc42042c6e0, 0x55d7e533bca0, 0xc4204b0460, 0x2)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node/node.go:68 +0x485
github.com/hyperledger/burrow/consensus/tendermint.NewTendermint(0xc42006d0e0, 0x55d7e53472c0, 0xc4200ca730, 0x55d7e5345f40, 0xc4201984e0, 0xc4201984e0, 0x55d7e437abaa, 0x55d7e533de60)
	/go/src/github.com/hyperledger/burrow/consensus/tendermint/tendermint.go:123 +0x114b
github.com/hyperledger/burrow/consensus.LoadConsensusEngineInPipe(0xc42006d0e0, 0x55d7e53498c0, 0xc420087000, 0x24, 0x0)
	/go/src/github.com/hyperledger/burrow/consensus/consensus.go:30 +0x155
github.com/hyperledger/burrow/core.NewCore(0xc42000c0e9, 0x10, 0xc42006d0e0, 0xc42006d3b0, 0x55d7e5345f40, 0xc420199300, 0x4, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/core/core.go:63 +0x360
github.com/hyperledger/burrow/cmd.NewCoreFromDo(0xc4204d42a0, 0xc42001400f, 0x2a, 0x55d7e4956f2a)
	/go/src/github.com/hyperledger/burrow/cmd/serve.go:149 +0xa88
github.com/hyperledger/burrow/cmd.ServeRunner.func1(0xc4204e8000, 0x55d7e5397830, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/cmd/serve.go:167 +0xcb
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).execute(0xc4204e8000, 0x55d7e5397830, 0x0, 0x0, 0xc4204e8000, 0x55d7e5397830)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:575 +0x43b
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x55d7e5333cc0, 0x1, 0x1, 0xc4204e8000)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:661 +0x369
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).Execute(0x55d7e5333cc0, 0x0, 0xc4204e60c0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:620 +0x2d
github.com/hyperledger/burrow/cmd.Execute()
	/go/src/github.com/hyperledger/burrow/cmd/burrow.go:46 +0x33d
main.main()
	/go/src/github.com/hyperledger/burrow/cmd/burrow/main.go:22 +0x16
",closed,False,2017-05-24 15:35:51,2017-05-24 21:37:06
burrow,marc4gov,https://github.com/hyperledger/burrow/issues/615,https://api.github.com/repos/hyperledger/burrow/issues/615,chain is unstable - stopping and starting 1 validator makes the validator trip,"Please include in your bug report:

- [ 0.16.4] `burrow version` (docker image tag or branch if built from source)
- [0.16 ] `monax version` (if applicable)
- [1.8 ] `go version` (if applicable)
- [17.05 ] `docker version` (if applicable)
- [ linux] operating system details (osx/windows/linux)
- [ ] what you expected to happen
Stopping and starting 1 validator out of 4 should not be a problem
- [ ] what actually happened
Chain seems to keep running, but I can't get the stopped validator back on
- [ ] steps to reproduction
I have 4 validators in 1 datacenter stopping 1 validator and starting it again gives this:

Output log:
```
INFO[05-23|19:30:25] Block{
  Header{
    ChainID:        h2chain
    Height:         915
    Time:           2017-05-23 19:30:23.735 +0000 UTC
    NumTxs:         0
    LastBlockID:    8D7560AB1298CCC0F7A3C070C73EB03F4337B9D3:1:35FA48F4E9C3
    LastCommit:     D0D99670796E015D147DB1D7C6F567E05264FC2B
    Data:           
    Validators:     7B3C7282B178AD18DDB54DB2C4AE99BCBE78EFD2
    App:            CE289CE3AF8C437EBE3FCAC4787AD9C76C5E9B5D
  }#CECB83FAD52593197538F20783972DE01D75EA65
  Data{
    
  }#
  Commit{
    BlockID:    8D7560AB1298CCC0F7A3C070C73EB03F4337B9D3:1:35FA48F4E9C3
    Precommits: Vote{0:24E5FAC0E7BB 914/00/2(Precommit) 8D7560AB1298 /C7C2022D0503.../}
    nil-Vote
    Vote{2:4A1811F7BEDF 914/00/2(Precommit) 8D7560AB1298 /477354D591EB.../}
    Vote{3:648E0A5CCCE6 914/00/2(Precommit) 8D7560AB1298 /3077D6CA03A5.../}
  }#D0D99670796E015D147DB1D7C6F567E05264FC2B
}#CECB83FAD52593197538F20783972DE01D75EA65 module=consensus
INFO[05-23|19:30:25] Executed block                           module=state height=915 valid txs=0 invalid txs=0
INFO[05-23|19:30:25] Committing block                         channel=Info run_id=dfe7653b-3fe8-11e7-8d34-035e2d10acff trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 burrow-mint.go:151 local_client.go:197 app_conn.go:81 execution.go:258 execution.go:243 state.go:1251 state.go:1198 state.go:1151 state.go:1178 state.go:1467 state.go:1356 state.go:699 state.go:651 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe BurrowMint]"" last_block_height=915
INFO[05-23|19:30:26] Server stop event fired. Good bye.       module=server
DBUG[05-23|19:31:10] Loading configuration for serve command  channel=Trace run_id=601b68cf-3fee-11e7-8c8a-43505b54dae5 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 info_trace_logger.go:139 convention.go:60 serve.go:133 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve chainId=h2chain workingDirectory=/home/monax/.monax/chains/h2chain dataDirectory=/home/monax/.monax/chains/h2chain/data genesisFile=/home/monax/.monax/chains/h2chain/genesis.json
DBUG[05-23|19:31:10] Modules configured                       channel=Trace run_id=601b68cf-3fee-11e7-8c8a-43505b54dae5 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 info_trace_logger.go:139 convention.go:60 serve.go:147 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve consensusModule=tendermint-0.8 applicationManager=burrowmint-0.16
DBUG[01-01|00:00:00] Starting EventSwitch                     channel=Info run_id=601b68cf-3fee-11e7-8c8a-43505b54dae5 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 capture.go:43 handler_go14.go:14 handler_go14.go:14 logger.go:120 logger.go:142 service.go:93 core.go:52 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve captured_logging_source=tendermint_log15 module=events impl=EventSwitch
INFO[05-23|19:31:10] Loading BurrowMint                       channel=Info run_id=601b68cf-3fee-11e7-8c8a-43505b54dae5 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 manager.go:47 core.go:57 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core]"" compatibleConsensus=tendermint-0.8 burrowMintVersion=burrowmint-0.16.4
INFO[05-23|19:31:10] Loaded state                             channel=Info run_id=601b68cf-3fee-11e7-8c8a-43505b54dae5 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 pipe.go:83 manager.go:48 core.go:57 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" chainId=h2chain lastBlockHeight=914 lastBlockHash=
DBUG[05-23|19:31:10] Loaded pipe with application manager     channel=Trace run_id=601b68cf-3fee-11e7-8c8a-43505b54dae5 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 convention.go:35 log.go:143 convention.go:60 convention.go:45 core.go:61 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core]""
DBUG[05-23|19:31:10] Loaded Tendermint sub-configuration      channel=Trace run_id=601b68cf-3fee-11e7-8c8a-43505b54dae5 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:130 convention.go:35 log.go:143 convention.go:60 convention.go:45 tendermint.go:103 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" chainId=h2chain genesisFile=/home/monax/.monax/chains/h2chain/genesis.json nodeLocalAddress=0.0.0.0:46656 moniker=h2chain_validator_002 seeds=51.15.37.82:46656,51.15.64.249:46656,51.15.66.82:46656,51.15.60.120:46656 fastSync=false rpcLocalAddress=0.0.0.0:46657 databaseDirectory=/home/monax/.monax/chains/h2chain/data/tendermint/data privateValidatorFile=/home/monax/.monax/chains/h2chain/priv_validator.json privValFile=priv_validator.json
DBUG[01-01|00:00:00] Loaded PrivValidator                     channel=Info run_id=601b68cf-3fee-11e7-8c8a-43505b54dae5 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 capture.go:43 handler_go14.go:14 handler_go14.go:14 logger.go:120 logger.go:146 priv_validator.go:122 tendermint.go:110 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=Serve captured_logging_source=tendermint_log15 module=types file=/home/monax/.monax/chains/h2chain/priv_validator.json privValidator=""PrivValidator{24E5FAC0E7BBACAD4396B8C9698749C2602B13BA LH:915, LR:1, LS:3}""
INFO[05-23|19:31:10] Force disabling Tendermint's native RPC  channel=Info run_id=601b68cf-3fee-11e7-8c8a-43505b54dae5 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 tendermint.go:118 consensus.go:30 core.go:63 serve.go:149 serve.go:167 command.go:575 command.go:661 command.go:620 burrow.go:46 main.go:22 proc.go:183 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe]"" provided_rpc_laddr=0.0.0.0:46657
panic: Paniced on a Sanity Check: Expected storeHeight (915) and stateHeight (914) to match.

goroutine 1 [running]:
panic(0x555f3d3ef6e0, 0xc4201c3040)
	/usr/lib/go/src/runtime/panic.go:500 +0x1a5
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.PanicSanity(0x555f3d3ef6e0, 0xc4201c3010)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/errors.go:26 +0xe2
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*Handshaker).ReplayBlocks(0xc420198c90, 0x0, 0x0, 0x0, 0x0, 0x555f3d822b00, 0xc4201c2e30, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:400 +0xda4
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*Handshaker).Handshake(0xc420198c90, 0x555f3d824200, 0xc4204be1b0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:329 +0x485
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*multiAppConn).OnStart(0xc4204be1b0, 0xc4201fcf60, 0x15)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/multi_app_conn.go:100 +0x208
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common.(*BaseService).Start(0xc4204be1b0, 0xc4204be100, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-common/service.go:96 +0x548
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node.NewNode(0x555f3d824820, 0xc420024428, 0xc4204706e0, 0x555f3d816ca0, 0xc4204e2440, 0x2)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/node/node.go:68 +0x485
github.com/hyperledger/burrow/consensus/tendermint.NewTendermint(0xc420074e10, 0x555f3d8222c0, 0xc4200e1e50, 0x555f3d820f40, 0xc4201df410, 0xc4201df410, 0x555f3c855baa, 0x555f3d818e60)
	/go/src/github.com/hyperledger/burrow/consensus/tendermint/tendermint.go:123 +0x114b
github.com/hyperledger/burrow/consensus.LoadConsensusEngineInPipe(0xc420074e10, 0x555f3d8248c0, 0xc420450b80, 0x24, 0x0)
	/go/src/github.com/hyperledger/burrow/consensus/consensus.go:30 +0x155
github.com/hyperledger/burrow/core.NewCore(0xc420016009, 0x7, 0xc420074e10, 0xc4200750e0, 0x555f3d820f40, 0xc4201df1e0, 0x4, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/core/core.go:63 +0x360
github.com/hyperledger/burrow/cmd.NewCoreFromDo(0xc42005b980, 0xc4200120cf, 0x21, 0x555f3ce31f2a)
	/go/src/github.com/hyperledger/burrow/cmd/serve.go:149 +0xa88
github.com/hyperledger/burrow/cmd.ServeRunner.func1(0xc42007dd40, 0x555f3d872830, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/cmd/serve.go:167 +0xcb
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).execute(0xc42007dd40, 0x555f3d872830, 0x0, 0x0, 0xc42007dd40, 0x555f3d872830)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:575 +0x43b
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).ExecuteC(0x555f3d80ecc0, 0x1, 0x1, 0xc42007dd40)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:661 +0x369
github.com/hyperledger/burrow/vendor/github.com/spf13/cobra.(*Command).Execute(0x555f3d80ecc0, 0x0, 0xc420198270)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/spf13/cobra/command.go:620 +0x2d
github.com/hyperledger/burrow/cmd.Execute()
	/go/src/github.com/hyperledger/burrow/cmd/burrow.go:46 +0x33d
main.main()
	/go/src/github.com/hyperledger/burrow/cmd/burrow/main.go:22 +0x16
```

",closed,False,2017-05-23 19:37:42,2017-05-24 21:37:46
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/614,https://api.github.com/repos/hyperledger/burrow/issues/614,Remove hell,Since factored out and improved on in https://github.com/silasdavis/glide-lock-transitive,closed,True,2017-05-23 18:13:29,2017-08-04 15:54:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/613,https://api.github.com/repos/hyperledger/burrow/issues/613,Step back from the notion of two independent logging channels,"When I first implemented the logger I wanted to encourage a high frequency of log messages to the trace channel with impunity. To do this their are two independent language-level channels in InfoTraceLogger. It seemed like a good idea at the time. But in fact it introduces a fair bit of accidental complexity and some odd corner cases (since you want Info and Trace messages to be strictly ordered and interlaced you need to send Info messages to both the Info and Trace output loggers, which then obscures the intent of the sender... it ends up a bit confused).

The desired effect can be achieved in a simpler way with sinks (just filter trace messages), and I will be introducing logging presets (that is preset LoggingConfigs, because it's too much to ask people to write these from scratch for common cases) which will make it even easier.

So putting this down to experience I've decided it was optimising the wrong thing, and too early. So I have:

- Kept the same InfoTraceLogger type definition and semantics (more or less)
- Simplified InfoTraceLogger to take single output logger (which makes InfoTraceLogger a simple wrapper on top of go-kit/log/logger)
- Upgraded to latest go-kit/log which makes a minor improvements (Tendermint are also basing their logging component around go-kit/log)

Non-blocking logging is maintained, which i still thing is a good idea.

Logging presets will follow this, which I hope to be the last 'user friendliness' element that is missing from the logging component. Once we are on Tendermint 0.10.0 we can also provide a better logging capturing experience for Tendermint logs. ",closed,True,2017-05-21 17:09:56,2017-06-02 14:32:12
burrow,fahemoh,https://github.com/hyperledger/burrow/issues/612,https://api.github.com/repos/hyperledger/burrow/issues/612,ErisDB Transaction timed out,"Eris DB error:  Call of method ""transactAndHold"" with parameters
code: -32603,
  message: 'Transaction timed out. Hash: 60DA0D44028BEFEAC8147CBBDCA12DC74269B8E7' }

- [ ] `burrow version` (docker image tag or branch if built from source)
- [ ] `monax version` (if applicable)
- [ ] `go version` (if applicable)
- [ ] `docker version` (if applicable)
- [ ] operating system details (osx/windows/linux)
- [ ] what you expected to happen
- [ ] what actually happened
- [ ] steps to reproduction

If issue is a feature request, tell us why this feature is useful.
",closed,False,2017-05-17 12:36:11,2018-02-26 13:49:12
burrow,marc4gov,https://github.com/hyperledger/burrow/issues/611,https://api.github.com/repos/hyperledger/burrow/issues/611,chain stops after a while - out of memory,"- [0.16.4 and 0.17.0] `burrow version` (docker image tag or branch if built from source)
- [0.17 ] `monax version` (if applicable)
- [1.8] `go version` (if applicable)
- [17.04.0-ce] `docker version` (if applicable)
- [linux] operating system details (osx/windows/linux)

Expecting chain keeps running after deploying lots of contract jobs (took 10 min to deploy and transact)

- what actually happened

Chains stops after approx. 45 min with an `out of memory` trip

- steps to reproduction

burrow log:

```
...
INFO[05-18|08:10:41] Block{
  Header{
    ChainID:        testchain
    Height:         2203
    Time:           2017-05-18 08:10:41.962 +0000 UTC
    NumTxs:         0
    LastBlockID:    7374468A8DE886A48CA7C06F5CED9FF9DEFF4ED6:1:B9EBFF6CB0F0
    LastCommit:     1BBDB53C2F3051A5455C676B7959538D79D30E5C
    Data:           
    Validators:     2D2F1044C546D5DC4B735DABEDC43934A3921E66
    App:            08CA79DF3F658A135D2B08E5953B979CC14081D2
  }#9051168FE9D719BA6653FE542653BC075BBA68DB
  Data{
    
  }#
  Commit{
    BlockID:    7374468A8DE886A48CA7C06F5CED9FF9DEFF4ED6:1:B9EBFF6CB0F0
    Precommits: nil-Vote
    Vote{1:91C8832C5FA2 2202/00/2(Precommit) 7374468A8DE8 /58BE2B9DE4F8.../}
  }#1BBDB53C2F3051A5455C676B7959538D79D30E5C
}#9051168FE9D719BA6653FE542653BC075BBA68DB module=consensus
INFO[05-18|08:10:41] Executed block                           module=state height=2203 valid txs=0 invalid txs=0
INFO[05-18|08:10:41] Committing block                         channel=Info run_id=2061104f-3b9c-11e7-8e83-db045f2dde84 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 burrow-mint.go:151 local_client.go:197 app_conn.go:81 execution.go:258 execution.go:243 state.go:1251 state.go:1198 state.go:1151 state.go:1178 state.go:1467 state.go:1356 state.go:699 state.go:655 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe BurrowMint]"" last_block_height=2203
INFO[05-18|08:10:42] Resetting checkCache                     channel=Info run_id=2061104f-3b9c-11e7-8e83-db045f2dde84 trace=""[metadata.go:46 value.go:19 log.go:84 info_trace_logger.go:126 convention.go:30 log.go:143 convention.go:60 convention.go:40 burrow-mint.go:158 local_client.go:197 app_conn.go:81 execution.go:258 execution.go:243 state.go:1251 state.go:1198 state.go:1151 state.go:1178 state.go:1467 state.go:1356 state.go:699 state.go:655 asm_amd64.s:2086]"" scope=""[Serve Core BurrowMintPipe BurrowMint]"" txs=0
fatal error: runtime: out of memory

runtime stack:
runtime.throw(0x559654c791d5, 0x16)
	/usr/lib/go/src/runtime/panic.go:566 +0x97
runtime.sysMap(0xc480640000, 0x4d0000, 0xc468afc000, 0x5596556adab8)
	/usr/lib/go/src/runtime/mem_linux.go:219 +0x1d2
runtime.(*mheap).sysAlloc(0x559655693a20, 0x4d0000, 0x0)
	/usr/lib/go/src/runtime/malloc.go:407 +0x37c
runtime.(*mheap).grow(0x559655693a20, 0x262, 0x0)
	/usr/lib/go/src/runtime/mheap.go:726 +0x64
runtime.(*mheap).allocSpanLocked(0x559655693a20, 0x262, 0x2000)
	/usr/lib/go/src/runtime/mheap.go:630 +0x4f4
runtime.(*mheap).alloc_m(0x559655693a20, 0x262, 0x7f0100000000, 0x7f92669d8d20)
	/usr/lib/go/src/runtime/mheap.go:515 +0xe4
runtime.(*mheap).alloc.func1()
	/usr/lib/go/src/runtime/mheap.go:579 +0x4d
runtime.systemstack(0x7f92669d8d28)
	/usr/lib/go/src/runtime/asm_amd64.s:314 +0xa1
runtime.(*mheap).alloc(0x559655693a20, 0x262, 0x10100000000, 0x3f)
	/usr/lib/go/src/runtime/mheap.go:580 +0x75
runtime.largeAlloc(0x4c39bc, 0x7f92669d8d01, 0x55965463a15c)
	/usr/lib/go/src/runtime/malloc.go:774 +0x95
runtime.mallocgc.func1()
	/usr/lib/go/src/runtime/malloc.go:669 +0x40
runtime.systemstack(0xc420018000)
	/usr/lib/go/src/runtime/asm_amd64.s:298 +0x72
runtime.mstart()
	/usr/lib/go/src/runtime/proc.go:1079

goroutine 42 [running]:
runtime.systemstack_switch()
	/usr/lib/go/src/runtime/asm_amd64.s:252 fp=0xc460362918 sp=0xc460362910
runtime.mallocgc(0x4c39bc, 0x559655228960, 0x5f01, 0xc468142000)
	/usr/lib/go/src/runtime/malloc.go:670 +0x915 fp=0xc4603629b8 sp=0xc460362918
runtime.makeslice(0x559655228960, 0x25ed70, 0x4c39bc, 0x5f21, 0xc468142000, 0xc460362a68)
	/usr/lib/go/src/runtime/slice.go:57 +0x7d fp=0xc460362a10 sp=0xc4603629b8
github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb.(*Batch).appendRec(0xc47c25d800, 0x1, 0xc424f3f220, 0x14, 0x20, 0xc468142000, 0x5ebd, 0x5f21)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb/batch.go:93 +0xf0 fp=0xc460362ad8 sp=0xc460362a10
github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb.(*Batch).Put(0xc47c25d800, 0xc424f3f220, 0x14, 0x20, 0xc468142000, 0x5ebd, 0x5f21)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/syndtr/goleveldb/leveldb/batch.go:118 +0x75 fp=0xc460362b28 sp=0xc460362ad8
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-db.(*goLevelDBBatch).Set(0xc4801b5110, 0xc424f3f220, 0x14, 0x20, 0xc468142000, 0x5ebd, 0x5f21)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-db/go_level_db.go:106 +0x6d fp=0xc460362b70 sp=0xc460362b28
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*nodeDB).SaveNode(0xc420443bd0, 0xc42043f950, 0xc47b750be0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_tree.go:267 +0x1b3 fp=0xc460362c40 sp=0xc460362b70
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).save(0xc47b750be0, 0xc42043f950)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:230 +0x75 fp=0xc460362c80 sp=0xc460362c40
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).save(0xc47b750b40, 0xc42043f950)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:225 +0x92 fp=0xc460362cc0 sp=0xc460362c80
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).save(0xc46985a460, 0xc42043f950)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:221 +0xb7 fp=0xc460362d00 sp=0xc460362cc0
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).save(0xc46985a3c0, 0xc42043f950)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:225 +0x92 fp=0xc460362d40 sp=0xc460362d00
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).save(0xc478e56000, 0xc42043f950)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:221 +0xb7 fp=0xc460362d80 sp=0xc460362d40
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).save(0xc478a09360, 0xc42043f950)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:221 +0xb7 fp=0xc460362dc0 sp=0xc460362d80
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).save(0xc478a092c0, 0xc42043f950)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:225 +0x92 fp=0xc460362e00 sp=0xc460362dc0
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).save(0xc4643c85a0, 0xc42043f950)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:221 +0xb7 fp=0xc460362e40 sp=0xc460362e00
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).save(0xc4643c8500, 0xc42043f950)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:225 +0x92 fp=0xc460362e80 sp=0xc460362e40
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLNode).save(0xc4643c8460, 0xc42043f950)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_node.go:225 +0x92 fp=0xc460362ec0 sp=0xc460362e80
github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle.(*IAVLTree).Save(0xc42043f950, 0x7f9266c01000, 0x0, 0x559624f1328b)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/go-merkle/iavl_tree.go:123 +0x3e fp=0xc460362ee0 sp=0xc460362ec0
github.com/hyperledger/burrow/manager/burrow-mint/state.(*State).Save(0xc4200c66c0)
	/go/src/github.com/hyperledger/burrow/manager/burrow-mint/state/state.go:102 +0x48 fp=0xc460362f58 sp=0xc460362ee0
github.com/hyperledger/burrow/manager/burrow-mint.(*BurrowMint).Commit(0xc4200c54f0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/manager/burrow-mint/burrow-mint.go:164 +0x480 fp=0xc460363090 sp=0xc460362f58
github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client.(*localClient).CommitSync(0xc420136120, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/abci/client/local_client.go:197 +0x6b fp=0xc4603630d8 sp=0xc460363090
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy.(*appConnConsensus).CommitSync(0xc420176d90, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/proxy/app_conn.go:81 +0x5b fp=0xc460363150 sp=0xc4603630d8
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).CommitStateUpdateMempool(0xc4744cd550, 0x55965565bb00, 0xc420176d90, 0xc4439f28e0, 0x559655657ea0, 0xc4200498f0, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:258 +0xb4 fp=0xc460363280 sp=0xc460363150
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state.(*State).ApplyBlock(0xc4744cd550, 0x7f9266b8ada8, 0xc47726acc0, 0x55965565bb00, 0xc420176d90, 0xc4439f28e0, 0x1, 0xc42f0587c0, 0x14, 0x20, ...)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/state/execution.go:243 +0x274 fp=0xc460363340 sp=0xc460363280
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).finalizeCommit(0xc420142340, 0x89b)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1251 +0xb64 fp=0xc460363558 sp=0xc460363340
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).tryFinalizeCommit(0xc420142340, 0x89b)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1198 +0x179 fp=0xc460363610 sp=0xc460363558
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).enterCommit.func1(0xc420142340, 0x0, 0x89b)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1151 +0x9f fp=0xc460363638 sp=0xc460363610
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).enterCommit(0xc420142340, 0x89b, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1178 +0x748 fp=0xc460363780 sp=0xc460363638
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).addVote(0xc420142340, 0xc470ed9180, 0x0, 0x0, 0xc420453ab8, 0x0, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1467 +0x9e1 fp=0xc460363a38 sp=0xc460363780
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).tryAddVote(0xc420142340, 0xc470ed9180, 0x0, 0x0, 0x20, 0x55965529b860)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:1356 +0x69 fp=0xc460363ae0 sp=0xc460363a38
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).handleMsg(0xc420142340, 0x5596552577c0, 0xc472571ae0, 0x0, 0x0, 0x89b, 0x0, 0x6, 0xed0af4e00, 0x2dd5c03a, ...)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:699 +0x668 fp=0xc460363be8 sp=0xc460363ae0
github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).receiveRoutine(0xc420142340, 0x0)
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:655 +0x460 fp=0xc460363f70 sp=0xc460363be8
runtime.goexit()
	/usr/lib/go/src/runtime/asm_amd64.s:2086 +0x1 fp=0xc460363f78 sp=0xc460363f70
created by github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).OnStart
	/go/src/github.com/hyperledger/burrow/vendor/github.com/tendermint/tendermint/consensus/state.go:389 +0x55b
...

```
",closed,False,2017-05-16 20:37:27,2018-05-01 14:06:08
burrow,zramsay,https://github.com/hyperledger/burrow/pull/610,https://api.github.com/repos/hyperledger/burrow/issues/610,client websocket: add missing verb to error message,similar to #608 ,closed,True,2017-05-15 15:51:13,2017-05-16 13:39:05
burrow,ratranqu,https://github.com/hyperledger/burrow/issues/609,https://api.github.com/repos/hyperledger/burrow/issues/609,[RPC] NewBlock events are not sent to web socket endpoint 1337/socketrpc,"Please include in your bug report:

- [ ] `burrow version` (docker image tag or branch if built from source)
0.16.0, 0.16.3
- [ ] `monax version` (if applicable)
0.16
- [ ] operating system details (osx/windows/linux)
Linux ubuntu 16.04
- [ ] what you expected to happen
on 0.11.4, subscribing to `NewBlock` or `Log/$Addr` events over websockets would return the events as they came back. On 0.16.x, the events are not published anymore to the 1337/socketrpc endpoint.
Acc/*/* events still work though.
- [ ] what actually happened
no events are published to the 1337/socketrpc endpoint
- [ ] steps to reproduction
contact me if need a way to reproduce (it requires a chain with contracts publishing events and a web socket client subscribing and listening to all Log/$Addr  or NewBlock events)

",closed,False,2017-05-11 19:04:31,2018-06-26 08:41:26
burrow,zramsay,https://github.com/hyperledger/burrow/pull/608,https://api.github.com/repos/hyperledger/burrow/issues/608,fix error formatting,the number of verbs should match the number of arguments in `fmt.Errorf`,closed,True,2017-05-11 17:04:22,2017-05-11 18:18:12
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/607,https://api.github.com/repos/hyperledger/burrow/issues/607,Implement dynamic memory and fix out of bounds issues,"This PR introduces a dynamic memory implementation that satisfies the assumption (by Solidity) that memory will be dynamically allocated at the memory boundary when an `MSTORE` writes to the memory boundary provided by `MSIZE`.

The Solidity compiler assumes that memory will be dynamically allocated at the current memory upper bounds (as reported by `MSIZE`) if an `MSTORE` operation tries to write to it. I believe the reason for this behaviour is that it is an easy way to guarantee that a portion a of memory will be unused (since it has not yet been allocated). Obviously this only works if the EVM environment will dynamically allocate that memory for you. This PR implements this in Burrow.

For reference, the Solidity assumption around object creation is encoded in the Solidity compiler here: https://github.com/ethereum/solidity/blob/develop/libsolidity/codegen/ExpressionCompiler.cpp#L842-L851

And you can see the dynamic memory allocation in go-ethereum here: https://github.com/ethereum/go-ethereum/blob/master/core/vm/interpreter.go#L152-L173 . Where the memory size is just the mstore offset + one word calculated here: https://github.com/ethereum/go-ethereum/blob/master/core/vm/memory_table.go#L49-L51.

I have taken a simpler approach of growing the memory on a `Write` operation up to a configurable bounds. I make use of the underlying slice implementation in Go to efficiently grow arrays. This PR includes:

- Simple `Memory` interface to encapsulate memory operations
- Adds a `memoryProvider` argument to `NewVM`
- Switches out memory slice for new `Memory` object 
- Fixes issues arising because the `subslice` function simply wasn't fit for purpose
- Adds a variety of tests, including on in the VM to test for the specific 'allocation on boundary' behaviour Solidity expects.

I have verified that this fixes the following issues:

fixes #474 
fixes #258 
fixes #300 (could not use exactly the same code)",closed,True,2017-05-09 19:00:36,2017-08-04 15:54:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/606,https://api.github.com/repos/hyperledger/burrow/issues/606,Change hasBase to return bool,"This change was inadvertently omitted from #500, it changes the return type of `hasBase` to bool to match the other predicate methods.

I've also added an error message if one attempts to call an snative directly (simulated call as in query-contract) which mirrors the error message given in execution.go when doing the same via a `CallTx`.",closed,True,2017-05-06 21:17:03,2017-08-04 15:54:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/605,https://api.github.com/repos/hyperledger/burrow/issues/605,Clean up storage and account tombstones from BlockCache ,"An issue occurs on block commit when  an account is removed from the `BlockCache`, for example (the only example I'm aware of) when `SELFDESTRUCT`/`SUICIDE` is called. This line in `BlockCache`.Sync is reached: https://github.com/hyperledger/burrow/blob/master/manager/burrow-mint/state/block_cache.go#L227 when Burrow attempts to remove an account from the merkle IAVL tree when it has already been removed. This happens one block after the block that _did_ successfully remove the account because the `BlockCache` holds an 'append only' cache of account and storage changes: https://github.com/hyperledger/burrow/blob/master/manager/burrow-mint/state/block_cache.go#L41-L42. It stores an account removal by setting a 'removed' flag so the account object becomes a tombstone object. But the `Sync` method does not clean up these objects so on the subsequent block it attempts to remove an account that has already been removed.

I'd like to think a bit more about where else we may be having a stale cache and see if there is a reasonable way to test the Sync method if that can be added in reasonably timely fashion.

fixes #542 

Resolves my test case that can be found here: https://gist.github.com/silasdavis/7f35cb31a255c18d2fc70eed1fa38211",closed,True,2017-05-05 18:33:56,2017-08-04 15:54:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/604,https://api.github.com/repos/hyperledger/burrow/issues/604,rename suicide to selfdestruct to match upstream,,closed,True,2017-05-05 16:38:40,2017-08-04 15:54:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/603,https://api.github.com/repos/hyperledger/burrow/issues/603,Don't capture time twice,Leads to vector-valued time that is unprintable. We are adding time to capture logs through `WithMetadata` already,closed,True,2017-05-05 16:38:21,2017-08-04 15:54:15
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/602,https://api.github.com/repos/hyperledger/burrow/issues/602,Add Maintainers list,"Add maintainers list to root in support of [Hyperledger charter 4.b](https://www.hyperledger.org/about/charter) (and potential white listing for CI in the future);

per reference: https://github.com/hyperledger/sawtooth-core/blob/master/MAINTAINERS

Additionally suggested to add public keys for commit signatures to said Maintainers list.",closed,False,2017-05-05 14:39:32,2018-04-11 21:03:06
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/601,https://api.github.com/repos/hyperledger/burrow/issues/601,[EVM] Support INVALID opcode,See: https://github.com/ethereum/EIPs/issues/141,closed,False,2017-05-05 14:08:09,2018-06-05 09:38:01
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/600,https://api.github.com/repos/hyperledger/burrow/issues/600,[EVM] Support REVERT opcode,See: https://github.com/ethereum/EIPs/pull/206,closed,False,2017-05-05 14:08:04,2018-06-05 09:38:12
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/599,https://api.github.com/repos/hyperledger/burrow/issues/599,make multiline terminal output the default for cli,,closed,True,2017-05-05 13:27:08,2017-08-04 15:54:46
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/598,https://api.github.com/repos/hyperledger/burrow/issues/598,Fix broken unsubscribe…,"Also don't rely on go-rpc's definition of `Unsubscribe` and `Subscribe`, which even when it was compatible with ours was only 'by chance' (and history). So we:

- Use 'eventId' arg name for `Subscribe` consistently
- Use 'subscriptionId' arg name for `Unsubscribe` consistently
- Centralise subscribe/unsubsribe in `rpc/tendermint/client` package (used by tests and `NodeClient`) in a similar way as the non-websocket call-based methods are.

fixes #597 ",closed,True,2017-05-04 12:51:27,2017-08-04 15:54:15
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/597,https://api.github.com/repos/hyperledger/burrow/issues/597,race condition in tests on NewBlock event,"Race condition in test on new block event for tendermint v0.9.2 on (develop / 0.17)

```
github.com/hyperledger/burrow/rpc/tendermint/test
=== RUN   TestSubscribe
--- FAIL: TestSubscribe (1.01s)
    websocket_client_test.go:298: Continued to see NewBlock event after unsubscribing
```

- `burrow version` 0.17.0",closed,False,2017-05-04 11:48:38,2017-05-07 17:38:24
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/596,https://api.github.com/repos/hyperledger/burrow/issues/596,Remove module versioning,"In the process of doing the Tendermint upgrade I came up against the slightly cumbersome process for updating our versioning. Since the upgrade touched this I have tried to address it here. I understand the legitimate motivations for the independent versioning of modules (from Burrow itself), and I am happy to rollback changes if this really goes too far. However I put forward the following arguments/principles that guided my work:

Burrow should continue to support the idea of 'modules' (consensus and manager), however it is down to a point release (that is specific compiled binary) of Burrow to ensure that the modules it bundles are compatible (with respect to versions). We do this through dependency management and versioning and therefore it is redundant to further assert on the versions of our modules. In reality it is not clear at all how we could support multiple versions of 'the same' manager. If we would like to support different compatibility-level versions of a manager or consensus engine then it is sufficient to give them separate names. For the purposes of Burrow's initialisation it does not need to know they they belong to the same lineage.

To determine compatibility between modules we should try and make use of the type system rather than hand-coded values (that we have to robotically have to upgrade in multiple places). We can extend the current 'dependency injection' of ConsensusEngine to help us with this. When a consensus module is loaded into a 'manager Pipe' (we load Manager first so we may as well consider the pipe to be manager-typed at that point) we can ask ConsensusEngine and Manager/Application to check Pipe for compatible implementations by trying to type convert interfaces: _, ok := pipe.ConsensusEngine.(BurrowMintCompatibleConsensusEngine). We can capture the actual functional requirements that a module may have by using this pattern. If we really need to be version specific (i.e. we have compatible interface signatures that belonging to logically incompatible versions) we can add a marker function func BurrowMint_0_18_4_Consensus() that captures that incompatible, but we can do so when we really need it rather than pre-emptively.

It is useful to error on being provided a configuration written by a different version of Burrow to the runtime version of Burrow. To do this we can continue to close the Burrow version into the generated config file. But as in 1 it is sufficient to just use the single over-arching version number.

The last commit introduces mechanisms to cover points 2 and 3",closed,True,2017-05-02 12:00:00,2017-05-24 11:46:33
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/595,https://api.github.com/repos/hyperledger/burrow/issues/595,Upgrade to Tendermint 0.9.2,"This PR:

- Makes changes necessary to support Tendermint 0.9.2 and upgrades our dependencies to match
- Adds attempt to gracefully shutdown ConsensusEngine
- Updates RPC tests to use genesis making and config generation rather than hard-coded values",closed,True,2017-05-02 11:58:30,2017-05-04 11:46:06
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/594,https://api.github.com/repos/hyperledger/burrow/issues/594,[EVM] Implement STATICCALL opcode in EVM,See: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-214.md,closed,False,2017-04-29 17:44:25,2018-11-08 20:21:27
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/593,https://api.github.com/repos/hyperledger/burrow/issues/593,Tendermint 0.9.2 upgrade and rework versioning ,"This PR:
- Makes changes necessary to support Tendermint 0.9.2 and upgrades our dependencies to match
- Adds attempt to gracefully shutdown `ConsensusEngine`
- Updates RPC tests to use genesis making and config generation rather than hard-coded values

In the process of doing the upgrade I came up against the slightly cumbersome process for updating our versioning. Since the upgrade touched this I have tried to address it here. I understand the legitimate motivations for the independent versioning of modules (from Burrow itself), and I am happy to rollback changes if this really goes too far. However I put forward the following arguments/principles that guided my work:

1. Burrow should continue to support the idea of 'modules' (consensus and manager), however it is down to a point release (that is specific compiled binary) of Burrow to ensure that the modules it bundles are compatible (with respect to versions). We do this through dependency management and versioning and therefore it is redundant to further assert on the versions of our modules. In reality it is not clear at all how we could support multiple versions of 'the same' manager. If we would like to support different compatibility-level versions of a manager or consensus engine then it is sufficient to give them separate names. For the purposes of Burrow's initialisation it does not need to know they they belong to the same lineage.

2. To determine compatibility between modules we should try and make use of the type system rather than hand-coded values (that we have to robotically have to upgrade in multiple places). We can extend the current 'dependency injection' of `ConsensusEngine` to help us with this. When a consensus module is loaded into a 'manager `Pipe`' (we load `Manager` first so we may as well consider the pipe to be manager-typed at that point) we can ask `ConsensusEngine` and `Manager`/`Application` to check `Pipe` for compatible implementations by trying to type convert interfaces: `_, ok := pipe.ConsensusEngine.(BurrowMintCompatibleConsensusEngine)`. We can capture the actual functional requirements that a module may have by using this pattern. If we really need to be version specific (i.e. we have compatible interface signatures that belonging to logically incompatible versions) we can add a marker function `func BurrowMint_0_18_4_Consensus()` that captures that incompatible, but we can do so when we really need it rather than pre-emptively.

3. It is useful to error on being provided a configuration written by a different version of Burrow to the runtime version of Burrow. To do this we can continue to close the Burrow version into the generated config file. But as in 1 it is sufficient to just use the single over-arching version number.

The last commit introduces mechanisms to cover points 2 and 3",closed,True,2017-04-29 15:49:26,2017-08-04 15:54:46
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/592,https://api.github.com/repos/hyperledger/burrow/issues/592,Upgrade to Tendermint 0.9.1,,closed,True,2017-04-26 22:58:13,2017-04-27 10:40:05
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/591,https://api.github.com/repos/hyperledger/burrow/issues/591,Add extended tendermint config values to template and correct cs_wal_*,,closed,True,2017-04-26 22:52:22,2017-08-04 15:54:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/590,https://api.github.com/repos/hyperledger/burrow/issues/590,[release-0.16] bump version to 0.16.4,,closed,True,2017-04-25 16:36:51,2017-04-26 17:28:23
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/589,https://api.github.com/repos/hyperledger/burrow/issues/589,[master] bump version to 0.16.4,,closed,True,2017-04-25 16:36:10,2017-04-26 17:28:23
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/588,https://api.github.com/repos/hyperledger/burrow/issues/588,EVM/solidity compatibility issues,"I wanted to collect together some issues with compiled solidity code that users are having issues with on our stack. In order to go on on a frenzied rampage of EVM fixing...

For the benefit of those not on Zenhub this includes:

- #413 
- #474
- #526 
- #542 
- #189 
- #258 
- #300 
- #594 
",closed,False,2017-04-25 16:29:13,2018-02-26 10:43:55
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/587,https://api.github.com/repos/hyperledger/burrow/issues/587,Release 0.16.3,,closed,True,2017-04-25 14:51:26,2017-04-25 14:52:58
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/586,https://api.github.com/repos/hyperledger/burrow/issues/586,Add transact fix,"This ensures that `Transact` never sends value, and if fee is passed as '0' it further ensures it will not leak tokens through the fee. The Javascript libraries should opt for '0' fee after this fix is incorporated (they have been hotfixed to send '1' as fee to get same effect against existing Burrow code).",closed,True,2017-04-25 14:29:04,2017-04-26 17:28:23
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/585,https://api.github.com/repos/hyperledger/burrow/issues/585,[release-0.16] V0.16.3 bump,"Also includes merge-back of docs typo fixes from master.

Also needed to cherry-pick circleci fixes.",closed,True,2017-04-20 12:42:14,2017-04-25 14:21:50
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/584,https://api.github.com/repos/hyperledger/burrow/issues/584,[master] Version bump to 0.16.3,Also needed to cherry-pick circleci fixes ,closed,True,2017-04-20 12:40:28,2017-04-25 14:21:50
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/583,https://api.github.com/repos/hyperledger/burrow/issues/583,Update Tendermint to v0.9,"fixes included in tendermint v0.9:
- handshake issue on restarting state https://github.com/tendermint/tendermint/issues/388",closed,False,2017-04-20 12:38:21,2017-05-04 11:46:15
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/582,https://api.github.com/repos/hyperledger/burrow/issues/582,NewBlock event subscription fails,"Please include in your bug report:

- [ ] `burrow version` (docker image tag or branch if built from source)

0.12.0

- [ ] `monax version` (if applicable)

Eris CLI Version: 0.12.0

- [ ] `docker version` (if applicable)

Docker version 17.03.0-ce, build 60ccb22

- [ ] operating system details (osx/windows/linux)

Mac OS

- [ ] what you expected to happen

I expect to receive events for new blocks every second.

- [ ] what actually happened

```
MONAX 62126: { method: 'erisdb.eventSubscribe',
  params: { event_id: 'NewBlock' },
  id: 'g/J2FRPonWdELdvOl0yUnQXbvFlSOohcds7Pe/dqXf4=',
  jsonrpc: '2.0' }
MONAX 62126: { result: { sub_id: '0' },
  error: null,
  id: 'g/J2FRPonWdELdvOl0yUnQXbvFlSOohcds7Pe/dqXf4=',
  jsonrpc: '2.0' }
MONAX 62126: { method: 'erisdb.eventPoll',
  params: { sub_id: '0' },
  id: 'j3UaQy4iyLLxxwjO4QMutYVRsJ8pc2Dy4pX2U2Cy4PA=',
  jsonrpc: '2.0' }
MONAX 62126: { result: { events: [] },
  error: null,
  id: 'j3UaQy4iyLLxxwjO4QMutYVRsJ8pc2Dy4pX2U2Cy4PA=',
  jsonrpc: '2.0' }
MONAX 62126: { method: 'erisdb.eventPoll',
  params: { sub_id: '0' },
  id: 'o/RlM9OOHITpSlPtrzMSBNveYLKJEwdu0ciiApT1rKQ=',
  jsonrpc: '2.0' }
MONAX 62126: { result: { events: [] },
  error: null,
  id: 'o/RlM9OOHITpSlPtrzMSBNveYLKJEwdu0ciiApT1rKQ=',
  jsonrpc: '2.0' }

...
```

- [ ] steps to reproduction

Call `erisdb.eventSubscribe` with `event_id` set to `NewBlock`.
",closed,False,2017-04-19 20:53:43,2018-05-30 10:20:50
burrow,bryant1410,https://github.com/hyperledger/burrow/pull/581,https://api.github.com/repos/hyperledger/burrow/issues/581,Fix broken headings in Markdown files,"GitHub changed the way Markdown headings are parsed, so this change fixes it.

See [bryant1410/readmesfix](https://github.com/bryant1410/readmesfix) for more information.

Tackles bryant1410/readmesfix#1
",closed,True,2017-04-18 04:26:35,2017-04-20 09:55:51
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/580,https://api.github.com/repos/hyperledger/burrow/issues/580,[Client] Dump State and Restore State calls,need a way to transfer state amongst multiple nodes. The proposed is essentially what we had with old tendermint via the mint dump call. Needed for future monax jobs. ,closed,False,2017-04-15 14:47:18,2018-05-30 10:40:00
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/579,https://api.github.com/repos/hyperledger/burrow/issues/579,Release 0.16,"This captures some changes around our genesis making utility functions and some readme cleanup.

The intention of this PR is to tag a release on the merge commit to master.",closed,True,2017-04-14 13:37:04,2017-04-18 18:47:38
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/578,https://api.github.com/repos/hyperledger/burrow/issues/578,Logging config and outputs (with latest develop),"merges silas:logging ( #484 ) into latest develop to assert that the CircleCI script is corrected or broken

(see https://github.com/hyperledger/burrow/pull/576/files#diff-29944324a3cbf9f4bd0162dfe3975d88R4)",closed,True,2017-04-13 20:01:32,2017-04-13 20:07:24
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/577,https://api.github.com/repos/hyperledger/burrow/issues/577,Retest buildtool,testing CI,closed,True,2017-04-13 13:50:26,2017-04-25 14:21:50
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/576,https://api.github.com/repos/hyperledger/burrow/issues/576,Upgrade CI to docker 1.10.0 to fix remove image issue,"This PR:

- Upgrades to Circle approved docker 1.10.0
- Fixes issue where build image could not be removed
- Reintroduces removal of build image so it is not pushed
- Stops using repo username and instead hard codes hyperledger/burrow so CI will work against forks",closed,True,2017-04-13 13:02:09,2017-04-25 14:21:49
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/575,https://api.github.com/repos/hyperledger/burrow/issues/575,[release-0.16] apply hotfix from PR #571,Need this to make release-0.16 mergable to master,closed,True,2017-04-13 10:15:59,2017-04-13 11:11:58
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/574,https://api.github.com/repos/hyperledger/burrow/issues/574,[develop] Apply hotfix from PR #571,,closed,True,2017-04-13 10:03:59,2017-04-13 11:11:58
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/573,https://api.github.com/repos/hyperledger/burrow/issues/573,Pull in permissions util fix,Needed for 0.16.2,closed,True,2017-04-13 09:57:37,2017-04-13 10:13:33
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/572,https://api.github.com/repos/hyperledger/burrow/issues/572,Fix comments in permissions util,,closed,True,2017-04-13 09:48:41,2017-04-13 11:11:58
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/571,https://api.github.com/repos/hyperledger/burrow/issues/571,readme: correct CI build batches to direct to Hyperledger CI,,closed,True,2017-04-13 09:39:21,2017-04-13 09:50:39
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/570,https://api.github.com/repos/hyperledger/burrow/issues/570,Fix from int to bool,We need this to make it through to 0.16.2,closed,True,2017-04-12 20:24:10,2017-04-13 09:56:45
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/569,https://api.github.com/repos/hyperledger/burrow/issues/569,change from uints to bools because it makes more sense,Signed-off-by: RJ Catalano <rj@monax.io>,closed,True,2017-04-12 20:05:08,2017-04-12 20:23:01
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/568,https://api.github.com/repos/hyperledger/burrow/issues/568,pull in vendor,Signed-off-by: RJ Catalano <rj@monax.io>,closed,True,2017-04-12 18:30:41,2017-04-19 15:41:20
burrow,zramsay,https://github.com/hyperledger/burrow/issues/567,https://api.github.com/repos/hyperledger/burrow/issues/567,bring in type changes from cli's hotfix,see https://github.com/monax/cli/commit/ea47368fe7d75f711e493ae678b50f62e9006c53#diff-f84df48bb1c0653ac4595ec8844a843f,closed,False,2017-04-12 14:39:20,2017-05-11 17:07:44
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/566,https://api.github.com/repos/hyperledger/burrow/issues/566,Remove accidental reference to 0.17 in config comment,,closed,True,2017-04-12 10:23:38,2017-04-13 11:12:13
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/565,https://api.github.com/repos/hyperledger/burrow/issues/565,Release 0.16,Merge for tagging release on master,closed,True,2017-04-11 22:29:06,2017-04-12 18:09:22
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/564,https://api.github.com/repos/hyperledger/burrow/issues/564,Capitalize beginning letters,was just beginning to bug me,closed,True,2017-04-11 21:12:21,2017-04-12 14:55:38
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/563,https://api.github.com/repos/hyperledger/burrow/issues/563,Attempting to fix docker build on push,,closed,True,2017-04-11 18:27:50,2017-04-13 11:11:59
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/562,https://api.github.com/repos/hyperledger/burrow/issues/562,Update Dockerfile to use hyperledger as repo,This is needed to fix the docker build,closed,True,2017-04-11 16:09:15,2017-04-11 22:20:08
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/561,https://api.github.com/repos/hyperledger/burrow/issues/561,Update Dockerfile to use hyperledger as repo,This is needed to fix the docker build,closed,True,2017-04-11 16:09:05,2017-04-11 16:18:56
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/560,https://api.github.com/repos/hyperledger/burrow/issues/560,Remove/simplify unused plumbing intended for swappable modules (consensus/execution),"Currently we have the notion of a manager (execution engine + state) and consensus. These are good boundaries in terms of design and layout (although I would like to improve on what we have: https://github.com/hyperledger/burrow/issues/291).

We also have a lot of code that anticipates the possibility of mixing different consensus engines with different managers and arbitrary compatibility between them. So we have a root aggregate version/version.go. We have assertions around compatible consensus, and we have values in the config that have to match up appropriately. All of this buys us nothing other than a headache when bumping the version that has to be altered in several versions.

All of this made more sense when we envisaged a microservice architecture with each of our modules running in separate processes across a network, but I propose that we attempt to remove much of it and simplify the boot process of Burrow. We should keep (in fact we should strengthen) the logical engineering boundaries, but we should drop versions checks/assertions and assume that a release contains compatible versions of dependencies.

Another feature that I now find overly generic is modelling consensus and managers via a generic `ModuleConfig` with the attendant general 'module' loading code which also ties in with the versioning stuff. I think it would be clearer to have a specific `ConsensusConfig` and remove a few layers of indirection. Every time I bump a version I find this code confusing to follow and with our present direction I feel it adds nothing.

",closed,False,2017-04-11 14:57:41,2018-02-26 13:57:11
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/559,https://api.github.com/repos/hyperledger/burrow/issues/559,[release-0.16] Move to github.com/hyperledger/burrow namespace and prepare for 0.16.2 release,Also prepares for v0.16.2 release with changelog update,closed,True,2017-04-11 13:24:34,2017-04-11 15:29:11
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/558,https://api.github.com/repos/hyperledger/burrow/issues/558,[develop] Move to github.com/hyperledger/burrow namespace,,closed,True,2017-04-11 13:19:51,2017-04-11 15:27:49
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/557,https://api.github.com/repos/hyperledger/burrow/issues/557,[master] Move to github.com/hyperledger/burrow namespace,This repo is now the canonical source and the monax (now) fork will be removed. ,closed,True,2017-04-11 13:00:14,2017-04-13 11:11:59
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/556,https://api.github.com/repos/hyperledger/burrow/issues/556,Merge master with renaming to Burrow up into develop,,closed,True,2017-04-07 17:13:09,2017-04-07 17:15:44
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/555,https://api.github.com/repos/hyperledger/burrow/issues/555,merge master into release-0.16,,closed,True,2017-04-07 13:05:09,2017-04-07 13:09:59
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/554,https://api.github.com/repos/hyperledger/burrow/issues/554,Patch v0.16.2: rename to Burrow,,closed,True,2017-04-07 12:54:46,2017-04-07 13:11:53
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/553,https://api.github.com/repos/hyperledger/burrow/issues/553,Rename to Burrow...,This omits some anticipated upstream changes to the location of our docker images on quay.io so another PR will be needed before we reach a commit we can actually release.,closed,True,2017-04-04 18:25:25,2017-04-10 11:27:13
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/552,https://api.github.com/repos/hyperledger/burrow/issues/552,Correct for tagged releases (breakage per name change),"- revert patch version number update on master back to v0.16.1
- correct docker tagging script to run correctly on CircleCi ",closed,True,2017-04-04 17:16:01,2017-04-04 17:22:28
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/551,https://api.github.com/repos/hyperledger/burrow/issues/551,Version bump,,closed,True,2017-04-04 16:24:12,2017-04-10 11:27:13
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/550,https://api.github.com/repos/hyperledger/burrow/issues/550,Pull hotfixes and name changes onto release-0.16,,closed,True,2017-04-04 16:17:21,2017-04-04 16:20:47
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/549,https://api.github.com/repos/hyperledger/burrow/issues/549,Added cluster/deployment scripts and templates,fixes #547 ,closed,True,2017-04-04 15:53:23,2017-04-10 11:27:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/548,https://api.github.com/repos/hyperledger/burrow/issues/548,Map improved /health endpoint from current Status method,"- Status() currently gives some indication to the health of the chain, but can be hard to interpret correctly on the receiving side https://github.com/monax/eris-db/blob/master/client/methods/status.go#L30
- define a boolean metric on new endpoint `/health`; possible inputs:
  - last block successfully signed and verified
  - last block received within statistcal window knowing timeouts
  - implicitly, process still running",closed,False,2017-04-02 15:08:27,2017-04-04 15:45:25
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/547,https://api.github.com/repos/hyperledger/burrow/issues/547,Add initial start in kubernetes cluster script,"
",closed,False,2017-04-02 14:54:35,2018-02-26 13:49:25
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/546,https://api.github.com/repos/hyperledger/burrow/issues/546,client: correct yesterdays hotfix for event confirmation,correct yesterdays mistake in hotfix for e-db v0.16.0,closed,True,2017-04-01 18:16:18,2017-04-01 19:24:16
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/545,https://api.github.com/repos/hyperledger/burrow/issues/545,hotfix: new block events arrive late; causing missed return on waiting,"client: websocket waiting for result on call missed due to belated NewBlock event;
remove redundant check",closed,True,2017-03-31 18:14:55,2017-03-31 18:20:17
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/544,https://api.github.com/repos/hyperledger/burrow/issues/544,[Hotfix] Use debug flag,"Noticed the debug flag was not being respected. The EVM debug ought to be handled by the logging system, but this is still pending...",closed,True,2017-03-29 18:10:18,2017-04-10 11:27:12
burrow,arunkumarsekar,https://github.com/hyperledger/burrow/issues/543,https://api.github.com/repos/hyperledger/burrow/issues/543,eris-db server undefined error,"
![issue](https://cloud.githubusercontent.com/assets/2208785/24457898/1b7bef9e-14b5-11e7-8339-6651ebc74b24.png)

This my eris-db instance log., please guide me to resolve this issue..

Thanks

Please include in your bug report:

- [ ] `eris-db version` (docker image tag or branch if built from source)
- [ ] `eris version` (0.12.0)
- [ ] `go version` (if applicable)
- [ ] `docker version` (1.13.1)
- [ ] operating system details (osx/windows/linux)
- [ ] what you expected to happen
- [ ] what actually happened
- [ ] steps to reproduction

If issue is a feature request, tell us why this feature is useful.
",closed,False,2017-03-29 13:55:53,2017-03-31 18:22:09
burrow,marc4gov,https://github.com/hyperledger/burrow/issues/542,https://api.github.com/repos/hyperledger/burrow/issues/542,Call to selfdestruct(..) stops the chain,"Please include in your bug report:

- [ ] `eris-db version` (docker image tag or branch if built from source)
0.12.0
- [ ] `eris version` (if applicable)
0.12.0
- [ ] `go version` (if applicable)
- [ ] `docker version` (if applicable)
1.13.0
- [ ] operating system details (osx/windows/linux)
osx
- [ ] what you expected to happen
chain keeps alive
- [ ] what actually happened
chain stops
- [ ] steps to reproduction
I'm making a call to Solidity selfdestruct via a cascading contract call, e.g.:

From a TaskManager contract:
```
    function removeTask(address manager, address taskAddress)
    returns (bool result) {
        Task t = Task(taskAddress);
        if (t.remove(manager)) {
            taskList.removeElement(t);
            TaskDeleted(t, ""Task Deleted"", block.number, block.timestamp);
            return true;
        } else {
            return false;
        }
    }
```
call from within the Task contract:

```
    function remove(address manager)
    onlyManager(manager)
    isEmpty(manager)
    returns (bool)
    {
        selfdestruct(owner);
        return true;
    }
```
It doesn't matter if I use the `owner` or the `manager` address for the refund

",closed,False,2017-03-28 14:29:03,2017-05-26 16:04:54
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/541,https://api.github.com/repos/hyperledger/burrow/issues/541,contributing: add Developer Certificate of Origin for Apache 2.0,,closed,True,2017-03-28 13:37:07,2017-03-28 14:13:52
burrow,madmanblues,https://github.com/hyperledger/burrow/issues/540,https://api.github.com/repos/hyperledger/burrow/issues/540,Call of Eris DB method 'transactAndHold' with parameters - Transaction timed out,"Opened issue as suggested by Casey in eris-db.js and then reopened here as suggested on the first issue https://github.com/monax/legacy-db.js/issues/57

I'll try to collect the requested info as soon as possible.

Problem - I created a service to call a function on a contract. When the service is called the information is logged in the console correctly (the service receive the data correctly) but when it calls the contract it goes in time out with the following error:

`Call of Eris DB method 'transactAndHold' with parameters { ""priv_key"": ""..............."", ""address"": ""17FD3BE508C4410F41FCA995B4F6B96A9F19E89D"", ""data"": ""5c3f3e0c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000015546869732069732061206861736820746f206c6f670000000000000000000000"", ""gas_limit"": 1000000, ""fee"": 0 } responded with ""Transaction timed out. Hash: 87C8A7BE5A5D4625D5C62C4AE29FD1FF7C200A85"". { Error: Transaction timed out. Hash: 87C8A7BE5A5D4625D5C62C4AE29FD1FF7C200A85 at values.next.then (/usr/src/app/node_modules/eris-contracts/node_modules/eris-db/node_modules/@nodeguy/json-rpc/lib/index.js:12:38) method: 'transactAndHold', params: [ { priv_key: '................', address: '17FD3BE508C4410F41FCA995B4F6B96A9F19E89D', data: '5c3f3e0c00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000015546869732069732061206861736820746f206c6f670000000000000000000000', gas_limit: 1000000, fee: 0 } ], code: -32603, message: 'Transaction timed out. Hash: 87C8A7BE5A5D4625D5C62C4AE29FD1FF7C200A85' }`

Please include in your bug report:

- [ ] `eris-db version` (docker image tag or branch if built from source)
- [x] `eris version` (if applicable) - v0.12
- [ ] `go version` (if applicable)
- [ ] `docker version` (if applicable)
- [x] operating system details  - Linux/Unix, Ubuntu 14.04-LTS2
- [x] what you expected to happen - See description
- [x] what actually happened - see description
- [x] steps to reproduction - See description",closed,False,2017-03-27 19:00:51,2018-05-30 10:15:10
burrow,dcmiddle,https://github.com/hyperledger/burrow/issues/539,https://api.github.com/repos/hyperledger/burrow/issues/539,License link in readme is broken. Check casing.,"In 
https://github.com/monax/eris-db/blob/master/README.md
The license link
https://github.com/monax/eris-db/blob/master/license.md
should be
https://github.com/monax/eris-db/blob/master/LICENSE.md
",closed,False,2017-03-27 17:06:24,2017-03-27 17:09:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/538,https://api.github.com/repos/hyperledger/burrow/issues/538,Merge master into develop,"- [x] pull up name change eris-ltd -> monax
- [x] license and docs hotfixes",closed,True,2017-03-24 19:20:50,2017-03-24 19:44:56
burrow,zramsay,https://github.com/hyperledger/burrow/pull/537,https://api.github.com/repos/hyperledger/burrow/issues/537,Update circle.yml,,closed,True,2017-03-24 19:19:05,2017-03-24 19:21:49
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/536,https://api.github.com/repos/hyperledger/burrow/issues/536,Issue534 rename to monax,"fixes #534 

- [x] rename eris-ltd to monax
- [x] cut dependency on eris-keys for mock keys client; instead implement simple keys mock client
",closed,True,2017-03-24 18:08:14,2017-03-24 18:55:35
burrow,zramsay,https://github.com/hyperledger/burrow/pull/535,https://api.github.com/repos/hyperledger/burrow/issues/535,rename all organization paths from 'eris-ltd' to 'monax' ,- closes #534 ,closed,True,2017-03-22 23:14:27,2017-03-24 19:16:49
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/534,https://api.github.com/repos/hyperledger/burrow/issues/534,move gopath namespace from eris-ltd to monax,Move the namespaces of `github.com/eris-ltd/eris-db` over to `github.com/monax/eris-db` and all import paths in the code.,closed,False,2017-03-22 13:44:10,2017-03-24 18:55:35
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/533,https://api.github.com/repos/hyperledger/burrow/issues/533,Pr531 test docs,tested #531 locally and added version patch update to v0.16.1,closed,True,2017-03-22 11:30:48,2017-03-22 11:32:34
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/532,https://api.github.com/repos/hyperledger/burrow/issues/532,Just vendor in the dependencies,"Reasons:

1. It makes our docker images smaller

2. It makes tooling's life a lot easier in importing dependencies.

3. It allows us to drop tools such as hell

I think these 3 succint reasons are more than enough to get rid of this paradigm. ",closed,True,2017-03-21 21:54:04,2017-04-13 09:50:16
burrow,zramsay,https://github.com/hyperledger/burrow/pull/531,https://api.github.com/repos/hyperledger/burrow/issues/531,docs: update harmonized links; remove generator,"- removes redundant generator files for docs generation
- updates links throughout to reflect new documentation paradigm
- merge only when we go live with the new docs on the website (shortly after release)",closed,True,2017-03-21 13:55:31,2017-03-22 11:32:35
burrow,whalelephant,https://github.com/hyperledger/burrow/issues/530,https://api.github.com/repos/hyperledger/burrow/issues/530,[rpc] getBlocks does not take in params for rpc endpoint,"Hi, 

I am trying to use the getBlocks() through RPC, the same code was used for getBlock with params: {height : 4271618} and it worked. 

But when I do getBlocks with the below: - 
---------------------------------
var getBlocks_option = {
    method: 'POST',
    url: 'http://ipaddress/rpc',
    headers: {
      'content-type': 'application/json'
    },
    body: {
      jsonrpc: '2.0',
      method: 'erisdb.getBlocks',
      params: {
        field: ""height"",
        op: "">"",
        value : ""4271618""}
    },
    json: true
  };
---------------------------------
The return is the most recent 50 blocks, and does not take into account for the params specified, in fact, I can pass an undefined value and the same is returned. This was sent via node request lib

But if I do :-
---------------------------------
http://ipaddress/blockchain/blocks?q=height:>4271618

---------------------------------
The correct result is returned. 


erisdb version 0.12.0

Thanks!
",closed,False,2017-03-21 03:35:30,2018-05-30 10:15:55
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/529,https://api.github.com/repos/hyperledger/burrow/issues/529,Let's consider adopting Ethereum's hex value encoding.,"Ethereum's hex values are prefixed with `0x`.  Ours are not.  See:

* https://github.com/ethereum/wiki/wiki/JSON-RPC#hex-value-encoding
* https://github.com/eris-ltd/eris-db/blob/ba74718e702cfb781869d5866bd792a38289e8e7/docs/specs/api.md#numbers-and-strings

We're using their code on the JavaScript side which means we have to convert the representations back and forth, wasting developer resources and causing bugs.  Let's stop bike-shedding here.",closed,False,2017-03-17 18:38:28,2018-02-26 13:51:32
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/528,https://api.github.com/repos/hyperledger/burrow/issues/528,bin: remove redundant shell script,"fixes #70 

- checked docker build; safe to remove deprecated script in `/bin`
- automatic gofmt change in `/test`
",closed,True,2017-03-16 11:04:39,2017-03-17 07:42:31
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/527,https://api.github.com/repos/hyperledger/burrow/issues/527,Consider moving RPC library into client package,"We should have a base ""standard"" RPC, that can be made extensible to RPC vectors such as tendermint, or web3, and this should either be directed by the client, or the rpc library itself (converge into the base calls of the client). Currently, it's a bit messy and fairly confusing to navigate, and nesting could help to alleviate this. 
",closed,False,2017-03-14 21:42:50,2017-03-15 14:11:49
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/526,https://api.github.com/repos/hyperledger/burrow/issues/526,Invalid opcode with byte code produced by solc v0.4.9,"Please include in your bug report:

- [ ] `eris-db version` (docker image tag or branch if built from source)

0.12.0

- [ ] `eris version` (if applicable)

0.12.0

- [ ] `go version` (if applicable)

go1.7.1 darwin/amd64

- [ ] `docker version` (if applicable)

17.03.0-ce, build 60ccb22

- [ ] operating system details (osx/windows/linux)

Mac OS

- [ ] what you expected to happen

I compiled the following contract with solc v0.4.9 and deployed it to Eris DB.  I expected it to work without errors as it did when compiled by solc v0.3.4.

```
    contract SimpleStorage {
        uint storedData;

        function set(uint x) {
            storedData = x;
        }

        function get() constant returns (uint retVal) {
            return storedData;
        }
    }
```

- [ ] what actually happened

```
Eris DB error:  Call of method ""transactAndHold"" with parameters {
  ""priv_key"": ""509C23F3C62CEC80BC65A3469995DE99725693E4844821E5D92030CA49E636080C042A82013C0331EBA235662B5B4A4A1A0D5FA2F33AB01D60EC44715800FC10"",
  ""address"": """",
  ""data"": ""60606040523415600b57fe5b5b60978061001a6000396000f300606060405263ffffffff60e060020a60003504166360fe47b18114602a5780636d4ce63c14603c575bfe5b3415603157fe5b603a600435605b565b005b3415604357fe5b60496064565b60408051918252519081900360200190f35b60008190555b50565b6000545b905600a165627a7a723058208e53003e967e78825a72cb55d6cd874952e373b8bb1e12bfed10820197680eaa0029"",
  ""gas_limit"": 1000000,
  ""fee"": 0
} responded with ""Error when transacting: Invalid opcode 4D697373696E67206F70636F64652030786665"".
```

- [ ] steps to reproduction

Check out https://github.com/eris-ltd/eris-contracts.js/tree/eris-db-%23526, run `npm install`, and `TEST=record mocha test/HTTP`.
",closed,False,2017-03-13 19:05:17,2018-05-30 10:16:47
burrow,zramsay,https://github.com/hyperledger/burrow/pull/525,https://api.github.com/repos/hyperledger/burrow/issues/525,strings.ToUpper(the-license-filename-prefix),"- the GitHub feature that displays the license type in repo header seems to require `LICENSE.md` and not `license.md` & it's also the default for a license filename; there's no reason to deviate.

cli (has it): 
![screenshot from 2017-03-03 21-32-02](https://cloud.githubusercontent.com/assets/8304391/23575369/dc22b32a-0058-11e7-8890-0ea9f533248f.png)

edb (doesn't have it): 
![screenshot from 2017-03-03 21-32-30](https://cloud.githubusercontent.com/assets/8304391/23575376/ebcc93ae-0058-11e7-899f-fbe8b2f61736.png)


",closed,True,2017-03-04 02:33:15,2017-03-16 11:13:14
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/524,https://api.github.com/repos/hyperledger/burrow/issues/524,Circle docker deploy failure for build from tag,"see reference : https://circleci.com/gh/eris-ltd/eris-db/1139?utm_campaign=build-failed&utm_medium=email&utm_source=notification

`./tests/build_tool.sh` does not cover a build from tag on circleCI",closed,False,2017-03-01 16:56:54,2018-02-26 13:51:54
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/523,https://api.github.com/repos/hyperledger/burrow/issues/523,Implement private validator in consensus,,closed,False,2017-03-01 15:03:47,2018-02-26 13:56:23
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/522,https://api.github.com/repos/hyperledger/burrow/issues/522,Implement remote signing for Tendermint validator,"NOTE: This is a progress tracking epic; new issues will be added as work continues.

Work proposal:
- [ ] https://github.com/eris-ltd/eris-db/issues/523 implement a private validator in `eris-db/consensus` that signs locally (ie not a remote signer yet):
  - provide the basis for a fall-back mechanism; 
  - move signing from tendermint into eris-db
- [ ] provide `eris-db/crypto`
- [ ] [...]
- [ ] provide benchmarking for tendermint local signing; eris-db local signing and remote signing",closed,False,2017-03-01 15:02:22,2018-02-26 13:56:35
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/521,https://api.github.com/repos/hyperledger/burrow/issues/521,Start develop on v0.17,,closed,True,2017-02-28 16:54:36,2017-02-28 17:50:18
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/520,https://api.github.com/repos/hyperledger/burrow/issues/520,Test for json_rpc_server BroadcastTx and refactor,"I was putting this together but unaware of: https://github.com/eris-ltd/eris-db/pull/516

Luckily although the changes did conflict they are kind of complementary. I've avoided extending the `Codec` interface to get the same effect. I've also move things around to more closely our naming elsewhere, or just name things as what they actually are.

mock_pipe is now used by the `json_server_test`",closed,True,2017-02-28 15:30:54,2017-03-15 14:19:43
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/519,https://api.github.com/repos/hyperledger/burrow/issues/519,Release eris-db v0.16.0,"Release eris-db v016.0:
Highlighted features and improvements :
- [pull-510](https://github.com/eris-ltd/eris-db/pull/510) upgrade consensus engine to Tendermint v0.8.0
- [pull-507](https://github.com/eris-ltd/eris-db/pull/507) use sha3 for snative addresses for future-proofing
- [pull-506](https://github.com/eris-ltd/eris-db/pull/506) alignment and consolidation for genesis and config between tooling and chains
- [pull-504](https://github.com/eris-ltd/eris-db/pull/504) relicense eris-db to Apache 2.0
- [pull-500](https://github.com/eris-ltd/eris-db/pull/500) introduce more strongly types secure native contracts
- full rework of the logging system to support different sinks, including syslog and graylog

Highlighted bugfixes: 
- [pull-453](https://github.com/eris-ltd/eris-db/pull/453) Fix deserialisation for BroadcastTx on rpc/v0
- [pull-465](https://github.com/eris-ltd/eris-db/pull/465) fix divergence from JSON-RPC spec for Response object",closed,True,2017-02-28 04:01:17,2017-02-28 16:58:35
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/518,https://api.github.com/repos/hyperledger/burrow/issues/518,Resolve merge conflicts with master on release-0.16,apologies for the triple white lines in the merge commit,closed,True,2017-02-28 03:54:04,2017-02-28 16:11:53
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/517,https://api.github.com/repos/hyperledger/burrow/issues/517,Changelog and Readme update for release v0.16.0,,closed,True,2017-02-28 03:42:08,2017-02-28 16:06:05
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/516,https://api.github.com/repos/hyperledger/burrow/issues/516,Fix for deserialisation of BroadcastTx which was missing a type byte.,"closes #453;
closes #511: it is necessary to explicitly use go-wire `DecodeBytesPtr`

- This should restore the `param` field to take a type byte for the Transaction type on a call to `erisdb.broadcastTx` on rpc/v0 as on v0.11; which lapsed in v0.12.
- Added minimal test to assert correct type recovery.
- move the test code that exist for rpc/v0 into `/eris-db/rpc/v0`; it was from lingering in `/test/...` from olden days.",closed,True,2017-02-27 18:00:45,2017-02-27 19:46:26
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/515,https://api.github.com/repos/hyperledger/burrow/issues/515,Review PR,This PR will collect the commits that I push directly to `release-0.16` branch to enable post-fact review as @silasdavis is on flight (and US sleeps),closed,True,2017-02-27 10:36:23,2017-02-27 10:36:52
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/514,https://api.github.com/repos/hyperledger/burrow/issues/514,Add Vagrant configuration.,,closed,False,2017-02-27 05:15:46,2018-02-26 13:57:33
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/513,https://api.github.com/repos/hyperledger/burrow/issues/513,fixes genesis so that tendermint consensus module lines up correctly,"This is a small oversight that causes Eris CLI to fail in working with chains with current docker images. 

Signed-off-by: RJ Catalano <rj@monax.io>",closed,True,2017-02-26 21:22:42,2017-02-26 21:40:08
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/512,https://api.github.com/repos/hyperledger/burrow/issues/512,[feature] automated timer transaction,This one is a simple snative to implement i would think. Setting a timer for a transaction to be executed with a signature. Someone tell me what im missing in making this a reality? ,closed,False,2017-02-25 13:38:03,2017-02-25 13:51:26
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/511,https://api.github.com/repos/hyperledger/burrow/issues/511,Change BroadcastTx to use tx.Tx,"This should provide the same effect as: https://github.com/eris-ltd/eris-db/pull/453

The addition of the `DecodeBytesPtr` was unnecessary since go-wire will do the delegate to the correct function anyway.

To respond to @ratranqu, who said (in the PR linked above):

>It's a bit more than just a change from always assuming a CallTx to handling any types of Tx. The json representation of the asummed CallTx is also not consistent with how it's expected in the wire protocol (see txs/tx.go file, where the concrete type is defined for the wire protocol).

The reason this change should correct the expected formatting (even for a `CallTx`) is because the type byte is part of the default serialisation when we are decoding into a registered interface (as we are now with `tx.Tx`) but is not when decoding into a specific struct (as we were before with `&tx.CallTx`). 

I note that the `JsonRpcServer` methods are untested, and have always been. Still it feels a bit unpleasant to include this without a test. It should be possible to use `./test/mock` to put something together so I mark this as don't merge. (Incidentally `mock_web_api_test.go` really ought to be `rpc/v0/restServer_test.go`)...",closed,True,2017-02-25 00:04:46,2017-02-27 19:50:07
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/510,https://api.github.com/repos/hyperledger/burrow/issues/510,Upgrade Tendermint to 0.8.0,"Mostly @silasdavis work, so Ill review and merge",closed,True,2017-02-24 17:59:32,2017-02-24 18:20:31
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/509,https://api.github.com/repos/hyperledger/burrow/issues/509,rpc/tendermint: fix TestBlockchainInfo,rpc/tendermint: fix TestBlockchainInfo as block metadata has restructured on tendermint 0.8,closed,True,2017-02-24 17:31:14,2017-02-24 17:55:05
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/508,https://api.github.com/repos/hyperledger/burrow/issues/508,Fix up consensus/tendermint config to match tendermint 0.8.0 ,"This allows the node to run. I think most rpc_client_tests are passing too, with the exception of the blockchain hash test.",closed,True,2017-02-23 23:12:45,2017-04-10 11:27:12
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/507,https://api.github.com/repos/hyperledger/burrow/issues/507,Use sha3 has for snative addresses for future-proofing,,closed,True,2017-02-23 16:11:30,2017-04-10 22:13:21
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/506,https://api.github.com/repos/hyperledger/burrow/issues/506,Release-0.16 alignment corrections into develop,,closed,True,2017-02-23 12:59:33,2017-02-23 16:24:02
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/505,https://api.github.com/repos/hyperledger/burrow/issues/505,added a quick fix for unmarshalling types problem in CLI,"

Signed-off-by: RJ Catalano <rj@monax.io>",closed,True,2017-02-23 01:08:31,2017-02-23 01:17:53
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/504,https://api.github.com/repos/hyperledger/burrow/issues/504,License eris-db to Apache2.0 for eris-db v0.16,Update the `license.md` and the license headers in the source code.,closed,True,2017-02-22 16:24:40,2017-02-22 17:02:22
burrow,emanuelpalm,https://github.com/hyperledger/burrow/issues/503,https://api.github.com/repos/hyperledger/burrow/issues/503,`glide install` seems to require private repository to be downloaded.,"```sh
$ glide install
[WARN]	Lock file may be out of date. Hash check of YAML failed. You may need to run 'update'
[INFO]	Downloading dependencies. Please wait...
[INFO]	--> Found desired version locally github.com/Azure/go-ansiterm 388960b655244e76e24c75f48631564eaefade62!
[INFO]	--> Found desired version locally github.com/btcsuite/btcd 7de7bddba9d9a8b0b7490931e346e8f10d0bdb7f!

...

[INFO]	--> Found desired version locally gopkg.in/tylerb/graceful.v1 ecde8c8f16df93a994dda8936c8f60f0c26c28ab!
[INFO]	--> Found desired version locally gopkg.in/yaml.v2 a83829b6f1293c91addabc89d0571c246397bbf4!
[INFO]	--> Fetching github.com/eris-ltd/common
[INFO]	--> Fetching github.com/eris-ltd/eris-logger
Username for 'https://github.com': Username for 'https://github.com':
```

The packages `github.com/eris-ltd/common` and `github.com/eris-ltd/eris-logger` are not listed among your public repositories, so I suspect you haven't made them public.",closed,False,2017-02-22 13:29:52,2017-02-23 13:40:43
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/502,https://api.github.com/repos/hyperledger/burrow/issues/502,Hacked away until buildable and runnable with Tendermint 0.8.0,"This gets feature-tendermint_0.8.0 to a state where:

- Tendermint and its transitive dependencies are upgraded 0.8.0
- All reference to tmsp have been converted to abci references
- Our partial support for out-of-process tmsp has been removed (we can add back in the abci server stuff if we want)
- EventSwitch has been changed to an interface throughout
- A Tendermint node can start but fails on making the `cs_wal_dir`

feature-tendermint_0.8.0 is a WIP branch with failing tests. So this is potentially mergeable despite failing tests. We may be able to find a way to divide work at this point, or it may be easier for me to try and get a bit further.


",closed,True,2017-02-21 03:42:07,2017-02-23 18:23:37
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/501,https://api.github.com/repos/hyperledger/burrow/issues/501,Release 0.16 - alignment with consolidated tooling wrt chain making,"After consolidation of eris-cm and eris-pm into eris tooling; some technical debt had to be resolved.  This PR is necessary for this re-alignment in eris https://github.com/eris-ltd/eris/pull/1235 to complete.

checklist:
- [x] clean up eris-db dependencies of `permissions`; merged in #499 
- [x] permissions utility to convert map[string]int into permissions type
- [x] genesis: define constructors for Genesis types to contain explicit dependency on tendermint/go-crypto into tooling; enabling us to inject our own crypto package without coordination with tooling.
- [x] genesis: introduce GenesisPrivateValidtor as an intermediary step to removing priv_validator logic from the stack
- [x] genesis: provide `genesis.GenerateGenesisFileBytes(chainName, []*GenesisAccount, []*GenesisValidator)` for tooling
- [x] final review",closed,True,2017-02-19 23:52:51,2017-02-27 20:15:05
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/500,https://api.github.com/repos/hyperledger/burrow/issues/500,Introduce more strongly typed SNatives and contract templates,"This PR aims to address the issue of having many versions of the permissions contract in different places. Since eris-db is responsible for interpreting SNative calls it seems sensible that eris-db holds the defintion for SNatives. This PR:

- Introduces a more strongly typed (the functions themselves are still not strongly typed) SNative and contract definition
- Allows you to generate a permissions contract with comments that compiles and can be exported to other projects like smart contract bundles
- Adds a test for the permissions contract

It doesn't change the fundamentals of how SNatives work.

The permissions contract structure is built from the libraries' team's version: https://github.com/eris-ltd/eris-contract-bundles/blob/master/src/commons-auth/contracts/SecureNativeAuthorizations.sol which Jason linked me too which is nicely commented.

Outstanding for this is:
- [x] Finalise what types we are going to use for the permissions function
- [x] Possibly take opportunity to change the naming conventions as in https://github.com/eris-ltd/eris-db/issues/417
- [x] Add a couple more unit tests

Once that is done then we can mechanical generate the solidity interface that we are advertising to clients and we can do this for any future SNatives (which is why I thought it was worth doing). By running:

```go
vm.SNativeContracts()[""permissions_contract""].Solidity()
```

Also note that the current version of snative.go on release-0.16 is missing a bracket in the signature.

fixes #498 
fixes #418 
fixes #417 ",closed,True,2017-02-17 01:27:48,2017-02-22 12:59:20
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/499,https://api.github.com/repos/hyperledger/burrow/issues/499,Cleanup: introduce word256 and remove dependency on tendermint/go-common,"While working on release-0.16, to have the eris-db definitions for Permissions to be a clean import into eris tooling, I removed the lingering dependency on `tendermint/go-common`; this saw me forced to pull this new type through the EVM and state as well; and finally there was then no need to preserve `tendermint/go-common` for sanity checks and random numbers for tests.

- introduces `eris-db/word256` for bytes32 and padding and conversion functions
- introduces `eris-db/common/sanity` for wrapping `PanicSanity` and `PanicCrisis`
- introduces `eris-db/common/random` for wrapping around `rand` and `crypto/rand`

- changes imports across `eris-db/manager` and `eris-db/permissions` ",closed,True,2017-02-15 20:01:22,2017-02-16 22:26:09
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/498,https://api.github.com/repos/hyperledger/burrow/issues/498,[SNatives] Document permissions SNatives,"Add documentation in snative.go.

This will inform the integration-level tests that @VoR0220 will write for: https://github.com/eris-ltd/eris/issues/1227. Once this is done, give that ticket a bump.",closed,False,2017-02-15 16:47:28,2018-08-16 13:12:18
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/497,https://api.github.com/repos/hyperledger/burrow/issues/497,[SNatives] Unit test permissions snative contracts,From PR: https://github.com/eris-ltd/eris-db/pull/480 we have auto-generated permission snative function ids. Would be nice to introduce some EVM level tests to check we can successfully run these functions.,open,False,2017-02-15 16:44:50,2018-05-30 10:42:24
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/496,https://api.github.com/repos/hyperledger/burrow/issues/496,[SNatives] SNative contract improvements,"Epic for improvements SNative contracts and particularly to permissions native contracts. 

Improvements to be made in terms of minor functionality, naming, testing, and documentation.",closed,False,2017-02-15 16:43:43,2017-05-24 21:26:31
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/495,https://api.github.com/repos/hyperledger/burrow/issues/495,permissions,,closed,False,2017-02-15 16:41:56,2017-02-15 16:42:09
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/494,https://api.github.com/repos/hyperledger/burrow/issues/494,Issue434: cleanup comments with respect to internal time,"Improve comments with respect to impending work for internal time on v0.16
continues #434 
",closed,True,2017-02-11 22:30:19,2017-02-20 00:22:54
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/493,https://api.github.com/repos/hyperledger/burrow/issues/493,genesis: re-introduce GenesisTime in GenesisDoc,"continues #434 

- start the introduction of `GenesisTime` into the `GenesisDoc`",closed,True,2017-02-11 19:51:56,2017-02-20 00:22:55
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/492,https://api.github.com/repos/hyperledger/burrow/issues/492,circle: deploy version tagged image from develop,,closed,True,2017-02-11 15:41:49,2017-02-12 00:05:38
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/491,https://api.github.com/repos/hyperledger/burrow/issues/491,tests: add forced cleanup of :build tag,,closed,True,2017-02-10 19:26:43,2017-02-10 19:28:20
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/490,https://api.github.com/repos/hyperledger/burrow/issues/490,tests: add forced cleanup of :build tag,,closed,True,2017-02-10 19:20:17,2017-02-10 19:27:58
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/489,https://api.github.com/repos/hyperledger/burrow/issues/489,[Logging] Supporting logging presets (pre-configured sinks),"Need to be able to quickly configure common cases for logging output. Trim excess metadata, possibly re-order keys. Presets might need to be composable. We can define presets in code using the fluent interface, but then also need to be able to dump them to config to be used as templates for more complex custom logging requirements.",closed,False,2017-02-10 16:08:01,2018-03-14 12:31:04
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/488,https://api.github.com/repos/hyperledger/burrow/issues/488,[Logging] Add flush logger that dumps capture buffer on an error,,closed,False,2017-02-10 16:07:22,2018-05-01 15:20:18
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/487,https://api.github.com/repos/hyperledger/burrow/issues/487,[Logging] Replace EVM `var Debug` logs with a call to `logger.Trace` and tag them as EVM logs,,closed,False,2017-02-10 16:07:01,2018-05-01 14:09:19
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/486,https://api.github.com/repos/hyperledger/burrow/issues/486,carry over hotfix: correct deployment from master and release,"circle: deploy artefacts from release and docs from master

master branch : push docker image with `:latest` + update documentation for `/latest`
release branch : push docker image with _mutable_ `v0.16.x` + update documentation
develop: don't push docker artefact or update documentation

for tagged commits of the form `v0.16.x` (or generalisations):
  push docker image with _immutable_ version tag + update documentation",closed,True,2017-02-10 14:05:51,2017-02-10 18:46:46
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/485,https://api.github.com/repos/hyperledger/burrow/issues/485,hotfix: correct deployment from master and release,"circle: deploy artefacts from release and docs from master

master branch : push docker image with `:latest` + update documentation for `/latest`
release branch : push docker image with _mutable_ `v0.16.x` + update documentation
develop: don't push docker artefact or update documentation

for tagged commits of the form `v0.16.x` (or generalisations):
  push docker image with _immutable_ version tag + update documentation",closed,True,2017-02-10 14:02:15,2017-02-10 18:46:25
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/484,https://api.github.com/repos/hyperledger/burrow/issues/484,Logging config and outputs,"Some refinement still on-going and writing some additional tests, but putting out for review now.

I need to tweak default configs for client and server and then verify a few things around capture.

Possibly we should provide some default verbosity filters for finer grain control than info and trace, but the LoggingConfig mechanism is pretty general.",closed,True,2017-02-09 14:02:35,2017-04-13 20:06:41
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/483,https://api.github.com/repos/hyperledger/burrow/issues/483,[SNatives] CREATE allows for creation on reserved SNative addresses,"`CREATE` does not return an error if a contract is created at a reserved native address:
 https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/evm/vm.go#L763

For the `Permissions.sol` it is my understanding that the interface `contract Permissions` is not deployed;
and no contract is `CREATE`d on the native contracts addresses. [permissions.sol](https://github.com/eris-ltd/eris/blob/develop/tests/jobs_fixtures/app33-evm_connection_edb_permissions_and_roles_layer/permissions.sol#L1)

It is better then to ensure that an early error is returned on `CREATE` if accidentally a contract would be deployed on reserved native address; https://github.com/eris-ltd/eris-db/blob/master/txs/tx.go#L226",closed,False,2017-02-09 12:27:15,2018-08-16 13:12:25
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/482,https://api.github.com/repos/hyperledger/burrow/issues/482,[SNatives] Create a multisig SNative for payments based on a quorom,"Does the title say enough? Does it? I don't have specifications in mind, I just know that multisig is in heavy demand and making that come to life would provide vast utility, particularly through an snative framework. ",closed,False,2017-02-09 00:55:19,2018-04-11 21:20:41
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/481,https://api.github.com/repos/hyperledger/burrow/issues/481,[EVM] Make SHA3/Keccak256 a precompiled contract,Should help with the performance of the VM. ,closed,False,2017-02-08 21:19:08,2017-02-08 21:21:18
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/480,https://api.github.com/repos/hyperledger/burrow/issues/480,Function signatures automated and fix set global,Solves set_global portion and uint consistency on #417 . Also automates function identifier generation for a signature. ,closed,True,2017-02-08 19:04:20,2017-02-16 14:25:05
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/479,https://api.github.com/repos/hyperledger/burrow/issues/479,updating develop with intermediate fixes from release-0.16,,closed,True,2017-02-08 18:15:10,2017-02-11 15:36:35
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/478,https://api.github.com/repos/hyperledger/burrow/issues/478,fix snake case into camel case for permissions,"This is attempting to solve https://github.com/eris-ltd/eris-db/issues/417 but there are some breaking changes that come with it, and thus might be desirable to hold off on this. This can be updated and put into another branch. But this is the work to get it done. Let me know what you want to do with it. Feel free to copy. 

Signed-off-by: RJ Catalano <rj@monax.io>",closed,True,2017-02-08 04:27:04,2017-02-08 15:45:31
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/477,https://api.github.com/repos/hyperledger/burrow/issues/477,Wip attempted fix at jump i,contains some bits from #476 but is attempting to solve the problem in #474 ... no more invalid jump dests but am not getting any output. Would love some insight and a fresh pair of eyes @silasdavis / @benjaminbollen . ,closed,True,2017-02-08 04:23:22,2017-04-20 23:09:31
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/476,https://api.github.com/repos/hyperledger/burrow/issues/476,issue-476: return One256 for EXTCODESIZE on native contracts,"Fixes problem with not being able to get at the Snative contract. 

Signed-off-by: RJ Catalano <rj@monax.io>",closed,True,2017-02-08 04:20:45,2017-02-08 17:48:34
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/475,https://api.github.com/repos/hyperledger/burrow/issues/475,Add qualifiers to all imports in some form or another,"It's incredibly confusing reading through the code and not being able to determine where a variable is being imported from (usually from the Tendermint side of things). It helps very much with clarifying where to find definitions of the code and I think there should be efforts in one form or another to add them in. Furthermore, it helps with open source contributors to know wtf they are doing as well. If there are equally named packages, by all means, throw a well named alias in there. But please get all `.` imports out of the code. 

tl;dr No more `.` aliasing of imports. ",closed,False,2017-02-05 05:05:27,2017-02-05 22:40:17
burrow,j-h-scheufen,https://github.com/hyperledger/burrow/issues/474,https://api.github.com/repos/hyperledger/burrow/issues/474,"Valid solidity function leads to ""Invalid jump dest"" in ErisDB","The following Test contract runs fine in browser-solidity using both Solidity compiler 0.3.6 and 0.4.9 (latest). However, executing this code on ErisDB leads to an error:

```
Executing Job                                 testBytes32ToString
Encountered Exception from chain: Transaction confirmed with exception:%!(EXTRA string=Invalid jump dest)
```

```
contract Test {
       function toString (bytes32 x) constant returns (string) {
        bytes memory bytesString = new bytes(32);
        uint charCount = 0;
        for (uint j = 0; j < 32; j++) {
            byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));
            if (char != 0) {
                bytesString[charCount] = char;
                charCount++;
            }
        }
        bytes memory resultBytes = new bytes(charCount);
        for (j = 0; j < charCount; j++) {
            resultBytes[j] = bytesString[j];
        }

        return string(resultBytes);
    }
}
```

Versions:
OSX version: 10.11.6
Eris CLI Version: 0.12.0
Docker:
Client:
 Version:      1.13.0
 API version:  1.25
 Go version:   go1.7.3
 Git commit:   49bf474
 Built:        Wed Jan 18 16:20:26 2017
 OS/Arch:      darwin/amd64
Server:
 Version:      1.13.0
 API version:  1.25 (minimum version 1.12)
 Go version:   go1.7.3
 Git commit:   49bf474
 Built:        Wed Jan 18 16:20:26 2017
 OS/Arch:      linux/amd64
 Experimental: false
docker-machine version 0.9.0, build 15fd4c7",closed,False,2017-02-03 20:21:27,2018-02-26 14:02:41
burrow,npc0405,https://github.com/hyperledger/burrow/issues/473,https://api.github.com/repos/hyperledger/burrow/issues/473,Retrieving incorrect value for uint or any integer format in smart contract.,"Hi, 
When I submit/save an integer value as 11, it retrieves 17 in smart contract.
Is it a bug? It started appearing after upgrading eris version to 0.12.0

Regards,
Nikhil",closed,False,2017-02-01 11:28:16,2018-05-01 15:12:59
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/472,https://api.github.com/repos/hyperledger/burrow/issues/472,Target develop for v0.16.1,Since release-0.16 is now stabilising v0.16.0,closed,True,2017-01-31 22:08:57,2017-04-10 22:13:20
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/471,https://api.github.com/repos/hyperledger/burrow/issues/471,Target develop for v0.16.1,Since release-0.16 is now stabilising v0.16.0,closed,True,2017-01-31 22:04:15,2017-04-10 22:13:20
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/470,https://api.github.com/repos/hyperledger/burrow/issues/470,Draft changelog,,closed,True,2017-01-31 17:58:35,2017-04-10 22:13:20
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/469,https://api.github.com/repos/hyperledger/burrow/issues/469, Begin stabilising v0.16.0 on release-0.16,"Changelog [TO BE MADE BEFORE MERGING]:

[Silas] Changelog can be copied in when we finally push to master.",closed,True,2017-01-31 17:25:51,2017-01-31 22:01:03
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/468,https://api.github.com/repos/hyperledger/burrow/issues/468,Add sub_id parameter,fixes #443 ,closed,True,2017-01-31 14:16:30,2017-01-31 14:24:04
burrow,shalinigpt,https://github.com/hyperledger/burrow/issues/467,https://api.github.com/repos/hyperledger/burrow/issues/467,[EVM] Date storage conversions to and from epochdates are inconsistently stored and retrieved,"Attribute is stored in contract which contains epochdate. What I am saving as a date in an attributes is not same what is retrieve from contract to Attribute is stored in contract which contains epochdate, but when i retrieve the attribute from smart contract the date differs from what i had saved.
Let take an example i store ""15 feb 2017"" convert into epoch format in Rollingdate and while retriveing i get ""14 jan 4763"" after converting from epoch date. So the value differs what i save and what i get.",closed,False,2017-01-31 13:36:07,2018-06-26 08:50:06
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/466,https://api.github.com/repos/hyperledger/burrow/issues/466,[RPC] params member should be optional,"Currently RPCv0 (and tendermint) does not observe the JSON-RPC specification that the `params` member in a Request object may be omitted and we return an error if omitted; requiring users to specify `""params"":{}`.",closed,False,2017-01-31 11:40:19,2018-05-30 10:17:28
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/465,https://api.github.com/repos/hyperledger/burrow/issues/465,update JSON-RPC codec to observe specification,"rpc: update JSON-RPC codec to follow the specification wrt Response object;
specifically the `result` and `error` member of the Response object are mutually exclusive per http://www.jsonrpc.org/specification#response_object

fixes #464 ",closed,True,2017-01-30 16:57:46,2017-01-31 16:09:13
burrow,fabcan,https://github.com/hyperledger/burrow/issues/464,https://api.github.com/repos/hyperledger/burrow/issues/464,[RPC] JSON-RPC 2.0 Specification are not met,"I'm trying to integrate the RPC APIs with my Java project (using http://software.dzhuvinov.com/json-rpc-2.0.html), but the library I'm using continues to give me this error ""_Invalid JSON-RPC 2.0 response: You cannot have result and error at the same time_"" while calling **erisdb.getAccounts**. 
The raw response that I get from Eris is `{""result"":null,""error"":{""code"":-32602,""message"":""unexpected end of JSON input""},""id"":""0"",""jsonrpc"":""2.0""}`, but it can't be parsed.
I thought that the library I was using was too strict so I checked the JSON-RPC 2.0 specifications but it is right, there **must not** be both the _error_ and _respose_  attribute: http://www.jsonrpc.org/specification#response_object

I've managed to patch it for now with some Java Reflection trickery, but it is not the way it should work.",closed,False,2017-01-30 13:47:01,2018-05-30 10:18:41
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/463,https://api.github.com/repos/hyperledger/burrow/issues/463,Issue332 introduce makefile,,closed,True,2017-01-28 22:52:50,2017-01-30 12:02:32
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/462,https://api.github.com/repos/hyperledger/burrow/issues/462,Update version manager,pulls in #461; review afterwards,closed,True,2017-01-27 14:04:50,2017-01-31 15:33:24
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/461,https://api.github.com/repos/hyperledger/burrow/issues/461,Consolidation genesis make,,closed,True,2017-01-27 13:21:33,2017-01-27 14:17:31
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/460,https://api.github.com/repos/hyperledger/burrow/issues/460,"Include package in lock, and make sure everything installed",,closed,True,2017-01-26 22:36:49,2017-04-10 11:27:12
burrow,zramsay,https://github.com/hyperledger/burrow/pull/459,https://api.github.com/repos/hyperledger/burrow/issues/459,[genesis] add maker command & import-ability by eris-cli,"- closes #434 
- needs additional work like #440 and the time bug fix",closed,True,2017-01-26 14:24:14,2017-01-26 15:30:22
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/458,https://api.github.com/repos/hyperledger/burrow/issues/458,goimports everything,,closed,True,2017-01-26 13:30:01,2017-04-10 11:27:12
burrow,zramsay,https://github.com/hyperledger/burrow/issues/457,https://api.github.com/repos/hyperledger/burrow/issues/457,Chain stops making blocks,"@somak12 commented on [Wed Dec 14 2016](https://github.com/eris-ltd/eris-cli/issues/1138)

- [1.12.3, ] `docker version`
- [0.12.0 ] `eris version`
- [0.8.2 ] `docker-machine version`
- [linux ] operating system details 

I don't know the specific point where it is failing but when I do lots of transactions in the chain like 50 transactions say at a time, after a point chain stops creating blocks. Logs in the validator machines are as follows: 

enterPropose: Error signing proposal     module=consensus height=82511 round=0 error=""Attempt of duplicate signing of proposal: Height 82511, Round 0""

EROR[12-14|05:56:05] Error with msg                           module=consensus type=*consensus.ProposalMessage peer=CF2A1540EC2ADBE520A904FFB8723BCFF9959D6909DC8CA79D4725D4CFC8714A error=""Error invalid proposal signature"" msg=""[Proposal Proposal{82511/0 PartSet{T:1 26830F519835} -1 /5E97A61BFFB6.../}]""

WARN[12-14|05:56:11] Found conflicting vote from ourselves. Did you unsafe_reset a validator? module=consensus height=82511 round=0 type=2

Is there any specific reason for this behavior??  




---

@zramsay commented on [Wed Dec 14 2016](https://github.com/eris-ltd/eris-cli/issues/1138#issuecomment-267057185)

Hi @somak12 thanks for the bug report. We've seen similar behaviour pop up recently. Can you provide more details on how you created/started your chain? pinging @benjaminbollen for review of eris-db logs

---

@somak12 commented on [Thu Dec 15 2016](https://github.com/eris-ltd/eris-cli/issues/1138#issuecomment-267243164)

@zramsay I created chain with 1 root account + 4 participants + 3 validators. Im using docker machines(amazon driver) for the validators. As you can see things were working fine till height 82510. One thing is that after work I used to stop the chain and the eris service and restart it back when needed.    

---

@somak12 commented on [Thu Dec 15 2016](https://github.com/eris-ltd/eris-cli/issues/1138#issuecomment-267249588)

And Im uisng image = ""quay.io/eris/db:0.12.1"" for issue of chain not creating blocks due to use of curent timestamp in the contract..

---

@andytudhope commented on [Mon Jan 16 2017](https://github.com/eris-ltd/eris-cli/issues/1138#issuecomment-272775839)

I am having exactly the same issue. tried to leave a chain running over the weekend to test how big it would get and returned to find this message in the logs. Cleaning Eris and restarting the chains does nothing for me - still get `Found conflicting vote from ourselves. Did you unsafe_reset a validator?` in the logs.

[1.12.5 ] `docker version`
[0.12.0] `eris version`
[Mac El Capitan] `OS`

---

@marc4gov commented on [Mon Jan 16 2017](https://github.com/eris-ltd/eris-cli/issues/1138#issuecomment-272936772)

Look like I have something similar. I start 4 validators, that's ok. Then I start the root machine, looks like the chain is running (Height is increasing) but actually not making blocks. Logs shows messages like these:

```
INFO[01-16|14:37:12] SetHasVote(round-match)                  module=consensus peer=""Peer{MConn{188.166.68.71:46656} 0D9C8539DCCD out}"" peerRound=0 height=60 round=0 precommits=nil-BitArray index=0
INFO[01-16|14:37:12] Receive                                  module=consensus src=""Peer{MConn{188.166.68.71:46656} 0D9C8539DCCD out}"" chId=20 msg=""[HasVote VI:2 V:{60/00/2} VI:2]""
INFO[01-16|14:37:12] SetHasVote(round-match)                  module=consensus peer=""Peer{MConn{188.166.68.71:46656} 0D9C8539DCCD out}"" peerRound=0 height=60 round=0 precommits=nil-BitArray index=2
INFO[01-16|14:37:12] Receive                                  module=consensus src=""Peer{MConn{188.166.68.71:46656} 0D9C8539DCCD out}"" chId=20 msg=""[NewRoundStep H:60 R:0 S:RoundStepPrecommitWait LCR:0]""
INFO[01-16|14:37:12] Receive                                  module=consensus src=""Peer{MConn{188.166.68.71:46656} 0D9C8539DCCD out}"" chId=20 msg=""[HasVote VI:3 V:{60/00/2} VI:3]""
INFO[01-16|14:37:12] SetHasVote(round-match)                  module=consensus peer=""Peer{MConn{188.166.68.71:46656} 0D9C8539DCCD out}"" peerRound=0 height=60 round=0 precommits=nil-BitArray index=3
INFO[01-16|14:37:12] Receive                                  module=consensus src=""Peer{MConn{188.166.68.71:46656} 0D9C8539DCCD out}"" chId=20 msg=""[NewRoundStep H:60 R:0 S:RoundStepCommit LCR:0]""
INFO[01-16|14:37:12] Receive                                  module=consensus src=""Peer{MConn{188.166.68.71:46656} 0D9C8539DCCD out}"" chId=20 msg=""[CommitStep H:60 BP:PartSet{T:1 9D7FFA8570E2} BA:BA{1:X}]""
INFO[01-16|14:37:12] Receive                                  module=consensus src=""Peer{MConn{188.166.68.71:46656} 0D9C8539DCCD out}"" chId=20 msg=""[NewRoundStep H:61 R:0 S:RoundStepNewHeight LCR:0]""
```

after several restarts, the chain is finally catching up (with WARN signals, but that's because it has to sync I guess), but looks unstable. Deploying contracts is going OK, but later on, the chain stops and I get the same message as Andy and somak12 are getting. At that point I just can't manage the chain getting up again for the root machine.

The validators seem Ok though. This is my setup:

```
#!/usr/bin/env bash
echo ""Running HerenBouwChain environment setup...""
chainName=herenbouwchain

for i in `seq 0 3`
do
  eris chains rm -xf $chainName --machine ""do-val$i""
  eris chains start --init-dir ""${chainName}""/""${chainName}_validator_00$i"" --machine ""do-val$i"" $chainName
  echo ""Wait for do-val$i to start $chainName..""
done

eris chains rm -xf $chainName --machine do-prod0
eris chains start --init-dir ""${chainName}""/""${chainName}_root_000"" --machine do-prod0 $chainName
echo ""Wait for do-prod0 to start $chainName..""
```

---

@marc4gov commented on [Sun Jan 22 2017](https://github.com/eris-ltd/eris-cli/issues/1138#issuecomment-274106633)

Bummer: I managed to get the chain going on do-prod0, but now it chokes on deploying contracts.
Log output: 

```
INFO[01-20|15:52:55] Receive                                  module=consensus src=""Peer{MConn{188.166.67.157:46656} 4EDF0E802BF1 out}"" chId=22 msg=""[Vote VI:3 V:Vote{121/00/1(Prevote) 5C0CBA203EEA#PartSet{T:1 AAC9ED6FC64B} /97044898A9F8.../} VI:3]""
INFO[01-20|15:52:55] SetHasVote(round-match)                  module=consensus peer=""Peer{MConn{188.166.67.157:46656} 4EDF0E802BF1 out}"" peerRound=0 height=121 round=0 prevotes=BA{4:XX_X} index=3
INFO[01-20|15:52:55] Added to prevote                         module=consensus vote=""Vote{121/00/1(Prevote) 5C0CBA203EEA#PartSet{T:1 AAC9ED6FC64B} /97044898A9F8.../}"" prevotes=""VoteSet{H:121 R:0 T:1 +2/3:true BA{4:XX_X}}""
INFO[01-20|15:52:55] enterPrecommit(121/0). Current: 121/0/RoundStepPrevote module=consensus
NOTE[01-20|15:52:55] enterPrecommit: +2/3 prevoted proposal block. Locking module=consensus hash=5C0CBA203EEA74D42047BD14081FC1F8CFC9570B
panic: Paniced on a Consensus Failure: enterPrecommit: +2/3 prevoted for an invalid block: Wrong Block.Header.AppHash.  Expected B9E9A513B59FC0FF44D3E3C35F489EA55C460661, got 6425B68E61D99AA5E483219DAA1EE837F250400C

goroutine 33 [running]:
panic(0x55603e88dcc0, 0xc421cd8090)
	/usr/lib/go/src/runtime/panic.go:500 +0x1a5
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-common.PanicConsensus(0x55603e88dcc0, 0xc421cd8070)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-common/errors.go:39 +0xe2
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).enterPrecommit(0xc42011c480, 0x79, 0x0)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:1070 +0x14f7
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).addVote(0xc42011c480, 0x3, 0xc421cc17a0, 0xc420185080, 0x40, 0xc422347a00, 0x0, 0x0, 0xc422347a80, 0x55603dcffc47, ...)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:1440 +0x113a
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).tryAddVote(0xc42011c480, 0x3, 0xc421cc17a0, 0xc420185080, 0x40, 0x0, 0x0)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:1358 +0x76
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).handleMsg(0xc42011c480, 0x55603e8b9620, 0xc421ccc8b0, 0xc420185080, 0x40, 0x79, 0x0, 0x4, 0xed0142956, 0x394e61d0, ...)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:668 +0x66d
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).receiveRoutine(0xc42011c480, 0x0)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:614 +0x2c9
created by github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).startRoutines
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:320 +0x6d
```

When deploying, logs freeze for a while on do-prod0 (1 minute or so). Then, I manage to get thru, but I'm worrying about a recurring line in the logs...but maybe this is normal?

```
INFO[01-20|16:00:01] HTTPRestRPC                              module=rpcserver method=/status args=[] returns=""[<types.ErisDBResult Value> <error Value>]""
INFO[01-20|16:00:01] Served RPC HTTP response                 module=rpcserver method=GET url=/status status=200 duration=1 remoteAddr=94.208.78.41:55632
```

Instead of 6 minutes, the job now takes 14 minutes to run ... 

```
....
Executing Job                                 addTaskOrder91
Return Value                                  00238EE9E9DDA88FA260E97A1476F93099D38204
Executing Job                                 addTaskOrder92
Return Value                                  225A803DE8E0E3F617E1ED3A9D88CA02E04515B1
Executing Job                                 addOrderInvoice22
Return Value                                  1
Executing Job                                 addOrderInvoice23
Return Value                                  2
copy jobs_output epm6..
17:13:26
14 minutes and 5 seconds elapsed.
writing contract addresses to jobs_output.json..
```

So, chain finally running, then trying to transact brings the chain down on do-prod0. I can't manage to get the chain restarted, logs show this:

```
INFO[01-22|08:09:00] Server started.                          module=eris/server
WARN[01-22|08:09:00] WARNING (go-rpc): Please use fully formed listening addresses, including the tcp:// or unix:// prefix module=rpcserver
NOTE[01-22|08:09:00] Starting RPC HTTP server on tcp socket 0.0.0.0:46657 module=rpcserver
EROR[01-22|08:09:00] Error with msg                           module=consensus type=*consensus.ProposalMessage peer=456BAC68E6D9229CD8B3273ABA2BED73604664B218E71F9257C215CA39273E83 error=""Error invalid proposal signature"" msg=""[Proposal Proposal{84644/0 PartSet{T:1 FE74CCF06D44} -1 /E0F519995EE2.../}]""
INFO[01-22|08:09:00] Dialing address                          module=p2p address=188.166.70.19:46656
NOTE[01-22|08:09:00] Peer handshake                           module=p2p peerNodeInfo=""&{PubKey:PubKeyEd25519{0E547B8459E4E2ABA0FE7CCD51C6A02FEFF42D2719609FE04D5E6D88A8E62BBC} Moniker:herenbouwchain_validator_002 Network:herenbouwchain RemoteAddr: ListenAddr:172.17.0.5:46656 Version:0.6.0 Other:[wire_version=0.6.0 p2p_version=0.3.3 consensus_version=v1/0.2.1 rpc_version=0.5.1/3 rpc_addr=]}""
INFO[01-22|08:09:00] Starting Peer                            module=p2p impl=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}""
INFO[01-22|08:09:00] Starting MConnection                     module=p2p impl=MConn{188.166.70.19:46656}
NOTE[01-22|08:09:00] Added peer                               module=p2p peer=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}""
NOTE[01-22|08:09:00] Dialed and added peer                    module=p2p address=188.166.70.19:46656 peer=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}""
NOTE[01-22|08:09:00] Connected to seed                        module=p2p peer=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}""
INFO[01-22|08:09:00] No votes to send, sleeping               module=consensus peer=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" peer=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" localPV=BA{4:____} peerPV=nil-BitArray localPC=BA{4:____} peerPC=nil-BitArray
NOTE[01-22|08:09:00] Receive                                  module=blockchain src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chID=40 msg=""[bcStatusResponseMessage 84774]""
INFO[01-22|08:09:00] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=20 msg=""[NewRoundStep H:84775 R:0 S:RoundStepPrevote LCR:0]""
INFO[01-22|08:09:00] HTTPRestRPC                              module=rpcserver method=/status args=[] returns=""[<types.ErisDBResult Value> <error Value>]""
INFO[01-22|08:09:00] Served RPC HTTP response                 module=rpcserver method=GET url=/status status=200 duration=1 remoteAddr=94.208.78.41:58142
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=20 msg=""[HasVote VI:1 V:{84775/00/2} VI:1]""
INFO[01-22|08:09:01] SetHasVote(round-match)                  module=consensus peer=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" peerRound=0 height=84775 round=0 precommits=nil-BitArray index=1
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=20 msg=""[HasVote VI:0 V:{84775/00/1} VI:0]""
INFO[01-22|08:09:01] SetHasVote(round-match)                  module=consensus peer=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" peerRound=0 height=84775 round=0 prevotes=nil-BitArray index=0
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=20 msg=""[NewRoundStep H:84775 R:0 S:RoundStepPrecommit LCR:0]""
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=20 msg=""[HasVote VI:0 V:{84775/00/2} VI:0]""
INFO[01-22|08:09:01] SetHasVote(round-match)                  module=consensus peer=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" peerRound=0 height=84775 round=0 precommits=nil-BitArray index=0
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=22 msg=""[Vote VI:3 V:Vote{84644/00/2(Precommit) 433D2AEB8F91#PartSet{T:1 FE74CCF06D44} /56F4C254359C.../} VI:3]""
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=22 msg=""[Vote VI:2 V:Vote{84644/00/2(Precommit) 433D2AEB8F91#PartSet{T:1 FE74CCF06D44} /80FA21F75BE9.../} VI:2]""
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=22 msg=""[Vote VI:0 V:Vote{84644/00/2(Precommit) 433D2AEB8F91#PartSet{T:1 FE74CCF06D44} /6758900178A5.../} VI:0]""
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=22 msg=""[Vote VI:1 V:Vote{84644/00/2(Precommit) 433D2AEB8F91#PartSet{T:1 FE74CCF06D44} /E3E0E4916522.../} VI:1]""
INFO[01-22|08:09:01] Added to precommit                       module=consensus vote=""Vote{84644/00/2(Precommit) 433D2AEB8F91#PartSet{T:1 FE74CCF06D44} /56F4C254359C.../}"" precommits=""VoteSet{H:84644 R:0 T:2 +2/3:false BA{4:___X}}""
INFO[01-22|08:09:01] Added to precommit                       module=consensus vote=""Vote{84644/00/2(Precommit) 433D2AEB8F91#PartSet{T:1 FE74CCF06D44} /80FA21F75BE9.../}"" precommits=""VoteSet{H:84644 R:0 T:2 +2/3:false BA{4:__XX}}""
INFO[01-22|08:09:01] Added to precommit                       module=consensus vote=""Vote{84644/00/2(Precommit) 433D2AEB8F91#PartSet{T:1 FE74CCF06D44} /6758900178A5.../}"" precommits=""VoteSet{H:84644 R:0 T:2 +2/3:true BA{4:X_XX}}""
INFO[01-22|08:09:01] enterPrecommit(84644/0). Current: 84644/0/RoundStepPropose module=consensus
INFO[01-22|08:09:01] enterPrecommit: No +2/3 prevotes during enterPrecommit. Precommitting nil. module=consensus
INFO[01-22|08:09:01] enterCommit(84644/0). Current: 84644/0/RoundStepPrecommit module=consensus
WARN[01-22|08:09:01] Attempt to finalize failed. We don't have the commit block. module=consensus
INFO[01-22|08:09:01] Added to precommit                       module=consensus vote=""Vote{84644/00/2(Precommit) 433D2AEB8F91#PartSet{T:1 FE74CCF06D44} /E3E0E4916522.../}"" precommits=""VoteSet{H:84644 R:0 T:2 +2/3:true BA{4:XXXX}}""
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=20 msg=""[CommitStep H:84775 BP:PartSet{T:1 A07AD423E72D} BA:BA{1:X}]""
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=20 msg=""[HasVote VI:3 V:{84775/00/2} VI:3]""
INFO[01-22|08:09:01] SetHasVote(round-match)                  module=consensus peer=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" peerRound=0 height=84775 round=0 precommits=nil-BitArray index=3
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=20 msg=""[NewRoundStep H:84775 R:0 S:RoundStepCommit LCR:0]""
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=20 msg=""[NewRoundStep H:84776 R:0 S:RoundStepNewHeight LCR:0]""
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=21 msg=""[BlockPart H:84644 R:0 P:Part{#0\n  Bytes: 0101010E6865...\n  Proof: SimpleProof{\n    Aunts: []\n  }\n}]""
INFO[01-22|08:09:01] Receive                                  module=consensus src=""Peer{MConn{188.166.70.19:46656} 0E547B8459E4 out}"" chId=20 msg=""[HasVote VI:2 V:{84775/00/2} VI:2]""
INFO[01-22|08:09:01] Received complete proposal block         module=consensus height=84644 hash=433D2AEB8F91800AB9A4412D63689D43B1909947
panic: Paniced on a Consensus Failure: +2/3 committed an invalid block: Wrong Block.Header.AppHash.  Expected 2907BF92AFA2B52F558221D8A17032ABACBA641C, got 07B8DA42AAA8334C0D1EB1724ACF94A8960A7494

goroutine 33 [running]:
panic(0x5573c8a99cc0, 0xc421809ff0)
	/usr/lib/go/src/runtime/panic.go:500 +0x1a5
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-common.PanicConsensus(0x5573c8a99cc0, 0xc421809fd0)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-common/errors.go:39 +0xe2
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).finalizeCommit(0xc42011c780, 0x14aa4)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:1203 +0xe69
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).tryFinalizeCommit(0xc42011c780, 0x14aa4)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:1180 +0x136
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).addProposalBlockPart(0xc42011c780, 0x14aa4, 0xc420210000, 0x1, 0x1, 0x0, 0x0)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:1349 +0x43f
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).handleMsg(0xc42011c780, 0x5573c8ac5380, 0xc421800300, 0xc4201ffd40, 0x40, 0x14aa4, 0x0, 0x8, 0xed0165f9a, 0x20dfaa83, ...)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:661 +0x5ab
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).receiveRoutine(0xc42011c780, 0x0)
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:614 +0x2c9
created by github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).startRoutines
	/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:320 +0x6d
```



",closed,False,2017-01-25 18:44:40,2017-03-04 04:20:54
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/456,https://api.github.com/repos/hyperledger/burrow/issues/456,Add back silencing of go-rpc output for client pending fix,,closed,True,2017-01-25 16:24:08,2017-01-25 18:55:29
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/455,https://api.github.com/repos/hyperledger/burrow/issues/455,Feature logging,"Once we have https://github.com/eris-ltd/eris-db/pull/456

Suggest we merge the logging changes into develop. All of these changes have been reviewed.

The main thing missing at this stage is configuration which will be a subsequent pull request. Otherwise the logging works fine and people can base off this.

We _will_ have a slightly inconsistent logging output because we are not catching all of tendermint logs. Also all our logs will contain a rather long file-name trace, which will be configurable.",closed,True,2017-01-25 16:13:25,2017-01-26 12:45:03
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/454,https://api.github.com/repos/hyperledger/burrow/issues/454,Glide dependency updating tool,"We have a situation with the way glide currently works that mean we really rely on hand-editing the glide.lock file to upgrade dependencies. However glide does provide most of what we need. This is an effort to solve a common use face while we wait for glide to integrate the more full-featured GPS library (which should allow our use cases).

Hell allows you to upgrade a package using glide and simply absorb that package's glide.lock file into your own (as well as upgrading glide.yaml for future use).

It does what we wish `glide get` would (for our case). That is, it leaves all other dependencies alone and just pulls in first-level transitive dependencies specified in a dependency's glide.lock file.

The usage is something like:

`go run ./hell/cmd/hell/main.go get --interactive github.com/tendermint/tendermint`                     

This will use glide as library to get a version of tendermint (you can choose the release) and then tendermint's glide.lock into our own. This way we obtain the transitive dependencies that any glide-using project has specified.

It's a bit of a blunt instrument in that it will just overwrite conflicting dependencies. But most of the time this is what we want. It should tide us over until principled full-featured package management/conflict resolution lands in glide.",closed,True,2017-01-25 14:08:07,2017-03-14 18:16:12
burrow,ratranqu,https://github.com/hyperledger/burrow/pull/453,https://api.github.com/repos/hyperledger/burrow/issues/453,Fix for deserialization of BroadcastTx which was missing the type byte.,"This fixes an issue when deserialising a BroadcastTx json-rpc request over websockets.

Until 0.11.4, such json would be valid:

```json
{
  ""id"": ""57EC1D39-7B3D-4F96-B286-8FC128177AFC4"",
  ""jsonrpc"": ""2.0"",
  ""method"": ""erisdb.broadcastTx"",
  ""params"": [
    2,
    {
      ""address"": ""5A9083BB0EFFE4C8EB2ADD29174994F73E77D418"",
      ""data"": ""2F2397A00000000000000000000000000000000000000000000000000000000000003132"",
      ""fee"": 1,
      ""gas_limit"": 1000000,
      ""input"": {
        ""address"": ""BE18FDCBF12BF99F4D75325E17FF2E78F1A35FE8"",
        ""amount"": 1,
        ""pub_key"": [
          1,
          ""8D1611925948DC2EDDF739FB65CE517757D286155A039B28441C3349BE9A8C38""
        ],
        ""sequence"": 2,
        ""signature"": [
          1,
          ""B090D622F143ECEDA9B9E7B15485CE7504453C05434951CF867B013D80ED1BD2A0CA32846FC175D234CDFB9D5C3D792759E8FE79FD4DB3006B24950EE3C37D00""
        ]
      }
    }
  ]
}
```

In 0.12.0, the ""params"" value is wrongly expected to be a dictionary instead of the correct [ type, {dict}].
  ",closed,True,2017-01-24 22:05:47,2017-01-26 12:58:00
burrow,j-h-scheufen,https://github.com/hyperledger/burrow/issues/452,https://api.github.com/repos/hyperledger/burrow/issues/452,Chain becomes unusable after executing infinite loop smart contract,"This ticket is in continuation of https://github.com/eris-ltd/eris-cli/issues/1158 

#### Problem Description:
Running a smart contract with an endless loop (`for (uint i = 10; i >= 0; i--) {}`) via the `eris pkgs` command produces a timeout error upon the first run. Any invocation thereafter results in the JSON unmarshalling error.

```
[eris-client] Failed to unmarshal json bytes for websocket event: unexpected end of JSON input
[eris-client] Failed to unmarshal json bytes for websocket event: unexpected end of JSON input
[eris-client] Failed to unmarshal json bytes for websocket event: unexpected end of JSON input
[eris-client] Failed to unmarshal json bytes for websocket event: unexpected end of JSON input
```

The chain becomes unusable and cannot be recovered. E.g. stopping and starting the chain node does not eradicate the JSON unmarshal error.

#### Requirements:
Even though the problem is due to a programming error in solidity, the timeout of the operation should not render the chain useless. This should be analyzed to find a way to allow contracts to fail in this way and still leave the chain in a usable state.

#### Versions:
OSX version: 10.11.6
Eris CLI Version: 0.12.0
Docker:
Client:
Version: 1.12.2
API version: 1.24
Go version: go1.6.3
Git commit: bb80604
Built: Tue Oct 11 17:00:50 2016
OS/Arch: darwin/amd64
Server:
Version: 1.12.3
API version: 1.24
Go version: go1.6.3
Git commit: 6b644ec
Built: Wed Oct 26 23:26:11 2016
OS/Arch: linux/amd64
docker-machine version 0.8.2, build e18a919
",closed,False,2017-01-24 18:13:46,2018-05-30 10:19:31
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/451,https://api.github.com/repos/hyperledger/burrow/issues/451,Panic in HTTP RPC from `EventPoll` and `EventUnsubscribe`,"Moved from: https://github.com/eris-ltd/eris-db/issues/439, originally posed by @dharmesh-kh24

Facing the same issue when using http instead of rpc. **Eventpoll** and **EventUnubscribe** does not work in latest eris-db version.
I did a POST request: 
```
localhost:1337/event_subs/
{
    ""event_id"": ""Account""
}
```
and got response
```
{
  ""sub_id"": ""A0573376A9CDF594B4A0C2E4CB96D8587F2AB581DB5C85BA479D4259DE6D62A2""
}
```
But when I try to eventpoll, 
`GET: localhost:1337/event_subs/A0573376A9CDF594B4A0C2E4CB96D8587F2AB581DB5C85BA479D4259DE6D62A2`, I get 500 Internal Server error.

Blockchain has following error trace:
```
2017/01/11 22:52:14 [Recovery] panic recovered:
GET /event_subs/A0573376A9CDF594B4A0C2E4CB96D8587F2AB581DB5C85BA479D4259DE6D62A2 HTTP/1.1
Host: localhost:1337
Accept: */*
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: en-US,en;q=0.8
Cache-Control: no-cache
Connection: keep-alive
Dnt: 1
Postman-Token: 27b99b10-03be-945e-2413-f7a093ef056c
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36


Key ""id"" does not exist
C:/Go/src/runtime/panic.go:458 (0x42c701)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:180 (0x7c44f8)
D:/Go/src/github.com/eris-ltd/eris-db/rpc/v0/restServer.go:252 (0x594d9c)
D:/Go/src/github.com/eris-ltd/eris-db/rpc/v0/restServer.go:64 (0x59c55b)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:97 (0x7c3ea1)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/tommy351/gin-cors/cors.go:77 (0x7d5563)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:97 (0x7c3ea1)
D:/Go/src/github.com/eris-ltd/eris-db/server/server.go:238 (0x585c67)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:97 (0x7c3ea1)
D:/Go/src/github.com/eris-ltd/eris-db/server/server.go:210 (0x585514)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:97 (0x7c3ea1)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/recovery.go:45 (0x7d2e41)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:97 (0x7c3ea1)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/gin.go:284 (0x7ca115)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/gin.go:265 (0x7c99e7)
C:/Go/src/net/http/server.go:2202 (0x656d24)
C:/Go/src/net/http/server.go:1579 (0x6534de)
C:/Go/src/runtime/asm_amd64.s:2086 (0x45dad1)
```

Also EventUnubscribe does not work. A DELETE request, `localhost:1337/event_subs/24BFDF9384DCBC309C57B92F8E7AA7766554F8539B285BF116C0309EA1447ABE`, results in similar error stack
```
2017/01/11 23:05:24 [Recovery] panic recovered:
DELETE /event_subs/A0573376A9CDF594B4A0C2E4CB96D8587F2AB581DB5C85BA479D4259DE6D62A2 HTTP/1.1
Host: localhost:1337
Accept: */*
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: en-US,en;q=0.8
Cache-Control: no-cache
Connection: keep-alive
Dnt: 1
Origin: chrome-extension://fhbjgbiflinjbdggehcddcbncdddomop
Postman-Token: 2cebffc1-51d7-9181-3af6-658b3e2bfc8d
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36


Key ""id"" does not exist
C:/Go/src/runtime/panic.go:458 (0x42c701)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:180 (0x7c44f8)
D:/Go/src/github.com/eris-ltd/eris-db/rpc/v0/restServer.go:262 (0x594fdb)
D:/Go/src/github.com/eris-ltd/eris-db/rpc/v0/restServer.go:65 (0x59c5ab)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:97 (0x7c3ea1)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/tommy351/gin-cors/cors.go:77 (0x7d5563)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:97 (0x7c3ea1)
D:/Go/src/github.com/eris-ltd/eris-db/server/server.go:238 (0x585c67)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:97 (0x7c3ea1)
D:/Go/src/github.com/eris-ltd/eris-db/server/server.go:210 (0x585514)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:97 (0x7c3ea1)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/recovery.go:45 (0x7d2e41)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/context.go:97 (0x7c3ea1)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/gin.go:284 (0x7ca115)
D:/Go/src/github.com/eris-ltd/eris-db/vendor/github.com/gin-gonic/gin/gin.go:265 (0x7c99e7)
C:/Go/src/net/http/server.go:2202 (0x656d24)
C:/Go/src/net/http/server.go:1579 (0x6534de)
C:/Go/src/runtime/asm_amd64.s:2086 (0x45dad1)
```",closed,False,2017-01-22 15:56:46,2018-05-30 10:21:40
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/450,https://api.github.com/repos/hyperledger/burrow/issues/450,Remove eris-logger from client,"This threads the logging through eris-client.

Mostly the same functionality (although there is a lack of tests in this repo so will need testing with eris-pm), but some slight behavioural changes possible where I have opted to exit fatally or removed some log output for failures of basic initialisation.

I've made lacking tcp:// or unix:// for node address fatal, but I think it should maybe just normalise/default to tcp://. Also we might want to parse it as a URL.",closed,True,2017-01-18 15:34:44,2017-01-23 14:23:21
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/449,https://api.github.com/repos/hyperledger/burrow/issues/449,Slight client package reorganisation,"I felt like a slight reorg would be useful before I add logging changes. I realise that naming and organisation is something of a matter of taste, but I feel changes similar to these make the intention of the code clearer and mirror what we have elsewhere. Happy to adjust (or even revert if there are real objections)

- Remove global vars (as in eris-db cmd)
- Move send and call to 'methods' package (seem to be natural bedfellows to 'status' taking a `ClientDo`)
- Rename `client/core` to `client/rpc` (open to other names but I'd rather avoid introducing another generic 'core' package and really everything in 'core' is actually just a RPC client implementation, so we can be more specific here)
- Rename `transaction_factory_*` to `client_*` (this doesn't feel like a factory building transactions (that happens in the 'txs' package) - it's a high-level thing - an implementation of an RPC client)",closed,True,2017-01-18 11:07:16,2017-04-10 11:27:12
burrow,pietv,https://github.com/hyperledger/burrow/pull/448,https://api.github.com/repos/hyperledger/burrow/issues/448,"Revert ""Remove eris-logger references from eris-db server""",Reverts eris-ltd/eris-db#447,closed,True,2017-01-18 09:20:39,2017-01-18 09:20:43
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/447,https://api.github.com/repos/hyperledger/burrow/issues/447,Remove eris-logger references from eris-db server,Little incremental refactor stripping out eris-logger,closed,True,2017-01-17 19:12:12,2017-01-18 09:10:05
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/446,https://api.github.com/repos/hyperledger/burrow/issues/446,Upgrade Tendermint to 0.8.0,,closed,False,2017-01-17 10:11:45,2017-03-04 02:55:26
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/445,https://api.github.com/repos/hyperledger/burrow/issues/445,Re-implement ChangeValidator set (through BlockchainAware interface),,closed,False,2017-01-17 10:11:44,2018-05-30 10:07:49
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/444,https://api.github.com/repos/hyperledger/burrow/issues/444,refactor tmsp interface to Abstract Blockchain Interface (ABCI),,closed,False,2017-01-17 10:10:29,2017-04-10 22:13:19
burrow,konstantinzolotarev,https://github.com/hyperledger/burrow/issues/443,https://api.github.com/repos/hyperledger/burrow/issues/443,ErisDB docs for RPC erisdb.eventUnsubscribe are wrong,Missing required parameter name. ,closed,False,2017-01-16 15:46:28,2017-01-31 14:24:04
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/442,https://api.github.com/repos/hyperledger/burrow/issues/442,Add documentation comment on lazy initialisation of account public keys,I thought this was a note-worthy piece of code.,closed,True,2017-01-13 12:22:48,2017-04-10 22:13:19
burrow,konstantinzolotarev,https://github.com/hyperledger/burrow/issues/441,https://api.github.com/repos/hyperledger/burrow/issues/441,Wrong `erisdb.getPeers` response,"I'm using JSON-RPC 2.0 for eris and here: 
https://monax.io/docs/documentation/db/latest/specifications/api/#get-peers

`erisdb.getPeers` call should return response in format: 
`{ peers: [<Peer>] }` but it returns just array ` [<Peer>] `",closed,False,2017-01-13 10:04:23,2018-05-30 10:07:13
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/440,https://api.github.com/repos/hyperledger/burrow/issues/440,[WIP] db-434 genesis make,relates to #434 ,closed,True,2017-01-12 15:29:40,2017-01-26 13:25:33
burrow,devilgags,https://github.com/hyperledger/burrow/issues/439,https://api.github.com/repos/hyperledger/burrow/issues/439,Subscriptions reaped unexpectedly,"I have my blockchain running locally . I was using **node-json-rpc** module to make rpc calls . I was able to make few calls like erisdb.getBlockchainInfo. 
I tried the **erisdb.eventSubscribe** call :
```
client.call(
  {
    ""jsonrpc"": ""2.0"", ""method"": ""erisdb.eventSubscribe"", ""params"": {
      ""event_id"": ""NewBlock""
    }, ""id"": ""0""
  },
```
 
and it successfully returned a **sub_id** to me :
```
{ result: { sub_id: '7878EB2ECC668AEE19D958B89C4ED6E145D9298E91366D67F93CD2A20E995829' },
  error: null,
  id: '0',
  jsonrpc: '2.0' }
```

I used that **sub_id** to invoke **erisdb.eventPoll**  call :
```
client.call(
  {
    ""jsonrpc"": ""2.0"", ""method"": ""erisdb.eventPoll"", ""params"": {
      ""sub_id"":""7878EB2ECC668AEE19D958B89C4ED6E145D9298E91366D67F93CD2A20E995829""
    }, ""id"": ""1""
  },
```

but it is giving the following **error** : 
```
{ result: null,
  error:
   { code: -32603,
     message: 'Subscription not active. ID: 7878EB2ECC668AEE19D958B89C4ED6E145D9298E91366D67F93CD2A20E995829' },
  id: '1',
  jsonrpc: '2.0' }
```
**My eris-db version is 0.12.1.** 
",closed,False,2017-01-10 06:01:31,2018-05-30 10:06:41
burrow,compleatang,https://github.com/hyperledger/burrow/issues/438,https://api.github.com/repos/hyperledger/burrow/issues/438,[Config] Spaces in seeds field should have spaces removed before booting tendermint ,"**Problem** twice this week a user error has occurred which causes frustration. When a user fills out their seeds field and is told they can put multiple seeds in a comma separated list (what we currently communicate),  many users will add a space after the comma and before the next entry. Currently this causes tendermint to panic and thus, by derivation, edb to panic. 

**Solution** either a `strings.Replace(seeds, "" "",  """", -1` or (at a minimum) a note in the comments above the seeds field in the template config.toml. ",closed,False,2017-01-09 17:30:37,2018-04-11 21:19:08
burrow,compleatang,https://github.com/hyperledger/burrow/issues/437,https://api.github.com/repos/hyperledger/burrow/issues/437,[Discuss] Log Events to segment.io,"### Problem

Currently it is exorbitantly expensive to maintain the analytics surface area most blockchains are trying to manage. Blockchain clients maintain an entire (bespoke) RPC system, then a client library to that RPC. 

On top of that consumers of blockchain clients currently expect to be able to interact with the data produced in that blockchain in a very large number of ways (due to the wide variety of use cases currently being built on eris:db). 

This, in turn, requires that we maintain libraries like eris-sqlsol an ETL layer which pipes event and collection based data from the chain into a queriable database. 

In the future as our user's systems increase in size and complexity the ETL costs are going to rise dramatically. We need to have a cleaner way of scaling here without having to build all of it ourselves. 

### Solution

Stop trying to build an ETL layer on top of everything else; rather bake in a stronger connection to an industry leading analytics aggregator and use their very connected ETL layer. Such a change will enable customers to route data into systems they already use to analyze business data (or, at a dead minimum, a simple postgres database on premise or wherever they'd like it).

[Segment](https://segment.io) is an advanced data warehousing and integration platform. It is used by many applications to log and coordinate a number of different [touch points](https://segment.com/catalog#integrations/all) their business may have. By utilizing an [API like segment's](https://github.com/segmentio/analytics-go) we enable our users to do a whole range of interesting things. 

Examples of what this would enable

* new item added to the collections manager on this chain? send a message to slack -> https://segment.com/integrations/slack
* new business added to ""my collection"" on LEI chain? identify them with enriched data from Clearbit -> https://segment.com/integrations/clearbit ... and send them to SalesForce -> https://segment.com/integrations/salesforce
* application makers want to automatically report exceptions thrown by their smart contract suite -> https://segment.com/integrations/bugsnag
* application makers want to enable push notifications from specific events on their chain -> https://segment.com/integrations/kahuna
* forget monax having to build a blockchain explorer... just use keen.io -> https://segment.com/integrations/keen-io ... or tableau -> http://www.tableau.com/ ... or a range of other analytics tooling.

Because segment.io takes much of the ETL trouble out, and solely warehouses back to warehouses controlled by the customer, it would be much more useful just to integrate with a service like them than to have to build our own ETL layer. 

### What to log?

By default: blocks and transactions
By selection: a json file similar in schema to what sqlsol uses that defines: 

* contract events to listen for (these would, theoretically map to [this](https://segment.com/docs/sources/server/go/#track))
* contract collections to listen for (where collections meet a specification we should be able to register default CRUD functions)

### Notes

In theory this would play nicely with how @silasdavis has designed and built the logging system. 

In a first run should we add the feature, exposing all blocks and transactions would comport with what Ben and Tyler agreed would be needed to do sqlsol better anyway. 

This would be a very low cost way to increase what users can do with their chains dramatically. 

This would be a feature that (I suspect) would typically be turned on via flag or env var rather than written in a config file. 

There are a variety of analytics systems that ETL & route, but segment is what we're using for our internal systems; and from all my research is the most centrally placed so as to give us the most benefit for the least cost.",closed,False,2017-01-08 16:20:18,2017-01-11 00:22:21
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/436,https://api.github.com/repos/hyperledger/burrow/issues/436,[EVM] re-enable ecrecover as a native function,,open,False,2017-01-06 17:15:23,2018-10-09 21:09:03
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/435,https://api.github.com/repos/hyperledger/burrow/issues/435,[consolidation] logging,merge branch `feature_logging` into `unstable_develop` and replace occurences of eris-logger or cli/log with `eris-db/logging`,closed,False,2017-01-05 18:50:32,2017-01-25 18:58:37
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/434,https://api.github.com/repos/hyperledger/burrow/issues/434,[consolidation] genesis make,work on `unstable-develop` `genesis/` to rework genesis make for eris-cli consolidation (porting `mintclient gen`),closed,False,2017-01-05 18:45:19,2017-03-04 03:01:44
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/433,https://api.github.com/repos/hyperledger/burrow/issues/433,cmd: update company name to Monax,,closed,True,2017-01-05 15:44:01,2017-01-25 16:02:08
burrow,sathishmanoharan,https://github.com/hyperledger/burrow/issues/432,https://api.github.com/repos/hyperledger/burrow/issues/432,chain starting is running indefinitely without creating the chain,"Hi,
I am running Eris 0.12.0 version on Ubuntu 14.04. I have run 'eris init' and downloaded the images. 'eris chains make' runs without any error. But when I start the chain, it is running indefinitely with the error. 

Directory missing                 destination=/home/eris/.eris/chains/simplechain
error=Container interactive-e7c1e1b6-9ef2-4f1e-8ef6-ac54c3fc8256 exited with status 1

![image](https://cloud.githubusercontent.com/assets/18713130/21681051/65be36e4-d373-11e6-8c69-b2074e27f24d.png)
![image](https://cloud.githubusercontent.com/assets/18713130/21681071/7a0a16c2-d373-11e6-8ec7-9abfba2111ed.png)
![image](https://cloud.githubusercontent.com/assets/18713130/21681086/96068b62-d373-11e6-8ade-cb33dea25c34.png)

I am behind the corporate proxy and configured /etc/default/docker with proxy details. I am using 'Eris CLI Version: 0.12.0 (002c63e)'. I have given all (777) permission to /home dir. Not sure if this is a problem with directory creation. Could somebody help on this ?
",closed,False,2017-01-05 12:57:48,2017-01-11 11:14:36
burrow,ZhuZhengyi,https://github.com/hyperledger/burrow/issues/431,https://api.github.com/repos/hyperledger/burrow/issues/431,go build error,"$ cd eris-db
$ git checkout v0.12.0
$ cd cmd & go build

# github.com/eris-ltd/eris-db/event
../event/events.go:74: this.eventSwitch.AddListenerForEvent undefined (type *events.EventSwitch is pointer to interface, not interface)
../event/events.go:80: this.eventSwitch.RemoveListener undefined (type *events.EventSwitch is pointer to interface, not interface)

$ go version
go version go1.6.2 linux/amd64

",closed,False,2017-01-05 02:25:51,2017-01-05 02:26:48
burrow,ZhuZhengyi,https://github.com/hyperledger/burrow/issues/430,https://api.github.com/repos/hyperledger/burrow/issues/430,go build error,"$ cd eris-db
$ git checkout v0.12.0
$ cd cmd & go build

# github.com/eris-ltd/eris-db/event
../event/events.go:74: this.eventSwitch.AddListenerForEvent undefined (type *events.EventSwitch is pointer to interface, not interface)
../event/events.go:80: this.eventSwitch.RemoveListener undefined (type *events.EventSwitch is pointer to interface, not interface)

$ go version
go version go1.6.2 linux/amd64

",closed,False,2017-01-05 02:25:25,2017-01-05 09:50:56
burrow,sTingley,https://github.com/hyperledger/burrow/issues/429,https://api.github.com/repos/hyperledger/burrow/issues/429,Bad RPC call preventing chain communication,"Hi,

We are noticing that chains 'break', rather we cannot further communicate with a chain, deploy contracts etc. after it receives a bad request. From examining the chain logs, it seems that there is an issue setting the state hash because of a nonce error/invalid tx.

chain logs:
[chain logs.txt](https://github.com/eris-ltd/eris-db/files/664540/chain.logs.txt)

 Due to the bad request, the 'mgGK' var was given an bogus contract address (theAddr).

    {
	console.log(""inside the else statement -- isHuman false"")
        var theAddr = req.body.gatekeeperAddr;
        var myGK = contractMgr.newContractFactory(myGK_Abi).at(theAddr);
        
        //calling contract functions below
        retrieveData(myGK, function (result) {
            res.json(result);
        });
    }

",closed,False,2016-12-20 19:20:58,2018-05-30 10:22:30
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/428,https://api.github.com/repos/hyperledger/burrow/issues/428,Logging conventions etc,,closed,True,2016-12-20 15:03:39,2017-01-05 15:03:58
burrow,zramsay,https://github.com/hyperledger/burrow/pull/427,https://api.github.com/repos/hyperledger/burrow/issues/427,consolidate logging on unstable-develop,,closed,True,2016-12-19 20:32:05,2017-04-10 22:13:19
burrow,zramsay,https://github.com/hyperledger/burrow/pull/426,https://api.github.com/repos/hyperledger/burrow/issues/426,consolidate little fixes / make-genesis on unstable-develop,,closed,True,2016-12-19 20:31:28,2017-04-10 22:13:19
burrow,konstantinzolotarev,https://github.com/hyperledger/burrow/issues/425,https://api.github.com/repos/hyperledger/burrow/issues/425,Unable to send CallTx transaction signed outside of eris-db,"I’m working on sign transactions in JS code and sending them using `eris-db.txs().broadcastTx()` method. 

I was able to send a `SendTx` without any error (using this docs: https://monax.io/docs/documentation/db/0.12.0-rc3/specifications/api/#the-transaction-types)

But when I'm trying to create a `CallTx` and send it using same method I'm getting this error from `eris-db` 

```
{ Error: Expected type [Byte,?] but got type string
    at values.next.then (/Users/KoS/Projects/langa/vulcanize/eris-contracts.js/node_modules/eris-db/node_modules/@nodeguy/json-rpc/lib/index.js:12:38)
  method: 'broadcastTx',
  params:
   [ { input: [Object],
       address: '290AA16393FA6321BAF85AC801ED2CBFA5C91DAC',
       gas_limit: 10000,
       fee: 100,
       data: '6060604052602b8060106000396000f3606060405260e060020a6000350463a5f3c23b8114601a575b005b602435600435016060908152602090f3' } ],
  code: -32602,
  message: 'Expected type [Byte,?] but got type string' } undefined
```
** Sorry it's pretty dirty but working**
Source code for this is here: https://github.com/konstantinzolotarev/eris-contracts.js/blob/custom-sign/test.js#L85",closed,False,2016-12-19 16:51:34,2018-03-14 12:32:18
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/424,https://api.github.com/repos/hyperledger/burrow/issues/424,apply gofmt,,closed,True,2016-12-15 13:54:51,2017-04-10 22:13:19
burrow,dsanchezseco,https://github.com/hyperledger/burrow/issues/423,https://api.github.com/repos/hyperledger/burrow/issues/423,Add events queue or send all events to an endpoint,"Actually to have a general view of all the contracts deployed on the network you need:
* Query all the contracts every time you want to synchronize
or
* Have a subscriber for each event of each contract to gather the info when it is produced.

Those approaches have several problems.
The first one overloads eris and takes to much time.
The second one can miss an event if a subscriber dies(or you must have multiple subscribers) and need a huge amount of subscribers to get all the events.

Two possible ways to have a more useful way to gather all this events are:

* Send all the events produced on a node to a preconfigured endpoint(for example en the config.toml). This endpoint will gather all the events, no matter the origin contract or the type of the event, for a latter processing of all them. i.e. a bigdata processing. One advantage of this approach is that a node unbounds and latter bound again all the events are going to be sent again(timestamped with the block number).

* Have a queue on each node where the events produced are stored (if enabled on the config.toml) until are read from an external program. Same advantage as previous one.

This improvements will make way easier have an approximated vision of the network for the exploitation of the data without overloading eris with queries or having tons of subscribers. i.e. stock of all products on a supply chain.

",closed,False,2016-12-15 09:23:22,2018-05-30 10:22:56
burrow,sTingley,https://github.com/hyperledger/burrow/issues/422,https://api.github.com/repos/hyperledger/burrow/issues/422,Error on deploy contract,"Hi, When trying to deploy a contract using the following command, **eris pkgs do --chain coidchain --address E6A299E460649D658504E1D887AE738321EDBD5B --compiler https://compilers.monax.io:10114**

I am seeing the error, 'timed out waiting for event'.
![deploy fail](https://cloud.githubusercontent.com/assets/9422071/21116986/ed312efc-c085-11e6-9808-b6c4b70b0b66.PNG)
 
I have verified the criterion in the recovery checklist and attached the chain logs. Also, prior to this error, I had no problem deploying contracts using the same command.
[chain_breaks_can_no_longer_deploy_contracts.txt](https://github.com/eris-ltd/eris-db/files/647223/chain_breaks_can_no_longer_deploy_contracts.txt)
",closed,False,2016-12-12 21:18:30,2016-12-20 18:49:36
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/421,https://api.github.com/repos/hyperledger/burrow/issues/421,Logging for preliminary review,"This WIP PR included the framework of the logging system I have written so far to implement ideas from https://github.com/eris-ltd/eris-db/pull/421. It also includes some changes that seemed apt to make as I introduce a non-global logger at the root level.

Guide to changes:

#### Housekeeping
- Convert global vars (like `do *definition.Do` and loggers) into functional dependencies:
  - better for testing
  - less action at a distance
- Safely wrapped Viper's subconfig
- Bit of gofmt and imports

#### Logging
- Opted for to use [go-kit log](https://github.com/go-kit/kit/tree/master/log) as the underlying interface (see below for discussion)
- Opted to support log15 both on input and output (to make use of its handlers)
- Introduced `InfoTraceLogger` as the main binary interface (choose just one level/channel) for our logging. Each channel can be routed separately
- Used `ChannelLogger` to have a non-blocking non-overflowing never-stop-the-caller execution
- Introduced `MultipleChannelLogger` and `MultipleOutputLogger` allowing composing of loggers roughly under 'OR' / 'AND' logic respectively. These will will allow for setting up arbitrary numbers of logging sinks (remote servers, syslog, stderr, files, etc).

####  go-kit log and log15
After various drafts of logging and flip-flopping between just using log15's interface as our main interface and wrapping it and just go-kit log I have opted for something of a mash-up between go-kit log and log15. Although I would argue (having read up quite a bit on the design intentions of go-kit log) that I am using go-kit log as intended: in that it is designed to be wrapped and composed. In some ways you might see go-kit log as a logging facade rather like slf4j (in Java land), but simpler.

go-kit is a thematically related collection of packages designed for 'microservice architectures'. You don't have to care about that in order for it to be relevant. But it is based around a generic structured logging interface `Log (keyvals... interface{}) error`. This is very similar to log15's handler, but by making it the single interface everything is built around it encourages logging to behave has a composable pipeline with a somewhat flexible, but structured, schema, that you can wrap for consumption (which is what `InfoTraceLogger` does). They also model `Context` as a struct that wraps a logger rather than a field within a `Record` as log15 does. This means that contexts are established external to loggers/records and that there are no 'preferred fields'.

My feeling is that this suits how we should come to think about logs: as data in their own right that drives other things. I also think that this kind of machinery might be a better way to think about events in general, though it needn't be.

I was also keen not to have too many log levels, because I think they rely on that a shared hierarchy exists between the mind of the log line emitter and the mind of log line consumer that does not generally exist. I also think that `Critical`, `Error`, and `Fatal` are somewhat misnomers: in that if you are logging something then by definition you have handled any error (this might be appropriate in other settings, but for us as a fault tolerant system I think most things should not be fatal). However it does seem useful to have a 'noisy' and a 'quiet' channel for logs, which I have designated as 'Trace' and 'Info' respectively. I prefer 'trace' from 'debug' because I like that it doesn't try to suggest the noisy log channel is only good for debugging, in fact it might be used to drive other systems. It would have be hard to wrap log15 to provide this interface.

However, since log15 has lots of nice handlers and since Tendermint uses log15 (their very slightly different fork) I have written an adapter that allows us to capture log15 logging and also allows use to use log15 handlers. I think this kind of wrapping is in the spirit of go-kit log, but wouldn't really be the other way around.",closed,True,2016-12-12 17:19:29,2016-12-15 11:50:22
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/420,https://api.github.com/repos/hyperledger/burrow/issues/420,consolidation;,"- move `genesis` to a top level namespace
- merge in develop, which also has config file templates introduced",closed,True,2016-12-12 15:21:32,2016-12-14 16:47:59
burrow,zramsay,https://github.com/hyperledger/burrow/issues/419,https://api.github.com/repos/hyperledger/burrow/issues/419,(re?) implement erecover,"A user in Slack was asking about:
https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/evm/native.go#L43-L64",closed,False,2016-12-08 17:58:01,2018-04-11 21:19:43
burrow,jasonklein,https://github.com/hyperledger/burrow/issues/418,https://api.github.com/repos/hyperledger/burrow/issues/418,[SNative] Don't return nil from SNative Dispatch,"`permissionsContract` in https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/evm/snative.go#L65 returns `nil` (among other return values) if the `caller` does not have the invoked permission.

The Solidity functions that are used to access the sNatives functions (see `Permissions`, https://github.com/eris-ltd/eris-pm/blob/master/tests/fixtures/app33-evm_connection_edb_permissions_and_roles_layer/permissions.sol) expect to receive `int`s (ideally changed to `uint64`s, see https://github.com/eris-ltd/eris-db/issues/417) or `bool`, depending on the function. Receiving `nil` gets `Invalid jump dest`.

Can `permissionsContract` be changed to return the default value of the permission intended to be invoked (so, either `0` or `false`, I think)?",closed,False,2016-12-07 15:13:03,2018-02-26 13:50:55
burrow,jasonklein,https://github.com/hyperledger/burrow/issues/417,https://api.github.com/repos/hyperledger/burrow/issues/417,Update keys in sNatives PermsMap to permit/improve sNatives access from Solidity,"The keys in `PermsMap` used to identify the sNatives functions at https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/evm/snative.go#L55 are the signatures of functions identical to those in the `Permissions` contract at https://github.com/eris-ltd/eris-pm/blob/master/tests/fixtures/app33-evm_connection_edb_permissions_and_roles_layer/permissions.sol.

Please update the keys to represent (with respect to Solidity):
- a `set_global` function that takes 2 arguments, not three: `function set_global(uint64 permFlag, bool value) constant returns (uint64 pf)`
  - 🚨  this is the most immediately requested change because the inconsistency appears to render `set_global` unreachable from a Solidity contract
- functions that set the type for the `permFlag` argument to `uint64` rather than `int` (to be consistent with `PermFlag` in https://github.com/eris-ltd/eris-db/blob/master/permission/types/permissions.go#L17)
- functions with names that are camelCase rather than snake_case
  - `has_base` -> `hasBase`
  - `set_base` -> `setBase`
  - `unset_base` -> `unsetBase`
  - `set_global` -> `setGlobal`
  - `has_role` -> `hasRole`
  - `add_role` -> `addRole`
  - `rm_role` -> `rmRole`
",closed,False,2016-12-07 15:12:28,2017-05-06 17:08:04
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/416,https://api.github.com/repos/hyperledger/burrow/issues/416,Pull in configuration templating from eris-cm,"When eris-cm is deprecated cli chould depend on eris-db to generate its config, so that eris-db becomes the source of truth on its own config.",closed,True,2016-12-06 15:48:14,2016-12-06 16:00:05
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/415,https://api.github.com/repos/hyperledger/burrow/issues/415,Tendermint upgrade attempt,,closed,True,2016-12-05 22:52:29,2017-04-10 11:27:13
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/414,https://api.github.com/repos/hyperledger/burrow/issues/414,A more recent glide attempt,"An effort to improve the glide situation by updating the glide.yaml, which seems to cause some issues",closed,True,2016-12-05 22:05:05,2016-12-05 22:52:06
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/413,https://api.github.com/repos/hyperledger/burrow/issues/413,Exception while trying to store an array of contracts in Solidity,"This was reported by a user who used some interesting code. It compiles in browser solidity and runs properly but doesn't on our stack. Here's the report of what I did to reproduce:

Solidity code:

```
contract House {
  Person[] persons;
 
  function addPerson(address personAddress) {
    persons.push(Person(personAddress));
  }
 
  function getPersonByIndex(uint index) constant returns(address personAddres, string name, uint age) {
    Person p = persons[index];
 
    personAddres = address(p);
    name = bytes32ToString(p.getNameBytes());
    age = p.getAge();
 
    return (personAddres, name, age);
  }
  // stolen from: http://ethereum.stackexchange.com/questions/2519/how-to-convert-a-bytes32-to-string
  function bytes32ToString(bytes32 x) constant returns (string) {
    bytes memory bytesString = new bytes(32);
    uint charCount = 0;
    for (uint j = 0; j < 32; j++) {
        byte char = byte(bytes32(uint(x) * 2 ** (8 * j)));
        if (char != 0) {
            bytesString[charCount] = char;
            charCount++;
        }
    }
 
    bytes memory bytesStringTrimmed = new bytes(charCount);
    for (j = 0; j < charCount; j++) {
        bytesStringTrimmed[j] = bytesString[j];
    }
    return string(bytesStringTrimmed);
  }
}
 
contract Person {
  string _name;
  uint _age;
 
  function Person(string name, uint age) {
    _name = name;
    _age = age;
  }
 
  function getName() constant returns (string) {
    return _name;
  }
 
  function getAge() constant returns (uint) {
    return _age;
  }
 
  function getNameBytes() constant returns (bytes32) {
    return stringToBytes32(_name);
  }
  // stolen from: http://ethereum.stackexchange.com/questions/9142/how-to-convert-a-string-to-bytes32
  function stringToBytes32(string memory source) returns (bytes32 result) {
    assembly {
        result := mload(add(source, 32))
    }
  }
}
```

EPM.Yaml:

```
jobs:

- name: deployPerson
  job:
    deploy:
      contract: houseAndPerson.sol
      instance: Person
      data:
        - ""hello""
        - 12
      wait: true

- name: deployHouse
  job:
    deploy:
      contract: houseAndPerson.sol
      instance: House
      wait: true

- name: insertPerson
  job:
    call:
      destination: $deployHouse
      function: addPerson
      data:
        - $deployPerson
      wait: true

- name: getPerson
  job:
    call:
      destination: $deployHouse
      function: getPersonByIndex
      data:
        - 0
      wait: true

- name: assertPerson
  job:
    assert:
      key: $getPerson.name
      relation: eq
      val: ""hello""
```

and finally the output:

```
Deploying Contract                       name=House
                                         addr=B7427F27B4E7A444C9765280F2954960BDB5CFBC
Executing Job                                 insertPerson
Executing Job                                 getPerson
Encountered Exception from chain w: %!s(<nil>)

Executing Job                                 assertPerson
Assertion Failed                              $getPerson.name == hello
assertion failed

Could not perform pkg action service: Could not perform pkg action: Container interactive-3ce29cea-ce94-403a-9164-4e5695251a2a exited with status 1
```",closed,False,2016-11-29 21:02:11,2018-03-03 11:09:00
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/412,https://api.github.com/repos/hyperledger/burrow/issues/412,Issue 411 structure build and test pipeline,"- introduce makefile for eris-db with 
`make check` : fails on gofmt
`make fmt` : applies gofmt
`make lint` : fails on golint
`make vet` : fails on go vet
`make erase_vendor` : deletes `/vendor`, as helper to ensure CI builds have clean vendor folder installed
`make install_vendor` : installs `/vendor` from `glide.lock`
`make build` : fail on check, build all targets
`make build_race` : fail on check, build all targets with check for race conditions
`make test` : fail on check, build and run go test (for all targets)
`make test_race` : as test, but with race conditions
`make build_docker_db` : build docker image for eris-db and tag with full version number
`make test_docker_db` : build docker image for eris-db and run go test inside the docker image

note: build also builds into `/target`

this set of instructions is not set in stone or incomplete, but it aims at providing a base-line to simplify the jenkins jobs needed to build, test, move artefacts, for multiple targets in a single repository as we consolidate the repositories.",closed,True,2016-11-29 20:19:29,2017-04-10 22:13:18
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/411,https://api.github.com/repos/hyperledger/burrow/issues/411,[make] Structure development and test pipeline with Makefile consistently across repos,"**problem** from a continuous integration point of view we want to separate and consistently define the check, build, test, (docker build and docker test), separate from the deployment steps.

**solution** [PROPOSAL] introduce make build system to structure the different steps; pro: limited capability of make guards against over-reliance on build dependency; cons: introduces a voluntary build dependency",closed,False,2016-11-29 19:09:06,2018-04-11 21:03:56
burrow,zramsay,https://github.com/hyperledger/burrow/pull/410,https://api.github.com/repos/hyperledger/burrow/issues/410,genesis: cleanup old mintgen test & expose utility for importing as a package,"adds to/completes #375, closes #374 ",closed,True,2016-11-29 18:12:31,2017-04-10 22:13:18
burrow,zramsay,https://github.com/hyperledger/burrow/pull/409,https://api.github.com/repos/hyperledger/burrow/issues/409,Update contributing file,"- syncs (mostly) the contributing file with eris-cli
- helps deprecate https://github.com/eris-ltd/coding
- closes #85
- may want to also consider adding the `PULL_REQUEST_TEMPLATE.md` (see cli's)
- issue template might need tuning per @silasdavis 's latest work. those changes should be ported to cli where applicable",closed,True,2016-11-26 01:25:48,2016-11-28 12:32:29
burrow,zramsay,https://github.com/hyperledger/burrow/pull/408,https://api.github.com/repos/hyperledger/burrow/issues/408,fix a typo,shows up in logs regularly,closed,True,2016-11-25 19:44:15,2016-12-05 22:06:41
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/407,https://api.github.com/repos/hyperledger/burrow/issues/407,[Licensing] Consistently present licensing information,"We want to consistently present licensing information, then enforce this presentation throughout codebase.",open,False,2016-11-24 16:58:40,2018-10-09 21:15:16
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/406,https://api.github.com/repos/hyperledger/burrow/issues/406,[Tests] Modularise and unit test ExecTx,"`ExecTx` can be found here: https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/state/execution.go#L299

It is currently monolithic. We should split the main case statement into functions and introduce unit tests for the atoms.

Creating as Epic since this is a significant piece of work.",closed,False,2016-11-24 16:03:40,2018-06-18 11:28:15
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/405,https://api.github.com/repos/hyperledger/burrow/issues/405,[Tests] Extract and unit test Tx (de)serialisation ,"Unit test the serialisation cycle of transactions.

As used by `CheckTx` and `AppendTx`: https://github.com/eris-ltd/eris-db/blob/master/manager/eris-mint/eris-mint.go#L120

We can separately test the execution of the transaction",closed,False,2016-11-24 15:59:15,2018-02-26 13:58:28
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/404,https://api.github.com/repos/hyperledger/burrow/issues/404,[Logging] Log volume: select 'log correlation identifiers' to add to logs as metadata,"This includes the possibility of:

- Source file and line number of log emission
- Scope (hierarchical tags) of active logger
- Run identifier (possibly [Timeuuid](https://docs.datastax.com/en/cql/3.0/cql/cql_reference/timeuuid_functions_r.html) that is fixed for the lifetime of a node from startup to shutdown)",closed,False,2016-11-23 18:02:29,2017-07-14 12:20:34
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/403,https://api.github.com/repos/hyperledger/burrow/issues/403,[Logging] Log volume: document log level standards,,closed,False,2016-11-23 18:01:44,2018-02-26 13:58:43
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/402,https://api.github.com/repos/hyperledger/burrow/issues/402,[Logging] Log output: support multiple sinks,,closed,False,2016-11-23 18:01:13,2017-07-14 12:20:34
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/401,https://api.github.com/repos/hyperledger/burrow/issues/401,[Logging] Log output: support named file,,closed,False,2016-11-23 18:00:38,2017-05-24 21:30:37
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/400,https://api.github.com/repos/hyperledger/burrow/issues/400,[Logging] Log output: support graylog,,closed,False,2016-11-23 18:00:31,2017-04-25 16:49:49
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/399,https://api.github.com/repos/hyperledger/burrow/issues/399,[Logging] Log output: support syslog ,,closed,False,2016-11-23 18:00:26,2017-05-24 21:30:33
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/398,https://api.github.com/repos/hyperledger/burrow/issues/398,[Logging] Log capture: attempt to capture log output from all dependencies and send to logging engine,,closed,False,2016-11-23 17:59:59,2017-01-25 13:17:52
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/397,https://api.github.com/repos/hyperledger/burrow/issues/397,[Logging] Log structure: add Timeuuid based run id as metadata,,closed,False,2016-11-23 17:59:11,2017-01-25 13:17:53
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/396,https://api.github.com/repos/hyperledger/burrow/issues/396,[Logging] Log structure: add scoping (state machine and lexical) to logs,We want something like `innerLogger = outerLogger.Scope(<inner identifier>)` to give us a hierarchically scoped logger,closed,False,2016-11-23 17:57:12,2017-05-24 21:30:50
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/395,https://api.github.com/repos/hyperledger/burrow/issues/395,[Logging] Log structure: establish metadata to add to logs based on verbosity,,closed,False,2016-11-23 17:56:52,2017-05-24 21:29:48
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/394,https://api.github.com/repos/hyperledger/burrow/issues/394,[Logging] Log format: configure dependencies with log format equivalent,,closed,False,2016-11-23 17:56:06,2017-07-14 12:20:34
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/393,https://api.github.com/repos/hyperledger/burrow/issues/393,[Logging] Log format: provide standard logging format,,closed,False,2016-11-23 17:55:48,2017-05-24 21:30:54
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/392,https://api.github.com/repos/hyperledger/burrow/issues/392,[Logging] Add basic logging config,,closed,False,2016-11-23 17:55:00,2017-05-24 21:30:06
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/391,https://api.github.com/repos/hyperledger/burrow/issues/391,[Logging] Configure dependency to match logging level and verbosity,,closed,False,2016-11-23 17:54:36,2017-05-24 21:30:17
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/390,https://api.github.com/repos/hyperledger/burrow/issues/390,"[Logging] Support multiple sinks, verbosity, and log levels","My current thinking is to have as many `sinks` defined as desired, each with:

- Particular output backend
- Verbosity (may be stored as a particular formatter instance - which may in turn be defined for different verbosity levels). Note I am currently thinking of verbosity as the amount of metadata decoration, not something that is specified at the log line emission site. The 'intentional verbosity' or rather log line type is covered by 'log level' below.
- Log level, at least: Info, Debug, probably: Warning, Error/Fault (some say that if you have logged an error then you have handled it and by definition it is not an error, this is semantics, but it seems that we have faults as in (B)FT that are interesting enough to have their own level but not strictly exceptional)

Need to think about whether this is a confusing use of verbosity or whether it ought to be simplified...",closed,False,2016-11-23 17:53:52,2017-05-24 21:30:29
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/389,https://api.github.com/repos/hyperledger/burrow/issues/389,[Logging] Refactor existing logging calls to use new logger,"First in db, then once settled spread to client and keys.",closed,False,2016-11-23 17:53:05,2017-01-25 13:17:54
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/388,https://api.github.com/repos/hyperledger/burrow/issues/388,[Logging] Choose a logging library,"Candidates:

- https://github.com/inconshreveable/log15
- https://github.com/go-kit/kit/tree/master/log
- https://github.com/op/go-logging
- https://github.com/Sirupsen/logrus
- https://github.com/uber-go/zap
- https://github.com/golang/glog

and many more ... http://libs.club/golang/developement/logging

Need to establish some requirements/desirements. Initial thoughts:

- Structured
- Multiple backends (including syslog)
- Pluggable formatters
- Levelled logging
- Multiple output instances at different levels
- Non-global instance",closed,False,2016-11-23 16:31:53,2017-01-25 13:17:51
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/387,https://api.github.com/repos/hyperledger/burrow/issues/387,[Logging] Write logging RFC,,closed,False,2016-11-23 14:46:01,2016-11-25 18:42:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/386,https://api.github.com/repos/hyperledger/burrow/issues/386,[EVM] dynamically allocate stack depth,"**problem** current max data stack capacity is hard-coded at 1024 words256; memory at 1MB (call depth is unlimited)

**solution** by default make data stack and memory unlimited; set optional limit in configuration file for embedded devices; enforce call stack depth similarly",closed,False,2016-11-22 17:25:53,2018-10-16 10:52:21
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/385,https://api.github.com/repos/hyperledger/burrow/issues/385,time: introduce marmot time,"patch for non-deteerministic `TIMESTAMP`

fixes #384 ",closed,True,2016-11-18 06:27:40,2016-11-18 07:02:32
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/384,https://api.github.com/repos/hyperledger/burrow/issues/384,"[state] marmot time, time to marmot",,closed,False,2016-11-18 06:17:49,2016-11-18 07:02:32
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/383,https://api.github.com/repos/hyperledger/burrow/issues/383,[do not merge] galactica debug,"version, vm: shift version out of the release path; force evm executi…on log",closed,True,2016-11-17 23:04:09,2017-02-28 17:03:55
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/382,https://api.github.com/repos/hyperledger/burrow/issues/382,[mempool; pkgs] nonce collision can break eris-pm deployment cycle,"We saw this in a recent proof of concept. epm has no way of retrying nonce colliding transactions, or sequencing them so they do not collide. It ought to be able to do either o both.",closed,False,2016-11-15 01:32:36,2018-02-26 14:00:20
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/381,https://api.github.com/repos/hyperledger/burrow/issues/381,client/core: fixes 378 patch exception error from chain,,closed,True,2016-11-14 21:31:06,2017-04-10 22:13:17
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/380,https://api.github.com/repos/hyperledger/burrow/issues/380,circle: add release-0.16 on develop,fixes #366 ,closed,True,2016-11-14 21:17:45,2017-04-10 22:13:18
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/379,https://api.github.com/repos/hyperledger/burrow/issues/379,"client/core: fixes 378 report exception, not error",fixes #378 ,closed,True,2016-11-14 21:07:30,2017-04-10 22:13:17
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/378,https://api.github.com/repos/hyperledger/burrow/issues/378,[Eris-Client] Need more descriptive errors,"Since the divorce of tendermint, the entire team has been seeing a lot of these: 

```
Encountered Exception from chain w: %!s(<nil>)
```

We need a way to be more descriptive with the errors. ",closed,False,2016-11-14 20:44:01,2017-04-10 22:13:17
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/377,https://api.github.com/repos/hyperledger/burrow/issues/377,Triage every issue in eris-db repo,"We have fairly large number of open issues - nothing wrong with this per se, but I suspect a number of old ones should be closed, some can be consolidated, some will be subsumed by planned future work, and some are unactionable in their current state. We should:

- Either close or label every open issue
- Label every issue with a severity (triage)
- Label every issue with type (bug, feature, etc)
- Label every issue with which component is affected
- Label as 'ready to work on' or 'needs more information'

I'd also like to raise the standard of issue reporting without being obstructive by:
- Asking for clear reproduction steps
- Urging strongly for the reporter to provide a minimal test case/example that is as focused as possible, and probably built specifically for the issue (not always practical, and sometimes will be down to issue investigator, but often the reporter could do more than they tend to do currently)

This pushes a certain amount of work onto the reporter, but we have limited resources and often the reporter can do more particularly around generic work isolating where the bug appears. We are always grateful to have issues reported, but we should (usually) prioritise issues with clear isolated reproduction above those without, since it is a more efficient use of our time and there is a self-selection at work on the priorities of the reporter - presumably if someone has made more effort in the reporting of a bug they assign more value to it themselves.

I'd like to also propose for non-critical issues that have limited or inadequate reproduction steps, that we first label them and request more information, but if they are dormant for ~3 months we close them. This is because I think having many dead issues hurts our focus. Open to contrary opinions on this.",closed,False,2016-11-14 14:27:13,2018-02-26 14:00:20
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/376,https://api.github.com/repos/hyperledger/burrow/issues/376,circle: correct name branch for deployment/release,,closed,True,2016-11-14 11:50:12,2016-11-14 16:38:46
burrow,zramsay,https://github.com/hyperledger/burrow/pull/375,https://api.github.com/repos/hyperledger/burrow/issues/375,[WIP] add base mintgen functionality for generating genesis files,,closed,True,2016-11-11 21:10:27,2017-04-10 22:13:17
burrow,zramsay,https://github.com/hyperledger/burrow/issues/374,https://api.github.com/repos/hyperledger/burrow/issues/374,[Client] add `mintgen` functionality to create a genesis file,"This is about CLI's requirement to be able to access genesis file generation via the eris-client library.

- from https://github.com/eris-ltd/mint-client/blob/master/mintgen/cli.go
- required for https://github.com/eris-ltd/eris-cli/issues/899",closed,False,2016-11-11 19:50:42,2017-03-04 04:04:20
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/373,https://api.github.com/repos/hyperledger/burrow/issues/373,[EVM] Introduce event `Acc/%X/DelegateCall` for delegate call,Improve the hotfix on 0.12.1 (see #371 and note in code) on 0.16.0 by introducing a new event string for delegate call,closed,False,2016-11-11 13:15:25,2018-11-08 20:23:53
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/372,https://api.github.com/repos/hyperledger/burrow/issues/372,issue371: hotfix 0.12.1,"eris-mint/vm: issue371, hotfix silence event call for delegate call as no transaction can commence with delegatecall

is a hotfix for #371; but needs a more elegant solution:
```introduce event EventStringAccDelegateCall Acc/%X/DelegateCall```",closed,True,2016-11-11 00:13:46,2016-11-11 11:10:53
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/371,https://api.github.com/repos/hyperledger/burrow/issues/371,[rpc v0] TransactAndHold result is affected by library calls,😺 ,closed,False,2016-11-10 20:42:42,2016-11-11 13:16:00
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/370,https://api.github.com/repos/hyperledger/burrow/issues/370,[rpc] [tests] low priority intermittent failure in rpc testing framework,"Intermittent failure in rpc tendermint tests, triggered in testframework; low priority;

https://circleci.com/gh/eris-ltd/eris-db/859:

```panic: Paniced on a Crisis: Could not write file /tmp/Eris-DB885519482/rootWorkDir/priv_validator.json.new. open /tmp/Eris-DB885519482/rootWorkDir/priv_validator.json.new: no such file or directory

goroutine 48 [running]:
panic(0xbcbc40, 0xc82018fec0)
	/usr/local/go/src/runtime/panic.go:481 +0x3e6
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-common.PanicCrisis(0xd0d840, 0xc82018fe90)
	/home/ubuntu/.go_workspace/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-common/errors.go:33 +0xf5
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/types.(*PrivValidator).save(0xc8204be880)
	/home/ubuntu/.go_workspace/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/types/priv_validator.go:148 +0x14f
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/types.(*PrivValidator).SignProposal(0xc8204be880, 0xc8200e8c00, 0x9, 0xc8221f0480, 0x0, 0x0)
	/home/ubuntu/.go_workspace/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/types/priv_validator.go:194 +0xf8
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).decideProposal(0xc8200ac300, 0x5e, 0x0)
	/home/ubuntu/.go_workspace/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:826 +0x23b
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).enterPropose(0xc8200ac300, 0x5e, 0x0)
	/home/ubuntu/.go_workspace/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:803 +0xd7d
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).enterNewRound(0xc8200ac300, 0x5e, 0x0)
	/home/ubuntu/.go_workspace/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:767 +0xbbb
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).handleTimeout(0xc8200ac300, 0x3b979374, 0x5e, 0x0, 0xc8221fea01, 0x5e, 0x0, 0x1, 0xecfb29b0e, 0xe71638a, ...)
	/home/ubuntu/.go_workspace/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:704 +0x890
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).receiveRoutine(0xc8200ac300, 0x0)
	/home/ubuntu/.go_workspace/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:623 +0x580
created by github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus.(*ConsensusState).startRoutines
	/home/ubuntu/.go_workspace/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/tendermint/consensus/state.go:320 +0x61
FAIL	github.com/eris-ltd/eris-db/rpc/tendermint/test	98.979s```",closed,False,2016-11-08 10:15:10,2018-04-11 21:09:51
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/369,https://api.github.com/repos/hyperledger/burrow/issues/369,c. issue366 only deploy from branch `release-0.12` for RELEASE,fixes #366 ,closed,True,2016-11-07 15:50:36,2016-11-14 10:30:53
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/368,https://api.github.com/repos/hyperledger/burrow/issues/368,b. issue366 only deploy from branch `release-0.12` for MASTER,fixes #366 ,closed,True,2016-11-07 15:48:55,2016-12-05 22:07:30
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/367,https://api.github.com/repos/hyperledger/burrow/issues/367,a. issue366 only deploy from branch `release-0.12` for DEVELOP,fixes #366,closed,True,2016-11-07 15:47:51,2016-11-14 16:38:25
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/366,https://api.github.com/repos/hyperledger/burrow/issues/366,[CD] deploy from release branches,"maintain `release-0.11` and `release-0.12` branches, and only deploy from pushes to these branches; decoupling the deployment from full integrated testing on master branches",closed,False,2016-11-07 15:25:13,2016-11-24 16:49:53
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/366,https://api.github.com/repos/hyperledger/burrow/issues/366,[CD] deploy from release branches,"maintain `release-0.11` and `release-0.12` branches, and only deploy from pushes to these branches; decoupling the deployment from full integrated testing on master branches",closed,False,2016-11-07 15:25:13,2016-11-24 16:49:53
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/365,https://api.github.com/repos/hyperledger/burrow/issues/365,release v0.12.0,"CHANGELOG:
- no-operation after 0.12.0-rc3
- correction to build instruction, need to use glide as a dependency for eris-db
- silence rpc library for eris-client
",closed,True,2016-11-03 13:59:11,2016-11-04 02:16:21
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/364,https://api.github.com/repos/hyperledger/burrow/issues/364,Sync up develop after major rebase for rc3,,closed,True,2016-11-03 13:50:26,2016-11-03 15:03:26
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/363,https://api.github.com/repos/hyperledger/burrow/issues/363,[keys] move crypto and keys service,"**problem**
- eris-keys contains crypto and keys service; but db and client need better access to crypto

**solution**
- move keys as service into eris-db
- move crypto as top-level namespace into eris-db",closed,False,2016-11-02 19:46:41,2018-02-26 14:00:20
burrow,apmilen,https://github.com/hyperledger/burrow/issues/362,https://api.github.com/repos/hyperledger/burrow/issues/362,Will eris-db ever offer an API that matches ethereum's JSON-RPC specification?,"Big fan of this project, and we would like to integrate it with [dapple](https://github.com/nexusdev/dapple), our solidity developer tool. However, dapple has been developed around Ethereum's [JSON-RPC API](https://github.com/ethereum/wiki/wiki/JSON-RPC) and thus won't work out of the box with [your API specification](https://monax.io/docs/documentation/db/latest/specifications/api/). Do you intend to offer a version of this client with an API built to the Ethereum spec? Sorry if this question has been asked before, I couldn't find any info on the topic. Thanks!",closed,False,2016-10-31 22:31:54,2016-11-01 10:12:27
burrow,DrBAXA,https://github.com/hyperledger/burrow/issues/361,https://api.github.com/repos/hyperledger/burrow/issues/361,Concurrency issue,"I have contract with code below
 
 ```
 contract Coin {
      address minter;
      
      mapping (address => uint) balances;
      
      event Send(address from, address to, uint value);
      
      function Coin() {
          minter = msg.sender;
      }
      
      function mint(address owner, uint amount) {
          if (msg.sender != minter) return;
          balances[owner] += amount;
      }
      
      function send(address receiver, uint amount) returns (bool success) {
          if (balances[msg.sender] < amount) return false;
          balances[msg.sender] -= amount;
          balances[receiver] += amount;
          Send(msg.sender, receiver, amount);
      return true;
      }
      
      function queryBalance(address addr) constant returns (uint balance) {
          return balances[addr];
      }
      
      function distribute(address[] accounts, uint amount) returns (bool success) {
          if (balances[msg.sender] < amount) return false;
          uint mean = amount / accounts.length;
          uint rest = amount % accounts.length;
          uint i = 0;
          while (i < accounts.length) {
          uint amountPerAccount = 0;
              if (rest > 0) {
          amountPerAccount = mean + 1;
          rest = rest - 1;
          } else {
              amountPerAccount = mean;
          }
              balances[msg.sender] -= amountPerAccount;
              balances[accounts[i]] += amountPerAccount;
              i = i + 1;
          }
          return true;
      }
      
  }
```
I use http rpc calls to invoke contract methods. In case I have many concurrent calls to `queryBalance` method some return values is empty.
RPC call data 

```
{
   ""jsonrpc"": ""2.0"",
   ""method"": ""erisdb.call"",
   ""id"": """",
   ""params"": {
     ""from"": ""D9ADB041D75B842E0CA3D263F99CDC8483759A9A"",
     ""address"": ""C77CDE43F65450FB64EA53C71CF4E16610996856"",
     ""data"": ""37F42841000000000000000000000000042225F59901A36C847069E092122A3BD6FD60AA""
   }
 }
 ```
 
 Plain ""correct"" response when I make requests from one thread
 
```
 {""result"":{""return"":""0000000000000000000000000000000000000000000000000000000000000000"",""gas_used"":0},""error"":null,""id"":"""",""jsonrpc"":""2.0""}
```
 
 Wrong response when I make 20 requests from different threads
 
```
{""result"":{""return"":"""",""gas_used"":0},""error"":null,""id"":"""",""jsonrpc"":""2.0""}
```
 
 I use own client implementation in Java
 
 ",closed,False,2016-10-31 14:09:49,2018-05-30 10:05:14
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/360,https://api.github.com/repos/hyperledger/burrow/issues/360,Include CI Linter check on copyright header of files,"LINT should check for correct copyright header
https://github.com/eris-ltd/eris-db/issues/359
",closed,False,2016-10-28 11:04:50,2017-03-04 04:06:15
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/359,https://api.github.com/repos/hyperledger/burrow/issues/359,Standardise GPLv3 copyright file header,"- [ ] Sign off on expected copyright header to be at the top of every code file
  Proposal:

```
// Copyright 2015, 2016 Monax Industries (UK) Ltd.
// This file is part of the Eris platform (Eris)

// Eris is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// Eris is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with Eris.  If not, see <http://www.gnu.org/licenses/>.
```
- [ ] make pull request to update all our files with the correct copyright header
",closed,False,2016-10-28 11:01:02,2017-03-04 04:05:07
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/358,https://api.github.com/repos/hyperledger/burrow/issues/358,Switch JSON-RPC Parameter Structures to 'by-position'.,"The JSON-RPC methods accept parameters [by-name](http://www.jsonrpc.org/specification#parameter_structures), e.g.:

``` JSON
{
  ""method"": ""erisdb.transactAndHold"",
  ""params"": {
    ""priv_key"": ""DE3211635E7C4C4A74B1582007A26D7ABCF41FA06254794BC8180F030888903B1E67B62D6EC2AB1BAFB4994A7D31A5DE2C1130797E833403005A382DC5E576E0"",
    ""address"": """",
    ""data"": ""606060405260448060106000396000f3606060405260e060020a60003504633bdab8bf8114601a575b005b60187f57050ab73f6b9ebdd9f76b8d4997793f48cf956e965ee070551b9ca0bb71584e60006060a156"",
    ""gas_limit"": 1000000,
    ""fee"": 0
  },
  ""jsonrpc"": ""2.0"",
  ""id"": ""1""
}
```

Since neither Go nor JavaScript supports calling procedures with named parameters, this isn't idiomatic to either language.  Let's switch to specifying arguments by position:

``` JSON
{
  ""method"": ""erisdb.transactAndHold"",
  ""params"": [{
    ""priv_key"": ""DE3211635E7C4C4A74B1582007A26D7ABCF41FA06254794BC8180F030888903B1E67B62D6EC2AB1BAFB4994A7D31A5DE2C1130797E833403005A382DC5E576E0"",
    ""address"": """",
    ""data"": ""606060405260448060106000396000f3606060405260e060020a60003504633bdab8bf8114601a575b005b60187f57050ab73f6b9ebdd9f76b8d4997793f48cf956e965ee070551b9ca0bb71584e60006060a156"",
    ""gas_limit"": 1000000,
    ""fee"": 0
  }],
  ""jsonrpc"": ""2.0"",
  ""id"": ""1""
}
```
",closed,False,2016-10-27 22:36:50,2018-02-26 14:01:37
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/357,https://api.github.com/repos/hyperledger/burrow/issues/357,Running into problems with cryptographic functions,"Working on https://github.com/eris-ltd/eris-cli/issues/1030 and running into the problem of not getting pretty byte output when converting to string. 

Output:

```
Debugging:Nd�|�_    І6�^��89�\S ��᧨8ۯ�
Return Value                                 Nd�|�_ І6�^��89�\S ��᧨8ۯ�
Job Vars                                      [0xc42024fe00]
Executing Job                                 assert256
Type                                          Assert
Replacement Match Found                 match=$callSha256
Fixing Variables =>                       resNd�|�_ І6�^��89�\S ��᧨8ۯ�
                                          var=callSha256
Assertion =>                              keyNd�|�_ І6�^��89�\S ��᧨8ۯ�
                                     relation=eq
                                        value=6ffa955749c31a98f50d0a3030c2d9aa663081c5ca423a691d7b44bd55e3c2eb
Assertion Failed                             Nd�|�_ І6�^��89�\S ��᧨8ۯ� == 6ffa955749c31a98f50d0a3030c2d9aa663081c5ca423a691d7b44bd55e3c2eb
```
",closed,False,2016-10-25 23:41:34,2018-02-26 14:02:05
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/356,https://api.github.com/repos/hyperledger/burrow/issues/356,[Logging] Support syslog via a config option,"This is our preferred way to support a diversity of logging in an operational setting, proposed by @AFDudley 
",closed,False,2016-10-25 15:52:51,2017-05-24 21:30:19
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/355,https://api.github.com/repos/hyperledger/burrow/issues/355,WebSocket event subscriptions violate JSON-RPC specification.,"From https://monax.io/docs/documentation/db/latest/specifications/api/#event-system:

> EventPoll is used to get all the events that has accumulated since the last time the subscription was polled. It takes the subscription ID as a parameter. NOTE: This only works over HTTP. Websocket connections will automatically receive events as they happen. They are sent as regular JSON-RPC 2.0 responses with the subscriber ID as response id.

From the [JSON-RPC specification](http://www.jsonrpc.org/specification#response_object):

> id
> This member is REQUIRED.
> It MUST be the same as the value of the id member in the Request Object.

Using the response id member to push event notifications is a violation of the JSON-RPC specification and a perversion of its intent (remote procedure calling).

Instead, Eris DB should stay compliant by using the callback paradigm to send a JSON-RPC Request object to the client:

``` JSON
{
  ""method"": ""event"",
  ""params"": {
    ""address"": ""000000000000000000000000208F9EBFA2B7FE89D8D3F60B6143140165C333FE"",
    ""topics"": [
      ""57050AB73F6B9EBDD9F76B8D4997793F48CF956E965EE070551B9CA0BB71584E""
    ],
    ""data"": """",
    ""height"": 3
  },
  ""jsonrpc"": ""2.0"",
  ""id"": ""1""
}
```

This is the approach taken by geth: https://github.com/ethereum/go-ethereum/wiki/RPC-PUB-SUB
",closed,False,2016-10-20 15:30:39,2018-02-26 14:03:38
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/354,https://api.github.com/repos/hyperledger/burrow/issues/354,Concurrency bug in Erismint state hashmap,"Reported concurrency bug on slack.monax.io

`````` ""log"":""fatal error: concurrent map read and map write\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.369556334Z""
{""log"":""\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.373469366Z""}
{""log"":""goroutine 3940664 [running]:\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.373494316Z""}
{""log"":""runtime.throw(0x7f6d6069ccb0, 0x21)\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.373500903Z""}
{""log"":""\u0009/usr/lib/go/src/runtime/panic.go:566 +0x97 fp=0xc4299d5648 sp=0xc4299d5628\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.373506346Z""}
{""log"":""runtime.mapaccess1_faststr(0x7f6d60c65260, 0xc420f7d830, 0xc42a501340, 0x14, 0x14)\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.373512316Z""}
{""log"":""\u0009/usr/lib/go/src/runtime/hashmap_fast.go:201 +0x4f5 fp=0xc4299d56a8 sp=0xc4299d5648\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.37351746Z""}
{""log"":""github.com/eris-ltd/eris-db/manager/eris-mint/state.(*BlockCache).GetAccount(0xc420f7db00, 0xc42a501340, 0x14, 0x20, 0x7f6d60c093a0)\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.373538693Z""}
{""log"":""\u0009/go/src/github.com/eris-ltd/eris-db/manager/eris-mint/state/block_cache.go:48 +0x80 fp=0xc4299d5720 sp=0xc4299d56a8\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.389565787Z""}
{""log"":""github.com/eris-ltd/eris-db/manager/eris-mint.(*transactor).Transact(0xc42048ef50, 0xc42eaf9540, 0x40, 0x40, 0xc42a5012a0, 0x14, 0x14, 0xc424decff0, 0xe4, 0xe4, ...)\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.389601543Z""}
{""log"":""\u0009/go/src/github.com/eris-ltd/eris-db/manager/eris-mint/transactor.go:174 +0x141 fp=0xc4299d57f0 sp=0xc4299d5720\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.38960935Z""}
{""log"":""github.com/eris-ltd/eris-db/rpc/v0.(*RestServer).handleTransact(0xc4204a3680, 0xc4339b3340)\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.389615443Z""}
{""log"":""\u0009/go/src/github.com/eris-ltd/eris-db/rpc/v0/restServer.go:412 +0x386 fp=0xc4299d58a8 sp=0xc4299d57f0\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.389620853Z""}
{""log"":""github.com/eris-ltd/eris-db/rpc/v0.(*RestServer).(github.com/eris-ltd/eris-db/rpc/v0.handleTransact)-fm(0xc4339b3340)\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.389626147Z""}
{""log"":""\u0009/go/src/github.com/eris-ltd/eris-db/rpc/v0/restServer.go:85 +0x36 fp=0xc4299d58c8 sp=0xc4299d58a8\n"",""stream"":""stderr"",""time"":""2016-10-12T20:54:53.38963136Z""}```
``````
",closed,False,2016-10-20 14:01:13,2018-04-07 23:07:40
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/353,https://api.github.com/repos/hyperledger/burrow/issues/353,readme: quick correction to build instructions,"resolves #346 
",closed,True,2016-10-20 13:01:41,2017-04-10 22:13:17
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/352,https://api.github.com/repos/hyperledger/burrow/issues/352,[eris-keys] (maybe) import/export issue: https://github.com/eris-ltd/eris-keys/issues/90,"eris-keys: possible import/export issue: 
for more details see https://github.com/eris-ltd/eris-keys/issues/90
",closed,False,2016-10-20 12:20:20,2017-04-10 22:13:17
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/351,https://api.github.com/repos/hyperledger/burrow/issues/351,glide: update eris/common hash,"develop was broken on changes to git history of common
",closed,True,2016-10-18 15:03:31,2016-10-18 15:27:21
burrow,fabcan,https://github.com/hyperledger/burrow/issues/350,https://api.github.com/repos/hyperledger/burrow/issues/350,[RESTful api] Generate WADL descriptor,"It would be useful to have a WADL (https://en.wikipedia.org/wiki/Web_Application_Description_Language) descriptor of the RESTful API's, I don't think the WADL is a real good human-readable documentation, but it would help integration between the services and any third party that would like to integrate with them (e.g.: it's pretty easy to create auto generated clients based on a WADL descriptor).

The WADL file should be updated any time that the RESTful API's change in any way so that it's easy to recreate every client.

Using Jersey (https://jersey.java.net/) and the 0.11.x API's (listed here: https://monax.io/docs/documentation/db/latest/specifications/api/ ) I've managed to create a Java ErisDB stub and extract (thanks to Jersey)  the WADL file specification; if it is of any use I can share it.
",closed,False,2016-10-18 14:09:31,2018-05-30 10:23:51
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/349,https://api.github.com/repos/hyperledger/burrow/issues/349,client: silence log output from go-rpc,"fixes #347 
",closed,True,2016-10-18 11:48:08,2017-04-10 22:13:17
burrow,fabcan,https://github.com/hyperledger/burrow/issues/348,https://api.github.com/repos/hyperledger/burrow/issues/348,"[Types] Usage of ""return"" attribute in JSON","I'd like to report that being ""return"" a keyword in many programming languages, the automatically serialization/deserialization of entities that use that name as a property name (e.g. the Event entity or the Call struct) would be tricky/impossible.

The only 2 examples that I've seen until now are:
- https://monax.io/docs/documentation/db/latest/specifications/api/#event-types
- https://monax.io/docs/documentation/db/latest/specifications/api/#code-execution-calls

Note for Java users: I managed to avoid this problem with the appropriate `@XmlElement(name=""return"")` annotation, but this restricts my ability to create an automated system that maps the entities to Java.
",closed,False,2016-10-18 10:49:35,2018-04-11 21:12:16
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/347,https://api.github.com/repos/hyperledger/burrow/issues/347,Silence Tendermints logging in eris-client (specifically for eris-pm),,closed,False,2016-10-16 14:56:15,2016-10-19 19:13:15
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/346,https://api.github.com/repos/hyperledger/burrow/issues/346,Update README.md with build instructions,,closed,False,2016-10-16 14:54:13,2018-02-26 14:00:20
burrow,harshasni007,https://github.com/hyperledger/burrow/issues/345,https://api.github.com/repos/hyperledger/burrow/issues/345,Installing Eris on ARM devices failing,"I'm getting the following errors when installing Eris on ARM device. Does Eris support ARM devices?
1) sudo apt-get update 
`W: Failed to fetch https://eris-iot-repo.s3.amazonaws.com/eris-deb/dists/DIST/experimental/binary-armhf/Packages  HttpError403`
`E: Some index files failed to download. They have been ignored, or old ones used instead.`

2) sudo apt-get install eris
     `Reading package lists... Done`
     `Building dependency tree` 
     `Reading state information... Done`
     `E: Unable to locate package eris`
",closed,False,2016-10-15 00:00:01,2016-10-15 13:39:19
burrow,ug93tad,https://github.com/hyperledger/burrow/issues/344,https://api.github.com/repos/hyperledger/burrow/issues/344,Error when building ,"I have the following error (go version is 1.7, docker version 1.12)
# github.com/eris-ltd/eris-db/consensus/tendermint

gohome/src/github.com/eris-ltd/eris-db/consensus/tendermint/local_client.go:36: cannot use (*localClient)(nil) (type *localClient) as type tmspcli.Client in assignment:
    *localClient does not implement tmspcli.Client (missing IsRunning method)
gohome/src/github.com/eris-ltd/eris-db/consensus/tendermint/tendermint.go:125: undefined: proxy.AppConn

NO idea how to fix this
",closed,False,2016-10-14 05:38:30,2016-10-16 14:54:56
burrow,compleatang,https://github.com/hyperledger/burrow/issues/343,https://api.github.com/repos/hyperledger/burrow/issues/343,[Logging] Implement coherent consistent logger,"This logging epic has issues based on the solution outlines of the RFC https://github.com/silasdavis/rfcs/blob/logging/text/0003-logging.md as well as some issues pre-dating the RFC:

| Problem number | Name | Solution outline |
|----------------|------|------------------|
| 1 | Log format | All logging from eris-db should pass through the same (outer) logging library and code path, including logs from dependencies/components. Component logs will be subject to some mapping or embedding within our format. All logging should use a consistent structured format which will be based on something like the Graylog Extensible Log Format (GELF) allowing it to be shipped.|
| 2 | Log structure | Structure logs with consistent metadata including parent context for logs from eris-db components (for example, `[module: rpc/v0, method: broadcast_tx, chain_state: fast_syncing] invalid HEX encoding`, rather than `invalid HEX encoding`).|
| 3 | Log capture | For each dependency we need to centralise the log level, and ideally configure an output adapter that routes through our logging library. This may need a custom component for each different logging library. In the case of dependencies that use a single globabl instance of the go Logger we should use `SetOutput` to capture the output to an io.Writer. |
| 4 | Log output | We should support the at least following logging sinks: stdout, named pipe, files, syslog, and graylog. With a plugin architecture for different sinks (and we will consider fluentd). Each enabled sink will support independent log levels, and where applicable (e.g. for graylog, but not stdout) multiple instances of a logging sink may be configured. |
| 5 | Log volume | We should agree on a standard set and intepretation of log levels and apply this standard to code that we own. For third-party code we should map between a log level set globally and set that level for dependencies. It may make sense to allow the setting of log level per module or hierarchical identifier (see [Log correlation identifiers](#design-ideas)), third party libraries could have all of their logging segregated by such a top-level identifier. We should also allow for the customisation of automatically appended metadata such as datetime format, hostname, log line origin (in source) and verbosity presets can be established for these. |

Tasks from problems 1 - 5 are prefixed with the problem name.
",closed,False,2016-10-13 19:12:48,2017-03-04 04:07:24
burrow,compleatang,https://github.com/hyperledger/burrow/issues/342,https://api.github.com/repos/hyperledger/burrow/issues/342,log,,closed,False,2016-10-13 19:12:02,2016-10-13 19:13:08
burrow,compleatang,https://github.com/hyperledger/burrow/issues/341,https://api.github.com/repos/hyperledger/burrow/issues/341,[Keys] Test locking and unlocking of keys both via command line and API input,"@ebuchman commented on [Tue Nov 03 2015](https://github.com/eris-ltd/eris-keys/issues/29)
",closed,False,2016-10-13 14:51:19,2018-06-26 08:47:28
burrow,compleatang,https://github.com/hyperledger/burrow/issues/340,https://api.github.com/repos/hyperledger/burrow/issues/340,[Docs] Document Keys API,"@NodeGuy commented on [Sun Jan 17 2016](https://github.com/eris-ltd/eris-keys/issues/33)

It's unclear from the README what the purpose of `auth` is.
",closed,False,2016-10-13 14:49:51,2018-06-26 08:43:18
burrow,compleatang,https://github.com/hyperledger/burrow/issues/339,https://api.github.com/repos/hyperledger/burrow/issues/339,[Keys] use standardized daemon logger which should reside in a package in the db repository,We should extend the logging functionality added by the parent epic from db to keys.,closed,False,2016-10-13 14:48:16,2017-05-24 21:38:53
burrow,compleatang,https://github.com/hyperledger/burrow/issues/338,https://api.github.com/repos/hyperledger/burrow/issues/338,[Keys] Remove all cli functionality from eris-keys save for `serve` (to match db),"@compleatang commented on [Fri Aug 26 2016](https://github.com/eris-ltd/eris-keys/issues/64)

**Problem** -- keys is a server. It should be built and tested like one. 

**Solution** -- 
- [ ] remove the crutch of the cli interface
- [ ] refactor the server (audit)
- [ ] better test suite
- [ ] cleanly separate the client library for the server's api from the rest of the repository
",closed,False,2016-10-13 14:47:12,2018-02-26 14:00:20
burrow,compleatang,https://github.com/hyperledger/burrow/issues/337,https://api.github.com/repos/hyperledger/burrow/issues/337,[Tests] Refactor keys tests to match testing sequence across the other modules of the stack,"Standardise keys testing with other testing regimes

@compleatang commented on [Sat Oct 08 2016](https://github.com/eris-ltd/eris-keys/issues/81)
",closed,False,2016-10-13 14:45:39,2018-04-11 21:04:34
burrow,compleatang,https://github.com/hyperledger/burrow/issues/336,https://api.github.com/repos/hyperledger/burrow/issues/336,[Keys] move eris-keys names functionality to eris keys (cli level),"**Problem** -- the idea to have human readable names for keys was good. But currently we're managing that within the keys service's data container which we should be treating as more ephemeral. Keys that I actually want to give names to (maybe `caseyPersonal` or `ceoEris` key or whatever) I'll want to be safe on my host rather than in the containers. 

**Solution** -- 
- [ ] remove the eris-keys names functionality from eris-keys completely and move its logic and tests to cli level.
- [ ] add `eris keys names` for working with names. 
- [ ] think about how we can remove friction for users when they need/want specific keys loaded for specific chains or services.

eris-keys side of https://github.com/eris-ltd/eris-cli/issues/795
",closed,False,2016-10-13 12:58:42,2017-03-04 04:17:37
burrow,compleatang,https://github.com/hyperledger/burrow/issues/335,https://api.github.com/repos/hyperledger/burrow/issues/335,[Keys] Remove mintkey from docker images (once functionality is provided by eris-keys),"@compleatang commented on [Mon Oct 10 2016](https://github.com/eris-ltd/eris-keys/issues/83)
",closed,False,2016-10-13 12:57:44,2017-03-04 04:08:57
burrow,compleatang,https://github.com/hyperledger/burrow/issues/334,https://api.github.com/repos/hyperledger/burrow/issues/334,[Keys] consider making eris-keys key files compatible with ethereum clients,"@Gustav-Simonsson commented on [Wed Sep 09 2015](https://github.com/eris-ltd/eris-keys/issues/24)

To get compatibility between all Ethereum clients we worked out a spec for a common key file: https://github.com/ethereum/wiki/wiki/Web3-Secret-Storage-Definition

While GCM is nice and we probably should have gone with it instead of CTR + MAC, for the moment Ethereum clients generate key files with CTR.

However the current go-ethereum code supports multiple key formats for backwards compatibility; both scrypt and PBKDF2 for KDF and both CTR and CBC for encryption mode. This could be extended to support GCM if defined by the `cipher` field present in version 3 (latest) of the spec.

Would recommend we strive for compatibility between platforms here. This could be done quite easily if eris-keys rebases on go-ethereum's `crypto/key_store_passphrase.go` to pickup version 3 of it's key file format and defines it's GCM mode usage by setting the  `cipher` field to something like `aes-128-gcm` (we use `aes-128-ctr` to denote CTR mode)

---

@ebuchman commented on [Wed Sep 09 2015](https://github.com/eris-ltd/eris-keys/issues/24#issuecomment-138911853)

yes I would love to do this. thanks for the details.

---

@benjaminbollen commented on [Tue May 10 2016](https://github.com/eris-ltd/eris-keys/issues/24#issuecomment-218089612)

@zramsay @VoR0220 @AFDudley shall we post progress on this issue here ?

---

@VoR0220 commented on [Tue May 10 2016](https://github.com/eris-ltd/eris-keys/issues/24#issuecomment-218286447)

yesh
",closed,False,2016-10-13 12:55:23,2018-03-14 12:28:40
burrow,compleatang,https://github.com/hyperledger/burrow/issues/333,https://api.github.com/repos/hyperledger/burrow/issues/333,"[Keys] use of experimental, deprecated go-ethereum entropy function","@Gustav-Simonsson commented on [Wed Sep 09 2015](https://github.com/eris-ltd/eris-keys/issues/23)

Looks like this function was picked up when forking old go-ethereum code: https://github.com/eris-ltd/eris-keys/blob/master/crypto/randentropy/rand_entropy.go#L32

This function was merely intended as an experiment and to discuss merits of XORing in additional sources onto the OS CSPRNG. It was not intended for production use and has since been removed from the code base since we decided the extra complexity and risks that come with it was not worth potential benefits of additional sources in case the OS source through `crypto/rand` is weak.

Would recommend switching to using plain `crypto/rand` helpers currently used in go-ethereum (these where covered by Ethereum's security audits) : https://github.com/ethereum/go-ethereum/blob/master/crypto/randentropy/rand_entropy.go

---

@ebuchman commented on [Wed Sep 09 2015](https://github.com/eris-ltd/eris-keys/issues/23#issuecomment-138912523)

yup I was following this discussion in go-ethereum. is XORing in this kind of information not a standard practice? were actual risks identified? or was it just ""better not add more complexity""? I figured I'd keep it at least as a talking point until I had a better idea why it was removed. Seems like if the host OS generator is compromised (as we've seen it has been a few times), this could be a life saviour.

---

@Gustav-Simonsson commented on [Wed Sep 09 2015](https://github.com/eris-ltd/eris-keys/issues/23#issuecomment-138993881)

Actual, concrete risks where not identified. It was more ""better not add more complexity"". And yes, if the OS source is compromised it could in theory still achieve enough entropy since it's combined with a hard KDF. Was thinking especially of the issue on android with it's bitcoin wallet.

It was mostly informal discussions though, and most people thought the extra complexity was not worth the potential upside in that case.

I still haven't seen a concrete argument why XORing in additional sources (if weak or even completely manipulated) would weaken the original source from crypto/rand - would be interesting to know of there exists specific attack vectors in that scenario.
",closed,False,2016-10-13 12:45:20,2017-03-04 04:16:23
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/332,https://api.github.com/repos/hyperledger/burrow/issues/332,"[Tests] Move testing, releasing, and continuous integration to Jenkins",,closed,False,2016-10-13 11:07:53,2018-02-26 13:52:10
burrow,compleatang,https://github.com/hyperledger/burrow/issues/331,https://api.github.com/repos/hyperledger/burrow/issues/331,[RPC] Implement as much as we can of the web3 HttpProvider specification,,open,False,2016-10-13 00:28:42,2019-02-26 20:55:54
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/330,https://api.github.com/repos/hyperledger/burrow/issues/330,release: correct version tag and remove lingering config file,,closed,True,2016-10-11 19:02:21,2016-10-11 19:08:19
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/329,https://api.github.com/repos/hyperledger/burrow/issues/329,Release 0.12.0-RC3,"# Eris-DB changelog
## 0.12.0-RC3

This release marks the start of Eris-DB as the full permissioned blockchain node
 of the Eris platform with the Tendermint permissioned consensus engine.
 This involved significant refactoring of almost all parts of the code,
 but provides a solid foundation to build the next generation of advanced
 permissioned smart contract blockchains.

 Many changes are under the hood but here are the main externally
 visible changes:
- Features and improvements
  - Upgrade to Tendermint 0.6.0 in-process consensus
  - Support DELEGATECALL opcode in Ethereum Virtual Machine (important for solidity library calls)
  - ARM support
  - Docker image size reduced
  - Introduction of eris-client companion library for interacting with
    eris:db
  - Improved single configuration file for all components written by eris-cm
  - Allow multiple event subscriptions from same host under rpc/tendermint
- Tool changes  
  - Use glide instead of godeps for dependencies
- Testing
  - integration tests over simulated RPC calls
  - significantly improved unit tests
  - the ethereum virtual machine and the consensus engine are now top-level
    components and are exposed to continuous integration tests
- Bugfixes (incomplete list)
  - [EVM] Fix calculation of child CALL gaslimit (allowing solidity library calls to work properly)
  - [RPC/v0] Fix blocking event subscription in transactAndHold (preventing return in Javascript libraries)
  - [Blockchain] Fix getBlocks to respect block height cap
",closed,True,2016-10-11 17:33:34,2017-04-10 11:27:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/328,https://api.github.com/repos/hyperledger/burrow/issues/328,"Revert ""Bump version, but label as development version""","Reverts eris-ltd/eris-db#325
",closed,True,2016-10-11 17:32:39,2016-10-11 17:35:21
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/327,https://api.github.com/repos/hyperledger/burrow/issues/327,docs: suggest corrections to initial changelog,,closed,True,2016-10-11 17:25:08,2016-10-11 17:29:05
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/326,https://api.github.com/repos/hyperledger/burrow/issues/326,gofmt: full sweep on develop,,closed,True,2016-10-11 17:12:36,2016-10-11 17:17:39
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/325,https://api.github.com/repos/hyperledger/burrow/issues/325,"Bump version, but label as development version","Suggest that we merge this before the 0.12.0-RC3 PR to avoid accidentally releasing over the top of the quay image in future. Also suggest that we adopt the convention of sufficing our version on the develop branch with `-develop` so that we never push to a quay tag that ought to be reserved for a real non-development version.
",closed,True,2016-10-11 17:02:21,2017-04-10 11:23:42
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/324,https://api.github.com/repos/hyperledger/burrow/issues/324,Release 0.12.0-RC3,,closed,True,2016-10-11 16:15:40,2016-10-11 17:33:00
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/323,https://api.github.com/repos/hyperledger/burrow/issues/323,Filled in changelog,,closed,True,2016-10-11 15:33:53,2017-04-10 11:27:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/322,https://api.github.com/repos/hyperledger/burrow/issues/322,"blockchain: correct filter condition, also skumtFel, fixes #120",,closed,True,2016-10-11 13:53:17,2016-10-11 14:01:15
burrow,compleatang,https://github.com/hyperledger/burrow/pull/321,https://api.github.com/repos/hyperledger/burrow/issues/321,Feature smaller docker redux,,closed,True,2016-10-11 12:32:05,2016-10-11 12:51:19
burrow,compleatang,https://github.com/hyperledger/burrow/pull/320,https://api.github.com/repos/hyperledger/burrow/issues/320,readme updates,,closed,True,2016-10-11 09:08:20,2016-10-11 11:56:05
burrow,compleatang,https://github.com/hyperledger/burrow/pull/319,https://api.github.com/repos/hyperledger/burrow/issues/319,fix circle problems; push correct image,"circle can't rmi images and so build_tool will fail. 
",closed,True,2016-10-10 19:49:03,2016-10-11 11:53:07
burrow,compleatang,https://github.com/hyperledger/burrow/pull/318,https://api.github.com/repos/hyperledger/burrow/issues/318,utilize a common docker building paradigm across the stack,"conform docker building paradigm to stack paradigm
",closed,True,2016-10-10 02:29:12,2016-10-10 14:58:43
burrow,compleatang,https://github.com/hyperledger/burrow/issues/317,https://api.github.com/repos/hyperledger/burrow/issues/317,[Docker] Remove docker start script,"All the functionality currently provided by the bash wrapper could easily be added to eris-db binary. 

The env checks and ""you did"" logs from [these lines](https://github.com/eris-ltd/eris-db/blob/develop/bin/start_eris_db#L34-L53) should be implemented as Cobra Persistent PreRun functions and attached to the global erisdb cmd struct.

The command parsing code from [these lines](https://github.com/eris-ltd/eris-db/blob/develop/bin/start_eris_db#L55-L87) can simply be cobra subcommands that return the deprecation notice.

The result of removing the start script is that this binary can much more easily fit into the existing stack build/test/deploy binaries and less ""custom"" stuff will need to be added. 
",closed,False,2016-10-09 22:25:03,2016-10-13 01:11:48
burrow,compleatang,https://github.com/hyperledger/burrow/pull/316,https://api.github.com/repos/hyperledger/burrow/issues/316,update readme to route traffic to monax,,closed,True,2016-10-08 20:26:23,2016-10-10 10:42:53
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/315,https://api.github.com/repos/hyperledger/burrow/issues/315,Reintroduce Send and SendAndHold,"Probably shouldn't have been removed.

fixes #298 
fixes #155

Note that the old implementation: https://github.com/eris-ltd/eris-db/pull/114/commits/b2d0b4d402319dbfef914354750bb69dae728025

used:

```
cache := this.mempoolReactor.Mempool.GetCache()
￼acc := cache.GetAccount(pa.Address)
```

whereas we use:

```
cache := this.erisMint.GetState()
￼acc := cache.GetAccount(pa.Address)
```

This follows Call
",closed,True,2016-10-06 21:18:13,2017-04-10 22:13:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/314,https://api.github.com/repos/hyperledger/burrow/issues/314,We were (probably) inadvertently depending on Tendermint's native RPC,"I noticed that transactor was relying on a Tendermint native RPC call `broadcast_tx_sync`:

```
_, err = app.client.Call(""broadcast_tx_sync"", params, &result)
```

One that we no longer support. We could implement it, or we could port it to call our RPC, but then this would still be one RPC making another HTTP request to talk to another RPC in the same process, which makes little sense. It ended up this way as we adopted a cautious approach in the refactor.

I have elected to instead delegate to our existing tested BroadcastTx implementation.

...

This also lead me to look at the history of the 'tendermint' endpoint (running on 46657 by default). This RPC was split into our 'rpc/tendermint' and Tendermint's own native RPC. Since we are running in-process we have no real need to run Tendermint's RPC (and it seems to me less can go wrong if we don't), but transactor was still expecting a Tendermint endpoint (though it looked similar to ours).

I then noticed that we are actually trying to run both our rpc/tendermint and Tendermint's native RPC on the same address and port (46657 by default). This obviously will not work. I think the best thing is to not run the Tendermint native one at all for now.

I have tried to take an approach that either simplifies or leaves things alone. I was tempted to rename/rearrange some config, but the fix works without that so I have avoided it.
",closed,True,2016-10-06 19:34:16,2017-04-10 22:13:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/313,https://api.github.com/repos/hyperledger/burrow/issues/313,Let's not depend on docker,"Goddamn auto-import in Intellij loves to choose docker packages over stdlib, so that's why glide thought we had a docker dependency.

This madness must stop.
",closed,True,2016-10-06 16:03:38,2017-04-10 22:13:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/312,https://api.github.com/repos/hyperledger/burrow/issues/312,Gas limit fix for *CALL (master),"As: https://github.com/eris-ltd/eris-db/pull/310
",closed,True,2016-10-05 12:38:27,2017-04-10 22:13:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/311,https://api.github.com/repos/hyperledger/burrow/issues/311,Gas limit fix for *CALL (0.11),"As: https://github.com/eris-ltd/eris-db/pull/310
",closed,True,2016-10-05 12:38:05,2017-04-10 22:13:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/310,https://api.github.com/repos/hyperledger/burrow/issues/310,Use proper gas limit in *CALL (develop),"This is a fix for some issues that led to the reversion here: https://github.com/eris-ltd/eris-db/pull/308.

And hopefully resolves the gasLimit issue described here: https://github.com/eris-ltd/eris-db/pull/305
",closed,True,2016-10-05 09:46:21,2017-04-10 22:13:15
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/309,https://api.github.com/repos/hyperledger/burrow/issues/309,GasLimit passed - bug fix,"tracks work done on #305 - see pr for more details
- [ ] applied on develop 0.12.0-rc3
- [ ] applied on master 0.12.0 (rc2)
- [ ] applied on 0.11 series
",closed,False,2016-10-05 09:04:31,2017-04-10 22:13:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/308,https://api.github.com/repos/hyperledger/burrow/issues/308,"Revert ""Don't use difference between caller's and callee's gas as the gas limit for the call""","Reverts eris-ltd/eris-db#305

Because I did not run the tests in Godeps/ (and neither did circle) I did not notice the failures in:

`go test ./Godeps/_workspace/src/github.com/tendermint/tendermint/state`

That my change introduces. I will look into this tomorrow but need to revert now.
",closed,True,2016-10-04 23:21:02,2016-10-04 23:33:27
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/307,https://api.github.com/repos/hyperledger/burrow/issues/307,Use gasLimit for DELEGATECALL and test,"as https://github.com/eris-ltd/eris-db/pull/305
",closed,True,2016-10-04 22:35:02,2016-10-04 23:15:19
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/306,https://api.github.com/repos/hyperledger/burrow/issues/306,Use gasLimit for DELEGATECALL and test,"As: https://github.com/eris-ltd/eris-db/pull/305
",closed,True,2016-10-04 22:31:25,2017-04-10 22:13:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/305,https://api.github.com/repos/hyperledger/burrow/issues/305,Don't use difference between caller's and callee's gas as the gas limit for the call,"UPDATE] (04/10/2016) - seems this is a legitimate fix for https://github.com/eris-ltd/eris-pm/issues/212, so:
fixes https://github.com/eris-ltd/eris-pm/issues/212

I had some trouble convincing myself this could really be a bug, because as far as I can see it will have been a bug pretty much forever, and it's kind of fundamental. I think the reason it was not spotted is because we generally make very generous gas allowances, and for reasons I don't understand when EVM `CALL`ing (and friends) the gas allowance for those calls (allowed to the callee) must have been small to that available for the caller.

Explanation:
At the beginning of executing `CALL` and friends (`CALLCODE`, `DELEGATECALL`) we pop off a gasLimit value that the callee should be allotted for its execution:

``` go
gasLimit := stack.Pop64()
```

We make sure the callee is not asking for more gas than the caller, and provided it's not, we pre-emptively remove the full allowance before any computation has occurred (don't worry we'll pay it back later).

``` go
            // Ensure that gasLimit is reasonable
            if *gas < gasLimit {
                return nil, firstErr(err, ErrInsufficientGas)
            } else {
                *gas -= gasLimit
                // NOTE: we will return any used gas later.
            }
```

But then when we make the actual child call we use `gas`, which is now the _difference_ between what caller has allotted and what the callee should be allowed:

``` go
ret, err = vm.Call(callee, acc, acc.Code, args, value, gas)
```

Suppose the caller has 10000 gas, and the caller is allotted (a `gasLimit` of) 9999, then rather than calling with 9999 gas, we are calling with just 1!

For our native contracts we pass a pointer to `gasLimit` (as we should do):

``` go
ret, err = nativeContract(vm.appState, callee, args, &gasLimit)
```

And later we add on the remainder (that wasn't used by the callee):

``` go
            // Handle remaining gas.
            *gas += gasLimit
```

Which seems suggestive enough that this has indeed always been wrong. Unless I'm missing something, which I might be. But I think we should be passing the `gasLimit` we popped off the stack. 
",closed,True,2016-09-29 15:37:19,2016-10-04 21:40:49
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/304,https://api.github.com/repos/hyperledger/burrow/issues/304,Eris node websocket client,,closed,True,2016-09-29 00:41:02,2017-04-10 22:13:15
burrow,compleatang,https://github.com/hyperledger/burrow/pull/303,https://api.github.com/repos/hyperledger/burrow/issues/303,update links in API spec,"add links to js SDK's.

some automatic whitespace cleaning....
",closed,True,2016-09-28 11:24:54,2016-10-03 13:00:58
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/302,https://api.github.com/repos/hyperledger/burrow/issues/302,"client, keys: revert to use of string over []byte, fix stupid errors",,closed,True,2016-09-28 00:09:59,2016-10-03 13:02:14
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/301,https://api.github.com/repos/hyperledger/burrow/issues/301,Add doc generator and fix some cmd help,,closed,True,2016-09-27 17:53:56,2016-09-27 23:27:38
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/300,https://api.github.com/repos/hyperledger/burrow/issues/300,[EVM] String Concatenation fails (invalid Jump Dest / Memory out of bounds),"See https://github.com/eris-ltd/eris-db.js/issues/27 for details.

I've recreated the bug here (https://github.com/eris-ltd/eris-contracts.js/blob/beta/test/integration/failing/%2327.js):

``` javascript

'use strict'

const assert = require('assert')
const Promise = require('bluebird')
const test = require('../../lib/test')

const source = `
  contract twentyseven {
    function getString2() constant returns (string){
        string memory abcde = new string(3);
        return ""a"";
    }
  }
`

it('tests issue #27', function () {
  this.timeout(60 * 1000)

  return test.newContractManager('blockchain').then((contractManager) => {
    const compiled = test.compile(source).twentyseven
    const abi = JSON.parse(compiled.interface)
    const bytecode = compiled.bytecode
    const contractFactory = contractManager.newContractFactory(abi)

    return Promise.fromCallback((callback) =>
      contractFactory.new({data: bytecode}, callback)
    ).then((contract) =>
      Promise.fromCallback((callback) => contract.getString2(callback))
        .then((result) => {
          assert.equal(result, 'a')
        })
    )
  })
})
```
",closed,False,2016-09-27 02:58:04,2018-06-26 10:33:15
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/299,https://api.github.com/repos/hyperledger/burrow/issues/299,erisdb.transactAndHold fails in rc3,"``` shell
curl -H ""Content-Type: application/json"" -X POST -d '{""jsonrpc"":""2.0"",""method"":""erisdb.transactAndHold"",""params"":{""priv_key"":""043133B125C6D574D52A0B6A1446A2BC35FEC48E146F9502323C8044FB8EF36BA3CD2B6DAE2C4C4129341EDFB1F391921A8E2C218233E9"",""address"":"""",""data"":""6060604052603b8060106000396000f3606060405260e060020a600035046360fe47b1811460245780636d4ce63c14602e575b005b6004356000556022565b6000546060908152602090f3"",""gas_limit"":1000000,""fee"":0},""id"":""1""}' 192.168.99.100:32911/rpc
```

yields:

``` JSON
{""result"":null,""error"":{""code"":-32603,""message"":""Error broadcasting transaction: invalid character 'x' in literal true (expecting 'r')""},""id"":""1"",""jsonrpc"":""2.0""}
```
",closed,False,2016-09-26 15:22:27,2017-04-10 22:13:15
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/298,https://api.github.com/repos/hyperledger/burrow/issues/298,erisdb.send RPC missing in rc3,"``` shell
curl -H ""Content-Type: application/json"" -X POST -d '{""jsonrpc"":""2.0"",""method"":""erisdb.send"",""params"":{""priv_key"":""3D3305845A2CDEA61CD8678E7E1945F9A56FBA8CB2DA1F5A5D06448ADDEDD5645806A8BC1372EBCA5B5D2B65B7F86298F41ABCC7E6B6CF977E25127F58268CE2"",""to_address"":""0000000000000000000000000000000000000010"",""amount"":42},""id"":""1""}' http://192.168.99.100:32902/rpc
```

yields

``` JSON
{""result"":null,""error"":{""code"":-32601,""message"":""Method not found: erisdb.send""},""id"":""1"",""jsonrpc"":""2.0""}
```
",closed,False,2016-09-26 15:13:12,2017-04-10 22:13:15
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/297,https://api.github.com/repos/hyperledger/burrow/issues/297,Implemented rpc/v0 network info,"Didn't realise this was missing until recently. Easy enough to implement for release.

fixes #288 
",closed,True,2016-09-23 15:48:09,2017-04-10 22:13:15
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/296,https://api.github.com/repos/hyperledger/burrow/issues/296,eris-db serve help lies about config file name,"Various appearance:

> will start the Eris-DB node based on the configuration file ""server_config.toml""

Just needs tweaking
",closed,False,2016-09-23 13:24:06,2016-10-06 15:11:20
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/295,https://api.github.com/repos/hyperledger/burrow/issues/295,client: add status command,,closed,True,2016-09-23 12:07:52,2016-09-27 13:22:13
burrow,compleatang,https://github.com/hyperledger/burrow/issues/294,https://api.github.com/repos/hyperledger/burrow/issues/294,[Consensus] Treat networks with less than five validators more forcibly,"Networks that have less than five BFT nodes are very different animals from more distributed networks. Also such networks are typically dev environments where extreme customization of network and consensus settings likely gets in the way. 

Erisdb (perhaps with the help of cm and cli) needs to treat these networks in a manner which is more opinionated than currently is done. 

For example fast sync. It should really never be on in smaller networks. There are probably other examples that we should add here. 

The end result will be a much better developer experience. 
",closed,False,2016-09-22 22:27:13,2018-04-11 21:04:57
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/293,https://api.github.com/repos/hyperledger/burrow/issues/293,DO NOT MERGE: Move tendermint validator to consensus tendermint,"POST rc3

consideration of avoiding exposure for tendermint types; but if we do it with an interface for tendermints validator; then logically you'd do it for all types defined by tendermint; which leaves no generalisation.

This seems to be a bad direction, rather I'd keep interfaces behaviorally, recasting the type into e-dnb types at a single interface; in this case consensusEngine
",closed,True,2016-09-22 13:01:00,2016-11-03 10:32:53
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/292,https://api.github.com/repos/hyperledger/burrow/issues/292,"client: ListValidators, GetName",,closed,True,2016-09-22 12:58:13,2016-09-22 13:48:39
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/291,https://api.github.com/repos/hyperledger/burrow/issues/291,[Architecture] Bring Manager to the foreground in design,"Looking at the current architecture, it seems that the 'manager' concept is not as developed as it might be. By this I mean that within the erismint manager, there is really only a tendermint application (eris-mint.go) and no overarching manager.

I think there would be an advantage in re-jigging things a bit to make the manager a stronger concept. Here is my initial proposal:
### Create a manager interface and a managers registry

I would propose a `Manager` interface like:

``` go
type Manager interface {
    NewManagerPipe(managerConfig, consensusConfig *config.ModuleConfig,
        eventSwitch *events.EventSwitch)
}
```

And also a registry of supported managers, currently it would just be 'erismint'. I think we should look to some simple form of dependency injection for inspiration on how to implement this. It seems ideal for the kind of code we have that 'reconfigures' itself depending on config.

`NewCore` would make a single call to `NewManagerPipe` dispatching off the manager config value and setting up an instance of the erismint `manager`. I would propose:

```
rename:    manager/erismint/erismint.go -> manager/erismint/application.go
create:      manager/erismint/manager.go
```

The manager would be passed consensus and manager config and would be responsible for ensuring compatibility and creating a pipe containing ConsensusEngine, Blockchain, and Application, before returning to `NewCore`.

A specific `Manager` will know about the types of application engine and consensus engine it supports, so this is where we would aim to centralise the mixing of concerns in this regard. Erismint `Genesis` is one object subject to such a mixing, so this could be defined and initialised at this level, as could the associated `ChainId`. Another possibility is logic for bonding/unbonding, where Erismint Application might want to ""run stuff up the chain"" to manager to issue commands to consensus (I'm not sure this is something we want or not). It would also serve as a place to hook in things like replicating to a queryable SQL store, where we are interested in application state and consensus events (just the place to hook - the actual logic would be its own module).
### The relation between Pipe and Manager?

There are some similarities between the current erismint/pipe.go and and the erismint/manager.go I am proposing in terms of what they internally have access to. It might be possible to collapse the implementation of erismint Pipe and erismint Manager to a single concrete type, but I am not sure if this is desirable. In any case I think the interfaces would still make sense as separate entities: Pipe is how the components of a Manager talk to the outside world (via RPC etc), Manager is how the components are assembled and talk to each other (instigated by Manager).
### Arguments for doing this
- It closely resembles what we originally spoke about when outlining the concept of Manager, and it is a natural extension/reorganisation of what we already have.
- It gives a clearer logical branching at startup:

```
Core --> Bootstrap Manager --> Manager checks compatibility --> Manager creates specific ConsensusEngine, Application, and Blockchain that are interdependent
```

rather than the isolation at initialisation of erismint application and tendermint consensus even though they are dependent on each other (we do two string switches, but they still can't share initialisation values).
- It creates a space to handle 'platform-wide' considerations, that is not generic (like `Core` or `Pipe`), but involves a specific combination of our components . Things like Genesis, Validators, Governance.
- If the matrix of 'supported configurations' over consensus engines, databases, execution engines, etc is sparse and the special treatment needed for particular 'supported' cells in that matrix is somewhat significant then it makes sense for us to thing of a single entry point to a particular configuration rather than to treat our system as some massive cartesian product of components.
",closed,False,2016-09-22 12:50:44,2017-10-04 10:17:37
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/290,https://api.github.com/repos/hyperledger/burrow/issues/290,Eris client part5,,closed,True,2016-09-21 14:05:29,2016-09-21 14:26:07
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/289,https://api.github.com/repos/hyperledger/burrow/issues/289,Make ChainId uniquely determined by GenesisDoc,"We would like the ChainId to be some hash of the genesis state possibly plus some nonce. This is dependent on how we capture and define 'genesis state', for example does it include p2p/Tendermint network starting topology?",closed,False,2016-09-20 12:26:20,2018-02-26 14:00:20
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/288,https://api.github.com/repos/hyperledger/burrow/issues/288,Implement .getNetworkInfo for rpc/v0,"This function is used by rpc/v0 to provide network info:

https://github.com/eris-ltd/eris-db/blob/develop/manager/eris-mint/net.go#L42

It is currently a stub. It needs to be implemented. rpc/tendermint has a similar (but implemented):

https://github.com/eris-ltd/eris-db/blob/develop/manager/eris-mint/pipe.go#L310

Only this does not include 'moniker'. It probably should.
",closed,False,2016-09-20 12:24:13,2016-09-27 10:21:51
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/287,https://api.github.com/repos/hyperledger/burrow/issues/287,Eris client part4,,closed,True,2016-09-19 13:29:33,2016-09-21 14:19:02
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/286,https://api.github.com/repos/hyperledger/burrow/issues/286,Eris client part3,,closed,True,2016-09-18 19:42:30,2016-09-21 14:17:56
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/285,https://api.github.com/repos/hyperledger/burrow/issues/285,Finish testing/fixing remaining RPC methods,"This adds tests and fixes some issues with the previously unimplemented RPC methods:
- `GetBlock`
- `ListValidators`
- `DumpConsensusState`

fixes #216 
fixes #221 
fixes #217 
fixes #220 
fixes #219 
fixes #275 
",closed,True,2016-09-18 13:31:08,2017-04-10 22:13:14
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/284,https://api.github.com/repos/hyperledger/burrow/issues/284,Followup question: sequence number changed in transaction test,"https://github.com/eris-ltd/eris-db/pull/283#discussion-diff-79289536L184

@silasdavis 
",closed,False,2016-09-17 19:25:57,2016-09-19 14:21:53
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/283,https://api.github.com/repos/hyperledger/burrow/issues/283,Unconfirmed transactions are real,"This adds tests for/fixes unconfirmed transactions
",closed,True,2016-09-17 17:59:14,2017-04-10 22:13:14
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/282,https://api.github.com/repos/hyperledger/burrow/issues/282,Eris client part3: QueryContract and QueryContractCode,"IMPORTANT: pulls in early integration test framework, which is incomplete but should not cause problems.  Review that it does not though.

client: correction to Status, and QueryContract and QueryContractCode
",closed,True,2016-09-17 10:29:40,2016-09-17 13:32:32
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/281,https://api.github.com/repos/hyperledger/burrow/issues/281,[not worth merging yet - update] Eris client: integration test framework -- early scratch,,closed,True,2016-09-16 14:33:27,2016-09-17 13:32:33
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/280,https://api.github.com/repos/hyperledger/burrow/issues/280,Implement missing RPC methods,"I have tried to split this PR into three logical commits:

The primary one is the first commit implementing the structure and code paths for the unimplemented RPC methods.

The second tidies up some panics in tx encoding.

The third rationalise the layout of the tests and makes them work with the new structure.

My next PR will have tests for ListUnconfirmedTransactions, and hook in functionality to transactor in rpc/v0.
",closed,True,2016-09-16 14:11:59,2017-04-10 22:13:14
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/279,https://api.github.com/repos/hyperledger/burrow/issues/279,client: rpc Status; evm: sync up Call and CallCode,,closed,True,2016-09-16 13:09:01,2017-04-10 22:13:14
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/278,https://api.github.com/repos/hyperledger/burrow/issues/278,Status() added along with a helpful gofmt,"Signed-off-by: VoR0220 rj@erisindustries.com
",closed,True,2016-09-15 21:00:51,2016-09-16 10:13:34
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/277,https://api.github.com/repos/hyperledger/burrow/issues/277,[Architecture] Improve synchronisation between application-level and blockchain-level genesis hashes,"Both Tendermint and erisdb have a GenesisDoc. We have a ChainId that we want to evolve into 'ChainHash', and to introduce a human-readable ChainName that is not baked into the genesis doc.

When instantiated a chain we probably want to make sure the application-level genesis doc (and chiefly its hash) is bound to/synchronised with/composed of both our genesis.json one and the Tendermint network's one. We are currently asserting that our ChainId and Tendermint's match. This might be enough, but maybe we should use `Tendermint's AppHash []byte` to bind them more tightly, or maybe we should include Tendermint's genesis (or in general ConsensusEngine's GenesisHash) into the erisdb genesis.

The reason for this is we probably want to know if we are are trying to connect to a different consensus network (i.e. if some p2p settings were changed, but genesis.json was kept the same).

While I'm waffling... we should also check that Tendermint will not read from the filesystem to form its genesis doc when erisdb uses an in-memory version, thus allowing desynchronisation:

eris-db genesis hash = blockchain genesis hash + consensus network genesis hash (?) + eris' genesis.json hash

TODO: improve this ticket, just need to mind dump it right now
",closed,False,2016-09-15 14:23:35,2018-02-26 14:00:20
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/276,https://api.github.com/repos/hyperledger/burrow/issues/276,Refactor to consolidate consensus and blockchain at an appropriate level,"> _It hurts less if you pull it off quickly_

This refactor clears the way to implement the remaining unimplemented RPC methods. It consolidates disparate and confusing `Consensus` interfaces into a single interface and allows the `Blockchain` to initialised at the level of `Pipe` initialisation in `NewCore`.

It absorbs the previous eris-mint/blockchain struct into a simpler top level interface (a `BlockStore` with a `ChainId`) and has `Tendermint`(I dropped the 'Node') implement both `Consensus` (I dropped the 'Engine') and `Blockchain`.

As Ben originally suggested the blockchain package because a supporting actor to the consensus and manager packages, much like the account and permission packages.

Implementing the remaining RPC methods will be a matter of adding some methods to the Consensus and Blockchain interfaces and implementing them in Tendermint. 
",closed,True,2016-09-14 17:13:16,2017-04-10 11:27:13
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/275,https://api.github.com/repos/hyperledger/burrow/issues/275,Implement and test consensus_state,"This would be as in https://github.com/eris-ltd/eris-db/blob/develop/rpc/v0/methods.go#L264

Although note that has never been implemented since refactor

Needs to be implemented in both rpc/tendermint and rpc/v0!
",closed,False,2016-09-14 15:59:38,2016-09-18 19:58:09
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/274,https://api.github.com/repos/hyperledger/burrow/issues/274,Implement and plumb-in or refactor manager/eris-mint/consensus,,closed,False,2016-09-14 08:51:23,2016-09-17 17:59:57
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/273,https://api.github.com/repos/hyperledger/burrow/issues/273,RPC test for BlockchainInfo,"fixes #218 
",closed,True,2016-09-12 19:21:27,2017-04-10 22:13:14
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/272,https://api.github.com/repos/hyperledger/burrow/issues/272,Might be running the integration test wrapper when we didn't intend to and multiple times,"This might help with the bind: port already in use issues we sometimes see in circle.
",closed,True,2016-09-12 12:12:58,2017-04-10 22:13:14
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/271,https://api.github.com/repos/hyperledger/burrow/issues/271,[RPC] fails to respond with valid id in JSON-RPC responses,"This request:

``` shell
curl --data '{""jsonrpc"":""2.0"",""method"":""erisdb.getChainId"",""params"":null,""id"":23}' --header ""Content-Type:application/json"" http://192.168.99.100:33367/rpc
```

responds with:

```
{""result"":null,""error"":{""code"":-32700,""message"":""Failed to parse request: json: cannot unmarshal number into Go value of type string""},""id"":"""",""jsonrpc"":""2.0""}
```

but the [JSON-RPC specification](http://www.jsonrpc.org/specification#request_object) states:

> id
> An identifier established by the Client that MUST contain a String, Number, or NULL value if included.  The Server MUST reply with the same value in the Response object if included.
",closed,False,2016-09-12 05:29:56,2018-02-26 13:53:09
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/270,https://api.github.com/repos/hyperledger/burrow/issues/270,"[RPC] should not return ""error"": null in JSON-RPC responses","This request:

``` shell
curl --data '{""jsonrpc"":""2.0"",""method"":""erisdb.getChainId"",""params"":null,""id"":""23""}' --header ""Content-Type:application/json"" http://192.168.99.100:33367/rpc
```

responds with:

```
{""result"":{""chain_id"":""blockchain""},""error"":null,""id"":""23"",""jsonrpc"":""2.0""}
```

but the [JSON-RPC specification](http://www.jsonrpc.org/specification#response_object) states:

> error
> This member MUST NOT exist if there was no error triggered during invocation.
",closed,False,2016-09-12 05:24:54,2017-01-31 11:03:58
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/269,https://api.github.com/repos/hyperledger/burrow/issues/269,Make sure command-line arguments expanded correctly,"Minor thing while I notice. In magic bash-land quoting the at-sign makes sure arguments containing spaces are properly expanding in the expansion when they are passed to the underlying command.
",closed,True,2016-09-09 21:24:17,2017-04-10 22:13:14
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/268,https://api.github.com/repos/hyperledger/burrow/issues/268,Fix blocking event subscription in transactAndHold (develop),"Same as: #266 for develop
",closed,True,2016-09-09 19:18:26,2017-04-10 22:13:14
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/267,https://api.github.com/repos/hyperledger/burrow/issues/267,Fix blocking event subscription in transactAndHold (0.11.x),"Same as: https://github.com/eris-ltd/eris-db/pull/266 for 0.11-series
",closed,True,2016-09-09 18:47:24,2017-04-10 22:13:14
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/266,https://api.github.com/repos/hyperledger/burrow/issues/266,Fix blocking event subscription in transactAndHold (master),"This resolves: https://support.erisindustries.com/helpdesk/tickets/356

The issue was that we are blocking in an event callback when we try to unsubscribe, which breaks go-events contract: https://github.com/eris-ltd/eris-db/blob/master/Godeps/_workspace/src/github.com/tendermint/tendermint/events/events.go#L157 (handily found in a comment with three **X**s!)

Do we want to make this a hotfix? 

I have tested this using the code from the support ticket. It would be nice to cement this with a unit test. This could go in `test/transacting/transacting_test.go`. But it looks to me like mocking this out will be a far amount of effort and I am conscious of other priorities given that we will probably replace go-events. Open to suggestions.

Will port this to develop, and I will also make a suggestion for improvement to go-events.
",closed,True,2016-09-09 14:57:24,2017-04-10 22:13:13
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/265,https://api.github.com/repos/hyperledger/burrow/issues/265,"[Eris-Client] Bytecode X deployed at address Y, Block Z","Problem: Verification in Eris-PM, down the line, how do we ensure that these values are in Block X at the specified address. This is critical for contract verification. 

Solution: Simple function that returns whether or not bytecode X was deployed at address Y, Block Z for this chain. 
",closed,False,2016-09-07 18:05:42,2016-09-08 09:14:10
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/264,https://api.github.com/repos/hyperledger/burrow/issues/264,[Client] list needs for eris-pm,"expose rpc calls through eris-client library
- [x] call, callcode (which will be renamed to QueryContract and QueryContractCode)
- [x] LatestBlockHeight

please append here more notes as needed; closing #256 and #257 as result
",closed,False,2016-09-07 14:33:55,2016-11-24 16:41:30
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/263,https://api.github.com/repos/hyperledger/burrow/issues/263,add backwards support to deployment of 0.11.4 branch,"circle: add backwards support to deployment of 0.11.4 branch

redoes #262 
",closed,True,2016-09-07 13:23:11,2017-04-10 22:13:13
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/262,https://api.github.com/repos/hyperledger/burrow/issues/262,Provide backwards support to 0.11.4 by maintaining deployment branch,"circle: add backwards support to deployment of 0.11.4 branch
",closed,True,2016-09-07 12:49:06,2016-09-07 13:18:29
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/261,https://api.github.com/repos/hyperledger/burrow/issues/261,Issue260 delegatecall on develop,"fixes #260 
",closed,True,2016-09-07 11:02:08,2017-04-10 22:13:13
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/260,https://api.github.com/repos/hyperledger/burrow/issues/260,Fix delegatecall on 0.12 (develop),"- addresses delegate call on develop; track in #259
- follow fix on issue #244; pr #247 done for master
",closed,False,2016-09-07 09:46:16,2016-09-07 11:15:00
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/259,https://api.github.com/repos/hyperledger/burrow/issues/259,List hotfixes that went into master; but need to be carried over on develop,"- [x] metablock #120 
- [x] delegate call #244 #247; see #261 
- [x] nested factory generation is not persisted #164
- [x] please append ...
",closed,False,2016-09-06 14:02:31,2016-11-07 10:52:44
burrow,somak12,https://github.com/hyperledger/burrow/issues/258,https://api.github.com/repos/hyperledger/burrow/issues/258,Unable to return array from contract,"Hi,
I have a simple contract which returns few arrays. Works fine in the online solidity compiler. But after deploying it to the chain and invoking it from the app.js its giving the following error. 

Have found a bug related to this https://github.com/eris-ltd/eris-db.js/issues/27

Any particular reason why this error is occurring?  

My contract is like: 
```javascript
function getMarket() constant returns(uint[], uint[], uint[], uint[]) {
    uint[] memory optionIDs = new uint[](20);
    uint[] memory strikes_ = new uint[](20);
    uint[] memory positions_ = new uint[](20);
    uint[] memory cashes = new uint[](20);
    uint z = 0;
      for (uint i=0; i<10; i++) {
        optionIDs[i] = i;
        strikes_[i] = i+10;
        positions_[i] = i+100;
        cashes[i] = i+50;
        z++;
      }
    return (optionIDs, strikes_, positions_, cashes);
  }
```

Error is:
```
[JSON RPC 2.0 Error] Message Id: 1, (INTERNAL_ERROR) - Error when transacting: Memory out of bounds
[Error: Error when transacting: Memory out of bounds]
Error callback from sendTransaction

/home/azureuser/.eris/apps/test/app.js:50
    if (error) { throw error; }
                       ^
Error: Error when transacting: Memory out of bounds
    at /home/azureuser/.eris/apps/test/node_modules/eris-contracts/node_modules/eris-db/lib/rpc/http.js:79:22
    at httpRequest.onreadystatechange (/home/azureuser/.eris/apps/test/node_modules/eris-contracts/node_modules/eris-db/lib/rpc/http.js:103:17)
    at dispatchEvent (/home/azureuser/.eris/apps/test/node_modules/eris-contracts/node_modules/eris-db/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:572:25)
    at setState (/home/azureuser/.eris/apps/test/node_modules/eris-contracts/node_modules/eris-db/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:591:14)
    at IncomingMessage.<anonymous> (/home/azureuser/.eris/apps/test/node_modules/eris-contracts/node_modules/eris-db/node_modules/xmlhttprequest/lib/XMLHttpRequest.js:431:13)
    at IncomingMessage.EventEmitter.emit (events.js:117:20)
    at _stream_readable.js:920:16
    at process._tickCallback (node.js:415:13)
```
",closed,False,2016-09-06 10:04:27,2018-03-03 11:08:26
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/257,https://api.github.com/repos/hyperledger/burrow/issues/257,Needed params from chain status,"Needed the latest block height, so I plopped that in there. 
",closed,True,2016-09-05 19:53:39,2017-04-10 22:13:13
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/256,https://api.github.com/repos/hyperledger/burrow/issues/256,Simulated call,"Attempts to run a simulated call whereby no actions affect the chain (my source for this is how they were done previously, but I am more than open to an alternative suggestion)
",closed,True,2016-09-05 19:32:29,2016-09-07 14:34:21
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/255,https://api.github.com/repos/hyperledger/burrow/issues/255,Remove deprecated -f docker flag,,closed,True,2016-09-02 11:38:49,2016-09-02 11:47:38
burrow,jasonklein,https://github.com/hyperledger/burrow/issues/254,https://api.github.com/repos/hyperledger/burrow/issues/254,Int values not consistent between contracts or accurately represented in a contract,"Setup:

```
Eris CLI version: 0.12.0-rc2
Go version: go1.6 darwin/amd64
Docker version: 1.12.0, build 8eab29e
```

When comparing `int` types returned from `ForeignContract` to `int` types in `CurrentContract`, data that should be equal are not equal (e.g., `int8(x)` from one does not equal `int8(x)` from the other) and are also not as expected (e.g., `int8(0)` from `CurrentContract` prints out as `127`, from `ForeignContract` as `254` (double 127), neither as `0`. This behavior does not present itself for `int` or for `uint` types.

The attached contracts and EPM script ([intTypesTest.zip](https://github.com/eris-ltd/eris-db/files/449641/intTypesTest.zip) - also reproduced below) can be used to reproduce the behavior, by simply running the epm script:

```yaml
##########
# Int Tests
jobs:

- name: deployTest
  job:
    deploy:
      contract: IntTypesTest.sol
      instance: all
      wait: true

- name: runEqualityInt8Test
  job:
    call:
      destination: $deployTest
      data: equalityInt8
      wait: true

- name: runEqualityInt16Test
  job:
    call:
      destination: $deployTest
      data: equalityInt16
      wait: true

- name: runEqualityIntTest
  job:
    call:
      destination: $deployTest
      data: equalityInt
      wait: true

- name: runEqualityInt8toInt
  job:
    call:
      destination: $deployTest
      data: equalityInt8toInt
      wait: true

- name: runShowInt8Test
  job:
    call:
      destination: $deployTest
      data: showInt8
      wait: true

- name: runShowInt16Test
  job:
    call:
      destination: $deployTest
      data: showInt16
      wait: true

- name: runShowIntTest
  job:
    call:
      destination: $deployTest
      data: showInt
      wait: true

- name: runEqualityUint8Test
  job:
    call:
      destination: $deployTest
      data: equalityUint8
      wait: true

- name: runEqualityUint16Test
  job:
    call:
      destination: $deployTest
      data: equalityUint16
      wait: true

- name: runEqualityUintTest
  job:
    call:
      destination: $deployTest
      data: equalityUint
      wait: true

- name: runEqualityUint8toUint
  job:
    call:
      destination: $deployTest
      data: equalityUint8toUint
      wait: true

- name: runShowUint8Test
  job:
    call:
      destination: $deployTest
      data: showUint8
      wait: true

- name: runShowUint16Test
  job:
    call:
      destination: $deployTest
      data: showUint16
      wait: true

- name: runShowUintTest
  job:
    call:
      destination: $deployTest
      data: showUint
      wait: true
```

```javascript
contract IntTypesTest {

	IntReturner intReturner;

	function IntTypesTest() {
		intReturner = new IntReturner();
	}

	function equalityInt8() returns (string) {
		return intReturner.returnInt8() == int8(0) ? ""Returned int8(0) == this int8(0)"" : ""Returned int8(0) != this int8(0)"";
	}

	function equalityInt16() returns (string) {
		return intReturner.returnInt16() == int16(0) ? ""Returned int16(0) == this int16(0)"" : ""Returned int16(0) != this int16(0)"";
	}

	function equalityInt() returns (string) {
		return intReturner.returnInt() == int(0) ? ""Returned int(0) == this int(0)"" : ""Returned int(0) != this int(0)"";
	}

	function equalityInt8toInt() returns (string) {
		return intReturner.returnInt8() == int(0) ? ""Returned int8(0) == this int(0)"" : ""Returned int8(0) != this int(0)"";
	}

	function showInt8() returns (int8[2]) {
		return [intReturner.returnInt8(), int8(0)];
	}

	function showInt16() returns (int16[2]) {
		return [intReturner.returnInt16(), int16(0)];
	}

	function showInt() returns (int[2]) {
		return [intReturner.returnInt(), int(0)];
	}

	function equalityUint8() returns (string) {
		return intReturner.returnUint8() == uint8(0) ? ""Returned uint8(0) == this uint8(0)"" : ""Returned uint8(0) != this uint8(0)"";
	}

	function equalityUint16() returns (string) {
		return intReturner.returnUint16() == uint16(0) ? ""Returned uint16(0) == this uint16(0)"" : ""Returned uint16(0) != this uint16(0)"";
	}

	function equalityUint() returns (string) {
		return intReturner.returnUint() == uint(0) ? ""Returned uint(0) == this uint(0)"" : ""Returned uint(0) != this uint(0)"";
	}

	function equalityUint8toUint() returns (string) {
		return intReturner.returnUint8() == uint(0) ? ""Returned uint8(0) == this uint(0)"" : ""Returned uint8(0) != this uint(0)"";
	}

	function showUint8() returns (uint8[2]) {
		return [intReturner.returnUint8(), uint8(0)];
	}

	function showUint16() returns (uint16[2]) {
		return [intReturner.returnUint16(), uint16(0)];
	}

	function showUint() returns (uint[2]) {
		return [intReturner.returnUint(), uint(0)];
	}
}

contract IntReturner {
	bytes32 cat = ""cat"";
	
	function returnInt8() returns (int8) {
		return int8(0);
	}
	
	function returnInt16() returns (int16) {
		return int16(0);
	}

	function returnInt() returns (int) {
		return int(0);
	}

	function returnUint8() returns (uint8) {
		return uint8(0);
	}
	
	function returnUint16() returns (uint16) {
		return uint16(0);
	}

	function returnUint() returns (uint) {
		return uint(0);
	}
}
```

Below is the output from running the epm script. N.B.: no `assert` jobs are employed; and `int8(0)` is compared to `int(0)` because that was the original comparison that led to realizing the issue.

```
jasonbanks random-for-testing $ eris pkgs do -c $chain -a $addr -l $local
Performing action. This can sometimes take a wee while
Executing Job                                 defaultAddr
Executing Job                                 deployTest
Deploying Contract                       name=IntReturner
                                         addr=225DF640A77D8B7B00F2699D71765D5052B9F3A2
Deploying Contract                       name=IntTypesTest
                                         addr=1C4930D27B55604D279C01DA7E3A661A50C6FF0E
Executing Job                                 runEqualityInt8Test
INFO[0005] Hit UnpackProcessType                        
Return Value                                  Returned int8(0) != this int8(0)
Executing Job                                 runEqualityInt16Test
INFO[0007] Hit UnpackProcessType                        
Return Value                                  Returned int16(0) != this int16(0)
Executing Job                                 runEqualityIntTest
INFO[0009] Hit UnpackProcessType                        
Return Value                                  Returned int(0) == this int(0)
Executing Job                                 runEqualityInt8toInt
INFO[0012] Hit UnpackProcessType                        
Return Value                                  Returned int8(0) != this int(0)
Executing Job                                 runShowInt8Test
INFO[0014] Hit UnpackProcessType                        
INFO[0014] Hit UnpackProcessType                        
Return Value                                  [254,127]
Executing Job                                 runShowInt16Test
INFO[0016] Hit UnpackProcessType                        
INFO[0016] Hit UnpackProcessType                        
Return Value                                  [65534,32767]
Executing Job                                 runShowIntTest
INFO[0018] Hit UnpackProcessType                        
INFO[0018] Hit UnpackProcessType                        
Return Value                                  [0,0]
Executing Job                                 runEqualityUint8Test
INFO[0020] Hit UnpackProcessType                        
Return Value                                  Returned uint8(0) == this uint8(0)
Executing Job                                 runEqualityUint16Test
INFO[0022] Hit UnpackProcessType                        
Return Value                                  Returned uint16(0) == this uint16(0)
Executing Job                                 runEqualityUintTest
INFO[0024] Hit UnpackProcessType                        
Return Value                                  Returned uint(0) == this uint(0)
Executing Job                                 runEqualityUint8toUint
INFO[0026] Hit UnpackProcessType                        
Return Value                                  Returned uint8(0) == this uint(0)
Executing Job                                 runShowUint8Test
INFO[0028] Hit UnpackProcessType                        
INFO[0028] Hit UnpackProcessType                        
Return Value                                  [0,0]
Executing Job                                 runShowUint16Test
INFO[0030] Hit UnpackProcessType                        
INFO[0030] Hit UnpackProcessType                        
Return Value                                  [0,0]
Executing Job                                 runShowUintTest
INFO[0032] Hit UnpackProcessType                        
INFO[0032] Hit UnpackProcessType                        
Return Value                                  [0,0]
```
",closed,False,2016-09-01 12:59:14,2018-05-30 10:09:08
burrow,compleatang,https://github.com/hyperledger/burrow/issues/253,https://api.github.com/repos/hyperledger/burrow/issues/253,[RPC] CallTx not getting added to chain when used from JS libs,"Currently am reviewing @NodeGuy 's benchmark application https://github.com/eris-ltd/benchmarks against edb-rc3. The relevant code at the JS level is here -> https://github.com/eris-ltd/benchmarks/blob/master/lib/index.js#L112-L115

After putting a bunch of tracers in the code I get output that looks like this:

```
Transact
G[94 95 31 217 54 225 47 60 60 172 109 236 180 139 144 74 96 149 20 22]
[]
96 96 96 64 82 96 59 128 96 16 96 0 57 96 0 243 96 96 96 64 82 96 224 96 2 10 96 0 53 4 99 96 254 71 177 129 20 96 36 87 128 99 109 76 230 60 20 96 46 87 91 0 91 96 4 53 96 0 85 96 34 86 91 96 0 84 96 96 144 129 82 96 32 144 243]
1000000
0
SignTx
I'm a call TX
PPubKeyEd25519{0208C10BA9E59522F5EF2E3C134C9BFA552478B7C6E515C6364D7AD051F977E4}
[]
96 96 96 64 82 96 59 128 96 16 96 0 57 96 0 243 96 96 96 64 82 96 224 96 2 10 96 0 53 4 99 96 254 71 177 129 20 96 36 87 128 99 109 76 230 60 20 96 46 87 91 0 91 96 4 53 96 0 85 96 34 86 91 96 0 84 96 96 144 129 82 96 32 144 243]
1000000
0
/5096D9D3C7CD.../
<CallTx{TxInput{5E5F1FD936E12F3C3CAC6DECB48B904A60951416,1,1,/5096D9D3C7CD.../,PubKeyEd25519{0208C10BA9E59522F5EF2E3C134C9BFA552478B7C6E515C6364D7AD051F977E4}} -> : 6060604052603b8060106000396000f3606060405260e060020a600035046360fe47b1811460245780636d4ce63c14602e575b005b6004356000556
022565b6000546060908152602090f3}
eris-mint's BroadcastTX
<CallTx{TxInput{5E5F1FD936E12F3C3CAC6DECB48B904A60951416,1,1,/5096D9D3C7CD.../,PubKeyEd25519{0208C10BA9E59522F5EF2E3C134C9BFA552478B7C6E515C6364D7AD051F977E4}} -> : 6060604052603b8060106000396000f3606060405260e060020a600035046360fe47b1811460245780636d4ce63c14602e575b005b6004356000556
022565b6000546060908152602090f3}
After go wire's WriteBinary
vmap[tx:020101145e5f1fd936e12f3c3cac6decb48b904a6095141600000000000000010101015096d9d3c7cdb310bd21a183041c72acc2ae91a0e5eb859cca0ed07973ea40e99c73f9df43d1800b184a3a00a65c28de4048c64143d4e04511c6b5548261560a010208c10ba9e59522f5ef2e3c134c9bfa552478b7c6e515c6364d7ad051f977e4000000000000
0f42400000000000000000014b6060604052603b8060106000396000f3606060405260e060020a600035046360fe47b1811460245780636d4ce63c14602e575b005b6004356000556022565b6000546060908152602090f3]
6invalid character 'x' in literal true (expecting 'r')
XError broadcasting transaction: %vinvalid character 'x' in literal true (expecting 'r')
```

This seems to imply that somewhere either during the signing of the TX or in go-wire's WriteBinary function that we are not signing or writing for the wire correctly. The tx getting sent is a dead simple send and I cannot find anything within the code that would be a `literal true`...
",closed,False,2016-09-01 10:11:59,2018-04-11 21:13:20
burrow,compleatang,https://github.com/hyperledger/burrow/issues/252,https://api.github.com/repos/hyperledger/burrow/issues/252,[RPC] Js Libs cause edb to `panic`,"Currently all clients of the edb rpc need to be able to query the chain-id that the node is running. Before we ship 0.12.0 we need this line implemented... https://github.com/eris-ltd/eris-db/blob/develop/manager/eris-mint/pipe.go#L104

In preliminary testing, changing it to something like the below cured the panic.

``` go
    blockchain := newBlockchain(moduleConfig.ChainId, moduleConfig.GenesisFile, (BlockStore)(nil))
```
",closed,False,2016-09-01 10:09:45,2017-04-10 22:13:13
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/251,https://api.github.com/repos/hyperledger/burrow/issues/251,Update dockerfile for armhf according to recent update for normal dockerfile,"apply https://github.com/eris-ltd/eris-db/pull/250 to dockerfile.armhf
",closed,False,2016-09-01 09:22:47,2017-03-04 04:10:07
burrow,compleatang,https://github.com/hyperledger/burrow/pull/250,https://api.github.com/repos/hyperledger/burrow/issues/250,significantly reduce build time of Dockerfile,,closed,True,2016-09-01 00:37:15,2016-09-01 09:21:50
burrow,compleatang,https://github.com/hyperledger/burrow/issues/249,https://api.github.com/repos/hyperledger/burrow/issues/249,[Core] Fix console issues when running eris-db in a docker container.,"Log snippet when running in a docker container:

```
[36mDBUG[08-31|22:26:47] Broadcast                                module=p2p channel=20 msg=""{ConsensusMessage:[CommitStep H:3 BP:PartSet{T:1 FB2AF0A7C038} BA:BA{1:X}]}""                                                                                                        [1113/9642]
�NOTE[08-31|22:26:47] Finalizing commit of block with 0 txs    module=consensus height=3 hash=16BAA4E5362A5FBB9B16510CCDDD154D72BA2B5D
%INFO[08-31|22:26:47] Block{

  Header{
    ChainID:        slams
    Height:         3
6    Time:           2016-08-31 22:26:47.932 +0000 UTC
    NumTxs:         0
=    LastBlock:      F0F58EB905A3086D8472DECA876A5852BC42035F
.    LastBlockParts: PartSet{T:1 E05823CF3B48}
=    LastCommit:     7A7CB4F4F084F799E712C99F1164ED331C8AEAF6
    Data:           
=    Validators:     F9C96121AB834E8E41963963524FEA1363FBCEEC
=    App:            ADD8D2B14D6E52017F8D3B48140C8CFC25A0D289
-  }#16BAA4E5362A5FBB9B16510CCDDD154D72BA2B5D
  Data{

  }#

  Commit{
a    Precommits: Vote{2/00/2(Precommit) F0F58EB905A3#PartSet{T:1 E05823CF3B48} /ECD68729C086.../}
-  }#7A7CB4F4F084F799E712C99F1164ED331C8AEAF6
E}#16BAA4E5362A5FBB9B16510CCDDD154D72BA2B5D module=consensus
�INFO[08-31|22:26:47] TODO: Do something with changedValidators module=state LOG15_ERROR= LOG15_ERROR=""Normalized odd number of arguments by adding nil""
`INFO[08-31|22:26:47] ExecBlock got 0 valid txs and 0 invalid txs module=state
0Commit block                      blockheight=3
0Reset checkCache                          txs=0
aDBUG[08-31|22:26:47] Commit.Log: Success                      module=consensus
qINFO[08-31|22:26:47] Recheck txs                              module=mempool numtxs=0
rDBUG[08-31|22:26:47] addRound(round)                          module=consensus round=0
[36mDBUG[08-31|22:26:47] Broadcast                                module=p2p channel=20 msg=""{ConsensusMessage:[NewRoundStep H:4 R:0 S:RoundStepNewHeight LCR:0]}""
DBUG[08-31|22:26:47] Received tick                            module=consensus old_ti=""{Duration:3s Height:3 Round:0 Step:RoundStepPropose}"" new_ti=""{Duration:999.893688ms Height:4 Round:0 Step:RoundStepNewHeight}""
�DBUG[08-31|22:26:47] Scheduling timeout                       module=consensus dur=999.893688ms height=4 round=0 step=RoundStepNewHeight
```

log snippet when running natively:

```
DBUG[09-01|00:31:49] Received tick                            module=consensus old_ti=""{Duration:967.662674ms Height:1 Round:0 Step:RoundStepNewHeight}"" new_ti=""{Duration:3s Height:1 Round:0 Step:RoundStepPropose}""
DBUG[09-01|00:31:49] Scheduling timeout                       module=consensus dur=3s height=1 round=0 step=RoundStepPropose
INFO[09-01|00:31:49] Signed proposal                          module=consensus height=1 round=0 proposal=""Proposal{1/0 PartSet{T:1 DEF69A86F6CF} -1 /34A5E0B66ACE.../}""
DBUG[09-01|00:31:49] Signed proposal block: Block{
  Header{
    ChainID:        slams
    Height:         1
    Time:           2016-09-01 00:31:49.241527508 +0200 CEST
    NumTxs:         0
    LastBlock:      
    LastBlockParts: PartSet{T:0 000000000000}
    LastCommit:     
    Data:           
    Validators:     FA973C023A81A5A4383832621F06FBDDC56DDD9A
    App:            
  }#56AE571CE37953EF38934A049584C5212665A4B2
  Data{

  }#
  Commit{
    Precommits: 
  }#
}#56AE571CE37953EF38934A049584C5212665A4B2 module=consensus
DBUG[09-01|00:31:49] Broadcast                                module=p2p channel=20 msg=""{ConsensusMessage:[NewRoundStep H:1 R:0 S:RoundStepPropose LCR:-1]}""
INFO[09-01|00:31:49] Received complete proposal block         module=consensus height=1 hash=56AE571CE37953EF38934A049584C5212665A4B2
INFO[09-01|00:31:49] enterPrevote(1/0). Current: 1/0/RoundStepPropose module=consensus
```
",closed,False,2016-08-31 22:48:11,2016-11-24 16:11:05
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/248,https://api.github.com/repos/hyperledger/burrow/issues/248,Eris client test,"to be reviewed and merged together with #187 
- [x] revisit circle tests, and carry over work from eris-cm on integration framework testing
- [ ] test eris-client at integration level
",closed,True,2016-08-31 00:08:39,2016-09-16 14:35:34
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/247,https://api.github.com/repos/hyperledger/burrow/issues/247,[REVIEW] issue244 delegatecall,"this is for communication, review and testing purposes only.  Do not merge this into master, until we have properly reviewed and tested
",closed,True,2016-08-26 15:36:08,2017-04-10 22:13:13
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/246,https://api.github.com/repos/hyperledger/burrow/issues/246,[RPC] Make LogN calls queryable without replaying all blocks ,"Problem: It would appear that currently, e-db tries to handle everything from the state root and doesn't exactly record event logs in a way that's similar to Eth's...which leads to problems for how users expect to interact with our chain. 

I'm not certain of the solution at this point and time. I will leave that for the E-DB team to figure out. Essentially the way the EVM does events is by registering a call and logging whatever information via a Keccak hash of up to 4 indexed parameters (Log1, 2, 3, 4) into the current block of the chain. Everything else is logged as the byte string. This enables one to sync through the entire history of the chain and gather cumulative logs, or watch the chain and await for a log to fire off and respond accordingly...in addition, this they are near free in the Ethereum world so they are heavily used there.  

Geth implementation:
https://github.com/ethereum/go-ethereum/blob/290e851f57f5d27a1d5f0f7ad784c836e017c337/core/vm/instructions.go#L623
https://github.com/ethereum/go-ethereum/blob/master/core/vm/log.go

ABI Formal Description:
https://github.com/ethereum/wiki/wiki/Ethereum-Contract-ABI#events

This SO answer for useful reading: 
http://ethereum.stackexchange.com/questions/1302/where-do-contract-event-logs-get-stored-in-the-ethereum-architecture
",closed,False,2016-08-25 16:36:36,2018-05-30 10:09:46
burrow,dennismckinnon,https://github.com/hyperledger/burrow/issues/245,https://api.github.com/repos/hyperledger/burrow/issues/245,Retrieve log of transactions/ solidity events since block X,"This has been requested by several customers and i believe is not currently possible. Sure its expensive and _kinda of_ excessive but customer is always right...
",closed,False,2016-08-25 15:20:49,2018-04-11 21:05:34
burrow,VoR0220,https://github.com/hyperledger/burrow/issues/244,https://api.github.com/repos/hyperledger/burrow/issues/244,Need Functionality for Delegate Call,"Currently the develop branch is missing a critical opcode that the solidity compiler uses when talking to libraries, and that opcode is called DelegateCall. I have put in a PR for it over in #243 but it is not complete and there is functionality for it that can be found fairly easily in the go-ethereum space (I can't seem to translate the stack language atm so I'll leave that to you two unless you have ideas for me to contribute). https://github.com/ethereum/go-ethereum/search?utf8=%E2%9C%93&q=delegatecall
",closed,False,2016-08-24 21:42:20,2017-04-10 22:13:13
burrow,VoR0220,https://github.com/hyperledger/burrow/pull/243,https://api.github.com/repos/hyperledger/burrow/issues/243,Update opcodes.go,"- includes delegatecall opcode. May need to include necessary changes in other files but this is a critical component for library usage and needs to definitely be implemented in the evm. 
",closed,True,2016-08-24 18:47:03,2017-04-10 22:13:13
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/242,https://api.github.com/repos/hyperledger/burrow/issues/242,"Separate integration tests from unit tests by tag, and fix remaining RPC tests","The approach here is to use the build tag `integration` to prevent these from running with a default invocation of `go test`. For example see: https://divan.github.io/posts/integration_testing/.

To run integration tests use:

```
go test -v -tags integration ./rpc/tendermint/test
```

~~So for the time being, these won't be run on Circle. In due course we will run them on Jenkins.~~

I have enabled the tests on circle after talking with Ben, but they are run with separately using the build tag.

I have also fixed the remaining tests that were consistently failing. I've made a couple of changes aiming to improve test stability, but we may still see some flakes, in which case I will try to fix or failing that separate persistently failing tests with further.

fixes #204.
fixes #215.
fixes #203.
fixes #202.

Also re-enabled and fixed ./event tests, so:

fixes #234.
fixes #238.
",closed,True,2016-08-23 15:26:43,2017-04-10 22:13:13
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/241,https://api.github.com/repos/hyperledger/burrow/issues/241,rpc/tendermint: silence TestHTTPNameReg as it fails intermittently,,closed,True,2016-08-23 14:08:58,2017-04-10 22:13:13
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/240,https://api.github.com/repos/hyperledger/burrow/issues/240,version: correct develop to v0.12.0-rc3,"- correct version on develop to v0.12.0-rc3
- improve the assertion of modules (specifically consensus/tendermint) to read semantic version of dependency from vendored source code, and assert whether it is compatible with the expected version.
- also addresses deprecation item in https://github.com/eris-ltd/eris-db/issues/236
",closed,True,2016-08-23 13:50:18,2017-04-10 22:13:13
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/239,https://api.github.com/repos/hyperledger/burrow/issues/239,testing: hard-cut on making the CI green,"track re-enabling in issue #238
",closed,True,2016-08-22 17:52:25,2017-04-10 22:13:13
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/238,https://api.github.com/repos/hyperledger/burrow/issues/238,Make it go green,"Not having the CircleCi test green on the existing builds and tests, because of lingering tests creates a risk of regression that is greater at this point than disabling the remaining tests to be addressed.

These tests have been disabled in `/rpc/tendermint` to make the CI go green:
- [x] testHTTPGetAccount
- [x] testHTTPBroadcastTx
- [x] testHTTPGetStorage
- [x] testHTTPCallCode
- [x] testHTTPCallContract
- [x] testHTTPNameReg
- [x] testJSONGetStorage
- [x] testJSONCallContract

and the tests in `/event` have a compilation problem that was introduced because CI has been red; which is the final drop to make this call:
- [x] `/event`
",closed,False,2016-08-22 17:35:44,2016-08-29 09:13:06
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/237,https://api.github.com/repos/hyperledger/burrow/issues/237,"Fix mapAndValues and even write some, like, test",,closed,True,2016-08-22 16:30:25,2017-04-10 22:13:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/236,https://api.github.com/repos/hyperledger/burrow/issues/236,[Consensus] Update tendermint engine to 0.7.x,"- [ ] Tendermint has moved from to 0.7
- [x] deprecate `TENDERMINT_VERSION = 0.5.0` as now unused
- [x] assert on `eris-db-<semver>` from config file
",closed,False,2016-08-22 14:47:51,2017-03-04 04:10:32
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/235,https://api.github.com/repos/hyperledger/burrow/issues/235,Use a random subscription id as rpc/v0 does on rpc/tendermint,"Fixes #177.
Fixes #172.
Fixes #225.
",closed,True,2016-08-22 11:44:54,2017-04-10 22:13:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/234,https://api.github.com/repos/hyperledger/burrow/issues/234,Events mock test is broken;,"Events mock test is broken, due to previously merged changes.  Good showcase for the urgent need to get the full test suite to green, as a regression should not be possible.

```
# github.com/eris-ltd/eris-db/event
event/event_cache_test.go:61: cannot use mockEventData literal (type mockEventData) as type txs.EventData in argument to me.f:
    mockEventData does not implement txs.EventData (missing AssertIsEventData method)
event/events_test.go:10: imported and not used: ""github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-events"" as evts
event/events_test.go:53: cannot use mockEventData literal (type mockEventData) as type txs.EventData in map key:
    mockEventData does not implement txs.EventData (missing AssertIsEventData method)
event/events_test.go:55: cannot use mockEventData literal (type mockEventData) as type txs.EventData in map key:
    mockEventData does not implement txs.EventData (missing AssertIsEventData method)
event/events_test.go:57: cannot use mockEventData literal (type mockEventData) as type txs.EventData in map key:
    mockEventData does not implement txs.EventData (missing AssertIsEventData method)
FAIL    github.com/eris-ltd/eris-db/event [build failed]
```
",closed,False,2016-08-22 10:10:33,2016-08-29 08:55:39
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/233,https://api.github.com/repos/hyperledger/burrow/issues/233,[Merge last] Fix NameReg test,"This fixes the NameReg test, it includes some associated improving of the test helpers to stabilise the test.

fixes #224. 
",closed,True,2016-08-21 15:54:05,2017-04-10 22:13:12
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/232,https://api.github.com/repos/hyperledger/burrow/issues/232,Dry up client,"![wet dog](http://i.imgur.com/XTLBA4d.gif)
",closed,True,2016-08-21 15:33:58,2016-08-22 12:05:07
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/231,https://api.github.com/repos/hyperledger/burrow/issues/231,Tweak BlockchainInfo to use stuff we have actually initialised,"This re-implements BlockchainInfo to work around #230. This implementation actually works, but unit tests will follow with #218, which require gently mocking erisMintPipe behind its back.
",closed,True,2016-08-21 15:27:33,2017-04-10 22:13:12
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/230,https://api.github.com/repos/hyperledger/burrow/issues/230,Implement missing state and functions on erisMintPipe that need to call Tendermint's,"`erisMintPipe` contains three pieces of state that depend on calling out to Tendermint's RPC (for us in-process) and none of them are fully implemented, see: https://github.com/eris-ltd/eris-db/blob/develop/manager/eris-mint/pipe.go#L115 

The fields on `erisMintPipe` storing these pieces of state are:
1. `network`
2. `consensus`
3. `blockchain`

There are various `\\ TODO: RPC` comments in bits of their implementation, and blockchain and consensus are currently not being intialised at all.

We may be able to get away with not implementing all of them at this stage.
",closed,False,2016-08-21 15:03:53,2016-09-17 18:00:06
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/229,https://api.github.com/repos/hyperledger/burrow/issues/229,Don't special case empty blocks when refreshing the checkCache on commit,"There are more profound related considerations detailed in #228. But independent of those I think this simple change is a win for clarity and the principle of honouring the most recent committed state.

Only refreshing the checkCache on non-empty blocks can be seen as an optimisation that it turns out is on shaking grounds: namely assuming that the committing of an empty block implies that the checkCache is clean. This may have been true at one point, but no longer is in general.

This change also fixes an actual real life bug in the reprocessing of an identical transaction in the mempool that is encountered in integration tests.
",closed,True,2016-08-20 11:59:01,2017-04-10 22:13:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/228,https://api.github.com/repos/hyperledger/burrow/issues/228,[Pipe] ErisMint: checkCache for CheckTx reset,"Currently if an empty block is committed (no transactions included) then the cached copy for CheckTx - which runs in parallel to AppendTx - is not reset and preserved.  The checkCache is reset to the current state when a non-empty block is committed.

Tendermint mempool however can update and recheck the transactions; this can make the checkCache and state move out of sync;
1. One consideration is that ErisMint needs to synchronise on FlushSync() 
2. A tension remains: on a new block, the application would want to reset caches as the block tick is the only reference point; on the other hand, one can argue that the mempool already improves statistically the odds of producing a synchronized sequence of transactions, if indeed the checkCache is preserved (allowing sequentially dependent transactions to potentially be included in the same block*); It has to be added though that if no transactions are committed in the block, then it is likely to assume there are close to no transactions lingering in the mempool.  This provides the strongest argument to stay close to the logic of preserving the block tick for resetting caches.  -> This resolves the tension lined out in point 2., but builds a tension with point 1.

*This can be understood by considering that if CheckTx would work off off the last committed state for every checked transaction, the sequence numbers of sequential transactions in the same block would cause a dependent transaction to be rejected from the mempool.
",closed,False,2016-08-19 15:46:47,2018-04-11 21:14:45
burrow,Fukunaga42,https://github.com/hyperledger/burrow/issues/227,https://api.github.com/repos/hyperledger/burrow/issues/227,Accounts.genPrivAccount don't broadcast the new account created.,"```
[ 1.12.0] docker version
[ 0.12.0] eris version
[1.6 ] go version
[ 0.7.0] docker-machine version
[ ubuntu 14.04]
```

Hi,
I have 3 validator node running, and one root node on this instance:
When I run genPrivAccount() from eris-db.js I have a good return value of the new generated account, but when i look on the accounts on my blockchain this new account never appear.

Here's my script and the result:

```
var edbFactory = require('eris-db');
chainUrl = 'http://0.0.0.0:1337/rpc';
var accounts = require('./accounts.json');
var edb = edbFactory.createInstance(chainUrl);
edb.start(function(result, error) {
          if (!error){
              console.log(""eris-db success -> "", result);
          } else
              console.log(error);
})

var myAccount = edb.accounts();
myAccount.genPrivAccount(accounts.devchain_root_000, function(error, result){
       if (!error){
               console.log('result = ', result);
//                res.json({ message: 'Account created!', privKey: '', pubKey: '', address: '' })    ;
       }
})
```

```
result =  { address: '438D7B22DD3CBC82AA5C20938511605802D815C3',
 pub_key:
  [ 1,
    '788326B40466160AE728DBB1CE684C3D47E39F532817048C268E8316F9EA2F02' ],
 priv_key:
  [ 1,
    '2D0626D7094AEFD37D8EF21CC8931F01D5C49E52301EA702ED1A7A619EF4D683788326B40466160AE728DBB1CE684C3D47E39F532817048C268E8316F9EA2F02' ] }
```
",closed,False,2016-08-19 07:54:35,2017-04-10 22:13:12
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/226,https://api.github.com/repos/hyperledger/burrow/issues/226,Stop tests from panicking and fix stale cache issue,"Some changes here are to make the tests not panic. There is also in eris-mint.go a change to remove a stale cache bug.
",closed,True,2016-08-18 21:05:32,2016-08-19 14:51:47
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/225,https://api.github.com/repos/hyperledger/burrow/issues/225,rpc/v/tendermint Subscribe needs to allow multiple connections from same host,"Currently the implementation only allows one subscriptions for the same event from the same host. This is robust and is not assumed by existing client libraries. v0 API does something sensible by issuing a random subscription id. should use that.
",closed,False,2016-08-18 20:55:43,2016-08-23 10:18:02
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/224,https://api.github.com/repos/hyperledger/burrow/issues/224,Fix HTTPNameReg,,closed,False,2016-08-18 20:48:10,2016-08-22 11:01:50
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/223,https://api.github.com/repos/hyperledger/burrow/issues/223,[Tests] Implement unit tests for CheckTx and AppendTx in /consensus/tendermint,"Run integration tests for in-process tendermint as consumer unit tests in /consensus/tendermint asserting advertised behaviour from Tendermint
",closed,False,2016-08-18 12:04:24,2016-11-24 16:04:16
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/222,https://api.github.com/repos/hyperledger/burrow/issues/222,Combine consensus and manager events into a pool of types we control,"The approach here is to deal with underlying go-events EventData that is a generic marker interface by mapping it to our our own EventData types, which is a marker interface with an assertion method. This is in the spirit of the refactor to take control of the types we depend on. Ultimately we still care about some tendermint types but we are reducing the surface area of the dependency.

This resolves some issues with subscription, which exposes some other issues that we will fix with a subsequent PR.
",closed,True,2016-08-16 22:01:12,2016-08-17 16:12:31
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/221,https://api.github.com/repos/hyperledger/burrow/issues/221,Implement and test list_unconfirmed_txs,"Missing from both rpc/tendermint and rpc/v0 (stub in transactor.go)!
",closed,False,2016-08-16 17:04:06,2016-09-18 19:58:09
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/220,https://api.github.com/repos/hyperledger/burrow/issues/220,Implement and test dump_consensus_state,,closed,False,2016-08-16 17:03:56,2016-09-18 19:58:09
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/219,https://api.github.com/repos/hyperledger/burrow/issues/219,Implement and test list_validators,"Needs to be implemented in both rpc/tendermint and rpc/v0!
",closed,False,2016-08-16 17:03:42,2016-09-18 19:58:09
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/218,https://api.github.com/repos/hyperledger/burrow/issues/218,Unit test blockchain,,closed,False,2016-08-16 17:03:31,2016-09-13 19:53:41
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/217,https://api.github.com/repos/hyperledger/burrow/issues/217,Implement and test get_block,,closed,False,2016-08-16 17:02:55,2016-09-18 19:58:09
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/216,https://api.github.com/repos/hyperledger/burrow/issues/216,Implement missing /v/tendermint RPC methods,"Starting from the list in:

`rpc/tendermint/core/routes.go`     

```
""blockchain"": rpc.NewRPCFunc(tmRoutes.BlockchainInfo, ""minHeight,maxHeight""),
//""get_block"":               rpc.NewRPCFunc(GetBlock, ""height""),
//""list_validators"":         rpc.NewRPCFunc(ListValidators, """"),
// ""dump_consensus_state"":    rpc.NewRPCFunc(DumpConsensusState, """"),
// ""list_unconfirmed_txs"":    rpc.NewRPCFunc(ListUnconfirmedTxs, """"),
```

Note that the `blockchain` call is implemented but untested. Each one should have real unit tests.
",closed,False,2016-08-16 16:58:09,2016-09-18 19:58:09
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/215,https://api.github.com/repos/hyperledger/burrow/issues/215,Miscellaneous race conditions in RPC tests,"Some issues come and go according to no particularly pattern `-race` doesn't give any immediate insight. More information to follow after #201 resolved 
",closed,False,2016-08-16 14:42:04,2016-08-29 08:55:39
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/214,https://api.github.com/repos/hyperledger/burrow/issues/214,[Tests] Implement tests for race conditions,"Manual effort is required to identify vulnerability areas in the code for potential race conditions.  These areas require specific unit tests run with race condition tracking activated.
",closed,False,2016-08-15 17:05:09,2018-04-11 21:10:48
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/213,https://api.github.com/repos/hyperledger/burrow/issues/213,Component sandboxing,"Eris-db leverages (external) components that are not fully under our control. Eris-db needs to be able to recover from component failure.  This is an additional requirement to code contributions from eris to partner projects to address potential failures in the components at the source.
",closed,False,2016-08-15 14:38:57,2018-02-01 11:36:59
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/212,https://api.github.com/repos/hyperledger/burrow/issues/212,[Tests] Implement stress testing and benchmarking,"Stress tests need to be designed at unit test level and at network tests level.  Stress testing must happen along two dimensions: intensity and duration.  The aim is deliberately to expose and map out the breaking points of the stack.
",closed,False,2016-08-15 13:36:21,2019-04-03 15:34:35
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/211,https://api.github.com/repos/hyperledger/burrow/issues/211,[Tests] Implement soak testing,"Soak testing of the unit tests on a weekly basis would be sufficient.  Currently some server tests are more soak and stress tests; these should move out of the default set of unit tests.  Soak testing epic is secondary to #210, to first improve coverage of the unit testing framework.
",closed,False,2016-08-15 13:33:10,2019-04-03 15:34:53
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/210,https://api.github.com/repos/hyperledger/burrow/issues/210,[Tests] Improve unit test coverage,Epic to track improvements to unit testing,closed,False,2016-08-15 11:49:22,2018-03-04 14:06:13
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/209,https://api.github.com/repos/hyperledger/burrow/issues/209,Event stream multiplexing,"As eris-db grows into a technology gateway, it needs an upgrade to the event handling framework with a strong focus on efficient and resilient event multiplexing from different components in the system.  This is required so that the user of eris-db has a uniform experience interacting with a combination of technology stacks (consensus engines and application managers).
",closed,False,2016-08-15 11:31:58,2016-09-17 18:00:20
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/208,https://api.github.com/repos/hyperledger/burrow/issues/208,[RPC] Define RPCv1,"From the legacy architecture we have inherited a double rpc function set (`v0` at port 1337 and `tendermint` at port 46657); propose a unified new set based on usage feedback under `v1` at port 1337.
- [ ] propose function set
- [ ] iterate with internal and external users on function set
- [ ] depends on RPC framework unification
",closed,False,2016-08-15 11:27:18,2018-03-04 14:02:21
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/207,https://api.github.com/repos/hyperledger/burrow/issues/207,[RPC] Unify RPC Architecture (Master RPC Epic),"Unify the RPC architecture in favour of a single framework to enable growth towards a microservices design.  Aims to deprecate mixed dependencies on gin-gonic and go-rpc. Leading candidate is gRPC for agnostic design to payload, enabling both protobuf (or Thrift) for inter-component, and (most likely unchanged) JSON for client communication.
",closed,False,2016-08-15 11:21:26,2018-02-26 14:01:09
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/206,https://api.github.com/repos/hyperledger/burrow/issues/206,Remove redundant v0 gateway from tendermint tests,"Meant to remove this in a previous PR
",closed,True,2016-08-12 17:51:26,2017-04-10 22:13:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/205,https://api.github.com/repos/hyperledger/burrow/issues/205,Fix CacheTx persistance for nested calls in ErisMint,"This has been hot-fixed on 0.11.4 in issue #164 and #184; but needs to be carried over to ErisMint on 0.12.0
- [x] port the fix in evm
- [ ] port the unit tests in state for this fixed bug
- [ ] assert created test is also integrated in eris-pm https://github.com/eris-ltd/eris-pm/issues/189
",closed,False,2016-08-12 15:31:26,2018-02-26 13:54:09
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/204,https://api.github.com/repos/hyperledger/burrow/issues/204,Fix TestHTTPGetStorage,"Suspected race condition (see also https://github.com/eris-ltd/eris-db/issues/203), failure looks like:

```
--- FAIL: TestHTTPGetStorage (0.92s)
    shared.go:229: UnknownAddress: E3D058FCD9492B490CBCFC2427E5C4562B833DD5
```

But adding some debug output can make issue vanish: https://github.com/eris-ltd/eris-db/pull/200 
",closed,False,2016-08-12 15:15:54,2016-08-29 08:55:39
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/203,https://api.github.com/repos/hyperledger/burrow/issues/203,Fix TestHTTPCallContract,"Probably linked to similar issue with TestHTTPGetStorage

```
--- FAIL: TestHTTPCallContract (1.01s)
    shared.go:251: Account 91cca067e0aef726fcf2fe21f8f0de3ade971605 does not exist
```
",closed,False,2016-08-12 14:55:26,2016-08-29 08:55:39
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/202,https://api.github.com/repos/hyperledger/burrow/issues/202,Fix rpc/tendermint/test tests,"Or going green for 0.12.0

Sub-issues are initially derived from:

```
go test -v ./rpc/tendermint/test | grep -A3 FAIL
```
",closed,False,2016-08-12 14:52:01,2016-08-29 08:55:39
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/201,https://api.github.com/repos/hyperledger/burrow/issues/201,Fix deseriliastion of eris-mint events (thus fixing TestHTTPNameReg and other tests),"Here we are seeing a panic that is halting the test process. Appears to be a go-wire serialisation issue, where an unexpected type is being deserialised for an interface.

Looks like a bug in the re-implemented Subscribe function:

```
=== RUN   TestHTTPNameReg
INFO[08-12|15:47:09] Starting WSClient                        module=rpcclient impl=""0.0.0.0:36657, /websocket""
Subscribing to event                    event=NameReg/ye_old_domain_name_HTTP
                                   listenerId=127.0.0.1:46404
Commit block                      blockheight=2
Reset checkCache                          txs=1
AppendTxtxNameTx{TxInput{E9B5D87313356465FAE33C406CE2C2979DE60BCB,1096,6,/94032325D883.../,PubKeyEd25519{583779C3BFA3F6C7E23C7D830A9C3D023A216B55079AD38BFED1207B94A19548}} -> ye_old_domain_name_HTTP: if not now, when}
Commit block                      blockheight=3
Reset checkCache                          txs=1
panic: Paniced on a Sanity Check: Unexpected struct type txs.EventDataTx for registered interface TMEventData. Was it registered as a pointer receiver rather than as a value receiver?

goroutine 71 [running]:
panic(0xbabe00, 0xc82047f890)
    /usr/lib/go/src/runtime/panic.go:481 +0x3e6
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-common.PanicSanity(0xceb520, 0xc82047f840)
    /home/silas/code/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-common/errors.go:26 +0xf5
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-wire.JSONBytes(0xb6ae60, 0xc82047f750, 0x0, 0x0, 0x0)
    /home/silas/code/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-wire/util.go:33 +0x113
github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-rpc/types.NewRPCResponse(0xe57108, 0x6, 0xb6ae60, 0xc82047f750, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)
    /home/silas/code/go/src/github.com/eris-ltd/eris-db/vendor/github.com/tendermint/go-rpc/types/types.go:55 +0x90
github.com/eris-ltd/eris-db/rpc/tendermint/core.(*TendermintRoutes).Subscribe.func1(0xb6b0a0, 0xc820298bc0)
    /home/silas/code/go/src/github.com/eris-ltd/eris-db/rpc/tendermint/core/routes.go:62 +0xf8
```
",closed,False,2016-08-12 14:51:35,2016-08-18 20:59:05
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/200,https://api.github.com/repos/hyperledger/burrow/issues/200,Adding some debug output fixes issue with TestHTTPGetStorage [DO NOT MERGE],"Looking at the RPC test TestHTTPGetStorage, runnable with:

`go test -v ./rpc/tendermint/test -run TestHTTPGetStorage`

The test fails on the current develop branch with:

```
--- FAIL: TestHTTPGetStorage (0.94s)
    shared.go:233: UnknownAddress: 49EA30FCAE731BDE36742F85901549F515EA1A32
FAIL
```

Adding a bit of MARMOT debug, contained in this PR, which was only intended to provide some insight into the Accounts that are defined on the chain then 'fixes' the issue. So we have a Heisenbug. Clearly there is something a bit interesting going on here.

I will look into the cause off the original error some more, and then try to understand why what should be an unrelated read operation makes it go away.
",closed,True,2016-08-12 12:33:25,2016-08-21 15:55:19
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/199,https://api.github.com/repos/hyperledger/burrow/issues/199,Some formatting clean up,"Cosmetic changes
",closed,True,2016-08-11 18:50:20,2017-04-10 22:13:12
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/198,https://api.github.com/repos/hyperledger/burrow/issues/198,Allow the RPC Subscribe method to see all events,"Those events from both consensus and application manager.

Doesn't fix tests. Because Ben.

Sorry, I have caught some bullshit formatting changes here.

manager/eris-mint/pipe.go is the real entry point here
",closed,True,2016-08-09 19:03:53,2016-08-11 15:00:09
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/197,https://api.github.com/repos/hyperledger/burrow/issues/197,Expose tendermint's EventSwitch to ErisMintPipe's subscribe function ,"In old eris-db all events, contract and consensus, were provided in a single event space (as single EventSwitch) identified by (presumably non-colliding) names.

In the present iteration we run new tendermint as an in-process node which maintains its own EventSwitch. This separation makes some sense, but the RPC which we are not changing yet expects to be able to subscribe to tendermint and eris-mint events without specifying which channel it is interested in.

The simplest solution is to subscribe to both eris-mint's and tendermint's EventSwitch when the RPC Subscribe method is called.

In order to do this we will need to add the tendermint event switch to ErisMintPipe and set it here: https://github.com/eris-ltd/eris-db/blob/develop/consensus/consensus.go#L27 which will require exposing it from TendermintNode.
",closed,False,2016-08-09 15:14:59,2016-08-12 16:00:50
burrow,zramsay,https://github.com/hyperledger/burrow/pull/196,https://api.github.com/repos/hyperledger/burrow/issues/196,hotfix readme,,closed,True,2016-08-09 09:55:55,2016-08-09 10:00:45
burrow,zramsay,https://github.com/hyperledger/burrow/pull/195,https://api.github.com/repos/hyperledger/burrow/issues/195,harmonize readme,"- uses https://github.com/RichardLitt/standard-readme
- PR blocking until https://github.com/eris-ltd/coding/blob/master/github/CONTRIBUTING.md
  is updated
",closed,True,2016-08-08 14:48:39,2016-08-09 09:50:27
burrow,sirinath,https://github.com/hyperledger/burrow/issues/194,https://api.github.com/repos/hyperledger/burrow/issues/194,Permissive License,"Is it possible to switch Eris product range to a more permissive license like ASL 2.0?
",closed,False,2016-08-06 09:05:52,2017-03-04 02:13:30
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/193,https://api.github.com/repos/hyperledger/burrow/issues/193,Correct MetaBlocks issue on 0.12.0 (currently on develop),"Correct MetaBlocks issue on 0.12.0 (currently on develop)
and add unit test specifically for MetaBlock
",closed,False,2016-08-04 10:46:55,2016-10-11 13:36:49
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/192,https://api.github.com/repos/hyperledger/burrow/issues/192,Issue120 metablocks,,closed,True,2016-08-04 10:09:31,2017-04-10 22:13:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/191,https://api.github.com/repos/hyperledger/burrow/issues/191,"fix get blocks, #120","Needs a test to assert correct behaviour
",closed,True,2016-08-04 09:27:19,2016-08-04 10:41:37
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/190,https://api.github.com/repos/hyperledger/burrow/issues/190,[Application] Implement signature verification as snative in eris-mint,,closed,False,2016-08-02 17:32:17,2018-02-26 13:55:05
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/189,https://api.github.com/repos/hyperledger/burrow/issues/189,[Client] passing `string` for `byte32` is not consistent for eris-contracts and e-pm,,closed,False,2016-08-02 17:31:38,2018-03-03 11:09:49
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/188,https://api.github.com/repos/hyperledger/burrow/issues/188,[EVM] Type byte32 does not store full 32 bytes,"[formal_docs_for_bytes32.pdf](https://github.com/eris-ltd/eris-db/files/397560/formal_docs_for_bytes32.pdf)
",closed,False,2016-08-02 16:38:21,2018-03-04 14:02:57
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/187,https://api.github.com/repos/hyperledger/burrow/issues/187,eris-client: carry-over from mint-client; client/core lib for eris-pm,"- [x] eris-client basic framework carry-over
- [x] eris-client tx send
- [x] call/bond/...
",closed,True,2016-08-01 16:04:39,2017-04-10 22:13:11
burrow,zramsay,https://github.com/hyperledger/burrow/issues/186,https://api.github.com/repos/hyperledger/burrow/issues/186,When?,"depends on #185 
",closed,False,2016-07-31 06:08:34,2017-04-10 22:13:11
burrow,dennismckinnon,https://github.com/hyperledger/burrow/issues/185,https://api.github.com/repos/hyperledger/burrow/issues/185,why are there different default account balance initiations.,"{""jsonrpc"":""2.0"",""id"":"""",""result"":[3,{""block_height"":18087,""accounts"":[{""address"":""0000000000000000000000000000000000000000"",""pub_key"":null,""sequence"":0,""balance"":1337,""code"":"""",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""01251A1E0E776AAFFEAE296645C0920A81C9F0F3"",""pub_key"":null,""sequence"":2,""balance"":35060,""codestorage_root"":""671729C8811F4920ED26803B52D87D3F9EE9C7CD"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""018F95AC4F81774211052AD520C9A29D55AD2511"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""03A8688F8FA82B6A16728F98926FCD48B28BF125"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""03C0632D314FDF97065F5DA952D45D6EBF85D6CE"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""05EF7B94F2585577DF966153BB25FACAC70137CE"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""82608440B8720661B24D54415D1BCD77C8E922C4"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""06BEDD0E89A510EE114D81426702D831D84A1E86"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""087F75F7DED1F545235F596D984C3006A88274AD"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""087961851C79C0FA34063E6AF750E7689B48BCC8"",""pub_key"":null,""sequence"":2,""balance"":26295,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063882200B61461004F578063889C534814610088578063EE6B273E146100AB5761004D565B005B61005C60048050506101EA565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B61009560048050506100CE565B6040518082815260200191505060405180910390F35B6100B86004805050610122565B6040518082815260200191505060405180910390F35B600060006002600050546040516042806102B483390180828152602001915050604051809103906000F09050600260008181505480929190600101919050555061011781610219565B915061011E565B5090565B60006000600060009054906101000A900473FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1673FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF1663780900DC600260005054604051827C0100000000000000000000000000000000000000000000000000000000028152600401808281526020019150506020604051808303816000876161DA5A03F1156100025750505060405180519060200150905060026000818150548092919060010191905055506101DF81610219565B91506101E6565B5090565B6000600060009054906101000A900473FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF169050610216565B90565B6000600160005060008373FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200190815260200160002060009054906101000A900460FF161561026357600090506102AF565B6001600160005060008473FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200190815260200160002060006101000A81548160FF02191690830217905550600190506102AF565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":""3C2E61270F34A489B64685CC3A143CE8369EA346"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""0B2A3BCE523F3369D2E5067DEAF6E9CF27A5FA7F"",""pub_key"":null,""sequence"":2,""balance"":35060,""codestorage_root"":""A97C32D66AE9A03B4DDB452E09295A5791CF30EE"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""0C4DD86A172A25AB402DB8CEE8A72B85EE493E21"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""087F75F7DED1F545235F596D984C3006A88274AD"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""0DF942AA82812A41BB739F66954A6E7A6B57DE16"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""11E4D6759F9EAC02D2C39DFA0F8E2AB44BD00016"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""1206065529ADF623C08A9B5CF8F88DDE8181C107"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""133C0DBE8E8CB61F8EA01455D0BF4D3596D24706"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""136E16F5B814FE52E07512A09FA9257EC4B72269"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""1377FD693433EE41B7A550C8F195AAF7FEF925E9"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""087F75F7DED1F545235F596D984C3006A88274AD"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""1405F3BAB8A0D023EBEE05F77BAECFC86F2C92F1"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""1C3EBA5137240FE72B89844C940199BB8491C7B5"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""1FE6438344E9B05F14C34CC32729870C3815F144"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""20F8DD9D636B6BC5B9EF7180792EEDB0C75217F3"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""2645601023F6E12B2CE51FCA1A829667418A6418"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""087F75F7DED1F545235F596D984C3006A88274AD"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""28B087A9152F6E7874A4719D30E4E4BFBBE101C7"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""16CE099B687EAE965ED57DA40569900B4388178D"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""28DF5ACE1C1DC22E7E0725DA95FC90DE5E785BEC"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""16CE099B687EAE965ED57DA40569900B4388178D"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""2ADDC9A789D885C091DDD7411F487AC37F3D32B4"",""pub_key"":null,""sequence"":2,""balance"":35060,""codestorage_root"":""F41C0B6CF2EDD3EAEC50CA9B35895272B1BEA390"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""2C05AE1589DC89327C296E2859C15B679B19228E"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""2F299B9B3517BB35BB6CB5B9B86F29F24A383496"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""2FA3AFF0E4D1EAAF8B92CA43B708675A84DFFDD1"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""3236DFE70BA4EC32718F7A9AA4CAAF091F9C1863"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""33F417BF310090A836F496FAE494A6F3F6F1EF1E"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""342BEA74E7F47E296E181828218425979E04B3A5"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""34E4FFAA8548ACBC47F4A6F7C97885A81B553441"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""37D15C1A537E9AEB1D951EBD9BE7B134592CBD25"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""3D5BCC7824DB38537922E5FF15EE0682D4368DAE"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""3D6CA965C6E04E3B0219302CA0503F68B7259D3E"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""5FAE8EAA5CCF1759347BCDDE36468C2465AF9AA3"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""3E7D012FE499604F0A62FE5627FA29136CD94AA9"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""420B67B73F03A8174E14A06B5F103EFBECF3086C"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""433DA285DE3B7B3BF3240E02DBE61991F81A8807"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""984CC77AEFCD5539664B1EEACB2A5B8BDABE0F7A"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""43979146B20DD0A880C2CBEC3F42304AA7D93426"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""C3C192D75C55B68F57D694A0B0A718EC3AB8442F"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""43BE5A3215C7E84067A5F42027566CFB86567BA8"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""44BD3A37268FD6E4C57FBBFA0F2F99CBCDEF4B60"",""pub_key"":null,""sequence"":2,""balance"":35060,""codestorage_root"":""E9666A2B620391451AE684C5994E71446415682E"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""4A9B3B0F6164EFFE1311093122DF4D814DA94B06"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""4ACA53016EB39BD41788EE2C3E9A1E3D981C518D"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""087F75F7DED1F545235F596D984C3006A88274AD"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""4C18057CA342B2E7BE651C9E1A25A359DC6502C5"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""51447123EEA3880B4ADFA6681255F7104315DD92"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""53B6CE60644453B3B62452603CAB65CDFD0CB4A8"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""540F6B8EF29D9EF8CB16A2F669AF3693DF56CE0A"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""5501D78E771E6C21507B6B6D8329145C3E113E58"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""087F75F7DED1F545235F596D984C3006A88274AD"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""561FF68F0193B5AB7F660A4958AC4180FBA5585A"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""5B3D2724243881CA2EFEF6E6B46058DB69980227"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""5B4C0E4ECE48BF6EEFB8DC15D7B4141C4815D733"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""5D1E298F010A004CC8097058786DD67ABCB3EB11"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""5E74DC6A0D586FE4D8569E3D2C2FCF99B9794EBC"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""5EC74D2F8535A31B508B7E4BD4DE633B86B90334"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""5F277F71ADC1FFDB524CF4689A33BCB5DCF6ED63"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""16CE099B687EAE965ED57DA40569900B4388178D"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""61B4EEE03125E8D5FE06AC4D5E987DA24FA616F3"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""636C689A3761D3AA3DC2C90B10E13FDE64F213B1"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""16CE099B687EAE965ED57DA40569900B4388178D"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""63B9387AC2A46F7FA76570E74821282646366ACD"",""pub_key"":null,""sequence"":2,""balance"":35060,""codestorage_root"":""65C7415EFE8B7DD74A1FE795FE7E0DE9D351E412"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""67C54171EE07B85089FAEE8F16D97B4C68747768"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""16CE099B687EAE965ED57DA40569900B4388178D"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""6A0E79896FD453F63E2B908B13A66C48725BE9D4"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""16CE099B687EAE965ED57DA40569900B4388178D"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""6D60D08EF690B2B823B37EAFF4849A457401671E"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""16CE099B687EAE965ED57DA40569900B4388178D"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""6DF79917D7C4C86EC917AF302A59D04109318C03"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""6E3F0092B052B255D6DCBC254C4F6955BB7058DF"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""16CE099B687EAE965ED57DA40569900B4388178D"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""76B2102DE2996D078AD27E510E78DEC4214DA461"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""A88E45326AF66B3550ED1ADD928D8BFA21102060"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""77B9D8540154222D16ED4E88573E9EDC6C296245"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""77D635FB6A7F69AD771DCF7746CEE31146439ECC"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""7889E6A609C481699B426359F495E656C8914EB0"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""7BA0613E33E1EB41B37AE6DDF05DFEB1E7148F54"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""7BE4611DF82A63D71DF15002696005EEE4F3728E"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""7DF18309FBA39AE795935448D9A471D8CC23BC75"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""7EA09135701DFC14563EDC53E1C399888ABC595D"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""55F7BB713B6F5C0EC7E1663709B898E24383B1D9"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""8192D61DCFD0F00C3B771A5A6DFF5011A95C8341"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""836E1CCA4123294DA51AB715EBCF49EC7C689F5A"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""8D3D94658C4379E18179DA1A580C962F84BC7C89"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""8DFCF9A0E09E1303F3B1E6F8871AEBD05E809ED4"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""8EDD49A53F25E0629D7CBD48A2B21E21CF0BD377"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""90EE63442AFC34E39DC68266D37B3A8FE9183707"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""30AF938DF723922EED669DF029BD36923ACBC30B"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""933AF1EED7C8DDBE77ACBC008ABCC74E41400C73"",""pub_key"":null,""sequence"":2,""balance"":35060,""codestorage_root"":""5E3405508FB858DDBFF3562E8B56E816C96BB481"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""93E16807F74AA2855A48F57D6EE2EF426E7FA596"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""99D25392BAC3A8CF2A7D3EB7BAA7C380EE7F4289"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""9CB74B6DC4238A78ADC94315CEEA9D299CB34A89"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""9D4A8B9A19C43D6DF0D71A1D8B44A5C240203D1D"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""AC097A50C315CBF15F97577FFD321A23A9027F9A"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""ACAADA33CFC00AD54774BCE3EE9B7245D4C43116"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""ACE5B774356261F3CCB4199B1F55765DB8212A2D"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""B400AF7823D37220436508780865C4D19FD4A9F7"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""B4E1C414310DF61C7D2B0BA8E289BECE862AC95B"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""087F75F7DED1F545235F596D984C3006A88274AD"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""BA07B9D61D9C77748A93F0EE66A16B85622B1292"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""BD8AC92447EFDE7B172B65756B7025D993849955"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""BE7D16EEDCA9BA142EE42B33B8379D6D1233069D"",""pub_key"":null,""sequence"":2,""balance"":35060,""codestorage_root"":""E59F7E76D379AE99CB6AF81AC846E0E767705793"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""BFBFCE74A0404D0D74CC9ED63BF5B7E5D1571461"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""C0204EA7C6F1C0A25F5059105D6DF590F6D83FCF"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""C0733F58E18B65F7B815A09F2DABAC59BF7EEA48"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""C363F94C35277724C070D39BA1D467C291142F04"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""C404F6EC6C3877F6E5BA726C17C13617C738F248"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""C53B1DB5D5564A15744E1CC9FE135D8D0D29816F"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""C6342180F32C63D58183F90A88F1D1074EE181FB"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""C86EC19E0C77D9B91513CDC3C4DE14DCCDCBD84F"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""32392E4DBAB91F0764E7AC090168CBC2C5033062"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""C8E5066AB6456228812DE0A51B84C2812168A5FA"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""CF24150C22B7D68B958571650140A0405463D246"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""D03E15B8F9D8A35C8E9ED39A28BD27BD55774358"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""724B11CA6AAA3773585A86D6D3FC1556671A5FEF"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""D21110E4BE006765CA4CDABAD5599C669DCEB5C3"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""D23F55A1BBDA40D64E3010D9FB99A91F2549B9B3"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""D850C999AFDEAB6A8F847B36A5E443F3A811EBB3"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""DA18B3B71398C4AD371BD0D3DE87C32DF5CAF5FC"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""DB75D998FED90C62277D03C02453780A3E5FD947"",""pub_key"":null,""sequence"":2,""balance"":35060,""codestorage_root"":""02FB8D466CE6731D20B530A9DE9158BD00FC6CF6"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""DC4F74B54F86B8F7420BF986F9BB56E317155FED"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""DD96C1EAC29171909601015B214F3B7C41005F68"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""DEDBC375C83517ED1289014F32890F1709E25E50"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""DFBCAC1CB626C21399FFB804EE5FFE06146141A2"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""16CE099B687EAE965ED57DA40569900B4388178D"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""E0E595FB25D60606685FDCDEF59888FAE03EE3C8"",""pub_key"":[1,""5FACDB31AD1DDBE56705783B475B931715F23DB3A93B8FF9FC616AABB2996BD0""],""sequence"":176,""balance"":99999998870112,""code"":"""",""storage_root"":"""",""permissions"":{""base"":{""perms"":16383,""set"":16383},""roles"":[]}},{""address"":""E306B3E9DD1E8387C20016CF496EB12A5C31B9C7"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""E40F6BA8B5E50DEC70749C349953B0F6D2997705"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""D98B4B6046D66E5BF902D625505DC00FFC682D5E"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""E5ACADEC7F3B519DB49235EAC121EAB6AF9F8014"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""E6FB1AEABAB2CD6A11C5A69AE87CFFE388B4DC47"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""E974AA27BA2D2F14B52F1AC5DB97462F3AA82FEB"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""EAEB288F9AA800413E8C2847893FFEE7138A1C5A"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""EC7B0E5FBFC80C6592727DA4E56FF450C7E3B084"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""087F75F7DED1F545235F596D984C3006A88274AD"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""ED95328D737E5523CF62ED2610426949F412BD2C"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""F14E73430D3BB23ECAD532C0185170CD56C80815"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""16CE099B687EAE965ED57DA40569900B4388178D"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""F3AA9F9EA0A277BFD3A01ED72F885C1CBC938BAA"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""F93D285CEF3DEB39B37B60B05D31D056CF780528"",""pub_key"":null,""sequence"":2,""balance"":26295,""codestorage_root"":""07153E60B6654E9182FCF44EC3837459C482487C"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""F98C56504683FDE5EE62AA3824F0FE0C2672A5C2"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""FC057126D089B1F68FE9A1115F1E981EB748A1EB"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""FC77BFBA73911A33DD77370BDDBB3230BB4060AA"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""D6249417DFA93BFEC0B6B7F553261771221576B8"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""FC96ADA88CC712874AA2CC6BF1012A08A3D53F66"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""FF8D142437A25D9A1937852BDC54627B62F7101E"",""pub_key"":null,""sequence"":0,""balance"":0,""code"":""60606040526008565B00"",""storage_root"":""16CE099B687EAE965ED57DA40569900B4388178D"",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}},{""address"":""FFE7DF57D00BB345C4CD372261F8484D730DE637"",""pub_key"":null,""sequence"":0,""balance"":8765,""code"":""60606040526000357C010000000000000000000000000000000000000000000000000000000090048063780900DC146037576035565B005B604B60048080359060200190919050506077565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B60008160405160428060A483390180828152602001915050604051809103906000F09050609F565B9190505660606040526040516020806042833981016040528080519060200190919050505B806000600050819055505B50600A8060386000396000F360606040526008565B00"",""storage_root"":"""",""permissions"":{""base"":{""perms"":2302,""set"":16383},""roles"":[]}}]}],""error"":""""}
",closed,False,2016-07-30 13:58:03,2017-04-10 22:13:11
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/184,https://api.github.com/repos/hyperledger/burrow/issues/184,tendermint vm: fix issues #164,,closed,True,2016-07-28 18:41:08,2016-07-28 19:27:49
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/183,https://api.github.com/repos/hyperledger/burrow/issues/183,[RPC] Define RPC using swagger,"This: http://swagger.io/

Then:

```
swagger: ""2.0""
info:
  version: ""1.0""
  title: ""Hello World API""
paths:
  /hello/{user}:
    get:
      description: Returns a greeting to the user!
      parameters:
        - name: user
          in: path
          type: string
          required: true
          description: The name of the user to greet.
      responses:
        200:
          description: Returns the greeting.
          schema:
            type: string
        400:
          description: Invalid characters in ""user"" were provided.
```

So you get this: http://petstore.swagger.io/#/pet
",closed,False,2016-07-28 15:38:24,2018-02-26 13:49:37
burrow,ebuchman,https://github.com/hyperledger/burrow/pull/182,https://api.github.com/repos/hyperledger/burrow/issues/182,Create fix,"So this was actually pretty bad. Amazing that we never got it, probably because we never really cared about tokens. Basic ""address.send()"" from a contract [was broken](https://github.com/eris-ltd/eris-db/compare/create_fix?expand=1#diff-735ecc7ace7329b12bfb59eaa38f682bR495)! [This comment/contract](https://github.com/eris-ltd/eris-db/blob/develop/manager/eris-mint/evm/vm.go#L116) wasn't true, since we were [making calls without adding the account to the tx cache](https://github.com/eris-ltd/eris-db/blob/develop/manager/eris-mint/evm/vm.go#L814).

The new tests involve pre-compiled solidity contracts. It may be better to move them to epm, or to replace them with hand-written minimal byte code that captures the functionality.
",closed,True,2016-07-28 03:18:53,2016-07-28 17:18:30
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/181,https://api.github.com/repos/hyperledger/burrow/issues/181,tendermint vm: CREATE opcode pass NewAccount caller,"relates to (and solves on master) #164;
fix indicated by reduced tests posted by @dennismckinnon to be integrated in eris-pm

PRs follow for eris-db:develop
",closed,True,2016-07-28 01:19:08,2016-07-28 01:32:19
burrow,pietv,https://github.com/hyperledger/burrow/issues/180,https://api.github.com/repos/hyperledger/burrow/issues/180,Allow terser erisdb logging levels to allow `docker logs` and `eris chains logs` in follow mode,"- The `eris chains logs -f` command chokes on the erisdb output (issue [#612](https://github.com/eris-ltd/eris-cli/issues/612)) in the logs follow mode. Allow more terser (the tersest possible) output mode retaining transaction information to be controllable on the cli side with a flag.
",closed,False,2016-07-28 01:08:10,2016-11-24 15:26:30
burrow,getsachmail,https://github.com/hyperledger/burrow/issues/179,https://api.github.com/repos/hyperledger/burrow/issues/179,How to send transaction to a deployed contract with eris-db,"We are able to call deployed contrat's method using eris-contract, as well as we are able to call transaction, blockchain other eris-db functions. Do we need to send transaction using eris-db.txt().transact() method to deployed contract or calling contract's method using eris-contract automatically create a transaction. 
",closed,False,2016-07-27 17:19:55,2016-10-13 01:22:33
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/178,https://api.github.com/repos/hyperledger/burrow/issues/178,Eris client tooling,"Mint client tooling has different targets that relate either to client side functionality or server side functionality:

| mint-client | client side | server side | other |
| --- | --- | --- | --- |
| mintx | eris-client tx |  |  |
| mintinfo | eris-client status |  |  |
| mintconfig |  |  | eris-cm make |
| mintperms | eris-client perm |  |  |
| mintsync |  | eris-db sync |  |
| mintdump |  | eris-db dump |  |
| mintkey | eris-client key |  |  |
| mintunsafe |  |  |  |
",closed,False,2016-07-24 20:04:29,2016-11-24 15:25:49
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/177,https://api.github.com/repos/hyperledger/burrow/issues/177,Implement Subscription and other missing things,"Makes some tests pass in rpc/tendermint/test, not fully, but better than before. Small pieces :cake:
",closed,True,2016-07-21 17:00:12,2016-07-22 13:17:22
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/176,https://api.github.com/repos/hyperledger/burrow/issues/176,Re enable deploy on develop,,closed,True,2016-07-21 12:30:05,2017-04-10 22:13:11
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/175,https://api.github.com/repos/hyperledger/burrow/issues/175,closes #152; Rpc v0 web api test of formatted json data,"Restore web api test on /rpc/v0 that tests the formatting of the rpc, not the underlying implementation of erismint.  This can strongly be cleaned up and improved.
",closed,True,2016-07-20 16:33:04,2017-04-10 22:13:11
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/174,https://api.github.com/repos/hyperledger/burrow/issues/174,Fix Dockerfile; install dependencies with glide was missing,,closed,True,2016-07-19 13:17:17,2016-07-19 13:20:54
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/173,https://api.github.com/repos/hyperledger/burrow/issues/173,Fix Dockerfile; install dependencies with glide missing,"I forgot to actually install the dependencies with glide ...
",closed,True,2016-07-19 13:00:47,2017-04-10 22:13:11
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/172,https://api.github.com/repos/hyperledger/burrow/issues/172,Implementing subscribe/unsubscribe against tendermint RPC,"Implementation of these moved to tendermint:

https://github.com/tendermint/tendermint/blob/master/rpc/core/routes.go#L11

And:

https://github.com/tendermint/tendermint/blob/master/rpc/core/events.go#L10

Should be portable
",closed,False,2016-07-19 08:47:31,2016-08-12 16:00:58
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/171,https://api.github.com/repos/hyperledger/burrow/issues/171,[RPC] Support to watch event logs from the beginning of the blockchain,"A user requested this over at `eris-db.js`: https://github.com/eris-ltd/eris-contracts.js/issues/32
",closed,False,2016-07-18 03:49:01,2018-03-04 13:29:05
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/170,https://api.github.com/repos/hyperledger/burrow/issues/170,Add receipts and fix BroadcastTx tests,"With a bit of related refactoring.

May substantive changes are `GenerateReceipt` and callers thereof. The receipt gets marshalled and unmarshalled from the data payload of the Tendermint response.

Closes #109 
",closed,True,2016-07-15 13:02:03,2016-07-19 08:51:36
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/169,https://api.github.com/repos/hyperledger/burrow/issues/169,should,,closed,False,2016-07-15 12:32:25,2016-07-15 12:32:32
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/168,https://api.github.com/repos/hyperledger/burrow/issues/168,[Transactor] Make transaction signing more sane,"In particular we should formally separate the canonicalisation of a transaction and the serialisation (of that canonical form). Currently they are mixed together:

https://github.com/eris-ltd/eris-db/blob/master/txs/tx.go#L189

This would allow us to compare transactions for structural identity as distinct from byte-wise identity. Although we probably need both given how we update our AppHash and how block hashes are generated.

We would like to use a serialisation standard more portable/widely supported than go-wire.

I would like to consider using something like Avro both to define cross-language transaction types and to produce signable bytes: https://avro.apache.org/docs/current/. We will have to consider the impact of non-determinism in the serialisation, or different byte-wise serialisations of the same data in different implementations.
",closed,False,2016-07-15 12:31:58,2018-02-26 13:56:03
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/167,https://api.github.com/repos/hyperledger/burrow/issues/167,Consider making ChainId part of Tx interface,"Shouldn't a Tx know it's own ChainId? Perhaps for some reason not. Otherwise `Tx` could look like:

``` go
type Tx interface {
    ChainId string
    CanonicalBytes() []byte
}
```

Can we can drop the `chainId` argument from `WriteSignBytes` or `CanonicalBytes`
",closed,False,2016-07-15 12:31:53,2018-04-11 21:09:14
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/166,https://api.github.com/repos/hyperledger/burrow/issues/166,Make transaction signing error-free,"Currently we have two identical interfaces for writing 'sign bytes':

https://github.com/eris-ltd/eris-db/blob/4b5f3cbcc23e6296793ac82bdf29a4f879b9c15f/account/account.go#L37 

``` go
type Signable interface {
    WriteSignBytes(chainID string, w io.Writer, n *int, err *error)
}
```

and:

https://github.com/eris-ltd/eris-db/blob/4b5f3cbcc23e6296793ac82bdf29a4f879b9c15f/txs/tx.go#L66

``` go
type Tx interface {
    WriteSignBytes(chainID string, w io.Writer, n *int, err *error)
}
```

In practice the Signable interface is only used for transactions so provided that is the case I think we should drop it. The interfaces seem to be inherited from go-wire that uses io.Writer and so the possibility of an error infects all callers. In practice we are signing in-memory objects where it should be possible to do so without error. To avoid errors transmitting currently we just panic:

https://github.com/eris-ltd/eris-db/blob/4b5f3cbcc23e6296793ac82bdf29a4f879b9c15f/account/account.go#L46

Not very nice precious.

Instead I propose the interface:

``` go
type Tx interface {
    CanonicalBytes(chainID string) []byte
}
```

This will require checking and removing all `WriteSignBytes` and `Signable` usages
",closed,False,2016-07-15 12:20:19,2018-04-11 21:07:15
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/165,https://api.github.com/repos/hyperledger/burrow/issues/165,Don't use go-wire to hash sign bytes,"txs has a function `TxID`: https://github.com/eris-ltd/eris-db/blob/4b5f3cbcc23e6296793ac82bdf29a4f879b9c15f/txs/tx.go#L367 (to be renamed TxHash)

Currently it uses go-wire.BinaryRipemd160 to generate a ripemd160 hash of the bytes. Since the sign bytes are just a byte slice go-wire adds no value. It invokes some unnecessary reflection, adds a 2 byte prefix, and makes knowledge of go-wire a prerequisite of signing a transaction using vanilla tooling elsewhere.

Instead let's implement it as:

``` go
func TxHash(chainID string, tx Tx) []byte {
    signBytes := acm.SignBytes(chainID, tx)
    hasher := ripemd160.New()
    hasher.Write(signBytes)
    // Calling Sum(nil) just gives us the digest with nothing prefixed
    return hasher.Sum(nil)
}
```
",closed,False,2016-07-15 12:11:36,2018-01-31 15:56:12
burrow,j-h-scheufen,https://github.com/hyperledger/burrow/issues/164,https://api.github.com/repos/hyperledger/burrow/issues/164,Account address generation for factory pattern can lead to storage overwrite of existing accounts ,"```
OSX version: 10.11.5
Eris CLI Version: 0.12.0
Docker:
Client:
 Version:      1.11.1
 API version:  1.23
 Go version:   go1.5.4
 Git commit:   5604cbe
 Built:        Tue Apr 26 23:44:17 2016
 OS/Arch:      darwin/amd64
Server:
 Version:      1.11.1
 API version:  1.23
 Go version:   go1.5.4
 Git commit:   5604cbe
 Built:        Wed Apr 27 00:34:20 2016
 OS/Arch:      linux/amd64
docker-machine version 0.7.0, build a650a40
```

The following problematic behavior has been observed when creating new contract instances from within other contracts in Solidity:
1. Calling the `new` constructor of another contract from a _top-level_ contract account, i.e. the contract that is invoked by an external call from EPM or JS, always creates a new address as expected.
2. Delegating from the _top-level_ contract to another contract (or further down) to call the `new` constructor creates a new address only upon first invocation. Any subsequent invocation results in creating the same address and as a result the storage that existed at the address is overwritten!

The attached contracts and EPM scripts ([factory-test.zip](https://github.com/eris-ltd/eris-db/files/364748/factory-test.zip)) can be used to reproduce the behavior in the following sequence:
1. Create a new chain
2. `cp epm.yaml.1 epm.yaml` and run it **once** to deploy the contracts
3. Copy the address of the deployed `InstructionManager` contract (which acts as the mentioned _top-level contract_) from the console output and paste it in the first job in the `epm.yaml.2` file
4. `cp epm.yaml.2 epm.yaml` and run it **once**.
5. Take note of the new Instruction contract addresses created by the _level 1 & 2_ factory contracts. Use these addresses to make a copy of their storage, e.g.: `http://192.168.99.100:46657/dump_storage?address=""799DF4C5232A8CB99F8A5237B999B8C84DBF7746""`
6. Run the epm.yaml **again**. This time around it will provoke the creation of already existing addresses by the _level 1 & 2_ factories and the storage at these addresses will be overwritten.

The following is the console output from the above sequence:

```
$ cp epm.yaml.1 epm.yaml

jan at MacBook-Pro-6 in ~/Development/git/github.com/eris-ltd/eris-contracts-bundles/src/factory-test on instruction-registry-indexing-48 [!?]
$ eris pkgs do -c test -a 609DE71ECA4548D090757E63E69E62898D2D037F -l https://compilers.eris.industries:10113
Performing action. This can sometimes take a wee while
Executing Job                                 defaultAddr
Executing Job                                 InstructionManagerK
Deploying Contract                       name=Instruction
                                         addr=98287351E4A6FE4C08457D66FE8C336B0CD97402
Deploying Contract                       name=InstructionManager
                                         addr=7B1FC9DD4A5DA4D45FE682FBD5CA0DEE96041239
Deploying Contract                       name=Level1Creator
                                         addr=71DF904F5D69E6E5F1480D7B6F96E6C2371BD3AC
Deploying Contract                       name=Level2Creator
                                         addr=053635F196CCA78337BBB683ACDBB80CECD9EEA0
Deploying Contract                       name=Owned
                                         addr=EFEEFCA8885FF186F7F4C32FFA60A7D3E9902E03
Executing Job                                 Level1K
Return Value                                  D96EAF45A317A8740E984272EAC5AC018186E202
Executing Job                                 Level2K
Return Value                                  AAC0670C944E39FE62EC44659AEB7A02CE989E37

jan at MacBook-Pro-6 in ~/Development/git/github.com/eris-ltd/eris-contracts-bundles/src/factory-test on instruction-registry-indexing-48 [!?]
$ cp epm.yaml.2 epm.yaml

jan at MacBook-Pro-6 in ~/Development/git/github.com/eris-ltd/eris-contracts-bundles/src/factory-test on instruction-registry-indexing-48 [!?]
$ eris pkgs do -c test -a 609DE71ECA4548D090757E63E69E62898D2D037F -l https://compilers.eris.industries:10113
Performing action. This can sometimes take a wee while
Executing Job                                 defaultAddr
Executing Job                                 InstructionManagerK
Executing Job                                 level0-1
Return Value                                  success
Executing Job                                 lastRegisteredAddressPairL0
Return Value                                  (0000000000000000000000000000000000000000, 614D8884D6117D3838E74C65CEF1F8D2B7D3DE67)
Executing Job                                 duplicateL0
Return Value                                  0000000000000000000000000000000000000000
Executing Job                                 level1-1
Return Value                                  success
Executing Job                                 lastRegisteredAddressPairL1
Return Value                                  (614D8884D6117D3838E74C65CEF1F8D2B7D3DE67, 799DF4C5232A8CB99F8A5237B999B8C84DBF7746)
Executing Job                                 duplicateL1
Return Value                                  0000000000000000000000000000000000000000
Executing Job                                 level2-1
Return Value                                  success
Executing Job                                 lastRegisteredAddressPairL2
Return Value                                  (799DF4C5232A8CB99F8A5237B999B8C84DBF7746, FF80313C63FC8309796129311A680C3EF62657E4)
Executing Job                                 duplicateL2
Return Value                                  0000000000000000000000000000000000000000

jan at MacBook-Pro-6 in ~/Development/git/github.com/eris-ltd/eris-contracts-bundles/src/factory-test on instruction-registry-indexing-48 [!?]
$ eris pkgs do -c test -a 609DE71ECA4548D090757E63E69E62898D2D037F -l https://compilers.eris.industries:10113
Performing action. This can sometimes take a wee while
Executing Job                                 defaultAddr
Executing Job                                 InstructionManagerK
Executing Job                                 level0-1
Return Value                                  success
Executing Job                                 lastRegisteredAddressPairL0
Return Value                                  (FF80313C63FC8309796129311A680C3EF62657E4, 9F26BBD07A757AD7469FA3047F5408731CD3AD31)
Executing Job                                 duplicateL0
Return Value                                  0000000000000000000000000000000000000000
Executing Job                                 level1-1
Return Value                                  Address overwrite detected. New address already registered!
Executing Job                                 lastRegisteredAddressPairL1
Return Value                                  (FF80313C63FC8309796129311A680C3EF62657E4, 9F26BBD07A757AD7469FA3047F5408731CD3AD31)
Executing Job                                 duplicateL1
Return Value                                  799DF4C5232A8CB99F8A5237B999B8C84DBF7746
Executing Job                                 level2-1
Return Value                                  Address overwrite detected. New address already registered!
Executing Job                                 lastRegisteredAddressPairL2
Return Value                                  (FF80313C63FC8309796129311A680C3EF62657E4, 9F26BBD07A757AD7469FA3047F5408731CD3AD31)
Executing Job                                 duplicateL2
Return Value                                  FF80313C63FC8309796129311A680C3EF62657E4
```

The change of storage at the two addresses identified as duplicates was captured in the following files. The _rootStorage_ changed as well as one of the keys for the _maturityDate_ since it uses a timestamp.

[799DF4C5232A8CB99F8A5237B999B8C84DBF7746-after.json.txt](https://github.com/eris-ltd/eris-db/files/364743/799DF4C5232A8CB99F8A5237B999B8C84DBF7746-after.json.txt)
[799DF4C5232A8CB99F8A5237B999B8C84DBF7746-before.json.txt](https://github.com/eris-ltd/eris-db/files/364744/799DF4C5232A8CB99F8A5237B999B8C84DBF7746-before.json.txt)
[FF80313C63FC8309796129311A680C3EF62657E4-after.json.txt](https://github.com/eris-ltd/eris-db/files/364741/FF80313C63FC8309796129311A680C3EF62657E4-after.json.txt)
[FF80313C63FC8309796129311A680C3EF62657E4-before.json.txt](https://github.com/eris-ltd/eris-db/files/364742/FF80313C63FC8309796129311A680C3EF62657E4-before.json.txt)
",closed,False,2016-07-14 20:51:31,2017-04-10 22:13:11
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/163,https://api.github.com/repos/hyperledger/burrow/issues/163,Reimplement functionality to load and register chain from/on etcb,"for reference of deleted dead code on 0.12.0:
https://github.com/eris-ltd/eris-db/blob/4fc4fab54e2a9f6c2e1cbcabf00adf8d08f08a7a/DOCKER/chain_register.sh
",closed,False,2016-07-13 23:54:43,2016-11-24 15:23:32
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/162,https://api.github.com/repos/hyperledger/burrow/issues/162,assert and write serialisation unit tests for both rpc `/v0` and `/tendermint`,,closed,False,2016-07-12 10:57:19,2016-11-24 15:07:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/161,https://api.github.com/repos/hyperledger/burrow/issues/161,Deployment: on `docker tag -f` flag f is to be deprecated,"in `./tests/build_tool.sh` on (most) eris repositories
",closed,False,2016-07-11 17:22:30,2016-10-13 19:03:47
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/160,https://api.github.com/repos/hyperledger/burrow/issues/160,Deployment docker and ecm,"includes #157 partially, so merge after #157 is merged.
",closed,True,2016-07-11 14:17:06,2016-07-19 09:32:15
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/159,https://api.github.com/repos/hyperledger/burrow/issues/159,Carry over arm blockchain impl," includes https://github.com/eris-ltd/eris-db/pull/157; so merge after 157 is merged
",closed,True,2016-07-11 14:14:48,2017-04-10 22:13:11
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/158,https://api.github.com/repos/hyperledger/burrow/issues/158,Gofmt'd everything,"Also includes missing file from my accidental push.

Closes #156 
",closed,True,2016-07-11 13:27:17,2017-04-10 22:13:11
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/157,https://api.github.com/repos/hyperledger/burrow/issues/157,Issue152 disable mock web api tests,"Disable mock web_api tests; blocked on Codec / go-wire Parsing issue; but also tests need a separation of actual rpc test and state test
",closed,True,2016-07-11 13:21:55,2017-04-10 22:13:11
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/156,https://api.github.com/repos/hyperledger/burrow/issues/156,Run gofmt on develop,,closed,False,2016-07-11 12:56:43,2017-04-10 22:13:11
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/155,https://api.github.com/repos/hyperledger/burrow/issues/155,Upgrade existing chains to single configuration file and configure for single data directory,"1. Eris-DB v0.11.4 and prior read `config.toml` by Tendermint and `server_conf.toml` by Eris-DB; as of 0.12.0-rc2 Eris-DB reads a single `server_config.toml`
2. As of Eris-DB v0.12.0rc2 the state database is (by default) separated from the consensus engine block store; but on existing chains (Eris-DB v0.11.4) these files are in the same directory; make sure Eris-DB v0.12.0 configures itself for a single shared directory for existing chains.
",closed,False,2016-07-11 09:43:38,2016-10-07 13:25:04
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/154,https://api.github.com/repos/hyperledger/burrow/issues/154,[Tests] Implement network level tests on 4-7 node chains,"Create a separate test-executable that functions as a full node, but runs a json-defined test suite against a (test) chain.

Initial commit: https://github.com/benjaminbollen/eris-db/tree/networktests
",closed,False,2016-07-11 09:19:56,2018-04-11 21:06:29
burrow,zramsay,https://github.com/hyperledger/burrow/issues/153,https://api.github.com/repos/hyperledger/burrow/issues/153,"[RPC] `/healthz` endpoint - define introspective health check endpoint - ""Yes, I'm alive!""","Related to: https://github.com/eris-ltd/eris-cli/issues/984

The idea is an endpoint that performs a bunch of health checks and returns `ok` or `!ok`. It's supposed to be an emerging standard for golang/anylang APIs but maybe isn't picking up",closed,False,2016-07-10 22:15:56,2017-03-04 04:11:56
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/152,https://api.github.com/repos/hyperledger/burrow/issues/152,Restore mock_web_api_test on RPC v0,"Bug on go-wire error on parsing TestData for mock_web_api_test

```
18:28 $ go test ./test/mock
--- FAIL: TestMockSuite (0.00s)
panic: Expected type [Byte,?] but got type string [recovered]
    panic: Expected type [Byte,?] but got type string

goroutine 28 [running]:
testing.tRunner.func1(0xc8204a4a20)
    /usr/local/go/src/testing/testing.go:450 +0x171
github.com/eris-ltd/eris-db/test/testdata/testdata.LoadTestData(0xbe36f0)
    /home/bbollen/golang/src/github.com/eris-ltd/eris-db/test/testdata/testdata/testdata.go:704 +0x194
github.com/eris-ltd/eris-db/test/mock.(*MockSuite).SetupSuite(0xc82048d020)
    /home/bbollen/golang/src/github.com/eris-ltd/eris-db/test/mock/mock_web_api_test.go:47 +0x40
github.com/eris-ltd/eris-db/vendor/github.com/stretchr/testify/suite.Run(0xc8204a4a20, 0x7f7c29dbb900, 0xc82048d020)
    /home/bbollen/golang/src/github.com/eris-ltd/eris-db/vendor/github.com/stretchr/testify/suite/suite.go:63 +0xda
github.com/eris-ltd/eris-db/test/mock.TestMockSuite(0xc8204a4a20)
    /home/bbollen/golang/src/github.com/eris-ltd/eris-db/test/mock/mock_web_api_test.go:322 +0x7a
testing.tRunner(0xc8204a4a20, 0x12b1100)
    /usr/local/go/src/testing/testing.go:456 +0x98
created by testing.RunTests
    /usr/local/go/src/testing/testing.go:561 +0x86d

goroutine 1 [chan receive]:
testing.RunTests(0xd29420, 0x12b1100, 0x1, 0x1, 0xc820463001)
    /usr/local/go/src/testing/testing.go:562 +0x8ad
testing.(*M).Run(0xc82053ded8, 0x7)
    /usr/local/go/src/testing/testing.go:494 +0x70
main.main()
    github.com/eris-ltd/eris-db/test/mock/_test/_testmain.go:54 +0x116

goroutine 17 [syscall, locked to thread]:
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:1721 +0x1

goroutine 5 [syscall]:
os/signal.loop()
    /usr/local/go/src/os/signal/signal_unix.go:22 +0x18
created by os/signal.init.1
    /usr/local/go/src/os/signal/signal_unix.go:28 +0x37
FAIL    github.com/eris-ltd/eris-db/test/mock   0.052s
```

on commit 92b77df026d939a6ac4ece75a3b3d2df2ab733b2
`go test ./test/mock`
",closed,False,2016-07-08 16:33:32,2016-07-20 16:56:39
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/151,https://api.github.com/repos/hyperledger/burrow/issues/151,eris gateway [merged into develop],"Eris-DB has to evolve from an explicit chain implementation to a gateway functionality such that an increasingly rich landscape of blockchain technologies can be normalised through a modular gateway.
- introduce separation of consensus engine, application manager, and gateway rpc
- support tendermint 0.6 in-process
- support ErisMint 0.12 in-process
- support Eris-DB RPC; Tendermint RPC
",closed,True,2016-07-06 13:26:06,2016-07-11 13:26:12
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/150,https://api.github.com/repos/hyperledger/burrow/issues/150,eris gateway,"Eris-DB has to evolve from an explicit chain implementation to a gateway functionality such that an increasingly rich landscape of blockchain technologies can be normalised through a modular gateway.
- introduce separation of consensus engine, application manager, and gateway rpc
- support tendermint 0.6 in-process
- support ErisMint 0.12 in-process
- support Eris-DB RPC; Tendermint RPC
",closed,True,2016-07-05 14:32:17,2016-07-06 18:13:34
burrow,PathHomotopy,https://github.com/hyperledger/burrow/issues/149,https://api.github.com/repos/hyperledger/burrow/issues/149,[eris-contracts.js] Bytes32 passing problem,"Hi all, it appears there is another problem with bytes32. 

When we pass a bytes32 structure (which is less than 32 bytes) from an epm to a solidity contract function, it works. However, when we pass a bytes32 from javascript to solidity, the contract is unable to hold it. We determined this by passing a bytes32 structure from eris-contracts to a contract which returns the bytes32 structure it received. Rather than returning our bytes32 input, it returns 000000000... Thanks!
",closed,False,2016-06-28 20:25:30,2018-04-11 21:06:06
burrow,sirinath,https://github.com/hyperledger/burrow/issues/148,https://api.github.com/repos/hyperledger/burrow/issues/148,ASL 2.0 | MIT | BSD,"Is it possible to license the product suit under a more permissive license?
",closed,False,2016-06-26 06:12:49,2016-06-26 16:10:09
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/147,https://api.github.com/repos/hyperledger/burrow/issues/147,Glidable -- Test to validate that CI can glide install and build,,closed,True,2016-06-21 09:56:38,2016-06-21 10:37:21
burrow,aubreychen,https://github.com/hyperledger/burrow/issues/146,https://api.github.com/repos/hyperledger/burrow/issues/146,want to verify sig inside contract; ecrecover not possible,"I would like to be able to do signature verification inside a smart contract so that I do not have to trust outside oracles.

From my understanding, Eris uses a different key type than Ethereum so the solidity ecrecover function will never work with an Eris key.

Requesting that a custom native contract be added implementing the signature verification as a native contract so that the public key can be recovered from a signature.
",closed,False,2016-06-20 15:54:08,2016-10-13 19:09:54
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/145,https://api.github.com/repos/hyperledger/burrow/issues/145,Issue #143 concurrency bug in godeps/tendermint/event RemoveListener,"fixes #143; godeps/tendermint/event.go: claim full lock on delete listener; refer to https://github.com/tendermint/go-events/pull/4 for more details.

As a lot of work has been put into moving Eris-DB to work with the up-to-date Tendermint, and the bug is tested and corrected there; we only apply a hot-patch here.
",closed,True,2016-06-17 12:33:56,2017-04-10 22:13:10
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/144,https://api.github.com/repos/hyperledger/burrow/issues/144,Create test that demonstrates `BroadcastTx` working.,"This is blocking https://github.com/eris-ltd/eris-contracts.js/issues/23, which is important to Casey.
",closed,False,2016-06-17 00:24:31,2016-07-18 19:56:31
burrow,dennismckinnon,https://github.com/hyperledger/burrow/issues/143,https://api.github.com/repos/hyperledger/burrow/issues/143,concurrent map writes crashed erisdb,"``` 
T    Tx:CallTx{TxInput{EA58F6DE2C3837D6F63178832DDBF823563643EC,1,14,/30A1643A8AA0.../,<nil>} -> 4326c9446051cdead4a3e824e576aba1fea23935: 0bfefed400000000000000000000000090f173ed9e6730526e4c155f252ac50635743b2700000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000143734373936633635373232643638363936343635000000000000000000000000}
-  }#06B99BE1BFC08C969C517A81DBBB0DD08C842B6C
  Validation{
c    Precommits: Vote{544/00/2(Precommit) BA29D5F3E411#PartSet{T:3 E6C46477D776} /09789324C8EF.../}
W    Vote{544/00/2(Precommit) BA29D5F3E411#PartSet{T:3 E6C46477D776} /14862D6AAC76.../}
W    Vote{544/00/2(Precommit) BA29D5F3E411#PartSet{T:3 E6C46477D776} /A3D95007BEC9.../}
-  }#C1B824E1117BFDF5D29EF3372B1E9DB11842A1AA
E}#0B00A587DB3BF5E0617E2372F10E2A73A58931CD module=consensus
�INFO[06-15|02:44:15] Broadcast                                module=p2p channel=20 msg=""[NewRoundStep H:546 R:0 S:RoundStepNewHeight LCR:0]""
INFO[06-15|02:44:15] Send                                     module=p2p channel=20 conn=MConn{192.168.1.15:49823} msg=""[NewRoundStep H:546 R:0 S:RoundStepNewHeight LCR:0]""
#fatal error: concurrent map writes
/fatal error: concurrent map read and map write

goroutine 34679 [running]:
runtime.throw(0xc7c850, 0x15)
L  /usr/lib/go/src/runtime/panic.go:547 +0x90 fp=0xc820ebd000 sp=0xc820ebcfe8
8runtime.mapdelete(0x9ec9e0, 0xc820119b30, 0xc820ebd0b8)
N  /usr/lib/go/src/runtime/hashmap.go:559 +0x5a fp=0xc820ebd060 sp=0xc820ebd000
�github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/events.(*EventSwitch).RemoveListener(0xc820190900, 0xc820ec28a0, 0x28)
�    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/events/events.go:72 +0xd7 fp=0xc820ebd110 sp=0xc820ebd060
xgithub.com/eris-ltd/eris-db/erisdb/pipe.(*events).Unsubscribe(0xc820084060, 0xc820ec28a0, 0x28, 0xc82115ae01, 0x0, 0x0)
d  /go/src/github.com/eris-ltd/eris-db/erisdb/pipe/events.go:27 +0x44 fp=0xc820ebd130 sp=0xc820ebd110
�github.com/eris-ltd/eris-db/erisdb/pipe.(*transactor).TransactAndHold(0xc820de4040, 0xc8214272c0, 0x40, 0x40, 0xc820eee340, 0x14, 0x14, 0xc821282a50, 0xe4, 0xe4, ...)
j  /go/src/github.com/eris-ltd/eris-db/erisdb/pipe/transactor.go:206 +0x528 fp=0xc820ebd360 sp=0xc820ebd130
�github.com/eris-ltd/eris-db/erisdb.(*ErisDbMethods).TransactAndHold(0xc820dde340, 0xc82011be00, 0xbbb5e0, 0xc8201046e0, 0x0, 0x0, 0xc8211854a8, 0x0, 0x0)
b  /go/src/github.com/eris-ltd/eris-db/erisdb/methods.go:420 +0x21d fp=0xc820ebd438 sp=0xc820ebd360
�github.com/eris-ltd/eris-db/erisdb.(*ErisDbMethods).TransactAndHold-fm(0xc82011be00, 0xbbb5e0, 0xc8201046e0, 0x0, 0x0, 0x411d01, 0x0, 0x0)
a  /go/src/github.com/eris-ltd/eris-db/erisdb/methods.go:103 +0x64 fp=0xc820ebd488 sp=0xc820ebd438
zgithub.com/eris-ltd/eris-db/erisdb.(*ErisDbJsonService).Process(0xc820de6150, 0xc821699340, 0x7f4d9ca11bf8, 0xc8201046e0)
f  /go/src/github.com/eris-ltd/eris-db/erisdb/json_service.go:94 +0x32a fp=0xc820ebd570 sp=0xc820ebd488
[github.com/eris-ltd/eris-db/erisdb.(*JsonRpcServer).handleFunc(0xc820dde360, 0xc8201046e0)
e  /go/src/github.com/eris-ltd/eris-db/erisdb/json_service.go:45 +0xa3 fp=0xc820ebd5c8 sp=0xc820ebd570
ugithub.com/eris-ltd/eris-db/erisdb.(*JsonRpcServer).(github.com/eris-ltd/eris-db/erisdb.handleFunc)-fm(0xc8201046e0)
```
",closed,False,2016-06-15 02:51:11,2017-04-10 22:13:10
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/142,https://api.github.com/repos/hyperledger/burrow/issues/142,Activate servers,"We move the servers as they exist from Eris-DB into a new structure; but we explicitly preserve the existing code and API.  The aim is to subsequently review collectively a new architecture for the API.

Note that this PR does not yet have the Tendermint exposed RPC
",closed,True,2016-06-14 13:40:16,2016-07-05 14:20:29
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/141,https://api.github.com/repos/hyperledger/burrow/issues/141,v0.12.0-rc1 Release,"- arm support
- fix of permissions for evm
- alpine
- godocs
",closed,True,2016-06-13 17:57:20,2016-06-13 17:59:03
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/140,https://api.github.com/repos/hyperledger/burrow/issues/140,add git verify-commit HEAD on CI,,closed,True,2016-06-10 21:46:05,2017-04-10 22:13:10
burrow,zramsay,https://github.com/hyperledger/burrow/issues/139,https://api.github.com/repos/hyperledger/burrow/issues/139,resolve extra file for arm,"see #137 for more info. requires consideration of int/uint
",closed,False,2016-06-10 18:18:57,2017-04-10 22:13:10
burrow,compleatang,https://github.com/hyperledger/burrow/pull/138,https://api.github.com/repos/hyperledger/burrow/issues/138,fixup for develop-tmsp,,closed,True,2016-06-10 17:35:08,2017-04-10 22:13:10
burrow,shuangjj,https://github.com/hyperledger/burrow/pull/137,https://api.github.com/repos/hyperledger/burrow/issues/137,Native support for ARM,"closes https://github.com/eris-ltd/eris-cli/issues/718
",closed,True,2016-06-10 16:58:49,2016-06-10 18:16:12
burrow,compleatang,https://github.com/hyperledger/burrow/pull/136,https://api.github.com/repos/hyperledger/burrow/issues/136,finalize the right padding of permissions for other roles funcs,"don't merge just yet. testing locally.
",closed,True,2016-06-10 16:53:20,2017-04-10 22:13:10
burrow,compleatang,https://github.com/hyperledger/burrow/issues/135,https://api.github.com/repos/hyperledger/burrow/issues/135,Update Readme,"cause it's.... old.
",closed,False,2016-06-09 22:43:14,2016-10-11 09:52:54
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/134,https://api.github.com/repos/hyperledger/burrow/issues/134,changes to fix permissions -> evm connection,"Just to make sure they are on develop-0.12.0 with the old godeps as well;
for the Build script to pick up the right version number for labeling, the version number needs to be on the last line of version/version.go
",closed,True,2016-06-09 22:08:05,2016-06-09 22:29:51
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/133,https://api.github.com/repos/hyperledger/burrow/issues/133,re-introduce deployment from develop branch,"This might fix the cause of the failing E-PM tests (I had disabled deployment of the containers on develop branch)
",closed,True,2016-06-09 21:42:25,2016-06-09 22:05:24
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/132,https://api.github.com/repos/hyperledger/burrow/issues/132,@compleatang changes fix to permissions -> evm connection; - merge into discuss-eris-gateway,"applied to discuss-eris-gateway branch
https://github.com/eris-ltd/eris-db/commit/4769e410880a6daa7a6d2b5d1d7d3c86137223f2

Signed-off-by: Benjamin Bollen ben@erisindustries.com
",closed,True,2016-06-09 21:11:21,2016-06-09 21:33:59
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/131,https://api.github.com/repos/hyperledger/burrow/issues/131,Permissions SNative - into develop-tmsp,"https://github.com/eris-ltd/eris-db/commit/4769e410880a6daa7a6d2b5d1d7d3c86137223f2
",closed,True,2016-06-09 21:10:21,2016-06-09 21:14:27
burrow,compleatang,https://github.com/hyperledger/burrow/pull/130,https://api.github.com/repos/hyperledger/burrow/issues/130,provide fixes for the evm -> permissions sNative path,,closed,True,2016-06-09 20:43:35,2016-06-09 21:15:47
burrow,zramsay,https://github.com/hyperledger/burrow/pull/129,https://api.github.com/repos/hyperledger/burrow/issues/129,updates to README,"fix circle badge & add godoc link & clarify/type in README
",closed,True,2016-06-05 17:08:05,2016-06-09 17:59:23
burrow,AFDudley,https://github.com/hyperledger/burrow/pull/128,https://api.github.com/repos/hyperledger/burrow/issues/128,Dockerfile builds.,,closed,True,2016-05-31 04:34:08,2016-06-02 21:48:52
burrow,AFDudley,https://github.com/hyperledger/burrow/pull/127,https://api.github.com/repos/hyperledger/burrow/issues/127,Dockerfile builds. untested.,"This uses the new base docker image I created.
",closed,True,2016-05-18 17:40:11,2016-06-02 21:33:32
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/126,https://api.github.com/repos/hyperledger/burrow/issues/126,Tests building considered success,"So this is a kind of filthy one guys... But for the time being, so that Circle CI can actually provide us with some useful feedback on PRs (other than the tests are failing - thanks, we know) I'm proposing we just build the tests, and don't run them. We can add in those tests that we fix to run as we fix the piecemeal.

So this:
- Nukes ./test/... (good idea?) in favour of starting from scratch on those against refactor
- Overrides circle's test to just build the tests, while we work towards working tests
",closed,True,2016-05-17 16:43:09,2017-04-10 22:13:10
burrow,ebuchman,https://github.com/hyperledger/burrow/pull/125,https://api.github.com/repos/hyperledger/burrow/issues/125,make some tests build,"some simple dependency fixes to make tests build.

note the test folder is out of scope - we're moving to deprecate it because I don't really know how anyone is expected to be able to maintain it (very brittle). and of course rpc tests are still failing, ala at least #109
",closed,True,2016-05-17 15:37:40,2016-05-17 16:17:42
burrow,ebuchman,https://github.com/hyperledger/burrow/pull/124,https://api.github.com/repos/hyperledger/burrow/issues/124,Test build fixes,"some simple dependency fixes to make tests build.

note the `test` folder is out of scope - we're moving to deprecate it because I don't really know how anyone is expected to be able to maintain it (very brittle). and of course rpc tests are still failing, ala at least https://github.com/eris-ltd/eris-db/issues/109
",closed,True,2016-05-17 15:36:48,2016-05-17 15:37:04
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/123,https://api.github.com/repos/hyperledger/burrow/issues/123,"quick patch to develop_tmsp, separating the config files;","this is needed to avoid edb to assume that tendermints written config file is edbs config file
the current code is highly unsafe as a differently structured config file will produce a runtime error

this should have been addressed in #118 

I am also aware of @ebuchman suggestion in #118; but this is not the direction to take as the unified config file does not work:
1. tendermint is configureable through a configuration file (not per se through an exposed api), and writes to this config file (eg `tendermint init`); this is the first reason to separate the config files
2. edb should be able to treat the modules (eg tendermint as consensus) as functional black boxes, and should not have to update it's config file to cater internal changes of modules and their config files;

edb will have its config file and this config will specify the modules their versions and where their separate working directories and config files are.  A combined config file format is unversionable/unmanageable
",closed,True,2016-05-16 19:44:37,2016-05-16 20:25:42
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/122,https://api.github.com/repos/hyperledger/burrow/issues/122,Improve glide dependencies using fire,"This PR removes the transitive dependencies of tendermint/tendermint, and just depends on tendermint/tendermint, allowing glide to do its thing and pull in the various tendermint dependencies as specified by tendermint's glide.yaml. This should give us a consistent set of versions of tendermint dependencies.
",closed,True,2016-05-16 19:26:52,2017-04-10 22:13:10
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/121,https://api.github.com/repos/hyperledger/burrow/issues/121,[DO NOT MERGE] Tmroot,"- [ ] 1. bring e-cm and e-db in line
- [x] 2. move tendermint to the status of a consensus module
- [x] 3. clean up config and command line interface for eris-db with cobra and viper
- [ ] 4. clean up DOCKER and shell scripts interface into eris-db

out-of-scope extras
a. import event subscription infrastructure from go-ethereum
",closed,True,2016-05-16 14:49:44,2016-06-09 17:50:15
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/120,https://api.github.com/repos/hyperledger/burrow/issues/120,GetBlocks fails to return blocks,"`http://192.168.99.100:35320/blockchain/blocks` returns

```
{""min_height"":382,""max_height"":0,""block_metas"":[]}
```

The **Example Queries** from [the documentation](https://github.com/eris-ltd/eris-db/blob/master/api.md#getblocks) also yield no results:

`http://192.168.99.100:35320/blockchain/blocks?q=height:>4` returns

```
{""min_height"":287,""max_height"":5,""block_metas"":[]}
```

`http://192.168.99.100:35320/blockchain/blocks?q=height:10..*` returns

```
{""min_height"":279,""max_height"":10,""block_metas"":[]}
```

No matter what query I chose, `block_metas` is always empty.

This has been reported by two users as well: https://github.com/eris-ltd/eris-db.js/issues/32 and https://support.erisindustries.com/discussions/topics/6000034973.
",closed,False,2016-05-16 05:13:56,2016-10-11 14:01:15
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/119,https://api.github.com/repos/hyperledger/burrow/issues/119,versioned doc generation,"Linking to original issue https://github.com/eris-ltd/docs.erisindustries.com/issues/26#issuecomment-217309899
",closed,False,2016-05-12 12:16:34,2016-07-11 16:29:02
burrow,ebuchman,https://github.com/hyperledger/burrow/pull/118,https://api.github.com/repos/hyperledger/burrow/issues/118,No global config (from tendermint),"This should work after a glide install.

Install latest tendermint master.
Run `TMROOT=~/tmroot tendermint init`

and then `erisdb ~/tmroot inproc` should run erisdb inproc with tendermint over tmsp interface (you should see blocks)

Work on tests can resume in `rpc/tests`. eg. `go test --test.run Status` should pass, `go test --test.run Broadcast` should fail
",closed,True,2016-05-11 21:03:25,2016-05-16 19:14:46
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/117,https://api.github.com/repos/hyperledger/burrow/issues/117,Tendermint root folder,"E-DB should separate the folder structures for its dependencies, where currently `TMROOT` is collapsed with the eris-db work directory.

```
CHAIN_DIR = /home/eris/.eris/chains/${CHAIN_ID}/
TMROOT=${CHAIN_DIR}/tendermint
${CHAIN_DIR}/tendermint/config.toml
```
",closed,False,2016-05-11 15:36:01,2016-07-24 11:55:24
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/116,https://api.github.com/repos/hyperledger/burrow/issues/116,Start of CHANGELOG.md,"Propose a CHANGELOG.md; format borrowed from go-ipfs

changelog should be updated on every release cycle; as a backlog item we can complete for recent versions.

apologies for also pulling in minor clean-up, if any objections happy to separate out the commits.
",closed,True,2016-05-11 14:54:06,2017-04-10 22:13:09
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/115,https://api.github.com/repos/hyperledger/burrow/issues/115,Revert deprecation of Send and SendAndHold in Eris-DB 0.12.0 staging,"Eris-DB methods `Send` and `SendAndHold` have been deprecated, only keeping `Transact` and `TransactAndHold`, in develop-tmsp (staging branch for 0.12.0).

@dennismckinnon @NodeGuy might want to object; if so we will revert.

@ebuchman equally interested to hear the argument for deprecation.
",closed,False,2016-05-11 12:32:43,2016-11-24 14:43:21
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/114,https://api.github.com/repos/hyperledger/burrow/issues/114,continue work on develop-tmsp from PR,,closed,True,2016-05-10 22:07:30,2016-05-11 12:24:57
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/113,https://api.github.com/repos/hyperledger/burrow/issues/113,Fix txs references and fix more tests,"This:
- Tries to stabilise tendermint glide dependencies
- Fixes references to txs packages
- Fixes various broken tests (by restoring references to config)
",closed,True,2016-05-10 15:21:01,2016-05-10 16:20:15
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/112,https://api.github.com/repos/hyperledger/burrow/issues/112,Disconnect continuous integration and continuous deployment cycles,"1. Specific interest is to allow pull requests to run through CI without initiating a deployment cycle; external PRs are currently failing over docker login depending on private login details

https://github.com/eris-ltd/eris-db/blob/develop/circle.yml#L20
1. look at integrating the work done in eris-marmont to be integrated in the deployment cycle
",closed,False,2016-05-10 12:28:51,2017-04-10 22:13:09
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/111,https://api.github.com/repos/hyperledger/burrow/issues/111,Configuration file management [Tendermint/TMSP refactor],"Currently tendermint requires `config.toml` and eris-db uses `server_config.toml`;
Going forward with the modularisation the application manager will require configuration options.

github.com/eris-ltd/eris-cm has the responsibility of providing the correct configuration files to containers.  E-DB should not write default configuration files if missing, instead error.

It is proposed there should be a single config file for a single process/chain/container; this implies that in-process tendermint (or later geth vm) needs to be fully configured through eris-db config.  This complicates tendermints and eris-db config handling as there is a dual approach.
",closed,False,2016-05-10 10:36:20,2016-06-03 12:13:16
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/110,https://api.github.com/repos/hyperledger/burrow/issues/110,RPC unit tests [tendermint in-process],"_TMSP refactor_
",closed,False,2016-05-10 08:06:19,2017-04-10 22:13:09
burrow,ebuchman,https://github.com/hyperledger/burrow/issues/109,https://api.github.com/repos/hyperledger/burrow/issues/109,return a tx receipt from CheckTx/AppendTx,"Return https://github.com/eris-ltd/eris-db/blob/develop-tmsp/rpc/core/types/responses.go#L102 and 
https://github.com/eris-ltd/eris-db/blob/develop-tmsp/tmsp/erisdb.go#L145
ought to return https://github.com/eris-ltd/eris-db/blob/develop-tmsp/rpc/core/types/responses.go#L102
so that https://github.com/eris-ltd/eris-db/blob/develop-tmsp/rpc/test/tests.go#L81 works.

Note the receipt used to be generated in the broadcast_tx rpc function itself (https://github.com/eris-ltd/tendermint/blob/develop/rpc/core/mempool.go#L29) but broadcast_tx is now going to be something that happens on tendermint's end, so won't necessarily have access to that unless it's returned as data or log in the TMSP response. alternatively, if we keep broadcast_tx in eris_db, it could happen in broadcast_tx, but the erisdb tmsp app would be more useful if it returned this data itself
",closed,False,2016-05-06 18:33:59,2017-04-10 22:13:09
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/108,https://api.github.com/repos/hyperledger/burrow/issues/108,move files under txs/ into txs package,"Minor clean-up exercise, but we would like to follow package naming conventions, particularly since it breaks some tooling to not.
",closed,True,2016-05-06 17:22:46,2017-04-10 22:13:09
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/107,https://api.github.com/repos/hyperledger/burrow/issues/107,version bump to 0.12.0,,closed,True,2016-04-29 17:07:27,2016-04-29 17:11:54
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/106,https://api.github.com/repos/hyperledger/burrow/issues/106,Don't deploy on develop as :latest is wrongly attached to the develop…,"… image
",closed,True,2016-04-28 16:53:01,2016-04-28 17:03:56
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/105,https://api.github.com/repos/hyperledger/burrow/issues/105,v0.11.4 Release,"Changelog:
- included transacting tests
- corrected CI to not default against master
- remove auto deploy to quay.io for develop branch, only for master
",closed,True,2016-04-28 16:19:23,2016-04-29 15:03:45
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/104,https://api.github.com/repos/hyperledger/burrow/issues/104,"Don't test the present branch against erisdb master, that's not cool",,closed,True,2016-04-28 15:44:33,2016-04-28 16:15:09
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/103,https://api.github.com/repos/hyperledger/burrow/issues/103,(re-)disable transacting_test.go,,closed,True,2016-04-28 15:25:36,2016-04-28 19:29:28
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/102,https://api.github.com/repos/hyperledger/burrow/issues/102,(re-)disable transacting_test.go,,closed,True,2016-04-28 15:19:53,2016-04-28 15:25:08
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/101,https://api.github.com/repos/hyperledger/burrow/issues/101,version bump 0.11.4,"- minor improvement to test
",closed,True,2016-04-28 14:03:37,2016-04-28 16:18:19
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/100,https://api.github.com/repos/hyperledger/burrow/issues/100,tmsp development back to feature branch,"Combines updated glide dependencies with tmsp_dev and tmsp_inproc changes
",closed,True,2016-04-19 15:34:46,2016-05-11 21:02:20
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/99,https://api.github.com/repos/hyperledger/burrow/issues/99,Fairly empty version bump,,closed,True,2016-04-18 16:22:12,2016-04-22 17:39:19
burrow,ebuchman,https://github.com/hyperledger/burrow/pull/98,https://api.github.com/repos/hyperledger/burrow/issues/98,Tmsp dev,,closed,True,2016-04-14 21:35:22,2016-04-19 15:35:00
burrow,AFDudley,https://github.com/hyperledger/burrow/issues/97,https://api.github.com/repos/hyperledger/burrow/issues/97,"Ran chains new, got this.","$ eris chains logs TEST-2016-04-13T20-25-21-57
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/syndtr/goleveldb/leveldb/db.go:132 +0x8ae

goroutine 29 [sleep]:
time.Sleep(0x12a05f200)
    /usr/local/go/src/runtime/time.go:59 +0xf9
github.com/eris-ltd/eris-db/erisdb.reap(0xc8201ad4a0)
    /go/src/github.com/eris-ltd/eris-db/erisdb/event_cache.go:70 +0x4e
created by github.com/eris-ltd/eris-db/erisdb.NewEventSubscriptions
    /go/src/github.com/eris-ltd/eris-db/erisdb/event_cache.go:62 +0x101

goroutine 30 [chan receive]:
github.com/eris-ltd/eris-db/erisdb.startNode(0xc820126e60, 0xc8200e1800, 0xc820267a40)
    /go/src/github.com/eris-ltd/eris-db/erisdb/serve.go:128 +0x19e
created by github.com/eris-ltd/eris-db/erisdb.ServeErisDB
    /go/src/github.com/eris-ltd/eris-db/erisdb/serve.go:102 +0xbaa

goroutine 31 [IO wait]:
net.runtime_pollWait(0x7f472342eb18, 0x72, 0xc8200121b0)
    /usr/local/go/src/runtime/netpoll.go:157 +0x60
net.(_pollDesc).Wait(0xc820196840, 0x72, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:73 +0x3a
net.(_pollDesc).WaitRead(0xc820196840, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:78 +0x36
net.(_netFD).accept(0xc8201967e0, 0x0, 0x7f472342eed8, 0xc8200d5020)
    /usr/local/go/src/net/fd_unix.go:408 +0x27c
net.(_TCPListener).AcceptTCP(0xc820028238, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/tcpsock_posix.go:254 +0x4d
net.(_TCPListener).Accept(0xc820028238, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/tcpsock_posix.go:264 +0x3d
github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p.(_DefaultListener).listenRoutine(0xc820267c20)
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p/listener.go:115 +0x42
created by github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p.(*DefaultListener).OnStart
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p/listener.go:103 +0x55

goroutine 32 [select]:
github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p.(_AddrBook).saveRoutine(0xc8200c2270)
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p/addrbook.go:373 +0x384
created by github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p.(_AddrBook).OnStart
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p/addrbook.go:128 +0x105

goroutine 40 [IO wait]:
net.runtime_pollWait(0x7f472342e998, 0x72, 0xc8200121b0)
    /usr/local/go/src/runtime/netpoll.go:157 +0x60
net.(_pollDesc).Wait(0xc82017c610, 0x72, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:73 +0x3a
net.(_pollDesc).WaitRead(0xc82017c610, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:78 +0x36
net.(_netFD).accept(0xc82017c5b0, 0x0, 0x7f472342eed8, 0xc820154a20)
    /usr/local/go/src/net/fd_unix.go:408 +0x27c
net.(_TCPListener).AcceptTCP(0xc820028458, 0x4529b0, 0x0, 0x0)
    /usr/local/go/src/net/tcpsock_posix.go:254 +0x4d
net.(_TCPListener).Accept(0xc820028458, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/tcpsock_posix.go:264 +0x3d
net/http.(_Server).Serve(0xc8200e0660, 0x7f472342db98, 0xc820028458, 0x0, 0x0)
    /usr/local/go/src/net/http/server.go:1887 +0xb3
github.com/eris-ltd/eris-db/Godeps/_workspace/src/gopkg.in/tylerb/graceful%2ev1.(_Server).Serve(0xc82017c4d0, 0x7f472342db98, 0xc820028458, 0x0, 0x0)
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/gopkg.in/tylerb/graceful.v1/graceful.go:226 +0x3d0
github.com/eris-ltd/eris-db/server.(_ServeProcess).Start.func1(0xc820196770, 0x7f472342db98, 0xc820028458)
    /go/src/github.com/eris-ltd/eris-db/server/server.go:114 +0x46
created by github.com/eris-ltd/eris-db/server.(*ServeProcess).Start
    /go/src/github.com/eris-ltd/eris-db/server/server.go:118 +0xad8

goroutine 34 [select]:
github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/consensus.(_ConsensusReactor).broadcastNewRoundStepRoutine(0xc820196690)
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/consensus/reactor.go:287 +0x191
created by github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/consensus.(_ConsensusReactor).OnStart
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/consensus/reactor.go:58 +0x27d

goroutine 35 [sleep]:
time.Sleep(0x44d7e6c0)
    /usr/local/go/src/runtime/time.go:59 +0xf9
github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p.(_PEXReactor).ensurePeersRoutine(0xc820196460)
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p/pex_reactor.go:128 +0x41
created by github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p.(_PEXReactor).OnStart
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p/pex_reactor.go:46 +0xa7

goroutine 36 [chan receive]:
github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p.(_Switch).listenerRoutine(0xc8200c28f0, 0x7f472342ee68, 0xc820267c20)
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p/switch.go:350 +0x72
created by github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p.(_Switch).OnStart
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/p2p/switch.go:171 +0x298

goroutine 38 [IO wait]:
net.runtime_pollWait(0x7f472342ea58, 0x72, 0xc8200121b0)
    /usr/local/go/src/runtime/netpoll.go:157 +0x60
net.(_pollDesc).Wait(0xc82017c290, 0x72, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:73 +0x3a
net.(_pollDesc).WaitRead(0xc82017c290, 0x0, 0x0)
    /usr/local/go/src/net/fd_poll_runtime.go:78 +0x36
net.(_netFD).accept(0xc82017c230, 0x0, 0x7f472342eed8, 0xc8201aa220)
    /usr/local/go/src/net/fd_unix.go:408 +0x27c
net.(_TCPListener).AcceptTCP(0xc820028268, 0x4529b0, 0x0, 0x0)
    /usr/local/go/src/net/tcpsock_posix.go:254 +0x4d
net.(_TCPListener).Accept(0xc820028268, 0x0, 0x0, 0x0, 0x0)
    /usr/local/go/src/net/tcpsock_posix.go:264 +0x3d
net/http.(_Server).Serve(0xc8200e0600, 0x7f472342db98, 0xc820028268, 0x0, 0x0)
    /usr/local/go/src/net/http/server.go:1887 +0xb3
net/http.Serve(0x7f472342db98, 0xc820028268, 0x7f4723425c28, 0xc8200d5fe0, 0x0, 0x0)
    /usr/local/go/src/net/http/server.go:1765 +0x85
github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/rpc/server.StartHTTPServer.func1(0x7f472342db98, 0xc820028268, 0x7f472342f400, 0xc8201a4a50)
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/rpc/server/http_server.go:26 +0x79
created by github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/rpc/server.StartHTTPServer
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/rpc/server/http_server.go:31 +0x36c

goroutine 44 [select]:
github.com/eris-ltd/eris-db/Godeps/_workspace/src/gopkg.in/tylerb/graceful%2ev1.(_Server).manageConnections(0xc82017c4d0, 0xc820016900, 0xc8200169c0, 0xc820016a20, 0xc820016a80)
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/gopkg.in/tylerb/graceful.v1/graceful.go:264 +0x3d9
created by github.com/eris-ltd/eris-db/Godeps/_workspace/src/gopkg.in/tylerb/graceful%2ev1.(_Server).Serve
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/gopkg.in/tylerb/graceful.v1/graceful.go:215 +0x1a8

goroutine 41 [chan receive]:
github.com/eris-ltd/eris-db/server.(_ServeProcess).Start.func2(0xc820196770)
    /go/src/github.com/eris-ltd/eris-db/server/server.go:123 +0x3e
created by github.com/eris-ltd/eris-db/server.(_ServeProcess).Start
    /go/src/github.com/eris-ltd/eris-db/server/server.go:126 +0xafd

goroutine 42 [chan receive]:
github.com/eris-ltd/eris-db/server.(_ServeProcess).Start.func3(0xc820196770)
    /go/src/github.com/eris-ltd/eris-db/server/server.go:130 +0x4c
created by github.com/eris-ltd/eris-db/server.(_ServeProcess).Start
    /go/src/github.com/eris-ltd/eris-db/server/server.go:135 +0xb22

goroutine 43 [sleep]:
time.Sleep(0xb2d05e00)
    /usr/local/go/src/runtime/time.go:59 +0xf9
github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/consensus.(_ConsensusState).EnterPropose.func2(0xc8200a43c0, 0x1, 0x0)
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/consensus/state.go:580 +0x23
created by github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/consensus.(_ConsensusState).EnterPropose
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/consensus/state.go:582 +0x7a5

goroutine 45 [select, locked to thread]:
runtime.gopark(0xcc3650, 0xc820686f28, 0xb84028, 0x6, 0x18, 0x2)
    /usr/local/go/src/runtime/proc.go:185 +0x163
runtime.selectgoImpl(0xc820686f28, 0x0, 0x18)
    /usr/local/go/src/runtime/select.go:392 +0xa64
runtime.selectgo(0xc820686f28)
    /usr/local/go/src/runtime/select.go:212 +0x12
runtime.ensureSigM.func1()
    /usr/local/go/src/runtime/signal1_unix.go:227 +0x353
runtime.goexit()
    /usr/local/go/src/runtime/asm_amd64.s:1721 +0x1

goroutine 46 [chan receive]:
github.com/eris-ltd/eris-db/Godeps/_workspace/src/gopkg.in/tylerb/graceful%2ev1.(_Server).handleInterrupt(0xc82017c4d0, 0xc820016ae0, 0x7f472342db98, 0xc820028458)
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/gopkg.in/tylerb/graceful.v1/graceful.go:298 +0x3a
created by github.com/eris-ltd/eris-db/Godeps/_workspace/src/gopkg.in/tylerb/graceful%2ev1.(_Server).Serve
    /go/src/github.com/eris-ltd/eris-db/Godeps/_workspace/src/gopkg.in/tylerb/graceful.v1/graceful.go:222 +0x3a2
ifExit
Error starting erisdb
Error starting erisdb
",closed,False,2016-04-14 11:53:56,2016-04-14 14:33:35
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/96,https://api.github.com/repos/hyperledger/burrow/issues/96,[RPC] Solidity event fails to notify subscribers when it is called,"@NodeGuy wrote:

> I’m revisiting the integration tests for eris-db.js.  `create_and_solidity_event.js`, which you fixed recently, is broken again.  It never receives the event.  I’ve modified it slightly to compile the Solidity code in the test and here’s a log of HTTP traffic:

``` HttpCreateAndSolidityEvent
Created Eris DB test server listening at 192.168.99.100:32950.
SEND {""jsonrpc"":""2.0"",""method"":""erisdb.transactAndHold"",""params"":{""priv_key"":""4628D29BF9A49FAC948D861D9F508E936F43B73945E2898562F015F1B6E81E4673927357B791BC100008EBFEA7D8F1B347316ECA3F8AF132184791243620116E"",""address"":"""",""data"":""6060604052608f8060106000396000f360606040523615600d57600d565b608d5b7f68616861000000000000000000000000000000000000000000000000000000007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff7f88c4f556fdc50387ec6b6fc4e8250fecc56ff50e873df06dadeeb84c0287ca9060016040518082815260200191505060405180910390a35b565b00"",""gas_limit"":1000000,""fee"":0},""id"":""1""}
RECEIVE {""result"":[4,{""call_data"":{""caller"":""9964C8AC3FF381ACB3BBA05F5CB3977FD4B1E988"",""callee"":""B8C94F42ECFA4FBA8F2BE36343B20059D23AAAD5"",""data"":""6060604052608F8060106000396000F360606040523615600D57600D565B608D5B7F68616861000000000000000000000000000000000000000000000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7F88C4F556FDC50387EC6B6FC4E8250FECC56FF50E873DF06DADEEB84C0287CA9060016040518082815260200191505060405180910390A35B565B00"",""value"":1,""gas"":999985},""origin"":""9964C8AC3FF381ACB3BBA05F5CB3977FD4B1E988"",""tx_id"":""4AF472AC0BF22CFBC277F6CDA4DC30C3B4E8C503"",""return"":""60606040523615600D57600D565B608D5B7F68616861000000000000000000000000000000000000000000000000000000007FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF7F88C4F556FDC50387EC6B6FC4E8250FECC56FF50E873DF06DADEEB84C0287CA9060016040518082815260200191505060405180910390A35B565B00"",""exception"":""""}],""error"":null,""id"":""1"",""jsonrpc"":""2.0""}
SEND {""jsonrpc"":""2.0"",""method"":""erisdb.eventSubscribe"",""params"":{""event_id"":""Log/B8C94F42ECFA4FBA8F2BE36343B20059D23AAAD5""},""id"":""2""}
SEND {""jsonrpc"":""2.0"",""method"":""erisdb.call"",""params"":{""from"":"""",""address"":""B8C94F42ECFA4FBA8F2BE36343B20059D23AAAD5"",""data"":""""},""id"":""3""}
RECEIVE {""result"":{""return"":"""",""gas_used"":0},""error"":null,""id"":""3"",""jsonrpc"":""2.0""}
RECEIVE {""result"":{""sub_id"":""18BE1E1E8A23DFF148E0D4037FC2E2296BA57A020B84A2DD77B0D1CABC572288""},""error"":null,""id"":""2"",""jsonrpc"":""2.0""}
SEND {""jsonrpc"":""2.0"",""method"":""erisdb.eventPoll"",""params"":{""sub_id"":""18BE1E1E8A23DFF148E0D4037FC2E2296BA57A020B84A2DD77B0D1CABC572288""},""id"":""4""}
RECEIVE {""result"":{""events"":[]},""error"":null,""id"":""4"",""jsonrpc"":""2.0""}
SEND {""jsonrpc"":""2.0"",""method"":""erisdb.eventPoll"",""params"":{""sub_id"":""18BE1E1E8A23DFF148E0D4037FC2E2296BA57A020B84A2DD77B0D1CABC572288""},""id"":""5""}
RECEIVE {""result"":{""events"":[]},""error"":null,""id"":""5"",""jsonrpc"":""2.0""}
SEND {""jsonrpc"":""2.0"",""method"":""erisdb.eventPoll"",""params"":{""sub_id"":""18BE1E1E8A23DFF148E0D4037FC2E2296BA57A020B84A2DD77B0D1CABC572288""},""id"":""6""}
RECEIVE {""result"":{""events"":[]},""error"":null,""id"":""6"",""jsonrpc"":""2.0""}
SEND {""jsonrpc"":""2.0"",""method"":""erisdb.eventPoll"",""params"":{""sub_id"":""18BE1E1E8A23DFF148E0D4037FC2E2296BA57A020B84A2DD77B0D1CABC572288""},""id"":""7""}
RECEIVE {""result"":{""events"":[]},""error"":null,""id"":""7"",""jsonrpc"":""2.0""}
SEND {""jsonrpc"":""2.0"",""method"":""erisdb.eventPoll"",""params"":{""sub_id"":""18BE1E1E8A23DFF148E0D4037FC2E2296BA57A020B84A2DD77B0D1CABC572288""},""id"":""8""}
RECEIVE {""result"":{""events"":[]},""error"":null,""id"":""8"",""jsonrpc"":""2.0""}
```

> It repeats like that until the test times out.  Any thoughts?
link to eris-db output : https://erisltd.slack.com/files/nodeguy/F106Q6Q3G/log.js
",closed,False,2016-04-13 10:51:20,2018-01-31 15:41:44
burrow,silasdavis,https://github.com/hyperledger/burrow/issues/95,https://api.github.com/repos/hyperledger/burrow/issues/95,Update circle CI script on tmsp branch to use glide ,"We should exclude vendored deps from testing so script needs to do somerthing like:

``` bash
go get github.com/Masterminds/glide
glide novendor | xargs go test
```
",closed,False,2016-04-05 15:16:24,2016-04-13 10:43:28
burrow,silasdavis,https://github.com/hyperledger/burrow/pull/94,https://api.github.com/repos/hyperledger/burrow/issues/94,Include glide deps in vendor,"- Include glide deps in `vendor/`
- Update dependencies to latest masters
- Add testify dep

We may still be missing some deps (haven't looked at test failures exhaustively). Next step is to make tests pass in this branch. We may which to peg some deps to specific version (by tag or git hash) in the glide.yaml to leave them untouched by `glide up`. Ideally we want some dependencies to be upgraded by `glide up` so let's only lock down moving targets.
",closed,True,2016-04-04 16:58:37,2017-04-10 22:13:09
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/93,https://api.github.com/repos/hyperledger/burrow/issues/93,update docker version in circle.yml to 1.10 or above,,closed,False,2016-03-30 18:15:12,2017-04-10 22:13:09
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/92,https://api.github.com/repos/hyperledger/burrow/issues/92,WIP Upgrade tendermint to a first class citizen in eris-db,"the tendermint tests fail; were not being run before.
",closed,True,2016-03-30 15:25:30,2017-04-10 22:13:09
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/91,https://api.github.com/repos/hyperledger/burrow/issues/91,move docker login to deployment,"1. for PRs into development no deployment is needed, and the docker login command is not needed
2. on merge into develop branch, [expected] deployment proceeds as normal with docker login
",closed,True,2016-03-23 14:41:21,2016-03-23 14:53:53
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/90,https://api.github.com/repos/hyperledger/burrow/issues/90,WebApi /unsafe/txpool?hold=true fails,"in `/eris-db/test/transacting/transacting_test.go` L 105 posting `transactandHold` fails
`resp := this.postJson(""/unsafe/txpool?hold=true"", input)`

```
14:07 $ go test ./test/transacting/
INFO[03-23|14:56:35] Server started.                          module=eris/server
INFO[03-23|14:56:35] File written.                            module=eris/serverserver name=/tmp/.edbservers/testnode29001/config.toml
INFO[03-23|14:56:35] File written.                            module=eris/serverserver name=/tmp/.edbservers/testnode29001/priv_validator.json
INFO[03-23|14:56:35] File written.                            module=eris/serverserver name=/tmp/.edbservers/testnode29001/genesis.json
Write and backup
INFO[03-23|14:56:35] File written.                            module=eris/serverserver name=/tmp/.edbservers/testnode29001/server_conf.toml
process started, waiting for token
INFO[03-23|14:56:35] [GIN] HTTP: 127.0.0.1:47812              module=eris/server Code=200 Method=POST path=/server error=
Received Port: 29001
URL: http://localhost:29001
Test A0--- FAIL: Test_A0_Tx_Create (2.00s)
        Location:       transacting_test.go:132
    Error:      No error is expected but got Post http://localhost:29001/unsafe/txpool?hold=true: EOF

panic: runtime error: invalid memory address or nil pointer dereference [recovered]
    panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x1 addr=0x0 pc=0x48910f]
```

carries over from #88 
",closed,False,2016-03-23 13:57:51,2016-11-24 14:36:21
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/89,https://api.github.com/repos/hyperledger/burrow/issues/89,Failing transaction test in ./test/transacting/transaction_test.go,"closes #88 
1. test was not run as the file was never named `_test.go`
2. fails on `/unsafe/txpool?hold=true`; but passes for `hold=false`; requires new issue, @NodeGuy 
3. patched test to test `/unsafe/txpool` instead
",closed,True,2016-03-23 13:08:06,2017-04-10 22:13:09
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/88,https://api.github.com/repos/hyperledger/burrow/issues/88,failing test in transacting/transacting_test.go,"Related to unupdated WebApi (hypothesis); went unnoticed before as transacting_test.go was `transacting_tes.go`; renaming required for reproducing

```
✘-1 ~/golang/src/github.com/eris-ltd/eris-db [failing_transaction L|●1…1⚑ 1] 
11:36 $ go test ./test/transacting/
INFO[03-23|11:37:45] Server started.                          module=eris/server
INFO[03-23|11:37:45] File written.                            module=eris/serverserver name=/tmp/.edbservers/testnode29001/config.toml
INFO[03-23|11:37:45] File written.                            module=eris/serverserver name=/tmp/.edbservers/testnode29001/priv_validator.json
INFO[03-23|11:37:45] File written.                            module=eris/serverserver name=/tmp/.edbservers/testnode29001/genesis.json
Write and backup
INFO[03-23|11:37:45] File written.                            module=eris/serverserver name=/tmp/.edbservers/testnode29001/server_conf.toml
process started, waiting for token
INFO[03-23|11:37:46] [GIN] HTTP: 127.0.0.1:50282              module=eris/server Code=200 Method=POST path=/server error=
Received Port: 29001
URL: http://localhost:29001
--- FAIL: Test_A0_Tx_Create (2.01s)
        Location:       transacting_test.go:130
    Error:      No error is expected but got Post http://localhost:29001/unsafe/txpool?hold=true: EOF

panic: runtime error: invalid memory address or nil pointer dereference [recovered]
    panic: runtime error: invalid memory address or nil pointer dereference
[signal 0xb code=0x1 addr=0x0 pc=0x4890ef]
```
",closed,False,2016-03-23 10:43:46,2016-03-24 17:22:25
burrow,slowtokyo,https://github.com/hyperledger/burrow/issues/87,https://api.github.com/repos/hyperledger/burrow/issues/87,Logspout behavior unexpected,"Running `eris services start watchtower logsrotate logspout --machine xxxx` doesn't throw an error but does not output logs to papertrail as expected.
",closed,False,2016-03-21 11:49:16,2016-10-13 19:05:59
burrow,compleatang,https://github.com/hyperledger/burrow/issues/86,https://api.github.com/repos/hyperledger/burrow/issues/86,ensure that **all** signing happens via eris-keys,"somewhat blocking on tmint here.
",closed,False,2016-03-20 12:15:49,2016-11-24 14:32:25
burrow,compleatang,https://github.com/hyperledger/burrow/issues/85,https://api.github.com/repos/hyperledger/burrow/issues/85,"add contributor, issues template, etc. from coding/github directory","in line with eris platform standards
",closed,False,2016-03-20 11:58:11,2016-10-11 09:53:05
burrow,compleatang,https://github.com/hyperledger/burrow/issues/84,https://api.github.com/repos/hyperledger/burrow/issues/84,refactor README,"it's _old_.... 

Also, we shouldn't be leading with ""build from source"" everything in readme's should be cli based. 
",closed,False,2016-03-20 11:57:28,2017-04-10 22:13:09
burrow,compleatang,https://github.com/hyperledger/burrow/issues/83,https://api.github.com/repos/hyperledger/burrow/issues/83,If `certgen` and `erisdbss` are not currently being used (they were built for testing) they should be removed,"alternatively they can be move into `tests` if they are simply a test utility
",closed,False,2016-03-20 11:56:43,2017-04-10 22:13:09
burrow,compleatang,https://github.com/hyperledger/burrow/issues/82,https://api.github.com/repos/hyperledger/burrow/issues/82,move to using cobra (cli lib) and viper (for reading configs),"in line with eris platform standards
",closed,False,2016-03-20 11:55:37,2017-04-10 22:13:09
burrow,compleatang,https://github.com/hyperledger/burrow/issues/81,https://api.github.com/repos/hyperledger/burrow/issues/81,reconcile config files,"currently we have too many config files. And we haven't even started moving to the consensus+app separation. config files will be reduced by closing #70 and better reliance on env vars (which will give the cli more fine tuneable control over boot configuration). 

per @AFDudley we should be thinking of large config files which can `include` other config files. in general we need to be smarter about our strategy here. 
",closed,False,2016-03-20 11:54:18,2016-11-14 14:08:32
burrow,compleatang,https://github.com/hyperledger/burrow/issues/80,https://api.github.com/repos/hyperledger/burrow/issues/80,if no moniker is given (or if the default is read) -> enforce a unique moniker,"perhaps using docker's container names algo ...? 
",closed,False,2016-03-20 11:51:56,2016-10-13 01:16:24
burrow,compleatang,https://github.com/hyperledger/burrow/issues/79,https://api.github.com/repos/hyperledger/burrow/issues/79,repository cleanup,"any and all specifications should be in `docs/` directory per eris standards (relates to #74)

that `.project` file needs to be removed.

DOCKER/build.sh -> tests/build_tool.sh (eris platform standard)

main test harness should run from -> tests/test.sh (eris platform standard)

Dockerfile should be in repository root
",closed,False,2016-03-20 11:51:12,2017-04-10 22:13:09
burrow,compleatang,https://github.com/hyperledger/burrow/issues/78,https://api.github.com/repos/hyperledger/burrow/issues/78,erisdb itself should respect the eris platform logging standards,,closed,False,2016-03-20 11:48:44,2016-11-24 14:30:34
burrow,compleatang,https://github.com/hyperledger/burrow/issues/77,https://api.github.com/repos/hyperledger/burrow/issues/77,move all env vars used to respect the `ERISDB_` prefix,,closed,False,2016-03-20 11:46:26,2016-10-22 12:40:28
burrow,compleatang,https://github.com/hyperledger/burrow/issues/76,https://api.github.com/repos/hyperledger/burrow/issues/76,network stability testing suite,,closed,False,2016-03-20 11:45:18,2017-04-10 22:13:08
burrow,compleatang,https://github.com/hyperledger/burrow/issues/75,https://api.github.com/repos/hyperledger/burrow/issues/75,collapse and reconcile mint-client tooling into the eris chains binary/repository,"not sure if they should be the exact same binary, but at least they should be collapsed into this repository for coherence. the mint-client tooling needs to then be refactored (post rpc reconciliation process) so that it is low level go libs for ""using"" eris chains
",closed,False,2016-03-20 11:44:52,2016-10-13 01:14:55
burrow,compleatang,https://github.com/hyperledger/burrow/issues/74,https://api.github.com/repos/hyperledger/burrow/issues/74,automatic docs generator to match eris platform defaults,,closed,False,2016-03-20 11:43:21,2016-10-11 09:53:54
burrow,compleatang,https://github.com/hyperledger/burrow/issues/73,https://api.github.com/repos/hyperledger/burrow/issues/73,`cut the cord` -> ethEVM + erisPerms + TMSP + tmint,,closed,False,2016-03-20 11:42:24,2016-10-11 09:54:12
burrow,compleatang,https://github.com/hyperledger/burrow/issues/72,https://api.github.com/repos/hyperledger/burrow/issues/72,Implement go-ethereum EVM,,closed,False,2016-03-20 11:41:34,2017-04-10 22:13:08
burrow,compleatang,https://github.com/hyperledger/burrow/issues/71,https://api.github.com/repos/hyperledger/burrow/issues/71,reconcile eris-db rpc port with tendermint rpc port,"this is blocking until we move to tmsp (post 0.12.0). until we formally move to tmsp this work isn't very important. after that switch, we will need to control ""more"" from the erisdb-rpc port. Indeed, erisdb-rpc port should be the single gateway to `eris chains` and then be able to proxy to tmint's rpc if needed (or the application manager, etc.)
",closed,False,2016-03-20 11:40:39,2016-10-13 19:24:55
burrow,compleatang,https://github.com/hyperledger/burrow/issues/70,https://api.github.com/repos/hyperledger/burrow/issues/70,[Docker] remove the bash scripting layer,"all of the `ecm` stuff (currently bash start scripts in this repository in the docker directory) we currently have in bash scripts should be collapsed into the erisdb boot process. 

The boot process should respect a variety of env vars currently encapsulated in the ecm scripts in this repository. The docker images should be refactored to remove those bash scripts and just boot the edb binary.

Two env vars we will use frequently but that I do not think are currently respected:

`ERISDB_FAST_SYNC` which should be an easy way for us to turn fast_sync to try via env vars when booting from containers.
`ERISDB_SEEDS` which should be an easy way for us to pass in the IP address of the seed to the binary.

Obviously, all env vars should overwrite anything in a static config file. 
",closed,False,2016-03-20 11:38:13,2018-01-31 15:39:44
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/69,https://api.github.com/repos/hyperledger/burrow/issues/69,WIP unfork Ethereum Virtual Machine,"Merged in latest develop; picking up from where @ebuchman started; need handover from Ethan
",closed,True,2016-03-17 15:57:08,2016-03-30 15:28:29
burrow,ebuchman,https://github.com/hyperledger/burrow/pull/68,https://api.github.com/repos/hyperledger/burrow/issues/68,Fixes,"- lots of little fixes in network connectivity (don't filter by ip range, make all addresses routable, only connect to peers with same genesis hash)
- upgraded mempool to latest tendermint version
- some consensus bug fixes
",closed,True,2016-03-11 15:46:52,2016-03-14 17:11:46
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/67,https://api.github.com/repos/hyperledger/burrow/issues/67,version bump 0.11.3,,closed,True,2016-03-11 14:35:13,2016-03-11 14:35:40
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/66,https://api.github.com/repos/hyperledger/burrow/issues/66,Eth vm - for CI test run,,closed,True,2016-03-11 14:02:50,2016-03-11 14:02:58
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/65,https://api.github.com/repos/hyperledger/burrow/issues/65,unsafe_flush_mempool` rpc,"> expose an `unsafe_flush_mempool` rpc in erisdb? just do it direct in the godepped tendermint is fine. ill expose the same on latest tendermint
",closed,False,2016-03-10 14:15:27,2016-11-24 14:22:55
burrow,compleatang,https://github.com/hyperledger/burrow/issues/64,https://api.github.com/repos/hyperledger/burrow/issues/64,eris-db does not currently expose functions which application builders need,"A continuation of this issue:

https://github.com/eris-ltd/eris-db.js/issues/28
",closed,False,2016-03-09 23:44:47,2017-04-10 22:13:08
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/63,https://api.github.com/repos/hyperledger/burrow/issues/63,Fix hvs patch from @jaekwon into develop,,closed,True,2016-03-08 02:46:27,2016-03-08 02:49:35
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/62,https://api.github.com/repos/hyperledger/burrow/issues/62,correct ECM print log version to 0.11.2,,closed,True,2016-03-04 21:29:42,2016-03-11 14:17:23
burrow,compleatang,https://github.com/hyperledger/burrow/issues/61,https://api.github.com/repos/hyperledger/burrow/issues/61,cleanup these branches,,closed,False,2016-03-02 06:09:29,2017-04-10 22:13:08
burrow,compleatang,https://github.com/hyperledger/burrow/issues/60,https://api.github.com/repos/hyperledger/burrow/issues/60,instability around factory creates,"eris-pm/tests/fixtures/app17 is our grandmaster factory test.

a factoryfactory creates a factory which creates a contract that is tested.

this test has some stability which is at the vm level. same contracts, same chain setup, etc. everything else is isolated but with divergent results.

the sometimes failing test is:

```
Executing Job                                 getGSFactoryAddr
Too little data                           end=0
                                          len=20
                                         name=
                                         next=32
                                       retBlk=32
                                        start=0
                                         type=
                                          val=
Too little data; usually means a bad return from a contract
```

The error message means that eris-pm is expecting a return from the contract but that does not happen.

To recreate:

have eris-cli on develop
pull eris-pm on develop (or mergeCompilers branch if that is not merged)
current eris-db:0.11.3 image

Comment out line 180 in eris-pm/tests/test.sh (so you can examine the chain logs after failure).

run:

`tests/test.sh app17 && tests/test.sh app17 && tests/test.sh app17 && tests/test.sh app17`

or however many times you need to.
",closed,False,2016-03-02 06:02:43,2017-04-10 22:13:08
burrow,compleatang,https://github.com/hyperledger/burrow/issues/59,https://api.github.com/repos/hyperledger/burrow/issues/59,strings and memory issues,"trying to test eris-pm/tests/fixtures/app06 (with the strings lines at the bottom of the epm.yaml uncommented). there's more logs but this is reproducible.

```
(pc) 1053 (op) DUP3           (st) 8     => [3] 0x0000000000000000000000000000000000000000000000000000000000100020
(pc) 1054 (op) DUP2           (st) 9     => [2] 0x6E616B61627572726F7700000000000000000000000000000000000000000080
(pc) 1055 (op) GT             (st) 10    49926538621785658806052556028335402667741290619443898992232611561495597154432 > 1048608 = 1
(pc) 1056 (op) ISZERO         (st) 9      == 0 = 0
(pc) 1057 (op) PUSH2          (st) 9     => 0x000000000000000000000000000000000000000000000000000000000000043A
(pc) 1060 (op) JUMPI          (st) 10    ~> false
(pc) 1061 (op) DUP3           (st) 8     => [3] 0x0000000000000000000000000000000000000000000000000000000000100020
(pc) 1062 (op) MLOAD          (st) 9    INFO[03-02|04:58:04] Error on execution: Memory out of bounds module=state
NOTE[03-02|04:58:04] VM call complete                         module=state caller=""VMAccount{000000000000000000000000B3C52790E0A6700D068850C8E208E5C7960476AF B:99999999938771 C: N:8}"" callee=""VMAccount{000000000000000000000000926CD229627065BD89442B753116BC6053F50CA7 B:52590 C:6060604
05236156100B5576000357C0100000000000000000000000000000000000000000000000000000000900480620267A4146100B75780630BCD3B33146100DA57806312A7B914146100FD5780631E26FD331461012057806338CC4831146101385780634EF65C3B146101715780636273899814610189578063747586B8146101AC5780637FCAF666146101C457806
389EA642F1461021A578063E30081A014610295578063E6748DA9146102AD576100B5565B005B6100C4600480505061032B565B6040518082815260200191505060405180910390F35B6100E760048050506103A9565B6040518082815260200191505060405180910390F35B61010A60048050506102E1565B6040518082815260200191505060405180910390F
35B61013660048080359060200190919050506102C5565B005B610145600480505061036C565B604051808273FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF16815260200191505060405180910390F35B610187600480803590602001909190505061031D565B005B610196600480505061030B565B6040518082815260200191505060405180910390F35B6
101C260048080359060200190919050506102FD565B005B6102186004808035906020019082018035906020019191908080601F0160208091040260200160405190810160405280939291908181526020018383808284378201915050505050509090919050506103BB565B005B610227600480505061046C565B604051808060200182810382528381815181526
02001915080519060200190808383829060006004602084601F0104600F02600301F150905090810190601F1680156102875780820380516001836020036101000A031916815260200191505B509250505060405180910390F35B6102AB600480803590602001909190505061033D565B005B6102C3600480803590602001909190505061039B565B005B8060006
0006101000A81548160FF021916908302179055505B50565B6000600060009054906101000A900460FF1690506102FA565B90565B806001600050819055505B50565B6000600160005054905061031A565B90565B806002600050819055505B50565B6000600260005054905061033A565B90565B80600360006101000A81548173FFFFFFFFFFFFFFFFFFFFFFFFF
FFFFFFFFFFFFFFF021916908302179055505B50565B6000600360009054906101000A900473FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF169050610398565B90565B806004600050819055505B50565B600060046000505490506103B8565B90565B80600560005090805190602001908280546001816001161561010002031660029004906000526020600
02090601F016020900481019282601F1061040A57805160FF191683800117855561043B565B8280016001018555821561043B579182015B8281111561043A57825182600050559160200191906001019061041C565B5B5090506104669190610448565B808211156104625760008181506000905550600101610448565B5090565B50505B50565B6020604051908
10160405280600081526020015060056000508054600181600116156101000203166002900480601F0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156105195780601F106104EE57610100808354040283529160200191610519565B820191906000526020600020905B815481529
0600101906020018083116104FC57829003601F168201915B50505050509050610525565B9056 N:0}"" return= err=""Memory out of bounds""
INFO[03-02|04:58:04] Added to prevotes: VoteSet{H:12 R:0 T:1 +2/3:true BA{1:X}} module=consensus
```
",closed,False,2016-03-02 05:02:28,2017-04-10 22:13:08
burrow,ebuchman,https://github.com/hyperledger/burrow/issues/58,https://api.github.com/repos/hyperledger/burrow/issues/58,[EVM] Changes to suicide behaviour,"https://github.com/tendermint/tendermint/issues/98

really, sync with eth.
",closed,False,2016-02-29 17:13:57,2016-11-24 14:21:40
burrow,ebuchman,https://github.com/hyperledger/burrow/issues/57,https://api.github.com/repos/hyperledger/burrow/issues/57,improve name reg,"- permanent names
- contract guarded names
- multisig
",closed,False,2016-02-29 17:11:09,2016-10-13 10:53:32
burrow,ebuchman,https://github.com/hyperledger/burrow/issues/56,https://api.github.com/repos/hyperledger/burrow/issues/56,genesis state in p2p handshake,,closed,False,2016-02-26 22:49:04,2016-03-11 16:19:56
burrow,pietv,https://github.com/hyperledger/burrow/pull/55,https://api.github.com/repos/hyperledger/burrow/issues/55,Version bump,,closed,True,2016-02-07 12:53:53,2016-02-07 12:54:13
burrow,compleatang,https://github.com/hyperledger/burrow/pull/54,https://api.github.com/repos/hyperledger/burrow/issues/54,version bump,,closed,True,2016-02-01 19:46:01,2016-02-01 21:59:57
burrow,ebuchman,https://github.com/hyperledger/burrow/issues/53,https://api.github.com/repos/hyperledger/burrow/issues/53,AbortWithError is everywhere but doesn't stop handlers from continuing,,closed,False,2016-01-21 03:35:41,2016-11-24 14:17:05
burrow,dennismckinnon,https://github.com/hyperledger/burrow/issues/52,https://api.github.com/repos/hyperledger/burrow/issues/52,on eris chains new NAME --dir PATH chain_id in genesis.json is overwritten by NAME,"Following the tutorial I constructed a genesis.json by hand. when creating a new chain from it the chain_id was over written.

Proof:

Snippet of genesis.json:

```
{
  ""chain_id"": ""simple_chain"",
  ""accounts"": [
    {
      ""address"": ""8C3A4A59FC07EA11433340D3B18F852EBD8DCA16"",
      ""amount"": 690000000000
    },
```

and snippet of the output from localhost:46657/genesis

```
{""jsonrpc"":""2.0"",""id"":"""",""result"":[17,{""genesis"":{""genesis_time"":""2016-01-21T01:24:35.082Z"",""chain_id"":""simplexD"",""params"":null,""accounts"":[{""address"":""8C3A4A59FC07EA11433340D3B18F852EBD8DCA16"",""amount"":690000000000,""name"":"""",""permissions"":null},
```
",closed,False,2016-01-21 01:34:04,2016-03-02 06:07:32
burrow,compleatang,https://github.com/hyperledger/burrow/pull/51,https://api.github.com/repos/hyperledger/burrow/issues/51,Version bump,"(includes dockerfile fixes)
",closed,True,2016-01-16 22:45:31,2016-02-01 19:43:04
burrow,compleatang,https://github.com/hyperledger/burrow/pull/50,https://api.github.com/repos/hyperledger/burrow/issues/50,fixes to dockerfile so itll now build,,closed,True,2016-01-16 22:45:08,2016-02-01 19:35:33
burrow,ebuchman,https://github.com/hyperledger/burrow/pull/49,https://api.github.com/repos/hyperledger/burrow/issues/49,Develop,,closed,True,2016-01-16 19:50:52,2016-01-16 19:51:03
burrow,benjaminbollen,https://github.com/hyperledger/burrow/pull/48,https://api.github.com/repos/hyperledger/burrow/issues/48,WIP tmint,"move eris/tendermint into eris-db; replaying work done on eris-db tmsp branch for current develop branch
",closed,True,2016-01-16 00:19:03,2016-03-08 02:23:38
burrow,benjaminbollen,https://github.com/hyperledger/burrow/issues/47,https://api.github.com/repos/hyperledger/burrow/issues/47,tmsp branch dependenccy on tendermint/types,"eris-db `tmsp` branch introduces the `account`, but the test (still ?) uses crypto from tendermint ?

Is there a small guidance that can set me on my way to possibly update the state tests for the tmsp branch?

```
ben-eris@machine:~/eris/golang/src/github.com/eris-ltd/eris-db/state (tmsp)$ go test
# github.com/eris-ltd/eris-db/state
./permissions_test.go:118: cannot use user[0].PubKey.(account.PubKeyEd25519) (type account.PubKeyEd25519) as type crypto.PubKeyEd25519 in field value
./permissions_test.go:143: undefined: ""github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/types"".NewSendTx
./permissions_test.go:156: undefined: ""github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/types"".NewSendTx
./permissions_test.go:169: undefined: ""github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/types"".NewSendTx
./permissions_test.go:185: undefined: ""github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/types"".NewSendTx
./permissions_test.go:210: undefined: ""github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/types"".NewNameTx
./permissions_test.go:222: undefined: ""github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/types"".NewNameTx
./permissions_test.go:245: undefined: ""github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/types"".NewCallTx
./permissions_test.go:254: undefined: ""github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/types"".NewCallTx
./permissions_test.go:263: undefined: ""github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/types"".NewCallTx
./permissions_test.go:263: too many errors
FAIL    github.com/eris-ltd/eris-db/state [build failed]
```

Godeps is on master for `tendermint/tendermint`
",closed,False,2016-01-15 15:08:36,2016-03-02 15:27:01
burrow,jaekwon,https://github.com/hyperledger/burrow/pull/46,https://api.github.com/repos/hyperledger/burrow/issues/46,Patch in fix of height-vote-set,"Fixes a bug
",closed,True,2016-01-02 02:30:16,2016-03-08 02:48:20
burrow,compleatang,https://github.com/hyperledger/burrow/issues/45,https://api.github.com/repos/hyperledger/burrow/issues/45,branches need to be cleaned up,"there are **way** too many hanging branches in this repository. 

once the refactor is complete in tmnt branch then we need to remove / merge / clean up all of these branches and adhere to our coding practices...

feature -> (develop) -> staging -> master
",closed,False,2015-12-16 11:13:20,2016-02-14 21:37:32
burrow,ebuchman,https://github.com/hyperledger/burrow/issues/44,https://api.github.com/repos/hyperledger/burrow/issues/44,use ipfs for state,,closed,False,2015-12-14 17:17:00,2016-03-02 06:10:30
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/43,https://api.github.com/repos/hyperledger/burrow/issues/43,Eris CLI master assumes 0.10.3 but 'latest' tag points to 0.10.2.,"This is causing breakage with my `genesis.json`.
",closed,False,2015-10-06 19:48:04,2015-12-16 11:19:34
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/42,https://api.github.com/repos/hyperledger/burrow/issues/42,Resolve naming inconsistency with CLI.,"In the CLI, this is a called a ""chain"".  Here it's called ""DB"".  This is a confusing inconsistency.

Given that our marketing is promoting that we make it easier to work with blockchains, it makes more sense to me to call this a ""chain"" as well.  ""DB"" implies database and a blockchain is not going to meet the expectations of coders who think they're getting a database.
",closed,False,2015-09-28 22:21:48,2016-03-02 06:06:52
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/41,https://api.github.com/repos/hyperledger/burrow/issues/41,Point mintinfo command to local node.,"I want to know what is in the name registry of an eris-db container so I created a shell and ran the following command:

``` shell
eris@5e725856816f:~/.eris$ mintinfo names
Post http://pinkpenguin.chaintest.net:46657: dial tcp 128.199.230.153:46657: connection refused
```

I would expect `mintinfo` (and any similar commands) to be configured for the local node by default instead of  `pinkpenguin.chaintest.net`.
",closed,False,2015-09-21 05:12:15,2015-09-21 13:34:03
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/40,https://api.github.com/repos/hyperledger/burrow/issues/40,The Dockerfile should use CMD instead of ENTRYPOINT.,"> An ENTRYPOINT allows you to configure a container that will run as an executable.

— https://docs.docker.com/reference/builder/#entrypoint

This container is run as a server, not as an executable.
",closed,False,2015-09-13 22:02:38,2016-02-29 17:16:29
burrow,vinaychhabra21,https://github.com/hyperledger/burrow/issues/39,https://api.github.com/repos/hyperledger/burrow/issues/39,Unable to run DB,"On running -
$ go get github.com/eris-ltd/eris-db/cmd/erisdb

Getting below error.
# github.com/eris-ltd/eris-db/Godeps/_workspace/src/github.com/tendermint/tendermint/vm/secp256k1

exec: ""gcc"": executable file not found in %PATH%
# github.com/eris-ltd/eris-db/files

C:\Go\bin\src\github.com\eris-ltd\eris-db\files\windows.go:15: undefined: isWritable
",closed,False,2015-09-13 15:16:27,2016-02-29 17:17:09
burrow,compleatang,https://github.com/hyperledger/burrow/issues/38,https://api.github.com/repos/hyperledger/burrow/issues/38,0.10.2 and 0.10.3 branches don't include the chain_api.sh,"this leaves out folks that need to use edb server binary on those branches.
",closed,False,2015-09-01 23:43:18,2016-02-29 17:17:49
burrow,compleatang,https://github.com/hyperledger/burrow/issues/37,https://api.github.com/repos/hyperledger/burrow/issues/37,License File,"This repository is released GPL3
",closed,False,2015-08-30 15:32:45,2016-03-02 06:06:26
burrow,ebuchman,https://github.com/hyperledger/burrow/issues/36,https://api.github.com/repos/hyperledger/burrow/issues/36,erisdb image should use erisdb,"currently using just tendermint
really what we'd like are the following options:
- erisdb
- tendermint on erisdb vendored commit
- tendermint on master 
- tendermint on develop

though I guess it makes more sense for all this to be done through multiple tagged images than all in one image
",closed,False,2015-08-27 18:09:39,2015-12-14 17:10:35
burrow,ebuchman,https://github.com/hyperledger/burrow/pull/35,https://api.github.com/repos/hyperledger/burrow/issues/35,fix suicides,"Addresses https://github.com/tendermint/tendermint/issues/131
",closed,True,2015-08-26 02:09:49,2015-08-26 18:04:45
burrow,compleatang,https://github.com/hyperledger/burrow/pull/34,https://api.github.com/repos/hyperledger/burrow/issues/34,upgrades to docker sequencine,"enables $KEYS, $GENESIS, $GENESIS_CSV, $CHAIN_CONF,
and $SERVER_CONF to be given as environment variables

the master script will dump those into the appropriate
$CHAINDIR location.

changed ""erisdb-wrapper"" to entry point (which is where
it should have always been)

added major release and minor release (which will need
to be updated) to the DOCKER/build.sh script.
",closed,True,2015-08-25 21:13:17,2015-08-25 21:16:35
burrow,NodeGuy,https://github.com/hyperledger/burrow/issues/33,https://api.github.com/repos/hyperledger/burrow/issues/33,I can't figure out how to start.,"> The recommended way of working with eris-db is through eris-cli (develop branch as of now).

OK, I installed eris-cli and read its ginormous README.

Now, on to using it.

> The simplest way to get started is by simply running $ erisdb.

``` shell
$ erisdb
bash: erisdb: command not found
```

OK, looks like we're missing a step here.  Perhaps erisdb is a ""service""?

``` shell
$ eris services known
ipfs
keys
```

Nope.

Is it a ""chain""?

``` shell
$ eris chains known

bash-3.2$
```

Guess not.

Wearing my hat of curious developer I'm losing interest.  We need a smoother on-ramp.
",closed,False,2015-08-25 21:09:20,2015-12-14 17:11:31
burrow,compleatang,https://github.com/hyperledger/burrow/pull/32,https://api.github.com/repos/hyperledger/burrow/issues/32,"add ecm version, fix config",,closed,True,2015-08-25 20:39:27,2015-08-25 21:11:42
burrow,compleatang,https://github.com/hyperledger/burrow/pull/31,https://api.github.com/repos/hyperledger/burrow/issues/31,"chains new: allow csvs for mintgen, use mintconfig",,closed,True,2015-08-25 20:38:11,2015-08-25 21:11:26
burrow,compleatang,https://github.com/hyperledger/burrow/pull/30,https://api.github.com/repos/hyperledger/burrow/issues/30,upgrades to docker sequencing,"enables $KEYS, $GENESIS, $CHAIN_CONF, $SERVER_CONF
to be given as environment variables

the master script will dump those into the appropriate
$CHAINDIR location.

changed ""erisdb-wrapper"" to entry point (which is where
it should have always been)

added major release and minor release (which will need
to be updated) to the DOCKER/build.sh script.

PR-ing to master as there is no current difference between it and develop.
",closed,True,2015-08-24 04:13:30,2015-08-25 21:16:36
burrow,compleatang,https://github.com/hyperledger/burrow/issues/29,https://api.github.com/repos/hyperledger/burrow/issues/29,Dump priv val on startup if given key env var,"In DOCKER/start.sh
",closed,False,2015-08-22 14:06:04,2016-03-02 06:05:02
burrow,zramsay,https://github.com/hyperledger/burrow/pull/28,https://api.github.com/repos/hyperledger/burrow/issues/28,update chains new sequence,,closed,True,2015-08-20 21:41:25,2015-08-25 20:37:23
burrow,alist,https://github.com/hyperledger/burrow/issues/27,https://api.github.com/repos/hyperledger/burrow/issues/27,Suppress logging of non-transaction blocks option,"I run `erisdb ~/.eris/data/alistFirstID` and non-transaction blocks flood my terminal output. They make it hard to locate logs for my transactions.

I would like a logging verbosity option that would suppress output from any block that has zero transactions. 
",closed,False,2015-08-07 02:53:49,2016-02-29 17:19:03
burrow,compleatang,https://github.com/hyperledger/burrow/pull/26,https://api.github.com/repos/hyperledger/burrow/issues/26,add start to API mode to eris chain manager script suite,,closed,True,2015-08-01 16:25:45,2015-08-25 21:12:15
burrow,androlo,https://github.com/hyperledger/burrow/issues/25,https://api.github.com/repos/hyperledger/burrow/issues/25,Automatic pagination,"Most collections returned by api methods (blocks, accounts, storage) should be automatically paginated. The responses should be updated to include information such as page number, total pages, and items per page. Queries should be updated as well. Since our search queries is modeled after the ones Github uses, and since the Github API is recognized as being very good, we should probably mimic their [system for pagination](https://developer.github.com/v3/#pagination) as well (where possible).
",closed,False,2015-08-01 03:04:38,2016-03-02 06:05:02
burrow,androlo,https://github.com/hyperledger/burrow/issues/24,https://api.github.com/repos/hyperledger/burrow/issues/24,Add a proper caching policy,,closed,False,2015-07-30 16:59:11,2016-03-02 06:05:02
burrow,androlo,https://github.com/hyperledger/burrow/issues/23,https://api.github.com/repos/hyperledger/burrow/issues/23,Start chunking,,closed,False,2015-07-30 16:55:23,2015-08-01 02:46:36
burrow,androlo,https://github.com/hyperledger/burrow/issues/22,https://api.github.com/repos/hyperledger/burrow/issues/22,move away from erisdbss (server-server),"While it has helped me quite a bit, particularly in testing, this type of throw-away chain generation will be possible with eris-cli so no need to do double work. eris-cli may not generate an endpoint you can call to produce a chain remotely, but if there happens to be a huge demand for that I guess it could be worked in.

Changing this means the server code can be reduced a bit, and there will be no need for erisdbss in build scripts.
",closed,False,2015-07-28 21:47:26,2016-03-02 06:05:02
burrow,androlo,https://github.com/hyperledger/burrow/issues/21,https://api.github.com/repos/hyperledger/burrow/issues/21,suspicious behavior when pushing lots of txs into first block.,"seems to happen when pushing a lot of txs the first thing you do as the chain is created. this could be gone. keep issue up in case it happens again.
",closed,False,2015-07-28 21:35:12,2015-08-26 18:05:40
burrow,androlo,https://github.com/hyperledger/burrow/issues/20,https://api.github.com/repos/hyperledger/burrow/issues/20,update with the state account fix.,"commit the fixes we did locally with keys not being padded sometimes. this will be in next patch.
",closed,False,2015-07-28 21:32:28,2015-08-26 18:06:54
burrow,androlo,https://github.com/hyperledger/burrow/issues/19,https://api.github.com/repos/hyperledger/burrow/issues/19,msg.sender and tx.origin is 00000...0,"Have had a report earlier, and this has apparently been an issue. msg.sender and tx.origin are zero when calling from outside the vm, but not from within (i.e. from other contracts). Not sure whether it's tx only, or both with calls and txs.
",closed,False,2015-07-22 22:38:00,2015-08-26 18:05:57
burrow,androlo,https://github.com/hyperledger/burrow/issues/18,https://api.github.com/repos/hyperledger/burrow/issues/18,Disentangle docker builds,"I don't think this is a hurry, and as far as I know everyone's fine with this as a temp solution. Can't see any problems with this as of now, except from what i understand its a bit unconventional. Adding the issue nonetheless.

Would it be good to keep a tendermint fork in our repos later, or maybe just a tag in the main repo that all our current and coming tools can refer to? Just as a way to ensure that we keep everything the same.  Gonna bring this up on some meeting.
",closed,False,2015-07-19 13:40:48,2015-08-26 18:06:34
burrow,androlo,https://github.com/hyperledger/burrow/issues/17,https://api.github.com/repos/hyperledger/burrow/issues/17,Name registry object,"The name-registry could have its own namespace (i.e. its own object in the pipe and endpoint). It would have methods for transacting, getting a stored value by key, and getting the entire list of stored values (with optional filters).

One problem with this when using local signing. In that case the transaction should be passed like any other, using the `broadcastTx` method. The alternative is to add the nameTransact function to transactions, and keep all transactions in the tx object. It's just temporary anyways, and will at some point be replaced with only local signing.

Another question is what to name it. ""names"" seems a bit ambiguous. It's a regular map as far as I know, which happens to be used for names atm. If `name` should be in it then I personally think that `namereg` (or some variation) would be the best choice. We should also be consistent and refer to it as the Tendermint name registry component everywhere.

Input welcome.
",closed,False,2015-07-19 12:17:41,2015-07-28 21:29:38
burrow,androlo,https://github.com/hyperledger/burrow/issues/16,https://api.github.com/repos/hyperledger/burrow/issues/16,deprecate the 'Network' object.,"For 0.11 the `Network` object should probably be deprecated and a `Node` object added, since Network currently has things like the client version in it. Network data would be part of `Node`.

This would be a name change, the logic would remain the same.
",closed,False,2015-07-18 09:10:41,2016-03-02 06:05:02
burrow,compleatang,https://github.com/hyperledger/burrow/pull/15,https://api.github.com/repos/hyperledger/burrow/issues/15,expose proper ports on eris-db image,"please note, this locks in mint at the commit number below (current master) which is what we should do with the vendoring when we have a chance. 

am not saying that's the right commit, but we should be using the same commit in the dockerfile (L23) as we do for vendoring. 
",closed,True,2015-07-10 21:03:59,2017-04-10 22:13:07
burrow,compleatang,https://github.com/hyperledger/burrow/issues/14,https://api.github.com/repos/hyperledger/burrow/issues/14,the ecm marmots need to say wheeeeeeeeee.......,,closed,False,2015-07-09 15:39:51,2017-04-10 22:13:07
burrow,androlo,https://github.com/hyperledger/burrow/pull/13,https://api.github.com/repos/hyperledger/burrow/issues/13,Temp solidity event support and some other things,,closed,True,2015-07-07 11:46:43,2015-12-16 16:23:44
burrow,ebuchman,https://github.com/hyperledger/burrow/issues/12,https://api.github.com/repos/hyperledger/burrow/issues/12,ecm should be able to start erisdb or tendermint,"erisdb needs a --fast-sync flag too 
",closed,False,2015-07-04 03:18:55,2016-03-11 16:37:36
burrow,ebuchman,https://github.com/hyperledger/burrow/pull/11,https://api.github.com/repos/hyperledger/burrow/issues/11,Dockerfixes,"- moves all docker functionality into DOCKER directory
- brings Dockerfile in line with eris stack
- uses ""eris chain manager"" shell scripts for creating, installing (fetch), and running chains
",closed,True,2015-07-04 03:14:17,2015-07-04 03:18:13
burrow,compleatang,https://github.com/hyperledger/burrow/pull/10,https://api.github.com/repos/hyperledger/burrow/issues/10,ensure docker image complies with eris platform stds,"This PR performs requests the following changes be made:
- update the docker image to comply with the current eris platform paradigms.
- as discussed on Slack, we want the erisdb:0.10 container to be compiled with the following binaries:
  - tendermint
  - erisdb
  - barak
  - debora
  - erisdbss
- this will make for a heavy image, but as most of the image's ""weight"" is in the OS layer it is really only a difference of about 30MB (in the grand scheme of things that's not a lot). the advantage of compiling all of these binaries is that because all of the data can be mint based we are able to put the image in `cli` mode and turn on its `rpc` via the proper mint binary, or in `server` mode and turn on the `rest|stream` api via erisdb, or in `test` mode and turn on the `erisdbss`. this will make for a powerful and flexible image.
- the last change, which is making the tests fail and so will need some work before merging into develop is an update to mint to the current head of tendermint permissions branch. 
- updates circle to build and push an image when we push to master.

**Note** the start script may need some massaging to make this work seamlessly with the platform.
",closed,True,2015-07-03 16:01:49,2017-04-10 22:13:07
burrow,androlo,https://github.com/hyperledger/burrow/pull/9,https://api.github.com/repos/hyperledger/burrow/issues/9,Fixed filter issues in docs.,,closed,True,2015-06-18 22:42:25,2015-06-18 22:42:28
burrow,androlo,https://github.com/hyperledger/burrow/pull/8,https://api.github.com/repos/hyperledger/burrow/issues/8,Develop,,closed,True,2015-06-18 22:39:02,2015-06-18 22:39:05
burrow,androlo,https://github.com/hyperledger/burrow/issues/7,https://api.github.com/repos/hyperledger/burrow/issues/7,Api-doc examples,"Add more examples to the api doc. A simple example will usually clear things up a lot, perhaps more so then the specification, but it will make the already 1800 lines document even fatter. It would be good to have it all in one place though. Eth has an example for each method in their RPC doc, which is great.
",closed,False,2015-06-17 23:48:15,2015-07-28 21:36:51
burrow,androlo,https://github.com/hyperledger/burrow/issues/6,https://api.github.com/repos/hyperledger/burrow/issues/6,Doc issues (permanent),"- ~~Change `<*>` to `<string>` in the filter object description.~~
- ~~Fix so all links to the filter section works.~~
",closed,False,2015-06-17 23:43:07,2015-07-28 21:37:23
burrow,androlo,https://github.com/hyperledger/burrow/pull/5,https://api.github.com/repos/hyperledger/burrow/issues/5,Some more docs. Still 'today' in canada hehe,,closed,True,2015-06-17 21:55:23,2015-06-17 21:55:26
burrow,androlo,https://github.com/hyperledger/burrow/pull/4,https://api.github.com/repos/hyperledger/burrow/issues/4,.,,closed,True,2015-06-17 21:32:16,2015-06-17 21:32:30
burrow,androlo,https://github.com/hyperledger/burrow/pull/3,https://api.github.com/repos/hyperledger/burrow/issues/3,tiny update to api doc,,closed,True,2015-06-16 21:45:49,2015-06-16 21:45:54
burrow,androlo,https://github.com/hyperledger/burrow/pull/2,https://api.github.com/repos/hyperledger/burrow/issues/2,0.9.1 more docs more stuff,,closed,True,2015-06-16 21:31:19,2015-06-16 21:31:23
burrow,androlo,https://github.com/hyperledger/burrow/pull/1,https://api.github.com/repos/hyperledger/burrow/issues/1,godep and some more things,,closed,True,2015-06-15 19:28:47,2015-06-15 19:28:57
