url issues,url_api comment,url_html comment,user create comment,body,created_at,updated_at
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/8,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/477188983,https://github.com/hyperledger/ursa-rfcs/pull/8#issuecomment-477188983,mikelodder7,So I'm not opposed to using like an Array object or SizedBuffer but both sides of the interface must know about it. Rust has been interesting when you want to create arrays and pass them across the FFI boundary. In those cases you might have to create the struct in a separate call which makes it more complex and subject to more misuse. We can try to make a C like struct and see if its possible to use that across the boundary in a clean way. I've look at doing this according to [this](https://s3.amazonaws.com/temp.michaelfbryan.com/arrays/index.html) but it hasn't helped,2019-03-27 14:45:49,2019-03-27 14:50:17
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/8,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/479626012,https://github.com/hyperledger/ursa-rfcs/pull/8#issuecomment-479626012,mikelodder7,@dhuseby showed me [this](https://crates.io/crates/ffi-support) crate that I really like and matches patterns I've used in the past with additional safety guarantees. I'd recommend everyone to take a look at it.,2019-04-03 19:26:32,2019-04-03 19:26:32
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/6,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/465633086,https://github.com/hyperledger/ursa-rfcs/pull/6#issuecomment-465633086,jonnycrunch,"Just to document my comments from the call. that the naming convention for the *ALGORITHM or CURVE{SIZE}-SCHEME.  For instance, is the unambiguous document for the semantics for Chacha20.  Which flavor?   In the DID spec there isn't a good description of these.  ",2019-02-20 15:47:08,2019-02-20 15:47:08
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/6,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/479596536,https://github.com/hyperledger/ursa-rfcs/pull/6#issuecomment-479596536,dhuseby,The Mozilla security team wrote a crate for making safe FFI easier to do. It's called [ffi-support](https://crates.io/crates/ffi-support). We should consider using that.,2019-04-03 18:01:47,2019-04-03 18:01:47
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/6,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/479597789,https://github.com/hyperledger/ursa-rfcs/pull/6#issuecomment-479597789,dhuseby,"Hey, look at that...the ffi-support crate defines containers for using ""handles"" for referring to values on the Rust side: https://docs.rs/ffi-support/0.3.1/ffi_support/handle_map/struct.HandleMap.html",2019-04-03 18:05:08,2019-04-03 18:05:08
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/6,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/479597993,https://github.com/hyperledger/ursa-rfcs/pull/6#issuecomment-479597993,dhuseby,@mikelodder7 this is what I was talking about ^^^,2019-04-03 18:05:43,2019-04-03 18:05:43
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/6,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/479626535,https://github.com/hyperledger/ursa-rfcs/pull/6#issuecomment-479626535,mikelodder7,"> @mikelodder7 this is what I was talking about ^^^

Just reviewed it. It matches patterns I've used and solves many of my frustrations I've had to deal with. I like it. Just added a comment about it in the [Language bindings RFC](https://github.com/hyperledger/ursa-rfcs/pull/8)",2019-04-03 19:28:03,2019-04-03 19:28:03
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/5,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/454160817,https://github.com/hyperledger/ursa-rfcs/pull/5#issuecomment-454160817,dhuseby,"So I thought about this a lot more over the weekend and ran some experiments. There is an alternate solution that does not require the creation of a custom cargo command. The goal is to have the build.rs build scripts in each project of the workspace to know how to build its project correctly base on configuration settings stored in a build config file.  Instead of a custom cargo command we can just use the cargo features as they were intended. Inside each Cargo.toml, we would have to have pre-defined feature lists:

```
[features]
default = [openimplementation]
openimplementation = [sodium sha3]
usgovt = [fips]
chinesegovt = [sn]
```

Then when building Ursa, if just `cargo build` is issued, Ursa is built with the default features. In the example above, that means only the open source crypto implementations are included. If a developer wants to build the US government approved Ursa, they run the command `cargo build --features usgovt` and only FIPS certified crypto will be included in the build.  I think this is simpler and is similar to what we're already doing.",2019-01-14 21:04:28,2019-01-14 21:04:28
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/5,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/461063211,https://github.com/hyperledger/ursa-rfcs/pull/5#issuecomment-461063211,dhuseby,I'm removing this PR because I'm going to re-think this and come back with something different.,2019-02-06 15:24:48,2019-02-06 15:24:48
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/4,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/453308515,https://github.com/hyperledger/ursa-rfcs/pull/4#issuecomment-453308515,dhuseby,The layout suggestion mirrors the way the Bitcoin RFC (BIP) repo is laid out.,2019-01-10 23:57:33,2019-01-10 23:57:33
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/4,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/461210560,https://github.com/hyperledger/ursa-rfcs/pull/4#issuecomment-461210560,vaporos,I may cherry-pick this over to the Sawtooth RFC and Grid RFC repos and propose it for those as well.,2019-02-06 22:18:41,2019-02-06 22:18:41
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/2,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/449435990,https://github.com/hyperledger/ursa-rfcs/pull/2#issuecomment-449435990,dcmiddle,@hartm added crypto examples and RFC template,2018-12-21 16:36:36,2018-12-21 16:36:36
https://api.github.com/repos/hyperledger/ursa-rfcs/issues/1,https://api.github.com/repos/hyperledger/ursa-rfcs/issues/comments/440060785,https://github.com/hyperledger/ursa-rfcs/pull/1#issuecomment-440060785,jwagantall,DCO enabled,2018-11-19 22:13:34,2018-11-19 22:13:34
