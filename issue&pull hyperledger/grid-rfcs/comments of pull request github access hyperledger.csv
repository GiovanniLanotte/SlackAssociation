pull request url html,pull request url,body,commit_id,create at,id,diff_hunk,position,update at,url,html url,user
https://github.com/hyperledger/grid-rfcs/pull/5,https://github.com/hyperledger/grid-rfcs/pull/5,"Please fix the formatting of this proto (and those below) something like this
```
message Product {
    enum ProductType {
         UNSET_TYPE = 0;
         GS1 = 1;
     }
     ProductType product_type = 1;
     string identifier = 2;
     string owner = 3;
     repeated PropertyValue properties = 4;
}

```",a073cf24d940d6c39180722138180099ab2b11f0,2019-03-26 19:36:48,269281133,"@@ -62,69 +91,98 @@ Disabling delete is useful because external systems may have references to these
 ## State
 
 ### Product Representation
-The primary object stored in state is “Product”, which consists of an identifier (GS1 GTIN), an owner (organization identifier compatible w/Pike), and a list of property name/value pairs. 
-The properties available are defined by the Grid Property Schema Transaction Family and are restricted to the fields and rules of the GS1 Product schema. 
-Transactions which are responsible for setting product state values must ensure that the properties conform with the requirements of the GS1 Product Property Schema.
+The primary object stored in state is “Product”, which consists of an
+identifier (GS1 GTIN), an owner (organization identifier compatible w/Pike),
+and a list of property name/value pairs. 
+The properties available are defined by the Grid Property Schema Transaction
+Family and are restricted to the fields and rules of the GS1 Product schema. 
+Transactions which are responsible for setting product state values must ensure
+that the properties conform with the requirements of the GS1 Product Property
+Schema.
 
 ```
 message Product {
-    enum ProductType {
-        UNSET_TYPE = 0;
-        GS1 = 1;
-    }
-    ProductType product_type = 1;
-    string identifier = 2;
-    string owner = 3;
-    repeated PropertyValue properties = 4;
+enum ProductType {",,2019-03-26 19:56:21,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/269281133,https://github.com/hyperledger/grid-rfcs/pull/5#discussion_r269281133,agunde406
https://github.com/hyperledger/grid-rfcs/pull/5,https://github.com/hyperledger/grid-rfcs/pull/5,"Missing the following from the top 

Feature Name: Product
Start Date: TBD
RFC PR: TBD
",a073cf24d940d6c39180722138180099ab2b11f0,2019-03-26 19:53:03,269287073,"@@ -0,0 +1,474 @@
+# Summary",5,2019-03-26 19:56:21,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/269287073,https://github.com/hyperledger/grid-rfcs/pull/5#discussion_r269287073,agunde406
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,"Suggest removing ""Transact"" here.",32672924b2cabb306fcaa626c5003666672a2c81,2019-03-18 14:55:12,266480256,"@@ -0,0 +1,605 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:
+
+```
+PropertyValue(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+Because this is a protobuf message, the default exponent is `0` when the schema
+is created. Likewise, the default value for this property instance is `0`.
+
+### Enum
+
+An enum value would be represented as:
+
+```
+PropertyDefinition(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_options=['white', 'red', 'green', 'blue', 'blacklight'],
+    required=True
+)
+``` 
+
+An instance of this enum would be as follows:
+
+```
+PropertyValue(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_value='white'
+)
+```
+
+Due to the use of protobuf, there is no valid default value, so not setting this
+value can either result in an error or can initialize the `enum_value` to one of
+the options in the property definition.  This detail is left to the
+smart-contract implementer.
+
+### Struct
+
+A struct value would be represented as follows:
+
+```
+PropertyDefinition(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_properties=[
+        PropertyDefinition(
+            name='speed',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+        PropertyDefinition(
+            name='duration',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+    ],
+    required=True
+)
+```
+
+An instance of the “shock"" struct would be as follows:
+
+```
+PropertyValue(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_values=[
+        PropertyValue(
+            name='speed',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=500000),
+        PropertyValue(
+            name='duration',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=10000)
+        ])
+```
+
+The property value for a struct must contain all the struct values from the
+property definition, or it is invalid.  The defaults for the struct values
+themselves depend on their data types and/or the smart-contract implementer
+validation rules.
+
+## Schema Example
+
+A complete object representation can be built from the property definition
+messages, and instances can be represented by constructing items with the
+property value messages.  
+
+Suppose there is a requirement to store different types of light bulbs as part
+of an application. A lightbulb may consist of the properties size, bulb type,
+energy rating, and color.
+
+We could define a Lightbulb schema as follows:
+
+```
+Schema(
+    name=""Lightbulb"",
+    description=""Example Lightbulb schema"",
+    owner = ""philips001""
+    properties=[
+        PropertyDefinition(
+            name=""size"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""Lightbulb radius, in millimeters"",
+            required=True
+        ),
+        PropertyDefinition(
+            name=""bulb_type"",
+            data_type=PropertyDefinition.DataType.ENUM,
+            enum_options=[""filament"", ""CF"", ""LED""],
+            required=True
+        ),
+        PropertyDefinition(
+            name=""energy_rating"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""EnergyStar energy rating"",
+        )
+        PropertyDefinition(
+            name=""color"",
+            data_type=PropertyDefinition.DataType.STRUCT,
+            description=""A named RGB Color value"",
+            struct_properties=[
+                PropertyDefinition(
+                    name='name',
+                    data_type=PropertyDefinition.DataType.STRING,
+                ),
+                PropertyDefinition(
+                    name='rgb_hex',
+                    data_type=PropertyDefinition.DataType.STRING,
+                )])])
+```
+
+Note: This example looks very similar to defining a struct property, but the
+fields in a schema may be optional.
+
+We can define a data structure that uses this schema for validation as follows:
+
+```
+message Lightbulb {
+    string id = 1;
+    string production_org = 2;
+    repeated PropertyValues properties = 3;
+} 
+```
+
+A Lightbulb smart contract would be responsible for validating the properties
+against the Lightbulb schema.
+
+## Addressing
+
+### Referencing Schemas
+
+Schemas are uniquely referenced by their unique schema name. For example:
+
+```
+    get_schema(schema_name)
+    set_schema(schema_name, schema)
+```
+
+### Schema Addressing in the Transact Merkle-Radix State System",,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/266480256,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r266480256,vaporos
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,We should call out what the name of this smart contract will be called.,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-18 16:09:10,266519742,"@@ -0,0 +1,605 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to",8,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/266519742,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r266519742,agunde406
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,The current suggestion for this is `grid_schema`. Are there any alternatives?,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-18 19:18:19,266601835,"@@ -0,0 +1,605 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to",8,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/266601835,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r266601835,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,Removed,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-18 19:18:49,266602040,"@@ -0,0 +1,605 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:
+
+```
+PropertyValue(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+Because this is a protobuf message, the default exponent is `0` when the schema
+is created. Likewise, the default value for this property instance is `0`.
+
+### Enum
+
+An enum value would be represented as:
+
+```
+PropertyDefinition(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_options=['white', 'red', 'green', 'blue', 'blacklight'],
+    required=True
+)
+``` 
+
+An instance of this enum would be as follows:
+
+```
+PropertyValue(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_value='white'
+)
+```
+
+Due to the use of protobuf, there is no valid default value, so not setting this
+value can either result in an error or can initialize the `enum_value` to one of
+the options in the property definition.  This detail is left to the
+smart-contract implementer.
+
+### Struct
+
+A struct value would be represented as follows:
+
+```
+PropertyDefinition(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_properties=[
+        PropertyDefinition(
+            name='speed',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+        PropertyDefinition(
+            name='duration',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+    ],
+    required=True
+)
+```
+
+An instance of the “shock"" struct would be as follows:
+
+```
+PropertyValue(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_values=[
+        PropertyValue(
+            name='speed',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=500000),
+        PropertyValue(
+            name='duration',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=10000)
+        ])
+```
+
+The property value for a struct must contain all the struct values from the
+property definition, or it is invalid.  The defaults for the struct values
+themselves depend on their data types and/or the smart-contract implementer
+validation rules.
+
+## Schema Example
+
+A complete object representation can be built from the property definition
+messages, and instances can be represented by constructing items with the
+property value messages.  
+
+Suppose there is a requirement to store different types of light bulbs as part
+of an application. A lightbulb may consist of the properties size, bulb type,
+energy rating, and color.
+
+We could define a Lightbulb schema as follows:
+
+```
+Schema(
+    name=""Lightbulb"",
+    description=""Example Lightbulb schema"",
+    owner = ""philips001""
+    properties=[
+        PropertyDefinition(
+            name=""size"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""Lightbulb radius, in millimeters"",
+            required=True
+        ),
+        PropertyDefinition(
+            name=""bulb_type"",
+            data_type=PropertyDefinition.DataType.ENUM,
+            enum_options=[""filament"", ""CF"", ""LED""],
+            required=True
+        ),
+        PropertyDefinition(
+            name=""energy_rating"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""EnergyStar energy rating"",
+        )
+        PropertyDefinition(
+            name=""color"",
+            data_type=PropertyDefinition.DataType.STRUCT,
+            description=""A named RGB Color value"",
+            struct_properties=[
+                PropertyDefinition(
+                    name='name',
+                    data_type=PropertyDefinition.DataType.STRING,
+                ),
+                PropertyDefinition(
+                    name='rgb_hex',
+                    data_type=PropertyDefinition.DataType.STRING,
+                )])])
+```
+
+Note: This example looks very similar to defining a struct property, but the
+fields in a schema may be optional.
+
+We can define a data structure that uses this schema for validation as follows:
+
+```
+message Lightbulb {
+    string id = 1;
+    string production_org = 2;
+    repeated PropertyValues properties = 3;
+} 
+```
+
+A Lightbulb smart contract would be responsible for validating the properties
+against the Lightbulb schema.
+
+## Addressing
+
+### Referencing Schemas
+
+Schemas are uniquely referenced by their unique schema name. For example:
+
+```
+    get_schema(schema_name)
+    set_schema(schema_name, schema)
+```
+
+### Schema Addressing in the Transact Merkle-Radix State System",,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/266602040,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r266602040,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,product_create should be schema_create,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-19 15:15:54,266942530,"@@ -0,0 +1,608 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:
+
+```
+PropertyValue(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+Because this is a protobuf message, the default exponent is `0` when the schema
+is created. Likewise, the default value for this property instance is `0`.
+
+### Enum
+
+An enum value would be represented as:
+
+```
+PropertyDefinition(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_options=['white', 'red', 'green', 'blue', 'blacklight'],
+    required=True
+)
+``` 
+
+An instance of this enum would be as follows:
+
+```
+PropertyValue(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_value='white'
+)
+```
+
+Due to the use of protobuf, there is no valid default value, so not setting this
+value can either result in an error or can initialize the `enum_value` to one of
+the options in the property definition.  This detail is left to the
+smart-contract implementer.
+
+### Struct
+
+A struct value would be represented as follows:
+
+```
+PropertyDefinition(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_properties=[
+        PropertyDefinition(
+            name='speed',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+        PropertyDefinition(
+            name='duration',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+    ],
+    required=True
+)
+```
+
+An instance of the “shock"" struct would be as follows:
+
+```
+PropertyValue(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_values=[
+        PropertyValue(
+            name='speed',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=500000),
+        PropertyValue(
+            name='duration',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=10000)
+        ])
+```
+
+The property value for a struct must contain all the struct values from the
+property definition, or it is invalid.  The defaults for the struct values
+themselves depend on their data types and/or the smart-contract implementer
+validation rules.
+
+## Schema Example
+
+A complete object representation can be built from the property definition
+messages, and instances can be represented by constructing items with the
+property value messages.  
+
+Suppose there is a requirement to store different types of light bulbs as part
+of an application. A lightbulb may consist of the properties size, bulb type,
+energy rating, and color.
+
+We could define a Lightbulb schema as follows:
+
+```
+Schema(
+    name=""Lightbulb"",
+    description=""Example Lightbulb schema"",
+    owner = ""philips001""
+    properties=[
+        PropertyDefinition(
+            name=""size"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""Lightbulb radius, in millimeters"",
+            required=True
+        ),
+        PropertyDefinition(
+            name=""bulb_type"",
+            data_type=PropertyDefinition.DataType.ENUM,
+            enum_options=[""filament"", ""CF"", ""LED""],
+            required=True
+        ),
+        PropertyDefinition(
+            name=""energy_rating"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""EnergyStar energy rating"",
+        )
+        PropertyDefinition(
+            name=""color"",
+            data_type=PropertyDefinition.DataType.STRUCT,
+            description=""A named RGB Color value"",
+            struct_properties=[
+                PropertyDefinition(
+                    name='name',
+                    data_type=PropertyDefinition.DataType.STRING,
+                ),
+                PropertyDefinition(
+                    name='rgb_hex',
+                    data_type=PropertyDefinition.DataType.STRING,
+                )])])
+```
+
+Note: This example looks very similar to defining a struct property, but the
+fields in a schema may be optional.
+
+We can define a data structure that uses this schema for validation as follows:
+
+```
+message Lightbulb {
+    string id = 1;
+    string production_org = 2;
+    repeated PropertyValues properties = 3;
+} 
+```
+
+A Lightbulb smart contract would be responsible for validating the properties
+against the Lightbulb schema.
+
+## Addressing
+
+### Referencing Schemas
+
+Schemas are uniquely referenced by their unique schema name. For example:
+
+```
+    get_schema(schema_name)
+    set_schema(schema_name, schema)
+```
+
+### Schema Addressing in the Merkle-Radix State System
+
+All Grid addresses start with the 6-hex-character namespace prefix ""621dee"".
+Schemas are further prefixed under the Grid namespace with reserved ""01"", which
+indicates ""Schemas"".  The remainder of the address is computed from a portion of
+a SHA-512 hash of the Schema name. 
+
+For example, the address of the ""Lightbulb"" schema defined in the example above
+is (in Python): 
+
+```
+    ""621dee"" + ""01"" + hashlib.sha512(""Lightbulb"").encode(""utf-8"")).hexdigest()[:62]
+```
+
+## Transaction Payload and Execution
+
+The following transaction payloads and execution rules are designed for the
+Hyperledger Sawtooth platform and may differ for other transaction execution
+platforms.
+
+### SchemaPayload
+
+SchemaPayload contains an action enum and the associated action payload.  This
+allows for the action payload to be dispatched to the appropriate logic.
+
+Only the defined actions are available and only one action payload should be
+defined in the SchemaPayload.
+
+```
+message SchemaPayload {
+    enum Actions {
+        UNSET_ACTION = 0;
+        SCHEMA_CREATE = 1;
+        SCHEMA_UPDATE = 2;
+    }
+
+    Action action = 1;
+
+    SchemaCreateAction product_create = 2;",,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/266942530,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r266942530,agunde406
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,product_update should be schema_update,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-19 15:16:05,266942606,"@@ -0,0 +1,608 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:
+
+```
+PropertyValue(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+Because this is a protobuf message, the default exponent is `0` when the schema
+is created. Likewise, the default value for this property instance is `0`.
+
+### Enum
+
+An enum value would be represented as:
+
+```
+PropertyDefinition(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_options=['white', 'red', 'green', 'blue', 'blacklight'],
+    required=True
+)
+``` 
+
+An instance of this enum would be as follows:
+
+```
+PropertyValue(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_value='white'
+)
+```
+
+Due to the use of protobuf, there is no valid default value, so not setting this
+value can either result in an error or can initialize the `enum_value` to one of
+the options in the property definition.  This detail is left to the
+smart-contract implementer.
+
+### Struct
+
+A struct value would be represented as follows:
+
+```
+PropertyDefinition(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_properties=[
+        PropertyDefinition(
+            name='speed',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+        PropertyDefinition(
+            name='duration',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+    ],
+    required=True
+)
+```
+
+An instance of the “shock"" struct would be as follows:
+
+```
+PropertyValue(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_values=[
+        PropertyValue(
+            name='speed',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=500000),
+        PropertyValue(
+            name='duration',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=10000)
+        ])
+```
+
+The property value for a struct must contain all the struct values from the
+property definition, or it is invalid.  The defaults for the struct values
+themselves depend on their data types and/or the smart-contract implementer
+validation rules.
+
+## Schema Example
+
+A complete object representation can be built from the property definition
+messages, and instances can be represented by constructing items with the
+property value messages.  
+
+Suppose there is a requirement to store different types of light bulbs as part
+of an application. A lightbulb may consist of the properties size, bulb type,
+energy rating, and color.
+
+We could define a Lightbulb schema as follows:
+
+```
+Schema(
+    name=""Lightbulb"",
+    description=""Example Lightbulb schema"",
+    owner = ""philips001""
+    properties=[
+        PropertyDefinition(
+            name=""size"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""Lightbulb radius, in millimeters"",
+            required=True
+        ),
+        PropertyDefinition(
+            name=""bulb_type"",
+            data_type=PropertyDefinition.DataType.ENUM,
+            enum_options=[""filament"", ""CF"", ""LED""],
+            required=True
+        ),
+        PropertyDefinition(
+            name=""energy_rating"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""EnergyStar energy rating"",
+        )
+        PropertyDefinition(
+            name=""color"",
+            data_type=PropertyDefinition.DataType.STRUCT,
+            description=""A named RGB Color value"",
+            struct_properties=[
+                PropertyDefinition(
+                    name='name',
+                    data_type=PropertyDefinition.DataType.STRING,
+                ),
+                PropertyDefinition(
+                    name='rgb_hex',
+                    data_type=PropertyDefinition.DataType.STRING,
+                )])])
+```
+
+Note: This example looks very similar to defining a struct property, but the
+fields in a schema may be optional.
+
+We can define a data structure that uses this schema for validation as follows:
+
+```
+message Lightbulb {
+    string id = 1;
+    string production_org = 2;
+    repeated PropertyValues properties = 3;
+} 
+```
+
+A Lightbulb smart contract would be responsible for validating the properties
+against the Lightbulb schema.
+
+## Addressing
+
+### Referencing Schemas
+
+Schemas are uniquely referenced by their unique schema name. For example:
+
+```
+    get_schema(schema_name)
+    set_schema(schema_name, schema)
+```
+
+### Schema Addressing in the Merkle-Radix State System
+
+All Grid addresses start with the 6-hex-character namespace prefix ""621dee"".
+Schemas are further prefixed under the Grid namespace with reserved ""01"", which
+indicates ""Schemas"".  The remainder of the address is computed from a portion of
+a SHA-512 hash of the Schema name. 
+
+For example, the address of the ""Lightbulb"" schema defined in the example above
+is (in Python): 
+
+```
+    ""621dee"" + ""01"" + hashlib.sha512(""Lightbulb"").encode(""utf-8"")).hexdigest()[:62]
+```
+
+## Transaction Payload and Execution
+
+The following transaction payloads and execution rules are designed for the
+Hyperledger Sawtooth platform and may differ for other transaction execution
+platforms.
+
+### SchemaPayload
+
+SchemaPayload contains an action enum and the associated action payload.  This
+allows for the action payload to be dispatched to the appropriate logic.
+
+Only the defined actions are available and only one action payload should be
+defined in the SchemaPayload.
+
+```
+message SchemaPayload {
+    enum Actions {
+        UNSET_ACTION = 0;
+        SCHEMA_CREATE = 1;
+        SCHEMA_UPDATE = 2;
+    }
+
+    Action action = 1;
+
+    SchemaCreateAction product_create = 2;
+    SchemaUpdateAction product_update = 3",,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/266942606,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r266942606,agunde406
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,Fixed,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-19 15:25:03,266947483,"@@ -0,0 +1,608 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:
+
+```
+PropertyValue(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+Because this is a protobuf message, the default exponent is `0` when the schema
+is created. Likewise, the default value for this property instance is `0`.
+
+### Enum
+
+An enum value would be represented as:
+
+```
+PropertyDefinition(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_options=['white', 'red', 'green', 'blue', 'blacklight'],
+    required=True
+)
+``` 
+
+An instance of this enum would be as follows:
+
+```
+PropertyValue(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_value='white'
+)
+```
+
+Due to the use of protobuf, there is no valid default value, so not setting this
+value can either result in an error or can initialize the `enum_value` to one of
+the options in the property definition.  This detail is left to the
+smart-contract implementer.
+
+### Struct
+
+A struct value would be represented as follows:
+
+```
+PropertyDefinition(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_properties=[
+        PropertyDefinition(
+            name='speed',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+        PropertyDefinition(
+            name='duration',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+    ],
+    required=True
+)
+```
+
+An instance of the “shock"" struct would be as follows:
+
+```
+PropertyValue(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_values=[
+        PropertyValue(
+            name='speed',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=500000),
+        PropertyValue(
+            name='duration',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=10000)
+        ])
+```
+
+The property value for a struct must contain all the struct values from the
+property definition, or it is invalid.  The defaults for the struct values
+themselves depend on their data types and/or the smart-contract implementer
+validation rules.
+
+## Schema Example
+
+A complete object representation can be built from the property definition
+messages, and instances can be represented by constructing items with the
+property value messages.  
+
+Suppose there is a requirement to store different types of light bulbs as part
+of an application. A lightbulb may consist of the properties size, bulb type,
+energy rating, and color.
+
+We could define a Lightbulb schema as follows:
+
+```
+Schema(
+    name=""Lightbulb"",
+    description=""Example Lightbulb schema"",
+    owner = ""philips001""
+    properties=[
+        PropertyDefinition(
+            name=""size"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""Lightbulb radius, in millimeters"",
+            required=True
+        ),
+        PropertyDefinition(
+            name=""bulb_type"",
+            data_type=PropertyDefinition.DataType.ENUM,
+            enum_options=[""filament"", ""CF"", ""LED""],
+            required=True
+        ),
+        PropertyDefinition(
+            name=""energy_rating"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""EnergyStar energy rating"",
+        )
+        PropertyDefinition(
+            name=""color"",
+            data_type=PropertyDefinition.DataType.STRUCT,
+            description=""A named RGB Color value"",
+            struct_properties=[
+                PropertyDefinition(
+                    name='name',
+                    data_type=PropertyDefinition.DataType.STRING,
+                ),
+                PropertyDefinition(
+                    name='rgb_hex',
+                    data_type=PropertyDefinition.DataType.STRING,
+                )])])
+```
+
+Note: This example looks very similar to defining a struct property, but the
+fields in a schema may be optional.
+
+We can define a data structure that uses this schema for validation as follows:
+
+```
+message Lightbulb {
+    string id = 1;
+    string production_org = 2;
+    repeated PropertyValues properties = 3;
+} 
+```
+
+A Lightbulb smart contract would be responsible for validating the properties
+against the Lightbulb schema.
+
+## Addressing
+
+### Referencing Schemas
+
+Schemas are uniquely referenced by their unique schema name. For example:
+
+```
+    get_schema(schema_name)
+    set_schema(schema_name, schema)
+```
+
+### Schema Addressing in the Merkle-Radix State System
+
+All Grid addresses start with the 6-hex-character namespace prefix ""621dee"".
+Schemas are further prefixed under the Grid namespace with reserved ""01"", which
+indicates ""Schemas"".  The remainder of the address is computed from a portion of
+a SHA-512 hash of the Schema name. 
+
+For example, the address of the ""Lightbulb"" schema defined in the example above
+is (in Python): 
+
+```
+    ""621dee"" + ""01"" + hashlib.sha512(""Lightbulb"").encode(""utf-8"")).hexdigest()[:62]
+```
+
+## Transaction Payload and Execution
+
+The following transaction payloads and execution rules are designed for the
+Hyperledger Sawtooth platform and may differ for other transaction execution
+platforms.
+
+### SchemaPayload
+
+SchemaPayload contains an action enum and the associated action payload.  This
+allows for the action payload to be dispatched to the appropriate logic.
+
+Only the defined actions are available and only one action payload should be
+defined in the SchemaPayload.
+
+```
+message SchemaPayload {
+    enum Actions {
+        UNSET_ACTION = 0;
+        SCHEMA_CREATE = 1;
+        SCHEMA_UPDATE = 2;
+    }
+
+    Action action = 1;
+
+    SchemaCreateAction product_create = 2;
+    SchemaUpdateAction product_update = 3",,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/266947483,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r266947483,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,Fixed,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-19 15:25:07,266947516,"@@ -0,0 +1,608 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:
+
+```
+PropertyValue(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+Because this is a protobuf message, the default exponent is `0` when the schema
+is created. Likewise, the default value for this property instance is `0`.
+
+### Enum
+
+An enum value would be represented as:
+
+```
+PropertyDefinition(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_options=['white', 'red', 'green', 'blue', 'blacklight'],
+    required=True
+)
+``` 
+
+An instance of this enum would be as follows:
+
+```
+PropertyValue(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_value='white'
+)
+```
+
+Due to the use of protobuf, there is no valid default value, so not setting this
+value can either result in an error or can initialize the `enum_value` to one of
+the options in the property definition.  This detail is left to the
+smart-contract implementer.
+
+### Struct
+
+A struct value would be represented as follows:
+
+```
+PropertyDefinition(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_properties=[
+        PropertyDefinition(
+            name='speed',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+        PropertyDefinition(
+            name='duration',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+    ],
+    required=True
+)
+```
+
+An instance of the “shock"" struct would be as follows:
+
+```
+PropertyValue(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_values=[
+        PropertyValue(
+            name='speed',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=500000),
+        PropertyValue(
+            name='duration',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=10000)
+        ])
+```
+
+The property value for a struct must contain all the struct values from the
+property definition, or it is invalid.  The defaults for the struct values
+themselves depend on their data types and/or the smart-contract implementer
+validation rules.
+
+## Schema Example
+
+A complete object representation can be built from the property definition
+messages, and instances can be represented by constructing items with the
+property value messages.  
+
+Suppose there is a requirement to store different types of light bulbs as part
+of an application. A lightbulb may consist of the properties size, bulb type,
+energy rating, and color.
+
+We could define a Lightbulb schema as follows:
+
+```
+Schema(
+    name=""Lightbulb"",
+    description=""Example Lightbulb schema"",
+    owner = ""philips001""
+    properties=[
+        PropertyDefinition(
+            name=""size"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""Lightbulb radius, in millimeters"",
+            required=True
+        ),
+        PropertyDefinition(
+            name=""bulb_type"",
+            data_type=PropertyDefinition.DataType.ENUM,
+            enum_options=[""filament"", ""CF"", ""LED""],
+            required=True
+        ),
+        PropertyDefinition(
+            name=""energy_rating"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""EnergyStar energy rating"",
+        )
+        PropertyDefinition(
+            name=""color"",
+            data_type=PropertyDefinition.DataType.STRUCT,
+            description=""A named RGB Color value"",
+            struct_properties=[
+                PropertyDefinition(
+                    name='name',
+                    data_type=PropertyDefinition.DataType.STRING,
+                ),
+                PropertyDefinition(
+                    name='rgb_hex',
+                    data_type=PropertyDefinition.DataType.STRING,
+                )])])
+```
+
+Note: This example looks very similar to defining a struct property, but the
+fields in a schema may be optional.
+
+We can define a data structure that uses this schema for validation as follows:
+
+```
+message Lightbulb {
+    string id = 1;
+    string production_org = 2;
+    repeated PropertyValues properties = 3;
+} 
+```
+
+A Lightbulb smart contract would be responsible for validating the properties
+against the Lightbulb schema.
+
+## Addressing
+
+### Referencing Schemas
+
+Schemas are uniquely referenced by their unique schema name. For example:
+
+```
+    get_schema(schema_name)
+    set_schema(schema_name, schema)
+```
+
+### Schema Addressing in the Merkle-Radix State System
+
+All Grid addresses start with the 6-hex-character namespace prefix ""621dee"".
+Schemas are further prefixed under the Grid namespace with reserved ""01"", which
+indicates ""Schemas"".  The remainder of the address is computed from a portion of
+a SHA-512 hash of the Schema name. 
+
+For example, the address of the ""Lightbulb"" schema defined in the example above
+is (in Python): 
+
+```
+    ""621dee"" + ""01"" + hashlib.sha512(""Lightbulb"").encode(""utf-8"")).hexdigest()[:62]
+```
+
+## Transaction Payload and Execution
+
+The following transaction payloads and execution rules are designed for the
+Hyperledger Sawtooth platform and may differ for other transaction execution
+platforms.
+
+### SchemaPayload
+
+SchemaPayload contains an action enum and the associated action payload.  This
+allows for the action payload to be dispatched to the appropriate logic.
+
+Only the defined actions are available and only one action payload should be
+defined in the SchemaPayload.
+
+```
+message SchemaPayload {
+    enum Actions {
+        UNSET_ACTION = 0;
+        SCHEMA_CREATE = 1;
+        SCHEMA_UPDATE = 2;
+    }
+
+    Action action = 1;
+
+    SchemaCreateAction product_create = 2;",,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/266947516,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r266947516,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,Added.,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-19 21:29:03,267105249,"@@ -0,0 +1,605 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to",8,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267105249,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267105249,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,"I think we need to account for a 'measure type' either as a struct example or as a declarative primitive / framework struct or something.  

A measure is a 'number' and a 'unit'.  This example is ""price"" which implies a unit (of a currency).  That is not a number, it's a measure of currency.  
",32672924b2cabb306fcaa626c5003666672a2c81,2019-03-20 14:15:01,267359878,"@@ -0,0 +1,618 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:",309,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267359878,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267359878,davececchi
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,"Versioning seems worth commenting on here.  Existing state doesn't just evolve to new schemas, presumably.",32672924b2cabb306fcaa626c5003666672a2c81,2019-03-20 14:51:22,267379644,"@@ -0,0 +1,618 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:
+
+```
+PropertyValue(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+Because this is a protobuf message, the default exponent is `0` when the schema
+is created. Likewise, the default value for this property instance is `0`.
+
+### Enum
+
+An enum value would be represented as:
+
+```
+PropertyDefinition(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_options=['white', 'red', 'green', 'blue', 'blacklight'],
+    required=True
+)
+``` 
+
+An instance of this enum would be as follows:
+
+```
+PropertyValue(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_value='white'
+)
+```
+
+Due to the use of protobuf, there is no valid default value, so not setting this
+value can either result in an error or can initialize the `enum_value` to one of
+the options in the property definition.  This detail is left to the
+smart-contract implementer.
+
+### Struct
+
+A struct value would be represented as follows:
+
+```
+PropertyDefinition(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_properties=[
+        PropertyDefinition(
+            name='speed',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+        PropertyDefinition(
+            name='duration',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+    ],
+    required=True
+)
+```
+
+An instance of the “shock"" struct would be as follows:
+
+```
+PropertyValue(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_values=[
+        PropertyValue(
+            name='speed',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=500000),
+        PropertyValue(
+            name='duration',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=10000)
+        ])
+```
+
+The property value for a struct must contain all the struct values from the
+property definition, or it is invalid.  The defaults for the struct values
+themselves depend on their data types and/or the smart-contract implementer
+validation rules.
+
+## Schema Example
+
+A complete object representation can be built from the property definition
+messages, and instances can be represented by constructing items with the
+property value messages.  
+
+Suppose there is a requirement to store different types of light bulbs as part
+of an application. A lightbulb may consist of the properties size, bulb type,
+energy rating, and color.
+
+We could define a Lightbulb schema as follows:
+
+```
+Schema(
+    name=""Lightbulb"",
+    description=""Example Lightbulb schema"",
+    owner = ""philips001""
+    properties=[
+        PropertyDefinition(
+            name=""size"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""Lightbulb radius, in millimeters"",
+            required=True
+        ),
+        PropertyDefinition(
+            name=""bulb_type"",
+            data_type=PropertyDefinition.DataType.ENUM,
+            enum_options=[""filament"", ""CF"", ""LED""],
+            required=True
+        ),
+        PropertyDefinition(
+            name=""energy_rating"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""EnergyStar energy rating"",
+        )
+        PropertyDefinition(
+            name=""color"",
+            data_type=PropertyDefinition.DataType.STRUCT,
+            description=""A named RGB Color value"",
+            struct_properties=[
+                PropertyDefinition(
+                    name='name',
+                    data_type=PropertyDefinition.DataType.STRING,
+                ),
+                PropertyDefinition(
+                    name='rgb_hex',
+                    data_type=PropertyDefinition.DataType.STRING,
+                )])])
+```
+
+Note: This example looks very similar to defining a struct property, but the
+fields in a schema may be optional.
+
+We can define a data structure that uses this schema for validation as follows:
+
+```
+message Lightbulb {
+    string id = 1;
+    string production_org = 2;
+    repeated PropertyValues properties = 3;
+} 
+```
+
+A Lightbulb smart contract would be responsible for validating the properties
+against the Lightbulb schema.
+
+## Addressing
+
+### Referencing Schemas
+
+Schemas are uniquely referenced by their unique schema name. For example:
+
+```
+    get_schema(schema_name)
+    set_schema(schema_name, schema)
+```
+
+### Schema Addressing in the Merkle-Radix State System
+
+All Grid addresses start with the 6-hex-character namespace prefix ""621dee"".
+Schemas are further prefixed under the Grid namespace with reserved ""01"", which
+indicates ""Schemas"".  The remainder of the address is computed from a portion of
+a SHA-512 hash of the Schema name. 
+
+For example, the address of the ""Lightbulb"" schema defined in the example above
+is (in Python): 
+
+```
+    ""621dee"" + ""01"" + hashlib.sha512(""Lightbulb"").encode(""utf-8"")).hexdigest()[:62]
+```
+
+## Transactions
+
+In order to add Schemas to state, a transaction must be used.  The following
+transactions and their execution rules are designed for the Hyperledger Sawtooth
+platform and may differ for other transaction execution platforms.
+
+### Transaction Header
+
+The header for the transactions will include the following:
+
+- `family_name`: `""grid_schema""`
+- `family_version`: `""1.0""`
+- `namespaces`: `[ ""621dee"" ]`
+
+### Payloads and Execution Rules
+
+#### SchemaPayload
+
+SchemaPayload contains an action enum and the associated action payload.  This
+allows for the action payload to be dispatched to the appropriate logic.
+
+Only the defined actions are available and only one action payload should be
+defined in the SchemaPayload.
+
+```
+message SchemaPayload {
+    enum Actions {
+        UNSET_ACTION = 0;
+        SCHEMA_CREATE = 1;
+        SCHEMA_UPDATE = 2;
+    }
+
+    Action action = 1;
+
+    SchemaCreateAction schema_create = 2;
+    SchemaUpdateAction schema_update = 3
+}
+```
+
+#### SchemaCreateAction
+
+SchemaCreateAction adds a new Schema to state. 
+
+```
+message SchemaCreateAction {
+    string schema_name = 1;
+    string description = 2;
+    repeated PropertyDefinition properties = 10;
+}
+```
+
+The action is validated according to the following rules:
+
+- If a Schema already exists with this name or the name is an empty string, the
+  transaction is invalid.
+- If the property list is empty, the transaction is invalid.
+- The signer of the transaction must be an agent in Pike state and must belong
+  to an organization in Pike state, otherwise the transaction is invalid.
+- The agent must have the permission `can_create_schema` for the organization,
+  otherwise the transaction is invalid.  
+
+The schema is created with the provided fields, in addition to the Pike
+organization ID as the `owner_id`. The schema is then stored in state,
+
+The inputs for SchemaCreateAction must include:
+
+- Address of the Agent submitting the transaction
+- Address of the Schema
+  
+The outputs for SchemaCreateAction must include:
+
+- Address of the Schema  
+
+#### SchemaUpdateAction
+
+SchemaUpdateAction updates a Schema to state. This update only adds new
+Properties to the Schema.
+
+```
+message SchemaUpdateAction {
+    string schema_name = 1;
+    repeated PropertyDefinition properties = 2;
+}
+```",599,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267379644,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267379644,davececchi
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,"The NUMBER is the fundamental data representation, not necessarily a unit. Measure type might make sense in NUMBER properties, but ultimately, it's just a string, since we probably shouldn't try to enumerate all possible measures. 

In the above, it could be ""usd_cents"", versus ""euro_cents"", etc",32672924b2cabb306fcaa626c5003666672a2c81,2019-03-20 16:44:37,267438618,"@@ -0,0 +1,618 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:",309,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267438618,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267438618,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,"I don't think you would really want to do ""usd_cents"" or ""euro_cents"". Using what is currently in this RFC, I think you would want to define a struct with two fields, one for denomination and the other for the number. Which at best makes this a poor example to have in the RFC.

I think it would be reasonable to add a CURRENCY DataType for the same reason we have LOCATION - because it's common and we want it standardized across grid. We could add it to this RFC, but if we can't agree how we should implement it (this is not a simple topic really), then we could mention it in the unresolved section of the document and add it with a different RFC following from further discussion.",32672924b2cabb306fcaa626c5003666672a2c81,2019-03-20 17:52:26,267470345,"@@ -0,0 +1,618 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:",309,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267470345,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267470345,vaporos
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,LOCATION is not called out below.,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-20 17:54:15,267471253,"@@ -0,0 +1,618 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)",29,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267471253,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267471253,vaporos
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,"I think I missed that - was thinking that it could just be handled as a struct, going forward.  Probably more efficient to have a location as a top-level data type.

Will-add",32672924b2cabb306fcaa626c5003666672a2c81,2019-03-20 18:41:18,267491508,"@@ -0,0 +1,618 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)",29,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267491508,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267491508,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,"As of this RFC, schemas are only additive, which makes all schemas forward-compatible.  The new fields would have to be marked as not required, for this to work.  

Will have to add something about this to rules for updates, and some additional comments about the schemas over time.",32672924b2cabb306fcaa626c5003666672a2c81,2019-03-20 19:16:23,267505305,"@@ -0,0 +1,618 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:
+
+```
+PropertyValue(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+Because this is a protobuf message, the default exponent is `0` when the schema
+is created. Likewise, the default value for this property instance is `0`.
+
+### Enum
+
+An enum value would be represented as:
+
+```
+PropertyDefinition(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_options=['white', 'red', 'green', 'blue', 'blacklight'],
+    required=True
+)
+``` 
+
+An instance of this enum would be as follows:
+
+```
+PropertyValue(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_value='white'
+)
+```
+
+Due to the use of protobuf, there is no valid default value, so not setting this
+value can either result in an error or can initialize the `enum_value` to one of
+the options in the property definition.  This detail is left to the
+smart-contract implementer.
+
+### Struct
+
+A struct value would be represented as follows:
+
+```
+PropertyDefinition(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_properties=[
+        PropertyDefinition(
+            name='speed',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+        PropertyDefinition(
+            name='duration',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+    ],
+    required=True
+)
+```
+
+An instance of the “shock"" struct would be as follows:
+
+```
+PropertyValue(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_values=[
+        PropertyValue(
+            name='speed',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=500000),
+        PropertyValue(
+            name='duration',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=10000)
+        ])
+```
+
+The property value for a struct must contain all the struct values from the
+property definition, or it is invalid.  The defaults for the struct values
+themselves depend on their data types and/or the smart-contract implementer
+validation rules.
+
+## Schema Example
+
+A complete object representation can be built from the property definition
+messages, and instances can be represented by constructing items with the
+property value messages.  
+
+Suppose there is a requirement to store different types of light bulbs as part
+of an application. A lightbulb may consist of the properties size, bulb type,
+energy rating, and color.
+
+We could define a Lightbulb schema as follows:
+
+```
+Schema(
+    name=""Lightbulb"",
+    description=""Example Lightbulb schema"",
+    owner = ""philips001""
+    properties=[
+        PropertyDefinition(
+            name=""size"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""Lightbulb radius, in millimeters"",
+            required=True
+        ),
+        PropertyDefinition(
+            name=""bulb_type"",
+            data_type=PropertyDefinition.DataType.ENUM,
+            enum_options=[""filament"", ""CF"", ""LED""],
+            required=True
+        ),
+        PropertyDefinition(
+            name=""energy_rating"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""EnergyStar energy rating"",
+        )
+        PropertyDefinition(
+            name=""color"",
+            data_type=PropertyDefinition.DataType.STRUCT,
+            description=""A named RGB Color value"",
+            struct_properties=[
+                PropertyDefinition(
+                    name='name',
+                    data_type=PropertyDefinition.DataType.STRING,
+                ),
+                PropertyDefinition(
+                    name='rgb_hex',
+                    data_type=PropertyDefinition.DataType.STRING,
+                )])])
+```
+
+Note: This example looks very similar to defining a struct property, but the
+fields in a schema may be optional.
+
+We can define a data structure that uses this schema for validation as follows:
+
+```
+message Lightbulb {
+    string id = 1;
+    string production_org = 2;
+    repeated PropertyValues properties = 3;
+} 
+```
+
+A Lightbulb smart contract would be responsible for validating the properties
+against the Lightbulb schema.
+
+## Addressing
+
+### Referencing Schemas
+
+Schemas are uniquely referenced by their unique schema name. For example:
+
+```
+    get_schema(schema_name)
+    set_schema(schema_name, schema)
+```
+
+### Schema Addressing in the Merkle-Radix State System
+
+All Grid addresses start with the 6-hex-character namespace prefix ""621dee"".
+Schemas are further prefixed under the Grid namespace with reserved ""01"", which
+indicates ""Schemas"".  The remainder of the address is computed from a portion of
+a SHA-512 hash of the Schema name. 
+
+For example, the address of the ""Lightbulb"" schema defined in the example above
+is (in Python): 
+
+```
+    ""621dee"" + ""01"" + hashlib.sha512(""Lightbulb"").encode(""utf-8"")).hexdigest()[:62]
+```
+
+## Transactions
+
+In order to add Schemas to state, a transaction must be used.  The following
+transactions and their execution rules are designed for the Hyperledger Sawtooth
+platform and may differ for other transaction execution platforms.
+
+### Transaction Header
+
+The header for the transactions will include the following:
+
+- `family_name`: `""grid_schema""`
+- `family_version`: `""1.0""`
+- `namespaces`: `[ ""621dee"" ]`
+
+### Payloads and Execution Rules
+
+#### SchemaPayload
+
+SchemaPayload contains an action enum and the associated action payload.  This
+allows for the action payload to be dispatched to the appropriate logic.
+
+Only the defined actions are available and only one action payload should be
+defined in the SchemaPayload.
+
+```
+message SchemaPayload {
+    enum Actions {
+        UNSET_ACTION = 0;
+        SCHEMA_CREATE = 1;
+        SCHEMA_UPDATE = 2;
+    }
+
+    Action action = 1;
+
+    SchemaCreateAction schema_create = 2;
+    SchemaUpdateAction schema_update = 3
+}
+```
+
+#### SchemaCreateAction
+
+SchemaCreateAction adds a new Schema to state. 
+
+```
+message SchemaCreateAction {
+    string schema_name = 1;
+    string description = 2;
+    repeated PropertyDefinition properties = 10;
+}
+```
+
+The action is validated according to the following rules:
+
+- If a Schema already exists with this name or the name is an empty string, the
+  transaction is invalid.
+- If the property list is empty, the transaction is invalid.
+- The signer of the transaction must be an agent in Pike state and must belong
+  to an organization in Pike state, otherwise the transaction is invalid.
+- The agent must have the permission `can_create_schema` for the organization,
+  otherwise the transaction is invalid.  
+
+The schema is created with the provided fields, in addition to the Pike
+organization ID as the `owner_id`. The schema is then stored in state,
+
+The inputs for SchemaCreateAction must include:
+
+- Address of the Agent submitting the transaction
+- Address of the Schema
+  
+The outputs for SchemaCreateAction must include:
+
+- Address of the Schema  
+
+#### SchemaUpdateAction
+
+SchemaUpdateAction updates a Schema to state. This update only adds new
+Properties to the Schema.
+
+```
+message SchemaUpdateAction {
+    string schema_name = 1;
+    repeated PropertyDefinition properties = 2;
+}
+```",599,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267505305,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267505305,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,Added.,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-20 19:19:53,267506556,"@@ -0,0 +1,618 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)",29,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267506556,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267506556,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,"Added a paragraph to ""Unresolved Questions"" about promoting structs to first-class data types.",32672924b2cabb306fcaa626c5003666672a2c81,2019-03-20 21:41:24,267558154,"@@ -0,0 +1,618 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:",309,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267558154,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267558154,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,"Added a paragraph to the ""Unanswered questions"" section.",32672924b2cabb306fcaa626c5003666672a2c81,2019-03-21 18:46:40,267907308,"@@ -0,0 +1,618 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:
+
+```
+PropertyValue(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+Because this is a protobuf message, the default exponent is `0` when the schema
+is created. Likewise, the default value for this property instance is `0`.
+
+### Enum
+
+An enum value would be represented as:
+
+```
+PropertyDefinition(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_options=['white', 'red', 'green', 'blue', 'blacklight'],
+    required=True
+)
+``` 
+
+An instance of this enum would be as follows:
+
+```
+PropertyValue(
+    name='color',
+    data_type=PropertyDefinition.DataType.ENUM,
+    enum_value='white'
+)
+```
+
+Due to the use of protobuf, there is no valid default value, so not setting this
+value can either result in an error or can initialize the `enum_value` to one of
+the options in the property definition.  This detail is left to the
+smart-contract implementer.
+
+### Struct
+
+A struct value would be represented as follows:
+
+```
+PropertyDefinition(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_properties=[
+        PropertyDefinition(
+            name='speed',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+        PropertyDefinition(
+            name='duration',
+            data_type=PropertyDefinition.DataType.NUMBER,
+            number_exponent=-6),
+    ],
+    required=True
+)
+```
+
+An instance of the “shock"" struct would be as follows:
+
+```
+PropertyValue(
+    name='shock',
+    data_type=PropertyDefinition.DataType.STRUCT,
+    struct_values=[
+        PropertyValue(
+            name='speed',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=500000),
+        PropertyValue(
+            name='duration',
+            data_type=PropertySchema.DataType.NUMBER,
+            number_value=10000)
+        ])
+```
+
+The property value for a struct must contain all the struct values from the
+property definition, or it is invalid.  The defaults for the struct values
+themselves depend on their data types and/or the smart-contract implementer
+validation rules.
+
+## Schema Example
+
+A complete object representation can be built from the property definition
+messages, and instances can be represented by constructing items with the
+property value messages.  
+
+Suppose there is a requirement to store different types of light bulbs as part
+of an application. A lightbulb may consist of the properties size, bulb type,
+energy rating, and color.
+
+We could define a Lightbulb schema as follows:
+
+```
+Schema(
+    name=""Lightbulb"",
+    description=""Example Lightbulb schema"",
+    owner = ""philips001""
+    properties=[
+        PropertyDefinition(
+            name=""size"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""Lightbulb radius, in millimeters"",
+            required=True
+        ),
+        PropertyDefinition(
+            name=""bulb_type"",
+            data_type=PropertyDefinition.DataType.ENUM,
+            enum_options=[""filament"", ""CF"", ""LED""],
+            required=True
+        ),
+        PropertyDefinition(
+            name=""energy_rating"",
+            data_type=PropertyDefinition.DataType.NUMBER,
+            description=""EnergyStar energy rating"",
+        )
+        PropertyDefinition(
+            name=""color"",
+            data_type=PropertyDefinition.DataType.STRUCT,
+            description=""A named RGB Color value"",
+            struct_properties=[
+                PropertyDefinition(
+                    name='name',
+                    data_type=PropertyDefinition.DataType.STRING,
+                ),
+                PropertyDefinition(
+                    name='rgb_hex',
+                    data_type=PropertyDefinition.DataType.STRING,
+                )])])
+```
+
+Note: This example looks very similar to defining a struct property, but the
+fields in a schema may be optional.
+
+We can define a data structure that uses this schema for validation as follows:
+
+```
+message Lightbulb {
+    string id = 1;
+    string production_org = 2;
+    repeated PropertyValues properties = 3;
+} 
+```
+
+A Lightbulb smart contract would be responsible for validating the properties
+against the Lightbulb schema.
+
+## Addressing
+
+### Referencing Schemas
+
+Schemas are uniquely referenced by their unique schema name. For example:
+
+```
+    get_schema(schema_name)
+    set_schema(schema_name, schema)
+```
+
+### Schema Addressing in the Merkle-Radix State System
+
+All Grid addresses start with the 6-hex-character namespace prefix ""621dee"".
+Schemas are further prefixed under the Grid namespace with reserved ""01"", which
+indicates ""Schemas"".  The remainder of the address is computed from a portion of
+a SHA-512 hash of the Schema name. 
+
+For example, the address of the ""Lightbulb"" schema defined in the example above
+is (in Python): 
+
+```
+    ""621dee"" + ""01"" + hashlib.sha512(""Lightbulb"").encode(""utf-8"")).hexdigest()[:62]
+```
+
+## Transactions
+
+In order to add Schemas to state, a transaction must be used.  The following
+transactions and their execution rules are designed for the Hyperledger Sawtooth
+platform and may differ for other transaction execution platforms.
+
+### Transaction Header
+
+The header for the transactions will include the following:
+
+- `family_name`: `""grid_schema""`
+- `family_version`: `""1.0""`
+- `namespaces`: `[ ""621dee"" ]`
+
+### Payloads and Execution Rules
+
+#### SchemaPayload
+
+SchemaPayload contains an action enum and the associated action payload.  This
+allows for the action payload to be dispatched to the appropriate logic.
+
+Only the defined actions are available and only one action payload should be
+defined in the SchemaPayload.
+
+```
+message SchemaPayload {
+    enum Actions {
+        UNSET_ACTION = 0;
+        SCHEMA_CREATE = 1;
+        SCHEMA_UPDATE = 2;
+    }
+
+    Action action = 1;
+
+    SchemaCreateAction schema_create = 2;
+    SchemaUpdateAction schema_update = 3
+}
+```
+
+#### SchemaCreateAction
+
+SchemaCreateAction adds a new Schema to state. 
+
+```
+message SchemaCreateAction {
+    string schema_name = 1;
+    string description = 2;
+    repeated PropertyDefinition properties = 10;
+}
+```
+
+The action is validated according to the following rules:
+
+- If a Schema already exists with this name or the name is an empty string, the
+  transaction is invalid.
+- If the property list is empty, the transaction is invalid.
+- The signer of the transaction must be an agent in Pike state and must belong
+  to an organization in Pike state, otherwise the transaction is invalid.
+- The agent must have the permission `can_create_schema` for the organization,
+  otherwise the transaction is invalid.  
+
+The schema is created with the provided fields, in addition to the Pike
+organization ID as the `owner_id`. The schema is then stored in state,
+
+The inputs for SchemaCreateAction must include:
+
+- Address of the Agent submitting the transaction
+- Address of the Schema
+  
+The outputs for SchemaCreateAction must include:
+
+- Address of the Schema  
+
+#### SchemaUpdateAction
+
+SchemaUpdateAction updates a Schema to state. This update only adds new
+Properties to the Schema.
+
+```
+message SchemaUpdateAction {
+    string schema_name = 1;
+    repeated PropertyDefinition properties = 2;
+}
+```",599,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267907308,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267907308,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,Do we need a SchemaList to handle (the very unlikely) hash collision?,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-21 19:40:19,267926554,"@@ -0,0 +1,672 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+### Locations
+
+Locations are represented as a pre-defined struct made up of a latitude,
+longitude pair.  Both latitude and longitude are represented as signed integers
+indicated millionths of degrees.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+        LOCATION = 7;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {",156,2019-03-21 19:53:51,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267926554,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267926554,agunde406
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,Added.,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-21 19:54:30,267931338,"@@ -0,0 +1,672 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+### Locations
+
+Locations are represented as a pre-defined struct made up of a latitude,
+longitude pair.  Both latitude and longitude are represented as signed integers
+indicated millionths of degrees.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+        LOCATION = 7;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {",156,2019-03-21 19:54:30,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/267931338,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r267931338,peterschwarz
https://github.com/hyperledger/grid-rfcs/pull/4,https://github.com/hyperledger/grid-rfcs/pull/4,My bias is to remove `LOCATION` under this same logic and also because there's more to location than just LAT/LONG.  If we rename to LAT_LONG or something then I would cede.,32672924b2cabb306fcaa626c5003666672a2c81,2019-03-28 03:59:04,269849954,"@@ -0,0 +1,618 @@
+- Feature Name: Primitives
+- Start Date: TBD
+- RFC PR: TBD
+
+# Summary
+[summary]: #summary
+
+Grid Primitives for Hyperledger Grid provides a reusable, standard approach to
+defining, storing, and consuming properties within smart contracts, software
+libraries, and network-based APIs.
+
+# Motivation
+[motivation]: #motivation
+
+Several components within Grid will store and retrieve properties which are
+defined at runtime. To properly store and validate these properties, we need
+property definitions which minimally include the property’s type (integer,
+string, enum, etc.). In addition, the properties (for example, product
+description, GPS location, or product dimensions) should always be stored and
+exchanged using the same format within Grid components.
+
+# Guide-Level Explanation
+[guide-level-explanation]: #guide-level-explanation
+
+## PropertyDefinition
+
+A property is defined using a `PropertyDefinition` which includes the following:
+
+- Data type (one of: BYTES, BOOLEAN, NUMBER, STRING, ENUM, STRUCT, LOCATION)
+- Name
+- Type description
+- Optionality (whether or not the field is required)
+
+## Data types
+
+### Bytes
+
+A Bytes data type is an array of raw bytes.  This can be used to store
+arbitrary, opaque data. For example, a property with the Bytes data type could
+be used to store serialized JSON objects containing application metadata for a
+field, such as an image URL or style name.
+
+### Booleans
+
+A boolean data type restricts a value to True and False. Though boolean types
+could be stored in other integer (or byte) types using 0 or 1, an explicit
+boolean type assists in capturing intent and restricting the value.
+
+### Strings
+
+A string data type contains a standard UTF-8 encoded string value.
+
+### Numbers
+
+Numbers are represented as an integer with a given precision.  This can be
+thought of as akin to scientific notation. An instance of a number with this
+property definition is represented as a value (the significand) with the
+exponent (the order of magnitude) defined in the schema itself. So for example:
+
+```
+(value: 24, exponent: 3)  -> 24 * 10^3  -> 24000
+(value: 24, exponent: -3) -> 24 * 10^-3 -> 0.024
+(value: 24, exponent: 0)  -> 24 * 10^0  -> 24
+```
+
+Importantly, this exponent will be set on a Property's schema, not when the
+value is actually input. It will affect the semantic meaning of integers stored
+under a Property, not any of the actual operations done with them. Properties
+with an exponent of 3 or -3 will always be expressed as a whole integer of
+thousands or thousandths. For this reason, the exponent should be thought of
+more as a unit of measure than as true scientific notation. 
+
+Standard integers are represented with the exponent set to zero. 
+
+### Enums
+
+An enum data type restricts values to a limited set of possible values. The
+definition for this data type includes a list of strings names describing a
+possible state of the enum. 
+
+### Structs
+
+A struct is a recursively defined collection of other named properties that
+represents two or more intrinsically linked values, like X/Y coordinates or RGB
+colors. These values can be of any Supply Chain data type, including STRUCT,
+allowing nesting to an arbitrary depth. Although versatile and powerful, structs
+are heavyweight and should be used conservatively; restrict struct use to
+linking values that must always be updated together. The transaction processor
+will enforce this usage, rejecting any transactions that do not have a value for
+every property in a struct.
+
+Note that although structs are built using a list of PropertyDefinitions, any
+nested use of the required property is meaningless and will be rejected by the
+transaction processor. As Properties are set in their entirety, either all of
+the struct is required or none of it is. In other words, partial structs are not
+allowed.
+
+## Schemas
+
+Property definitions are collected into a Schema data type, which defines all
+the possible properties for an item that belongs to a given schema.  These
+schemas include the following:
+
+- a name
+- a description
+- an owner
+- a list of `PropertyDefinitions`
+
+Schemas are used to validate a collection of property values defined in a data
+structure.
+
+# Reference-level explanation
+[reference-level-explanation]: #reference-level-explanation
+
+A schema and its property definitions are stored in state in the protobuf
+message format.  These messages are defined as follows:
+
+```
+message PropertyDefinition {
+    enum DataType {
+        UNSET_DATA_TYPE = 0;
+        BYTES = 1;
+        BOOLEAN = 2;
+        NUMBER = 3;
+        STRING = 4;
+        ENUM = 5;
+        STRUCT = 6;
+    }
+
+    // The name of the property
+    string name = 1;
+    // The data type of the value; must not be set to UNSET_DATA_TYPE.
+    DataType data_type = 2;
+    // Indicates that this is a required property in the Schema
+    bool required = 3;
+    // An optional description of the field.
+    string description = 4;
+
+    // The exponent for a NUMBER property
+    sint32 number_exponent = 10;
+    // The list of values for an ENUM property; must not be empty/ for
+    // properties of that type.
+    repeated string enum_options = 11;
+    // The list of property definitions for a STRUCT property; must  not be
+    // empty for properties of that type.
+    repeated PropertyDefinition struct_properties = 12;
+}
+
+message Schema {
+    // The name of the Schema.  This is also the unique identifier for the
+    // Schema.
+    string name = 1;
+    // An optional description of the schema.
+    string description = 2;
+    // The Pike organization that has rights to modify the schema.
+    string owner = 3;
+
+    // The property definitions that make up the Schema; must not be empty.
+    repeated PropertyDefinition properties = 10;
+}
+
+message PropertyValue {
+    // The name of the property value.  Used to validate the property against a
+    // Schema.
+    string name = 1;
+    // The data type of the property.  Indicates which value field the actual
+    // value may be found.  Must not be set to `UNSET_DATA_TYPE`.
+    PropertyDefinition.DataType data_type = 2;
+
+    // The value fields for the possible data types.  Only one of these will
+    // contain a value, determined by the value of `data_type`
+    bytes bytes_value = 10;
+    bool boolean_value = 11;
+    sint64 number_value = 12;
+    string string_value = 13;
+    uint32 enum_value = 14;
+    repeated PropertyValue struct_values = 15;
+}
+```
+
+## Property Examples
+
+The following examples show how these property definitions and instance values
+would be constructed using the above protobuf messages.  The examples use a
+Python-like syntax.
+
+### Bytes
+
+A bytes value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""user_data"",
+    data_type=PropertyDefinition.DataType.Bytes,
+    description=""Arbitrary serialized user data.""
+)
+```
+
+Because this is a protobuf message, the default value for this field is an empty
+byte array.
+
+### Boolean
+
+A boolean value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    required=True,
+    description=""Indicates that the containing struct is enabled.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""is_enabled"",
+    data_type=PropertyDefinition.DataType.BOOLEAN,
+    boolean_value=True
+)
+```
+
+Because this is a protobuf message, the default value for this field is `False`.
+
+### String
+
+A UTF-8 string value would be represented as follows:
+
+```
+PropertyDefinition(
+    name=""title"",
+    data_type=PropertyDefinition.DataType.STRING,
+    required=True,
+    description=""A blog post title.""
+)
+```
+
+The value would be represented as:
+
+```
+PropertyValue(
+    name=""title""
+    data_type=PropertyDefinition.DataType.STRING,
+    string_value=""My Very Nice Blog Example""
+)
+```
+
+Because this is a protobuf message, the default value for this field is the
+empty string.
+
+### Number
+
+An integer value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=0,
+    required=True,
+    description=""The count of values in this container""
+)
+```
+
+This example shows an instance of a quantity of 23:
+
+```
+PropertyValue(
+    name=""quantity"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_value=23,
+)
+```
+
+A fractional value would be represented as the following type:
+
+```
+PropertyDefinition(
+    name=""price"",
+    data_type=PropertyDefinition.DataType.NUMBER,
+    number_exponent=-2,
+    required=True,
+    description=""The the price this object""
+)
+
+```
+
+This example shows an instance of a price with the value $0.23:",309,2019-03-28 03:59:04,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/269849954,https://github.com/hyperledger/grid-rfcs/pull/4#discussion_r269849954,davececchi
https://github.com/hyperledger/grid-rfcs/pull/3,https://github.com/hyperledger/grid-rfcs/pull/3,"Use the full, official name ""Hyperledger Grid"".

- My recommendation: s/Grid/Hyperledger Grid/g

- Or say ""Hyperledger Grid"" the first time it's used in a heading (line 4)  and in the boilerplate text (line 20).",8fff9a2d549351ddd445238f42269e49b5158e36,2019-03-12 21:00:07,264882259,"@@ -0,0 +1,103 @@
+- Feature Name: (fill me in with a unique identifier, my_awesome_feature)
+- Start Date: (fill me in with today's date, YYYY-MM-DD)
+- RFC PR: (leave this empty)
+- Grid Issue: (leave this empty)",,2019-03-12 22:15:41,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/264882259,https://github.com/hyperledger/grid-rfcs/pull/3#discussion_r264882259,chenette
https://github.com/hyperledger/grid-rfcs/pull/3,https://github.com/hyperledger/grid-rfcs/pull/3,"I changed it in the header (since that text will be in the final RFC output), but not later in the document since this document is not introducing Grid and thus the informal use is clearer (because it is brief).",8fff9a2d549351ddd445238f42269e49b5158e36,2019-03-12 22:17:08,264906732,"@@ -0,0 +1,103 @@
+- Feature Name: (fill me in with a unique identifier, my_awesome_feature)
+- Start Date: (fill me in with today's date, YYYY-MM-DD)
+- RFC PR: (leave this empty)
+- Grid Issue: (leave this empty)",,2019-03-12 22:17:08,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/264906732,https://github.com/hyperledger/grid-rfcs/pull/3#discussion_r264906732,vaporos
https://github.com/hyperledger/grid-rfcs/pull/2,https://github.com/hyperledger/grid-rfcs/pull/2,Can we remove this temporary information so we don't need a follow-up PR?,3467c713b19b6b9b4da8b408f3e75937b2770545,2019-03-12 18:52:06,264834068,"@@ -1 +1,263 @@
-# grid-rfcs
\ No newline at end of file
+# Hyperledger Grid RFCs
+[Hyperledger Grid RFCs]: #grid-rfcs
+
+The grid-rfcs repository contains feature proposal RFCs (requests for comments)
+for [Hyperledger Grid](https://grid.hyperledger.org).
+
+This README file describes the process for submitting, reviewing, and approving
+an RFC for the [grid](https://github.com/hyperledger/grid) repository. Use the
+same process to propose changes to the RFC process in
+[this repository](https://github.com/hyperledger/grid-rfcs).
+
+## Introduction
+[Introduction]: #introduction
+
+Many changes, including bug fixes and documentation improvements can be
+implemented and reviewed via the normal GitHub pull request workflow.
+
+Some changes though are ""substantial"", and we ask that these be put through a
+bit of a design process and produce a consensus among the Hyperledger Grid
+community and the Grid root team and relevant [subteams].
+
+The ""RFC"" (request for comments) process is intended to provide a consistent
+and controlled path for major changes to enter Hyperledger Grid, so that all
+stakeholders can be confident about how Hyperledger Grid is evolving.
+
+This process is intended to be substantially similar to the Rust RFC process,
+customized as necessary for use with Hyperledger Grid. The README.md and
+0000-template.md were initially forked from [Rust
+RFCs](https://github.com/rust-lang/rfcs).
+
+
+## Table of Contents
+[Table of Contents]: #table-of-contents
+
+  - [Opening](#grid-rfcs)
+  - [Introduction]
+  - [When you need to follow this process]
+  - [Before creating an RFC]
+  - [What the process is]
+  - [The RFC life-cycle]
+  - [Reviewing RFCs]
+  - [Implementing an RFC]
+  - [Help this is all too informal!]
+  - [License]
+
+
+## When you need to follow this process
+[When you need to follow this process]: #when-you-need-to-follow-this-process
+
+You need to follow this process if you intend to make ""substantial"" changes to
+Hyperledger Grid or any of its sub-components, including (but not limited to)
+[Grid](https://github.com/hyperledger/grid) and the
+RFC process itself. What constitutes a ""substantial"" change is evolving based
+on community norms and varies depending
+on what part of the ecosystem you are proposing to change, but may include the
+following:
+
+  - Architectural changes
+  - Substantial changes to component interfaces
+  - New features
+  - Backward-incompatible changes
+  - Changes that affect the security of communications or administration
+
+Some changes do not require an RFC:
+
+  - Rephrasing, reorganizing, refactoring, or otherwise ""changing shape that
+    does not change meaning"".
+  - Additions that strictly improve objective, numerical quality criteria
+    (warning removal, speedup, better platform coverage, more parallelism, trap
+    more errors, etc.)
+
+If you submit a pull request to implement a new feature without going through
+the RFC process, it may be closed with a polite request to submit an RFC first.
+
+
+### Subteam-specific guidelines
+[Subteam-specific guidelines]: #subteam-specific-guidelines
+[subteam]: #subteam
+[subteams]: #subteams
+
+Currently, the Grid root team handles all RFCs for Hyperledger Grid. In the",,2019-03-12 20:06:22,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/264834068,https://github.com/hyperledger/grid-rfcs/pull/2#discussion_r264834068,vaporos
https://github.com/hyperledger/grid-rfcs/pull/2,https://github.com/hyperledger/grid-rfcs/pull/2,This line should be wrapped <80 characters.,3467c713b19b6b9b4da8b408f3e75937b2770545,2019-03-12 19:01:28,264837971,"@@ -1 +1,263 @@
-# grid-rfcs
\ No newline at end of file
+# Hyperledger Grid RFCs
+[Hyperledger Grid RFCs]: #grid-rfcs
+
+The grid-rfcs repository contains feature proposal RFCs (requests for comments)
+for [Hyperledger Grid](https://grid.hyperledger.org).
+
+This README file describes the process for submitting, reviewing, and approving
+an RFC for the [grid](https://github.com/hyperledger/grid) repository. Use the
+same process to propose changes to the RFC process in
+[this repository](https://github.com/hyperledger/grid-rfcs).
+
+## Introduction
+[Introduction]: #introduction
+
+Many changes, including bug fixes and documentation improvements can be
+implemented and reviewed via the normal GitHub pull request workflow.
+
+Some changes though are ""substantial"", and we ask that these be put through a
+bit of a design process and produce a consensus among the Hyperledger Grid
+community and the Grid root team and relevant [subteams].
+
+The ""RFC"" (request for comments) process is intended to provide a consistent
+and controlled path for major changes to enter Hyperledger Grid, so that all
+stakeholders can be confident about how Hyperledger Grid is evolving.
+
+This process is intended to be substantially similar to the Rust RFC process,
+customized as necessary for use with Hyperledger Grid. The README.md and
+0000-template.md were initially forked from [Rust
+RFCs](https://github.com/rust-lang/rfcs).
+
+
+## Table of Contents
+[Table of Contents]: #table-of-contents
+
+  - [Opening](#grid-rfcs)
+  - [Introduction]
+  - [When you need to follow this process]
+  - [Before creating an RFC]
+  - [What the process is]
+  - [The RFC life-cycle]
+  - [Reviewing RFCs]
+  - [Implementing an RFC]
+  - [Help this is all too informal!]
+  - [License]
+
+
+## When you need to follow this process
+[When you need to follow this process]: #when-you-need-to-follow-this-process
+
+You need to follow this process if you intend to make ""substantial"" changes to
+Hyperledger Grid or any of its sub-components, including (but not limited to)
+[Grid](https://github.com/hyperledger/grid) and the
+RFC process itself. What constitutes a ""substantial"" change is evolving based
+on community norms and varies depending
+on what part of the ecosystem you are proposing to change, but may include the
+following:
+
+  - Architectural changes
+  - Substantial changes to component interfaces
+  - New features
+  - Backward-incompatible changes
+  - Changes that affect the security of communications or administration
+
+Some changes do not require an RFC:
+
+  - Rephrasing, reorganizing, refactoring, or otherwise ""changing shape that
+    does not change meaning"".
+  - Additions that strictly improve objective, numerical quality criteria
+    (warning removal, speedup, better platform coverage, more parallelism, trap
+    more errors, etc.)
+
+If you submit a pull request to implement a new feature without going through
+the RFC process, it may be closed with a polite request to submit an RFC first.
+
+
+### Subteam-specific guidelines
+[Subteam-specific guidelines]: #subteam-specific-guidelines
+[subteam]: #subteam
+[subteams]: #subteams
+
+Currently, the Grid root team handles all RFCs for Hyperledger Grid. In the
+future, subteams can be created to handle RFCs for specific areas. A grid-rfcs
+can propose creating a subteam; the Grid root team must approve the RFC.
+
+After the RFC is approved and merged, a `subteam/{name}.md` file will list the
+subteam members and a link to the subteam will be added to this section.
+
+
+## Before creating an RFC
+[Before creating an RFC]: #before-creating-an-rfc
+
+A hastily proposed RFC can hurt its chances of acceptance. Low quality
+proposals, proposals for previously-rejected changes, and those that don't fit
+into the near-term roadmap may be quickly rejected, which can be demotivating
+for the unprepared contributor. Laying some groundwork ahead of the RFC can
+make the process smoother.
+
+Although there is no single way to prepare for submitting an RFC, it is
+generally a good idea to pursue feedback from other project developers
+beforehand, to ascertain that the RFC may be desirable; having a consistent
+impact on the project requires concerted effort toward consensus-building.
+
+The most common preparations for writing and submitting an RFC include talking
+the idea over on the Grid developer discussion forum, [#grid], and proposing
+ideas to the [Hyperledger Grid mailing list].
+
+As a rule of thumb, receiving encouraging feedback from long-standing project
+developers, particularly maintainers or members of the relevant team, is a
+good indication that the RFC is worth pursuing.
+
+
+## What the process is
+[What the process is]: #what-the-process-is
+
+In short, to get a major feature added to Hyperledger Grid, you must start by
+adding an RFC in markdown format as a pull request for this repository. The RFC
+is discussed and changed as necessary. When approved, the RFC is merged into the
+RFC repository. At that point, the RFC is ""active"" and may be implemented with
+the goal of eventually adding the new feature to Hyperledger Grid.
+
+  - Fork the [grid-rfcs repository](https://github.com/hyperledger/grid-rfcs).
+  - Copy `0000-template.md` to `text/0000-my-feature.md` (where ""my-feature"" is
+    descriptive). Don't assign an RFC number yet (leave `0000` in the name).
+  - If the RFC has supporting images or diagram files, also create a folder
+    called `0000-my-feature` and put them there.
+  - Fill in the RFC. Put care into the details: RFCs that do not present
+    convincing motivation, do not demonstrate understanding of the impact
+    of the design, or are disingenuous about the drawbacks or alternatives tend
+    to be poorly received.
+  - Submit a pull request. As a pull request, the RFC will receive design
+    feedback from the larger community, and the author should be prepared to
+    revise it in response.
+  - Build consensus and integrate feedback. RFCs that have broad support are
+    much more likely to make progress than those that don't receive any
+    comments. Feel free to reach out to the RFC assignee in particular to get
+    help identifying stakeholders and obstacles.
+  - The root team or relevant subteam will discuss the RFC pull request, as much
+    as possible, in the
+    comment thread of the pull request itself. Offline discussion will be
+    summarized on the pull request comment thread.
+  - RFCs rarely go through this process unchanged, especially as alternatives
+    and drawbacks are shown. You can make edits, big and small, to the RFC to
+    clarify or change the design, but make changes as new commits to the pull
+    request and leave a comment on the pull request explaining your changes.
+    Specifically, do not squash or rebase commits after they are visible on the
+    pull request.
+  - At some point, a member of the team will propose a ""motion
+    for final comment period"" (FCP), along with a *disposition* for the RFC
+    (merge, close, or postpone).
+    - This step is taken when enough of the tradeoffs have been discussed that
+    the team is in a position to make a decision. That does not require
+    consensus amongst all participants in the RFC thread (which is usually
+    impossible). However, the argument supporting the disposition on the RFC
+    needs to have already been clearly articulated, and there should not be a
+    strong consensus *against* that position outside of the team. Team
+    members use their best judgment in taking this step, and the FCP itself
+    ensures there is ample time and notification for stakeholders to push back
+    if it is made prematurely.
+    - For RFCs with lengthy discussion, the motion to FCP is usually preceded by
+      a *summary comment* trying to lay out the current state of the discussion
+      and major trade-offs/points of disagreement.
+    - Before actually entering FCP, **all** members of the team must sign off;
+    this is often the point at which some team members first review the RFC
+    in full depth.
+  - The FCP lasts one week, or seven calendar days. It is also advertised
+    widely (e.g., in the [Hyperledger Grid mailing list]). This
+    way, all stakeholders have a chance to lodge any final objections before
+    a decision is reached.
+  - In most cases, the FCP period is quiet, and the RFC is either merged or
+    closed. However, sometimes substantial new arguments or ideas are raised,
+    the FCP is canceled, and the RFC goes back into development mode.
+
+## The RFC life cycle
+[The RFC life cycle]: #the-rfc-life-cycle
+
+Once an RFC becomes ""active"", then authors may implement it and submit the
+change as a pull request to the appropriate Hyperledger Grid repo. Being
+""active"" is not a rubber stamp and, in particular, still does not mean the
+change will ultimately be merged; it does mean that, in principle, all the major
+stakeholders have agreed to the change and are amenable to merging it.
+
+Furthermore, the fact that a given RFC has been accepted and is ""active""
+implies nothing about what priority is assigned to its implementation, nor does
+it imply anything about whether a Hyperledger Grid developer has been assigned
+the task of implementing the feature. While it is not *necessary* that the
+author of the RFC also write the implementation, it is by far the most effective
+way to see an RFC through to completion: authors should not expect that other
+project developers will take on responsibility for implementing their accepted
+feature.
+
+Modifications to ""active"" RFCs can be done in follow-up pull requests. We
+strive to write each RFC in a manner that it will reflect the final design of
+the feature; but the nature of the process means that we cannot expect every
+merged RFC to actually reflect what the end result will be at the time of the
+next major release.
+
+In general, once accepted, an RFC should not be substantially changed. Only very
+minor changes should be submitted as amendments. More substantial changes
+should be new RFCs, with a note added to the original RFC. Exactly what counts
+as a ""very minor change"" is up to the root team or subteam to decide; check
+[Subteam-specific guidelines] for more details.
+
+
+## Reviewing RFCs
+[Reviewing RFCs]: #reviewing-rfcs
+
+While the RFC pull request is up, the root team or subteam may schedule meetings
+with the author and/or relevant stakeholders to discuss the issues in greater
+detail; in some cases, the topic may be discussed at a team meeting. In either
+case, a summary from the meeting will be posted back to the RFC pull request.
+
+The team makes final decisions about RFCs after the benefits and drawbacks
+are well understood. These decisions can be made at any time, but the team
+will regularly issue decisions. When a decision is made, the RFC pull request
+will either be merged or closed. In either case, if the reasoning is not clear
+from the discussion in thread, the team will add a comment describing the
+rationale for the decision.
+
+
+## Implementing an RFC
+[Implementing an RFC]: #implementing-an-rfc
+
+Some accepted RFCs represent vital changes that need to be implemented right
+away. Other accepted RFCs can represent changes that can wait until some
+arbitrary developer feels like doing the work. Every accepted RFC has an
+associated issue tracking its implementation in the Hyperledger Grid
+[JIRA issue tracker]; thus, that associated issue can be assigned a priority
+via the triage process that the team uses for all issues related to
+Hyperledger Grid.
+
+The author of an RFC is not obligated to implement it. Of course, the RFC
+author (like any other developer) is welcome to post an implementation for
+review after the RFC has been accepted.
+
+If you are interested in working on the implementation for an ""active"" RFC, but
+cannot determine if someone else is already working on it, feel free to ask
+(for example, by leaving a comment on the associated issue).
+
+
+## Help! This is all too informal!
+[Help this is all too informal!]: #help-this-is-all-too-informal
+
+The process is intended to be as lightweight as reasonable for the present
+circumstances. As usual, we are trying to let the process be driven by
+consensus and community norms, not impose more structure than necessary.
+
+[#grid]: https://chat.hyperledger.org/channel/grid
+[Hyperledger Grid mailing list]: https://lists.hyperledger.org/g/grid
+[JIRA issue tracker]: https://jira.hyperledger.org/projects/GRID/issues
+[RFC repository]: https://github.com/hyperledger/grid-rfcs
+
+
+## License
+[License]: #license
+
+This repository is licensed under Apache License, Version 2.0,
+([LICENSE](LICENSE) or
+http://www.apache.org/licenses/LICENSE-2.0)
+
+
+### Contributions
+
+Unless you explicitly state otherwise, any contribution intentionally submitted for inclusion in the work by you, as defined in the Apache-2.0 license, shall be licensed as above, without any additional terms or conditions.",,2019-03-12 20:06:22,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/264837971,https://github.com/hyperledger/grid-rfcs/pull/2#discussion_r264837971,vaporos
https://github.com/hyperledger/grid-rfcs/pull/2,https://github.com/hyperledger/grid-rfcs/pull/2,word wrap on this line and line 54 is weird,3467c713b19b6b9b4da8b408f3e75937b2770545,2019-03-12 19:12:51,264842311,"@@ -1 +1,263 @@
-# grid-rfcs
\ No newline at end of file
+# Hyperledger Grid RFCs
+[Hyperledger Grid RFCs]: #grid-rfcs
+
+The grid-rfcs repository contains feature proposal RFCs (requests for comments)
+for [Hyperledger Grid](https://grid.hyperledger.org).
+
+This README file describes the process for submitting, reviewing, and approving
+an RFC for the [grid](https://github.com/hyperledger/grid) repository. Use the
+same process to propose changes to the RFC process in
+[this repository](https://github.com/hyperledger/grid-rfcs).
+
+## Introduction
+[Introduction]: #introduction
+
+Many changes, including bug fixes and documentation improvements can be
+implemented and reviewed via the normal GitHub pull request workflow.
+
+Some changes though are ""substantial"", and we ask that these be put through a
+bit of a design process and produce a consensus among the Hyperledger Grid
+community and the Grid root team and relevant [subteams].
+
+The ""RFC"" (request for comments) process is intended to provide a consistent
+and controlled path for major changes to enter Hyperledger Grid, so that all
+stakeholders can be confident about how Hyperledger Grid is evolving.
+
+This process is intended to be substantially similar to the Rust RFC process,
+customized as necessary for use with Hyperledger Grid. The README.md and
+0000-template.md were initially forked from [Rust
+RFCs](https://github.com/rust-lang/rfcs).
+
+
+## Table of Contents
+[Table of Contents]: #table-of-contents
+
+  - [Opening](#grid-rfcs)
+  - [Introduction]
+  - [When you need to follow this process]
+  - [Before creating an RFC]
+  - [What the process is]
+  - [The RFC life-cycle]
+  - [Reviewing RFCs]
+  - [Implementing an RFC]
+  - [Help this is all too informal!]
+  - [License]
+
+
+## When you need to follow this process
+[When you need to follow this process]: #when-you-need-to-follow-this-process
+
+You need to follow this process if you intend to make ""substantial"" changes to
+Hyperledger Grid or any of its sub-components, including (but not limited to)
+[Grid](https://github.com/hyperledger/grid) and the",,2019-03-12 20:06:22,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/264842311,https://github.com/hyperledger/grid-rfcs/pull/2#discussion_r264842311,jsmitchell
https://github.com/hyperledger/grid-rfcs/pull/2,https://github.com/hyperledger/grid-rfcs/pull/2,weird wrapping,3467c713b19b6b9b4da8b408f3e75937b2770545,2019-03-12 19:16:25,264843572,"@@ -1 +1,263 @@
-# grid-rfcs
\ No newline at end of file
+# Hyperledger Grid RFCs
+[Hyperledger Grid RFCs]: #grid-rfcs
+
+The grid-rfcs repository contains feature proposal RFCs (requests for comments)
+for [Hyperledger Grid](https://grid.hyperledger.org).
+
+This README file describes the process for submitting, reviewing, and approving
+an RFC for the [grid](https://github.com/hyperledger/grid) repository. Use the
+same process to propose changes to the RFC process in
+[this repository](https://github.com/hyperledger/grid-rfcs).
+
+## Introduction
+[Introduction]: #introduction
+
+Many changes, including bug fixes and documentation improvements can be
+implemented and reviewed via the normal GitHub pull request workflow.
+
+Some changes though are ""substantial"", and we ask that these be put through a
+bit of a design process and produce a consensus among the Hyperledger Grid
+community and the Grid root team and relevant [subteams].
+
+The ""RFC"" (request for comments) process is intended to provide a consistent
+and controlled path for major changes to enter Hyperledger Grid, so that all
+stakeholders can be confident about how Hyperledger Grid is evolving.
+
+This process is intended to be substantially similar to the Rust RFC process,
+customized as necessary for use with Hyperledger Grid. The README.md and
+0000-template.md were initially forked from [Rust
+RFCs](https://github.com/rust-lang/rfcs).
+
+
+## Table of Contents
+[Table of Contents]: #table-of-contents
+
+  - [Opening](#grid-rfcs)
+  - [Introduction]
+  - [When you need to follow this process]
+  - [Before creating an RFC]
+  - [What the process is]
+  - [The RFC life-cycle]
+  - [Reviewing RFCs]
+  - [Implementing an RFC]
+  - [Help this is all too informal!]
+  - [License]
+
+
+## When you need to follow this process
+[When you need to follow this process]: #when-you-need-to-follow-this-process
+
+You need to follow this process if you intend to make ""substantial"" changes to
+Hyperledger Grid or any of its sub-components, including (but not limited to)
+[Grid](https://github.com/hyperledger/grid) and the
+RFC process itself. What constitutes a ""substantial"" change is evolving based
+on community norms and varies depending
+on what part of the ecosystem you are proposing to change, but may include the
+following:
+
+  - Architectural changes
+  - Substantial changes to component interfaces
+  - New features
+  - Backward-incompatible changes
+  - Changes that affect the security of communications or administration
+
+Some changes do not require an RFC:
+
+  - Rephrasing, reorganizing, refactoring, or otherwise ""changing shape that
+    does not change meaning"".
+  - Additions that strictly improve objective, numerical quality criteria
+    (warning removal, speedup, better platform coverage, more parallelism, trap
+    more errors, etc.)
+
+If you submit a pull request to implement a new feature without going through
+the RFC process, it may be closed with a polite request to submit an RFC first.
+
+
+### Subteam-specific guidelines
+[Subteam-specific guidelines]: #subteam-specific-guidelines
+[subteam]: #subteam
+[subteams]: #subteams
+
+Currently, the Grid root team handles all RFCs for Hyperledger Grid. In the
+future, subteams can be created to handle RFCs for specific areas. A grid-rfcs
+can propose creating a subteam; the Grid root team must approve the RFC.
+
+After the RFC is approved and merged, a `subteam/{name}.md` file will list the
+subteam members and a link to the subteam will be added to this section.
+
+
+## Before creating an RFC
+[Before creating an RFC]: #before-creating-an-rfc
+
+A hastily proposed RFC can hurt its chances of acceptance. Low quality
+proposals, proposals for previously-rejected changes, and those that don't fit
+into the near-term roadmap may be quickly rejected, which can be demotivating
+for the unprepared contributor. Laying some groundwork ahead of the RFC can
+make the process smoother.
+
+Although there is no single way to prepare for submitting an RFC, it is
+generally a good idea to pursue feedback from other project developers
+beforehand, to ascertain that the RFC may be desirable; having a consistent
+impact on the project requires concerted effort toward consensus-building.
+
+The most common preparations for writing and submitting an RFC include talking
+the idea over on the Grid developer discussion forum, [#grid], and proposing
+ideas to the [Hyperledger Grid mailing list].
+
+As a rule of thumb, receiving encouraging feedback from long-standing project
+developers, particularly maintainers or members of the relevant team, is a
+good indication that the RFC is worth pursuing.
+
+
+## What the process is
+[What the process is]: #what-the-process-is
+
+In short, to get a major feature added to Hyperledger Grid, you must start by
+adding an RFC in markdown format as a pull request for this repository. The RFC
+is discussed and changed as necessary. When approved, the RFC is merged into the
+RFC repository. At that point, the RFC is ""active"" and may be implemented with
+the goal of eventually adding the new feature to Hyperledger Grid.
+
+  - Fork the [grid-rfcs repository](https://github.com/hyperledger/grid-rfcs).
+  - Copy `0000-template.md` to `text/0000-my-feature.md` (where ""my-feature"" is
+    descriptive). Don't assign an RFC number yet (leave `0000` in the name).
+  - If the RFC has supporting images or diagram files, also create a folder
+    called `0000-my-feature` and put them there.
+  - Fill in the RFC. Put care into the details: RFCs that do not present
+    convincing motivation, do not demonstrate understanding of the impact
+    of the design, or are disingenuous about the drawbacks or alternatives tend
+    to be poorly received.
+  - Submit a pull request. As a pull request, the RFC will receive design
+    feedback from the larger community, and the author should be prepared to
+    revise it in response.
+  - Build consensus and integrate feedback. RFCs that have broad support are
+    much more likely to make progress than those that don't receive any
+    comments. Feel free to reach out to the RFC assignee in particular to get
+    help identifying stakeholders and obstacles.
+  - The root team or relevant subteam will discuss the RFC pull request, as much
+    as possible, in the",,2019-03-12 20:06:22,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/264843572,https://github.com/hyperledger/grid-rfcs/pull/2#discussion_r264843572,jsmitchell
https://github.com/hyperledger/grid-rfcs/pull/2,https://github.com/hyperledger/grid-rfcs/pull/2,weird wrapping,3467c713b19b6b9b4da8b408f3e75937b2770545,2019-03-12 19:16:50,264843733,"@@ -1 +1,263 @@
-# grid-rfcs
\ No newline at end of file
+# Hyperledger Grid RFCs
+[Hyperledger Grid RFCs]: #grid-rfcs
+
+The grid-rfcs repository contains feature proposal RFCs (requests for comments)
+for [Hyperledger Grid](https://grid.hyperledger.org).
+
+This README file describes the process for submitting, reviewing, and approving
+an RFC for the [grid](https://github.com/hyperledger/grid) repository. Use the
+same process to propose changes to the RFC process in
+[this repository](https://github.com/hyperledger/grid-rfcs).
+
+## Introduction
+[Introduction]: #introduction
+
+Many changes, including bug fixes and documentation improvements can be
+implemented and reviewed via the normal GitHub pull request workflow.
+
+Some changes though are ""substantial"", and we ask that these be put through a
+bit of a design process and produce a consensus among the Hyperledger Grid
+community and the Grid root team and relevant [subteams].
+
+The ""RFC"" (request for comments) process is intended to provide a consistent
+and controlled path for major changes to enter Hyperledger Grid, so that all
+stakeholders can be confident about how Hyperledger Grid is evolving.
+
+This process is intended to be substantially similar to the Rust RFC process,
+customized as necessary for use with Hyperledger Grid. The README.md and
+0000-template.md were initially forked from [Rust
+RFCs](https://github.com/rust-lang/rfcs).
+
+
+## Table of Contents
+[Table of Contents]: #table-of-contents
+
+  - [Opening](#grid-rfcs)
+  - [Introduction]
+  - [When you need to follow this process]
+  - [Before creating an RFC]
+  - [What the process is]
+  - [The RFC life-cycle]
+  - [Reviewing RFCs]
+  - [Implementing an RFC]
+  - [Help this is all too informal!]
+  - [License]
+
+
+## When you need to follow this process
+[When you need to follow this process]: #when-you-need-to-follow-this-process
+
+You need to follow this process if you intend to make ""substantial"" changes to
+Hyperledger Grid or any of its sub-components, including (but not limited to)
+[Grid](https://github.com/hyperledger/grid) and the
+RFC process itself. What constitutes a ""substantial"" change is evolving based
+on community norms and varies depending
+on what part of the ecosystem you are proposing to change, but may include the
+following:
+
+  - Architectural changes
+  - Substantial changes to component interfaces
+  - New features
+  - Backward-incompatible changes
+  - Changes that affect the security of communications or administration
+
+Some changes do not require an RFC:
+
+  - Rephrasing, reorganizing, refactoring, or otherwise ""changing shape that
+    does not change meaning"".
+  - Additions that strictly improve objective, numerical quality criteria
+    (warning removal, speedup, better platform coverage, more parallelism, trap
+    more errors, etc.)
+
+If you submit a pull request to implement a new feature without going through
+the RFC process, it may be closed with a polite request to submit an RFC first.
+
+
+### Subteam-specific guidelines
+[Subteam-specific guidelines]: #subteam-specific-guidelines
+[subteam]: #subteam
+[subteams]: #subteams
+
+Currently, the Grid root team handles all RFCs for Hyperledger Grid. In the
+future, subteams can be created to handle RFCs for specific areas. A grid-rfcs
+can propose creating a subteam; the Grid root team must approve the RFC.
+
+After the RFC is approved and merged, a `subteam/{name}.md` file will list the
+subteam members and a link to the subteam will be added to this section.
+
+
+## Before creating an RFC
+[Before creating an RFC]: #before-creating-an-rfc
+
+A hastily proposed RFC can hurt its chances of acceptance. Low quality
+proposals, proposals for previously-rejected changes, and those that don't fit
+into the near-term roadmap may be quickly rejected, which can be demotivating
+for the unprepared contributor. Laying some groundwork ahead of the RFC can
+make the process smoother.
+
+Although there is no single way to prepare for submitting an RFC, it is
+generally a good idea to pursue feedback from other project developers
+beforehand, to ascertain that the RFC may be desirable; having a consistent
+impact on the project requires concerted effort toward consensus-building.
+
+The most common preparations for writing and submitting an RFC include talking
+the idea over on the Grid developer discussion forum, [#grid], and proposing
+ideas to the [Hyperledger Grid mailing list].
+
+As a rule of thumb, receiving encouraging feedback from long-standing project
+developers, particularly maintainers or members of the relevant team, is a
+good indication that the RFC is worth pursuing.
+
+
+## What the process is
+[What the process is]: #what-the-process-is
+
+In short, to get a major feature added to Hyperledger Grid, you must start by
+adding an RFC in markdown format as a pull request for this repository. The RFC
+is discussed and changed as necessary. When approved, the RFC is merged into the
+RFC repository. At that point, the RFC is ""active"" and may be implemented with
+the goal of eventually adding the new feature to Hyperledger Grid.
+
+  - Fork the [grid-rfcs repository](https://github.com/hyperledger/grid-rfcs).
+  - Copy `0000-template.md` to `text/0000-my-feature.md` (where ""my-feature"" is
+    descriptive). Don't assign an RFC number yet (leave `0000` in the name).
+  - If the RFC has supporting images or diagram files, also create a folder
+    called `0000-my-feature` and put them there.
+  - Fill in the RFC. Put care into the details: RFCs that do not present
+    convincing motivation, do not demonstrate understanding of the impact
+    of the design, or are disingenuous about the drawbacks or alternatives tend
+    to be poorly received.
+  - Submit a pull request. As a pull request, the RFC will receive design
+    feedback from the larger community, and the author should be prepared to
+    revise it in response.
+  - Build consensus and integrate feedback. RFCs that have broad support are
+    much more likely to make progress than those that don't receive any
+    comments. Feel free to reach out to the RFC assignee in particular to get
+    help identifying stakeholders and obstacles.
+  - The root team or relevant subteam will discuss the RFC pull request, as much
+    as possible, in the
+    comment thread of the pull request itself. Offline discussion will be
+    summarized on the pull request comment thread.
+  - RFCs rarely go through this process unchanged, especially as alternatives
+    and drawbacks are shown. You can make edits, big and small, to the RFC to
+    clarify or change the design, but make changes as new commits to the pull
+    request and leave a comment on the pull request explaining your changes.
+    Specifically, do not squash or rebase commits after they are visible on the
+    pull request.
+  - At some point, a member of the team will propose a ""motion",146,2019-03-12 20:06:22,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/264843733,https://github.com/hyperledger/grid-rfcs/pull/2#discussion_r264843733,jsmitchell
https://github.com/hyperledger/grid-rfcs/pull/2,https://github.com/hyperledger/grid-rfcs/pull/2,"Replaced ""currently"" text with a more permanent description (I hope).",3467c713b19b6b9b4da8b408f3e75937b2770545,2019-03-12 20:09:21,264862462,"@@ -1 +1,263 @@
-# grid-rfcs
\ No newline at end of file
+# Hyperledger Grid RFCs
+[Hyperledger Grid RFCs]: #grid-rfcs
+
+The grid-rfcs repository contains feature proposal RFCs (requests for comments)
+for [Hyperledger Grid](https://grid.hyperledger.org).
+
+This README file describes the process for submitting, reviewing, and approving
+an RFC for the [grid](https://github.com/hyperledger/grid) repository. Use the
+same process to propose changes to the RFC process in
+[this repository](https://github.com/hyperledger/grid-rfcs).
+
+## Introduction
+[Introduction]: #introduction
+
+Many changes, including bug fixes and documentation improvements can be
+implemented and reviewed via the normal GitHub pull request workflow.
+
+Some changes though are ""substantial"", and we ask that these be put through a
+bit of a design process and produce a consensus among the Hyperledger Grid
+community and the Grid root team and relevant [subteams].
+
+The ""RFC"" (request for comments) process is intended to provide a consistent
+and controlled path for major changes to enter Hyperledger Grid, so that all
+stakeholders can be confident about how Hyperledger Grid is evolving.
+
+This process is intended to be substantially similar to the Rust RFC process,
+customized as necessary for use with Hyperledger Grid. The README.md and
+0000-template.md were initially forked from [Rust
+RFCs](https://github.com/rust-lang/rfcs).
+
+
+## Table of Contents
+[Table of Contents]: #table-of-contents
+
+  - [Opening](#grid-rfcs)
+  - [Introduction]
+  - [When you need to follow this process]
+  - [Before creating an RFC]
+  - [What the process is]
+  - [The RFC life-cycle]
+  - [Reviewing RFCs]
+  - [Implementing an RFC]
+  - [Help this is all too informal!]
+  - [License]
+
+
+## When you need to follow this process
+[When you need to follow this process]: #when-you-need-to-follow-this-process
+
+You need to follow this process if you intend to make ""substantial"" changes to
+Hyperledger Grid or any of its sub-components, including (but not limited to)
+[Grid](https://github.com/hyperledger/grid) and the
+RFC process itself. What constitutes a ""substantial"" change is evolving based
+on community norms and varies depending
+on what part of the ecosystem you are proposing to change, but may include the
+following:
+
+  - Architectural changes
+  - Substantial changes to component interfaces
+  - New features
+  - Backward-incompatible changes
+  - Changes that affect the security of communications or administration
+
+Some changes do not require an RFC:
+
+  - Rephrasing, reorganizing, refactoring, or otherwise ""changing shape that
+    does not change meaning"".
+  - Additions that strictly improve objective, numerical quality criteria
+    (warning removal, speedup, better platform coverage, more parallelism, trap
+    more errors, etc.)
+
+If you submit a pull request to implement a new feature without going through
+the RFC process, it may be closed with a polite request to submit an RFC first.
+
+
+### Subteam-specific guidelines
+[Subteam-specific guidelines]: #subteam-specific-guidelines
+[subteam]: #subteam
+[subteams]: #subteams
+
+Currently, the Grid root team handles all RFCs for Hyperledger Grid. In the",,2019-03-12 20:09:22,https://api.github.com/repos/hyperledger/grid-rfcs/pulls/comments/264862462,https://github.com/hyperledger/grid-rfcs/pull/2#discussion_r264862462,chenette
