url issues,url_api comment,url_html comment,user create comment,body,created_at,updated_at
https://api.github.com/repos/hyperledger/iroha-python/issues/23,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/334687655,https://github.com/hyperledger/iroha-python/pull/23#issuecomment-334687655,CLAassistant,[![CLA assistant check](https://cla-assistant.io/pull/badge/signed)](https://cla-assistant.io/hyperledger/iroha-python?pullRequest=23) <br/>All committers have signed the CLA.,2017-10-06 08:06:41,2017-10-06 08:07:15
https://api.github.com/repos/hyperledger/iroha-python/issues/22,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/336473032,https://github.com/hyperledger/iroha-python/pull/22#issuecomment-336473032,Warchant,"- use pep8 to format code
- do not put in the library code which is ""for future versions"", this is confusing. You  do not know how it will work in future, nobody knows.
- do not use C library with own bindings. Cryptographic library is very essential part of any blockchain. Any mistake may lead to money loss. It is likely that we will change `ed25519` implementation which is currently in iroha, because it is bad. Use existing bindings for ed25519. Cryptographic algorithm does not depend on the implementation.
- do not create pull requests which are 10k lines long. It took me 2 hours to **briefly** look at the code.  Deep analysis will take days of even more. 
- avoid magic numbers, such as for UINT64_NUMBER. If you need to write `2**64`, write `1 << 64` or `2**64`, not the number itself. It is much more concise and clear.
- do not push to the codebase libraries, which may likely to be changed (the code of ed25519 itself). You could have used git submodules to import ed25519's code. 
- please, use static analyzers, such as `sonar` (we have one at https://sonar.soramitsu.co.jp).
- write meaningful names and description in commits. (`This is my commit message`)
- do not rush with this library. I can definitely say that most of the code from this PR will not be used. We are going to write C++ client library in this+next sprint (2-3 weeks). Then, you may want to write python bindings for that libray. This is the only way.  

If you want to help -- you  should ask @neewy to define clear tasks for you, you should use board (jira). Otherwise it is very hard to understand what is going on in the team and in the project. Nobody wants to work in chaos.

---

Reviewed 68 of 117 files at r1, 41 of 50 files at r2.
Review status: all files reviewed at latest revision, 18 unresolved discussions.

---

*[docs/iroha.helper.rst, line 1 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwKsLO2ISwor-u0nWhy:-KwKsLO3JvrtCkgRex-r:b-ysllf2) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/docs/iroha.helper.rst#L1)):*
> ```reStructuredText
> iroha\.helper package
> ```

Is this autogenerated file?

---

*[example/example_iroha_python.py, line 29 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwKtSuZWHex71Eut5xN:-KwKtSu_1ro-8vyVPlfR:b-13goai) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/example/example_iroha_python.py#L29)):*
> ```Python
>         account_name = ""sinkai"",
>         domain_id = ""jump.com"",
>         main_pubkey = keypairs[0].public_key,
> ```

As far as I know, we don't have the term `main` pubkey. All pubkeys are equal.

---

*[example/example_iroha_python.py, line 40 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwKth3V9MArENFB6KBL:-KwKth3V9MArENFB6KBM:boyy8bo) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/example/example_iroha_python.py#L40)):*
> ```Python
> 
> # Issue tx1 Transaction
> tx1.issue()
> ```

the word `issue` has many meanings. Rename to `send`.

---

*[iroha/creator.py, line 11 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwKubWDdbBd-C0PGaTV:-KwKubWDdbBd-C0PGaTW:bqy0oqy) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/creator.py#L11)):*
> ```Python
> from iroha.query.query import Query
> 
> class Creator:
> ```

Maybe it is not clear from the classname what is the purpose of this class. Rename to `Account`.

---

*[iroha/helper/ed25519.py, line 6 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwKyY5_DdKdDkgNu1_0:-KwKyY5_DdKdDkgNu1_1:b310ghj) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/helper/ed25519.py#L6)):*
> ```Python
> 
> me = os.path.abspath(os.path.dirname(__file__))
> libed2559 = cdll.LoadLibrary(os.path.join(me, ""../lib/ed25519/lib/libed25519.so""))
> ```

I am not sure if this is good idea to do this. 
1. so -- is only for Linux.
2. if it is compiled on amd64 arch, then I can not use it on i386

Why did you select to use that creepy C library instead of using nice existing python's ed25519?

---

*[iroha/helper/ed25519.py, line 118 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwL-HTiWE1GD6Dng285:-KwL-HTiWE1GD6Dng286:b-v36mty) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/helper/ed25519.py#L118)):*
> ```Python
> 
> 
> def verify(message, signature, public):
> ```

why do you have 2 same functions: `verify` and `verify_int`? 
It is weird, one receives b64encoded signature, another -- not...

---

*[iroha/helper/random.py, line 4 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwL0aqAbbwqYSfMO8DH:-KwL0aqAbbwqYSfMO8DI:bsqv2we) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/helper/random.py#L4)):*
> ```Python
> source_str = 'abcdefghijklmnopqrstuvwxyz'
> 
> def uuid(num): #疑似
> ```

don't call this function uuid! 
uuid is standardized https://ja.wikipedia.org/wiki/UUID 

If I see function uuid in the code -- I expect to see standardized uuid, not custom.

---

*[iroha/helper/stateless_validator.py, line 104 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwL1XPELHlK0vpmcn1L:-KwL1XPELHlK0vpmcn1M:bau602j) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/helper/stateless_validator.py#L104)):*
> ```Python
> def transfer_asset(cmd):
>     logger.info(""stateless validate transfer_asset"")
>     if verify_asset_id(cmd.asset_id) and verify_account_id(cmd.src_account_id) and verify_account_id(cmd.dest_account_id) and verify_amount(cmd.amount):
> ```

use pep8 formatting please. Code will be much more readable.

Remember that code is written once, but read many times.

---

*[iroha/helper/stateless_validator.py, line 121 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwL2Mid6apye3BZbi1a:-KwL2Mid6apye3BZbi1b:b-no1yor) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/helper/stateless_validator.py#L121)):*
> # TODO not deceided query signatures
query has one signature.

---

*[iroha/helper/stateless_validator.py, line 143 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwL2naKZkozblr6Fbdk:-KwL2naKZkozblr6Fbdl:b-fheq6r) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/helper/stateless_validator.py#L143)):*
> Stateless validate Not has field
`logger.error([Stateless validation] undefined type of query)`

---

*[iroha/helper/stateless_validator.py, line 246 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwL4Dum6P3paNYXE_wk:-KwL4Dum6P3paNYXE_wl:b-ny27fy) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/helper/stateless_validator.py#L246)):*
> ```Python
> 
> def verify_quorum(quorum):
>     if 0 != quorum:
> ```

quorum > 0

---

*[iroha/primitive/amount.py, line 4 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwL4ai-upZ59f0OPNPz:-KwL4ai-upZ59f0OPNQ-:bnoneet) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/primitive/amount.py#L4)):*
> UINT64_NUMBER = int(18446744073709551616)
What is this number?

Is it `uint64_max`?

---

*[iroha/primitive/signatories.py, line 11 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwL5ILeD1FH7Hoh8HYA:-KwL5ILfE1NZO8_fQL7s:b-lhxd38) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/primitive/signatories.py#L11)):*
> ```Python
>     def append(self, keypair):
>         logger.debug(""Signatories.append"")
>         if not [ signatory for signatory in self.signatories if signatory.public_key == keypair.public_key ]:
> ```

follow DRY (do not repeat yourself) principle:

you use  this check twice, why don't make it a separate function?

---

*[iroha/query/response.py, line 2 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwL5nIrOT1kA49FexqL:-KwL5nIrOT1kA49FexqM:b-xp3ndz) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/query/response.py#L2)):*
> ```Python
> from iroha.helper import logger, crypto
> from iroha.helper.exception import NotErrorResponseException, NotAccountAssetResponseException, NotAccountResponseException, NotSignatoriesResponseExcepiton, NotTransactionsResponseException
> ```

very long line, use pep8 formatting!

---

*[schema/endpoint.proto, line 42 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwL6A6LgXD_oLrKhWLV:-KwL6A6LgXD_oLrKhWLW:b-6ke44m) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/schema/endpoint.proto#L42)):*
> ```protobuf
>     rpc Torii (Transaction) returns (google.protobuf.Empty);
>     rpc Status (TxStatusRequest) returns (ToriiResponse);
>     rpc Flush (FlushRequest) returns (FlushResponse);
> ```

What is Flush?

---

*[tests/query/test_response.py, line 47 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwKwLrMdTqTGJrBzqs9:-KwKwLrMdTqTGJrBzqsA:b-2k8doy) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/tests/query/test_response.py#L47)):*
>  asset_id = ""sporting.salt/CupNoodles"",
Asset id format is 
`asset_name#domain_name`
`[a-z]{3,96}\#[a-z]{3,96}` (it will be changed, very likely)

---

*[tests/transaction/test_transaction.py, line 54 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwKx7pxDyBIkPKesxz1:-KwKx7pxDyBIkPKesxz2:bopoy9a) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/tests/transaction/test_transaction.py#L54)):*
> ```Python
>         tx.time_stamp()
>         tx.add_key_pair(crypto.create_key_pair())
>         tx.sign()
> ```

Maybe logically it would be better to make something like 
```python3
keypairs = []
keypairs.append(crypto.create_key_pair())
keypairs.append(crypto.create_key_pair())
keypairs.append(crypto.create_key_pair())

tx.sign(keypairs)
```
Private key is used only for signing. When you write `tx.add_key_pair(kp)`, logically it means that you store both keys (public and private) inside tx, which is wrong. 

---


*Comments from [Reviewable](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-:-KwL7x9AXtW6CAWHorYM:b-vrgldq)*
<!-- Sent from Reviewable.io -->
",2017-10-13 14:42:22,2017-10-13 14:50:41
https://api.github.com/repos/hyperledger/iroha-python/issues/22,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/336476510,https://github.com/hyperledger/iroha-python/pull/22#issuecomment-336476510,Warchant,"







*[iroha/transaction/transaction.py, line 19 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwLDQ6huX9sHN-VDm-2:-KwLDQ6huX9sHN-VDm-3:bgij3dm) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/transaction/transaction.py#L19)):*
> ```Python
>             signatures = []
>         )
>         self.signatories = Signatories()
> ```

It is ""signatures"", not signatories.
Signatures --> you sign something and you get signature
Signatory --> the one who signs.

---


*Comments from [Reviewable](https://reviewable.io:443/reviews/hyperledger/iroha-python/22)*
<!-- Sent from Reviewable.io -->
",2017-10-13 14:54:42,2017-10-13 14:54:42
https://api.github.com/repos/hyperledger/iroha-python/issues/22,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/336476719,https://github.com/hyperledger/iroha-python/pull/22#issuecomment-336476719,Warchant,"






*[iroha/transaction/transaction.py, line 60 at r2](https://reviewable.io:443/reviews/hyperledger/iroha-python/22#-KwLDjyCMsh4AHV4DFz8:-KwLDjyCMsh4AHV4DFz9:b-6mys93) ([raw file](https://github.com/hyperledger/iroha-python/blob/338393c5e68b2e8699693ffd30cfa42f709a5d9c/iroha/transaction/transaction.py#L60)):*
> ```Python
>         """"""
>         logger.debug(""Transaction.add_key_pair"")
>         self.signatories.append(keypair)
> ```

You append whole keypair. Why? Both public and **PRIVATE** key are appended. Never store private key anywhere in transaction/query/any object.

---


*Comments from [Reviewable](https://reviewable.io:443/reviews/hyperledger/iroha-python/22)*
<!-- Sent from Reviewable.io -->
",2017-10-13 14:55:31,2017-10-13 14:56:26
https://api.github.com/repos/hyperledger/iroha-python/issues/22,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/336604187,https://github.com/hyperledger/iroha-python/pull/22#issuecomment-336604187,motxx,"> do not rush with this library. I can definitely say that most of the code from this PR will not be used. We are going to write C++ client library in this+next sprint (2-3 weeks). Then, you may want to write python bindings for that libray. This is the only way.

The same may be said of other iroha-sdk libraries: iroha-ios, iroha-javascript, iroha-android, iroha-scala and iroha-dotnet. Please tell it in public channel of slack and telegram.
@Warchant @neewy @takemiyamakoto ",2017-10-14 02:39:33,2017-10-14 02:41:45
https://api.github.com/repos/hyperledger/iroha-python/issues/22,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/336606819,https://github.com/hyperledger/iroha-python/pull/22#issuecomment-336606819,takemiyamakoto,"I talked to Kaji about this a few weeks ago, but he seems to think that it was more secure to have a native python library, rather than using the C++ shared library. This is something that should be discussed.

I will say that pull requests this large are not really possible to properly review. In the future we need to split up work in smaller parts.",2017-10-14 03:37:19,2017-10-14 03:38:08
https://api.github.com/repos/hyperledger/iroha-python/issues/22,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/336621258,https://github.com/hyperledger/iroha-python/pull/22#issuecomment-336621258,neewy,"Mizuki told me about the message of Bogdan, I would like to clear this up:
we are going to do C++ client library only for model + crypto — that is it. We are not going to write whole Iroha for client 😅 ",2017-10-14 08:52:56,2017-10-14 08:52:56
https://api.github.com/repos/hyperledger/iroha-python/issues/22,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/336627780,https://github.com/hyperledger/iroha-python/pull/22#issuecomment-336627780,Warchant,"> C++ client library only for model + crypto

Yes. Sorry for confusing you, I meant that we are going to write model objects (Transaction, Query, cryptography for them) and other subprojects will be able to reuse them.",2017-10-14 11:05:56,2017-10-14 11:05:56
https://api.github.com/repos/hyperledger/iroha-python/issues/22,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/340719661,https://github.com/hyperledger/iroha-python/pull/22#issuecomment-340719661,takemiyamakoto,What is the status of this PR?,2017-10-31 10:21:40,2017-10-31 10:21:40
https://api.github.com/repos/hyperledger/iroha-python/issues/17,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/333451593,https://github.com/hyperledger/iroha-python/issues/17#issuecomment-333451593,satellitex,"Is it necessary to be PEP 257?
The default creation of Pycharm is PEP 8, so it is easier to create this.",2017-10-02 06:37:21,2017-10-02 06:37:21
https://api.github.com/repos/hyperledger/iroha-python/issues/17,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/333510959,https://github.com/hyperledger/iroha-python/issues/17#issuecomment-333510959,a-r-g-v,resolved #18 ,2017-10-02 11:44:19,2017-10-02 11:44:19
https://api.github.com/repos/hyperledger/iroha-python/issues/10,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/289966278,https://github.com/hyperledger/iroha-python/issues/10#issuecomment-289966278,takemiyamakoto,"I know Baohua Yang well, so we could ask him if we want.",2017-03-29 02:50:49,2017-03-29 02:50:49
https://api.github.com/repos/hyperledger/iroha-python/issues/10,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/290041527,https://github.com/hyperledger/iroha-python/issues/10#issuecomment-290041527,emilmelnikov,"1. Maybe use `iroha` as a package name? Python focus is obvious from the context.
2. Should we register the account for Soramitsu, or it might be a personal one?",2017-03-29 09:54:10,2017-03-29 09:54:10
https://api.github.com/repos/hyperledger/iroha-python/issues/10,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/290325105,https://github.com/hyperledger/iroha-python/issues/10#issuecomment-290325105,takemiyamakoto,Let's register an account for Soramitsu to use.,2017-03-30 07:24:41,2017-03-30 07:24:41
https://api.github.com/repos/hyperledger/iroha-python/issues/8,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/288741220,https://github.com/hyperledger/iroha-python/pull/8#issuecomment-288741220,emilmelnikov,"Please, use ""Squash and merge"" option when accepting this pull request.",2017-03-23 14:43:18,2017-03-23 14:43:18
https://api.github.com/repos/hyperledger/iroha-python/issues/8,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/288741545,https://github.com/hyperledger/iroha-python/pull/8#issuecomment-288741545,emilmelnikov,CircleCI integration branch can be merged after this one.,2017-03-23 14:44:21,2017-03-23 14:44:21
https://api.github.com/repos/hyperledger/iroha-python/issues/5,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/286897983,https://github.com/hyperledger/iroha-python/pull/5#issuecomment-286897983,emilmelnikov,"Since we're transitioning into FlatBuffers in Iroha, we can use FlatBuffers here from the very beginning (unless the transition will be lengthy).",2017-03-15 22:20:28,2017-03-15 22:21:01
https://api.github.com/repos/hyperledger/iroha-python/issues/5,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/286938121,https://github.com/hyperledger/iroha-python/pull/5#issuecomment-286938121,takemiyamakoto,Let's just get this out into master for now as I think some people might want to play around with the library (we used it at the hackathon last week).,2017-03-16 02:17:19,2017-03-16 02:17:19
https://api.github.com/repos/hyperledger/iroha-python/issues/2,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/287063484,https://github.com/hyperledger/iroha-python/issues/2#issuecomment-287063484,emilmelnikov,"The project has been moved to `setup.py` (distutils/setuptools) because it is a library.
`requirements.txt` is not needed anymore.",2017-03-16 13:54:32,2017-03-16 13:54:32
https://api.github.com/repos/hyperledger/iroha-python/issues/1,https://api.github.com/repos/hyperledger/iroha-python/issues/comments/284703266,https://github.com/hyperledger/iroha-python/issues/1#issuecomment-284703266,MizukiSonoko,"Using wiki is better.
So could you read [wiki](https://github.com/hyperledger/iroha-python/wiki)
",2017-03-07 12:03:48,2017-03-07 12:03:48
