pull request url html,pull request url,body,commit_id,create at,id,diff_hunk,position,update at,url,html url,user
https://github.com/hyperledger/composer-sample-applications/pull/139,https://github.com/hyperledger/composer-sample-applications/pull/139,awjh is no longer used for docker so line should be removed,7539b2031a4eb13d806bf2bad930d846f74f2386,2018-05-31 13:48:53,192105030,"@@ -0,0 +1,232 @@
+#!/bin/bash
+# Licensed under the Apache License, Version 2.0 (the ""License"");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+# http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# REMOVE EXISTING REST SERVER, PLAYGROUND ETC
+docker rm -f $(docker ps -a | grep hyperledger/* | awk '{ print $1 }')
+docker rm -f $(docker ps -a | grep awjh/* | awk '{ print $1 }')",,2018-05-31 13:52:57,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/192105030,https://github.com/hyperledger/composer-sample-applications/pull/139#discussion_r192105030,awjh-ibm
https://github.com/hyperledger/composer-sample-applications/pull/139,https://github.com/hyperledger/composer-sample-applications/pull/139,this should pull from hyperledger not awjh,7539b2031a4eb13d806bf2bad930d846f74f2386,2018-05-31 13:49:15,192105147,"@@ -0,0 +1,232 @@
+#!/bin/bash
+# Licensed under the Apache License, Version 2.0 (the ""License"");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+# 
+# http://www.apache.org/licenses/LICENSE-2.0
+# 
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an ""AS IS"" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+
+# REMOVE EXISTING REST SERVER, PLAYGROUND ETC
+docker rm -f $(docker ps -a | grep hyperledger/* | awk '{ print $1 }')
+docker rm -f $(docker ps -a | grep awjh/* | awk '{ print $1 }')
+
+docker pull hyperledger/composer-playground:latest
+docker pull hyperledger/composer-cli:latest
+docker pull hyperledger/composer-rest-server:latest
+docker pull awjh/letters-of-credit:latest",,2018-05-31 13:52:57,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/192105147,https://github.com/hyperledger/composer-sample-applications/pull/139#discussion_r192105147,awjh-ibm
https://github.com/hyperledger/composer-sample-applications/pull/135,https://github.com/hyperledger/composer-sample-applications/pull/135,Impressive use of `grep`... would have used sed or jq myself... but it works :-),23d0c71861007a4f8a04e03e238ab779f39d9db2,2018-05-30 13:17:02,191762688,"@@ -18,23 +18,29 @@ ROOT=$DIR/../..
 cd $ROOT
 npm install
 
+NETWORK_VERSION=$(grep -o '""version"": *""[^""]*""' $ROOT/node_modules/vehicle-manufacture-network/package.json | grep -o '[0-9]\.[0-9]\.[0-9]')",4,2018-05-30 13:17:02,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/191762688,https://github.com/hyperledger/composer-sample-applications/pull/135#discussion_r191762688,mbwhite
https://github.com/hyperledger/composer-sample-applications/pull/112,https://github.com/hyperledger/composer-sample-applications/pull/112,Why do we have an access token here?,00eb74525110fe31302626c2441e126235ebd7af,2018-02-22 17:38:32,170036979,"@@ -0,0 +1,7 @@
+{
+  ""restServer"": {
+      ""webSocketURL"": ""ws://localhost:3000"",
+      ""httpURL"": ""http://localhost:3000/api"",
+      ""accessToken"": ""DLHyHuJAbrzUwAAZ73Mh4B5D9zMxEVVpl0jOCEg8KHDddxkXHRMqTqg48bpjQHiT""",,2018-03-01 17:04:20,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/170036979,https://github.com/hyperledger/composer-sample-applications/pull/112#discussion_r170036979,cazfletch
https://github.com/hyperledger/composer-sample-applications/pull/112,https://github.com/hyperledger/composer-sample-applications/pull/112,again with the access token,00eb74525110fe31302626c2441e126235ebd7af,2018-02-22 17:46:48,170039383,"@@ -0,0 +1,7 @@
+{
+  ""restServer"": {
+      ""webSocketURL"": ""ws://localhost:3000"",
+      ""httpURL"": ""http://localhost:3000/api"",
+      ""accessToken"": ""DLHyHuJAbrzUwAAZ73Mh4B5D9zMxEVVpl0jOCEg8KHDddxkXHRMqTqg48bpjQHiT""",,2018-03-01 17:04:20,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/170039383,https://github.com/hyperledger/composer-sample-applications/pull/112#discussion_r170039383,cazfletch
https://github.com/hyperledger/composer-sample-applications/pull/112,https://github.com/hyperledger/composer-sample-applications/pull/112,access token???,00eb74525110fe31302626c2441e126235ebd7af,2018-02-22 17:49:08,170040043,"@@ -0,0 +1,7 @@
+{
+  ""restServer"": {
+      ""webSocketURL"": ""ws://localhost:3000"",
+      ""httpURL"": ""http://localhost:3000/api"",
+      ""accessToken"": ""DLHyHuJAbrzUwAAZ73Mh4B5D9zMxEVVpl0jOCEg8KHDddxkXHRMqTqg48bpjQHiT""",,2018-03-01 17:04:20,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/170040043,https://github.com/hyperledger/composer-sample-applications/pull/112#discussion_r170040043,cazfletch
https://github.com/hyperledger/composer-sample-applications/pull/111,https://github.com/hyperledger/composer-sample-applications/pull/111,This doesn't return anything now. Should we remove the @return annotation?,fa111453dc342b80fa406e4269f611ed5385f08f,2018-01-29 09:04:51,164367459,"@@ -20,316 +20,212 @@
 
 'use strict';
 
-
 const BusinessNetworkConnection = require('composer-client').BusinessNetworkConnection;
 const Table = require('cli-table');
 const winston = require('winston');
-let config = require('config').get('digitalproperty-app');
-// const mqlight = require('mqlight');
 const prettyjson = require('prettyjson');
 
 // these are the credentials to use to connect to the Hyperledger Fabric
-let cardname = config.get('cardname');
+let cardname = 'admin@digitalproperty-network';
 
 const LOG = winston.loggers.get('application');
 
 
 /** Class for the land registry*/
 class LandRegistry {
 
-  /**
-   * Need to have the mapping from bizNetwork name to the URLs to connect to.
-   * bizNetwork nawme will be able to be used by Composer to get the suitable model files.
-   *
-   */
+   /**
+    * Need to have the mapping from bizNetwork name to the URLs to connect to.
+    * bizNetwork nawme will be able to be used by Composer to get the suitable model files.
+    *
+    */
     constructor() {
-
         this.bizNetworkConnection = new BusinessNetworkConnection();
     }
 
-  /** @description Initalizes the LandRegsitry by making a connection to the Composer runtime
-   * @return {Promise} A promise whose fullfillment means the initialization has completed
-   */
-    init() {
-        return this.bizNetworkConnection.connect(cardname)
-      .then((result) => {
-          this.businessNetworkDefinition = result;
-          LOG.info('LandRegistry:<init>', 'businessNetworkDefinition obtained', this.businessNetworkDefinition.getIdentifier());
-      })
-      // and catch any exceptions that are triggered
-      .catch(function (error) {
-          throw error;
-      });
+   /** 
+    * @description Initalizes the LandRegsitry by making a connection to the Composer runtime
+    * @return {Promise} A promise whose fullfillment means the initialization has completed",52,2018-01-29 10:55:55,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/164367459,https://github.com/hyperledger/composer-sample-applications/pull/111#discussion_r164367459,andrew-coleman
https://github.com/hyperledger/composer-sample-applications/pull/111,https://github.com/hyperledger/composer-sample-applications/pull/111,should we ignore the error?,fa111453dc342b80fa406e4269f611ed5385f08f,2018-01-29 09:06:30,164367793,"@@ -20,316 +20,212 @@
 
 'use strict';
 
-
 const BusinessNetworkConnection = require('composer-client').BusinessNetworkConnection;
 const Table = require('cli-table');
 const winston = require('winston');
-let config = require('config').get('digitalproperty-app');
-// const mqlight = require('mqlight');
 const prettyjson = require('prettyjson');
 
 // these are the credentials to use to connect to the Hyperledger Fabric
-let cardname = config.get('cardname');
+let cardname = 'admin@digitalproperty-network';
 
 const LOG = winston.loggers.get('application');
 
 
 /** Class for the land registry*/
 class LandRegistry {
 
-  /**
-   * Need to have the mapping from bizNetwork name to the URLs to connect to.
-   * bizNetwork nawme will be able to be used by Composer to get the suitable model files.
-   *
-   */
+   /**
+    * Need to have the mapping from bizNetwork name to the URLs to connect to.
+    * bizNetwork nawme will be able to be used by Composer to get the suitable model files.
+    *
+    */
     constructor() {
-
         this.bizNetworkConnection = new BusinessNetworkConnection();
     }
 
-  /** @description Initalizes the LandRegsitry by making a connection to the Composer runtime
-   * @return {Promise} A promise whose fullfillment means the initialization has completed
-   */
-    init() {
-        return this.bizNetworkConnection.connect(cardname)
-      .then((result) => {
-          this.businessNetworkDefinition = result;
-          LOG.info('LandRegistry:<init>', 'businessNetworkDefinition obtained', this.businessNetworkDefinition.getIdentifier());
-      })
-      // and catch any exceptions that are triggered
-      .catch(function (error) {
-          throw error;
-      });
+   /** 
+    * @description Initalizes the LandRegsitry by making a connection to the Composer runtime
+    * @return {Promise} A promise whose fullfillment means the initialization has completed
+    */
+    async init() {
+        this.businessNetworkDefinition = await this.bizNetworkConnection.connect(cardname);
+        LOG.info('LandRegistry:<init>', 'businessNetworkDefinition obtained', this.businessNetworkDefinition.getIdentifier());
+    }
 
+   /** 
+    * Listen for the sale transaction events
+    */
+    listen() {
+        this.bizNetworkConnection.on('event', (evt) => {
+            console.log(chalk.blue.bold('New Event'));
+            console.log(evt);
+
+            let options = {
+                properties: { key:'value'}
+            };
+        });
     }
 
-    /** Listen for the sale transaction events
-
-     */
-     listen(){
-       this.bizNetworkConnection.on('event',(evt)=>{
-         console.log(chalk.blue.bold('New Event'));
-         console.log(evt);
-
-         let options = {
-           properties: { key:'value'}
-         };
-        //  let text = evt.title['$identifier'];
-        //  console.log('Sending ' +text);
-        //  this.sendClient.send('digitalproperty-network/sale', text, options,function (err, topic,data,options) {
-        //          console.log('Topic: %s', topic);
-        //          console.log('Data: %s', data);
-        //  		      console.log('Options: %s', JSON.stringify(options));
-        //           console.log(err);
-         //
-        //        });
-
-       });
-     }
-
-  /** Updates a fixes asset for selling..
-  @return {Promise} resolved when this update has compelted
-  */
-    updateForSale() {
+  
+   /** 
+    * Updates a fixes asset for selling..
+    * @return {Promise} resolved when this update has compelted
+    */
+    async updateForSale() {
         const METHOD = 'updateForSale';
-
-
-        return this.bizNetworkConnection.getAssetRegistry('net.biz.digitalPropertyNetwork.LandTitle')
-      .then((registry) => {
-
-          LOG.info(METHOD, 'Getting assest from the registry.');
-          return registry.get('LID:1148');
-
-      }).then((result) => {
-
-	      let factory        = this.businessNetworkDefinition.getFactory();
-	      let transaction    = factory.newTransaction('net.biz.digitalPropertyNetwork','RegisterPropertyForSale');
-		  transaction.title  = factory.newRelationship('net.biz.digitalPropertyNetwork', 'LandTitle', 'LID:1148');
-		  transaction.seller = factory.newRelationship('net.biz.digitalPropertyNetwork', 'Person', 'PID:1234567890');
-
-          LOG.info(METHOD, 'Submitting transaction');
-
-          return this.bizNetworkConnection.submitTransaction(transaction);
-      }) // and catch any exceptions that are triggered
-      .catch(function (error) {
-          LOG.error('LandRegsitry:updateForSale', error);
-          throw error;
-      });
+        try {
+            let registry = await this.bizNetworkConnection.getAssetRegistry('net.biz.digitalPropertyNetwork.LandTitle');
+            LOG.info(METHOD, 'Getting assest from the registry.');
+            let result = registry.get('LID:1148');
+            let factory        = this.businessNetworkDefinition.getFactory();
+	        let transaction    = factory.newTransaction('net.biz.digitalPropertyNetwork','RegisterPropertyForSale');
+		    transaction.title  = factory.newRelationship('net.biz.digitalPropertyNetwork', 'LandTitle', 'LID:1148');
+		    transaction.seller = factory.newRelationship('net.biz.digitalPropertyNetwork', 'Person', 'PID:1234567890');
+
+            LOG.info(METHOD, 'Submitting transaction');
+            await this.bizNetworkConnection.submitTransaction(transaction);
+        } catch(error) {
+        }",,2018-01-29 10:55:55,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/164367793,https://github.com/hyperledger/composer-sample-applications/pull/111#discussion_r164367793,andrew-coleman
https://github.com/hyperledger/composer-sample-applications/pull/111,https://github.com/hyperledger/composer-sample-applications/pull/111,@return {Table} ...,fa111453dc342b80fa406e4269f611ed5385f08f,2018-01-29 09:20:44,164370974,"@@ -20,316 +20,212 @@
 
 'use strict';
 
-
 const BusinessNetworkConnection = require('composer-client').BusinessNetworkConnection;
 const Table = require('cli-table');
 const winston = require('winston');
-let config = require('config').get('digitalproperty-app');
-// const mqlight = require('mqlight');
 const prettyjson = require('prettyjson');
 
 // these are the credentials to use to connect to the Hyperledger Fabric
-let cardname = config.get('cardname');
+let cardname = 'admin@digitalproperty-network';
 
 const LOG = winston.loggers.get('application');
 
 
 /** Class for the land registry*/
 class LandRegistry {
 
-  /**
-   * Need to have the mapping from bizNetwork name to the URLs to connect to.
-   * bizNetwork nawme will be able to be used by Composer to get the suitable model files.
-   *
-   */
+   /**
+    * Need to have the mapping from bizNetwork name to the URLs to connect to.
+    * bizNetwork nawme will be able to be used by Composer to get the suitable model files.
+    *
+    */
     constructor() {
-
         this.bizNetworkConnection = new BusinessNetworkConnection();
     }
 
-  /** @description Initalizes the LandRegsitry by making a connection to the Composer runtime
-   * @return {Promise} A promise whose fullfillment means the initialization has completed
-   */
-    init() {
-        return this.bizNetworkConnection.connect(cardname)
-      .then((result) => {
-          this.businessNetworkDefinition = result;
-          LOG.info('LandRegistry:<init>', 'businessNetworkDefinition obtained', this.businessNetworkDefinition.getIdentifier());
-      })
-      // and catch any exceptions that are triggered
-      .catch(function (error) {
-          throw error;
-      });
+   /** 
+    * @description Initalizes the LandRegsitry by making a connection to the Composer runtime
+    * @return {Promise} A promise whose fullfillment means the initialization has completed
+    */
+    async init() {
+        this.businessNetworkDefinition = await this.bizNetworkConnection.connect(cardname);
+        LOG.info('LandRegistry:<init>', 'businessNetworkDefinition obtained', this.businessNetworkDefinition.getIdentifier());
+    }
 
+   /** 
+    * Listen for the sale transaction events
+    */
+    listen() {
+        this.bizNetworkConnection.on('event', (evt) => {
+            console.log(chalk.blue.bold('New Event'));
+            console.log(evt);
+
+            let options = {
+                properties: { key:'value'}
+            };
+        });
     }
 
-    /** Listen for the sale transaction events
-
-     */
-     listen(){
-       this.bizNetworkConnection.on('event',(evt)=>{
-         console.log(chalk.blue.bold('New Event'));
-         console.log(evt);
-
-         let options = {
-           properties: { key:'value'}
-         };
-        //  let text = evt.title['$identifier'];
-        //  console.log('Sending ' +text);
-        //  this.sendClient.send('digitalproperty-network/sale', text, options,function (err, topic,data,options) {
-        //          console.log('Topic: %s', topic);
-        //          console.log('Data: %s', data);
-        //  		      console.log('Options: %s', JSON.stringify(options));
-        //           console.log(err);
-         //
-        //        });
-
-       });
-     }
-
-  /** Updates a fixes asset for selling..
-  @return {Promise} resolved when this update has compelted
-  */
-    updateForSale() {
+  
+   /** 
+    * Updates a fixes asset for selling..
+    * @return {Promise} resolved when this update has compelted
+    */
+    async updateForSale() {
         const METHOD = 'updateForSale';
-
-
-        return this.bizNetworkConnection.getAssetRegistry('net.biz.digitalPropertyNetwork.LandTitle')
-      .then((registry) => {
-
-          LOG.info(METHOD, 'Getting assest from the registry.');
-          return registry.get('LID:1148');
-
-      }).then((result) => {
-
-	      let factory        = this.businessNetworkDefinition.getFactory();
-	      let transaction    = factory.newTransaction('net.biz.digitalPropertyNetwork','RegisterPropertyForSale');
-		  transaction.title  = factory.newRelationship('net.biz.digitalPropertyNetwork', 'LandTitle', 'LID:1148');
-		  transaction.seller = factory.newRelationship('net.biz.digitalPropertyNetwork', 'Person', 'PID:1234567890');
-
-          LOG.info(METHOD, 'Submitting transaction');
-
-          return this.bizNetworkConnection.submitTransaction(transaction);
-      }) // and catch any exceptions that are triggered
-      .catch(function (error) {
-          LOG.error('LandRegsitry:updateForSale', error);
-          throw error;
-      });
+        try {
+            let registry = await this.bizNetworkConnection.getAssetRegistry('net.biz.digitalPropertyNetwork.LandTitle');
+            LOG.info(METHOD, 'Getting assest from the registry.');
+            let result = registry.get('LID:1148');
+            let factory        = this.businessNetworkDefinition.getFactory();
+	        let transaction    = factory.newTransaction('net.biz.digitalPropertyNetwork','RegisterPropertyForSale');
+		    transaction.title  = factory.newRelationship('net.biz.digitalPropertyNetwork', 'LandTitle', 'LID:1148');
+		    transaction.seller = factory.newRelationship('net.biz.digitalPropertyNetwork', 'Person', 'PID:1234567890');
+
+            LOG.info(METHOD, 'Submitting transaction');
+            await this.bizNetworkConnection.submitTransaction(transaction);
+        } catch(error) {
+        }
     }
 
-  /** bootstrap into the resgitry a few example land titles
+   /** 
+    * bootstrap into the resgitry a few example land titles
     * @return {Promise} resolved when the assests have been created
-
-  */
-    _bootstrapTitles() {
+    */
+    async _bootstrapTitles() {
         LOG.info('LandRegistry:_bootstrapTitles', 'getting asset registry for ""net.biz.digitalPropertyNetwork.LandTitle""');
         let owner;
         LOG.info('about to get asset registry');
-        return this.bizNetworkConnection.getAssetRegistry('net.biz.digitalPropertyNetwork.LandTitle') // how do I know what this name is?
-
-    .then((result) => {
-        // got the assest registry for land titles
-        LOG.info('LandRegistry:_bootstrapTitles', 'got asset registry');
-        this.titlesRegistry = result;
-    }).then(() => {
-        LOG.info('LandRegistry:_bootstrapTitles', 'getting factory and adding assets');
-        let factory = this.businessNetworkDefinition.getFactory();
-
-        LOG.info('LandRegistry:_bootstrapTitles', 'Creating a person');
-        owner = factory.newResource('net.biz.digitalPropertyNetwork', 'Person', 'PID:1234567890');
-        owner.firstName = 'Fred';
-        owner.lastName = 'Bloggs';
-
-        /** Create a new relationship for the owner */
-        let ownerRelation = factory.newRelationship('net.biz.digitalPropertyNetwork', 'Person', 'PID:1234567890');
-
-        LOG.info('LandRegistry:_bootstrapTitles', 'Creating a land title#1');
-        let landTitle1 = factory.newResource('net.biz.digitalPropertyNetwork', 'LandTitle', 'LID:1148');
-        landTitle1.owner = ownerRelation;
-        landTitle1.information = 'A nice house in the country';
-
-        LOG.info('LandRegistry:_bootstrapTitles', 'Creating a land title#2');
-        let landTitle2 = factory.newResource('net.biz.digitalPropertyNetwork', 'LandTitle', 'LID:6789');
-        landTitle2.owner = ownerRelation;
-        landTitle2.information = 'A small flat in the city';
-
-        LOG.info('LandRegistry:_bootstrapTitles', 'Adding these to the registry');
-        return this.titlesRegistry.addAll([landTitle1, landTitle2]);
-
-    }).then(() => {
-        return this.bizNetworkConnection.getParticipantRegistry('net.biz.digitalPropertyNetwork.Person');
-    })
-      .then((personRegistry) => {
-          return personRegistry.add(owner);
-      }) // and catch any exceptions that are triggered
-      .catch(function (error) {
-          console.log(error);
-          LOG.error('LandRegsitry:_bootstrapTitles', error);
-          throw error;
-      });
+
+        try {
+            this.titlesRegistry = await this.bizNetworkConnection.getAssetRegistry('net.biz.digitalPropertyNetwork.LandTitle');
+            // got the assest registry for land titles
+            LOG.info('LandRegistry:_bootstrapTitles', 'got asset registry');
+            LOG.info('LandRegistry:_bootstrapTitles', 'getting factory and adding assets');
+            let factory = this.businessNetworkDefinition.getFactory();
+
+            LOG.info('LandRegistry:_bootstrapTitles', 'Creating a person');
+            owner = factory.newResource('net.biz.digitalPropertyNetwork', 'Person', 'PID:1234567890');
+            owner.firstName = 'Fred';
+            owner.lastName = 'Bloggs';
+
+            // Create a new relationship for the owner
+            let ownerRelation = factory.newRelationship('net.biz.digitalPropertyNetwork', 'Person', 'PID:1234567890');
+
+            LOG.info('LandRegistry:_bootstrapTitles', 'Creating a land title#1');
+            let landTitle1 = factory.newResource('net.biz.digitalPropertyNetwork', 'LandTitle', 'LID:1148');
+            landTitle1.owner = ownerRelation;
+            landTitle1.information = 'A nice house in the country';
+
+            LOG.info('LandRegistry:_bootstrapTitles', 'Creating a land title#2');
+            let landTitle2 = factory.newResource('net.biz.digitalPropertyNetwork', 'LandTitle', 'LID:6789');
+            landTitle2.owner = ownerRelation;
+            landTitle2.information = 'A small flat in the city';
+
+            LOG.info('LandRegistry:_bootstrapTitles', 'Adding these to the registry');
+            await this.titlesRegistry.addAll([landTitle1, landTitle2]);
+            let personRegistry = await this.bizNetworkConnection.getParticipantRegistry('net.biz.digitalPropertyNetwork.Person');
+            await personRegistry.add(owner);
+        } catch(error) {
+            console.log(error);
+            LOG.error('LandRegsitry:_bootstrapTitles', error);
+            throw error;
+        }
 
     }
 
-  /**
-   * List the land titles that are stored in the Land Title Resgitry
-   * @return {Promise} resolved when fullfiled will have listed out the titles to stdout
-   */
-    listTitles() {
+   /**
+    * List the land titles that are stored in the Land Title Resgitry
+    * @return {Promise} resolved when fullfiled will have listed out the titles to stdout",,2018-01-29 10:55:55,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/164370974,https://github.com/hyperledger/composer-sample-applications/pull/111#discussion_r164370974,andrew-coleman
https://github.com/hyperledger/composer-sample-applications/pull/86,https://github.com/hyperledger/composer-sample-applications/pull/86,Worthing dropping out some the white space..,73fc3f23e3e515eb7748fb8625be464fea083e65,2017-09-18 09:54:39,139379355,"@@ -0,0 +1,50 @@
+#!/usr/bin/env node
+/*
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+const LandRegistry = require('./../../landRegistry.js');
+const winston = require('winston');
+const LOG = winston.loggers.get('application');
+",20,2017-09-18 12:54:39,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/139379355,https://github.com/hyperledger/composer-sample-applications/pull/86#discussion_r139379355,mbwhite
https://github.com/hyperledger/composer-sample-applications/pull/86,https://github.com/hyperledger/composer-sample-applications/pull/86,"These descriptions come out on the command line - so not in an interactive mode. So probably best phrased more as facts.

Have a look at some of the other help messages for examples. ",73fc3f23e3e515eb7748fb8625be464fea083e65,2017-09-18 09:56:09,139379659,"@@ -0,0 +1,50 @@
+#!/usr/bin/env node
+/*
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+const LandRegistry = require('./../../landRegistry.js');
+const winston = require('winston');
+const LOG = winston.loggers.get('application');
+
+
+
+
+
+module.exports.command = 'addLandTitle [options]';
+module.exports.desc = 'Add a land title to the registry.';
+module.exports.builder = function(yargs) {
+
+    return yargs
+    
+    .option('p', { alias: 'PID', describe: 'Please type in your PersonID.', type: 'string'})",,2017-09-18 12:54:39,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/139379659,https://github.com/hyperledger/composer-sample-applications/pull/86#discussion_r139379659,mbwhite
https://github.com/hyperledger/composer-sample-applications/pull/86,https://github.com/hyperledger/composer-sample-applications/pull/86,here especially to drop out the white space,73fc3f23e3e515eb7748fb8625be464fea083e65,2017-09-18 09:56:39,139379762,"@@ -0,0 +1,50 @@
+#!/usr/bin/env node
+/*
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+const LandRegistry = require('./../../landRegistry.js');
+const winston = require('winston');
+const LOG = winston.loggers.get('application');
+
+
+
+
+
+module.exports.command = 'addLandTitle [options]';
+module.exports.desc = 'Add a land title to the registry.';
+module.exports.builder = function(yargs) {
+
+    return yargs
+    ",,2017-09-18 12:54:39,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/139379762,https://github.com/hyperledger/composer-sample-applications/pull/86#discussion_r139379762,mbwhite
https://github.com/hyperledger/composer-sample-applications/pull/86,https://github.com/hyperledger/composer-sample-applications/pull/86,"Filename is `addTitles.js` but the file being used as teh yargs description for a new Person?  
File should be named something like `addPerson.js`

Avoids confusion later. ",73fc3f23e3e515eb7748fb8625be464fea083e65,2017-09-18 09:59:00,139380280,"@@ -0,0 +1,48 @@
+#!/usr/bin/env node",,2017-09-18 12:54:39,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/139380280,https://github.com/hyperledger/composer-sample-applications/pull/86#discussion_r139380280,mbwhite
https://github.com/hyperledger/composer-sample-applications/pull/86,https://github.com/hyperledger/composer-sample-applications/pull/86,ditto the style of the description,73fc3f23e3e515eb7748fb8625be464fea083e65,2017-09-18 09:59:19,139380345,"@@ -0,0 +1,48 @@
+#!/usr/bin/env node
+/*
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+const LandRegistry = require('./../../landRegistry.js');
+const winston = require('winston');
+const LOG = winston.loggers.get('application');
+
+
+
+
+
+module.exports.command = 'addTitle [options]';
+module.exports.desc = 'Add a set of land titles';
+module.exports.builder = function(yargs) {
+
+    return yargs",,2017-09-18 12:54:39,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/139380345,https://github.com/hyperledger/composer-sample-applications/pull/86#discussion_r139380345,mbwhite
https://github.com/hyperledger/composer-sample-applications/pull/86,https://github.com/hyperledger/composer-sample-applications/pull/86,"do we need an `implies('lastname','firstname') so you need both? 

If we need both probably eaiser to put in a required:true to both of them instead of implies.",73fc3f23e3e515eb7748fb8625be464fea083e65,2017-09-18 10:00:20,139380524,"@@ -0,0 +1,48 @@
+#!/usr/bin/env node
+/*
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+const LandRegistry = require('./../../landRegistry.js');
+const winston = require('winston');
+const LOG = winston.loggers.get('application');
+
+
+
+
+
+module.exports.command = 'addTitle [options]';
+module.exports.desc = 'Add a set of land titles';
+module.exports.builder = function(yargs) {
+
+    return yargs
+    .option('f', { alias: 'firstName', describe: 'Add your first name to the registry.', type: 'string'})
+    .option('l', { alias: 'lastName', describe: 'Add your last name to the registry.', type: 'string'})
+    .implies('firstName','lastName')",,2017-09-18 12:54:39,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/139380524,https://github.com/hyperledger/composer-sample-applications/pull/86#discussion_r139380524,mbwhite
https://github.com/hyperledger/composer-sample-applications/pull/86,https://github.com/hyperledger/composer-sample-applications/pull/86,"list all the sales *records* hled in the Sales *Record* registry

(are they sales records or agreements?  not checked the model but double check it's consistent)",73fc3f23e3e515eb7748fb8625be464fea083e65,2017-09-18 10:01:23,139380730,"@@ -0,0 +1,41 @@
+#!/usr/bin/env node
+/*
+ * Licensed under the Apache License, Version 2.0 (the ""License"");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an ""AS IS"" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+'use strict';
+
+const LandRegistry = require('./../../landRegistry.js');
+const winston = require('winston');
+const LOG = winston.loggers.get('application');
+
+exports.command = 'records';
+exports.desc = 'Lists all the sales held in the Sales Regsitry';",,2017-09-18 12:54:39,https://api.github.com/repos/hyperledger/composer-sample-applications/pulls/comments/139380730,https://github.com/hyperledger/composer-sample-applications/pull/86#discussion_r139380730,mbwhite
