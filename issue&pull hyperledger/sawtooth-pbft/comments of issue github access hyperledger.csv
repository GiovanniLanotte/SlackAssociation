url issues,url_api comment,url_html comment,user create comment,body,created_at,updated_at
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/120,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/475764782,https://github.com/hyperledger/sawtooth-pbft/pull/120#issuecomment-475764782,jsmitchell,Exceptional work @ltseeley !,2019-03-22 20:11:54,2019-03-22 20:11:54
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/118,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/474009510,https://github.com/hyperledger/sawtooth-pbft/pull/118#issuecomment-474009510,jsmitchell,Are there docs that need to change as well?,2019-03-18 17:04:06,2019-03-18 17:04:06
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/118,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/474011064,https://github.com/hyperledger/sawtooth-pbft/pull/118#issuecomment-474011064,ltseeley,"> Are there docs that need to change as well?

Not in the PBFT repo; I will be putting up a PR to update the docs in core, though.",2019-03-18 17:07:31,2019-03-18 17:07:31
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/118,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/474013888,https://github.com/hyperledger/sawtooth-pbft/pull/118#issuecomment-474013888,ltseeley,PR against core for corresponding documentation updates: https://github.com/hyperledger/sawtooth-core/pull/2047,2019-03-18 17:14:12,2019-03-18 17:14:12
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/118,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/474404600,https://github.com/hyperledger/sawtooth-pbft/pull/118#issuecomment-474404600,chenette,"NOTE: THIS COMMENT BELONGS WITH THE RELATED SAWTOOTH-CORE PR. PLEASE IGNORE MY COMMENT FOR THIS PR.

Please also change the PBFT consensus engine name in the Sys Admin Guide (in sawtooth-core):

docs/source/sysadmin_guide/creating_genesis_block.rst:       name = ""sawtooth-pbft-engine""
docs/source/sysadmin_guide/creating_genesis_block.rst:           sawtooth.consensus.algorithm.name=sawtooth-pbft-engine \


[You explained that the package name doesn't change, so the following lines are fine]

docs/source/sysadmin_guide/installation.rst:        $ sudo apt-get install -y sawtooth sawtooth-pbft-engine
docs/source/sysadmin_guide/setting_allowed_txns.rst:        sawtooth.consensus.algorithm.name=sawtooth-pbft-engine
docs/source/sysadmin_guide/systemd.rst:         $ sudo systemctl start sawtooth-pbft-engine.service
docs/source/sysadmin_guide/systemd.rst:        $ sudo systemctl status sawtooth-pbft-engine.service
docs/source/sysadmin_guide/systemd.rst:      -u sawtooth-pbft-engine
docs/source/sysadmin_guide/systemd.rst:          $ sudo systemctl stop sawtooth-pbft-engine.service
docs/source/sysadmin_guide/systemd.rst:          $ sudo systemctl restart sawtooth-pbft-engine.service",2019-03-19 14:49:23,2019-03-19 14:55:50
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/108,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/467582562,https://github.com/hyperledger/sawtooth-pbft/pull/108#issuecomment-467582562,jsmitchell,Hmm. I feel some reluctance about this 'what the node does'/'what the engine does' boundary. It is harder to reason about this stuff when it's in two places. Some redundancy for clarity might be ok. Removing this stuff in general requires a very clear contract from the node about what it is/is not doing.,2019-02-26 19:39:23,2019-02-26 19:39:23
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/108,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/467587523,https://github.com/hyperledger/sawtooth-pbft/pull/108#issuecomment-467587523,ltseeley,Closing PR in favor of leaving the functionality as is,2019-02-26 19:52:06,2019-02-26 19:52:06
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/108,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/467599919,https://github.com/hyperledger/sawtooth-pbft/pull/108#issuecomment-467599919,jsmitchell,"Well, I didn't necessarily mean ""you should close this"". Just trying to start a discussion cc: @peterschwarz @agunde406 @vaporos ",2019-02-26 20:26:48,2019-02-26 20:26:48
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/108,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/467601259,https://github.com/hyperledger/sawtooth-pbft/pull/108#issuecomment-467601259,ltseeley,"I just recalled that @peterschwarz had essentially rejected this change in a previous PR; I don't think it causes any problems or makes a real difference either way, so not really worth spending much time discussing in my opinion.",2019-02-26 20:30:35,2019-02-26 20:30:35
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/85,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/461511483,https://github.com/hyperledger/sawtooth-pbft/pull/85#issuecomment-461511483,ltseeley,Updated to take values for the base/max timeouts from the CLI args instead of on-chain settings.,2019-02-07 17:01:26,2019-02-07 17:01:26
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/73,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/454469719,https://github.com/hyperledger/sawtooth-pbft/pull/73#issuecomment-454469719,peterschwarz,Actually meant to request changes there,2019-01-15 17:03:57,2019-01-15 17:03:57
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/73,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/454519615,https://github.com/hyperledger/sawtooth-pbft/pull/73#issuecomment-454519615,ltseeley,"Minor modification made to the ""Simplify message parsing in from_peer_message"" commit to fix a bug",2019-01-15 19:28:42,2019-01-15 19:28:42
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/73,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/454933381,https://github.com/hyperledger/sawtooth-pbft/pull/73#issuecomment-454933381,chenette,"The comments, docstrings, and log messages look good.",2019-01-16 20:43:51,2019-01-16 20:43:51
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/73,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/454978715,https://github.com/hyperledger/sawtooth-pbft/pull/73#issuecomment-454978715,ltseeley,Removed the 2 commits that renamed `InternalError` to `GeneralError` and removed the `SerializationError` type. Added 5 commits to properly categorize and display the different error types.,2019-01-16 23:06:38,2019-01-16 23:06:38
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/70,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/452472606,https://github.com/hyperledger/sawtooth-pbft/pull/70#issuecomment-452472606,ltseeley,"Added one commit, ""Remove type check in _broadcast_pbft_message""",2019-01-08 22:19:21,2019-01-08 22:19:21
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/70,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/454074670,https://github.com/hyperledger/sawtooth-pbft/pull/70#issuecomment-454074670,vaporos,"I think any panic!()s should have a comment above them with justification, so when we are looking at this later, we know it was intentional and not laziness.

Use of panic!() at lower layers does not seem like a good idea. It should be propagated up where the upper layer can properly log the problem and then exit with an error. In other words, regardless of whether its recoverable or assert-like, I think it should be propagated up. With this current approach, when run in systemd, you are never going to see anything in a sawtooth log and will have to be savvy enough to extract it to systemd's stderr output.",2019-01-14 16:46:30,2019-01-14 16:46:30
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/70,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/454085215,https://github.com/hyperledger/sawtooth-pbft/pull/70#issuecomment-454085215,peterschwarz,"I don't disagree with that - panics should be used very sparsely.  The panics mentioned above could be removed in favor of error propagation.  They do, however, represent programmer error (invalid state transitions, after the state transition has already been tested), so this may be more of a case where the panic should be the right thing.",2019-01-14 17:15:27,2019-01-14 17:15:27
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/70,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/454088235,https://github.com/hyperledger/sawtooth-pbft/pull/70#issuecomment-454088235,ltseeley,"The panics do represent programmer error, but they are also potentially recoverable (i.e. if the node gets stuck in a state somehow, it can still catch-up and rejoin the network). It's also worth noting that a programmer error here won't violate safety guarantees or anything like that. So maybe there is a case to be made for panicking, but in my opinion that's a bit extreme for this particular issue.",2019-01-14 17:23:56,2019-01-14 17:23:56
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/70,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/454135702,https://github.com/hyperledger/sawtooth-pbft/pull/70#issuecomment-454135702,peterschwarz,If they are recoverable than propagated errors make far more sense than panics.  I would rather we go that route.,2019-01-14 19:43:25,2019-01-14 19:43:25
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/70,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/454143416,https://github.com/hyperledger/sawtooth-pbft/pull/70#issuecomment-454143416,ltseeley,"Replaced switch_phase commit with new one: ""Update switch_phase method to return Result""",2019-01-14 20:07:12,2019-01-14 20:07:12
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/55,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/445820014,https://github.com/hyperledger/sawtooth-pbft/pull/55#issuecomment-445820014,agunde406,Looks like you meant to squash the second commit,2018-12-10 13:45:36,2018-12-10 13:45:36
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/54,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/445895864,https://github.com/hyperledger/sawtooth-pbft/pull/54#issuecomment-445895864,ltseeley,Based on #58,2018-12-10 17:15:46,2018-12-10 17:15:46
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/45,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/442883501,https://github.com/hyperledger/sawtooth-pbft/pull/45#issuecomment-442883501,agunde406,This PR needs to be rebased,2018-11-29 15:50:09,2018-11-29 15:50:09
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/41,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/439962382,https://github.com/hyperledger/sawtooth-pbft/pull/41#issuecomment-439962382,ltseeley,@aludvik not until dynamic membership has actually been implemented (same with CFT test and catch-up procedure),2018-11-19 16:50:55,2018-11-19 16:50:55
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/41,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/439962592,https://github.com/hyperledger/sawtooth-pbft/pull/41#issuecomment-439962592,aludvik,Gotcha,2018-11-19 16:51:28,2018-11-19 16:51:28
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/38,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/438304538,https://github.com/hyperledger/sawtooth-pbft/pull/38#issuecomment-438304538,knkski,"@aludvik: I can't comment on some of your feedback for some reason, but I think we should move to PBFT being able to construct the `Consensus*` protobuf messages itself. This will fix the `""myself""` issue, the empty hash check in `verify_peer_message_hash`, and allow us to test `Node.on_block_new` in the unit tests.

If we don't want to do that, I think we should assume that the primary node approves of the block, and only require `2f` votes (and check that the primary didn't then insert a vote itself), and skip including the vote from the primary in the seal.",2018-11-13 15:22:06,2018-11-13 15:22:06
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/37,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/437516295,https://github.com/hyperledger/sawtooth-pbft/pull/37#issuecomment-437516295,knkski,"I agree that it's a high-priority item, but I don't think our time is currently well-served by having to manually notice and go and trigger the failing builds ourselves until we can fix the issue.",2018-11-09 22:34:44,2018-11-09 22:34:44
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/37,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/437895436,https://github.com/hyperledger/sawtooth-pbft/pull/37#issuecomment-437895436,agunde406,I agree with Logan. This will cause extra builds when they should fail as well as try to deal with the nondetermsitic failure. ,2018-11-12 14:12:34,2018-11-12 14:12:34
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/33,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/435132974,https://github.com/hyperledger/sawtooth-pbft/pull/33#issuecomment-435132974,knkski,"PBFT has to remain on Xenial, so closing this in favor of fixing things over in #30",2018-11-01 18:10:06,2018-11-01 18:10:06
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/31,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/434742737,https://github.com/hyperledger/sawtooth-pbft/pull/31#issuecomment-434742737,knkski,"@aludvik: I don't expect this pinning to last very long, but the only other alternative that I can see is to just wait until they either unbreak things themselves, or until the `clippy::all` syntax is stabilized",2018-10-31 15:56:05,2018-10-31 15:56:05
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/31,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/434800077,https://github.com/hyperledger/sawtooth-pbft/pull/31#issuecomment-434800077,knkski,"@aludvik, @ltseeley: The maintainer of `rust-protobuf` was quite responsive, and pushed out `2.1.4` without the breaking commit, so I unpinned the version in #32. One of those cases where it would've been easier to just be lazy and wait for the fix :P",2018-10-31 18:35:12,2018-10-31 18:35:12
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/30,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/434785170,https://github.com/hyperledger/sawtooth-pbft/pull/30#issuecomment-434785170,aludvik,"I think this is still busted because of this: https://github.com/hyperledger/sawtooth-core/pull/1933
",2018-10-31 17:50:45,2018-10-31 17:50:45
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/29,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/434774963,https://github.com/hyperledger/sawtooth-pbft/pull/29#issuecomment-434774963,knkski,Closing in favor of #30 ,2018-10-31 17:22:33,2018-10-31 17:22:33
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/16,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/432803270,https://github.com/hyperledger/sawtooth-pbft/pull/16#issuecomment-432803270,knkski,"@ltseeley: Right now we've got groups of dependencies broken up (see the `std::*` imports in `config.rs`), and groups of imports in different orders across files (sometimes `std` is first, sometimes it's not). Would you agree that we should at least fix those issues?

As far as one group vs multiple, it seems simpler to group them all into one and let `cargo fmt` handle the rest. There's then no bikeshedding about how to group imports, and which order the groups go in. There's also less manual verification that the style isn't being violated in code reviews (we just need to check that all imports are in one group, `cargo fmt` will verify the rest). That being said, I don't feel particularly strongly about this second bit. Does anyone else have strong opinions on this?",2018-10-24 19:48:59,2018-10-24 19:48:59
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/16,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/433035232,https://github.com/hyperledger/sawtooth-pbft/pull/16#issuecomment-433035232,agunde406,"I prefer to group the imports by standard modules, external crates, and our code. This helps with readability of the imports. ",2018-10-25 12:42:06,2018-10-25 12:42:06
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/16,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/433082131,https://github.com/hyperledger/sawtooth-pbft/pull/16#issuecomment-433082131,peterschwarz,"While I can see the merits of the readability comments the others have added, I'm more inclined to agree with the ""let `rustfmt` sort them"" argument.  As an open source project, with a growing number of contributors with various native languages, one person's readability ordering is another person's noise.  `rustfmt` removes the need for that discussion and makes it a build server decision.

Now, if `rustfmt` could also join all the imports from the same module into a single instance of the bracket syntax, that would be something to clean up another area of bikeshedding...",2018-10-25 14:51:33,2018-10-25 14:51:33
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/16,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/433087285,https://github.com/hyperledger/sawtooth-pbft/pull/16#issuecomment-433087285,vaporos,"I think it would be great to have a single approach overall. I don't think grouping them into a single group is necessarily the best approach. The three groups Andi mentioned are the three I would normally categorize and seems clearer to me, with maybe a slight modification - standard language, external crates, and internal project. (The difference being that it's not about whether we wrote it, but whether it's part of the project.)",2018-10-25 15:04:39,2018-10-25 15:04:39
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/16,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/433089547,https://github.com/hyperledger/sawtooth-pbft/pull/16#issuecomment-433089547,agunde406,What Shawn said about internal project is what I had intended in my first comment,2018-10-25 15:10:16,2018-10-25 15:10:16
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/16,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/433098528,https://github.com/hyperledger/sawtooth-pbft/pull/16#issuecomment-433098528,knkski,"@peterschwarz: That option exists in nightly:

https://github.com/rust-lang-nursery/rustfmt/blob/master/Configurations.md#merge_imports",2018-10-25 15:33:16,2018-10-25 15:33:16
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/16,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/433146712,https://github.com/hyperledger/sawtooth-pbft/pull/16#issuecomment-433146712,knkski,"At the risk of proposing a solution that's hated equally by everyone, with the release of Rust 1.30, we can prefix external code with `crate::`, internal code with `super::`, leave `std::` unprefixed, and then group everything into one big group and let `rustfmt` take care of sorting everything. It will sort `super::`, then `crate::`, then everything else (i.e. `std::`). I've pushed up a commit that enacts this change for PBFT so that people can see how they feel about it.",2018-10-25 17:55:43,2018-10-25 17:55:43
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/16,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/434033993,https://github.com/hyperledger/sawtooth-pbft/pull/16#issuecomment-434033993,bridger-herman,"I would tend to agree with @agunde406 and @vaporos about not having everything as one giant list of imports, but separating them into groups of language, crate, and internal dependencies. Overall I don't hate the `crate::` and `super::` prefixes though.",2018-10-29 18:48:45,2018-10-29 18:48:45
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/16,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/435044183,https://github.com/hyperledger/sawtooth-pbft/pull/16#issuecomment-435044183,knkski,"Updated this PR to group the imports by `std`, external, and internal",2018-11-01 13:41:13,2018-11-01 13:41:13
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/15,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/432377067,https://github.com/hyperledger/sawtooth-pbft/pull/15#issuecomment-432377067,aludvik,Rebased and fixed lint,2018-10-23 19:00:29,2018-10-23 19:00:29
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/15,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/432744608,https://github.com/hyperledger/sawtooth-pbft/pull/15#issuecomment-432744608,aludvik,Rebased on persistent storage changes,2018-10-24 17:06:28,2018-10-24 17:06:28
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/15,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/432752951,https://github.com/hyperledger/sawtooth-pbft/pull/15#issuecomment-432752951,aludvik,"Fixed failing unit test, changed how idle timeout is started.",2018-10-24 17:28:17,2018-10-24 17:28:17
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/11,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/431991742,https://github.com/hyperledger/sawtooth-pbft/pull/11#issuecomment-431991742,knkski,Closing in favor of #10 ,2018-10-22 21:21:27,2018-10-22 21:21:27
https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/8,https://api.github.com/repos/hyperledger/sawtooth-pbft/issues/comments/431059535,https://github.com/hyperledger/sawtooth-pbft/pull/8#issuecomment-431059535,aludvik,"@knkski hold off on merging until https://github.com/hyperledger/sawtooth-core/pull/1903 is merged, and then merge ASAP",2018-10-18 15:43:41,2018-10-18 15:43:41
