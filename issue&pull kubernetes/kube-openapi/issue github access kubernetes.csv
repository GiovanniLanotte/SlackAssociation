name repository,creator user,url_html issue,url_api issue,title,body,state,pull request,data open,updated at
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/pull/1,https://api.github.com/repos/kubernetes/kube-openapi/issues/1,Prevent cycles in reference walker,Addressing comments in https://github.com/kubernetes/kubernetes/pull/48861 (except the fuzzy test that will deserve its own PR).,closed,True,2017-07-28 00:52:59,2017-07-28 21:24:21
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/pull/2,https://api.github.com/repos/kubernetes/kube-openapi/issues/2,BugFIX: Remove extra not operator,I am going to self LGTM this as it was an LGTMed PR that we had a typo in and it causes the main PR to fail.,closed,True,2017-08-01 10:30:40,2017-08-01 10:31:20
kube-openapi,gmarek,https://github.com/kubernetes/kube-openapi/pull/3,https://api.github.com/repos/kubernetes/kube-openapi/issues/3,Add more debug info to openapi generator,"@mbohlool PTAL

cc @sttts ",closed,True,2017-08-03 07:25:26,2017-08-11 09:45:21
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/pull/4,https://api.github.com/repos/kubernetes/kube-openapi/issues/4,Improve performance of CloneSpec,CloneSpec should check for conflicts first and clone only if there is a conflict and a need to rename the spec. This PR addresses that (as well as adding gitignore file).,closed,True,2017-08-21 08:45:50,2017-08-23 11:47:51
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/pull/5,https://api.github.com/repos/kubernetes/kube-openapi/issues/5,Add MergeSpecsIgnorePathConflict,MergeSpecsIgnorePathConflict is a new merge method that ignores path conflicts. It is useful if we want the destination has priority over source in serving paths.,closed,True,2017-08-25 09:53:11,2017-08-25 10:01:52
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/pull/6,https://api.github.com/repos/kubernetes/kube-openapi/issues/6,Enable travis ci,,closed,True,2017-08-25 10:02:42,2017-08-25 21:31:52
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/pull/7,https://api.github.com/repos/kubernetes/kube-openapi/issues/7,Enable travis ci,,closed,True,2017-08-25 21:32:25,2017-08-29 22:11:57
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/pull/8,https://api.github.com/repos/kubernetes/kube-openapi/issues/8,Bugfix in MergeSpecsIgnorePathConflict,We had a bug in MergeSpecsIgnorePathConflict that would fail aggregation if all paths were conflicting. This PR fixes that.,closed,True,2017-08-29 22:11:23,2017-08-30 10:06:55
kube-openapi,mengqiy,https://github.com/kubernetes/kube-openapi/pull/9,https://api.github.com/repos/kubernetes/kube-openapi/issues/9,Move parsing code from kubernetes repo to this repo,"Comparing to https://github.com/kubernetes/kubernetes/tree/master/pkg/kubectl/cmd/util/openapi
- validation is not moved since it depends on https://github.com/kubernetes/kubernetes/blob/master/pkg/kubectl/cmd/util/openapi/validation/BUILD#L40
- openapi_cache.go & openapi_cache_test.go will be deleted in https://github.com/kubernetes/kubernetes/pull/50404/files#diff-924015a54cbffd96c80a6551d2bd05ee
- openapi_getter.go & openapi_getter_test.go depends on client-go. Maybe should not be moved. ",closed,True,2017-08-30 22:40:18,2017-08-31 21:04:38
kube-openapi,mengqiy,https://github.com/kubernetes/kube-openapi/pull/10,https://api.github.com/repos/kubernetes/kube-openapi/issues/10,Move openapi proto parsing and indexing,"Move openapi proto parsing and indexing from main repo to this repo.
The code includes parsing and indexing logic.
They are NOT depend on any other k8s repo.

/assign @mbohlool @apelisse ",closed,True,2017-08-31 21:06:38,2017-09-06 18:28:23
kube-openapi,jim-minter,https://github.com/kubernetes/kube-openapi/pull/11,https://api.github.com/repos/kubernetes/kube-openapi/issues/11,initialise schemaTypeFormatMap once at package level,initialise schemaTypeFormatMap once at package level instead of every time GetOpenAPITypeFormat is called,closed,True,2017-09-05 15:55:48,2017-09-06 09:17:46
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/12,https://api.github.com/repos/kubernetes/kube-openapi/issues/12,proto: Index by model name rather than GVK,"Remove completely the notion of Group-version-kind from this package,
as we'll move it where it's actually relevant. This removes the
parsing/constructing which was kind of out of place.

Also allow to return the full list of models. The code in kubernetes
will get all these models, and then index by gvk.",closed,True,2017-10-16 23:44:05,2017-10-17 22:36:32
kube-openapi,tamalsaha,https://github.com/kubernetes/kube-openapi/issues/13,https://api.github.com/repos/kubernetes/kube-openapi/issues/13,Seeking advice for generating openapi spec for CRD,"@mbohlool , is there an example on how to use this generator to generate/serve open api spec for CRDs from GO types?

From https://github.com/kubernetes-client/java/issues/96, I am looking for ways to generate non-Go client for CRDs. 

Any help is much appreciated!",closed,False,2017-10-18 03:36:56,2018-04-09 08:08:02
kube-openapi,marun,https://github.com/kubernetes/kube-openapi/pull/14,https://api.github.com/repos/kubernetes/kube-openapi/issues/14,Enable generation to a vendored output path,"The PR adds a way to generate OpenAPI spec in an output path in the `vendor/` folder by using the argument to ``--output-package`` verbatim.  Previously, the argument to ``--output-package`` was canonicalized to an importable package name (e.g. ``vendor/k8s.io/kubernetes`` => ``k8s.io/kubernetes``) which would result in the file being generated outside of the vendoring repo (e.g. ``$GOPATH/src/k8s.io/kubernetes`` instead of ``$GOPATH/src/k8s.io/federation/vendor/k8s.io/kubernetes``). 

This is in support of generating openapi code for vendored kube by federation as per https://github.com/kubernetes/kubernetes/issues/54335.

cc: @mbohlool ",closed,True,2017-10-21 04:34:44,2017-10-24 18:23:56
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/15,https://api.github.com/repos/kubernetes/kube-openapi/issues/15,proto: Add model validation,"This new code allows someone to validate that a given object (as a
`map[string]interface{}`) is valid against a specific model.

There are no test in this code, since the old test are depending on
apimachinery code that we can't import here. A nice follow-up would be
to add small unit-tests to validate each individual part.",closed,True,2017-10-27 21:18:34,2017-10-30 18:40:31
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/16,https://api.github.com/repos/kubernetes/kube-openapi/issues/16,Add util function to convert package/type path to OpenAPI name,"Add a function to convert the package/type path (e.g. parsed by gengo) into openapi name.

Examples:
Input:  k8s.io/api/core/v1.Pod
Output: io.k8s.api.core.v1.Pod

Input:  k8s.io/api/core/v1
Output: io.k8s.api.core.v1",closed,True,2017-10-30 19:32:25,2018-02-01 22:19:25
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/17,https://api.github.com/repos/kubernetes/kube-openapi/issues/17,Make proto validation errors public,Error types should have been public ...,closed,True,2017-11-01 18:29:56,2017-11-01 18:35:05
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/18,https://api.github.com/repos/kubernetes/kube-openapi/issues/18,New OpenAPI endpoint,"OpenAPI endpoint that includes spec version in name, but hides all other details in the header of the request and response. 

The design doc and deprecation process are tracked at: https://docs.google.com/document/d/19lEqE9lc4yHJ3WJAJxS_G7TcORIJXGHyq3wpwcH28nU. 

The endpoints in [generic apiserver](https://github.com/kubernetes/kubernetes/blob/443908193d564736d02efdca4c9ba25caf1e96fb/staging/src/k8s.io/apiserver/pkg/server/routes/openapi.go#L35) and [aggregator](https://github.com/kubernetes/kubernetes/blob/443908193d564736d02efdca4c9ba25caf1e96fb/staging/src/k8s.io/kube-aggregator/pkg/controllers/openapi/aggregator.go#L112-L113) will be deprecated. ",closed,True,2017-11-02 00:43:32,2018-02-01 22:09:06
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/issues/19,https://api.github.com/repos/kubernetes/kube-openapi/issues/19,Create a kube-openapi documentation,Write a full documentation on how to use Kube-OpenAPI.,open,False,2017-11-02 01:18:22,2019-03-08 23:44:30
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/20,https://api.github.com/repos/kubernetes/kube-openapi/issues/20,Fix generator to work without pre-existing Go files in target package,"This is needed to create openapi specs in 3rdparty project via k8s.io/code-generator/generate-{,internal}-groups.sh.

Compare https://github.com/kubernetes/kubernetes/pull/55472, especially https://github.com/kubernetes/kubernetes/pull/55472/commits/16e0e4eb77e955d9a166e07ad38aba4be28b8376#diff-2ab730acbe5670b4be0131fdf1787dc2R113.",closed,True,2017-11-10 14:11:46,2017-12-05 21:25:52
kube-openapi,ericchiang,https://github.com/kubernetes/kube-openapi/pull/21,https://api.github.com/repos/kubernetes/kube-openapi/issues/21,generators: let types provide defs without importing kube-openapi,"This change lets types override their generated spec definition
with methods that don't import kube-openapi. Doing this will let
client-go remove its openapi imports, eliminating ~10 transitive
dependencies for Kubernetes clients.

To override the generated spec definition, a type can now implement
the following two methods:

	func (_ MicroTime) OpenAPISchemaType() []string {
		return []string{""string""}
	}

	func (_ MicroTime) OpenAPISchemaFormat() string {
		return ""date-time""
	}

POC can be found here: https://github.com/ericchiang/kubernetes/commit/b0282c59f05df721e769fb9d34ab52fe9a8db4a5

cc @sttts @mbohlool ",closed,True,2017-11-11 01:19:00,2017-12-11 22:02:39
kube-openapi,luksa,https://github.com/kubernetes/kube-openapi/pull/22,https://api.github.com/repos/kubernetes/kube-openapi/issues/22,Aggregator now re-uses the model definition that it had renamed previously,"Before this fix, the aggregator would create multiple identical
copies (but with a different name) of the same object type.

This fixes https://github.com/kubernetes/kubernetes/issues/55941",closed,True,2017-11-17 12:13:48,2018-01-30 23:20:18
kube-openapi,rutsky,https://github.com/kubernetes/kube-openapi/pull/23,https://api.github.com/repos/kubernetes/kube-openapi/issues/23,Fix mapping and kind validation errors when array is passed,"""Kind"" is map with specific structure.
",closed,True,2017-11-20 00:17:07,2018-01-08 22:22:31
kube-openapi,luksa,https://github.com/kubernetes/kube-openapi/pull/24,https://api.github.com/repos/kubernetes/kube-openapi/issues/24,"Fix schema merging, so references are updated properly","When merging two schemas with conflicting definitions of the same object,
the aggregator would rename one of them, but wouldn't update all the
references ($ref), because it was updating copies due to golang's
pass-by-value.

Fixes https://github.com/kubernetes/kubernetes/issues/56417",closed,True,2017-11-27 15:02:43,2018-02-01 01:41:05
kube-openapi,luksa,https://github.com/kubernetes/kube-openapi/pull/25,https://api.github.com/repos/kubernetes/kube-openapi/issues/25,"Handle ""any value"" openapi definitions properly",This will allow us to support the k8s RawExtension object,closed,True,2017-11-27 17:45:35,2017-12-11 23:56:11
kube-openapi,amir,https://github.com/kubernetes/kube-openapi/issues/26,https://api.github.com/repos/kubernetes/kube-openapi/issues/26,Adding Validation Constraints ,"Hi,

I'm interested in tackling https://github.com/kubernetes/kubernetes/issues/8116 and https://github.com/kubernetes/kubernetes/issues/24562. I understand that this project wishes to remain free of Kubernetes particularities, and I also see there's an attempt at integrating kube-openapi at https://github.com/kubernetes/kubernetes/pull/55472.

So my question is if my end goal is to add enums to the generated swagger/openapi Json (or format regexp for Strings), should I start by adding the support to this project? Is this project intended to replace go-restful?",closed,False,2017-12-11 11:58:00,2018-06-07 23:13:20
kube-openapi,xinyanmsft,https://github.com/kubernetes/kube-openapi/issues/27,https://api.github.com/repos/kubernetes/kube-openapi/issues/27,changes around VisitArbitary rename broke building an initializer,"we have an Go app that run as an Kubernetes initializer. It imports the following:

    ""k8s.io/client-go/tools/clientcmd""

    ""github.com/ghodss/yaml""

    ""k8s.io/api/apps/v1beta1""
    corev1 ""k8s.io/api/core/v1""
    metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
    ""k8s.io/apimachinery/pkg/fields""
    ""k8s.io/apimachinery/pkg/runtime""
    ""k8s.io/apimachinery/pkg/types""
    ""k8s.io/apimachinery/pkg/util/strategicpatch""
    ""k8s.io/apimachinery/pkg/watch""
    ""k8s.io/client-go/kubernetes""
    ""k8s.io/client-go/rest""
    ""k8s.io/client-go/tools/cache""

And then invokes 2 two merge this way: 
patchBytes, err := strategicpatch.CreateTwoWayMergePatch(oldData, newData, v1beta1.Deployment{})

This works fine up till recently, where building the code failed with the following error:

# k8s.io/apimachinery/pkg/util/strategicpatch
../k8s.io/apimachinery/pkg/util/strategicpatch/meta.go:166:17: cannot use kindItem (type *kindItem) as type ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor in argument to s.Schema.Accept:
        *kindItem does not implement ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor (missing VisitArbitrary method)
../k8s.io/apimachinery/pkg/util/strategicpatch/meta.go:181:17: cannot use sliceItem (type *sliceItem) as type ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor in argument to s.Schema.Accept:
        *sliceItem does not implement ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor (missing VisitArbitrary method)
../k8s.io/apimachinery/pkg/util/strategicpatch/types.go:55:5: cannot use kindItem literal (type *kindItem) as type LookupPatchItem in assignment:
        *kindItem does not implement LookupPatchItem (missing VisitArbitrary method)
../k8s.io/apimachinery/pkg/util/strategicpatch/types.go:79:28: cannot use item (type *kindItem) as type ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor in argument to schema.SubSchema().Accept:
        *kindItem does not implement ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor (missing VisitArbitrary method)
../k8s.io/apimachinery/pkg/util/strategicpatch/types.go:118:5: cannot use sliceItem literal (type *sliceItem) as type LookupPatchItem in assignment:
        *sliceItem does not implement LookupPatchItem (missing VisitArbitrary method)
../k8s.io/apimachinery/pkg/util/strategicpatch/types.go:146:28: cannot use item (type *sliceItem) as type ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor in argument to schema.SubSchema().Accept:
        *sliceItem does not implement ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor (missing VisitArbitrary method)
../k8s.io/apimachinery/pkg/util/strategicpatch/types.go:169:18: cannot use item (type *sliceItem) as type ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor in argument to subschema.Accept:
        *sliceItem does not implement ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor (missing VisitArbitrary method)

",closed,False,2017-12-11 20:55:26,2017-12-12 22:16:57
kube-openapi,ericchiang,https://github.com/kubernetes/kube-openapi/pull/28,https://api.github.com/repos/kubernetes/kube-openapi/issues/28,"remove VisitArbitrary from SchemaVisitor, make different interface","Lots of things in k8s.io/kubernetes implement SchemaVisitor, and
adding a new interface method breaks that.[1] Instead of adding
VisitArbitrary directly to that interface introduce a new
SchemaVisitorArbitrary that types can optionally implement to visit
an arbitrary type.

/assign @luksa
/assign @apelisse

Modifies change in https://github.com/kubernetes/kube-openapi/pull/25

Fixes https://github.com/kubernetes/kube-openapi/issues/27

[1] https://github.com/kubernetes/kubernetes/pull/57059#issuecomment-350896736",closed,True,2017-12-12 00:09:25,2017-12-12 22:32:51
kube-openapi,amir,https://github.com/kubernetes/kube-openapi/pull/29,https://api.github.com/repos/kubernetes/kube-openapi/issues/29,Add the Pattern if it's specified,This is related to #26 and demonstrates the easiest way to add `spec.SchemaProps.Pattern` support to an Schema but admittedly a crude attempt. I'd like to add Pattern and Enum support given pointers on what's the preferred way.,closed,True,2017-12-14 13:58:03,2018-01-23 10:24:09
kube-openapi,spiffxp,https://github.com/kubernetes/kube-openapi/pull/30,https://api.github.com/repos/kubernetes/kube-openapi/issues/30,Add code-of-conduct.md,"Refer to kubernetes/community as authoritative source for code of conduct

ref: kubernetes/community#1527",closed,True,2017-12-20 18:33:07,2018-01-08 22:06:42
kube-openapi,font,https://github.com/kubernetes/kube-openapi/issues/31,https://api.github.com/repos/kubernetes/kube-openapi/issues/31,OpenAPI codegen should allow providing list of directories to search for dependencies,"When running the `openapi-gen` code generator in the [kubernetes/cluster-registry](https://github.com/kubernetes/cluster-registry) repo executed by the [lines in this script](https://github.com/kubernetes/cluster-registry/blob/1dbd8e00c25532ca111a88d0c060bdd8ea47ebc1/hack/update-codegen.sh#L114-L120), I see several `could not import <some-package-import-path>` errors for dependencies that are located within the vendor directory of the repo. For example:

```
I1220 16:35:12.455910    9557 parse.go:418] type checker: /tmp/gopathnU5sCI0j/src/k8s.io/apimachinery/pkg/apis/meta/v1/micro_time.go:23:10: could not import k8s.io/kube-openapi/pkg/common (unable to import ""k8s.io/kube-openapi/pkg/common"": cannot find package ""k8s.io/kube-openapi/pkg/common"" in any of:
	/usr/local/go/src/k8s.io/kube-openapi/pkg/common (from $GOROOT)
	/tmp/gopathnU5sCI0j/src/k8s.io/kube-openapi/pkg/common (from $GOPATH))
```
The reason for these errors is that the `type checker` seems to want the import located in the src directory of either the Go toolchain installation or the GOPATH.

Can we instead allow the tool to search a particular comma separated list of directories? This would allow one to specify the vendor directory within their repo to satisfy them all.

**How to reproduce it**:
To reproduce this, add `--v=10` and possibly also `--logtostderr` (or just look for the file `/tmp/openapi-gen.*`) in the `openapi-gen` step at: https://github.com/kubernetes/cluster-registry/blob/cc52bb00104bda72a2a14fdf49d71630e81c1fe8/hack/update-codegen.sh#L114-L120
to see all the errors.
  ",closed,False,2018-01-03 19:53:07,2019-01-04 08:17:35
kube-openapi,ericchiang,https://github.com/kubernetes/kube-openapi/pull/32,https://api.github.com/repos/kubernetes/kube-openapi/issues/32,generators: elide struct type when generating maps,"./hack/verify-gofmt.sh was not happy with the generated code, which
isn't compliant with ""gofmt -s"". Elide the struct type when
generating OpenAPI definitions for a map value.

Example failure from (https://github.com/kubernetes/kubernetes/pull/57059):
https://k8s-gubernator.appspot.com/build/kubernetes-jenkins/pr-logs/pull/57059/pull-kubernetes-verify/70488/

Follow up to https://github.com/kubernetes/kube-openapi/pull/21

/cc @mbohlool ",closed,True,2018-01-06 16:54:20,2018-01-08 22:20:34
kube-openapi,brendandburns,https://github.com/kubernetes/kube-openapi/issues/33,https://api.github.com/repos/kubernetes/kube-openapi/issues/33,openapi spec should have authMethods section,See: https://github.com/kubernetes-client/java/issues/163,closed,False,2018-01-11 06:24:57,2018-08-31 22:31:54
kube-openapi,jessesuen,https://github.com/kubernetes/kube-openapi/pull/34,https://api.github.com/repos/kubernetes/kube-openapi/issues/34,generators: add support for nested lists,"This change makes it possible to generate OpenAPI models when a field is a list-of-lists. 

Consider the following type:

```golang
// GeoJSON
// +k8s:openapi-gen=true
type GeoJSON struct {
    Name        string    `json:""name""`
    Coordinates [][]int64 `json:""coordinates""`
}
```

When the openapi codegen is run against it, it currently results in the following error:
```
ERROR: logging before flag.Parse: E0128 23:09:41.045732   55143 openapi.go:338] Error when generating: coordinates, Coordinates [][]int64
ERROR: logging before flag.Parse: F0128 23:09:41.045761   55143 main.go:44] Error: Failed executing generator: some packages had errors:
slice Element kind Slice is not supported in [][]int64
```

Nested lists has been supported since Swagger 2.0. See:
https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#itemsObject

![image](https://user-images.githubusercontent.com/12677113/35505140-03e6ba6e-049a-11e8-8965-dc7f4e067115.png)
",closed,True,2018-01-29 10:16:13,2018-01-31 18:59:49
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/35,https://api.github.com/repos/kubernetes/kube-openapi/issues/35,Update comments to reflect correct deprecation schedule,,closed,True,2018-02-06 19:21:13,2018-02-16 21:26:19
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/36,https://api.github.com/repos/kubernetes/kube-openapi/issues/36,Endpoint properly handles Accept header,"Sort Accept header with q parameter

**NOTE:** I manually changed `Godep.json`. `goautoneg` is used in kubernetes already. ",closed,True,2018-02-07 18:30:36,2018-02-16 21:23:31
kube-openapi,munnerz,https://github.com/kubernetes/kube-openapi/pull/37,https://api.github.com/repos/kubernetes/kube-openapi/issues/37,add support for openapiv3 json output format,"This PR implements initial support for generating an OpenAPI v3 schema from a resource type.

Paired with a change to the kubernetes repo to openapi-gen we can use this to generate openapiv3 schemas for validating CRDs.

I've used the gengo `parser` package to parse the types, and have basically just reimplemented the existing `openAPITypeWriter` but constructing `github.com/go-openapi/spec` (i.e. the ones output by the existing openapi-gen) types and then serialising them to JSON.

A schema generated for a [cert-manager Certificate resource](https://github.com/jetstack/cert-manager/blob/master/pkg/apis/certmanager/v1alpha1/types.go#L209):

```json
{
  ""description"": ""Certificate is a type to represent a Certificate from ACME"",
  ""properties"": {
    ""spec"": {
      ""properties"": {
        ""acme"": {
          ""properties"": {
            ""config"": {
              ""type"": ""array"",
              ""additionalProperties"": {
                ""properties"": {
                  ""dns01"": {
                    ""properties"": {
                      ""provider"": {
                        ""type"": ""string""
                      }
                    }
                  },
                  ""domains"": {
                    ""type"": ""array"",
                    ""additionalProperties"": {
                      ""type"": ""string""
                    }
                  },
                  ""http01"": {
                    ""properties"": {
                      ""ingress"": {
                        ""type"": ""string""
                      },
                      ""ingressClass"": {
                        ""type"": ""string""
                      }
                    }
                  }
                }
              }
            }
          }
        },
        ""commonName"": {
          ""type"": ""string""
        },
        ""dnsNames"": {
          ""description"": ""DNSNames is a list of subject alt names to be used on the Certificate"",
          ""type"": ""array"",
          ""additionalProperties"": {
            ""type"": ""string""
          }
        },
        ""issuerRef"": {
          ""description"": ""IssuerRef is a reference to the issuer for this certificate. If the namespace field is not set, it is assumed to be in the same namespace as the certificate. If the namespace field is set to the empty value \""\"", a ClusterIssuer of the given name will be used. Any other value is invalid."",
          ""properties"": {
            ""kind"": {
              ""type"": ""string""
            },
            ""name"": {
              ""type"": ""string""
            }
          }
        },
        ""secretName"": {
          ""type"": ""string""
        }
      }
    },
    ""status"": {
      ""properties"": {
        ""acme"": {
          ""properties"": {
            ""orderURL"": {
              ""type"": ""string""
            }
          }
        },
        ""conditions"": {
          ""type"": ""array"",
          ""additionalProperties"": {
            ""properties"": {
              ""lastTransitionTime"": {
                ""description"": ""LastTransitionTime is the timestamp corresponding to the last status change of this condition."",
                ""properties"": {
                  ""Time"": {
                    ""type"": ""string"",
                    ""format"": ""date-time""
                  }
                }
              },
              ""message"": {
                ""type"": ""string""
              },
              ""reason"": {
                ""type"": ""string""
              },
              ""status"": {
                ""type"": ""string""
              },
              ""type"": {
                ""type"": ""string""
              }
            }
          }
        }
      }
    }
  }
}
```

Open questions:

* If you look closely above, you can see that `lastTransitionTime` has been encoded as a struct with a field named `Time`.

This isn't going to validate correctly... I notice in the existing openapi.go file, there is some mention of skipping json refs for 'well known' fields (https://github.com/kubernetes/kube-openapi/blob/master/pkg/generators/openapi.go#L403). Here it can be handled a bit differently, as we defer resolving types in the Golang generator.

We need to teach the `generateMembers` function about these kinds of fields, and somehow instruct the calling method to set the `type` and `format` on *its own* schema. These feels hacky. Does anyone know how we can better handle this?

* In order to skip `metadata`, `kind` and `apiVersion` fields, I have restricted the generator to only generating schemas for `spec` and `status` fields. @nikhita does CRD validation already impose this restriction? I don't see it mentioned on `kubernetes.io/docs` (https://kubernetes.io/docs/tasks/access-kubernetes-api/extend-api-custom-resource-definitions/#validation)

/cc @sttts @frankgreco @deads2k

ref https://github.com/kubernetes/kubernetes/issues/59154",open,True,2018-02-12 22:37:24,2019-03-10 17:24:08
kube-openapi,luksa,https://github.com/kubernetes/kube-openapi/pull/38,https://api.github.com/repos/kubernetes/kube-openapi/issues/38,Client-side OpenAPI schema fixes,"These changes allow the client to properly handle the server-side changes planned to be introduced in kube v1.11:
- RawExtension type will be removed and replaced with `""type"": ""object""` without either the `additionalProperties` or the `properties` field.
- All type definitions stemming from Go structs will contain the `""type"": ""object""` property (next to the `properties` field, which they already contain).",closed,True,2018-02-21 16:12:21,2018-06-20 10:21:07
kube-openapi,AdamDang,https://github.com/kubernetes/kube-openapi/pull/39,https://api.github.com/repos/kubernetes/kube-openapi/issues/39,"Typo fix ""definition""->""definitions""","line 162: ""all used definition in the provided spec"" .
line 175: ""all definition used by it ""
 ""definitions"" should be used there.",closed,True,2018-03-10 14:05:50,2018-04-13 21:22:29
kube-openapi,AdamDang,https://github.com/kubernetes/kube-openapi/pull/40,https://api.github.com/repos/kubernetes/kube-openapi/issues/40,"Typo fix ""OpenAPIDefinitions""->""GetOpenAPIDefinitions""","line 35: ""OpenAPIDefinitions is collection of all definitions.""
It should be ""GetOpenAPIDefinitions"" here.",closed,True,2018-03-10 14:18:00,2018-04-03 00:31:56
kube-openapi,AdamDang,https://github.com/kubernetes/kube-openapi/pull/41,https://api.github.com/repos/kubernetes/kube-openapi/issues/41,"Typo fix ""to provides""->""to provide""","""... to provides access to it...""  appears 4 times in this doc.
We should use ""...to provide access to it..."".",closed,True,2018-03-10 14:45:17,2018-04-03 00:31:36
kube-openapi,AdamDang,https://github.com/kubernetes/kube-openapi/pull/42,https://api.github.com/repos/kubernetes/kube-openapi/issues/42,"Typo fix ""it's definition.""->"" to its definition."""," in line 146: ""...and return a referable name to it's definition."" 
""it's"" should be replaced with ""its"" .",closed,True,2018-03-11 14:49:58,2018-04-03 00:28:34
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/43,https://api.github.com/repos/kubernetes/kube-openapi/issues/43,Refactor to make it easier to add extension tags,"Refactors openapi generator to make it easier to add extension tags within comments.
Refactored ""patchMergeStrategy"" and ""patchMergeKey"" extension tags.
No new functionality.
Current unit tests pass.
",closed,True,2018-04-02 20:22:08,2018-04-04 21:51:14
kube-openapi,AdamDang,https://github.com/kubernetes/kube-openapi/pull/44,https://api.github.com/repos/kubernetes/kube-openapi/issues/44,Some typo fix,"all used definition->all used definitions
to it's definition->to its definition
OpenAPIDefinitions->GetOpenAPIDefinitions
to provides->to provide",closed,True,2018-04-03 01:35:10,2018-04-03 20:49:35
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/45,https://api.github.com/repos/kubernetes/kube-openapi/issues/45,Sort map keys for deterministic testing,"Sort the map keys to ensure deterministic testing.
Fixes possible flaky test.",closed,True,2018-04-03 19:12:30,2018-04-03 20:39:51
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/46,https://api.github.com/repos/kubernetes/kube-openapi/issues/46,Added development section to README,"Added some notes on:

1) How to resolve dependencies after cloning repo
2) How to run unit tests on repo
3) How to develop in Kubernetes using this repo
4) How to run unit tests for this repo code within Kubernetes",closed,True,2018-04-04 18:33:51,2018-04-10 17:31:45
kube-openapi,thockin,https://github.com/kubernetes/kube-openapi/pull/47,https://api.github.com/repos/kubernetes/kube-openapi/issues/47,Use k8s GCR vanity URL,,closed,True,2018-04-06 17:16:50,2018-04-10 22:12:57
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/48,https://api.github.com/repos/kubernetes/kube-openapi/issues/48,Add listAttribute extension,"Adds comment tag ""listAttribute"" to extension ""x-kubernetes-list-attribute""",closed,True,2018-04-10 18:03:35,2018-04-11 16:40:04
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/49,https://api.github.com/repos/kubernetes/kube-openapi/issues/49,Added unit tests to util.go,Added simple unit tests to util.go,closed,True,2018-04-10 20:39:29,2018-04-10 22:12:24
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/50,https://api.github.com/repos/kubernetes/kube-openapi/issues/50,Multi-value extensions,"* Multi-value OpenAPI extensions (e.g. x-kubernetes-list-type-keys: ""port"", ""protocol"")
* Validation of extension enum values (e.g. x-kubernetes-patch-strategy must be either ""merge"" or ""retainKeys""). This validation only logs a warning now.
* Moved extension code into its own file.
* Unit tests for extension code.",closed,True,2018-04-12 23:42:31,2018-04-18 23:32:18
kube-openapi,nikhita,https://github.com/kubernetes/kube-openapi/issues/51,https://api.github.com/repos/kubernetes/kube-openapi/issues/51,openapi-gen lacks support for enum,"From @tamalsaha's issue https://github.com/kubernetes/kubernetes/issues/62325 and @mbohlool's suggestion to open an issue in this repo (https://github.com/kubernetes/kubernetes/issues/62325#issuecomment-381228343),

Currently I generate CRD schema validation using a pipeline like below:

```
types.go ---(openapi-gen) ---> openapi_generated.go ---(crd-validation)---> crd.yaml
```

While this works, openapi-gen does not generate spec information for enums . We would like to see this supported.

[1] crd-validation: https://github.com/ant31/crd-validation",closed,False,2018-04-14 12:29:41,2018-12-15 05:25:11
kube-openapi,nikhita,https://github.com/kubernetes/kube-openapi/issues/52,https://api.github.com/repos/kubernetes/kube-openapi/issues/52,Generate valid openapi spec for intstr.IntOrString,"From @tamalsaha's issue https://github.com/kubernetes/kubernetes/issues/62329 and @mbohlool's comment to create an issue in this repo (https://github.com/kubernetes/kubernetes/issues/62329#issuecomment-381227784),

Currently openapi-gen generated spec for intstr.IntOrString only allows string types. https://github.com/kubernetes/apimachinery/blob/5d4f0da8e5fde7cbadf8ab3ce5cfb76f86dd854e/pkg/util/intstr/intstr.go#L124 . This is incorrect and causes problem when used to generate CRD validation schema. I generate CRD schema validation using a pipeline like below:

```
types.go ---(openapi-gen) ---> openapi_generated.go ---(crd-validation)---> crd.yaml
```

One fix suggested by @sttts is to use schema like

```
{
  ""anyOf"": [
    { ""type"": ""string"" },
    { ""type"": ""number"" }
  ]
}
```

But anyOf is not defined in v2 spec so can't be be returned from IntOrString.OpenAPIDefinition() method. But when CRD schema is generated one can update the auto generated schema for IntOrStr to fix this issue. For example: https://github.com/appscode/kutil/pull/133/files

[1] crd-validation: https://github.com/ant31/crd-validation  

/cc @sttts @munnerz ",closed,False,2018-04-14 12:32:47,2018-12-12 16:25:12
kube-openapi,liggitt,https://github.com/kubernetes/kube-openapi/pull/53,https://api.github.com/repos/kubernetes/kube-openapi/issues/53,Split definitions into functions,"xref https://github.com/kubernetes/kubernetes/issues/62576

Cuts package size of the generated package by up to 75% (cut openapi package in kube from 44MB to 17MB, cut openapi package in openshift from 117MB to 33MB)

see result in kubernetes in  https://github.com/kubernetes/kubernetes/pull/62589 (specifically, [this commit, ignoring whitespace](https://github.com/kubernetes/kubernetes/pull/62589/commits/64716f15e3e9b28e1caa43e44d5b05be72733a4b?w=1))",closed,True,2018-04-15 01:55:17,2018-04-20 14:34:46
kube-openapi,jennybuckley,https://github.com/kubernetes/kube-openapi/pull/54,https://api.github.com/repos/kubernetes/kube-openapi/issues/54,Allow concurrent readers of the spec in OpenAPIService,"This PR adds a public function to the OpenAPIService to allow multiple processes to read the same underlying spec, while still allowing an entire new spec to set, and adds comments telling OpenAPIService users how to avoid race conditions.",closed,True,2018-04-19 20:50:47,2018-05-23 18:46:23
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/55,https://api.github.com/repos/kubernetes/kube-openapi/issues/55,More descriptive error messages for extensions,"* generateExtensions() is bifurcated into generateStructExtensions() and generateMemberExtensions(). Cross-extension validation is now possible.
* parseExtensions() now returns a list of errors
* add ""tag"" to extension struct (e.g. +listType) for better error reporting
",closed,True,2018-04-20 00:11:45,2018-04-20 21:36:56
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/56,https://api.github.com/repos/kubernetes/kube-openapi/issues/56,Start putting up documentation for the Go IDL,"This PR is the beginning of the documentation for the IDL. It's obviously not complete, the goal is to make sure we agree on the direction.",closed,True,2018-04-20 19:16:07,2018-04-23 17:06:32
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/57,https://api.github.com/repos/kubernetes/kube-openapi/issues/57,extension fields renaming,"extension struct rename two fields:
  tag -> idlTag
  name -> xName
",closed,True,2018-04-20 21:58:11,2018-04-20 23:04:05
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/58,https://api.github.com/repos/kubernetes/kube-openapi/issues/58,idl-doc: Further improvements,,closed,True,2018-04-23 17:27:58,2018-04-25 16:27:24
kube-openapi,jennybuckley,https://github.com/kubernetes/kube-openapi/pull/59,https://api.github.com/repos/kubernetes/kube-openapi/issues/59,Remove unnecessarily stored spec,"We store a reference, orgSpec, to the spec.Swagger (go typed openapi spec), but we never serve it. once the specBytes we serve are generated from the orgSpec we don't need a reference to the original spec anymore

@mbohlool ",closed,True,2018-04-23 21:35:00,2018-05-22 00:05:10
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/60,https://api.github.com/repos/kubernetes/kube-openapi/issues/60,[WIP] Validate extension type,"* validates member (field) extensions
* encapsulate extension attributes into struct
* add simple extension methods: hasAllowedValues, allowedValues, hasKind, kind, validateType
* No unit tests yet",closed,True,2018-04-24 00:14:17,2018-05-10 00:09:13
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/61,https://api.github.com/repos/kubernetes/kube-openapi/issues/61,Type validation for member/field extensions,"* validates member (field) extensions
* encapsulate extension attributes into struct
* add simple extension methods: hasAllowedValues, allowedValues, hasKind, kind, validateType",closed,True,2018-04-26 00:38:53,2018-05-10 20:47:43
kube-openapi,AdamDang,https://github.com/kubernetes/kube-openapi/pull/62,https://api.github.com/repos/kubernetes/kube-openapi/issues/62,Typo fix in openapi.go,compatability->compatibility,closed,True,2018-04-27 15:54:49,2018-05-01 01:57:53
kube-openapi,AdamDang,https://github.com/kubernetes/kube-openapi/pull/63,https://api.github.com/repos/kubernetes/kube-openapi/issues/63,Typo fix: compatability->compatibility,compatability->compatibility,closed,True,2018-04-29 03:55:25,2018-05-24 22:16:16
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/64,https://api.github.com/repos/kubernetes/kube-openapi/issues/64,Properly initialize spec.Definitions when merging specs,"fixes https://github.com/kubernetes/kubernetes/issues/63218

When aggregating openapi specs, depending on sort priority, a valid openapi spec with empty [`Definitions`](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#definitions-object) may become the first [specToReturn](https://github.com/kubernetes/kubernetes/blob/d4ab47518836c750f9949b9e0d387f20fb92260b/staging/src/k8s.io/kube-aggregator/pkg/controllers/openapi/aggregator.go#L200-L214). Currently the aggregator panics on ""assignment to entry in nil map"". This PR initialize the map if it's nil. ",closed,True,2018-05-01 20:29:29,2018-05-01 21:51:12
kube-openapi,AdamDang,https://github.com/kubernetes/kube-openapi/pull/65,https://api.github.com/repos/kubernetes/kube-openapi/issues/65,Typo fix in swagger.json: mulitple->multiple,mulitple->multiple,closed,True,2018-05-02 14:17:48,2018-05-24 22:14:50
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/issues/66,https://api.github.com/repos/kubernetes/kube-openapi/issues/66,Aggregator should not fail on OpenAPI specs with no definition or Path,"Recently I encountered a bug that aggregator failed because an OpenAPI spec did not have a Path item (null pointer exception). We should make sure all nullable fields are accounted for in the aggregation.

ref: https://github.com/kubernetes/kube-openapi/blob/39a7bf85c140f972372c2a0d1ee40adbf0c8bfe1/pkg/aggregator/aggregator.go#L145",closed,False,2018-05-04 20:31:45,2018-05-08 23:32:54
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/67,https://api.github.com/repos/kubernetes/kube-openapi/issues/67,Allow specs to have empty Paths in aggregation,"fixes https://github.com/kubernetes/kube-openapi/issues/66

Paths and PathItem may be empty, due to [ACL constraints](http://goo.gl/8us55a#securityFiltering).",closed,True,2018-05-08 21:42:49,2018-05-08 23:32:54
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/68,https://api.github.com/repos/kubernetes/kube-openapi/issues/68,Prepare cherry-picking #64 and #67 to release-1.10,"Preparing cherry-pick branch for two commits that need to be cherry-picked to k/k release-1.10

ref #66 ",closed,True,2018-05-09 01:01:56,2018-05-09 05:21:09
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/69,https://api.github.com/repos/kubernetes/kube-openapi/issues/69,Prepare cherry-picking #64 and #67 to release-1.9,"Preparing cherry-pick branch for two commits that need to be cherry-picked to k/k release-1.9

ref #66 ",closed,True,2018-05-09 01:07:58,2018-05-09 05:20:56
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/pull/70,https://api.github.com/repos/kubernetes/kube-openapi/issues/70,cherry-picking #64 and #67 to release-1.8,Cherry-pick 1.8 branch with two commits fixing #66 ,closed,True,2018-05-09 05:20:06,2018-05-09 23:32:56
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/pull/71,https://api.github.com/repos/kubernetes/kube-openapi/issues/71,cherry-picking #64 and #67 to release-1.8,Cherry-pick 1.8 branch with two commits fixing #66,closed,True,2018-05-09 23:33:45,2018-05-09 23:38:30
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/72,https://api.github.com/repos/kubernetes/kube-openapi/issues/72,Additional approvers and reviewers,Adds additional approvers and reviewers to the OWNERS file. The merge-bot will be updated separately to make OWNERS the source of truth.,closed,True,2018-05-10 18:25:12,2018-05-10 20:09:46
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/73,https://api.github.com/repos/kubernetes/kube-openapi/issues/73,More listType validations,,closed,True,2018-05-15 17:16:56,2018-10-20 20:43:14
kube-openapi,jennybuckley,https://github.com/kubernetes/kube-openapi/pull/74,https://api.github.com/repos/kubernetes/kube-openapi/issues/74,Allow openapi definitions to be built for a single resource,"This PR allows for the openapi definitions to be built for a single resource. Needed for server side apply.

**Implementation:**

Split the init([]*restful.WebService) function into three functions:
- init(): runs before the swagger spec is built
- buildPaths([]*restful.WebService): The function which actually builds the swagger spec
- finalizeSwagger(): runs after the spec is built

This way we can substitute a different function in for buildPaths, which doesn't need to take a web service as an argument.

cc @mbohlool @apelisse @seans3 ",closed,True,2018-05-15 22:28:11,2018-05-17 23:45:51
kube-openapi,jessfraz,https://github.com/kubernetes/kube-openapi/issues/75,https://api.github.com/repos/kubernetes/kube-openapi/issues/75,Create a SECURITY_CONTACTS file.,"As per the email sent to kubernetes-dev[1], please create a SECURITY_CONTACTS
file.

The template for the file can be found in the kubernetes-template repository[2].
A description for the file is in the steering-committee docs[3], you might need
to search that page for ""Security Contacts"".

Please feel free to ping me on the PR when you make it, otherwise I will see when
you close this issue. :)

Thanks so much, let me know if you have any questions.

(This issue was generated from a tool, apologies for any weirdness.)

[1] https://groups.google.com/forum/#!topic/kubernetes-dev/codeiIoQ6QE
[2] https://github.com/kubernetes/kubernetes-template-project/blob/master/SECURITY_CONTACTS
[3] https://github.com/kubernetes/community/blob/master/committee-steering/governance/sig-governance-template-short.md
",closed,False,2018-05-24 14:43:09,2019-01-15 22:23:49
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/76,https://api.github.com/repos/kubernetes/kube-openapi/issues/76,proto: Support/parse OneOf types in OpenAPI,"Currently implementation should be 100% backward compatible. The code
doesn't have to support oneof just yet, as oneof will be converted to
normal types automatically.",closed,True,2018-05-29 18:26:18,2018-10-27 19:27:13
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/77,https://api.github.com/repos/kubernetes/kube-openapi/issues/77,proto: Add validation tests,"The validation tests are coming from kubectl where they currently
live. Looks like we forgot to move them here when we moved the
validation code (they also needed to be changed slightly to use the
different interface). Adding them here is another step toward being able
to test without kubernetes, and will help us get more tests for oneof
and al.",closed,True,2018-05-29 18:39:26,2018-05-29 21:17:34
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/78,https://api.github.com/repos/kubernetes/kube-openapi/issues/78,Integration tests for definitions in kube-openapi repo,"* An integration test framework for kube-openapi repo currently addressing type definitions (not paths/routes)
* Generates OpenAPI definition code from types in ""testdata"" subdirectory
* Compiles the OpenAPI definitions with the OpenAPI builder libraries
* Runs the generated binary to output the JSON swagger definitions
* Compares generated JSON swagger definitions to golden swagger defs.",closed,True,2018-05-30 05:10:48,2018-06-11 20:49:30
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/79,https://api.github.com/repos/kubernetes/kube-openapi/issues/79,proto: Move test swagger files to testdata,"Instead of having the files in ""testing"" package, let's move them to
""testdata"". The reason is that the testing package should be vendor-able
without having to import the swagger test files.",closed,True,2018-05-31 19:52:28,2018-05-31 20:13:57
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/80,https://api.github.com/repos/kubernetes/kube-openapi/issues/80,"proto: Add ""Empty"" fake","This can be useful if you want to test plumbing, and not the content of
the OpenAPI.",closed,True,2018-05-31 20:29:51,2018-05-31 20:41:57
kube-openapi,AdamDang,https://github.com/kubernetes/kube-openapi/pull/81,https://api.github.com/repos/kubernetes/kube-openapi/issues/81,Typo fix: identifer->identifier,identifer->identifier,closed,True,2018-06-02 11:14:13,2018-08-24 05:20:02
kube-openapi,mirake,https://github.com/kubernetes/kube-openapi/pull/82,https://api.github.com/repos/kubernetes/kube-openapi/issues/82,Typo fix: identifer -> identifier/mulitple -> multiple,,closed,True,2018-06-13 10:47:31,2018-08-14 07:37:17
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/83,https://api.github.com/repos/kubernetes/kube-openapi/issues/83,API linter framework and namesMatch API rule,"Adding API linter framework https://github.com/kubernetes/kubernetes/pull/54887 to kube-openapi to provide a one stop shop experience in openapi generation and validation. 

**TODO:** 
- [x] Documentation
- [x] Add `report-filename` flag to [cmd/openapi-gen/openapi-gen.go](https://github.com/kubernetes/kube-openapi/blob/bf40560368791a7dddfeea9b3cfcf89b34139f44/cmd/openapi-gen/openapi-gen.go), or modify [main.go in k8s/code-generator](https://github.com/kubernetes/kubernetes/blob/a2de1398f829ef38d645579160bdd6bfec8384d3/staging/src/k8s.io/code-generator/cmd/openapi-gen/main.go) if we're not ready to switch to the main in this repo yet.
- **NOTE to reviewer**: if `reportFilename` is not provided, the linter will glog any API rule violation and return **error**; if `reportFilename` is provided, the linter will print the violations to the report file and return **nil (no error)**. This enables us to check in the known violations file in kubernetes, and then have make rules to compare with the report file and make sure it doesn't get bigger. 
- UPDATE: experimented locally. `make generated_files` generates report file under `_output/openapi-tmp/report.csv` https://github.com/roycaihw/kubernetes/commit/2892801c5dfc14ecf4e389e56151f8e3801298df
- [x] Vender the code in to kubernetes and update the `Makefile.generated_files` to call the generator with `report-filename` flag and compare with checked-in violations",closed,True,2018-06-15 00:16:55,2018-09-06 12:33:42
kube-openapi,liggitt,https://github.com/kubernetes/kube-openapi/pull/84,https://api.github.com/repos/kubernetes/kube-openapi/issues/84,include descriptions in types with custom defs,"Include description so that custom types can be documented as well.

See in action in https://github.com/kubernetes/kubernetes/pull/65256
",closed,True,2018-06-20 03:21:07,2018-06-20 17:52:41
kube-openapi,luksa,https://github.com/kubernetes/kube-openapi/pull/85,https://api.github.com/repos/kubernetes/kube-openapi/issues/85,Server-side OpenAPI fixes (RawExtension & type:object for structs),"DO NOT MERGE until v1.12, because clients v1.10 and older break when they encounter a server with these changes. A v1.11+ client won't break.

This PR fixes two things:
- adds type:object to all OpenAPI definitions created from structs
- prevents the RawExtension type from being included in the OpenAPI schema by annotating it with `+k8s:openapi-gen:schema-type-format=object,`",open,True,2018-06-20 12:26:40,2018-12-30 22:02:06
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/pull/86,https://api.github.com/repos/kubernetes/kube-openapi/issues/86,Added integration tests to Travis,Travis will now run integration tests as well as the package unit tests.,closed,True,2018-06-20 17:48:28,2018-06-22 21:35:07
kube-openapi,lavalamp,https://github.com/kubernetes/kube-openapi/issues/87,https://api.github.com/repos/kubernetes/kube-openapi/issues/87,Validation: deserialization time vs creation time concerns,"Proto (and, it seems, json-schema) have a ""required"" concept, by which they mean that you cannot decode/deserialize an object that lacks the field.

Kubernetes has a required concept, by which we mean you cannot create an object if it lacks the field.

Fields that are ""required"" in the Kubernetes sense are *NOT* required in the proto/json-schema sense: There are valid uses of kubernetes resources that involve deliberately partially specified objects.

This is just an example of an attribute for which it's very important when it is checked.

I'll categorize the aspects of our system in these two buckets here, as I think of them.

Deserialization-time enforcement:
* Correct types (e.g. no ints as strings, no arrays in place of scalars, etc)

Validation-time enforcement:
* required/optional
* immutability
* min/max
* regexp match / enum value",closed,False,2018-06-22 21:42:46,2018-11-20 02:35:11
kube-openapi,max8899,https://github.com/kubernetes/kube-openapi/pull/88,https://api.github.com/repos/kubernetes/kube-openapi/issues/88,fix some formt error using gofmt,"fix some formt error using gofmt:
gofmt -s -l -w .",closed,True,2018-06-28 08:36:36,2018-09-28 07:05:18
kube-openapi,max8899,https://github.com/kubernetes/kube-openapi/pull/89,https://api.github.com/repos/kubernetes/kube-openapi/issues/89,fix some shadow variables,fix some shadow variables,closed,True,2018-06-28 08:53:01,2018-06-28 17:23:26
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/90,https://api.github.com/repos/kubernetes/kube-openapi/issues/90,Copy apimachinery sets util to avoid import cycle,"Vendoring `k8s.io/apimachinery/pkg/util/sets` introduces import cycle. This PR copies the `pkg/util/sets/string.go` to kube-openapi to avoid import cycle. Note that the code was generated by set-gen in k/k.

```
I0703 22:35:48.857] Package vendor/k8s.io/kube-openapi/cmd/openapi-gen has a cyclic dependency on staging repository packages: k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/sets
I0703 22:35:49.988] Package vendor/k8s.io/kube-openapi/pkg/generators has a cyclic dependency on staging repository packages: k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/sets
I0703 22:35:50.055] Package vendor/k8s.io/kube-openapi/pkg/generators/rules has a cyclic dependency on staging repository packages: k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/util/sets
I0703 22:37:02.210] +++ exit code: 1
I0703 22:37:02.216] +++ error: 1
I0703 22:37:02.532] FAILED   verify-no-vendor-cycles.sh	80s
```

/assign @pwittrock 

Note that afaict it's not a real import cycle, but in k/k we don't allow vendor code to import staging code. See https://github.com/kubernetes/kubernetes/pull/49252 for details. 

To keep the change minimum, I didn't copy the entire `sets` package over, but just the functionality that we need (`Strings` and `Empty`).",closed,True,2018-07-03 23:44:13,2018-07-11 00:09:25
kube-openapi,aojea,https://github.com/kubernetes/kube-openapi/issues/91,https://api.github.com/repos/kubernetes/kube-openapi/issues/91,Missing CONTRIBUTING.md file,"All K8s subrepositories should have a CONTRIBUTING.md file, which at the minimum should point to https://github.com/kubernetes/community/blob/master/contributors/guide/README.md. Care should be taken that all information is in sync with the contributor guide.

Subrepositories may also have contributing guidelines specific to that repository. They should be explicitly documented and explained in the CONTRIBUTING.md

Ref:  https://github.com/kubernetes/community/issues/1832",closed,False,2018-07-16 09:23:31,2018-07-19 23:27:39
kube-openapi,tamalsaha,https://github.com/kubernetes/kube-openapi/pull/92,https://api.github.com/repos/kubernetes/kube-openapi/issues/92,Don't throw error if resource is missing openapi definition,xref: https://github.com/kubernetes/kubernetes/issues/66285,closed,True,2018-07-17 11:09:39,2018-07-26 06:00:42
kube-openapi,nikhita,https://github.com/kubernetes/kube-openapi/pull/93,https://api.github.com/repos/kubernetes/kube-openapi/issues/93,Add CONTRIBUTING.md,"Fixes #91 

xref https://github.com/kubernetes/community/issues/1832
/cc mbohlool roycaihw ",closed,True,2018-07-18 06:13:10,2018-07-19 23:27:39
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/94,https://api.github.com/repos/kubernetes/kube-openapi/issues/94,Skip merge source spec with empty paths,"Follow up of https://github.com/kubernetes/kube-openapi/pull/70#discussion_r186934063

/cc @mbohlool ",closed,True,2018-07-19 21:15:52,2018-09-28 18:30:51
kube-openapi,devdattakulkarni,https://github.com/kubernetes/kube-openapi/issues/95,https://api.github.com/repos/kubernetes/kube-openapi/issues/95,Integration test README corrections,"Found following issues in the README inside test/integration folder

1) The command to generate openapi_generated.go should be:

go run ../../cmd/openapi-gen/openapi-gen.go -i ""./testdata/listtype"" -o pkg -p generated -O openapi_generated

2) There is a typo in this line: The generated file `pkg/generaged/openapi_generated.go` should have been created.

It should be ""pkg/generated/openapi_generated.go""",closed,False,2018-07-23 22:44:04,2018-07-31 17:05:46
kube-openapi,devdattakulkarni,https://github.com/kubernetes/kube-openapi/issues/96,https://api.github.com/repos/kubernetes/kube-openapi/issues/96,Working example,"When trying to generate Open API spec for the provided sample testdata, I am getting following API validation error:

$ go run ../../cmd/openapi-gen/openapi-gen.go -i ""./testdata/listtype"" -o pkg -p generated -O openapi_generated 

API rule violation: names_match,./testdata/listtype,AtomicList,Field
API rule violation: names_match,./testdata/listtype,Item,Port
API rule violation: names_match,./testdata/listtype,Item,Protocol
API rule violation: names_match,./testdata/listtype,MapList,Field
API rule violation: names_match,./testdata/listtype,Pod,spec
API rule violation: names_match,./testdata/listtype,SetList,Field
2018/07/23 17:46:45 OpenAPI code generation error: Failed executing generator: some packages had errors:
API rule violations exist
exit status 1

----

In order to get a working example I used following testdata, which works:

testdata/volume.go
--------------------

package listtype

// +k8s:openapi-gen=true
type Volume struct {
        // Volume's name.
        // Must be a DNS_LABEL and unique within the pod.
        // More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        Name string `json:""name"" protobuf:""bytes,1,opt,name=name""`
        // VolumeSource represents the location and type of the mounted volume.
        // If not specified, the Volume is implied to be an EmptyDir.
        // This implied behavior is deprecated and will be removed in a future version.
        VolumeSource `json:"",inline"" protobuf:""bytes,2,opt,name=volumeSource""`
}

This is basically Type Volume copied from k8s.io/kubernetes/staging/src/k8s.io/api/core/v1/types.go

Line ""// +k8s:openapi-gen=true"" is added at the top as required by kube-openapi",closed,False,2018-07-23 22:54:42,2019-01-27 22:29:43
kube-openapi,devdattakulkarni,https://github.com/kubernetes/kube-openapi/issues/97,https://api.github.com/repos/kubernetes/kube-openapi/issues/97,Using kube-openapi + 'kubectl explain' on Custom Resources?,"I was wondering if 'kubectl explain' can be used to find out information about Custom Resources?

Based on my understanding of kube-openapi and 'kubectl explain' workflow, it seems to me that this is currently not possible. Is this correct understanding?

I have written up my analysis here:
https://medium.com/@cloudark/understanding-kubectl-explain-9d703396cc8

Could you take a look and let me know if it is correct?

cc: @sttts 

",closed,False,2018-07-27 01:41:22,2019-04-05 00:49:49
kube-openapi,RA489,https://github.com/kubernetes/kube-openapi/pull/98,https://api.github.com/repos/kubernetes/kube-openapi/issues/98,Correction in README.md,"Correction in README.md 
fixes #95 ",closed,True,2018-07-30 10:24:20,2018-07-31 17:05:46
kube-openapi,hello2mao,https://github.com/kubernetes/kube-openapi/pull/99,https://api.github.com/repos/kubernetes/kube-openapi/issues/99,Typo fix in pkg/generators/api_linter.go,Typo fix: mutliple -> multiple,closed,True,2018-08-29 08:37:02,2018-09-28 07:02:36
kube-openapi,kargakis,https://github.com/kubernetes/kube-openapi/pull/100,https://api.github.com/repos/kubernetes/kube-openapi/issues/100,pkg/generators README markdown updates,/cc @mbohlool ,closed,True,2018-09-16 10:41:30,2018-09-28 07:01:15
kube-openapi,kargakis,https://github.com/kubernetes/kube-openapi/issues/101,https://api.github.com/repos/kubernetes/kube-openapi/issues/101,Make k8s:openapi-gen a parameter to the generator,/assign mbohlool ,closed,False,2018-09-16 10:42:15,2019-02-13 12:32:18
kube-openapi,jennybuckley,https://github.com/kubernetes/kube-openapi/pull/102,https://api.github.com/repos/kubernetes/kube-openapi/issues/102,Move getCanonicalTypeName to util package and export it,To be used by https://github.com/kubernetes/kubernetes/pull/68576,closed,True,2018-09-20 21:44:00,2018-09-27 18:09:12
kube-openapi,seans3,https://github.com/kubernetes/kube-openapi/issues/103,https://api.github.com/repos/kubernetes/kube-openapi/issues/103,Verify full openapi swagger can still be parsed.,"This issue is moved from kubectl repo.

Since kubernetes/kube-openapi#10 is moving parsing code for openapi from the main repo to https://github.com/kubernetes/kube-openapi/, we need to verify that the full swagger openapi file can still be parsed.

This is just a reminder that we need to do that.
In other word, we need to add a test in the main repo that verifies that the parsing code can parse the openapi swagger.",closed,False,2018-09-25 20:32:02,2019-02-22 22:14:10
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/104,https://api.github.com/repos/kubernetes/kube-openapi/issues/104,Sort API rule violations before reporting,"The API rule violations reported by openapi-gen are in format of

 - `{rule-name},{package},{type},{(optional) field}`

The `k8s.io/gen` performs sorting on package level and type level when walking through the input packages, but currently the API rule violations reported from openapi-gen are un-sorted on field level and rule-name level. 

The partially-sorted report file makes it hard for API authors to update the exception list when necessary, e.g. https://github.com/kubernetes/kubernetes/pull/60195#discussion_r204056998, https://github.com/kubernetes/kubernetes/pull/66722

This PR makes openapi-gen sort the violations before reporting to a file or stderr. As a followup I will add hack script in k/k for API authors to update the exception list automatically instead of manually.

/assign @lavalamp ",closed,True,2018-09-25 21:34:04,2018-09-28 20:24:53
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/105,https://api.github.com/repos/kubernetes/kube-openapi/issues/105,Allow using top-level Responses Definitions field in openapi v2,"This PR allows setting a `ResponseDefinitions` field in common config, which will be propagated to the top-level [Responses Definitions field](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md#fixed-fields) during building. From the v2 specification, the field is:
> An object to hold responses that can be used across operations. This property does not define global responses for all operations.

The idea comes from the k8s issue https://github.com/kubernetes/kubernetes/issues/69014. We want to document all the possible error codes that apiserver may respond with. Presumably we will add 10+ responses to every operations under every paths. Since all the error responses have same schema in body (metav1.Status), we can put the full response definition in the top-level Responses Definitions field, and have the operation-level responses refer to it, to make the spec size smaller.

Note that `go-openapi` doesn't verify if the referred definition exists when [creating a Response](https://github.com/go-openapi/spec/blob/5bae59e25b21498baea7f9d46e9c147ec106a42e/response.go#L89-L94). It's up to user to set the definition first and write the refURI properly.

The next step will be changing k8s to set `ResponseDefinitions` and `CommonResponses` when [completing the openapi Config](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/server/config.go#L379-L388).

/assign @mbohlool 
cc @lswith",closed,True,2018-10-08 17:40:29,2018-10-18 17:48:52
kube-openapi,liggitt,https://github.com/kubernetes/kube-openapi/pull/106,https://api.github.com/repos/kubernetes/kube-openapi/issues/106,Add linting test for omitempty,Would have caught https://github.com/kubernetes/kubernetes/pull/69694,closed,True,2018-10-15 15:54:38,2018-10-25 18:09:29
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/107,https://api.github.com/repos/kubernetes/kube-openapi/issues/107,Add roycaihw to reviewers and update integration test README,"Add @roycaihw to reviewers in OWNER file per request from @apelisse. 

Also update `test/integration/README.md` to mention that the checked-in `pkg/generated/openapi_generated.go` file [should not be updated](https://github.com/kubernetes/kube-openapi/pull/104#issuecomment-424858284). 

/cc @apelisse ",closed,True,2018-10-15 19:53:06,2018-10-26 22:30:19
kube-openapi,lavalamp,https://github.com/kubernetes/kube-openapi/pull/108,https://api.github.com/repos/kubernetes/kube-openapi/issues/108,remove unneeded parameter,The context passed to the package construction shouldn't be stored.,closed,True,2018-10-17 17:49:21,2018-10-17 17:55:46
kube-openapi,lavalamp,https://github.com/kubernetes/kube-openapi/pull/109,https://api.github.com/repos/kubernetes/kube-openapi/issues/109,More minor fixes.,,closed,True,2018-10-17 19:34:57,2018-10-26 22:32:12
kube-openapi,lavalamp,https://github.com/kubernetes/kube-openapi/pull/110,https://api.github.com/repos/kubernetes/kube-openapi/issues/110,Convert OpenAPI to structured schema,,closed,True,2018-10-18 22:08:04,2018-10-21 20:35:53
kube-openapi,lavalamp,https://github.com/kubernetes/kube-openapi/pull/111,https://api.github.com/repos/kubernetes/kube-openapi/issues/111,Fix api linter,Includes #109.,closed,True,2018-10-22 22:54:02,2018-10-26 22:19:31
kube-openapi,lavalamp,https://github.com/kubernetes/kube-openapi/pull/112,https://api.github.com/repos/kubernetes/kube-openapi/issues/112,Move general setup to its own file.,Minor cleanup.,closed,True,2018-10-24 22:54:13,2018-10-25 20:24:43
kube-openapi,lavalamp,https://github.com/kubernetes/kube-openapi/pull/113,https://api.github.com/repos/kubernetes/kube-openapi/issues/113,fix path mangling,"This makes the report file location simple and obvious rather than fighting with the generation framework.

Both variations passed the integration test here but the new one also works with the random path manipulations that upstream kubernetes does.",closed,True,2018-10-31 20:11:13,2018-10-31 20:46:21
kube-openapi,lavalamp,https://github.com/kubernetes/kube-openapi/issues/114,https://api.github.com/repos/kubernetes/kube-openapi/issues/114,Configure kube-openapi to use prow for CI instead of Travis,To prevent problems like this: https://github.com/kubernetes/kube-openapi/pull/113#discussion_r229855182,closed,False,2018-10-31 20:46:04,2019-03-30 22:20:17
kube-openapi,dims,https://github.com/kubernetes/kube-openapi/pull/115,https://api.github.com/repos/kubernetes/kube-openapi/issues/115,Switch from glog to klog,Change-Id: Ie5d0f09425c945da9bf24474a212adf3148daf6f,closed,True,2018-11-04 16:32:57,2018-11-06 18:26:15
kube-openapi,dims,https://github.com/kubernetes/kube-openapi/pull/116,https://api.github.com/repos/kubernetes/kube-openapi/issues/116,Missed a spot for klog flag initialization,Change-Id: I43e37728b7558702a41ceaa7e9f7b722aaa55bf7,closed,True,2018-11-09 02:23:48,2018-11-09 18:18:36
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/issues/117,https://api.github.com/repos/kubernetes/kube-openapi/issues/117,Remove klog dependency,"The error surfacing in this package should be self evident. 

A self-contained system like Kubernetes which imports kube-openapi may use logging module (glog/klog) to do V-style logging. However this package don't have a good reason to use glog/klog, which interferes/makes assumption about logging mechanism used by downstream systems.

ref: https://github.com/kubernetes/kube-openapi/pull/115

/good-first-issue
/help",open,False,2018-11-10 00:51:07,2019-01-31 18:20:15
kube-openapi,lavalamp,https://github.com/kubernetes/kube-openapi/pull/118,https://api.github.com/repos/kubernetes/kube-openapi/issues/118,smd conversion: handle more string formats,,closed,True,2018-11-13 22:59:01,2018-11-14 23:30:23
kube-openapi,openstacks,https://github.com/kubernetes/kube-openapi/issues/119,https://api.github.com/repos/kubernetes/kube-openapi/issues/119,Fail to run kube-openapi/test/integration/builder/main.go,"when I run main.go, it throws the following error:
kube-openapi/test/integration/builder/main.go:95:22: unknown field 'ResponseDefinitions' in struct literal of type common.Config",open,False,2018-11-16 16:01:22,2019-03-16 17:44:55
kube-openapi,mbohlool,https://github.com/kubernetes/kube-openapi/pull/120,https://api.github.com/repos/kubernetes/kube-openapi/issues/120,Add type: object to all generated struct objects,"Look like we did not set type on definitions of struct type. Most of the OpenAPI tools should assume ""object"" I guess, thats why we didn't catch this.


Ref: https://github.com/kubernetes/kubernetes/issues/56428",closed,True,2018-11-29 23:30:36,2019-01-15 22:22:10
kube-openapi,luxas,https://github.com/kubernetes/kube-openapi/pull/123,https://api.github.com/repos/kubernetes/kube-openapi/issues/123,Make the namesMatch function vendorable,"/assign @sttts @lavalamp

This is needed for moving out the API violations check from consuming kube-openapi as a binary and writing the violations to an exceptions file in `api/` of k/k to an unit test per API group that want to check its types. This is part of the k8s.io/component KEP.",closed,True,2018-12-05 19:49:59,2019-01-10 12:45:17
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/124,https://api.github.com/repos/kubernetes/kube-openapi/issues/124,"aggregator: optimize 40x speed, 1/8 mem, 1/27 allocs","- avoid deep-copy
- rename in one batch

Old kube merging (with real specs) took 738ms, this reduces it to <19ms.",closed,True,2018-12-13 18:30:56,2019-02-05 19:02:18
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/125,https://api.github.com/repos/kubernetes/kube-openapi/issues/125,handler: speed-up spec encoding,,open,True,2018-12-17 15:58:37,2019-02-04 10:59:51
kube-openapi,dims,https://github.com/kubernetes/kube-openapi/pull/126,https://api.github.com/repos/kubernetes/kube-openapi/issues/126,Switch location for goautoneg vendored code,"Move to github.com/munnerz/goautoneg as bitbucket is flaky!

Change-Id: I1c63240a4985b9e4ae33d23af929657d44f356a0",closed,True,2018-12-18 02:34:16,2019-01-15 21:42:06
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/127,https://api.github.com/repos/kubernetes/kube-openapi/issues/127,Add SECURITY_CONTACTS,Fixes #75 ,closed,True,2018-12-21 22:03:39,2019-01-15 22:23:49
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/128,https://api.github.com/repos/kubernetes/kube-openapi/issues/128,travis: fix hg SSL issue by using Ubuntu LTS 16.04 Xenial,`go get` failed in travis because of tls issues with the old Debian image in travis.,closed,True,2019-01-04 08:45:52,2019-01-15 21:44:13
kube-openapi,enj,https://github.com/kubernetes/kube-openapi/issues/129,https://api.github.com/repos/kubernetes/kube-openapi/issues/129,Having the same type embedded more than once breaks generation,"`ServiceServingCertSignerConfig` embeds `metav1.TypeMeta` and `configv1.GenericControllerConfig`: https://github.com/openshift/api/blob/master/servicecertsigner/v1alpha1/types.go#L15-L21

At the time, `configv1.GenericControllerConfig` also embedded `metav1.TypeMeta`, which led to:

```
func schema_openshift_api_servicecertsigner_v1alpha1_ServiceServingCertSignerConfig(ref common.ReferenceCallback) common.OpenAPIDefinition {
    return common.OpenAPIDefinition{
        Schema: spec.Schema{
            SchemaProps: spec.SchemaProps{
                Description: ""ServiceServingCertSignerConfig provides information to configure a serving serving cert signing controller"",
                Properties: map[string]spec.Schema{
                    ""kind"": {
                        SchemaProps: spec.SchemaProps{
                            Description: ""Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"",
                            Type:        []string{""string""},
                            Format:      """",
                        },
                    },
                    ""apiVersion"": {
                        SchemaProps: spec.SchemaProps{
                            Description: ""APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"",
                            Type:        []string{""string""},
                            Format:      """",
                        },
                    },
                    ""kind"": {
                        SchemaProps: spec.SchemaProps{
                            Description: ""Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds"",
                            Type:        []string{""string""},
                            Format:      """",
                        },
                    },
                    ""apiVersion"": {
                        SchemaProps: spec.SchemaProps{
                            Description: ""APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources"",
                            Type:        []string{""string""},
                            Format:      """",
                        },
                    },
```

```
pkg/openapi/zz_generated.openapi.go:24107:6: duplicate key ""kind"" in map literal
pkg/openapi/zz_generated.openapi.go:24114:6: duplicate key ""apiVersion"" in map literal
```",open,False,2019-01-04 19:21:18,2019-01-15 23:39:27
kube-openapi,runzexia,https://github.com/kubernetes/kube-openapi/issues/130,https://api.github.com/repos/kubernetes/kube-openapi/issues/130,openapi-gen should supoort default base package path,"In my project, I will use the following command to generate deepcopy.
```
// Generate deepcopy for apis
//go:generate go run ../../vendor/k8s.io/code-generator/cmd/deepcopy-gen/main.go -O zz_generated.deepcopy -i ./... -h ../../hack/boilerplate.go.txt
```
```
// Generate openapi for apis
//go:generate go run ../../vendor/k8s.io/kube-openapi/cmd/openapi-gen/openapi-gen.go -O openapi_generated -i ./... -h ../../hack/boilerplate.go.txt
```

but if got error
```
go generate ./pkg/... ./cmd/...
2019/01/11 15:07:48 Arguments validation error: output package cannot be empty
exit status 1
pkg/apis/apis.go:20: running ""go"": exit status 1
make: *** [generate] Error 1
```
So I have to write a separate generate command for each package, I think it is necessary to have openapi-gen and deepcopy-gen have similar behavior, which can save a lot of unnecessary code.
```
//go:generate go run ../../vendor/k8s.io/kube-openapi/cmd/openapi-gen/openapi-gen.go -O openapi_generated -i ./devops/v1alpha2 -p github.com/runzexia/kubesphere-crd-sample/pkg/apis/devops/v1alpha2 -h ../../hack/boilerplate.go.txt
```",open,False,2019-01-11 07:14:29,2019-01-11 07:14:29
kube-openapi,runzexia,https://github.com/kubernetes/kube-openapi/issues/131,https://api.github.com/repos/kubernetes/kube-openapi/issues/131,Generate openapi spec for CRD's status subresources,"https://github.com/kubernetes/kube-openapi/issues/13
I made some attempts based on this problem, and finally generated the openapi spec of the CRD, but I also want to generate the openapi spec of the CRD status sub-resource. Do you have any suggestions?
@mbohlool  @tamalsaha ",closed,False,2019-01-28 03:18:12,2019-01-28 06:18:06
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/132,https://api.github.com/repos/kubernetes/kube-openapi/issues/132,Allow model to seed name without go type,"Allow models (e.g. CRDs) which have schema but not go types to seed canonical name. 

This allows us to use the kube-openapi builder more naturally for CRDs: https://github.com/kubernetes/kubernetes/pull/71192

/cc @liggitt @mbohlool @sttts ",closed,True,2019-01-29 17:41:34,2019-02-05 22:44:25
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/133,https://api.github.com/repos/kubernetes/kube-openapi/issues/133,schemaconv: Make RawExtension into an untyped atomic scalar,"Because of how RawExtension is built, the schema we generate is slightly confused when we see them in real-life. Make them untyped since there is not much we can do right now.",closed,True,2019-02-01 00:50:42,2019-02-04 22:02:29
kube-openapi,palash25,https://github.com/kubernetes/kube-openapi/pull/134,https://api.github.com/repos/kubernetes/kube-openapi/issues/134,[WIP] Remove klog as a dependency,Fixes: https://github.com/kubernetes/kube-openapi/issues/117,open,True,2019-02-01 02:18:58,2019-02-04 11:19:51
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/135,https://api.github.com/repos/kubernetes/kube-openapi/issues/135,godeps: check in CI,Blocked by https://github.com/kubernetes/kube-openapi/pull/136.,closed,True,2019-02-01 08:18:51,2019-02-02 09:21:18
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/136,https://api.github.com/repos/kubernetes/kube-openapi/issues/136,aggregator: fix and extend mutating walker tests,"- fix mutating ref numbering
- implement max depth fuzzing logic
- test mutated subsets, not only one ref at a time",closed,True,2019-02-01 10:56:14,2019-02-02 04:09:09
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/137,https://api.github.com/repos/kubernetes/kube-openapi/issues/137,Add myself as reviewer,,closed,True,2019-02-01 23:20:26,2019-02-02 00:24:09
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/138,https://api.github.com/repos/kubernetes/kube-openapi/issues/138,handler: fix ToProtoBinary and add tests,The json2yaml func produced wrong output and ToProtoBinary failed. There was no test whatsoever calling it.,closed,True,2019-02-05 15:49:31,2019-02-05 21:41:20
kube-openapi,damemi,https://github.com/kubernetes/kube-openapi/pull/139,https://api.github.com/repos/kubernetes/kube-openapi/issues/139,[wip]Support for openapi json output format,attempting to rebase https://github.com/kubernetes/kube-openapi/pull/37,closed,True,2019-02-06 16:31:52,2019-02-06 18:59:09
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/140,https://api.github.com/repos/kubernetes/kube-openapi/issues/140,generator: make output roundtrippable,"- Extension values are JSON data. `[]string` is not a valid type therefore (only `[]interface{}` is for slices). The `[]string` objects did not roundtrip.
- If `SchemaOrBool.Schema` is non-nil, `Allows` does not matter (both variants are semantically equivalent). But for roundtrip checks it's helpful to set `Allows` to `true` because `SchemaOrBool.UnmarshalJSON` does the same.
- don't create empty `Properties` fields.",closed,True,2019-02-07 10:46:43,2019-02-07 22:22:08
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/141,https://api.github.com/repos/kubernetes/kube-openapi/issues/141,aggregator: compare spec with semantic equality during merging,Depends on https://github.com/kubernetes/utils/pull/81.,closed,True,2019-02-07 12:23:11,2019-02-08 13:51:00
kube-openapi,liggitt,https://github.com/kubernetes/kube-openapi/pull/142,https://api.github.com/repos/kubernetes/kube-openapi/issues/142,Add sttts as approver,"sttts has made significant contributions to the repo, both directly and in kubernetes/kubernetes

/assign @lavalamp ",closed,True,2019-02-07 16:36:46,2019-02-22 20:39:32
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/143,https://api.github.com/repos/kubernetes/kube-openapi/issues/143,Add analysis of pkg/util/proto/validator,"The OpenAPI validator used in kubectl is full of wrong assumptions. We cannot reject OpenAPI spec features because openapi-gen does not generate them. Other providers (other aggregated apiservers, CRDs) can make use of them.

As general rule of thumb, we have to apply: we can ignore features, making us incomplete (which we are anyway because we do not check for many/most OpenAPI features), but keeping us correct. But we cannot return errors for features we do not understand.

tl/dr: less strict validation is fine.

This PR add analysis comments of the following shape:

- `TODO(wrong)`: here the validation is returning errors which aren't errors according to the OpenAPI standard.
- `TODO(incomplete)`: here the valiation could return an error, but doesn't.

The first class is critical and we should get rid of them ASAP. The second class is cosmetics, no need for action.

Note: As we support one version of skew between master and kubectl, we have to generate reduced (= stripped) CRD validation schemata for at least one master version such that existing, old kubectl will not fall over.",closed,True,2019-02-08 11:04:22,2019-04-01 08:52:33
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/144,https://api.github.com/repos/kubernetes/kube-openapi/issues/144,Add apelisse to approvers for pkg/util/proto,"@seans3 is trying to retire from the approvers list, so I'm trying to at least own this part. And I'm interested in changes happening here since it impacts some things I care about :-)

@lavalamp @sttts",closed,True,2019-02-08 18:26:23,2019-03-06 00:18:01
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/145,https://api.github.com/repos/kubernetes/kube-openapi/issues/145,handler: use stdlib compatible json-iter encoder for stable map order,We also just the stdlib compatible encoder in kube because it produces stable map order output.,closed,True,2019-02-08 20:36:28,2019-02-08 20:55:41
kube-openapi,roycaihw,https://github.com/kubernetes/kube-openapi/pull/146,https://api.github.com/repos/kubernetes/kube-openapi/issues/146,cleanup: remove deprecated service registration,"for format-separated endpoints, which was deprecated in 1.10 and removed in 1.14

now k8s uses `BuildAndRegisterOpenAPIVersionedService` and `RegisterOpenAPIVersionedService` methods in the same file to register openapi service

/assign @mbohlool ",closed,True,2019-02-15 01:31:00,2019-02-15 19:04:55
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/147,https://api.github.com/repos/kubernetes/kube-openapi/issues/147,"util/proto: add optional, permissive spec parsing mode","When being used in kubectl to do client-side validation or for kubectl-explain, the OpenAPI code should not reject specs that have uninterpreted OpenAPI features. OpenAPI is monotonic in its fields (= weaker field values makes the whole schema weaker, not stronger) as long as the negative quantors `not` and `oneOf` are not used. This means we can just ignore unsupported fields in validation that is by definition incomplete (kubectl validation is incomplete because we have stricter server-side validation). This means:

* it is ok to accept an object that will later be rejected by the server,
* but it is bad to reject objects which are accepted by the server.

Or in yet other terms: kubectl validation should be best effort, but never stricter than the server.

The permissive mode switches the excessively strict validation (in respect to the formal OpenAPI semantics) to be permissive and weaker than server side validation. The only exception to this is that client-side validation will assume `additionalProperties: false` for all objects, while the server-side validation assumes `additionalPropertiers: true` by default.",open,True,2019-02-21 12:41:05,2019-02-28 17:24:55
kube-openapi,ixdy,https://github.com/kubernetes/kube-openapi/pull/148,https://api.github.com/repos/kubernetes/kube-openapi/issues/148,cmd/openapi-gen: be silent on success,This logging line isn't particularly useful; it's just noise during the build.,closed,True,2019-02-21 21:31:13,2019-02-25 20:44:29
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/149,https://api.github.com/repos/kubernetes/kube-openapi/issues/149,handler: convert int types correctly like yaml2 does and gnostic expects,"Json always unmarshals to float64, yaml2 does best effort down-sizing of the returned numbers, returning int, int64, uint64 or float64. Gnostic expects the later.",closed,True,2019-02-25 09:48:43,2019-02-28 17:12:44
kube-openapi,sttts,https://github.com/kubernetes/kube-openapi/pull/150,https://api.github.com/repos/kubernetes/kube-openapi/issues/150,aggregator: merge x-kubernetes-group-version-kind slices,"Definitions are supposed to be reused independently from the assign GVKs in the x-kubernetes-group-version-kind field. Different x-kubernetes-group-version-kind can happen if e.g. shared meta/v1 structs like `Status` or `GetOptions` appear in different API groups.

Prerequisite for https://github.com/kubernetes/kubernetes/pull/74133.",open,True,2019-02-26 12:26:38,2019-03-04 22:01:47
kube-openapi,joelsmith,https://github.com/kubernetes/kube-openapi/pull/151,https://api.github.com/repos/kubernetes/kube-openapi/issues/151,Update embargo doc link in SECURITY_CONTACTS and change PST to PSC,See https://github.com/kubernetes/security/issues/8 for more information,closed,True,2019-03-08 18:09:29,2019-03-20 15:49:02
kube-openapi,apelisse,https://github.com/kubernetes/kube-openapi/pull/152,https://api.github.com/repos/kubernetes/kube-openapi/issues/152,Add parsing of openapi oneof/union semantic into smd,"Implements first part of https://github.com/kubernetes/enhancements/pull/926.
We still need to change the OpenAPI generation to add these extensions.",open,True,2019-04-02 18:02:09,2019-04-03 16:56:42
