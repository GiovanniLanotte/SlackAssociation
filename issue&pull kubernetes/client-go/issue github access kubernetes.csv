name repository,creator user,url_html issue,url_api issue,title,body,state,pull request,data open,updated at
client-go,jimmidyson,https://github.com/kubernetes/client-go/issues/1,https://api.github.com/repos/kubernetes/client-go/issues/1,Consider versioning against API version rather than Kubernetes version,"With the API guarantees since 1.0, it makes more sense to version the client against the API version. There should be no need to use a matching client version against Kubernetes version, the only thing that matters is the API version. Software using the go-client should not have to keep versions in lock-step with the Kubernetes version they are running against. This would seriously limit the usability of the client.

So I propose that the client be versioned independently to Kubernetes itself & the API compatibility be documented instead, e.g. client-go v0.1 supports Kubernetes API v1, extensions API v1beta1, etc.
",closed,False,2016-08-26 08:50:10,2016-09-14 22:29:34
client-go,jmhodges,https://github.com/kubernetes/client-go/issues/2,https://api.github.com/repos/kubernetes/client-go/issues/2,vendor directory,"I'm so stoked to see this client pulled out from the main repo. Thank you so much!

Okay, so it'd be nice for this repository to not vendor its dependencies. I think it may have happened accidentally since the Godeps directory next to it is blank.

There's been a rough consensus so far that vendoring dependencies is great for OSS binaries but that for OSS libraries they tend to hurt more than they help. This is because a number of Go libraries set globals and fiddle bits in other libraries and the collisions that occur when two (or more) versions of the library interact can be difficult to suss out or even identify.

And since the Godeps directory is blank, even if I was a supremely disciplined engineer that inspect all of my dependencies' dependencies' versions, that would be difficult to do.

But maybe this battle was fought some time ago. Would love to get a link that discussion!
",closed,False,2016-08-30 02:24:46,2018-05-22 01:34:15
client-go,mlmhl,https://github.com/kubernetes/client-go/issues/3,https://api.github.com/repos/kubernetes/client-go/issues/3,add support for release-1.3,"This is really a great step forward, thank you very much! Sometimes we may need an old version such as release-1.3, hope to support for it
",closed,False,2016-09-08 12:50:10,2016-09-15 00:30:07
client-go,sttts,https://github.com/kubernetes/client-go/issues/4,https://api.github.com/repos/kubernetes/client-go/issues/4,Informer framework,"To write third-party controllers having ~~object stores and~~ the informer framework would be very handy.
",closed,False,2016-09-10 12:37:16,2017-01-09 10:03:04
client-go,wombat,https://github.com/kubernetes/client-go/issues/5,https://api.github.com/repos/kubernetes/client-go/issues/5,Segmentation violation while creating a service,"I have been successfully able to get a service by name, but I am running into a segmentation violation while I create a service.

This is the function is created:

```
func createService(namespace string, serviceName string, servicePort int32) {
    fmt.Println(""Service '"", serviceName, ""' in namespace '"", namespace, ""' does not exist!"")
    metadata := v1.ObjectMeta{Name: serviceName, Namespace: namespace}

    servicePorts := []v1.ServicePort{v1.ServicePort{Port: servicePort}}
    serviceSpec := v1.ServiceSpec{Ports: servicePorts}

    service := v1.Service{ObjectMeta: metadata, Spec: serviceSpec}

    clientset.Core().Services(namespace).Create(&service)
}
```

This is the stacktrace I get related to client-go:

```
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x4913d0]

goroutine 1 [running]:
panic(0xd6af80, 0xc42000c0c0)
    /usr/local/Cellar/go/1.7.1/libexec/src/runtime/panic.go:500 +0x1a1
k8s.io/client-go/1.4/kubernetes/typed/core/v1.(*services).Create(0xc42028b8c0, 0xc420426780, 0x7, 0x1538040, 0xc42028b8c0)
    /Users/wombat/golang/src/k8s.io/client-go/1.4/kubernetes/typed/core/v1/service.go:62 +0x70
```
",closed,False,2016-09-26 09:35:21,2016-11-08 22:04:24
client-go,tobstarr,https://github.com/kubernetes/client-go/issues/6,https://api.github.com/repos/kubernetes/client-go/issues/6,GCP auth Provider,"Is there already a documented way to use `gcp` as auth provider? I am looking into accessing a GKE cluster with my local kubeconfig file and also tried to use the gcpAuthProvider from https://github.com/kubernetes/kubernetes/blob/99295356ed152663698e002494a5af00d682dc6b/plugin/pkg/client/auth/gcp/gcp.go but things are not working out. 

I inlined the gcpAuthProvider (to to fix all dependencies) into a little test application, but I am getting this error: `the server has asked for the client to provide credentials (get pods)`. 

This is what I have so far: https://gist.github.com/tobstarr/6765104c764a3a6af8ec894bb5a0028b
",closed,False,2016-09-27 08:13:25,2016-11-21 22:29:21
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/7,https://api.github.com/repos/kubernetes/client-go/issues/7,Update README.md and restructure the master branch,"- Update the README to state the new versioning mechanism of client-go, also clarify the compatibility issues.
- Add a CHANGELOG.md
- Remove the top-level folders for versions. Keep the contents of the 1.5 folder
- Removed the copy.sh and godeps-json-updater.go, they only need to exist in the main repository

TODO:
- Before merging this PR, we need to send out an announcement about the change kube-dev mailing list
- [DONE] We need to change the copy.sh (https://github.com/kubernetes/kubernetes/pull/34989) and the client-go publisher robot (https://github.com/kubernetes/contrib/pull/1895). Those work can be done in parallel

@mml @mbohlool @timoreimann could you help review it?
cc @thockin 
",closed,True,2016-09-28 22:10:53,2016-10-19 21:42:43
client-go,tiaanl,https://github.com/kubernetes/client-go/issues/8,https://api.github.com/repos/kubernetes/client-go/issues/8,Using for ThirdPartyResource's,"I've started using this library and it works very well.

When extending the API with ThirdPartyResource resources, things become a major issue.  Using the dynamic part doesn't work well because I don't want to convert all my objects into map[string]interface{} objects.  The rest part alone also doesn't work well, because there are no Encoders/Decoders.

I'm sure all the tools required to start working with my own resources is available, but get them all up and running is just a major pain point currently.

Right now I don't know enough of the internals to be productive towards a solution, but any solution would be MUCH appreciated.
",closed,False,2016-10-06 12:18:40,2017-03-09 21:59:48
client-go,caesarxuchao,https://github.com/kubernetes/client-go/issues/9,https://api.github.com/repos/kubernetes/client-go/issues/9,[RFC] client-go versioning,"We need to reorganize `client-go` to follow [semver](http://semver.org/). I'll first describe the currenlty favored solution, and then list the considered alternatives. Please let us know what do you think.

What we'll do:
- Let's ditch the individual folders.
- Head of the master branch will track head of the kubernetes main repo.
- We'll move the 1.4 client into a 1.4 branch. (and tag it as 1.4.0)
- We'll cut new branches/tags when we've accumulated enough changes.

Consequence:
- `go get` will give unstable development versions (!!!!)
- Users must vendor to get a stable client
- ...or they could use gopkg.in and rewrite our internal import statements.

---

**Considered alternatives**

**1. Following the Go convention**
- Repository layout:
  - A new repository for every major version, i.e., k8s.io/client-go-v1, k8s.io/client-go-v2…
  - Each repositories have tags for minor versions
  - Head of each repository is backward compatible
- How to use client-go:
  - `import k8s.io/client-go-v2/tools/cache`
  - `go get k8s.io/client-go-v2`, it will checkout the HEAD of the repository
  - Local code will be stored at `$GOPATH/src/k8s.io/client-go-v2`
- Operational cost: 
  - Creating a repository for every major release
- How it affects developer workflow:
  - When making a backward incompatible change, i.e., needing to bump the major version, someone with write permission needs to create a new repository. Developers then need to make 2 PRs. They need to submit the first PR to `k8s.io/client-go-<latest-version>`. They also need to submit a second PR to the `k8s.io/kubernetes` to rewrite the imports. Until then integration tests will be run with the latest version of client-go.

**2. Using gopkg.in:** we don’t need to create new repository for major version bumps.
- Repository layout:
  - Only one repository: k8s.io/client-go
  - Branches for major versions; tags for minor versions
- How to use client-go:
  - `import gopkg.in/k8s.io/client-go.v2/tools/cache`
  - `go get gopkg.in/k8s.io/client-go.v2`, it will checkout tag or branch of the highest version that satisfies v2, e.g. branch v2.1.2.
  - Local code will be stored at `$GOPATH/src/gopkg.in/k8s.io/client-go.v2`
- Operational cost: N/A
- How it affects developer workflow:
  - Similar to 1, when introducing breaking changes, two PRs are required to run integration tests.

**3. Using our own fork of gopkg.in:** avoid being locked in with gopkg.in
- Repository layout: same as 2
- How to use client-go:
  - `import k8s.io/client-go.v2/tools/cache`
  - `go get k8s.io/client-go.v2`, it will checkout tag or branch of the highest version that satisfies v2, e.g. branch v2.1.2.
  - Local code will be stored at `$GOPATH/src/k8s.io/client-go.v2`
- Operational cost: We need to deploy a server to redirect git requests, like what gopkg.in does.
- How it affects developer workflow:
  - Similar to 1 and 2

**4. Keeping versions in the folders:** this is what we do today. The disadvantage is code duplication.
- Repository layout:
  - Single repository: k8s.io/client-go
  - A folder for each version
- How to use client-go:
  - `import k8s.io/client-go/2.1.2/tools/cache`
  - `go get k8s.io/client-go/2.1.2/tools/cache`, but all versions of client-go will be downloaded
- Operational cost: N/A
- How it affects developer workflow:
  - Worse than 1,2, and 3, for **every** version change, developers need to submit one PR to `k8s.io/client-go` to make the changes, and another PR to `k8s.io/kubernetes` to rewrite the import lines. Proper integration tests will then be run.

**5. Abandoning `go get`:** `go get` will always checkout the HEAD of client-go. To track a branch/tag, user needs to use a vendor tool like godep, govendor or glide.
- Repository layout:
  - Single repository: k8s.io/client-go
  - A branch for each major version, a tag for each minor version
- How to use client-go:
  - `import k8s.io/client-go/tools/cache`
  - `go get k8s.io/client-go/tools/cache`
- Operational cost: N/A
- How it affects developer workflow:
  - Same as 1, 2, and 3
",closed,False,2016-10-06 22:57:54,2016-10-27 21:56:58
client-go,juanvallejo,https://github.com/kubernetes/client-go/pull/10,https://api.github.com/repos/kubernetes/client-go/issues/10,"add Timeout field to REST client (1.4, 1.5) config","Fixes test panics in k8s PR:
https://github.com/kubernetes/kubernetes/pull/33958
and OpenShift PR: https://github.com/openshift/origin/pull/11104

The linked Kubernetes PR adds a ""Timeout"" field to the rest client in
order to implement global http request timeouts for server requests.

@soltysh @fabianofranz 
",closed,True,2016-10-07 22:25:16,2016-10-07 23:46:18
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/11,https://api.github.com/repos/kubernetes/client-go/issues/11,Add PR template," to instruct people to submit PRs to the main repository for now.
",closed,True,2016-10-07 23:29:28,2016-10-07 23:47:20
client-go,mheese,https://github.com/kubernetes/client-go/issues/12,https://api.github.com/repos/kubernetes/client-go/issues/12,watcher error after 20m,"When I create a `watch` on pods e.g. like this:

```
import (
...
  ""k8s.io/client-go/1.4/kubernetes""
  ""k8s.io/client-go/1.4/pkg/api""
  apiv1 ""k8s.io/client-go/1.4/pkg/api/v1""
  ""k8s.io/client-go/1.4/pkg/labels""
  ""k8s.io/client-go/1.4/pkg/selection""
  ""k8s.io/client-go/1.4/pkg/util/sets""
  ""k8s.io/client-go/1.4/pkg/watch""
  ...
)
...
podsClient := clientset.Core().Pods(""default"")
watcher, err := podsClient.Watch(api.ListOptions{...})
...
select {
...
  case ev := <-watcher.ResultChan():
  ...
}
```

I have the trouble that after exactly 20 minutes, the `ResultChan()` receives infinite messages, but they are all empty. Trying to print the returned `ev` from the channel shows that it is an empty/uninitialized map `map[Type: Object:<nil>]`.

Is this expected behaviour? Am I supposed to renew the watch after some time?
",closed,False,2016-10-12 18:02:38,2016-10-13 09:24:18
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/13,https://api.github.com/repos/kubernetes/client-go/issues/13,remove 1.5 folder from 1.4 branch,"@lavalmap @timoreimann I made the 1.4 branch, and remove the 1.5 folder from it. I want to keep the 1.4 folder instead of moving things out, because this way users don't need to change their import lines.

I want to make a 1.5 branch as well, because 1.5 fixed some issues in 1.4 (like the auth plugin), I think 1.5 has some users.
",closed,True,2016-10-14 20:27:27,2016-10-17 18:33:05
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/14,https://api.github.com/repos/kubernetes/client-go/issues/14,remove 1.4 folder from 1.5 branch,"Similar to https://github.com/kubernetes/client-go/pull/13

1.5 include some patches, like included [auth plugin](https://github.com/kubernetes/kubernetes/pull/33334), [timeout field in RESTClient config](https://github.com/kubernetes/kubernetes/pull/33958), etc.

The 1.5 folder is kept so that existing users client 1.5 client-go don't need to rewrite the import path. These folders will be removed in master and future release branches.

cc @timoreimann @mbohlool
",closed,True,2016-10-17 17:50:21,2016-10-17 18:06:15
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/15,https://api.github.com/repos/kubernetes/client-go/issues/15,"Revert ""remove 1.4 folder from 1.5 branch""","Reverts kubernetes/client-go#14
",closed,True,2016-10-17 18:02:46,2016-10-17 18:03:12
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/16,https://api.github.com/repos/kubernetes/client-go/issues/16,remove 1.4 folder from 1.5 branch,"Recreated PR https://github.com/kubernetes/client-go/pull/14 against 1.5 branch.

cc @mbohlool 
",closed,True,2016-10-17 18:06:54,2016-10-17 18:08:08
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/17,https://api.github.com/repos/kubernetes/client-go/issues/17,remove 1.5 folder from 1.4 branch,"Recreated https://github.com/kubernetes/client-go/pull/13 against the 1.4 branch.

cc @mbohlool 
",closed,True,2016-10-17 18:12:55,2016-10-17 18:15:22
client-go,aanm,https://github.com/kubernetes/client-go/issues/18,https://api.github.com/repos/kubernetes/client-go/issues/18,Proposal: provide a SetLog() func,"Is it possible to provide a `SetLog()` in the packages? For example, I'm using 3 `cache.NewInformer` to watch for changes on 3 different resources, but if, for whatever reason, the connection between the client and the apiserver doesn't exist, I have this error messages in my log:

```
ERROR: logging before flag.Parse: E1018 14:16:07.808569    5156 reflector.go:214] k8s.io/client-go/1.5/tools/cache/reflector.go:109: Failed to list *v1.Endpoints: Get http://192.168.33.11:8080/api/v1/endpoints?resourceVersion=0: dial tcp 192.168.33.11:8080: getsockopt: connection refused
ERROR: logging before flag.Parse: E1018 14:16:08.809443    5156 reflector.go:214] k8s.io/client-go/1.5/tools/cache/reflector.go:109: Failed to list *v1beta1.NetworkPolicy: Get http://192.168.33.11:8080/apis/extensions/v1beta1/networkpolicies?resourceVersion=0: dial tcp 192.168.33.11:8080: getsockopt: connection refused
ERROR: logging before flag.Parse: E1018 14:16:08.809458    5156 reflector.go:214] k8s.io/client-go/1.5/tools/cache/reflector.go:109: Failed to list *v1.Service: Get http://192.168.33.11:8080/api/v1/services?resourceVersion=0: dial tcp 192.168.33.11:8080: getsockopt: connection refused
ERROR: logging before flag.Parse: E1018 14:16:08.809526    5156 reflector.go:214] k8s.io/client-go/1.5/tools/cache/reflector.go:109: Failed to list *v1.Endpoints: Get http://192.168.33.11:8080/api/v1/endpoints?resourceVersion=0: dial tcp 192.168.33.11:8080: getsockopt: connection refused
ERROR: logging before flag.Parse: E1018 14:16:09.811722    5156 reflector.go:214] k8s.io/client-go/1.5/tools/cache/reflector.go:109: Failed to list *v1beta1.NetworkPolicy: Get http://192.168.33.11:8080/apis/extensions/v1beta1/networkpolicies?resourceVersion=0: dial tcp 192.168.33.11:8080: getsockopt: connection refused
ERROR: logging before flag.Parse: E1018 14:16:09.811733    5156 reflector.go:214] k8s.io/client-go/1.5/tools/cache/reflector.go:109: Failed to list *v1.Endpoints: Get http://192.168.33.11:8080/api/v1/endpoints?resourceVersion=0: dial tcp 192.168.33.11:8080: getsockopt: connection refused
ERROR: logging before flag.Parse: E1018 14:16:09.811733    5156 reflector.go:214] k8s.io/client-go/1.5/tools/cache/reflector.go:109: Failed to list *v1.Service: Get http://192.168.33.11:8080/api/v1/services?resourceVersion=0: dial tcp 192.168.33.11:8080: getsockopt: connection refused
```

I would like to at least change the layout to be the same as my logs or/and silent the log messages until I get a new kubernetes connection.
",open,False,2016-10-18 21:18:18,2019-02-25 09:21:33
client-go,vklonghml,https://github.com/kubernetes/client-go/issues/19,https://api.github.com/repos/kubernetes/client-go/issues/19,kube-apiserver flag redefined: log_dir,"hi,forums
when i run go install in cmd/kube-apiserver, then start this binary, the service always failed with
panic(0x305bb20, 0xc8203cb430)
        /usr/local/go/src/runtime/panic.go:481 +0x3e6
flag.(_FlagSet).Var(0xc820088300, 0x7f9dde6366a0, 0xc8203cb3e0, 0x42546b0, 0x7, 0x4714660, 0x2f)
        /usr/local/go/src/flag/flag.go:776 +0x454
flag.(_FlagSet).StringVar(0xc820088300, 0xc8203cb3e0, 0x42546b0, 0x7, 0x0, 0x0, 0x4714660, 0x2f)
        /usr/local/go/src/flag/flag.go:679 +0xc7
flag.(*FlagSet).String(0xc820088300, 0x42546b0, 0x7, 0x0, 0x0, 0x4714660, 0x2f, 0xc8203cb3d0)
        /usr/local/go/src/flag/flag.go:692 +0x83
flag.String(0x42546b0, 0x7, 0x0, 0x0, 0x4714660, 0x2f, 0x7f9dde5b4d00)
        /usr/local/go/src/flag/flag.go:699 +0x5f
github.com/golang/glog.init()
        /opt/k8s/src/github.com/golang/glog/glog_file.go:41 +0x13e
k8s.io/client-go/1.4/pkg/labels.init()
        /opt/k8s/src/k8s.io/client-go/1.4/pkg/labels/selector.go:822 +0x5b
k8s.io/client-go/1.4/pkg/api/unversioned.init()
        /opt/k8s/src/k8s.io/client-go/1.4/pkg/api/unversioned/zz_generated.deepcopy.go:390 +0x6f
k8s.io/client-go/1.4/pkg/api.init()
        /opt/k8s/src/k8s.io/client-go/1.4/pkg/api/zz_generated.deepcopy.go:3749 +0x6e
k8s.io/client-go/1.4/rest.init()
        /opt/k8s/src/k8s.io/client-go/1.4/rest/versions.go:88 +0x75
k8s.io/kubernetes/plugin/pkg/client/auth/gcp.init()
        /opt/k8s/src/k8s.io/kubernetes/plugin/pkg/client/auth/gcp/gcp.go:119 +0x59
k8s.io/kubernetes/plugin/pkg/client/auth.init()
        /opt/k8s/src/k8s.io/kubernetes/plugin/pkg/client/auth/plugins.go:23 +0x3b
k8s.io/kubernetes/pkg/client/unversioned.init()
        /opt/k8s/src/k8s.io/kubernetes/pkg/client/unversioned/util.go:79 +0xe7
k8s.io/kubernetes/pkg/controller/serviceaccount.init()
        /opt/k8s/src/k8s.io/kubernetes/pkg/controller/serviceaccount/tokens_controller.go:746 +0xa8
k8s.io/kubernetes/cmd/kube-apiserver/app.init()
        /opt/k8s/src/k8s.io/kubernetes/cmd/kube-apiserver/app/server.go:310 +0x107
main.init()
        /opt/k8s/src/k8s.io/kubernetes/cmd/kube-apiserver/apiserver.go:54 +0x4f

even doing the steps below:
1)run godep restore (godep) in the client-go/1.4 folder, then remove the vendor folder of client-go. Then the packages in your GOPATH will be the only copy
2)or run godep save in your application folder to flatten all dependencies.

the problems can not be resolved, how can i do to solve this, thks.
",closed,False,2016-10-19 07:25:37,2017-03-15 00:49:03
client-go,xh3b4sd,https://github.com/kubernetes/client-go/issues/20,https://api.github.com/repos/kubernetes/client-go/issues/20,README.md points to examples which do not exist,"[The README.md](https://github.com/kubernetes/client-go/blob/75399f68c88d27167979821ac280936cfb13cfd6/README.md#how-to-use-it) points to examples which do not exist. I did also not find any example in the repository. Can somebody point me to examples? 

<img width=""978"" alt=""screen shot 2016-10-21 at 11 19 47"" src=""https://cloud.githubusercontent.com/assets/552769/19593324/636d50a2-9780-11e6-897b-9cbe87b105e6.png"">
",closed,False,2016-10-21 09:22:53,2016-10-26 17:51:58
client-go,timoreimann,https://github.com/kubernetes/client-go/issues/21,https://api.github.com/repos/kubernetes/client-go/issues/21,cannot build project in the 1.5 branch,"Trying to build in the 1.5 branch (and [directory](https://github.com/kubernetes/client-go/tree/4e647cdbb29217f9f0855caeaab354e7f19d7e42/1.5)) gives me this:

``` bash
> ~/Development/client-go/src/k8s.io/client-go/1.5 # go build ./...
kubernetes/typed/core/v1/fake/fake_core_client.go:66: cannot use FakePods literal (type *FakePods) as type ""k8s.io/client-go/1.5/kubernetes/typed/core/v1"".PodInterface in return argument:
    *FakePods does not implement ""k8s.io/client-go/1.5/kubernetes/typed/core/v1"".PodInterface (missing Evict method)
```

On master, things are working fine.

/cc @caesarxuchao 
",closed,False,2016-10-21 13:55:34,2016-10-26 12:30:52
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/22,https://api.github.com/repos/kubernetes/client-go/issues/22,manually copy the fix the fake_pod_expansion.go,"Manually copy the fix in the main repository. Fix https://github.com/kubernetes/client-go/issues/21

cc @timoreimann, could you try the fix? This repo does have any testing framework set, so I'm a little nervous to merge the PR, though I had tested it locally.
",closed,True,2016-10-21 17:08:47,2016-10-23 20:27:11
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/23,https://api.github.com/repos/kubernetes/client-go/issues/23,Add back examples,"Examples got deleted by the publisher robot. Manually added them back.
",closed,True,2016-10-21 19:33:20,2016-10-21 19:33:40
client-go,grobie,https://github.com/kubernetes/client-go/issues/24,https://api.github.com/repos/kubernetes/client-go/issues/24,"panic in cache: interface {} is *v1.Service, not *api.Service","Using the `StoreToServiceLister` in master (f11d57f) leads to panics due to an unmet type assertion in the `List` function.

```
func (s *StoreToServiceLister) List(selector labels.Selector) (ret []*api.Service, err error) {
    err = ListAll(s.Indexer, selector, func(m interface{}) {
        ret = append(ret, m.(*api.Service))
    })
    return ret, err
}
```
",closed,False,2016-10-28 22:26:24,2017-01-09 11:27:41
client-go,tnine,https://github.com/kubernetes/client-go/issues/25,https://api.github.com/repos/kubernetes/client-go/issues/25,1.4 subdirectory causes glide to fail,"When using the following glide.yaml, glide is unable to update or install the client-go to the ""1.4"" subdirectory under the root.  

`
package: github.com/30x/postgres-k8s/cli
import:
- package: github.com/spf13/cobra
  vcs: git
- package: k8s.io/client-go
  version: v1.4.0
`

This causes the following error.

`
[ERROR]	Error scanning k8s.io/client-go/kubernetes: open /Users/apigee/.glide/cache/src/https-k8s.io-client-go/kubernetes: no such file or directory
[ERROR]	This error means the referenced package was not found.
[ERROR]	Missing file or directory errors usually occur when multiple packages
[ERROR]	share a common dependency and the first reference encountered by the scanner
[ERROR]	sets the version to one that does not contain a subpackage needed required
[ERROR]	by another package that uses the shared dependency. Try setting a
[ERROR]	version in your glide.yaml that works for all packages that share this
[ERROR]	dependency.
[ERROR]	Error scanning k8s.io/client-go/pkg/api: open /Users/apigee/.glide/cache/src/https-k8s.io-client-go/pkg/api: no such file or directory
[ERROR]	This error means the referenced package was not found.
[ERROR]	Missing file or directory errors usually occur when multiple packages
[ERROR]	share a common dependency and the first reference encountered by the scanner
[ERROR]	sets the version to one that does not contain a subpackage needed required
[ERROR]	by another package that uses the shared dependency. Try setting a
[ERROR]	version in your glide.yaml that works for all packages that share this
[ERROR]	dependency.
`

Is it possible to remove the 1.4 subdirectory on the tag?",closed,False,2016-10-31 21:24:14,2016-11-21 22:33:45
client-go,aledbf,https://github.com/kubernetes/client-go/issues/26,https://api.github.com/repos/kubernetes/client-go/issues/26,Error using EventBroadcaster.StartRecordingToSink ,"I am converting a client to client-go and I see this error:

```
../../pkg/ingress/controller/controller.go:157: cannot use config.Client.Core().Events(config.Namespace) (type ""k8s.io/client-go/kubernetes/typed/core/v1"".EventInterface) as type record.EventSink in argument to eventBroadcaster.StartRecordingToSink:
	""k8s.io/client-go/kubernetes/typed/core/v1"".EventInterface does not implement record.EventSink (wrong type for Patch method)
		have Patch(string, ""k8s.io/client-go/pkg/api"".PatchType, []byte, ...string) (*""k8s.io/client-go/pkg/api/v1"".Event, error)
		want Patch(*""k8s.io/client-go/pkg/api/v1"".Event, []byte) (*""k8s.io/client-go/pkg/api/v1"".Event, error)
```

This is the code:
```
eventBroadcaster := record.NewBroadcaster()
eventBroadcaster.StartLogging(glog.Infof)
eventBroadcaster.StartRecordingToSink(config.Client.Core().Events(config.Namespace))
```

I'm doing something wrong or it's a bug?
Thanks!

**Edit:** same behavior in master or 1.5 branch",closed,False,2016-11-02 20:44:52,2016-11-21 22:34:59
client-go,caesarxuchao,https://github.com/kubernetes/client-go/issues/27,https://api.github.com/repos/kubernetes/client-go/issues/27,Copy versioned listers to client-go,"**Problem**
client-go currently only has [listers](https://github.com/kubernetes/client-go/blob/master/tools/cache/listers.go#L320) for internal version object, but the clients provided by client-go use versioned objects (like v1.Pod).

**Solution**
We need to copy the [listers](https://github.com/kubernetes/kubernetes/tree/master/pkg/client/listers) from k8s to client-go.

**Temporary workaround**
For now, users can call the conversion functions translate between versioned and internal API, e.g., [this line](https://github.com/kubernetes/kubernetes/blob/v1.5.0-alpha.2/pkg/api/v1/zz_generated.conversion.go#L5917) (use nil for conversion.Scope).
",closed,False,2016-11-02 22:18:26,2017-02-16 14:37:12
client-go,yifan-gu,https://github.com/kubernetes/client-go/issues/28,https://api.github.com/repos/kubernetes/client-go/issues/28,Import leader election code?,"As a user, if I want to use the leader election code (https://github.com/kubernetes/kubernetes/tree/master/pkg/client/leaderelection), then I have to switch back to import from `kubernetes/pkg/client` because the types defined here has a different path with the types defined in `kubernetes/pkg/client`. e.g.

```
leader_election.go:33: cannot use c (type *Client) as type ""github.com/yifan-gu/test/vendor/k8s.io/kubernetes/pkg/client/unversioned"".Interface in field value:
	*Client does not implement ""github.com/yifan-gu/test/vendor/k8s.io/kubernetes/pkg/client/unversioned"".Interface (wrong type for Apps method)
		have Apps() ""github.com/yifan-gu/test/vendor/k8s.io/client-go/1.4/kubernetes/typed/apps/v1alpha1"".AppsInterface
		want Apps() ""github.com/yifan-gu/test/vendor/k8s.io/kubernetes/pkg/client/unversioned"".AppsInterface
```",closed,False,2016-11-04 02:07:42,2017-07-16 23:54:43
client-go,wfarr,https://github.com/kubernetes/client-go/pull/29,https://api.github.com/repos/kubernetes/client-go/issues/29,Thirdpartyresources examples,"Adds a basic example for registering a ThirdPartyResource and interacting with a custom Resource type.

A follow-up PR will include a controller built on the same foundations, but a simple CRUD example will be useful for folks as well.

Tested against kubernetes 1.4.5 on GKE.

attn @caesarxuchao
cc  @mkobetic @ibawt @lxfontes

<!-- Reviewable:start -->

---
This change is [<img src=""https://reviewable.kubernetes.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.kubernetes.io/reviews/kubernetes/client-go/29)
<!-- Reviewable:end -->
",closed,True,2016-11-04 19:23:55,2016-11-14 15:53:05
client-go,wfarr,https://github.com/kubernetes/client-go/pull/30,https://api.github.com/repos/kubernetes/client-go/issues/30,Add Informer examples,"Demonstrates a basic controller watching Pod events in a cluster.

Tested against kubernetes 1.4.5 on GKE.

attn @caesarxuchao
cc @mkobetic @ibawt @lxfontes

<!-- Reviewable:start -->

---
This change is [<img src=""https://reviewable.kubernetes.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.kubernetes.io/reviews/kubernetes/client-go/30)
<!-- Reviewable:end -->
",closed,True,2016-11-04 21:21:59,2017-04-13 20:53:01
client-go,tsandall,https://github.com/kubernetes/client-go/issues/31,https://api.github.com/repos/kubernetes/client-go/issues/31,Dependency on k8s.io/kubernetes/pkg/util/ratelimit,"Hello!

It looks like a dependency on k8s.io/kubernetes crept in earlier today: https://github.com/kubernetes/client-go/commit/49f8f1bf914a4976d303f68b0c2276452f551d34

Is this intentional?

I only noticed this after adding client-go as a dependency in my project (using Glide) without providing a specific version to depend on.",closed,False,2016-11-07 23:57:58,2016-11-15 18:06:20
client-go,dshulyak,https://github.com/kubernetes/client-go/issues/32,https://api.github.com/repos/kubernetes/client-go/issues/32,Import remotecommand from kubernetes code,Is it possible to add following module https://github.com/kubernetes/kubernetes/blob/master/pkg/client/unversioned/remotecommand/remotecommand.go to client?,closed,False,2016-11-08 07:45:02,2018-02-20 06:27:00
client-go,arschles,https://github.com/kubernetes/client-go/issues/33,https://api.github.com/repos/kubernetes/client-go/issues/33,This repository depends on k8s.io/kubernetes,"The `./pkg/util/flowcontrol/throttle.go` file imports the `k8s.io/kubernetes/pkg/util/ratelimit` package (see [here](https://github.com/kubernetes/client-go/blob/49f8f1bf914a4976d303f68b0c2276452f551d34/pkg/util/flowcontrol/throttle.go#L22)). This import makes [glide](https://github.com/masterminds/glide) pull in the _entire_ `k8s.io/kubernetes` codebase in order to satisfy that dependency.

My initial understanding of this repository was that it would not have dependencies on `k8s.io/kubernetes`, so it could serve as a lightweight Go client for the Kubernetes API. Is that wrong?

cc/ @krancour",closed,False,2016-11-08 22:01:06,2016-11-08 22:06:41
client-go,suchisubhra,https://github.com/kubernetes/client-go/issues/34,https://api.github.com/repos/kubernetes/client-go/issues/34,add more func in config.go,"https://github.com/kubernetes/client-go/blob/75399f68c88d27167979821ac280936cfb13cfd6/rest/config.go

please add addQPS / addRatelimter so that we can pass our values for InClusterConfig.
Otherwise we are seeing throttling after 5 query (default values).

Or read from  api  server config.. we have set up  values there...",closed,False,2016-11-11 22:38:03,2018-02-20 06:26:59
client-go,fabxc,https://github.com/kubernetes/client-go/issues/35,https://api.github.com/repos/kubernetes/client-go/issues/35,Add prometheus metric package,"The `tools/metrics` package already exists. Prometheus as the default integration does not yet.

The following two PRs should be resolved before adding it:
* kubernetes/kubernetes#36702
* kubernetes/kubernetes#36704",closed,False,2016-11-12 18:59:57,2018-02-20 06:27:00
client-go,F21,https://github.com/kubernetes/client-go/issues/36,https://api.github.com/repos/kubernetes/client-go/issues/36,Is the client thread safe?,"I want to use the client to build an in-cluster service like this example: https://github.com/kubernetes/client-go/blob/master/examples/in-cluster/main.go

Is the client thread safe? In other words, can I create 1 client and use them across multiple goroutines, or would I have to use a mutex to ensure only 1 goroutine accesses the client at a time?",closed,False,2016-11-13 10:03:25,2016-11-22 03:28:51
client-go,wfarr,https://github.com/kubernetes/client-go/pull/37,https://api.github.com/repos/kubernetes/client-go/issues/37,Follow-up for ThirdPartyResources examples,"Follow-up to https://github.com/kubernetes/client-go/pull/29: 

* f485fdd Link to ugorji issue in code comments
* bd676a6 Add a link to the TPR feature issue in comments
* 4cf2426 Switch to post-1.5 import style
* 10a1750 Don't reuse api.Scheme and api.Codecs
* 3806ead Rename examples/third-party-resources to use underscores
* d939327 Update README for third-party-resources example

I believe this should address all the feedback offered in #29

<!-- Reviewable:start -->
---
This change is [<img src=""https://reviewable.kubernetes.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.kubernetes.io/reviews/kubernetes/client-go/37)
<!-- Reviewable:end -->
",closed,True,2016-11-14 15:52:29,2017-03-02 21:53:59
client-go,ideahitme,https://github.com/kubernetes/client-go/issues/38,https://api.github.com/repos/kubernetes/client-go/issues/38,Bundling k8s client-go includes internal packages,"Trying to bundle k8s client-go with godep throws the following error:
```

        imports k8s.io/client-go/kubernetes
	imports k8s.io/client-go/discovery
	imports k8s.io/client-go/pkg/api
	imports k8s.io/client-go/pkg/api/meta
	imports k8s.io/client-go/pkg/api/unversioned
	imports github.com/go-openapi/spec
	imports github.com/go-openapi/jsonreference
	imports github.com/PuerkitoBio/purell
	imports golang.org/x/text/secure/precis
	imports golang.org/x/text/cases
	imports golang.org/x/text/internal
	imports golang.org/x/text/language
	imports golang.org/x/text/internal/tag
```",closed,False,2016-11-14 21:28:07,2017-03-15 00:46:57
client-go,dtan4,https://github.com/kubernetes/client-go/pull/39,https://api.github.com/repos/kubernetes/client-go/issues/39,Make example codes buildable with the latest client-go,"## WHY

Currently, examples cannot be built with master / v2.0.0-alpha version of client-go.

```
$ go build -v
main.go:24:2: cannot find package ""k8s.io/client-go/1.4/kubernetes"" in any of:
        /Users/dtan4/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/1.4/kubernetes (vendor tree)
        /usr/local/Cellar/go/1.7.3/libexec/src/k8s.io/client-go/1.4/kubernetes (from $GOROOT)
        /Users/dtan4/src/k8s.io/client-go/1.4/kubernetes (from $GOPATH)
main.go:25:2: cannot find package ""k8s.io/client-go/1.4/pkg/api"" in any of:
        /Users/dtan4/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/1.4/pkg/api (vendor tree)
        /usr/local/Cellar/go/1.7.3/libexec/src/k8s.io/client-go/1.4/pkg/api (from $GOROOT)
        /Users/dtan4/src/k8s.io/client-go/1.4/pkg/api (from $GOPATH)
main.go:26:2: cannot find package ""k8s.io/client-go/1.4/tools/clientcmd"" in any of:
        /Users/dtan4/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/1.4/tools/clientcmd (vendor tree)
        /usr/local/Cellar/go/1.7.3/libexec/src/k8s.io/client-go/1.4/tools/clientcmd (from $GOROOT)
        /Users/dtan4/src/k8s.io/client-go/1.4/tools/clientcmd (from $GOPATH)
```

## WHAT

Make example codes buildable with master version.

I read https://github.com/kubernetes/client-go#contributing-code and found `pkg/client` package. However, it seemed that `examples` directory did not exist there, so I made this pull request directly in this repository.

If there is another proper way to send patches, please let me know.

<!-- Reviewable:start -->
---
This change is [<img src=""https://reviewable.kubernetes.io/review_button.svg"" height=""34"" align=""absmiddle"" alt=""Reviewable""/>](https://reviewable.kubernetes.io/reviews/kubernetes/client-go/39)
<!-- Reviewable:end -->
",closed,True,2016-11-15 01:57:38,2016-11-21 22:09:50
client-go,jsloyer,https://github.com/kubernetes/client-go/issues/40,https://api.github.com/repos/kubernetes/client-go/issues/40,Refresh token requires id_token in response but openid spec it is optional ,"In the method [Refresh](https://github.com/kubernetes/client-go/blob/master/plugin/pkg/client/auth/oidc/oidc.go#L227-L253), there is a line to parse the response from an OpenID provider.  The [current implementation expects](https://github.com/kubernetes/client-go/blob/master/plugin/pkg/client/auth/oidc/oidc.go#L237) an `id_token`.  However in the [Openid spec](http://openid.net/specs/openid-connect-core-1_0.html#RefreshTokenResponse) it states that `id_token` is not required on the response.",closed,False,2016-11-15 21:16:45,2016-11-15 22:18:40
client-go,schmohlio,https://github.com/kubernetes/client-go/issues/41,https://api.github.com/repos/kubernetes/client-go/issues/41,release 1.5 doesn't build,"Hi all,

Thank you for making the `client-go` available!

I'm having trouble generally using the library with release 1.5 (needed for google auth). The only process I was able to get working involved checkout release 1.5, `godep restore`, and copying it over to a k8s.io directory in my `src/` folder.  This allowed me to get the examples up and running, but doesn't allow me to use `godep save` once i want to save my host project.

Would it be possible to get `go get k8s.io/kubernetes/client-go/1.5/...` working to eschew the complexity of messing with git? 

Furthermore, simply checking out release-1.5 and running `godep install ./...` yields the following type of errors 
```
can't load package: package github.com/kubernetes/client-go/1.5/tools/cache: code in directory .../src/github.com/kubernetes/client-go/1.5/tools/cache expects import ""k8s.io/client-go/1.5/tools/cache""
```",closed,False,2016-11-16 22:10:57,2016-11-17 00:20:34
client-go,adieu,https://github.com/kubernetes/client-go/issues/42,https://api.github.com/repos/kubernetes/client-go/issues/42,App Engine support,"My app running on appengine needs to control k8s cluster running in container engine. So I patched v2.0.0-alpha.0 release to make it work.

The patch is at https://github.com/adieu/client-go/commit/a2092b1c5c83a8b1a761ad9222de80a20f310312

I'm not quite sure if we have plan to support appengine. If we do, I'd be pleased to create a PR with my patch.

I also tried to apply the patch with the latest master, it wouldn't work since latest commits use `unsafe` package for conversion. We might have to make another patch to disable conversion for appengine.",closed,False,2016-11-18 14:15:33,2018-02-20 06:27:00
client-go,ngortheone,https://github.com/kubernetes/client-go/issues/43,https://api.github.com/repos/kubernetes/client-go/issues/43,[qestion] release-2.0 compatibility,"There is a branch named `release-2.0`. But the ReadMe file looks either irrelevant or outdated.
Is it a truly another release or just  `release-1.5` renamed?
Anyway, that would be great to know compatibilities of this release 
Thanks",closed,False,2016-11-20 14:26:40,2017-01-09 10:00:42
client-go,Norbell,https://github.com/kubernetes/client-go/issues/44,https://api.github.com/repos/kubernetes/client-go/issues/44,Where can I find the Deployments API?,"Hello,

I try to use Deployments, but can't find the right subpackage?
I'm really confused about which package implements which set of APIs. Where are the extension, alpha and beta  API-Objekts implemented?

When should I use:
/kubernetes
/ai
/api/v1
/unversioned 
/rest 

Thank your very much!",closed,False,2016-11-20 23:35:09,2016-11-23 21:45:52
client-go,ianlewis,https://github.com/kubernetes/client-go/issues/45,https://api.github.com/repos/kubernetes/client-go/issues/45,Support for Exec & Attach APIs,"Currently the client doesn't seem to support the Exec into container, attach to container APIs. The client should support those APIs.",closed,False,2016-11-22 05:15:56,2019-04-03 01:35:52
client-go,dshulyak,https://github.com/kubernetes/client-go/issues/46,https://api.github.com/repos/kubernetes/client-go/issues/46,Watcher doesn't see events after it was recreated,"We are writing application using client-go https://github.com/Mirantis/k8s-externalipcontroller.

Logs from scheduler (removes ipclaims and watches events):

```
I1124 11:19:59.327322       1 scheduler.go:373] Deleting ipclaim 10-107-10-2-24
I1124 11:19:59.356793       1 scheduler.go:179] Ipclaim deleted 10-107-10-2-24, resource version 14437
I1124 11:19:59.356837       1 scheduler.go:373] Deleting ipclaim 10-107-10-3-24
I1124 11:19:59.370075       1 scheduler.go:179] Ipclaim deleted 10-107-10-3-24, resource version 14439
I1124 11:19:59.370490       1 scheduler.go:373] Deleting ipclaim 10-107-10-4-24
I1124 11:19:59.385053       1 scheduler.go:179] Ipclaim deleted 10-107-10-4-24, resource version 14441
I1124 11:19:59.385136       1 scheduler.go:373] Deleting ipclaim 10-107-10-5-24
I1124 11:19:59.391902       1 scheduler.go:179] Ipclaim deleted 10-107-10-5-24, resource version 14442
```

Controller (watches events):

```
I1124 11:19:59.353745       7 controller.go:119] Received delete event for 10-107-10-2-24 - dind-node-2. Resource version 14437
I1124 11:19:59.353779       7 controller.go:148] Processing claim 10.107.10.2/24 with node dind-node-2 and uid dind-node-2
I1124 11:19:59.353790       7 netutils.go:78] Removing addr 10.107.10.2/24 from link docker0
I1124 11:19:59.394784       7 streamwatcher.go:107] Unable to decode an event from the watch stream: read tcp 172.17.0.7:43748->10.0.0.1:443: read: connection reset by peer
I1124 11:19:59.394836       7 reflector.go:403] github.com/Mirantis/k8s-externalipcontroller/vendor/k8s.io/client-go/1.5/tools/cache/reflector.go:109: Watch close - *extensions.IpClaim total 11 items received
I1124 11:19:59.394852       7 controller.go:48] Calling claim watcher with options {{ } <nil> <nil> false 14437 0xc8203eeff8}
```

I am using cache.ListerWatcher and NewInformer. Maybe i am missing something, but i didn't find any special handling of this failures in existing controllers.

@caesarxuchao can you take a look at this problem?",closed,False,2016-11-24 11:28:22,2017-03-15 00:45:50
client-go,keyingliu,https://github.com/kubernetes/client-go/issues/47,https://api.github.com/repos/kubernetes/client-go/issues/47,v1.Event.Search does not work,"k8s.io/client-go/kubernetes/typed/core/v1/event_expansion.go:
```
func (e *events) Search(objOrRef runtime.Object) (*v1.EventList, error) {
	ref, err := api.GetReference(objOrRef)
	if err != nil {
		return nil, err
	}
	if e.ns != """" && ref.Namespace != e.ns {
		return nil, fmt.Errorf(""won't be able to find any events of namespace '%v' in namespace '%v'"", ref.Namespace, e.ns)
	}
	stringRefKind := string(ref.Kind)
	var refKind *string
	if stringRefKind != """" {
		refKind = &stringRefKind
	}
	stringRefUID := string(ref.UID)
	var refUID *string
	if stringRefUID != """" {
		refUID = &stringRefUID
	}
	fieldSelector := e.GetFieldSelector(&ref.Name, &ref.Namespace, refKind, refUID)
	return e.List(v1.ListOptions{FieldSelector: fieldSelector.String()})
}
```
`ref, err := api.GetReference(objOrRef)` should be `ref, err := v1.GetReference(objOrRef)`, or the search will be failed if the parameter is a v1 object. ",closed,False,2016-11-25 09:32:03,2017-02-22 13:48:41
client-go,sykesm,https://github.com/kubernetes/client-go/issues/48,https://api.github.com/repos/kubernetes/client-go/issues/48,Fake Clientset requires namespace be set on Create and Update but the real Clientset and API server do not,"The fake `Clientset` requires creates and updates of namespaced objects to have the namespace specified in the target runtime object metadata while the same does not appear to be true for the real `Clientset` and API server.

In particular, something like this:
```go
func createConfigMap(c kubernetes.Interface) error {
	_, err := c.Core().ConfigMaps(""namespace"").Create(&v1.ConfigMap{
		ObjectMeta: v1.ObjectMeta{Name: ""name""},
		Data:       map[string]string{""key"": ""value""},
	})
	return err
}
```
works against a real cluster with a real `Clientset` but fails with `no namespace specified for a namespaced kind /v1, Kind=ConfigMap` when using the fake.

---

It looks like Create and Update end up adding the object to the `tracker` in [`fixture.go`][1] where the [namespace is checked][2]. The current implementation passes the namespace from the target object without accounting for the namespace from the request.

In the real API server, namespaces are propagated from the request path to the target object when a namespace isn't set on the object. This happens when [`ValidNamespace`][3] is called out of [`BeforeCreate`][4] and [`BeforeUpdate`][5].

Should the behavior of the tracker be updated to propagate the namespace from the request to the object when it's missing on the object?

[1]: https://github.com/kubernetes/client-go/blob/5d8c36c93cf544e3bde13caa4c6222b65753ec3c/testing/fixture.go#L245-L251
[2]: https://github.com/kubernetes/client-go/blob/5d8c36c93cf544e3bde13caa4c6222b65753ec3c/testing/fixture.go#L289
[3]: https://github.com/kubernetes/kubernetes/blob/35a6bfbceed9d8bc779fbfe00963b7674ea68b77/pkg/api/context.go#L104-L110
[4]: https://github.com/kubernetes/kubernetes/blob/35a6bfbceed9d8bc779fbfe00963b7674ea68b77/pkg/api/rest/create.go#L63-L65
[5]: https://github.com/kubernetes/kubernetes/blob/35a6bfbceed9d8bc779fbfe00963b7674ea68b77/pkg/api/rest/update.go#L83-L85",closed,False,2016-12-02 13:25:00,2017-02-02 02:30:19
client-go,ericchiang,https://github.com/kubernetes/client-go/issues/49,https://api.github.com/repos/kubernetes/client-go/issues/49,discovery: don't import client auth provider plugins,"Import statement here[0].

I maintain the OIDC auth plugin, and I don't think they're useful for most clients, and it has a pretty big dependency footprint.

Can we document which empty imports you need to use to get `oidc` or `gce` support instead of importing these by default? Happy to open this same issue in the Kubernetes repo if that's where it needs to be addressed.

[0] https://github.com/kubernetes/client-go/blob/5d8c36c93cf544e3bde13caa4c6222b65753ec3c/discovery/helper.go#L27",closed,False,2016-12-02 18:26:05,2017-02-22 16:12:41
client-go,josselin-c,https://github.com/kubernetes/client-go/issues/50,https://api.github.com/repos/kubernetes/client-go/issues/50,v1beta1/deployment: delete dependents,"When removing a deployment I'd like the related replicaset/pods to be removed as well (this is the cascading mode in kubectl). 

I tried to call `Deployments(""ns"").Delete` with the `OrphanDependents` option set to `true` or `false` but it didn't seem to do anything. 
How can I do the cascading delete with client-go?",closed,False,2016-12-07 17:00:39,2016-12-22 10:14:49
client-go,gtaylor,https://github.com/kubernetes/client-go/issues/51,https://api.github.com/repos/kubernetes/client-go/issues/51,Add port-forwarding example,"This would be really helpful, as I'm coming from another language. In particular, how to come about the `dialer` param here: https://github.com/kubernetes/client-go/blob/75399f68c88d27167979821ac280936cfb13cfd6/tools/portforward/portforward.go#L111",closed,False,2016-12-12 08:13:00,2018-11-06 10:43:05
client-go,davecheney,https://github.com/kubernetes/client-go/issues/52,https://api.github.com/repos/kubernetes/client-go/issues/52,examples/third-party-resources does not compile,"The recently added third-party-resource example does not compile
```go
% go get k8s.io/client-go/examples/third-party-resources
package k8s.io/client-go/pkg/api/unversioned: cannot find package ""k8s.io/client-go/pkg/api/unversioned"" in any of:
        /home/dfc/go/src/k8s.io/client-go/pkg/api/unversioned (from $GOROOT)
        /home/dfc/src/k8s.io/client-go/pkg/api/unversioned (from $GOPATH)
```
",closed,False,2016-12-14 00:36:49,2016-12-14 21:37:29
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/53,https://api.github.com/repos/kubernetes/client-go/issues/53,fix thirdparty example,"Update the example to compile against HEAD.

Fixes https://github.com/kubernetes/client-go/issues/52

cc @wfarr ",closed,True,2016-12-14 19:55:20,2016-12-14 20:34:55
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/54,https://api.github.com/repos/kubernetes/client-go/issues/54,Cherry-pick fixes to release 2.0,"CHANGELOG:
clientset supports multiple versions per group
apps & policy group graduate to v1beta1

I'll make v2.0.0 after this PR gets merged.  

After this PR gets merged, the release-2.0 branch is roughly tracking the kubernetes/release-1.5 branch. I'll manually cherry-pick bug fixes to the release-2.0 branch, and create v2.x.0 tags. (It seems we should name the branch release-2 instead of release-2.0)",closed,True,2016-12-14 23:21:18,2016-12-20 06:23:23
client-go,inetkiller,https://github.com/kubernetes/client-go/issues/55,https://api.github.com/repos/kubernetes/client-go/issues/55,govendor get k8s.io/client-go failed,"when exec
`govendor get k8s.io/client-go`
 
I get following error:
`can't load package: package k8s.io/client-go: no buildable Go source files in ~/go/src/k8s.io/client-go` ",closed,False,2016-12-19 06:05:46,2017-01-09 09:38:03
client-go,LiuZhiyan,https://github.com/kubernetes/client-go/issues/56,https://api.github.com/repos/kubernetes/client-go/issues/56,Statefulset support,"In client-go master branch statefulset support [0] has been added by bot from kubernetes master days ago, however it is not included in 1.4 and 1.5 release. So may I know if there is a plan to support it? Will team release a new client version in near future? Thanks.

[0] https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/apps/v1beta1/statefulset.go",closed,False,2016-12-20 05:13:52,2017-03-15 00:45:00
client-go,FlorianOtel,https://github.com/kubernetes/client-go/issues/57,https://api.github.com/repos/kubernetes/client-go/issues/57,Support for Network Policies,"Hello all, 

As described in [this](https://groups.google.com/d/topic/kubernetes-dev/O-TgMlH-FAY/discussion) thread, I've discovered that the existing ""client-go"" package does not yet support extension methods for network policies. 

By modelling it after existing support for PodSecurityPolicy -- and some help from the main repository -- I have now implemented those methods. 

They are located in my fork here:  https://github.com/FlorianOtel/client-go

However, it seems that any PRs have to be submitted via main repo, as opposed to directly here. 

Unless otherwise advised, I will try doing so next. 

Submitting this issue here for reference. 

Thanks,

/Florian
",closed,False,2016-12-20 13:51:44,2018-02-20 05:26:01
client-go,philips,https://github.com/kubernetes/client-go/issues/58,https://api.github.com/repos/kubernetes/client-go/issues/58,versioning: this repo is weird to use with godocs and glide,"Using this repo with glide is super bizarre UX. When I pin it to 

Essentially the workflow works like this:

- Visit godoc.org/k8s.io/client-go, see functions I want
- glide get k8s.io/client-go
- glide asks me if I want to use v1.5 release b/c it is tagged
- Try to import k8s.io/client-go/dynamic and it doesn't exist

Can we put the v1.4, v1.5, etc dirs into the master branch as well? Otherwise this UX is really confusing when compared to every other Go library.",closed,False,2016-12-29 23:45:52,2017-01-18 23:20:27
client-go,ash2k,https://github.com/kubernetes/client-go/issues/59,https://api.github.com/repos/kubernetes/client-go/issues/59,Third Party Resources example improvements,"Thanks for all the work that has been done here! I tried to use the client when it was part of main repo and it was so hard I gave up. Now it is much more useable! I have a few questions/suggestions:

- `Example` struct uses `ObjectMeta` from `k8s.io/client-go/pkg/api` package. Is that right? Should it be a versioned API object from `k8s.io/client-go/pkg/api/v1`? I only found this document [api_changes.md] with the phrase ""Clients should consume and operate on the versioned APIs exclusively"". Is there a mode specific document with guidelines on how to use Third Party Resources with detailed explanations and code samples? Would be nice to improve [TPR] docs with at least a link to this repo.
- Package level `config` variable in `main.go` is not used, it is shadowed by the one defined in `main()`. Should probably be deleted.
- `configureClient()` mutates global `api.Scheme` - it is probably a bad idea. Because of that a program I'm writing had a race condition on that field. Any reasons not to create a new `Scheme` instance and mutate it (that is what I did)?

[api_changes.md]: https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md
[TPR]: http://kubernetes.io/docs/user-guide/thirdpartyresources/",closed,False,2017-01-08 03:18:12,2017-02-22 13:48:43
client-go,yvespp,https://github.com/kubernetes/client-go/issues/60,https://api.github.com/repos/kubernetes/client-go/issues/60,ThirdPartyResources TypeMeta empty?,"While using ThirdPartyResources together with Informer I noticed that sometimes the Kind and APIVersion are missing.

I wrote a little test app based on the ThirdPartyResources and Informer examples to reproduce the issue. Source: https://github.com/yvespp/tpr-example
Here is the output of the app:

```
lodur:tpr-example yves$ $GOPATH/bin/tpr-example -kubeconfig ~/.kube/config 
SKIPPING: already exists &v1beta1.ThirdPartyResource{TypeMeta:v1.TypeMeta{Kind:"""", APIVersion:""""}, ObjectMeta:v1.ObjectMeta{Name:""example.k8s.io"", GenerateName:"""", Namespace:"""", SelfLink:""/apis/extensions/v1beta1/thirdpartyresourcesexample.k8s.io"", UID:""98135044-d69c-11e6-9758-165fba9cabe3"", ResourceVersion:""12807"", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:63619584673, nsec:0, loc:(*time.Location)(0x15d1720)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ClusterName:""""}, Description:""An Example ThirdPartyResource"", Versions:[]v1beta1.APIVersion{v1beta1.APIVersion{Name:""v1""}}}
GET: main.Example{TypeMeta:v1.TypeMeta{Kind:"""", APIVersion:""""}, Metadata:v1.ObjectMeta{Name:""example1"", GenerateName:"""", Namespace:""default"", SelfLink:""/apis/k8s.io/v1/namespaces/default/examples/example1"", UID:""c6f43676-d6a7-11e6-9758-165fba9cabe3"", ResourceVersion:""18219"", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:63619589476, nsec:0, loc:(*time.Location)(0x15d1720)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ClusterName:""""}, Spec:main.ExampleSpec{Foo:""hello"", Bar:true}}
LIST: main.ExampleList{TypeMeta:v1.TypeMeta{Kind:"""", APIVersion:""""}, Metadata:v1.ListMeta{SelfLink:""/apis/k8s.io/v1/examples"", ResourceVersion:""18804""}, Items:[]main.Example{main.Example{TypeMeta:v1.TypeMeta{Kind:""Example"", APIVersion:""k8s.io/v1""}, Metadata:v1.ObjectMeta{Name:""example1"", GenerateName:"""", Namespace:""default"", SelfLink:""/apis/k8s.io/v1/namespaces/default/examples/example1"", UID:""c6f43676-d6a7-11e6-9758-165fba9cabe3"", ResourceVersion:""18219"", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:63619589476, nsec:0, loc:(*time.Location)(0x15d1720)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ClusterName:""""}, Spec:main.ExampleSpec{Foo:""hello"", Bar:true}}}}
Starting watch!
listing examples from store:
CREATED: default/example1, APIVersion: k8s.io/v1, Kind: Example
UPDATED:
  old: default/example1, APIVersion: k8s.io/v1, Kind: Example
  new: default/example1, APIVersion: k8s.io/v1, Kind: Example
UPDATED:
  old: default/example1, APIVersion: k8s.io/v1, Kind: Example
  new: default/example1, APIVersion: k8s.io/v1, Kind: Example
UPDATED:
  old: default/example1, APIVersion: k8s.io/v1, Kind: Example
  new: default/example1, APIVersion: k8s.io/v1, Kind: Example
UPDATED:
  old: default/example1, APIVersion: k8s.io/v1, Kind: Example
  new: default/example1, APIVersion: k8s.io/v1, Kind: Example
DELETED: default/example1, APIVersion: , Kind: 
CREATED: default/example1, APIVersion: , Kind: 
UPDATED:
  old: default/example1, APIVersion: , Kind: 
  new: default/example1, APIVersion: , Kind: 
UPDATED:
  old: default/example1, APIVersion: , Kind: 
  new: default/example1, APIVersion: , Kind: 
UPDATED:
  old: default/example1, APIVersion: , Kind: 
  new: default/example1, APIVersion: , Kind: 
^Creceived signal 2, exiting...
```

As you can see, the first create and update events have the TypeMeta but all events starting form the DELETED event have no TypeMeta.
The first resource get's created in the code, the DELETED and CREATED events come from these commands:
```
kubectl delete -f example.yaml 
kubectl create -f example.yaml 
```
I used the client from [HEAD](https://github.com/kubernetes/client-go/commit/24a02a6d7d2c9a21b12a3eb35c71c784e63825f4) but originally run into the problem with the v1.5.0 and Kubernetes 1.4.7.

Are there some issues with the test code or is this a bug?",closed,False,2017-01-09 20:50:32,2017-12-26 04:36:38
client-go,ash2k,https://github.com/kubernetes/client-go/pull/61,https://api.github.com/repos/kubernetes/client-go/issues/61,Cleanup example,Fix for #59. I'm not sure about `Schema` - see [the comment in the `init()` function](https://github.com/kubernetes/kubernetes/blob/master/pkg/api/register.go#L75). If a new Schema is created for the client does it need to have those converter functions added manually?,closed,True,2017-01-10 08:33:11,2017-02-08 11:18:54
client-go,k82cn,https://github.com/kubernetes/client-go/issues/62,https://api.github.com/repos/kubernetes/client-go/issues/62,How to get node resource?,"In NodeInformer callback (AddFunc), it received `v1.Node` which I can not get `allocatable` of that node:

```
pkg/util/resource.go:17: cannot call pointer method on rl[""github.com/k82cn/kube-arbitrator/vendor/k8s.io/client-go/1.5/pkg/api/v1"".ResourceCPU]
pkg/util/resource.go:17: cannot take the address of rl[""github.com/k82cn/kube-arbitrator/vendor/k8s.io/client-go/1.5/pkg/api/v1"".ResourceCPU]
pkg/util/resource.go:18: cannot call pointer method on rl[""github.com/k82cn/kube-arbitrator/vendor/k8s.io/client-go/1.5/pkg/api/v1"".ResourceMemory]
pkg/util/resource.go:18: cannot take the address of rl[""github.com/k82cn/kube-arbitrator/vendor/k8s.io/client-go/1.5/pkg/api/v1"".ResourceMemory]
```

Related codes:

```
func NewResource(rl v1.ResourceList) *Resource {
	return &Resource{
		MilliCPU: float64(rl[v1.ResourceCPU].MilliValue()),
		Memory:   float64(rl[v1.ResourceMemory].Value()),
	}
}
```

Any suggestion?",closed,False,2017-01-10 11:05:29,2017-01-11 00:23:13
client-go,strugglingyouth,https://github.com/kubernetes/client-go/issues/63,https://api.github.com/repos/kubernetes/client-go/issues/63,Is there a document to explain method of use.,"Is there a document to explain method of use, I don't know how to start，urgent need to use，Does anyone know，thanks.",closed,False,2017-01-10 13:03:28,2017-03-15 00:43:39
client-go,du2016,https://github.com/kubernetes/client-go/issues/64,https://api.github.com/repos/kubernetes/client-go/issues/64,can the default conf.APIPath in k8s.io/client-go/1.5/dynamic/client.go change to  /apis?,"can the default conf.APIPath in k8s.io/client-go/1.5/dynamic/client.go change to  /apis,
i think the default APIPath is /apis and the default APIVersion path is /api.",closed,False,2017-01-12 11:06:11,2017-01-14 02:49:46
client-go,rmohr,https://github.com/kubernetes/client-go/pull/65,https://api.github.com/repos/kubernetes/client-go/issues/65,Add workqueue example,"Demonstrates how to compose a controller out of cache.Controller, cache.Indexer and a workqueue.

Tested on kubernetes 1.4.5.",closed,True,2017-01-12 12:33:54,2017-05-01 17:05:20
client-go,hongchaodeng,https://github.com/kubernetes/client-go/issues/66,https://api.github.com/repos/kubernetes/client-go/issues/66,concurrent map writes on plugin/pkg/client/auth/gcp/gcp.go:115 ,"client-go version: v2.0.0.alpha.1

We are encountering panics like:
```
fatal error: concurrent map writes
...
vendor/k8s.io/client-go/plugin/pkg/client/auth/gcp/gcp.go:115 +0x191 fp=0xc4206e5510 sp=0xc4206e5468
```

Seems to be fixed in https://github.com/kubernetes/kubernetes/pull/36680/

But the change isn't available in any client-go release, or release-2.0 branch which should track k8s 1.5 changes.",closed,False,2017-01-14 19:35:15,2017-02-16 19:19:46
client-go,rubenv,https://github.com/kubernetes/client-go/issues/67,https://api.github.com/repos/kubernetes/client-go/issues/67,Cannot use GetOptions{}?,"I'm having code like this:

```go
_, err = nsClient.Get(t.namespace, meta_v1.GetOptions{})
```

Where `nsClient` is a `v1.NamespaceInterface`.

This defines the `Get()` method as follows:

```go
Get(name string, options meta_v1.GetOptions) (*v1.Namespace, error)
```

Sadly `meta_v1` is a vendored package:

```go
meta_v1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
```

If I refer to `GetOptions()` in my code directly, by adding the same import, I get the following:

```
./targets.go:138: cannot use ""k8s.io/apimachinery/pkg/apis/meta/v1"".GetOptions
 literal (type ""k8s.io/apimachinery/pkg/apis/meta/v1"".GetOptions) as type
 ""k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".GetOptions
 in argument to nsClient.Get
```

Whereas when I try to refer to the vendored package, I get the (correct) error:

```
package github.com/rubenv/kube-appdeploy
        imports k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/apis/meta/v1:
        use of vendored package not allowed
```

How on earth is one supposed to use this library?",closed,False,2017-01-16 10:55:32,2017-02-16 19:18:43
client-go,andrejvanderzee,https://github.com/kubernetes/client-go/issues/68,https://api.github.com/repos/kubernetes/client-go/issues/68,Compatibility matrix documentation,"The documentation on the compatibility is rather puzzling ;-)

> Compatibility matrix
> 
> client-go/1.4 is compatible with Kubernetes 1.3 through 1.5; it includes all features provided by Kubernetes 1.4.
> client-go/1.5 is compatible with Kubernetes 1.3 through 1.5; it includes all features provided by Kubernetes 1.4.

So when should one use 1.4 and when 1.5?",closed,False,2017-01-17 09:22:19,2017-03-15 00:42:35
client-go,xiang90,https://github.com/kubernetes/client-go/issues/69,https://api.github.com/repos/kubernetes/client-go/issues/69,question: major version bump,"I noticed that there is a client 2.0 release branch, which bumps the major version from 1 to 2.

I assume that it introduces some breaking changes. But I could not find a doc that explains what has been changed and why it is changed. Will the release 1 branch continue to be maintained and supported? Or everyone should migrate to 2.0 as soon as possible?

I am asking since we just tried to migrate our client from k8s internal client to client-go/1.5. I am wondering if we should migrate from 1.5 to 2.0.

/cc @hongchaodeng @caesarxuchao @lavalamp @philips",closed,False,2017-01-17 16:47:01,2017-02-16 23:58:05
client-go,hongchaodeng,https://github.com/kubernetes/client-go/issues/70,https://api.github.com/repos/kubernetes/client-go/issues/70,incompatibility between branches of release-2.0 and master,"I was having some incompatibility issues between release-2.0 branch and master branch in client-go. Just submitting issues here and inquiring more info on releases. Here are some example issues:

- ""k8s.io/client-go/pkg/labels"" doesn't exist anymore. We use some methods like labels.Everything(), labels.SelectorFromSet().

- ""k8s.io/client-go/pkg/api/unversioned"" doesn't exist anymore. We decode unversioned.Status{} from watch stream, use unversioned.TypeMeta/ListMeta for object/listObject, use unversioned.LabelSelector for ""extensions/v1beta1"".ReplicaSet, etc.

- ""k8s.io/client-go/pkg/types"" and ""k8s.io/client-go/pkg/api/meta/metatypes"" doesn't exist anymore. Use types.UID and meattypes.OwnerReference .

- Importing unfound packages: ""k8s.io/client-go/pkg/api/meta"", ""k8s.io/apimachinery/pkg/openapi"" .

What's the plan for client-go on this? Is client-go gonna release 3.0 for k8s 1.6? 

And what's the plan for maintaining each releases? It seems like release-2.0 has issues as mentioned in https://github.com/kubernetes/client-go/issues/66 but there wasn't any answer or releases to import fixes from upstream for it.",closed,False,2017-01-17 22:13:51,2017-02-16 19:17:46
client-go,caitong93,https://github.com/kubernetes/client-go/issues/71,https://api.github.com/repos/kubernetes/client-go/issues/71,Any plan for fake dynamic client,It would be nice to have a fake dynamic client for mock  :D,closed,False,2017-01-18 11:08:55,2017-02-09 15:04:15
client-go,deads2k,https://github.com/kubernetes/client-go/pull/72,https://api.github.com/repos/kubernetes/client-go/issues/72,update for new packages,@lavalamp where do these examples live.  They need some updates.,closed,True,2017-01-18 21:15:35,2017-02-14 01:35:55
client-go,lavalamp,https://github.com/kubernetes/client-go/issues/73,https://api.github.com/repos/kubernetes/client-go/issues/73,Continuous testing for examples,Recent changes in the main repo broke the examples stored here. We should turn on travis or some other CI to at least be notified when that happens.,closed,False,2017-01-18 21:35:49,2017-02-02 01:03:00
client-go,DirectXMan12,https://github.com/kubernetes/client-go/issues/74,https://api.github.com/repos/kubernetes/client-go/issues/74,Kubelet Client and API types,"Kubelet exposes the stats API (https://github.com/kubernetes/kubernetes/tree/master/pkg/kubelet/api/v1alpha1/stats) as well as an associated client (https://github.com/kubernetes/kubernetes/tree/master/pkg/kubelet/client).  Heapster uses these to talk to the the legacy stats API and the summary API (see https://github.com/kubernetes/heapster/tree/master/metrics/sources/kubelet and https://github.com/kubernetes/heapster/tree/master/metrics/sources/kubelet).

Having those API types and the client code here (or in a separate repo) would be useful, since it would work towards removing the circular dependency between Heapster and Kubernetes.

cc @deads2k @lavalamp ",closed,False,2017-01-19 23:17:07,2018-01-03 16:28:41
client-go,berrange,https://github.com/kubernetes/client-go/pull/75,https://api.github.com/repos/kubernetes/client-go/issues/75,Fix build of third-party-resource example program,"The TPR example was broken by the extraction of much
client-go code into the apimachinery package.

",closed,True,2017-01-20 11:12:36,2017-02-02 09:41:21
client-go,justinsb,https://github.com/kubernetes/client-go/issues/76,https://api.github.com/repos/kubernetes/client-go/issues/76,Default to protobuf?,"I was reviewing some code that sets `cfg.ContentType = ""application/vnd.kubernetes.protobuf""` to opt-in to protobuf, but then I was wondering why that is needed (context 
https://github.com/kubernetes/ingress/pull/143#discussion_r97200977)

Can client-go just default to protobuf?  As a user of client-go, I don't feel like I'm in a better position to make that decision than client-go is :-)
",closed,False,2017-01-21 16:52:59,2018-11-08 11:01:41
client-go,fate-grand-order,https://github.com/kubernetes/client-go/pull/77,https://api.github.com/repos/kubernetes/client-go/issues/77,fix misspell “ underlying” in request.go,"Sorry, client-go does not accept changes via pull requests at this time. Please
submit your pull request to the main repository:
https://github.com/kubernetes/kubernetes.  See the guidance here:
https://github.com/kubernetes/client-go#contributing-code.
",closed,True,2017-01-22 15:50:38,2017-01-22 15:51:21
client-go,lavalamp,https://github.com/kubernetes/client-go/issues/78,https://api.github.com/repos/kubernetes/client-go/issues/78,Switch to dep for dependency management,"https://github.com/golang/dep

I.e., publish whatever dep needs instead of Godeps.json, and change documentation to tell people to download via `dep ensure`. (After testing to make sure it works--feel free to make a temporary branch if that helps testing.)",closed,False,2017-01-25 01:16:16,2018-11-07 16:43:42
client-go,ruiyang2015,https://github.com/kubernetes/client-go/issues/79,https://api.github.com/repos/kubernetes/client-go/issues/79,Update the Godeps version for cloud.google.com/go and github.com/davecgh/go-spew,"We have a Go project using glide to manage the dependency package, k8s.io/client-go reference some quite old version of cloud.google.com/go and github.com/davecgh/go-spew, and we have another lib package reference the latest one, doing a glide up cause a lot of un-related error and we have to pin a very specify sha of k8s.io/client-go to work around this issue, ideally, we want to use the latest release version, and hope this can be resolved. 
Even better if you could use glide to replace godeps for manage the package, so you can specify a range of supported dependent lib.",closed,False,2017-01-26 15:37:19,2018-07-05 15:55:49
client-go,Tigraine,https://github.com/kubernetes/client-go/issues/80,https://api.github.com/repos/kubernetes/client-go/issues/80,Compile time?,"Hi guys, thanks for `client-go` library - i am just wondering if there is something to do to get the compile time down?

If I run the standard [out-of-cluster example](https://github.com/kubernetes/client-go/blob/master/examples/out-of-cluster/main.go) I get stats like these on a not too old Macbook Pro (late 2012 MBP Retina). (Go 1.7.5)

```
go build  88,71s user 8,39s system 223% cpu 43,515 total
```

Is this common? I am pretty new to go and wanted to write a few utilities to monitor our K8s cluster and this is just not working out with having to wait 40+ seconds for a compile error :(",closed,False,2017-01-29 18:14:50,2017-01-29 19:22:35
client-go,davecheney,https://github.com/kubernetes/client-go/issues/81,https://api.github.com/repos/kubernetes/client-go/issues/81,in-cluster and out-of-cluster examples don't build,"```
deadwood(~/src/k8s.io/client-go) % go build  ./examples/in-cluster/
# k8s.io/client-go/examples/in-cluster
examples/in-cluster/main.go:40: cannot use ""k8s.io/client-go/pkg/api/v1"".ListOptions literal (type ""k8s.io/client-go/pkg/api/v1"".ListOptions) as type ""k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".ListOptions in argument to clientset.Core().Pods("""").List
deadwood(~/src/k8s.io/client-go) % go build  ./examples/out-of-cluster/
# k8s.io/client-go/examples/out-of-cluster
examples/out-of-cluster/main.go:46: cannot use ""k8s.io/client-go/pkg/api/v1"".ListOptions literal (type ""k8s.io/client-go/pkg/api/v1"".ListOptions) as type ""k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".ListOptions in argument to clientset.Core().Pods("""").List
```

This isn't the first time this has broken, #52. Is there any CI in place to prevent further regressions?",closed,False,2017-01-31 00:09:22,2017-02-02 00:35:06
client-go,davecheney,https://github.com/kubernetes/client-go/issues/82,https://api.github.com/repos/kubernetes/client-go/issues/82,third-party-resource example does not compile (again),"```
deadwood(~/src/k8s.io/client-go) % go build  ./examples/third-party-resources/
examples/third-party-resources/main.go:9:2: cannot find package ""k8s.io/client-go/pkg/api/errors"" in any of:
        /home/dfc/src/k8s.io/client-go/vendor/k8s.io/client-go/pkg/api/errors (vendor tree)
        /home/dfc/go/src/k8s.io/client-go/pkg/api/errors (from $GOROOT)
        /home/dfc/src/k8s.io/client-go/pkg/api/errors (from $GOPATH)
examples/third-party-resources/types.go:7:2: cannot find package ""k8s.io/client-go/pkg/api/meta"" in any of:
        /home/dfc/src/k8s.io/client-go/vendor/k8s.io/client-go/pkg/api/meta (vendor tree)
        /home/dfc/go/src/k8s.io/client-go/pkg/api/meta (from $GOROOT)
        /home/dfc/src/k8s.io/client-go/pkg/api/meta (from $GOPATH)
examples/third-party-resources/main.go:12:2: cannot find package ""k8s.io/client-go/pkg/apis/meta/v1"" in any of:
        /home/dfc/src/k8s.io/client-go/vendor/k8s.io/client-go/pkg/apis/meta/v1 (vendor tree)
        /home/dfc/go/src/k8s.io/client-go/pkg/apis/meta/v1 (from $GOROOT)
        /home/dfc/src/k8s.io/client-go/pkg/apis/meta/v1 (from $GOPATH)
examples/third-party-resources/main.go:13:2: cannot find package ""k8s.io/client-go/pkg/runtime"" in any of:
        /home/dfc/src/k8s.io/client-go/vendor/k8s.io/client-go/pkg/runtime (vendor tree)
        /home/dfc/go/src/k8s.io/client-go/pkg/runtime (from $GOROOT)
        /home/dfc/src/k8s.io/client-go/pkg/runtime (from $GOPATH)
examples/third-party-resources/main.go:14:2: cannot find package ""k8s.io/client-go/pkg/runtime/schema"" in any of:
        /home/dfc/src/k8s.io/client-go/vendor/k8s.io/client-go/pkg/runtime/schema (vendor tree)
        /home/dfc/go/src/k8s.io/client-go/pkg/runtime/schema (from $GOROOT)
        /home/dfc/src/k8s.io/client-go/pkg/runtime/schema (from $GOPATH)
examples/third-party-resources/main.go:15:2: cannot find package ""k8s.io/client-go/pkg/runtime/serializer"" in any of:
        /home/dfc/src/k8s.io/client-go/vendor/k8s.io/client-go/pkg/runtime/serializer (vendor tree)
        /home/dfc/go/src/k8s.io/client-go/pkg/runtime/serializer (from $GOROOT)
        /home/dfc/src/k8s.io/client-go/pkg/runtime/serializer (from $GOPATH)
```
The repository seems to be missing a bunch of packages.

This isn't the first time this has happened, #52. Is there any CI in place to prevent future regressions?",closed,False,2017-01-31 00:13:12,2017-02-02 00:33:03
client-go,davecheney,https://github.com/kubernetes/client-go/issues/83,https://api.github.com/repos/kubernetes/client-go/issues/83,k8s.io/client-go vendors k8s.io/apimachinery which breaks build,"TL;DR: libraries _must not_ vendor their dependencies

It is not possible to build programs that vendor k8s.io/client-go as the latter has vendored k8s.io/apimachinery.

Sample program:
```
package main

import (
        ""flag""
        ""fmt""
        ""log""
        ""os""
        ""path/filepath""
        ""time""

        metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
        ""k8s.io/client-go/tools/clientcmd""

        ""k8s.io/client-go/kubernetes""
)

func main() {
        kubeconfig := flag.String(""kubeconfig"", filepath.Join(os.Getenv(""HOME""), "".kube"", ""config""), ""absolute path to the kubeconfig file"")

        flag.Parse()
        // uses the current context in kubeconfig
        config, err := clientcmd.BuildConfigFromFlags("""", *kubeconfig)
        check(err)

        clientset, err := kubernetes.NewForConfig(config)
        check(err)

        for {
                pods, err := clientset.Core().Pods("""").List(metav1.ListOptions{})
                check(err)

                fmt.Printf(""There are %d pods in the cluster\n"", len(pods.Items))
                time.Sleep(10 * time.Second)
        }
}

func check(err error) {
        if err != nil {
                log.Fatalf(""fatal: %v"", err)
        }
}
```
This program will not compile because the vendored copy of k8s.io/apimachinery (https://github.com/kubernetes/client-go/tree/master/vendor/k8s.io/apimachinery) aliases the copy in my own project, this breaks type equality.
```
# stash.atlassian.com/scm/kube/rds-resource-provider/cmd/postgres-resource-provider
cmd/postgres-resource-provider/main.go:29: cannot use ""stash.atlassian.com/scm/kube/rds-resource-provider/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".ListOptions literal (type ""stash.atlassian.com/scm/kube/rds-resource-provider/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".ListOptions) as type ""stash.atlassian.com/scm/kube/rds-resource-provider/vendor/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".ListOptions in argument to clientset.Core().Pods("""").List
Makefile:11: recipe for target 'build' failed
make: *** [build] Error 2
```",closed,False,2017-01-31 00:26:47,2017-04-05 17:16:02
client-go,davecheney,https://github.com/kubernetes/client-go/issues/84,https://api.github.com/repos/kubernetes/client-go/issues/84,suggestion: disable reporting issues on this project,The README mentions that issues should not be logged on this project. GitHub allows you to disable the issue tab on a repository (but not pull requests ... hmmm). Doing so would make it clear that issues should not be logged here.,closed,False,2017-01-31 00:51:45,2017-02-22 00:48:51
client-go,medyagh,https://github.com/kubernetes/client-go/issues/85,https://api.github.com/repos/kubernetes/client-go/issues/85,get containger image size ?,"
Ithe kuberentes api has this 
`v1.ContainerImage, sizeBytes`
https://kubernetes.io/docs/api-reference/v1/definitions/#_v1_pod

is there any way to get the container image size through this go library ?",closed,False,2017-02-01 18:41:41,2017-02-02 20:54:34
client-go,lavalamp,https://github.com/kubernetes/client-go/pull/86,https://api.github.com/repos/kubernetes/client-go/issues/86,Fix examples that don't build,,closed,True,2017-02-02 00:30:36,2017-03-02 07:34:43
client-go,lavalamp,https://github.com/kubernetes/client-go/pull/87,https://api.github.com/repos/kubernetes/client-go/issues/87,enable travis,,closed,True,2017-02-02 00:50:41,2017-02-02 01:02:10
client-go,lavalamp,https://github.com/kubernetes/client-go/issues/88,https://api.github.com/repos/kubernetes/client-go/issues/88,Continuously test the examples upstream,"This could mean coming up with a way for the main repo to test these files, or (easier) just move them into the main repo and test there. I think if we don't do this the bot is going to break them too often.",closed,False,2017-02-02 20:49:25,2017-02-03 06:38:23
client-go,krmayankk,https://github.com/kubernetes/client-go/issues/89,https://api.github.com/repos/kubernetes/client-go/issues/89,errors.IsNotFound not working correctly with client-go,"I am using client-go by doing the following imports:-

```
""k8s.io/apimachinery/pkg/api/errors""
v1 ""k8s.io/client-go/pkg/api/v1""
```

When i query a deployment which doesn't exist, i see the following in the logs:-

```
I0202 10:13:25.598285       1 round_trippers.go:417] GET https://<some ip>/apis/extensions/v1beta1/namespaces/e2e-mayank-kumar-csc-sam/deployments/default 404 Not Found in 109 milliseconds
```

404 tells me its not found

```
I0202 10:13:25.598981       1 rollout.go:138] error found deployments.extensions ""default"" not found
I0202 10:13:25.599018       1 rollout.go:141] not not found deployments.extensions ""default"" not found
```
where the exact err i get from the client-go api is `deployments.extensions ""default"" not found`

When i use errors.IsNotFound(err) from the apimachinery, the check fails and it doesn't identify this error as not found error.
Am  i missing anything ?
",closed,False,2017-02-03 06:24:16,2019-03-26 15:51:31
client-go,sttts,https://github.com/kubernetes/client-go/issues/90,https://api.github.com/repos/kubernetes/client-go/issues/90,"[PROPOSAL] inverse use of branches: master = stable, develop = nightly snapshots","With https://github.com/kubernetes/client-go/issues/83 and https://github.com/kubernetes/client-go/issues/78 in mind, I propose the following solution:

- turn the client-go `master` branch into our latest stable release branch
- publish nightly updates from `k8s.io/kubernetes` to the `develop` branch.

Then implement the following rules in our munge bot:

- `k8s.io/kubernetes:master` changed => push to `client-go:develop`, nightly
- `k8s.io/kubernetes` minor release is tagged of latest major release => push to `client-go:master`

and equivalently for `k8s.io/apimachinery`.

## Optionally

- `k8s.io/kubernetes:release-1.5` is changed => push to `client-go:release-1.5`, nightly
- `k8s.io/kubernetes:release-1.6` is changed => push to `client-go:release-1.6`, nightly
- ...

## Reasoning
- client-go must be go-gettable because people use this and expect it from any thirdparty package in the go ecosystem
- people will not follow or even know our release logic. They start pulling master into their (production) projects and get frustrated that we have regressions (compare Twitter thread).
- golang/dep might solve all golang dependency problems. But, we are still months away that people use it. And we might have a much longer time that people use glide or godep in their projects. We cannot force them to switch because kubernetes requires that.

## Downsides

- kubernetes and apimachinery will have different branching logic (`kubernetes:master` and `apimachinery:master` might be incompatible)

## Questions

- Does go-get support Github's default branch setting? Or will it always just get master?

/cc @deads2k @lavalamp @caesarxuchao ",closed,False,2017-02-03 15:07:04,2018-02-20 08:29:00
client-go,stevesloka,https://github.com/kubernetes/client-go/issues/91,https://api.github.com/repos/kubernetes/client-go/issues/91,Delete Deployment / ReplicaSet not working,"I'm developing a client which is consuming the k8s using the client-go. I'm creating Deployments with the client and they work great, but when I try and delete, the deployments delete but the pods stay running. 

I've also added logic to delete the ReplicaSets and they delete, but the pods still stay running. 

I'm currently using tag v2.0.0-alpha.1",closed,False,2017-02-03 20:20:09,2017-02-06 18:19:04
client-go,pkutishch,https://github.com/kubernetes/client-go/issues/92,https://api.github.com/repos/kubernetes/client-go/issues/92,client losses service account secret files. ,"Time to time getting following error:

""the server has asked for the client to provide credentials (get pods)""

Mostly during client startup, but after a couple of restarts it starting work well.
Using inside privileged pod which is inside cluster which i trying to access. 
Would you please advice.",closed,False,2017-02-05 22:34:01,2017-02-08 08:56:05
client-go,h22f,https://github.com/kubernetes/client-go/issues/93,https://api.github.com/repos/kubernetes/client-go/issues/93,undefined: v1.FinalizerOrphan,"I get the go get k8s.io/client-go/1.5/...
An error occurred while trying to go run:

> # k8s.io/client-go/pkg/api/v1
> ../k8s.io/client-go/pkg/api/v1/helpers.go:86: undefined: v1.FinalizerOrphan

Want to how to deal with, please?
",closed,False,2017-02-07 08:00:17,2017-02-13 04:06:10
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/94,https://api.github.com/repos/kubernetes/client-go/issues/94,Fix the import path for examples in release-1.5 branch,"They should import 1.5 instead of 1.4.

cc @lavalamp ",closed,True,2017-02-08 02:32:21,2017-02-08 02:33:25
client-go,lavalamp,https://github.com/kubernetes/client-go/issues/95,https://api.github.com/repos/kubernetes/client-go/issues/95,"gcp auth package is loaded by default, but should be an optional dependency","I think the offending bit is here: https://github.com/kubernetes/client-go/blob/fb6075f2e0b094320f3d2c3e99add90a4661fcff/discovery/helper.go#L27

We should:
- [x] Fix that reference, any other references, and any invocations that accidentally work because the discovery client does this import. kubernetes/kubernetes#41532
- Write a test
  - [x] that checks that plugins are not imported by default: https://github.com/kubernetes/kubernetes/pull/42466
  - [ ] that lets us see exactly what dependencies are required by default (no plugins loaded) and fails if the list changes. 
- [ ] Add an example that demonstrates using the GCP auth or the OIDC auth plugin. (since there seem to be two choices at the moment.)",closed,False,2017-02-11 01:12:34,2018-01-04 04:39:22
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/96,https://api.github.com/repos/kubernetes/client-go/issues/96,add back travis,"The file is copied from #87.

The file was deleted by the publishing robot.

update: the robot is fixed in https://github.com/kubernetes/test-infra/pull/1784, it won't delete .travis.yml again.

cc @lavalamp 
",closed,True,2017-02-11 13:33:01,2017-02-13 17:36:49
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/97,https://api.github.com/repos/kubernetes/client-go/issues/97,enable travis in release-2.0,"Cherry-pick of https://github.com/kubernetes/client-go/pull/87

cc @lavalamp",closed,True,2017-02-11 13:43:21,2017-02-13 17:35:42
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/98,https://api.github.com/repos/kubernetes/client-go/issues/98,enable travis in release-1.5,"Cherry-pick of #87

cc @lavalamp",closed,True,2017-02-11 13:52:47,2017-02-13 17:36:19
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/99,https://api.github.com/repos/kubernetes/client-go/issues/99,enable travis in release-1.4,"Cherry-pick of #87

cc @lavalamp",closed,True,2017-02-11 13:56:37,2017-02-11 14:00:37
client-go,hongchaodeng,https://github.com/kubernetes/client-go/issues/100,https://api.github.com/repos/kubernetes/client-go/issues/100,client-go release 1.5 doesn't work with TPR,"Environment:

- GKE 1.5.2
- client-go 1.5
- go version go1.7.5 linux/amd64

### What's the problem?
It couldn't create tpr objects. Failure:
```
panic: the server could not find the requested resource

goroutine 1 [running]:
panic(0x129d120, 0xc420380280)
        /usr/local/go/src/runtime/panic.go:500 +0x1a1
main.main()
        /home/ubuntu/code/golang/src/github.com/coreos/etcd-operator/play/main.go:173 +0x97a
```

### How to reproduce?
I copy the example from release 2.0 but modify the import to use 1.5:
```go
package main

import (
	""encoding/json""
	""flag""
	""fmt""

	""k8s.io/client-go/1.5/kubernetes""
	""k8s.io/client-go/1.5/pkg/api""
	""k8s.io/client-go/1.5/pkg/api/errors""
	""k8s.io/client-go/1.5/pkg/api/meta""
	""k8s.io/client-go/1.5/pkg/api/unversioned""
	""k8s.io/client-go/1.5/pkg/api/v1""
	""k8s.io/client-go/1.5/pkg/apis/extensions/v1beta1""
	""k8s.io/client-go/1.5/pkg/runtime""
	""k8s.io/client-go/1.5/pkg/runtime/serializer""
	""k8s.io/client-go/1.5/rest""
	""k8s.io/client-go/1.5/tools/clientcmd""
)

type ExampleSpec struct {
	Foo string `json:""foo""`
	Bar bool   `json:""bar""`
}

type Example struct {
	unversioned.TypeMeta `json:"",inline""`
	Metadata             api.ObjectMeta `json:""metadata""`

	Spec ExampleSpec `json:""spec""`
}

type ExampleList struct {
	unversioned.TypeMeta `json:"",inline""`
	Metadata             unversioned.ListMeta `json:""metadata""`

	Items []Example `json:""items""`
}

// Required to satisfy Object interface
func (e *Example) GetObjectKind() unversioned.ObjectKind {
	return &e.TypeMeta
}

// Required to satisfy ObjectMetaAccessor interface
func (e *Example) GetObjectMeta() meta.Object {
	return &e.Metadata
}

// Required to satisfy Object interface
func (el *ExampleList) GetObjectKind() unversioned.ObjectKind {
	return &el.TypeMeta
}

// Required to satisfy ListMetaAccessor interface
func (el *ExampleList) GetListMeta() unversioned.List {
	return &el.Metadata
}

// The code below is used only to work around a known problem with third-party
// resources and ugorji. If/when these issues are resolved, the code below
// should no longer be required.

type ExampleListCopy ExampleList
type ExampleCopy Example

func (e *Example) UnmarshalJSON(data []byte) error {
	tmp := ExampleCopy{}
	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}
	tmp2 := Example(tmp)
	*e = tmp2
	return nil
}

func (el *ExampleList) UnmarshalJSON(data []byte) error {
	tmp := ExampleListCopy{}
	err := json.Unmarshal(data, &tmp)
	if err != nil {
		return err
	}
	tmp2 := ExampleList(tmp)
	*el = tmp2
	return nil
}

var (
	config *rest.Config
)

func main() {
	kubeconfig := flag.String(""kubeconfig"", """", ""Path to a kube config. Only required if out-of-cluster."")
	flag.Parse()

	// Create the client config. Use kubeconfig if given, otherwise assume in-cluster.
	config, err := buildConfig(*kubeconfig)
	if err != nil {
		panic(err)
	}

	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		panic(err)
	}

	// initialize third party resource if it does not exist
	tpr, err := clientset.Extensions().ThirdPartyResources().Get(""example.k8s.io"")
	if err != nil {
		if errors.IsNotFound(err) {
			tpr := &v1beta1.ThirdPartyResource{
				ObjectMeta: v1.ObjectMeta{
					Name: ""example.k8s.io"",
				},
				Versions: []v1beta1.APIVersion{
					{Name: ""v1""},
				},
				Description: ""An Example ThirdPartyResource"",
			}

			result, err := clientset.Extensions().ThirdPartyResources().Create(tpr)
			if err != nil {
				panic(err)
			}
			fmt.Printf(""CREATED: %#v\nFROM: %#v\n"", result, tpr)
		} else {
			panic(err)
		}
	} else {
		fmt.Printf(""SKIPPING: already exists %#v\n"", tpr)
	}

	// make a new config for our extension's API group, using the first config as a baseline
	var tprconfig *rest.Config
	tprconfig = config
	configureClient(tprconfig)

	tprclient, err := rest.RESTClientFor(tprconfig)
	if err != nil {
		panic(err)
	}

	var example Example

	err = tprclient.Get().
		Resource(""examples"").
		Namespace(api.NamespaceDefault).
		Name(""example1"").
		Do().Into(&example)

	if err != nil {
		if errors.IsNotFound(err) {
			// Create an instance of our TPR
			example := &Example{
				Metadata: api.ObjectMeta{
					Name: ""example1"",
				},
				Spec: ExampleSpec{
					Foo: ""hello"",
					Bar: true,
				},
			}

			var result Example
			err = tprclient.Post().
				Resource(""examples"").
				Namespace(api.NamespaceDefault).
				Body(example).
				Do().Into(&result)

			if err != nil {
				panic(err)
			}
			fmt.Printf(""CREATED: %#v\n"", result)
		} else {
			panic(err)
		}
	} else {
		fmt.Printf(""GET: %#v\n"", example)
	}

	// Fetch a list of our TPRs
	exampleList := ExampleList{}
	err = tprclient.Get().Resource(""examples"").Do().Into(&exampleList)
	if err != nil {
		panic(err)
	}
	fmt.Printf(""LIST: %#v\n"", exampleList)
}

func buildConfig(kubeconfig string) (*rest.Config, error) {
	if kubeconfig != """" {
		return clientcmd.BuildConfigFromFlags("""", kubeconfig)
	}
	return rest.InClusterConfig()
}

func configureClient(config *rest.Config) {
	groupversion := unversioned.GroupVersion{
		Group:   ""k8s.io"",
		Version: ""v1"",
	}

	config.GroupVersion = &groupversion
	config.APIPath = ""/apis""
	config.ContentType = runtime.ContentTypeJSON
	config.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: api.Codecs}

	schemeBuilder := runtime.NewSchemeBuilder(
		func(scheme *runtime.Scheme) error {
			scheme.AddKnownTypes(
				groupversion,
				&Example{},
				&ExampleList{},
				&api.ListOptions{},
				&api.DeleteOptions{},
			)
			return nil
		})
	schemeBuilder.AddToScheme(api.Scheme)
}
```",closed,False,2017-02-11 20:04:13,2017-02-14 00:49:47
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/101,https://api.github.com/repos/kubernetes/client-go/issues/101,"manually fix master, revert to when client-go depends on apimachinery 7080e","manually fix master, revert to when client-go depends on apimachinery 7080e7080e31e90e981181435294bca96c80a37db8941

cc @lavalamp 

Fix #93",closed,True,2017-02-12 03:16:39,2017-02-13 17:40:56
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/102,https://api.github.com/repos/kubernetes/client-go/issues/102,manually update release-2.0,"It's tracking k8s.io/kubernetes release 1.5, last commit is bde8578d9675129b7a2aa08f1b825ec6cc0f3420

Fix https://github.com/kubernetes/client-go/issues/66.

cc @lavalamp ",closed,True,2017-02-13 04:27:56,2017-02-13 17:46:51
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/103,https://api.github.com/repos/kubernetes/client-go/issues/103,[DO NOT MERGE] Release 2.0 updates generated by the robot,"caesarxuchao/client-go#release-2.0 is updated by the robot. This PR is to verify if the robot generates compilable code.

cc @lavalamp @sttts @deads2k",closed,True,2017-02-13 15:45:31,2017-02-21 18:45:01
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/104,https://api.github.com/repos/kubernetes/client-go/issues/104,[DO NOT MERGE] master updates generated by the robot,"caesarxuchao/client-go#master is updated by the robot. This PR is to verify if the robot generates compilable code.

Note that in Godeps.yml, the apimachinery commit it updated to the [latest commit](https://github.com/caesarxuchao/apimachinery/commits/master). The code in vendor/apimachinery is also updated.

cc @lavalamp @sttts @deads2k
",closed,True,2017-02-13 15:51:38,2017-02-21 18:45:06
client-go,jbeda,https://github.com/kubernetes/client-go/issues/105,https://api.github.com/repos/kubernetes/client-go/issues/105,Document what the best supported path for using client-go is,"Posted this to slack but putting it here too.

Right now it is *very* confusing as to what users should do to have the best experience using this library.

The README says:
>If you use go get to get client-go, you will get the unstable master branch! You can git checkout a stable branch.
>
>We recommend using a vendor tool, like godep, glide, or govendor to track a stable version of client-go.

But then it also says that, wrt the 1.4 and 1.5 branches: ""1.4 and 1.5 branch keep the top-level folders so they do not break the import lines of existing users. These top-level folders are deprecated and are removed from the master branch and future branches.""  This makes it sound like these branches are deprecated.

And then there is a 2.0 branch.  But that isn't documented anywhere that I can find and it isn't clear what the plan is.  This obviously isn't matching up with the kubernetes version so that's a bit confusing.

Ideally, active development should happen on a branch so that the master branch always works (#90).  But if we are going to keep it on a branch, the ""how to get it"" should be more explicit.  Something like:


>The best way to use client-go is to explicitly take a dependency on a versioned branch.  As `go get` doesn't support branches it'll be a bit of a process to get the latest stable version installed.  The latest stable version is on the 1.5 branch.  To install do the following:
>
> 
> ```
> go get ...
> cd ...
> git co ....
> go get ./...
> ```
>
>To save most other users from the pain of dealing with this, you should probably use a tool like godep to vendor the client-go dependency.


I'm not sure what the steps are here as I'm still figuring them out.  But it would be useful if I didn't have to.

",closed,False,2017-02-13 21:44:49,2017-02-15 18:41:56
client-go,lavalamp,https://github.com/kubernetes/client-go/pull/106,https://api.github.com/repos/kubernetes/client-go/issues/106,Detailed installation instructions,Fix #105.,closed,True,2017-02-14 23:09:31,2017-03-01 23:58:53
client-go,lavalamp,https://github.com/kubernetes/client-go/issues/107,https://api.github.com/repos/kubernetes/client-go/issues/107,Continuously test installation instructions,"#106 adds detailed install instructions; I manually tested them, but the shell sections should be extracted to .sh files and travis should run them.",closed,False,2017-02-14 23:13:44,2018-02-20 07:46:46
client-go,lavalamp,https://github.com/kubernetes/client-go/pull/108,https://api.github.com/repos/kubernetes/client-go/issues/108,Update README to explain versioning better,Trying to clear up more confusion.,closed,True,2017-02-15 00:16:36,2017-02-15 18:25:45
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/109,https://api.github.com/repos/kubernetes/client-go/issues/109,minor change to README,Fixed the matrix. Though there is still one question left: https://github.com/kubernetes/client-go/pull/108#discussion_r101276771,closed,True,2017-02-15 13:52:06,2017-02-16 01:41:49
client-go,lavalamp,https://github.com/kubernetes/client-go/issues/110,https://api.github.com/repos/kubernetes/client-go/issues/110,document status of each branch; 1.5.1 status unclear,"@caesarxuchao says the 1.5.x branch is not maintained and users should switch to the 2.0.x branch. I think we should at least clearly document the status of each branch. I also think we must give advance notice if a branch is deprecated, doubly so if we're no longer going to put bugfixes in it. As a consequence I don't think we can actually stop supporting the 1.5 branch at the moment. @caesarxuchao and I will figure out the best course of action here. I'm opening this issue so it's clear that we're aware of the issue and so there's a place for feedback about this.",closed,False,2017-02-15 18:40:46,2017-02-16 19:15:03
client-go,lavalamp,https://github.com/kubernetes/client-go/issues/111,https://api.github.com/repos/kubernetes/client-go/issues/111,Fill out CHANGELOG.md,Changelog has been neglected and it's hard for people to understand what is in which branches.,closed,False,2017-02-15 18:52:32,2017-12-27 12:56:25
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/112,https://api.github.com/repos/kubernetes/client-go/issues/112,update CHANGELOG,Partially addressed https://github.com/kubernetes/client-go/issues/111.,closed,True,2017-02-16 12:36:06,2017-02-16 17:42:38
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/113,https://api.github.com/repos/kubernetes/client-go/issues/113,update INSTALL.md to use 2.0.0 as example,@lavalamp,closed,True,2017-02-16 12:40:07,2017-02-16 17:43:02
client-go,luxas,https://github.com/kubernetes/client-go/issues/114,https://api.github.com/repos/kubernetes/client-go/issues/114,[proposal] Add generic Bootstrap Token constants and helpers to client-go,"Features issue: https://github.com/kubernetes/features/issues/130
Proposal: https://github.com/kubernetes/community/pull/189
Initial implementation PR: https://github.com/kubernetes/kubernetes/issues/36101

Why should this be in client-go?
Well, I and @sttts had a discussion about this in #kubernetes-dev on Slack:

Slack thread:
<details>

```
luxas [14:25] 
What do you think about the bootstrap api and the util functions it needs?
@sttts Can it be in client-go?
I think that would make a lot of sense, because this is code people are gonna build on top of

sttts [14:26] 
@luxas we don't have many alternatives I fear

luxas [14:26] 
and the fear is?
just that there are no other alternatives or something else?

sttts [14:26] 
client-go is a bit (too much) our catch-all for packages where we don't know where to put them (edited)

luxas [14:27] 
yeah, I see

sttts [14:28] 
which kind of util funcs?

luxas [14:28] 
validation mostly
regexes for valid tokens
maybe generation of a random one
and for example, a function that builds a full token from an id and a secret, that's just `fmt.Sprintf(""%s:%s"", id, secret)`
but that way it's clear that the char in the middle isn't `.` or `-` or whatever
a function that checks whether the token has expired
and so on
but all these would in that case be super-generic
only the essentials

sttts [14:33] 
sounds like something for tools/bootstrap

luxas [14:34] 
might be
right now the constants live in `pkg/bootstrap/api`

sttts [14:35] 
which doesn't make sense if it cannot be shared

luxas [14:35] 
and since this isn't a ""real"" api, it shouldn't be in `client-go/pkg/api{,s}`

sttts [14:35] 
I think client-go/tools/bootstrap is good

luxas [14:35] 
but `client-go/tools/bootstrap` sgtm

sttts [14:36] 
what is left in pkg/bootstrap?
after moving that

luxas [14:36] 
nothing

sttts [14:36] 
+1

luxas [14:36] 
now only the constants are there
most of the logic is ""hardcoded"" in `pkg/controller/bootstrap`, but the most generic utils would in this case be moved out
and only the controller logic would be left in `pkg/controller/bootstrap`

sttts [14:38] 
makes sense

luxas [14:38] 
then the main and first consumers of `client-go/tools/bootstrap` will be `cmd/kubeadm/app`, `pkg/controller/bootstrap` and `apiserver/plugin/pkg/authenticator/token/bootstrap`
but I expect kops to use this in some way or another in the future as well
```
</details>

The proposal is to:
 - move the constants from `k8s.io/kubernetes/pkg/bootstrap/api` to `k8s.io/client-go/tools/bootstrap/(token/)api`
 - factor out the most essential validation, generation and information getters about the token to `k8s.io/client-go/tools/bootstrap/(token/)utils` or similar

Then 
 - `k8s.io/kubernetes/cmd/kubeadm/app`
 - `k8s.io/kubernetes/pkg/controller/bootstrap`
 - `k8s.io/kubernetes/apiserver/plugin/pkg/authenticator/token/bootstrap` (see: https://github.com/kubernetes/kubernetes/pull/41281)

can use those common util funcs and it's generally easier to build upon the bootstrap token functionality.

This should preferably make v1.6, since we're aiming for beta for this functionality

cc @jbeda @mikedanese @roberthbailey @pires @dmmcquay @errordeveloper @deads2k @smarterclayton @liggitt @sttts @justinsb @ericchiang ",closed,False,2017-02-16 13:47:05,2018-01-17 18:22:26
client-go,Firemango,https://github.com/kubernetes/client-go/pull/115,https://api.github.com/repos/kubernetes/client-go/issues/115,Fix broken link to Dep,Fix broken link to Dep,closed,True,2017-02-16 18:32:59,2017-02-16 18:58:04
client-go,lavalamp,https://github.com/kubernetes/client-go/pull/116,https://api.github.com/repos/kubernetes/client-go/issues/116,"Add deprecation status/policy, version recommendation",,closed,True,2017-02-16 18:53:16,2017-02-17 02:27:48
client-go,Firemango,https://github.com/kubernetes/client-go/pull/117,https://api.github.com/repos/kubernetes/client-go/issues/117,Fix broken example,"Installing and trying to run this example gives an error. This update fixes the issue.
",closed,True,2017-02-16 19:11:07,2017-02-16 19:47:50
client-go,hongchaodeng,https://github.com/kubernetes/client-go/pull/118,https://api.github.com/repos/kubernetes/client-go/issues/118,INSTALL.md: fix link to dep,,closed,True,2017-02-16 23:01:17,2017-02-17 21:25:05
client-go,jlzhao27,https://github.com/kubernetes/client-go/issues/119,https://api.github.com/repos/kubernetes/client-go/issues/119,Add ability to rotate bearer token in ClientSet,"Hey,

We ran into an issue recently where there is no easy way to dynamically swap out the bearer token used in a client set. For normal API requests, this is mostly okay as we can construct new client sets with a refreshed token. However, for a `ListWatch`client, recreating it is actually fairly expensive and causes requires a lot more code maintain for the caller.

Judging by the `TODO:` in `tools/auth/clientauth.go`, it seems this is something that should be supported. Is this already being worked on or are you guys accepting contributions?",closed,False,2017-02-17 01:59:03,2018-02-20 19:40:01
client-go,leopoldodonnell,https://github.com/kubernetes/client-go/issues/120,https://api.github.com/repos/kubernetes/client-go/issues/120,Minor edit to build dep,"In INSTALL.md Change:

`$ go install github.com/golang/dep/cmd`

to

`$ go install github.com/golang/dep/cmd/dep`

at least that was what was required with go1.7.1 on OS X",closed,False,2017-02-17 16:53:25,2017-02-17 21:41:08
client-go,lavalamp,https://github.com/kubernetes/client-go/pull/121,https://api.github.com/repos/kubernetes/client-go/issues/121,fix dep install command,Fixes #120.,closed,True,2017-02-17 21:41:01,2017-02-17 21:41:08
client-go,lavalamp,https://github.com/kubernetes/client-go/issues/122,https://api.github.com/repos/kubernetes/client-go/issues/122,Update glide install instructions,@ericchiang gave me better ones in a comment on the client strategy doc https://docs.google.com/document/d/1h_IBGYPMa8FS0oih4NbVkAMAzM7YTHr76VBcKy1qFbg/edit# (shared with the sig api machinery email list).,closed,False,2017-02-17 22:00:08,2017-03-06 18:24:48
client-go,deads2k,https://github.com/kubernetes/client-go/issues/123,https://api.github.com/repos/kubernetes/client-go/issues/123,Last sync is from Feb 3.,"It looks like the last synchronization from k8s.io/kubernetes was on February 3.  Is that correct?  When are we expecting the next one?

@sttts @caesarxuchao @lavalamp ",closed,False,2017-02-20 17:59:05,2017-02-24 20:36:40
client-go,ash2k,https://github.com/kubernetes/client-go/pull/124,https://api.github.com/repos/kubernetes/client-go/issues/124,Fix readme,"`glide install` will not add a dependency to the `glide.yaml` file.

```
glide install --help
NAME:
   glide install - Install a project's dependencies

USAGE:
   glide install [command options] [arguments...]

DESCRIPTION:
   This uses the native VCS of each package to install
   the appropriate version. There are two ways a project's dependencies can
   be installed. When there is a glide.yaml file defining the dependencies but
   no lock file (glide.lock) the dependencies are installed using the ""update""
   command and a glide.lock file is generated pinning all dependencies. If a
   glide.lock file is already present the dependencies are installed or updated
   from the lock file.

OPTIONS:
   --force             If there was a change in the repo or VCS switch to new one. Warning: changes will be lost.
   --strip-vendor, -v  Removes nested vendor and Godeps/_workspace directories.
   --skip-test         Resolve dependencies in test files.
```
```
glide get --help
NAME:
   glide get - Install one or more packages into `vendor/` and add dependency to glide.yaml.

USAGE:
   glide get [command options] [arguments...]

DESCRIPTION:
   Gets one or more package (like 'go get') and then adds that file
   to the glide.yaml file. Multiple package names can be specified on one line.

       $ glide get github.com/Masterminds/cookoo/web

   The above will install the project github.com/Masterminds/cookoo and add
   the subpackage 'web'.

   If a fetched dependency has a glide.yaml file, configuration from Godep,
   GPM, GOM, or GB Glide that configuration will be used to find the dependencies
   and versions to fetch. If those are not available the dependent packages will
   be fetched as either a version specified elsewhere or the latest version.

   When adding a new dependency Glide will perform an update to work out the
   the versions for the dependencies of this dependency (transitive ones). This
   will generate an updated glide.lock file with specific locked versions to use.

   The '--strip-vendor' flag will remove any nested 'vendor' folders and
   'Godeps/_workspace' folders after an update (along with undoing any Godep
   import rewriting). Note, The Godeps specific functionality is deprecated and
   will be removed when most Godeps users have migrated to using the vendor
   folder.

OPTIONS:
   --test                   Add test dependencies.
   --insecure               Use http:// rather than https:// to retrieve packages.
   --no-recursive, --quick  Disable updating dependencies' dependencies.
   --force                  If there was a change in the repo or VCS switch to new one. Warning, changes will be lost.
   --all-dependencies       This will resolve all dependencies for all packages, not just those directly used.
   --resolve-current        Resolve dependencies for only the current system rather than all build modes.
   --strip-vendor, -v       Removes nested vendor and Godeps/_workspace directories.
   --non-interactive        Disable interactive prompts.
   --skip-test              Resolve dependencies in test files.
```",closed,True,2017-02-21 12:26:42,2017-02-23 10:41:28
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/125,https://api.github.com/repos/kubernetes/client-go/issues/125,Fix README: client-go issues should be reported at k8s.io/client-go now,Fix https://github.com/kubernetes/client-go/issues/84.,closed,True,2017-02-22 00:42:35,2017-02-22 00:48:51
client-go,HakShak,https://github.com/kubernetes/client-go/issues/126,https://api.github.com/repos/kubernetes/client-go/issues/126,Bump dep: docker/distribution,"I'm a filthy Windows dev and I needed this: https://github.com/docker/distribution/pull/1716

So I bumped docker/distribution in order to `godep restore ./...`
```
                {
			""ImportPath"": ""github.com/docker/distribution/digest"",
			""Comment"": ""v2.5.0"",
			""Rev"": ""a9b1322edf48b1fb9aee4e5ded7a4f4ac37c6830""
		},
		{
			""ImportPath"": ""github.com/docker/distribution/reference"",
			""Comment"": ""v2.5.0"",
			""Rev"": ""a9b1322edf48b1fb9aee4e5ded7a4f4ac37c6830""
		},
```

Unsure if this should have been a PR.",closed,False,2017-02-22 13:48:16,2018-02-20 06:27:02
client-go,ericchiang,https://github.com/kubernetes/client-go/pull/127,https://api.github.com/repos/kubernetes/client-go/issues/127,INSTALL.md: update Glide instructions to prefer glide update,"`glide get` has weird dependencies on the glide cache.
`glide install` just updates `glide.lock` but doesn't update /vendor.
`glide init` will detect dependencies from your current project,
making it dependent on the external files.

Just recommend users create a `glide.yaml` manually, then use
`glide update` to populate their /vendor directory. Technically you
could do a dance of `glide init` -> `glide get` -> `glide update`[0]
but this seems less error prone.

Additionally, provide instructions for users who want to use
different versions of packages than `client-go`, and add a note
about glide-vc.

[0] https://github.com/coreos/etcd/blob/v3.1.1/scripts/updatedep.sh

Sorry, client-go does not accept changes via pull requests at this time. Please
submit your pull request to the main repository:
https://github.com/kubernetes/kubernetes.  See the guidance here:
https://github.com/kubernetes/client-go#contributing-code.

cc @caesarxuchao @lavalamp @kubernetes/client-go-reviewers ",closed,True,2017-02-22 18:19:01,2017-02-23 18:45:08
client-go,caesarxuchao,https://github.com/kubernetes/client-go/issues/128,https://api.github.com/repos/kubernetes/client-go/issues/128,Improve the coverage of examples,"Apart from helping users, increasing the coverage of examples can also help our CI to detect problems.

We can start with providing examples for all top-level packages, and packages in tools/:
- [ ] dynamic
- [ ] discovery
- [ ] rest
- [ ] testing
- [ ] transport
- [ ] tools/auth
- [ ] tools/cache (https://github.com/kubernetes/client-go/pull/30)
- [ ] tools/portforward
- [ ] tools/record
- [ ] util/workqueue (https://github.com/kubernetes/kubernetes/pull/44320) (and we should move workqueue to tools/)

User requested example
- [ ] simple list and watch https://github.com/kubernetes/client-go/issues/161

@lavalamp 

related: https://github.com/kubernetes/client-go/issues/63",closed,False,2017-02-22 19:02:18,2019-02-06 15:30:34
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/129,https://api.github.com/repos/kubernetes/client-go/issues/129,Sync with k8s.io/kubernetes/staging,"Sync with k8s.io/kubernetest at 17375fc59fff39135af63bd1750bb07c36ef873b, and k8s.io/apimachinery at d90aa2c8531f13b0ca734845934c10dcb6a56ca7

Updated the CHANGELOG accordingly. Please let me know if I missed any important changes.

Fix https://github.com/kubernetes/client-go/issues/123.

@deads2k @DirectXMan12 @sttts @lavalamp ",closed,True,2017-02-23 20:38:10,2017-02-24 21:40:11
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/130,https://api.github.com/repos/kubernetes/client-go/issues/130,minor fix of 'go get' command,cc @lavalamp,closed,True,2017-02-24 20:55:27,2017-02-24 20:56:32
client-go,kargakis,https://github.com/kubernetes/client-go/issues/131,https://api.github.com/repos/kubernetes/client-go/issues/131,AddAfter should be able to cancel previous enqueues of the same key,"https://github.com/kubernetes/client-go/blob/master/util/workqueue/delaying_queue.go

Case:
1. Deployment with ProgressDeadlineSeconds=600 is using AddAfter to be synced after 600s so we can check if it has progressed or not.
2. If the Deployment progresses in the meantime (one of its RSs is scaled up/down, one of its Pods becomes ready, etc) , we should postpone the ProgressDeadlineSeconds check for the next 600s.
3. As is, the initial AddAfter call will enqueue the Deployment but it is unnecessary. Ideally it should be cancelled as soon as another invocation of AddAfter with the same key happens.

I have another use case with ReplicaSets and MinReadySeconds.

Go has a func that seems to be doing what I am asking for
https://golang.org/pkg/time/#AfterFunc

If the delaying queue is meant to work as is currently then how about a new queue type that does what I need?

@deads2k ",open,False,2017-02-25 11:25:40,2018-06-05 01:38:45
client-go,h0tbird,https://github.com/kubernetes/client-go/issues/132,https://api.github.com/repos/kubernetes/client-go/issues/132,[Question] How to watch for deployments?,"I am a newbie in both Go and Kubernetes. When I run the code below...

```go
import ""k8s.io/client-go/pkg/apis/extensions/v1beta1""
```
...
```go
	watchlist := cache.NewListWatchFromClient(
		clientset.Core().RESTClient(),
		""deployments"", v1.NamespaceAll,
		fields.Everything())

	_, controller := cache.NewInformer(
		watchlist,
		&v1beta1.Deployment{},
		time.Second*0,
		cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				jsn, _ := json.Marshal(obj)
				fmt.Printf(""Deployment added: %s\n"", jsn)
			},
			DeleteFunc: func(obj interface{}) {
				jsn, _ := json.Marshal(obj)
				fmt.Printf(""Deployment deleted: %s\n"", jsn)
			},
			UpdateFunc: func(oldObj, newObj interface{}) {
				fmt.Printf(""Deployment changed\n"")
			},
		},
	)
```

...I get the following error:

```
E0228 11:19:08.654259    4931 reflector.go:199] github.com/softonic/kubewatch/vendor/k8s.io/client-go/tools/cache/reflector.go:94: Failed to list <nil>: the server could not find the requested resource
```

What am I doing wrong? Thank you!",closed,False,2017-02-28 10:22:08,2017-03-06 10:42:06
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/133,https://api.github.com/repos/kubernetes/client-go/issues/133,[Do not merge] [PoC] Changes generated by publish script,"Generated by https://github.com/kubernetes/test-infra/pull/2077

First two commits are manually written to sync client-go up to a state that could be further updated by the publish script.

Note that the apimachinery in Godeps.json is updated to its latest commit 0cb55cd30057dc724a0025bc2475d7eac663343e (the last commit in https://github.com/kubernetes/apimachinery/pull/8)

Travis failed probably because vendor/k8s.io/apimachinery and vendor/.../glog are removed.

cc @deads2k @sttts @lavalamp ",closed,True,2017-03-01 08:00:02,2017-03-08 23:21:14
client-go,jbeda,https://github.com/kubernetes/client-go/pull/134,https://api.github.com/repos/kubernetes/client-go/issues/134,Update INSTALL.md to match reality,"Signed-off-by: Joe Beda <joe.github@bedafamily.com>
",closed,True,2017-03-01 23:08:04,2017-03-02 18:21:55
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/135,https://api.github.com/repos/kubernetes/client-go/issues/135,Disclaimer on `go get` doesn't work,@jbeda @lavalamp how about this disclaimer?,closed,True,2017-03-02 00:17:02,2017-03-02 18:22:52
client-go,k82cn,https://github.com/kubernetes/client-go/issues/136,https://api.github.com/repos/kubernetes/client-go/issues/136,Why two client: kubeclient and event client?,Can we combine kubeclient & event client into one object?,closed,False,2017-03-03 12:05:26,2017-03-27 18:58:03
client-go,jzhu077,https://github.com/kubernetes/client-go/issues/137,https://api.github.com/repos/kubernetes/client-go/issues/137,unable to create a deployment without replication controller,"```
// Define Deployments spec.
	deploySpec := &v1beta1.Deployment{
		TypeMeta: unversioned.TypeMeta{
			Kind:       ""Deployment"",
			APIVersion: ""extensions/v1beta1"",
		},
		ObjectMeta: v1.ObjectMeta{
			Name: ""binary-search"",
		},
		Spec: v1beta1.DeploymentSpec{
			Replicas: int32p(1),
			Template: v1.PodTemplateSpec{
				ObjectMeta: v1.ObjectMeta{
					Name:   appName,
					Labels: map[string]string{""app"": appName},
				},
				Spec: v1.PodSpec{
					Containers: []v1.Container{
						v1.Container{
							Name:  ""nginx-container"",
							Image: ""nginx"",
							VolumeMounts: []v1.VolumeMount{
								v1.VolumeMount{
									MountPath: ""/usr/share/nginx/html"",
									Name:      ""shared-data"",
								},
							},
						},
						v1.Container{
							Name:  ""debian-container"",
							Image: ""debian"",
							VolumeMounts: []v1.VolumeMount{
								v1.VolumeMount{
									MountPath: ""/pod-data"",
									Name:      ""shared-data"",
								},
							},
							Command: []string{
								""/bin/sh"",
							},
							Args: []string{
								""-c"",
								""echo Hello from the debian container > /pod-data/index1.html"",
							},
						},
					},
					RestartPolicy: v1.RestartPolicyAlways,
					DNSPolicy:     v1.DNSClusterFirst,
					Volumes: []v1.Volume{
						v1.Volume{
							Name: ""shared-data"",
							VolumeSource: v1.VolumeSource{
								EmptyDir: &v1.EmptyDirVolumeSource{},
							},
						},
					},
				},
			},
		},
	}
```
```
// Implement deployment update-or-create semantics.
// c *kubernetes.Clientset
	deploy := c.Extensions().Deployments(namespace)
	_, err := deploy.Update(deploySpec)

```
I would like to do the same as following yaml file do and deploy it with client-go
```
restartPolicy: Never

  volumes:
  - name: shared-data
    emptyDir: {}

  containers:

  - name: nginx-container
    image: nginx
    volumeMounts:
    - name: shared-data
      mountPath: /usr/share/nginx/html

  - name: debian-container
    image: debian
    volumeMounts:
    - name: shared-data
      mountPath: /pod-data
    command: [""/bin/sh""]
    args: [""-c"", ""echo Hello from the debian container > /pod-data/index.html""]
```
The issue is I cannot create a deployment spec without creating replication controller along with it.I would not like to use replication controller because in my app, containers within a pod are used to complete a task and terminate the container when the task is completed so I would like to set restart policy to never to prevent any terminated container tries to restart. 
ps: I was following examples from https://github.com/timoreimann/kubernetes-goclient-example",closed,False,2017-03-07 03:04:55,2017-03-07 22:00:48
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/138,https://api.github.com/repos/kubernetes/client-go/issues/138,Adding note about examples only work with the code in the same branch,"Adding this note because the problem has confused many users.

Also created kuberentes pr https://github.com/kubernetes/kubernetes/pull/42625, i duplicated the pr here since we don't know when the next sync will be.",closed,True,2017-03-07 06:36:57,2017-03-07 18:24:23
client-go,aaronlevy,https://github.com/kubernetes/client-go/pull/139,https://api.github.com/repos/kubernetes/client-go/issues/139,Update dep usage in install docs,"Apologies if this really shouldn't be opened here.

Gave `dep` a shot for the first time, and due to some recently added tags to the `go-restful` package, the instructions weren't working (latest tag 2.2.0 doesn't contain go-restful/swagger package, which is required by client-go).

There might be a better way to handle this rather than pre-populating the `manifest.json`, but a couple quick cli tests didn't work (e.g. running `ensure go-restful@v1.2`).

Related: https://github.com/kubernetes/client-go/issues/107 (but also not sure prefered way to implement auto tests...)
",closed,True,2017-03-07 20:15:49,2017-03-20 20:42:50
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/140,https://api.github.com/repos/kubernetes/client-go/issues/140,Generated by robot,"First two commits are manually written to sync client-go up to a state that could be further updated by the publish script.

@sttts Original Kubernetes-commit are included in the commit messages ^^

All 5 PRs generated in the same run of the robot:
https://github.com/kubernetes/client-go/pull/140
https://github.com/kubernetes/apimachinery/pull/10
https://github.com/kubernetes/apiserver/pull/4
https://github.com/kubernetes/kube-aggregator/pull/4
https://github.com/kubernetes/sample-apiserver/pull/2
",closed,True,2017-03-08 18:47:49,2017-03-22 13:56:55
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/141,https://api.github.com/repos/kubernetes/client-go/issues/141,Changes generated by publish script,"ref: 
changes generated in the same run for other repos/branches:
https://github.com/kubernetes/apimachinery/pull/9/files
https://github.com/kubernetes/client-go/pull/140/files

using the script here: https://github.com/kubernetes/test-infra/pull/2194

Explanation on the diffs:
1. many .travis.yml and xxx.sh files are added to vendor. That's because copy.sh used to intentionally remove these files from k8s.io/kubernetes/staging/client-go, and the k8s.io/client-go/vendor is copied from the k8s.io/kubernetes/staging. The new scripts runs a `godep restore/save` cycle to populate the vendor/ dir, thus these .yml and .sh files are added.

2. removal of vendor/glog. This is intentional, this helps `go get` users. Details are in https://github.com/kubernetes/test-infra/pull/2077.
",closed,True,2017-03-08 23:06:42,2017-03-20 20:10:59
client-go,krmayankk,https://github.com/kubernetes/client-go/issues/142,https://api.github.com/repos/kubernetes/client-go/issues/142,InitContainers dont work by default when moving from unversioned client to client-go,"- I was Migrating an app using Init Containers from unversioned client to client-go
- All i needed to do in the unversioned client, was populate api.Container into InitContainers field of the PodSpec.
- the migrated app stopped working in client-go.
- i had to explictily enable serialization to annotations to make the init containers work in client-go.

I think that is a bad user experience. By default Init Containers or any other alpha feature should work, without requiring any special serialization. 

I had to call the following function to make this work https://github.com/kubernetes/kubernetes/blob/master/pkg/api/v1/pod/util.go#L91
which is not part of the client-go code. So i had to duplicate that in my app.

",closed,False,2017-03-10 08:08:28,2018-02-20 18:39:00
client-go,resouer,https://github.com/kubernetes/client-go/issues/143,https://api.github.com/repos/kubernetes/client-go/issues/143,how to determine client-go's commit SHA based on Kubernetes's commit?,"`kubernetes/frakti` now vendors  client-go & apimachinery, what we do currently is: after `godep save ./...`, manually copy all files from `kubernetes/staging/client-go` to `frakti/vendor/k8s.io/client-go`.

So I wonder if there's any I can determine the right commit of client-go under my GOPATH, so I can save them to vendor of frakti later?

FYI, I tried `godep restore` under `kubernetes/staging/src/k8s.io/client-go`, it does not work. client-go under GOPATH is not the same as `staging`.",closed,False,2017-03-10 11:56:00,2017-03-23 23:06:35
client-go,k82cn,https://github.com/kubernetes/client-go/issues/144,https://api.github.com/repos/kubernetes/client-go/issues/144,Which branch is used for k8s 1.6?,"Hi team,

As k8s 1.6 are going to release, which branch should I use for 1.6's features? If it's master/HEAD, how about k8s 1.7?",closed,False,2017-03-13 07:38:20,2017-03-14 01:05:28
client-go,floreks,https://github.com/kubernetes/client-go/issues/145,https://api.github.com/repos/kubernetes/client-go/issues/145,FakeEvents Search method uses wrong ListOptions,"While trying to test method in kubernetes dashboard that uses `client.Core().Events().Search()` method chain to get events for node I've encountered panic error due to wrong `ListOptions` import in [fake_event_expansion.go](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/fake/fake_event_expansion.go#L69).

Method execution chain is as follows:
[Search()](https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/core/v1/fake/fake_event_expansion.go#L69)) -> [NewRootListAction()](https://github.com/kubernetes/client-go/blob/master/testing/actions.go#L50) -> [ExtractFromListOptions()](https://github.com/kubernetes/client-go/blob/master/testing/actions.go#L223)

ExtractFromList options expects ListOptions from `k8s.io/apimachinery/pkg/apis/meta/v1` package while Search method from FakeEvents struct  uses ListOptions from `k8s.io/client-go/pkg/api` package. Due to that there is a panic error that we can't avoid.",closed,False,2017-03-13 10:15:46,2017-03-26 01:15:25
client-go,WilliamDenniss,https://github.com/kubernetes/client-go/pull/146,https://api.github.com/repos/kubernetes/client-go/issues/146,Updated installation instructions.,"– dep is now alpha not pre-alpha
– Added a link to the correctly versioned samples for use with the dep instructions.
",closed,True,2017-03-14 21:02:40,2017-03-14 23:17:33
client-go,jessfraz,https://github.com/kubernetes/client-go/issues/147,https://api.github.com/repos/kubernetes/client-go/issues/147,1.6 updates?,I think this is out of date with the staging area of the main kubernetes repo. I updated it in https://github.com/kubernetes/kubernetes/pull/41931 and those changes don't seem to be reflected here.,closed,False,2017-03-15 17:56:50,2017-03-23 22:56:54
client-go,F21,https://github.com/kubernetes/client-go/issues/148,https://api.github.com/repos/kubernetes/client-go/issues/148,Update gogo/protobuf dependency?,"I am using glide for dependency management and am importing` k8s.io/client-go` and `openzipkin\zipkin-go-opentracing`.

Both of these packages depend on `gogo/protobuf`. `zipkin-go-opentracing` does not use any dependency management, but assumes a version of `gogo/protobuf` with `const GoGoProtoPackageIsVersion2 = true`.

Since `k8s.io/client-go` uses godep, glide parses `Godeps.json` and sets `gogo/protobuf` to `e18d7aa8f8c624c915db340349aad4c49b10d173`, which is a really old version. The program then fails to compile because `zipkin-go-opentracing` expects a newer version of `gogo/protobuf`.

This is easily worked around by updating `glide.lock` to the right commit, but it is a bit annoying as there are bugs with glide on Windows where I need to remove the `/vendor` folder and `glide.lock` file in order to get some dependencies to install.

Would it be possible to update `gogo/protobuf` to a newer version? The one being used appears to be around a year old, and a stable version (`v.0.4`) was recently released.",closed,False,2017-03-16 05:58:09,2018-02-20 18:39:00
client-go,justinsb,https://github.com/kubernetes/client-go/issues/149,https://api.github.com/repos/kubernetes/client-go/issues/149,kubectl compatible initialization helper,"I believe a common use case for using the client-go will be writing utilities, and that users of these tools would expect them to work if `kubectl` worked (and to be pointing at the same cluster etc).

However, the kubectl initialization looks like this:

```
loadingRules := clientcmd.NewDefaultClientConfigLoadingRules()
// use the standard defaults for this client command
// DEPRECATED: remove and replace with something more accurate
loadingRules.DefaultClientConfig = &clientcmd.DefaultClientConfig

flags.StringVar(&loadingRules.ExplicitPath, ""kubeconfig"", """", ""Path to the kubeconfig file to use for CLI requests."")

overrides := &clientcmd.ConfigOverrides{ClusterDefaults: clientcmd.ClusterDefaults}

flagNames := clientcmd.RecommendedConfigOverrideFlags("""")
// short flagnames are disabled by default.  These are here for compatibility with existing scripts
flagNames.ClusterOverrideFlags.APIServer.ShortName = ""s""

clientcmd.BindOverrideFlags(overrides, flags, flagNames)
clientConfig := clientcmd.NewInteractiveDeferredLoadingClientConfig(loadingRules, overrides, os.Stdin)

return clientConfig
```

Can we move this method (and a non-interactive version) into client-go?  Right now I'm copying-and-pasting the block into various programs, and that's not ideal, particularly with the uncertainty around the deprecated methods.",closed,False,2017-03-16 06:51:28,2018-02-20 16:37:01
client-go,justinsb,https://github.com/kubernetes/client-go/issues/150,https://api.github.com/repos/kubernetes/client-go/issues/150,Is ResourceVersion honored on Update?,"Does Update honor ResourceVersion?  I want to do a conditional update i.e. I read a version, change it, but I only want to update if there has been no concurrent modification.

Is this the behaviour of Update?",closed,False,2017-03-17 15:43:25,2017-10-19 05:35:12
client-go,andrejvanderzee,https://github.com/kubernetes/client-go/issues/151,https://api.github.com/repos/kubernetes/client-go/issues/151,Conversion *extensions.Deployment to *v1beta1.Deployment fails,"I am trying to covert *extensions.Deployment to *v1beta1.Deployment in go-client 2.0 but it fails (actually since 1.4):

2017/03/19 10:17:05 failed to convert: converting (extensions.Deployment).CreationTimestamp.Time.sec to (v1beta1.Deployment).CreationTimestamp.Time.sec: Cannot set dest. (Tried to deep copy something with unexported fields?)
exit status 1

```package main

import (
	""log""

	_ ""k8s.io/client-go/kubernetes""
	""k8s.io/client-go/pkg/api""
	""k8s.io/client-go/pkg/apis/extensions""
	""k8s.io/client-go/pkg/apis/extensions/v1beta1""
	""k8s.io/client-go/pkg/runtime""
)

const yaml = `
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: push
`

func main() {

	d := api.Codecs.UniversalDecoder()
	obj, _, err := d.Decode([]byte(yaml), nil, nil)
	if err != nil {
		log.Fatalf(""could not decode yaml: %s\n%s"", yaml, err)
	}

	src := obj.(*extensions.Deployment)
	s := runtime.NewScheme()
	dst := &v1beta1.Deployment{}
	err = s.Convert(src, dst, 0)
	if err != nil {
		log.Fatalf(""failed to convert: %s"", err)
	}
}
```

I have created the same issue in the Kubernetes repository for client-go 1.4 with more info a while ago, but it still looks broken: https://github.com/kubernetes/kubernetes/issues/39864",closed,False,2017-03-19 09:24:21,2017-07-26 23:24:33
client-go,shenshouer,https://github.com/kubernetes/client-go/issues/152,https://api.github.com/repos/kubernetes/client-go/issues/152,No change can watch when use client.Namespace.Watch after long time,"I want to watch the namespace change and use the client.Namespace.Watch. And the beginning I can get all the namespace changed, but after about one or two day this Cannot get any change when the I create new namespace or delete exist namespace. And there have no error report, and any other logs.  The code like: 

```
	var watchIF watch.Interface
	timeout := int64(3600 * 24)
	if watchIF, err = kss.kubeClient.Namespaces().Watch(api.ListOptions{Watch: true, TimeoutSeconds: &timeout}); err != nil {
		log.Errorf(""Watch namespaces from kubernetes cluster error:%v"", err)
		return
	}

	eventChan := watchIF.ResultChan()
	for {
		select {
		case event := <-eventChan:
			switch event.Type {
			case watch.Added:
				namespace := event.Object.(*v1.Namespace)
				log.Infoln(""ADD namespace:"", namespace.Name)
				if namespace.Name == ""kube-system"" { // 过滤掉为kube-system的namespace
					continue
				}

				nw := &namespaceWatcher{
					wCache:     kss.wCache,
					etcdClient: kss.wCache.client,
					clientset:  kss.kubeClient,
					namespace:  namespace.Name,
					stopOrDel:  make(chan bool, 1),
				}

				if err := kss.wCache.addWatch(nw.namespace, nw); err != nil {
					log.Errorln(err)
				}
			case watch.Deleted:
				namespace := event.Object.(*v1.Namespace)
				log.Infoln(""DELETE namespace:"", namespace.Name)
				if err := kss.wCache.delWatch(namespace.Name); err != nil {
					log.Errorf(""Stop watch namespace:%s error:%v"", namespace, err)
				}
			}

		case <-kss.quit:
			log.Infoln(""Received quit signal, Exit watch namespaces"")
			kss.wCache.stopAllWatch()
			return
		}
	}
```

The same with the param of timeout. Before I found the problem I did not set timeout , After set the timeout and still get nothing changed when pass two days .


Any one who can help me ? Or I need to direct watch the etcd which the master used.
",closed,False,2017-03-20 03:02:11,2018-02-23 21:52:51
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/153,https://api.github.com/repos/kubernetes/client-go/issues/153,Round2: Generated by scripts,"Last round of PRs failed to update vendor/. This one fixed it.

Changes in this PR is innocuous.
",closed,True,2017-03-20 22:23:36,2017-03-21 21:11:18
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/154,https://api.github.com/repos/kubernetes/client-go/issues/154,Round2: Generated by scripts,"Last round of PRs failed to update vendor/. This one fixed it.

In last round, a manual commit removed the vendor/, due to the bug, the robot didn't add back the vendor/. This PR added it back.

@deads2k @sttts cc @mbohlool 

PRs to other repos:
https://github.com/kubernetes/apiserver/pull/5
https://github.com/kubernetes/kube-aggregator/pull/5
https://github.com/kubernetes/sample-apiserver/pull/3
https://github.com/kubernetes/client-go/pull/154
https://github.com/kubernetes/apimachinery/pull/11",closed,True,2017-03-20 22:25:46,2017-03-21 21:10:51
client-go,seh,https://github.com/kubernetes/client-go/issues/155,https://api.github.com/repos/kubernetes/client-go/issues/155,Informers do not surface API server request failures to callers,"When I call [`cache.NewInformer`](https://github.com/kubernetes/client-go/blob/65ac4e638a79d49b7dbd5e1cef4e7785af7cbd39/tools/cache/controller.go#L235-L240) to create an Informer and then call [`cache.Controller.Run`](https://github.com/kubernetes/client-go/blob/65ac4e638a79d49b7dbd5e1cef4e7785af7cbd39/tools/cache/controller.go#L235-L240) on the returned value, the controller periodically contacts the API server to list the objects of the given type. At some point the API server rejects these requests, causing the controller to log messages like the following:
> Failed to list *v1beta1.Ingress: the server has asked for the client to provide credentials (get ingresses.extensions)\n"",""stream"":""stderr"",""time"":""2017-03-21T14:14:37.397681364Z""}
>
> Failed to list *v1.Service: the server has asked for the client to provide credentials (get services)\n"",""stream"":""stderr"",""time"":""2017-03-21T14:14:37.398311081Z""}
>
> Failed to list *v1.Endpoints: the server has asked for the client to provide credentials (get endpoints)\n"",""stream"":""stderr"",""time"":""2017-03-21T14:14:37.399217817Z""}

These failures repeat periodically, swelling the log file, and it may take many days before we notice that our controller is ostensibly still running, but only inertly; it can't get its job done without talking to the API server. Sometimes the server changes its mind and starts fulfilling the requests again, but these failure periods can persist for days.

_A caller of `cache.Controller.Run` should have some way of detecting that these failures are occurring in order to declare the process unhealthy._ Retrying automatically to smooth over intermittent network trouble is a nice feature, but with neither the ability to control it nor detect its ongoing failure makes it dangerous.

I would be happy with either of the following two improvements:
- **Accept a callback (perhaps via a new sibling method for `Controller.Run`) that tells a caller when these request failures arrive.**  
  It could also accept a caller-provided channel, and push errors into the channel when they arise, dropping errors that can't be delivered synchronously.
- **Provide a way to integrate a controller into a ""healthz"" handler.**  
  That leaves the health criteria opaque to callers—and probably begs for some way to configure the thresholds—but still allows a calling process to indicate that it's in dire shape.

We discussed this gap [in the ""kubernetes-dev"" channel in the ""Kubernetes"" Slack team](https://kubernetes.slack.com/archives/C09R23FHP/p1490107292534753).",open,False,2017-03-21 15:38:41,2019-03-08 16:50:59
client-go,mikeln,https://github.com/kubernetes/client-go/issues/156,https://api.github.com/repos/kubernetes/client-go/issues/156,emicklei/go-restful/swagger  Has been moved.  Imports Need To Be Updated.,"**What keywords did you search in Kubernetes issues before filing this one?** (If you have found any duplicates, you should instead reply there.): swagger, swagger12

**Is this a BUG REPORT or FEATURE REQUEST?** (choose one): BUG REPORT

**Description:**

github.com/emicklei/go-restful/swagger   

has been moved to: 

https://github.com/emicklei/go-restful-swagger12

Imports in several files need to be updated.
",closed,False,2017-03-21 18:51:02,2017-03-22 02:41:19
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/157,https://api.github.com/repos/kubernetes/client-go/issues/157,"We support `go get` now, update INSTALL.md","The master branch of client-go is published in sync with the master branch of apimachinery now, so `go get k8s.io/client-go/...` will work.

We removed `k8s.io/apimachinery` from client-go's `vendor/` folder, so the only copy of apimachinery will be the one in GOPATH, so https://github.com/kubernetes/client-go/issues/83 is fixed.

So i think we can add back the section about `go get` to INSTALL.md.

@jbeda @rubenv @lavalamp ",closed,True,2017-03-21 23:18:00,2017-03-31 23:55:44
client-go,mtaufen,https://github.com/kubernetes/client-go/issues/158,https://api.github.com/repos/kubernetes/client-go/issues/158,JSONPath parser will not filter strings containing parentheses,"For example, given this query:
` kubectl get nodes -o jsonpath='{.items[?(@.status.nodeInfo.osImage == ""Debian GNU/Linux 7 (wheezy)"")].status.nodeInfo.osImage}'`

you get this error:
`error: error parsing jsonpath {.items[?(@.status.nodeInfo.osImage == ""Debian GNU/Linux 7 (wheezy)"")].status.nodeInfo.osImage}, unclosed array expect ]`

which I believe is due to this code: https://github.com/kubernetes/client-go/blob/088dc4a30d8aea05fe147c21f249f519fece0bf6/util/jsonpath/parser.go#L342

which naively breaks on a `)`, even when inside the comparison string.",closed,False,2017-03-22 15:22:41,2017-07-06 18:21:29
client-go,F21,https://github.com/kubernetes/client-go/issues/159,https://api.github.com/repos/kubernetes/client-go/issues/159,Watching and getting pods from all namespaces,"It seems to be possible to watch for pods and get pods from all namespaces via the API:

- https://kubernetes.io/docs/api-reference/v1.5/#list-all-namespaces-63
- https://kubernetes.io/docs/api-reference/v1.5/#watch-list-all-namespaces-66

Does the client support these operations (I wasn't able to find methods supporting them)?

If not, it would be nice if the client can support these operations.",closed,False,2017-03-23 00:29:00,2019-03-26 08:48:44
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/160,https://api.github.com/repos/kubernetes/client-go/issues/160,[Do Not Merge] Release 3.0,"Generated by bot

The release-3.0 of client-go, and release-1.6 branches of apimachinery, apiserver, kube-aggregator, and sample-apiserver are tracking relesae-1.6 of kubernetes. These branches might depend on each other, but not on commit in the master branch.

The PR batch:
https://github.com/kubernetes/sample-apiserver/pull/4
https://github.com/kubernetes/kube-aggregator/pull/6
https://github.com/kubernetes/apiserver/pull/6
https://github.com/kubernetes/client-go/pull/160
no change to the release 1.6 branch of apimachinery

cc @deads2k @sttts ",closed,True,2017-03-30 03:04:06,2017-03-31 17:58:59
client-go,krmayankk,https://github.com/kubernetes/client-go/issues/161,https://api.github.com/repos/kubernetes/client-go/issues/161,Add examples of how a simple list and watch is built using client-go,"- basically how to use resourceVersion correctly. Sorry if this is documented somewhere else ?
- From my understanding, we should always do a list and get the resourceVersion from the list
- then use a watch with the above resourceVersion
- if the watch fails, can we restart the watch with same resourceVersion
- if the watch succeeds , how do i get the updated resourceVersion to do the watch again ?
- I know if between list and watch , too much time elapses, the buffer can become full, in which case, watch would fail, i guess, do we need to list again there ?",open,False,2017-03-30 07:00:30,2017-12-24 10:24:45
client-go,narkarum,https://github.com/kubernetes/client-go/issues/162,https://api.github.com/repos/kubernetes/client-go/issues/162,Packages not available.,"The referenced all packages were not available.

package: k8s.io/client-go

- version: 7615377
- subpackages:
- kubernetes
- kubernetes/typed/core/v1
- pkg/api
- pkg/api/v1
- pkg/apis/storage/v1
- pkg/apis/storage/v1beta1
- rest
- tools/cache
- tools/clientcmd
- tools/record

For example, following were not found the commit: 7615377

- pkg/api/resource
- pkg/api/testapi
- pkg/api
- pkg/api/v1",closed,False,2017-03-30 08:11:36,2018-02-20 20:41:00
client-go,xh3b4sd,https://github.com/kubernetes/client-go/issues/163,https://api.github.com/repos/kubernetes/client-go/issues/163,how does error handling work?,I am playing around with the client and wonder how error handling works. I scanned the code a bit and could not find typed errors or error codes/matchers. So if I try to create an endpoint for a service and this endpoint exists I get an error which is only identifiable by string matching against the error message. I feel like it would be super useful to have proper error types to match against. How is this intended to work with the client library here? ,closed,False,2017-03-30 17:08:54,2017-06-20 10:15:55
client-go,huangjiasingle,https://github.com/kubernetes/client-go/issues/164,https://api.github.com/repos/kubernetes/client-go/issues/164,"When l delete the rc , the pod not deleted ","l use CoreV1().ReplicationControllers(Namespace).Delete(Name, &v1.DeleteOptions{}) to delete rc, the rc was delete , but the rc's pod util exsit forerver .  so l checkout another version , produce the same result.
but when use CoreV1().Namespaces().Delete(Name, &v1.DeleteOptions{}) to delete namespace, the rc and pod was delete too. 

so l think the rc's delete func has a bug. 

l wish you group to deal with it.",closed,False,2017-03-30 19:26:06,2017-03-31 05:26:06
client-go,ash2k,https://github.com/kubernetes/client-go/issues/165,https://api.github.com/repos/kubernetes/client-go/issues/165,Add ExtractApiGroupAndKind(),Add `pkg/registry/extensions/thirdpartyresourcedata/ExtractApiGroupAndKind()` function to client-go. Useful when working with TPRs.,closed,False,2017-03-31 02:35:24,2017-05-07 07:01:38
client-go,dcheney-atlassian,https://github.com/kubernetes/client-go/issues/166,https://api.github.com/repos/kubernetes/client-go/issues/166,dep example in README does not work,"I tried the example from the README for how to vendor client-go with dep
```
% cat main.go 
package main

import ""fmt""

import _ ""k8s.io/client-go""

func main() {
        fmt.Println(""vim-go"")
}
```
then ran
```
% dep ensure k8s.io/client-go@^2.0.0
solve error: No versions of k8s.io/client-go met constraints:
        v2.0.0: Could not introduce k8s.io/client-go@v2.0.0, as its subpackage k8s.io/client-go does not contain usable Go code (*build.NoGoError).. (Package is required by (root).)
        v1.5.1: Could not introduce k8s.io/client-go@v1.5.1, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        v1.5.0: Could not introduce k8s.io/client-go@v1.5.0, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        v1.4.0: Could not introduce k8s.io/client-go@v1.4.0, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        v2.0.0-alpha.1: Could not introduce k8s.io/client-go@v2.0.0-alpha.1, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        v2.0.0-alpha.0: Could not introduce k8s.io/client-go@v2.0.0-alpha.0, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        master: Could not introduce k8s.io/client-go@master, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        release-1.4: Could not introduce k8s.io/client-go@release-1.4, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        release-1.5: Could not introduce k8s.io/client-go@release-1.5, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        release-2.0: Could not introduce k8s.io/client-go@release-2.0, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        release-3.0: Could not introduce k8s.io/client-go@release-3.0, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        revert-14-1.5: Could not introduce k8s.io/client-go@revert-14-1.5, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
ensure Solve(): No versions of k8s.io/client-go met constraints:
        v2.0.0: Could not introduce k8s.io/client-go@v2.0.0, as its subpackage k8s.io/client-go does not contain usable Go code (*build.NoGoError).. (Package is required by (root).)
        v1.5.1: Could not introduce k8s.io/client-go@v1.5.1, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        v1.5.0: Could not introduce k8s.io/client-go@v1.5.0, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        v1.4.0: Could not introduce k8s.io/client-go@v1.4.0, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        v2.0.0-alpha.1: Could not introduce k8s.io/client-go@v2.0.0-alpha.1, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        v2.0.0-alpha.0: Could not introduce k8s.io/client-go@v2.0.0-alpha.0, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        master: Could not introduce k8s.io/client-go@master, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        release-1.4: Could not introduce k8s.io/client-go@release-1.4, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        release-1.5: Could not introduce k8s.io/client-go@release-1.5, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        release-2.0: Could not introduce k8s.io/client-go@release-2.0, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        release-3.0: Could not introduce k8s.io/client-go@release-3.0, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
        revert-14-1.5: Could not introduce k8s.io/client-go@revert-14-1.5, as it is not allowed by constraint ^2.0.0 from project github.com/atlassian/dynamodb-operator.
```
Is this a dep problem, or a problem with client-go?",closed,False,2017-03-31 03:27:35,2017-04-03 21:32:39
client-go,vsimon,https://github.com/kubernetes/client-go/issues/167,https://api.github.com/repos/kubernetes/client-go/issues/167,Compiling with release-3.0 branch not working,"With the release-3.0 branch, this
```
package main

import ""fmt""

import _ ""k8s.io/client-go/kubernetes""

func main() {
	fmt.Println(""test"")
}
```

results in 

```
$ go run main.go
# gitlab.oblong.com/mezzanine/meow/vendor/k8s.io/client-go/discovery
../vendor/k8s.io/client-go/discovery/restmapper.go:288: del.AliasesForResource undefined (type meta.RESTMapper has no field or method AliasesForResource)
```

Perhaps https://github.com/kubernetes/client-go/commit/999c0d5c20bde4f4ed1c5f4e719d26eb2f687501 needs to be cherry-picked into this branch?",closed,False,2017-04-01 04:37:38,2017-04-04 00:26:12
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/168,https://api.github.com/repos/kubernetes/client-go/issues/168,describe kubernetes-vX.Y.Z tag in README,@lavalamp @mbohlool ptal. Thanks.,closed,True,2017-04-03 17:28:08,2017-10-30 22:52:28
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/169,https://api.github.com/repos/kubernetes/client-go/issues/169,Add client-go 3.0 beta to compatibility matrix,@mbohlool @lavalamp ptal. Thanks.,closed,True,2017-04-03 17:50:16,2017-04-03 19:35:07
client-go,seh,https://github.com/kubernetes/client-go/issues/170,https://api.github.com/repos/kubernetes/client-go/issues/170,"Move ""kubernetes/pkg/client/unversioned/(portforward|remotecommand)"" packages","I came across the following two packages while trying to port [Helm](https://github.com/kubernetes/helm) over to depending on _kubernetes/client-go_, instead of the _kubernetes/kubernetes_ repository:
- `kubernetes/pkg/client/unversioned/portforward`
- `kubernetes/pkg/client/unversioned/remotecommand`

(Find Helm's use of these packages [here](https://github.com/kubernetes/helm/blob/ea3be9e3b24191bdefabc87e8f2fe445d071c1f3/pkg/kube/tunnel.go#L74-L95).)

There is an existing package in _client-go_—`tools/portforward`—that looks kind of like the former, but I can't figure out what to substitute for the latter to make use of it. If there's no replacement for them already, could we move those first two packages into _client-go_?

Word on the street [from @ncdc in the ""sig-api-machinery"" Slack channel](https://kubernetes.slack.com/archives/C0EG7JC6T/p1491242114843241) is that the SIG discussed moving these packages recently. The outstanding work in kubernetes/kubernetes#41543 looks pertinent too.",closed,False,2017-04-03 18:21:38,2017-12-23 14:55:21
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/171,https://api.github.com/repos/kubernetes/client-go/issues/171,minor update to installation guide using dep,"Fix https://github.com/kubernetes/client-go/issues/166.
",closed,True,2017-04-03 21:27:45,2017-04-03 21:32:39
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/172,https://api.github.com/repos/kubernetes/client-go/issues/172,update CHANGELOG for v3.0.0-beta.0,@lavalamp @mbohlool ptal. Thanks.,closed,True,2017-04-03 22:50:43,2017-04-03 22:53:09
client-go,deitch,https://github.com/kubernetes/client-go/issues/173,https://api.github.com/repos/kubernetes/client-go/issues/173,client-go does not support SNI even though API server does,"The kube-apiserver support SNI correctly, as given by the docs and code with the `--tls-sni-cert-key` option (and real testing with 1.6.1).

The client-go library does not. 

The `TLSClientClientConfig struct` has a line for it at https://github.com/kubernetes/client-go/blob/master/rest/config.go#L136 but when using `InClusterConfig()` and `NewConfig(config)`, there is no way to indicate it should use the provided server_name.

See https://github.com/kubernetes/client-go/blob/master/rest/config.go#L287

It probably should be something like:

```go
	tlsClientConfig := TLSClientConfig{ServerName: host}
```

By default, it probably should specify the ServerName.
",closed,False,2017-04-05 15:28:15,2018-02-21 00:45:00
client-go,frankgreco,https://github.com/kubernetes/client-go/issues/174,https://api.github.com/repos/kubernetes/client-go/issues/174,Overcoming Dependency Conflicts,"I have been trying to get some code to compile over the past few days and cannot seem to get it to work. 

What is the correct version/commit combination for the following packages so that `glide update && glide install && go build` work?

* `k8s.io/kubernetes`
* `k8s.io/apimachinery`
* `k8s.io/client-go`

I have tried countless combinations and each time have gotten one of the following errors:

1. `[WARN]	Conflict: k8s.io/apimachinery rev is currently <some hash>, but k8s.io/client-go wants <a different hash>`
2. `controller/controller.go:57: cannot use "".../vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".ObjectMeta literal (type "".../vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".ObjectMeta) as type "".../vendor/k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".ObjectMeta in field value`",closed,False,2017-04-06 20:30:03,2017-04-06 22:34:29
client-go,DMXRoid,https://github.com/kubernetes/client-go/issues/175,https://api.github.com/repos/kubernetes/client-go/issues/175,Dependency on package github.com/emicklei/go-restful/swagger which no longer exists,"There's an import of ""github.com/emicklei/go-restful/swagger"" in client-go/discovery that breaks b/c the swagger directory is no longer in go-restful master.
```
schiros@intrepid:~/projects/acadia/vendor$ grep -rin github.com/emicklei/go-restful/swagger
src/k8s.io/client-go/discovery/discovery_client_test.go:26:     ""github.com/emicklei/go-restful/swagger""
src/k8s.io/client-go/discovery/restmapper_test.go:32:   ""github.com/emicklei/go-restful/swagger""
src/k8s.io/client-go/discovery/discovery_client.go:26:  ""github.com/emicklei/go-restful/swagger""
src/k8s.io/client-go/discovery/fake/discovery.go:22:    ""github.com/emicklei/go-restful/swagger""
```

FWIW I'm building and vendoring w/ gb, but I'm also running into the same problem if i use go get. I can work around it by manually pointing to an older branch in my manifest, but  seems non-ideal
",closed,False,2017-04-07 18:00:12,2017-04-11 17:37:10
client-go,ensonic,https://github.com/kubernetes/client-go/issues/176,https://api.github.com/repos/kubernetes/client-go/issues/176,incomplete recommendation in INSTALL.md,"I've tried to follow the the recommendation to use the `dep` tool.
First you will have to call this `~/go/bin/dep` unless you added $GOPATH/bin to PATH.

After some fiddling with the gopath I've got the dep tool to run, but the build still fails:
```
./main.go:36: cannot use deployment (type *""k8s.io/client-go/pkg/apis/apps/v1beta1"".Deployment) as type *""app/vendor/k8s.io/client-go/pkg/apis/extensions/v1beta1"".Deployment in argument to k8s.ExtensionsV1beta1().Deployments("""").Create
```
It would be nice to provide some guidelines of how to handle this and how the imports supposed to look like.
1.) is it okay to mix sources like:
```
metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
""k8s.io/client-go/pkg/api/v1""
appsv1beta1 ""k8s.io/client-go/pkg/apis/apps/v1beta1""
```
Or is meta/v1 available somewhere under client-go too (did not find it so far).

2.) why are the package path's so repetitive? whats the difference in
```
""k8s.io/client-go/pkg/apis/apps/v1beta1""
""k8s.io/client-go/pkg/apis/extensions/v1beta1""
```
- they both have Deployment().

Swapping the 'apps' with 'extensions', the initial error becomes:
```
./main.go:36: cannot use deployment (type *""k8s.io/client-go/pkg/apis/extensions/v1beta1"".Deployment) as type *""app/vendor/k8s.io/client-go/pkg/apis/extensions/v1beta1"".Deployment in argument to k8s.ExtensionsV1beta1().Deployments("""").Create
```
Seems, I am getting closer...",closed,False,2017-04-11 13:08:07,2018-02-21 05:50:02
client-go,cristian-pirnog,https://github.com/kubernetes/client-go/issues/177,https://api.github.com/repos/kubernetes/client-go/issues/177,in-cluster and out-of-cluster examples don't build again,"```
cristian@cristian-laptop:~/code/go/src/k8s.io/client-go$ go build ./examples/in-cluster/
# k8s.io/client-go/discovery
discovery/restmapper.go:304: cannot use DeferredDiscoveryRESTMapper literal (type *DeferredDiscoveryRESTMapper) as type meta.RESTMapper in assignment:
	*DeferredDiscoveryRESTMapper does not implement meta.RESTMapper (missing AliasesForResource method)
cristian@cristian-laptop:~/code/go/src/k8s.io/client-go$ go build ./examples/out-of-cluster/
# k8s.io/client-go/discovery
discovery/restmapper.go:304: cannot use DeferredDiscoveryRESTMapper literal (type *DeferredDiscoveryRESTMapper) as type meta.RESTMapper in assignment:
	*DeferredDiscoveryRESTMapper does not implement meta.RESTMapper (missing AliasesForResource method)
```
This seems to be a similar issue with #81. I'm using the commit 4a3ab2f5be5177366f8206fd79ce55ca80e417fa.",closed,False,2017-04-12 09:52:20,2017-04-13 12:07:28
client-go,yanc0,https://github.com/kubernetes/client-go/issues/178,https://api.github.com/repos/kubernetes/client-go/issues/178,the server could not find the requested resource,"Hi,

I'm currently facing this issue:

```
panic: the server could not find the requested resource

goroutine 1 [running]:
github.com/PrestaShop/presto-plateforme/presthost/worker/plugins.Test(0xc4201632e0, 0x17)
	/home/yann/Gopath/src/github.com/PrestaShop/presto-plateforme/presthost/worker/plugins/gke.go:21 +0x35e
github.com/PrestaShop/presto-plateforme/presthost/worker.Run(0xc4201632e0, 0x17)
	/home/yann/Gopath/src/github.com/PrestaShop/presto-plateforme/presthost/worker/main.go:10 +0xae
main.main()
	/home/yann/Gopath/src/github.com/PrestaShop/presto-plateforme/presthost/main.go:21 +0x14b
```

With this code

```go
import (
    ""fmt""
    metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
    ""k8s.io/client-go/kubernetes""
    ""k8s.io/client-go/rest""
    ""k8s.io/client-go/kubernetes/typed/apps/v1beta1""
    _ ""k8s.io/client-go/plugin/pkg/client/auth/gcp""
    ""k8s.io/client-go/tools/clientcmd""
)

func Test(kubeconfig string) {
    clientset, betaclientset := initClientSets(kubeconfig)
    pods, err := clientset.CoreV1().Pods("""").List(metav1.ListOptions{})
    if err != nil {
        panic(err.Error())
    }   
    deployments, err := betaclientset.Deployments(""default"").List(metav1.ListOptions{})
    if err != nil {
        panic(err.Error())
    }   
    fmt.Printf(""There are %d deployments in the cluster\n"", len(deployments.Items))
    fmt.Printf(""There are %d pods in the cluster\n"", len(pods.Items))
}

func initClientSets(kubeconfig string) (*kubernetes.Clientset, *v1beta1.AppsV1beta1Client) {
    config, err := clientcmd.BuildConfigFromFlags("""", kubeconfig)
    if err != nil { 
        fmt.Printf(""Fallback to cluter config (%s)"", err.Error())
        config, err = rest.InClusterConfig()
        if err != nil { 
            panic(err.Error())
        }
    }
    clientset, err := kubernetes.NewForConfig(config)
    if err != nil {
        panic(err.Error())
    }
    betaclientset, err := v1beta1.NewForConfig(config)
    if err != nil {
        panic(err.Error())
    }
    return clientset, betaclientset
}
```

go-client is vendored on master, no tags. But I also tried with v3.0.0-beta.1 and the same error is returned.

This is a GKE 1.6 Kubernetes Cluster.

How do I access and creates deployments?

Thanks you !",closed,False,2017-04-13 16:20:15,2017-04-14 06:33:06
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/179,https://api.github.com/repos/kubernetes/client-go/issues/179,Move dep to the last recommended vendoring tool,"`dep` is still alpha and thus not stable, e.g., `dep` just changed its manifest file format, as pointed out by @ensonic https://github.com/kubernetes/client-go/issues/176#issuecomment-293842046. Hence, I moved dep to the last recommended vendoring tool instead of as the first recommendation.",closed,True,2017-04-13 18:31:03,2017-04-24 07:38:23
client-go,felipejfc,https://github.com/kubernetes/client-go/issues/180,https://api.github.com/repos/kubernetes/client-go/issues/180,Can't compile release 3.0.0 beta-0,"We're seeing multiple errors, like:

```
# github.com/topfreegames/maestro/vendor/k8s.io/client-go/pkg/api/v1
models/vendor/k8s.io/client-go/pkg/api/v1/meta.go:24: cannot use obj (type *ObjectMeta) as type v1.Object in return argument:
	*ObjectMeta does not implement v1.Object (missing GetDeletionGracePeriodSeconds method)
```",closed,False,2017-04-13 19:40:12,2018-02-21 10:54:59
client-go,jmccormick2001,https://github.com/kubernetes/client-go/issues/181,https://api.github.com/repos/kubernetes/client-go/issues/181,add example of performing a Patch,"would be great to have a working example of performing a Patch using the client api, particularly would be useful for a ThirdPartyResource as an example.",closed,False,2017-04-14 18:38:42,2017-07-27 14:07:39
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/182,https://api.github.com/repos/kubernetes/client-go/issues/182,"Adding instructions on how to use ""dep"" to get client-go v3.0.0-beta.0 in INSTALL.md","`dep` doesn't interpret Godeps.json, so we need to manually checkout the compatible version of apimachinery.

I don't want to check in the manifest/lock files of `dep`, as the format is not stable. In fact, the [README](https://github.com/golang/dep#usage) of dep suggests not checking in these files.

Alternative to this PR, perhaps we should remove `dep` from INSTALL.md until it becomes beta? @cscatolini @ericchiang @mbohlool @lavalamp what do you think?",closed,True,2017-04-18 23:24:06,2017-08-22 18:06:15
client-go,nvartolomei,https://github.com/kubernetes/client-go/issues/183,https://api.github.com/repos/kubernetes/client-go/issues/183,Using client-go 2.0 with k8s 1.5,"I'm trying to use 2.0 branch of `client-go` to access resources on a 1.5 k8s cluster. Looking at [compatibility matrix](https://github.com/kubernetes/client-go#compatibility-matrix) I expect this to work.

Looks like it is not the case `Failed to list *v1beta1.StatefulSet: the server could not find the requested resource`.

It there a way to list alpha/beta/stable resources using a single client? The client-go 2.0 is missing `v1alpha1.StatefulSet` definition.",closed,False,2017-04-22 16:24:26,2017-05-12 10:12:00
client-go,archisgore,https://github.com/kubernetes/client-go/issues/184,https://api.github.com/repos/kubernetes/client-go/issues/184,k8s.io repos down?,"Problem:
```
Archishmats-MacBook-Pro-2:src archis$ go get k8s.io/client-go/1.5/kubernetes
package k8s.io/client-go/1.5/kubernetes: cannot find package ""k8s.io/client-go/1.5/kubernetes"" in any of:
	/usr/local/Cellar/go/1.8/libexec/src/k8s.io/client-go/1.5/kubernetes (from $GOROOT)
	/Users/archis/Polyverse/src/k8s.io/client-go/1.5/kubernetes (from $GOPATH)
```

This began happening today morning. The URL expands to: `https://kubernetes.io/client-go/1.5/kubernetes`

I get a 404 not found page.

As a note, why doesn't this client repo just reference itself without going through a 3rd party redirection service? Should I be forking and replacing `k8s.io` references with `github.com/kubernetes/*`?",closed,False,2017-04-30 14:36:52,2017-04-30 22:04:17
client-go,cilindrox,https://github.com/kubernetes/client-go/issues/185,https://api.github.com/repos/kubernetes/client-go/issues/185,[question] Idiomatic way to update a Deployment and its Annotations?,"So, I'm using the following code (in-cluster, kubernetes v1.6.2, GKE) to update an existing Deployment's image. I'm also trying to add a `deployed-by` annotation.

```go
package main

import (
	""fmt""
	""os""

	""k8s.io/client-go/kubernetes""
	""k8s.io/client-go/rest""
)

func UpdateDeployment(app, image string) {
	config, err := rest.InClusterConfig()
	if err != nil {
		panic(err.Error())
	}

	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		panic(err.Error())
	}

	namespace := ""default""
	deployments := clientset.Extensions().Deployments(namespace)

	deploySpec, err := deployments.Get(app)
	if err != nil {
		panic(err.Error())
	}

	deploySpec.Spec.Template.Spec.Containers[0].Image = image
	deploySpec.ObjectMeta.Annotations[""deployed-by""] = ""me<me@domain.com>""
	_, err := deployments.Update(deploySpec)
}
```

Image gets updated and deployment is rolled out without any issues whatsoever. Annotations however do not get added/updated at all.

Any clues as to what I'm doing wrong here?",closed,False,2017-05-04 19:39:15,2017-06-24 13:12:51
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/186,https://api.github.com/repos/kubernetes/client-go/issues/186,"""dep init"" fail with error ""No versions of k8s.io/client-go met constraints""","(Related issue: #176,  but it is not the same.)

Repro:

```
$ export GOPATH=~/workspace/client-go-examples

$ mkdir -p $GOPATH/src

$ ( for this step, copy contents of examples/ directory in the repo to ./src as that's what INSTALL.md suggested)

$ cd  $GOPATH/src/examples

$ ls
in-cluster  out-of-cluster  third-party-resources  workqueue

$ dep init
Cached github.com/golang/glog
Cached k8s.io/apimachinery
Cached k8s.io/client-go
No versions of k8s.io/client-go met constraints:
	v2.0.0: Could not introduce k8s.io/client-go@v2.0.0 due to multiple problematic subpackages:
	Subpackage k8s.io/client-go/kubernetes/scheme is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/util/workqueue is missing. (Package is required by (root).)
	v1.5.1: Could not introduce k8s.io/client-go@v1.5.1 due to multiple problematic subpackages:
	Subpackage k8s.io/client-go/util/workqueue is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/kubernetes is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/kubernetes/scheme is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/pkg/api/v1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/pkg/apis/extensions/v1beta1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/rest is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/tools/cache is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/tools/clientcmd is missing. (Package is required by (root).)
	v1.5.0: Could not introduce k8s.io/client-go@v1.5.0 due to multiple problematic subpackages:
	Subpackage k8s.io/client-go/kubernetes/scheme is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/pkg/api/v1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/pkg/apis/extensions/v1beta1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/rest is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/tools/cache is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/tools/clientcmd is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/util/workqueue is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/kubernetes is missing. (Package is required by (root).)
	v1.4.0: Could not introduce k8s.io/client-go@v1.4.0 due to multiple problematic subpackages:
	Subpackage k8s.io/client-go/tools/cache is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/tools/clientcmd is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/util/workqueue is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/kubernetes is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/kubernetes/scheme is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/pkg/api/v1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/pkg/apis/extensions/v1beta1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/rest is missing. (Package is required by (root).)
	v3.0.0-beta.0: Could not introduce k8s.io/client-go@v3.0.0-beta.0, as it requires package github.com/emicklei/go-restful/swagger from github.com/emicklei/go-restful, but in version 2.2.0 that package is missing.
	v2.0.0-alpha.1: Could not introduce k8s.io/client-go@v2.0.0-alpha.1 due to multiple problematic subpackages:
	Subpackage k8s.io/client-go/kubernetes/scheme is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/util/workqueue is missing. (Package is required by (root).)
	v2.0.0-alpha.0: Could not introduce k8s.io/client-go@v2.0.0-alpha.0 due to multiple problematic subpackages:
	Subpackage k8s.io/client-go/kubernetes/scheme is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/util/workqueue is missing. (Package is required by (root).)
	master: Could not introduce k8s.io/client-go@master, as it requires package github.com/emicklei/go-restful/swagger from github.com/emicklei/go-restful, but in version 2.2.0 that package is missing.
	release-1.4: Could not introduce k8s.io/client-go@release-1.4 due to multiple problematic subpackages:
	Subpackage k8s.io/client-go/kubernetes/scheme is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/pkg/api/v1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/pkg/apis/extensions/v1beta1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/rest is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/tools/cache is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/tools/clientcmd is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/util/workqueue is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/kubernetes is missing. (Package is required by (root).)
	release-1.5: Could not introduce k8s.io/client-go@release-1.5 due to multiple problematic subpackages:
	Subpackage k8s.io/client-go/pkg/api/v1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/pkg/apis/extensions/v1beta1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/rest is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/tools/cache is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/tools/clientcmd is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/util/workqueue is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/kubernetes is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/kubernetes/scheme is missing. (Package is required by (root).)
	release-2.0: Could not introduce k8s.io/client-go@release-2.0 due to multiple problematic subpackages:
	Subpackage k8s.io/client-go/kubernetes/scheme is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/util/workqueue is missing. (Package is required by (root).)
	release-3.0: Could not introduce k8s.io/client-go@release-3.0, as it requires package github.com/emicklei/go-restful/swagger from github.com/emicklei/go-restful, but in version 2.2.0 that package is missing.
	revert-14-1.5: Could not introduce k8s.io/client-go@revert-14-1.5 due to multiple problematic subpackages:
	Subpackage k8s.io/client-go/kubernetes/scheme is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/pkg/api/v1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/pkg/apis/extensions/v1beta1 is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/rest is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/tools/cache is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/tools/clientcmd is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/util/workqueue is missing. (Package is required by (root).)	Subpackage k8s.io/client-go/kubernetes is missing. (Package is required by (root).)
```
",closed,False,2017-05-12 16:15:25,2018-03-02 08:24:14
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/187,https://api.github.com/repos/kubernetes/client-go/issues/187,Better error for rest.InClusterConfig when not in-cluster,"When you run `go run examples/in-cluster/main.go` while out-of-cluster, you get a **nice error** saying:

```
panic: unable to load in-cluster configuration, KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT must be defined

goroutine 1 [running]:
main.main()
	/Users/ahmetb/workspace/client-go-example/src/examples/in-cluster/main.go:33 +0x2d6
exit status 2
```

This indicates perhaps I am not in-cluster. So I try to fix the situation by running `kubectl proxy --api-prefix=/` then by running:


```
$ KUBERNETES_SERVICE_HOST=127.0.0.1 KUBERNETES_SERVICE_PORT=8001 go run main.go

panic: open /var/run/secrets/kubernetes.io/serviceaccount/token: no such file or directory
goroutine 1 [running]:
main.main()
	/Users/ahmetb/workspace/client-go-example/src/examples/in-cluster/main.go:33 +0x2d6
exit status 2
```

Not a nice error anymore.

Would it make sense to wrap this error with a nice message instead of just doing `panic(err)` on ENOENT? example:

    panic: cannot load service account token of the pod: open /var/run/secrets/kubernetes.io/serviceaccount/token: no such file or directory

",closed,False,2017-05-12 16:29:32,2018-02-22 08:16:04
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/188,https://api.github.com/repos/kubernetes/client-go/issues/188,Make out-of-cluster example work out-of-the-box,"```
$ go run examples/main/out-of-cluster/main.go
panic: stat ./config: no such file or directory
```

What if we configured

    kubeconfig := flag.String(""kubeconfig"", ""./config"", ""absolute path to the kubeconfig file"")

to be `filepath.Join(homedir, "".kube"", ""config"")`? We can easily determine homedir using HOME (linux, mac) or USERPROFILE (windows) environment variables.",closed,False,2017-05-12 16:45:41,2018-02-22 08:16:05
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/189,https://api.github.com/repos/kubernetes/client-go/issues/189,BUILD files in client-go repository,"I am wondering if Bazel BUILD files in this repository serve any particular reason (e.g. does the CI etc build/test the repository and uses Bazel for it)?

If not, having BUILD files might actually be confusing. Especially in `examples/*/` directories, users probably will click to something they don't necessarily understand. I personally don’t know Bazel and seeing that doesn’t help me with anything.

I would recommend removing BUILD files while/after mirroring if possible.",closed,False,2017-05-12 16:49:58,2018-03-12 04:54:17
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/190,https://api.github.com/repos/kubernetes/client-go/issues/190,Issue with TPRs and ugorji?,"I came across this in [examples/third-party-resources/types.go](https://github.com/kubernetes/client-go/blame/master/examples/third-party-resources/types.go#L65-L67)

```
// The code below is used only to work around a known problem with third-party
// resources and ugorji. If/when these issues are resolved, the code below
// should no longer be required.
```

Is this still valid (I see last update to this hunk was 6 months ago) What's the ugorji issue? (I assume this is https://github.com/ugorji/go/tree/master/codec package. I don't see any relevant open issues there).",closed,False,2017-05-12 17:05:31,2017-06-15 15:49:30
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/191,https://api.github.com/repos/kubernetes/client-go/issues/191,examples/third-party-resource: doesn't run successfully on the first run,"first time:
```
$ go run main.go types.go -kubeconfig=$HOME/.kube/config
CREATED: &v1beta1.ThirdPartyResource{TypeMeta:v1.TypeMeta{Kind:"""", APIVersion:""""}, ObjectMeta:v1.ObjectMeta{Name:""example.k8s.io"", GenerateName:"""", Namespace:"""", SelfLink:""/apis/extensions/v1beta1/thirdpartyresourcesexample.k8s.io"", UID:""3ce3ec19-3747-11e7-887a-42010a8a011b"", ResourceVersion:""495534"", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:63630213276, nsec:0, loc:(*time.Location)(0x29f6740)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ClusterName:""""}, Description:""An Example ThirdPartyResource"", Versions:[]v1beta1.APIVersion{v1beta1.APIVersion{Name:""v1""}}}
FROM: &v1beta1.ThirdPartyResource{TypeMeta:v1.TypeMeta{Kind:"""", APIVersion:""""}, ObjectMeta:v1.ObjectMeta{Name:""example.k8s.io"", GenerateName:"""", Namespace:"""", SelfLink:"""", UID:"""", ResourceVersion:"""", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:0, nsec:0, loc:(*time.Location)(nil)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ClusterName:""""}, Description:""An Example ThirdPartyResource"", Versions:[]v1beta1.APIVersion{v1beta1.APIVersion{Name:""v1""}}}
panic: the server could not find the requested resource

goroutine 1 [running]:
main.main()
	/Users/ahmetb/workspace/client-go-example/src/examples/third-party-resources/main.go:119 +0x72c
exit status 2
```

next time:
```
$ go run main.go types.go -kubeconfig=$HOME/.kube/config
SKIPPING: already exists &v1beta1.ThirdPartyResource{TypeMeta:v1.TypeMeta{Kind:"""", APIVersion:""""}, ObjectMeta:v1.ObjectMeta{Name:""example.k8s.io"", GenerateName:"""", Namespace:"""", SelfLink:""/apis/extensions/v1beta1/thirdpartyresourcesexample.k8s.io"", UID:""3ce3ec19-3747-11e7-887a-42010a8a011b"", ResourceVersion:""495534"", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:63630213276, nsec:0, loc:(*time.Location)(0x29f6740)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ClusterName:""""}, Description:""An Example ThirdPartyResource"", Versions:[]v1beta1.APIVersion{v1beta1.APIVersion{Name:""v1""}}}
CREATED: main.Example{TypeMeta:v1.TypeMeta{Kind:"""", APIVersion:""""}, Metadata:v1.ObjectMeta{Name:""example1"", GenerateName:"""", Namespace:""default"", SelfLink:""/apis/k8s.io/v1/namespaces/default/examples/example1"", UID:""5d472ced-3747-11e7-887a-42010a8a011b"", ResourceVersion:""495619"", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:63630213330, nsec:0, loc:(*time.Location)(0x29f6740)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ClusterName:""""}, Spec:main.ExampleSpec{Foo:""hello"", Bar:true}}
LIST: main.ExampleList{TypeMeta:v1.TypeMeta{Kind:"""", APIVersion:""""}, Metadata:v1.ListMeta{SelfLink:""/apis/k8s.io/v1/examples"", ResourceVersion:""495619""}, Items:[]main.Example{main.Example{TypeMeta:v1.TypeMeta{Kind:""Example"", APIVersion:""k8s.io/v1""}, Metadata:v1.ObjectMeta{Name:""example1"", GenerateName:"""", Namespace:""default"", SelfLink:""/apis/k8s.io/v1/namespaces/default/examples/example1"", UID:""5d472ced-3747-11e7-887a-42010a8a011b"", ResourceVersion:""495619"", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:63630213330, nsec:0, loc:(*time.Location)(0x29f6740)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ClusterName:""""}, Spec:main.ExampleSpec{Foo:""hello"", Bar:true}}}}
```

/assign",closed,False,2017-05-12 19:16:36,2017-12-26 04:53:40
client-go,gamerscomplete,https://github.com/kubernetes/client-go/issues/192,https://api.github.com/repos/kubernetes/client-go/issues/192,How to switch context,"I have searched everywhere and cannot figure out how to switch context in a configuration with multiple clusters.

Is there some way in code to be able to set the context that you want to use?",closed,False,2017-05-12 23:06:50,2018-07-17 09:29:33
client-go,newtonkishore,https://github.com/kubernetes/client-go/issues/193,https://api.github.com/repos/kubernetes/client-go/issues/193,Support for parsing K8s yaml spec into client-go data structures,"Hi,

I am trying to create K8s cluster with spec coming from yaml files. I had to write Yaml equivalent of the same datastructures to convert the spec from yaml to go data structures to start the cluster.

 The Kubernetes/client-go data structures are tuned to Json Parsing, can we just add ""`yaml:""""` "" support to client-go datastructures?

Or is there a better way to do this?

Thanks.",closed,False,2017-05-14 21:57:36,2019-01-06 01:58:30
client-go,andrejvanderzee,https://github.com/kubernetes/client-go/issues/194,https://api.github.com/repos/kubernetes/client-go/issues/194,Unit testing: fake.NewSimpleClientset(obj) does not work as expected,"In the unit test below I would expect to find v1svc in the fake clientset. But, I get the error: `Service ""push"" not found`. Maybe I am misunderstanding something, but should fake.NewSimpleClientset(obj) not initialize the clientset with the obj? 

```
package main

import (
	""testing""

	_ ""k8s.io/client-go/kubernetes""
	""k8s.io/client-go/kubernetes/fake""
	""k8s.io/client-go/pkg/api""
	""k8s.io/client-go/pkg/api/errors""
)

const yml = `
apiVersion: v1
kind: Service
metadata:
  name: push
  namespace: default
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    name: push
`

func TestSomething(t *testing.T) {

	d := api.Codecs.UniversalDecoder()
	obj, _, err := d.Decode([]byte(yml), nil, nil)
	if err != nil {
		t.Fatalf(""could not decode yml: %s"", err)
	}

	clientSet := fake.NewSimpleClientset(obj)
	_, err = clientSet.Core().Services(api.NamespaceDefault).Get(""push"")
	if err != nil {
		if errors.IsNotFound(err) {
			t.Error(err) // Service ""push"" not found
		} else {
			t.Errorf(""failed to get service from apiserver: %s"", err)
		}
	}
}
```",closed,False,2017-05-15 11:32:31,2017-06-01 21:50:25
client-go,ahmetb,https://github.com/kubernetes/client-go/pull/195,https://api.github.com/repos/kubernetes/client-go/issues/195,Add travis build status & godoc badges to README,Signed-off-by: Ahmet Alp Balkan <ahmetb@google.com>,closed,True,2017-05-17 18:26:42,2017-05-22 17:54:14
client-go,andrejvanderzee,https://github.com/kubernetes/client-go/issues/196,https://api.github.com/repos/kubernetes/client-go/issues/196,(&rest.Request{}).Stream() segfaults,"The code below segfaults. It would be more convenient to return an error instead. This happens on version 2.0.0 and 3.0.0-beta.0.

```
package main

import (
	""k8s.io/client-go/rest""
)

func main() {
	req := &rest.Request{}
	req.Stream()
}
```",closed,False,2017-05-18 14:53:35,2018-10-31 01:18:24
client-go,medyagh,https://github.com/kubernetes/client-go/issues/197,https://api.github.com/repos/kubernetes/client-go/issues/197,segmentation violation code when I run it for minikube (works fine for real kubernetes clusters),"When I run this code for a real kubernetes cluster it works fine,  but when I run it for minkube context I get this error:

```
panic: runtime error: invalid memory address or nil pointer dereference
signal SIGSEGV: segmentation violation code=0x1 addr=0x30 pc=0x126204b]
```

To make sure it is not related to kuberentes version, I made my minikube to start with same version as my kuberentes (1.5.1)

here are my kubectl version
```
Client Version: version.Info{Major:""1"", Minor:""5"", GitVersion:""v1.5.1"", GitCommit:""82450d03cb057bab0950214ef122b67c83fb11df"", GitTreeState:""clean"", BuildDate:""2016-12-14T00:57:05Z"", GoVersion:""go1.7.4"", Compiler:""gc"", Platform:""darwin/amd64""}
Server Version: version.Info{Major:""1"", Minor:""5"", GitVersion:""v1.5.1"", GitCommit:""82450d03cb057bab0950214ef122b67c83fb11df"", GitTreeState:""clean"", BuildDate:""1970-01-01T00:00:00Z"", GoVersion:""go1.7.1"", Compiler:""gc"", Platform:""linux/amd64""}
```
Here is part of the code that throws error:
```
	pods, err := Clientset.CoreV1().Pods(lib.Cfg.Namespace).List(v1.ListOptions{})
	if err != nil {
		lib.Log.Error(""error:"", err)
		panic(err.Error())
	}
```

and here is how I can get my kubeconfig and clientset

```
	loadingRules := clientcmd.NewDefaultClientConfigLoadingRules()
	configOverrides := &clientcmd.ConfigOverrides{}
	kubeConfig := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(loadingRules, configOverrides)
	config, err := kubeConfig.ClientConfig()
	if err != nil {
		return kubernetes.Clientset{}, errors.New(""Failed loading client config"")
	}
	clientset, err := kubernetes.NewForConfig(config)

```


another information that might be useful, I run my code in a docker container and I mount the .kube/config to the container (which works for real clusters but not for minikube)",closed,False,2017-05-20 23:33:22,2017-06-01 21:20:21
client-go,yadzhang,https://github.com/kubernetes/client-go/issues/198,https://api.github.com/repos/kubernetes/client-go/issues/198,Secret Get() function return the secret data after decode?,"I created a secret, with data password:123456, username:hello, after base64 encode, they are stored in k8s like below,
```
apiVersion: v1
data:
  password: MTIzNDU2
  username: aGVsbG8=
kind: Secret
metadata:
  creationTimestamp: 2017-05-23T08:00:26Z
  name: test-secret
  namespace: default
  resourceVersion: ""1731624""
  selfLink: /api/v1/namespaces/default/secrets/test-secret
  uid: e197a5b0-3f8d-11e7-b5ab-0800278fe974
type: Opaque
```
But when I want to get secret like below:
```
res, err:= k8sClient.Core().Secrets(""default"").Get(""test-secret"")
fmt.Println(string(res.Data[""username""]))
```
The result is Data[""username""] is ""hello"" not ""aGVsbG8"", It is very strange. I want to get the data after base64 encoded, not clear text. I make some test, and feel it is because 
```
err = c.client.Get().
           Namespace(c.ns).
	   Resource(""secrets"").
           Name(name).
           Do().
          Into(result)
```
`Into` func make a translation when writing byte stream into struct Secret. 
Is it a bug or just should be like that? My client-go is version 1.4, and version 3.0 is also.
",closed,False,2017-05-24 02:15:27,2017-05-27 02:21:20
client-go,debianmaster,https://github.com/kubernetes/client-go/issues/199,https://api.github.com/repos/kubernetes/client-go/issues/199,how can i make customer controller watch for events forever?,"In this example, a custom controller is created but it exits after listing the tpr's
https://github.com/kubernetes/client-go/blob/master/examples/third-party-resources/main.go

how can make this run forever watching for updates on TPR's?",closed,False,2017-05-26 00:28:55,2017-06-14 18:11:55
client-go,ash2k,https://github.com/kubernetes/client-go/issues/200,https://api.github.com/repos/kubernetes/client-go/issues/200,CachedDiscoveryInterface has no implementations,"I'm trying to use `RESTMapper` interface and to get an instance of it I'm trying to construct a `DeferredDiscoveryRESTMapper` using the constructor `NewDeferredDiscoveryRESTMapper()`. That constructor function wants `CachedDiscoveryInterface` but there are no implementations available in client-go repository.
The only implementation is `CachedDiscoveryClient` in kubectl.
I guess this is a feature request to add an implementation? Or how should I proceed?

p.s. I'll write a dummy impl for now to work this issue around.",closed,False,2017-05-28 08:09:46,2018-02-23 23:54:51
client-go,lth2015,https://github.com/kubernetes/client-go/issues/201,https://api.github.com/repos/kubernetes/client-go/issues/201,Is there a client-go version compatible with kubernetes 1.2 api?,"I want to use client-go to rewrite my k8s client api, but our team is using kubernetes 1.2 version in product environment, how can I do?

Thank you very much!",closed,False,2017-05-30 05:42:23,2017-12-26 05:03:04
client-go,wongma7,https://github.com/kubernetes/client-go/issues/202,https://api.github.com/repos/kubernetes/client-go/issues/202,Versioned helpers (pkg/api/v1/helpers) are missing ,"pkg/api/v1/helpers.go was removed but pkg/api/v1/helpers/helpers.go was not added in its place. I noticed in staging/copy.sh the line `mkcp ""pkg/api/helper"" ""pkg/api""` was explicitly added: https://github.com/kubernetes/kubernetes/pull/44361/files#diff-79c7edfbbe6b22642e05ac8c9cd431e7. Why did it need to be added and do we need to add  `mkcp ""pkg/api/v1/helper"" ""pkg/api/v1""`too?

https://github.com/kubernetes/kubernetes/pull/44361
https://github.com/kubernetes/client-go/commit/bb2e2ad83cfeab769ec660af19256ba6b0f2c6ef",closed,False,2017-05-31 17:08:05,2017-06-30 18:48:02
client-go,caesarxuchao,https://github.com/kubernetes/client-go/issues/203,https://api.github.com/repos/kubernetes/client-go/issues/203,client-go hasn't been synced for more than a week,"The publishing robot has bugs.

I'm tracking the fix under https://github.com/kubernetes/test-infra/issues/2847, because the robot code is in the test-infra repo. I'll spend more time on the bot after the code freeze.",closed,False,2017-06-02 00:03:03,2017-07-04 10:05:04
client-go,hongchaodeng,https://github.com/kubernetes/client-go/issues/204,https://api.github.com/repos/kubernetes/client-go/issues/204,API for remote command execution,"In shell, you can use:
- `kubectl port-forward` to send requests to a pod's endpoint
- `kubectl exec` to execute commands in a pod

However, these are not obvious, easy to achieve in client API.
It would be great to provide easy to use API for such functionality.",closed,False,2017-06-02 20:43:33,2018-03-31 20:59:52
client-go,thkoch2001,https://github.com/kubernetes/client-go/issues/205,https://api.github.com/repos/kubernetes/client-go/issues/205,how to build client-go,"I am a newbie to Go. I cloned the client-go repo. Now what should I type into my shell to make this thing compile?

Actually I want to try to compile client-go into a shared C library as explained here:
https://medium.com/learning-the-go-programming-language/calling-go-functions-from-other-languages-4c7d8bcc69bf

But for that of course I first need to understand how to build it the normal way.",closed,False,2017-06-09 09:01:15,2017-06-12 12:29:38
client-go,thkoch2001,https://github.com/kubernetes/client-go/issues/206,https://api.github.com/repos/kubernetes/client-go/issues/206,release client-go as a shared C library,"This article describes that it is possible to compile Go code as a shared C library:
https://medium.com/learning-the-go-programming-language/calling-go-functions-from-other-languages-4c7d8bcc69bf

If it were possible to build and release client-go this way, then it should be possible to easily use it from all kinds of languages. ",closed,False,2017-06-09 11:58:59,2017-06-12 12:38:32
client-go,zhangtbj,https://github.com/kubernetes/client-go/issues/207,https://api.github.com/repos/kubernetes/client-go/issues/207,Some packages are missining in k8s.io/client-go/,"Hi,

I am using k8s client-go and I imported some of them:
""k8s.io/client-go/pkg/api/errors""
""k8s.io/client-go/pkg/api/resource""
""k8s.io/client-go/pkg/api/unversioned""
""k8s.io/client-go/pkg/runtime""

But I found they are missing now:

https://github.com/kubernetes/client-go/tree/master/pkg/api

Can you tell me where are they and why they are missed?

If possible, is there any solution that I can use them again?

Thanks!",closed,False,2017-06-12 13:30:40,2018-02-25 12:30:52
client-go,gitzl,https://github.com/kubernetes/client-go/issues/208,https://api.github.com/repos/kubernetes/client-go/issues/208,cannot create namespaces,"use clientSet cannot create namespace.
the error:
  XTRA *errors.StatusError=User ""system:node:xxx"" cannot create namespaces at the cluster scope. (post namespaces))?[",closed,False,2017-06-13 02:41:37,2018-02-25 14:32:49
client-go,mailtokun,https://github.com/kubernetes/client-go/issues/209,https://api.github.com/repos/kubernetes/client-go/issues/209,Support cadvisor APIs,Currently the client doesn't seem to support the cadvisor api to get usages. The client should support those APIs.,closed,False,2017-06-13 05:58:48,2018-03-01 03:56:49
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/210,https://api.github.com/repos/kubernetes/client-go/issues/210,bump go version to 1.8.1 for travis,@lavalamp @mbohlool fyi,closed,True,2017-06-13 22:57:15,2017-06-13 23:02:11
client-go,databus23,https://github.com/kubernetes/client-go/issues/211,https://api.github.com/repos/kubernetes/client-go/issues/211,Fallback to in-cluster config not working anymore.,"Up until now we used this snippet to initialise our clients to support cluster-internal and external configuration:
```
	rules := clientcmd.NewDefaultClientConfigLoadingRules()
	overrides := &clientcmd.ConfigOverrides{}

	if options.KubeConfig != """" {
		rules.ExplicitPath = options.KubeConfig
	}

	config, err := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(rules, overrides).ClientConfig()
	if err != nil {
		glog.Fatalf(""Couldn't get Kubernetes default config: %s"", err)
	}
```

This does not work anymore with 3.0.0beta0 the error I'm getting is:
`Couldn't get Kubernetes default config: invalid configuration: default cluster has no server defined`
Which is generated [here](https://github.com/kubernetes/client-go/blob/v3.0.0-beta.0/tools/clientcmd/validation.go#L176).
The problem is that it skips over [this](https://github.com/kubernetes/client-go/blob/v3.0.0-beta.0/tools/clientcmd/validation.go#L170) `reflect.DeepEqual` comparison
Printing the two `Cluster` structs I get this:
```
api.Cluster{LocationOfOrigin:"""", Server:"""", APIVersion:"""", InsecureSkipTLSVerify:false, CertificateAuthority:"""", CertificateAuthorityData:[]uint8(nil), Extensions:map[string]runtime.Object(nil)} !=
api.Cluster{LocationOfOrigin:"""", Server:"""", APIVersion:"""", InsecureSkipTLSVerify:false, CertificateAuthority:"""", CertificateAuthorityData:[]uint8(nil), Extensions:map[string]runtime.Object{}}
```

Seems to me like there was a subtle change in how these empty struct are created.",closed,False,2017-06-16 08:55:11,2017-06-16 09:10:55
client-go,nikhita,https://github.com/kubernetes/client-go/pull/212,https://api.github.com/repos/kubernetes/client-go/issues/212,README: fix script to update staging area,"Running `staging/copy.sh` echoes `Do not run this script directly, but via hack/update-staging-client-go.sh.` as mentioned here: https://github.com/kubernetes/kubernetes/blob/master/staging/copy.sh#L49.

We can directly point to `hack/update-staging-client-go.sh`. ",closed,True,2017-06-16 23:38:41,2017-06-29 19:05:26
client-go,mailtokun,https://github.com/kubernetes/client-go/issues/213,https://api.github.com/repos/kubernetes/client-go/issues/213,oidc cache key is uniqueness,"I have more then 3 kubernetes clusters. 
Below is my code, 
```
package main

import (
	""k8s.io/client-go/tools/clientcmd""
	""k8s.io/client-go/kubernetes""
	_ ""k8s.io/client-go/plugin/pkg/client/auth/oidc""
	meta ""k8s.io/apimachinery/pkg/apis/meta/v1""
	""fmt""
)

func  GetNodes(configPath string)  {
	fmt.Println(""-------------------""+configPath+""-------------------------"")
	config, err := clientcmd.BuildConfigFromFlags("""", configPath)
	fmt.Println(err)
	clientSet, err := kubernetes.NewForConfig(config)
	fmt.Println(err)
	nodes ,err := clientSet.CoreV1().Nodes().List(meta.ListOptions{})
	fmt.Println(err)
	fmt.Println(len(nodes.Items))
}
func  main ()  {
	GetNodes(""/Users/administrator/Downloads/cluster1/config"")
	GetNodes(""/Users/administrator/Downloads/cluster2/config"")
	GetNodes(""/Users/administrator/Downloads/cluster3/config"")
}
```


Here is output:
```
-------------------/Users/administrator/Downloads/cluster1/config-------------------------
<nil>
<nil>
<nil>
1
-------------------/Users/administrator/Downloads/cluster2/config-------------------------
<nil>
<nil>
<nil>
1
-------------------/Users/administrator/Downloads/cluster3/config-------------------------
<nil>
<nil>
Forbidden: ""/api/v1/nodes"" (get nodes)
0
```




If I change the cluster order, still work for first two clusters. The rest cluster doesn't work.
```
package main

import (
	""k8s.io/client-go/tools/clientcmd""
	""k8s.io/client-go/kubernetes""
	_ ""k8s.io/client-go/plugin/pkg/client/auth/oidc""
	meta ""k8s.io/apimachinery/pkg/apis/meta/v1""
	""fmt""
)

func  GetNodes(configPath string)  {
	fmt.Println(""-------------------""+configPath+""-------------------------"")
	config, err := clientcmd.BuildConfigFromFlags("""", configPath)
	fmt.Println(err)
	clientSet, err := kubernetes.NewForConfig(config)
	fmt.Println(err)
	nodes ,err := clientSet.CoreV1().Nodes().List(meta.ListOptions{})
	fmt.Println(err)
	fmt.Println(len(nodes.Items))
}
func  main ()  {
	GetNodes(""/Users/administrator/Downloads/cluster3/config"")
	GetNodes(""/Users/administrator/Downloads/cluster2/config"")
	GetNodes(""/Users/administrator/Downloads/cluster1/config"")
}
```


Here is output:
```
-------------------/Users/administrator/Downloads/cluster3/config-------------------------
<nil>
<nil>
<nil>
1
-------------------/Users/administrator/Downloads/cluster2/config-------------------------
<nil>
<nil>
<nil>
1
-------------------/Users/administrator/Downloads/cluster1/config-------------------------
<nil>
<nil>
Forbidden: ""/api/v1/nodes"" (get nodes)
0
```",closed,False,2017-06-17 11:29:49,2018-08-04 00:35:29
client-go,vinayakshnd,https://github.com/kubernetes/client-go/issues/214,https://api.github.com/repos/kubernetes/client-go/issues/214,No notifications from IndexerInformer for namespace resource,"Hi,

I want to get notifications when a new namespace is created/updated. For that, I am creating `ListerWatcher` and creating `IndexerInformer` from it. I have registered handler functions on each of the events. I am not getting any notifications when a new namespace is created. 

My code is as follows:

```   
   namespaceListWatcher := cache.NewListWatchFromClient(clientset.Core().RESTClient(), ""namespaces"", """", fields.Everything())

    namespaceIndexer, namespaceInformer := cache.NewIndexerInformer(namespaceListWatcher, &v1.Namespace{}, 0, cache.ResourceEventHandlerFuncs{

		AddFunc: func(obj interface{}) {
			key, err := cache.MetaNamespaceKeyFunc(obj)
			fmt.Println(""Adding Namespace in workqueue:"",key)
			if err == nil {

				queue.Add(&Event{
					resourceKey:  key,
					eventType:    TYPE_ADDED,
					resourceType: RESOURCE_TYPE_NAMESPACE,
				})
			}
		},
		UpdateFunc: func(old interface{}, new interface{}) {
			key, err := cache.MetaNamespaceKeyFunc(new)
			if err == nil {
				queue.Add(&Event{
					resourceKey:  key,
					eventType:    TYPE_UPDATED,
					resourceType: RESOURCE_TYPE_NAMESPACE,
				})
			}
		},
		DeleteFunc: func(obj interface{}) {
			// IndexerInformer uses a delta queue, therefore for deletes we have to use this
			// key function.
			key, err := cache.DeletionHandlingMetaNamespaceKeyFunc(obj)
			if err == nil {
				queue.Add(&Event{
					resourceKey:  key,
					eventType:    TYPE_DELETED,
					resourceType: RESOURCE_TYPE_NAMESPACE,
				})
			}
		},
	}, cache.Indexers{})

```

Please let me know if I am doing anything wrong here or if there is better way to do that.

Thanks in advance.
Vinayak.",closed,False,2017-06-20 09:17:49,2018-02-27 01:06:49
client-go,diazjf,https://github.com/kubernetes/client-go/pull/215,https://api.github.com/repos/kubernetes/client-go/issues/215,Update Links for How to Use It,"Updates the Links for the ""How to Use It"" Section of the Readme.
Currently the links are sending the user to a 404 Package due to
changes of the documentation path. Also now we show docs rather
than the main.go.
",closed,True,2017-06-20 20:44:01,2017-07-24 19:38:08
client-go,rdtr,https://github.com/kubernetes/client-go/issues/216,https://api.github.com/repos/kubernetes/client-go/issues/216,"[question] can we emulate ""kubectl apply"" using client-go?","Hi, 

I use client-go and am writing a simple auto deployment code which detects a git push, loads all yaml files which is either newly added or updated then call `Update` or `Create` for each yaml file from within a pod in the cluster (`Delete` is out of my scope at least initially).

At first it looked good but shortly I noticed that `Update` replaces a whole yaml definition, so some property will be missing after the update such as `annoations.kubectl.kubernetes.io/last-applied-configuration`. Also I cannot update service without getting `resourceVersion` and `clusterIP` from the existing live configuration in advance (these properties are not written in a yaml file).

Our team would still often use `kubectl`, so I want to make sure that updates from this auto deployment pod doesn't make a conflict with manual `kubectl apply` command.

I can either GET existing live configuration and merge them with a yaml file I want to apply, or populate a merge request for `Patch`, but it is not a simple implementation and also reinventing from scratch what kubectl does.
I think then it's easier to install kubectl in a Docker container and run `kubectl apply` from Go code using exec package, but it's little messy as well.

Is it currently possible to achieve a similar effect as `kubectl apply -f xxx.yaml` using client-go in a simpler way than I described above?",closed,False,2017-06-21 05:28:10,2017-06-23 00:40:12
client-go,aksgithub,https://github.com/kubernetes/client-go/issues/217,https://api.github.com/repos/kubernetes/client-go/issues/217,Looking for an example of creating a namespace and pod within a namespace.,,closed,False,2017-06-23 00:33:28,2018-02-27 21:26:50
client-go,iordaniordanov,https://github.com/kubernetes/client-go/issues/218,https://api.github.com/repos/kubernetes/client-go/issues/218,Cannot access *ObjectReference property,"Here is the case. I'm listing all Endpoints and trying to map the info I get form them. I'm stuck at the PodName, which should be in the ```Name``` property of ```TargetRef```. [Docs](https://godoc.org/k8s.io/client-go/pkg/api/v1#EndpointAddress)
Some code:
This works
```
endPoints, _ := clientset.CoreV1().Endpoints("""").List(metav1.ListOptions{})
        for _, v := range endPoints.Items {
                fmt.Println(v.Name)
                for _, e := range v.Subsets {
                        for _, a := range e.Addresses {
                                fmt.Println(""Address"")
                                fmt.Println(a.IP)
                                fmt.Println(""==================="")
                                fmt.Println(""Pod"")
                                fmt.Println(a.TargetRef)
                                fmt.Println(""==================="")}

                        for _, p := range e.Ports {
                                fmt.Println(""Port"")
                                fmt.Println(p.Port)
                                fmt.Println(""=============="")}
                }}
Result:

Pod
&ObjectReference{Kind:Pod,Namespace:default,Name:my-nginx-858393261-cwwp6,UID:<UID>,APIVersion:,ResourceVersion:127010,FieldPath:,}

```
But changing to this does not
```
fmt.Println(a.TargetRef.Name)

Result:
Pod
panic: runtime error: invalid memory address or nil pointer dereference
[signal SIGSEGV: segmentation violation code=0x1 addr=0x0 pc=0x1313d8e]

goroutine 1 [running]:
main.notify(0xc42021f3a0, 0xd, 0xc420655f50)
	/home/jordan/cloud-apps/cloud-apps/k8s/k8s-monitor/monitor/main.go:173 +0x5fe
main.main()
	/home/jordan/cloud-apps/cloud-apps/k8s/k8s-monitor/monitor/main.go:249 +0x13f

```",closed,False,2017-06-23 09:35:14,2017-07-13 08:55:26
client-go,tomdee,https://github.com/kubernetes/client-go/pull/219,https://api.github.com/repos/kubernetes/client-go/issues/219,Fix links to examples in README.md,,closed,True,2017-06-23 20:08:03,2017-08-18 01:26:26
client-go,qiujian16,https://github.com/kubernetes/client-go/issues/220,https://api.github.com/repos/kubernetes/client-go/issues/220,RawConfig and ClientConfig method in clientcmd.DirectClientConfig are not consistent,"I might be wrong, but it seems to me that ```RawConfig``` does not consider ```overrides``` while ```ClientConfig``` does.
https://github.com/kubernetes/client-go/blob/master/tools/clientcmd/client_config.go#L104

So when I create a ```DirectClientConfig``` with ```&clientcmd.ConfigOverrides{ClusterInfo: api.Cluster{Server: masterUrl}}}``` the method ```ClientConfig()``` return the correct url, but ```RawConfig()``` does not.",closed,False,2017-06-26 07:54:07,2018-02-28 14:43:50
client-go,xingzhou,https://github.com/kubernetes/client-go/pull/221,https://api.github.com/repos/kubernetes/client-go/issues/221,Update the code copy script name in README,"staging/copy.sh can no longer be run directly under
the k8s main repo, update the script to
./hack/update-staging-client-go.sh
in README

This is an update of README of the repo.
",closed,True,2017-06-27 08:14:16,2017-06-30 01:18:13
client-go,shyamjvs,https://github.com/kubernetes/client-go/issues/222,https://api.github.com/repos/kubernetes/client-go/issues/222,Client should wait before retrying PATCH/PUT/POSTs in case of http 429 from server,"We figured recently while running 4000-node cluster tests that the apiserver was saturated with requests and returning 429s, but clients were still sending requests.
In particular, kubelets and NPDs on the nodes were trying to continually retry PATCH/PUT requests on failures (leading to thousands of qps of 429s), even though they're designed to send updates once every one minute. So this is most likely an issue with client-go.

Following from discussion in https://github.com/kubernetes/node-problem-detector/issues/124

cc @Random-Liu @gmarek @kubernetes/sig-scalability-misc",closed,False,2017-06-27 18:49:44,2019-01-31 16:58:49
client-go,stevesloka,https://github.com/kubernetes/client-go/issues/223,https://api.github.com/repos/kubernetes/client-go/issues/223,k8s 1.6 cluster,"I'm trying to use client-go with a 1.6 cluster. I'm seeing times when I delete my deployments or statefulsets, the pods will not delete but the underlying objects go away. 

I was thinking maybe it's a problem with my version (using v2.0.0) currently. When I check out v3.0.0-beta.0, then do a `godep restore ./...` then build my app, I get the following errors:

Is is tag broken? Is there a version I should be using other than 2.0.0 with a 1.6 cluster? 

```
../../kubernetes/client-go/pkg/api/meta/interfaces.go:20:2: cannot find package ""k8s.io/client-go/pkg/api/meta/metatypes"" in any of:
	/Users/slokas/godev/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/pkg/api/meta/metatypes (vendor tree)
	/usr/local/Cellar/go/1.8/libexec/src/k8s.io/client-go/pkg/api/meta/metatypes (from $GOROOT)
	/Users/slokas/godev/src/k8s.io/client-go/pkg/api/meta/metatypes (from $GOPATH)
../../kubernetes/client-go/pkg/api/meta/errors.go:22:2: cannot find package ""k8s.io/client-go/pkg/api/unversioned"" in any of:
	/Users/slokas/godev/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/pkg/api/unversioned (vendor tree)
	/usr/local/Cellar/go/1.8/libexec/src/k8s.io/client-go/pkg/api/unversioned (from $GOROOT)
	/Users/slokas/godev/src/k8s.io/client-go/pkg/api/unversioned (from $GOPATH)
../../kubernetes/client-go/pkg/api/unversioned/zz_generated.deepcopy.go:24:2: cannot find package ""k8s.io/client-go/pkg/conversion"" in any of:
	/Users/slokas/godev/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/pkg/conversion (vendor tree)
	/usr/local/Cellar/go/1.8/libexec/src/k8s.io/client-go/pkg/conversion (from $GOROOT)
	/Users/slokas/godev/src/k8s.io/client-go/pkg/conversion (from $GOPATH)
../../kubernetes/client-go/pkg/api/unversioned/time.go:23:2: cannot find package ""k8s.io/client-go/pkg/genericapiserver/openapi/common"" in any of:
	/Users/slokas/godev/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/pkg/genericapiserver/openapi/common (vendor tree)
	/usr/local/Cellar/go/1.8/libexec/src/k8s.io/client-go/pkg/genericapiserver/openapi/common (from $GOROOT)
	/Users/slokas/godev/src/k8s.io/client-go/pkg/genericapiserver/openapi/common (from $GOPATH)
../../kubernetes/client-go/pkg/api/unversioned/helpers.go:22:2: cannot find package ""k8s.io/client-go/pkg/labels"" in any of:
	/Users/slokas/godev/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/pkg/labels (vendor tree)
	/usr/local/Cellar/go/1.8/libexec/src/k8s.io/client-go/pkg/labels (from $GOROOT)
	/Users/slokas/godev/src/k8s.io/client-go/pkg/labels (from $GOPATH)
../../kubernetes/client-go/pkg/api/meta/help.go:24:2: cannot find package ""k8s.io/client-go/pkg/runtime"" in any of:
	/Users/slokas/godev/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/pkg/runtime (vendor tree)
	/usr/local/Cellar/go/1.8/libexec/src/k8s.io/client-go/pkg/runtime (from $GOROOT)
	/Users/slokas/godev/src/k8s.io/client-go/pkg/runtime (from $GOPATH)
../../kubernetes/client-go/pkg/api/unversioned/helpers.go:23:2: cannot find package ""k8s.io/client-go/pkg/selection"" in any of:
	/Users/slokas/godev/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/pkg/selection (vendor tree)
	/usr/local/Cellar/go/1.8/libexec/src/k8s.io/client-go/pkg/selection (from $GOROOT)
	/Users/slokas/godev/src/k8s.io/client-go/pkg/selection (from $GOPATH)
../../kubernetes/client-go/pkg/api/meta/interfaces.go:23:2: cannot find package ""k8s.io/client-go/pkg/types"" in any of:
	/Users/slokas/godev/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/pkg/types (vendor tree)
	/usr/local/Cellar/go/1.8/libexec/src/k8s.io/client-go/pkg/types (from $GOROOT)
	/Users/slokas/godev/src/k8s.io/client-go/pkg/types (from $GOPATH)
../../kubernetes/client-go/pkg/api/meta/firsthit_restmapper.go:23:2: cannot find package ""k8s.io/client-go/pkg/util/errors"" in any of:
	/Users/slokas/godev/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/pkg/util/errors (vendor tree)
	/usr/local/Cellar/go/1.8/libexec/src/k8s.io/client-go/pkg/util/errors (from $GOROOT)
	/Users/slokas/godev/src/k8s.io/client-go/pkg/util/errors (from $GOPATH)
../../kubernetes/client-go/pkg/api/unversioned/helpers.go:24:2: cannot find package ""k8s.io/client-go/pkg/util/sets"" in any of:
	/Users/slokas/godev/src/github.com/kubernetes/client-go/vendor/k8s.io/client-go/pkg/util/sets (vendor tree)
	/usr/local/Cellar/go/1.8/libexec/src/k8s.io/client-go/pkg/util/sets (from $GOROOT)
	/Users/slokas/godev/src/k8s.io/client-go/pkg/util/sets (from $GOPATH)
make: *** [build] Error 1

```",closed,False,2017-06-27 19:31:58,2017-07-05 15:07:19
client-go,drigz,https://github.com/kubernetes/client-go/issues/224,https://api.github.com/repos/kubernetes/client-go/issues/224,Broken links in README.md,"The two example links here are broken: https://github.com/kubernetes/client-go#how-to-use-it

I tried to fix it but this project doesn't accept PRs and I couldn't easily find the relevant file in the kubernetes repo.",closed,False,2017-06-28 09:47:29,2017-07-10 16:44:25
client-go,erikbgithub,https://github.com/kubernetes/client-go/pull/225,https://api.github.com/repos/kubernetes/client-go/issues/225,Making the intended meaning more obvious,"Just a suggestion. And maybe you want to go throug hall your docs and look for that. I don't think it's the only place.
",closed,True,2017-06-28 13:48:42,2017-08-18 01:25:19
client-go,rkamudhan,https://github.com/kubernetes/client-go/issues/226,https://api.github.com/repos/kubernetes/client-go/issues/226,go get k8s.io/client-go/kubernetes is failing,"New update causing failure in for the  `go get k8s.io/client-go/kubernetes`

```
# go get k8s.io/client-go/kubernetes
package k8s.io/api/core/v1: unrecognized import path ""k8s.io/api/core/v1"" (parse https://k8s.io/api/core/v1?go-get=1: no go-import meta tags)
package k8s.io/api/admissionregistration/v1alpha1: unrecognized import path ""k8s.io/api/admissionregistration/v1alpha1"" (parse https://k8s.io/api/admissionregistration/v1alpha1?go-get=1: no go-import meta tags)
package k8s.io/api/apps/v1beta1: unrecognized import path ""k8s.io/api/apps/v1beta1"" (parse https://k8s.io/api/apps/v1beta1?go-get=1: no go-import meta tags)
package k8s.io/api/authentication/v1: unrecognized import path ""k8s.io/api/authentication/v1"" (parse https://k8s.io/api/authentication/v1?go-get=1: no go-import meta tags)
package k8s.io/api/authentication/v1beta1: unrecognized import path ""k8s.io/api/authentication/v1beta1"" (parse https://k8s.io/api/authentication/v1beta1?go-get=1: no go-import meta tags)
package k8s.io/api/authorization/v1: unrecognized import path ""k8s.io/api/authorization/v1"" (parse https://k8s.io/api/authorization/v1?go-get=1: no go-import meta tags)
package k8s.io/api/authorization/v1beta1: unrecognized import path ""k8s.io/api/authorization/v1beta1"" (parse https://k8s.io/api/authorization/v1beta1?go-get=1: no go-import meta tags)
package k8s.io/api/autoscaling/v1: unrecognized import path ""k8s.io/api/autoscaling/v1"" (parse https://k8s.io/api/autoscaling/v1?go-get=1: no go-import meta tags)
package k8s.io/api/autoscaling/v2alpha1: unrecognized import path ""k8s.io/api/autoscaling/v2alpha1"" (parse https://k8s.io/api/autoscaling/v2alpha1?go-get=1: no go-import meta tags)
package k8s.io/api/batch/v1: unrecognized import path ""k8s.io/api/batch/v1"" (parse https://k8s.io/api/batch/v1?go-get=1: no go-import meta tags)
package k8s.io/api/batch/v2alpha1: unrecognized import path ""k8s.io/api/batch/v2alpha1"" (parse https://k8s.io/api/batch/v2alpha1?go-get=1: no go-import meta tags)
package k8s.io/api/certificates/v1beta1: unrecognized import path ""k8s.io/api/certificates/v1beta1"" (parse https://k8s.io/api/certificates/v1beta1?go-get=1: no go-import meta tags)
package k8s.io/api/extensions/v1beta1: unrecognized import path ""k8s.io/api/extensions/v1beta1"" (parse https://k8s.io/api/extensions/v1beta1?go-get=1: no go-import meta tags)
package k8s.io/api/networking/v1: unrecognized import path ""k8s.io/api/networking/v1"" (parse https://k8s.io/api/networking/v1?go-get=1: no go-import meta tags)
package k8s.io/api/policy/v1beta1: unrecognized import path ""k8s.io/api/policy/v1beta1"" (parse https://k8s.io/api/policy/v1beta1?go-get=1: no go-import meta tags)
package k8s.io/api/rbac/v1alpha1: unrecognized import path ""k8s.io/api/rbac/v1alpha1"" (parse https://k8s.io/api/rbac/v1alpha1?go-get=1: no go-import meta tags)
package k8s.io/api/rbac/v1beta1: unrecognized import path ""k8s.io/api/rbac/v1beta1"" (parse https://k8s.io/api/rbac/v1beta1?go-get=1: no go-import meta tags)
package k8s.io/api/settings/v1alpha1: unrecognized import path ""k8s.io/api/settings/v1alpha1"" (parse https://k8s.io/api/settings/v1alpha1?go-get=1: no go-import meta tags)
package k8s.io/api/storage/v1: unrecognized import path ""k8s.io/api/storage/v1"" (parse https://k8s.io/api/storage/v1?go-get=1: no go-import meta tags)
package k8s.io/api/storage/v1beta1: unrecognized import path ""k8s.io/api/storage/v1beta1"" (parse https://k8s.io/api/storage/v1beta1?go-get=1: no go-import meta tags```",closed,False,2017-06-28 19:11:53,2017-06-28 23:15:08
client-go,bjhaid,https://github.com/kubernetes/client-go/issues/227,https://api.github.com/repos/kubernetes/client-go/issues/227,Watch method should implement an heartbeat keepalive,"The watch methods should implement an heartbeat keep-alive to ensure the tcp connection isn't severed in environments with aggressive tcp idle timeouts, this will also help fast fail a watch to a dead apiserver.",closed,False,2017-06-28 19:35:49,2017-06-28 20:04:06
client-go,ffledgling,https://github.com/kubernetes/client-go/pull/228,https://api.github.com/repos/kubernetes/client-go/issues/228,Fix broken links in README.md,"Adding this as a PR because the staging/src/ in `kubernetes/kubernetes` doesn't seem to have the README itself.

Patch fixes links to in-cluster/out-of-cluster exmaples point to
non-existent paths.
",closed,True,2017-06-29 10:20:42,2017-06-29 11:07:17
client-go,rmohr,https://github.com/kubernetes/client-go/issues/229,https://api.github.com/repos/kubernetes/client-go/issues/229,Allow setting the KeyFunc on SharedInformers,"

I would want to replace the `DeletionHandlingMetaNamespaceKeyFunc` with my own UUID based key function in the `SharedIndexInformer`. It seem like right now, I would have to copy the whole shared informer into my code-base, to be able to replace it:

```golang
// NewSharedIndexInformer creates a new instance for the listwatcher.
func NewSharedIndexInformer(lw ListerWatcher, objType runtime.Object, defaultEventHandlerResyncPeriod time.Duration, indexers Indexers) SharedIndexInformer {
	realClock := &clock.RealClock{}
	sharedIndexInformer := &sharedIndexInformer{
		processor:                       &sharedProcessor{clock: realClock},
		indexer:                         NewIndexer(DeletionHandlingMetaNamespaceKeyFunc, indexers),
		listerWatcher:                   lw,
		objectType:                      objType,
		resyncCheckPeriod:               defaultEventHandlerResyncPeriod,
		defaultEventHandlerResyncPeriod: defaultEventHandlerResyncPeriod,
		cacheMutationDetector:           NewCacheMutationDetector(fmt.Sprintf(""%T"", objType)),
		clock: realClock,
	}
	return sharedIndexInformer
}
```
My use-case is the following: While in the cluster, I care about the namespace/name identity, on the node where my daemon sits, I am more interested in the change of UUIDs. If a resource on the apiserver is force-deleted and immediately recreated, I want to see the delete of the object with the old UUID and the creation of the new object. 

While  it is pretty easy to live with that, and do explicit uuid checks in the sync loop of the controller, it does not fit so well to the node-nature of things, where only the UUID matters and in my case namespaces don't have any meaning.

Having a function which allows me to set the `KeyFunc`  on the `SharedIndexerInformer` would already be sufficent for me.

Does that sound useful in general?",closed,False,2017-06-29 15:20:04,2017-07-11 08:57:55
client-go,keitwb,https://github.com/kubernetes/client-go/issues/230,https://api.github.com/repos/kubernetes/client-go/issues/230,Clarification on Object/GetObjectKind,"I'm trying to write some integration tests for an app that uses this client and I'm struggling to figure out how to create objects that implement the `Object` interface.  

https://github.com/kubernetes/client-go/blob/v2.0.0/kubernetes/typed/core/v1/pod.go#L79 passes in a `""pkg/api/v1"".Pod` to the REST client request `Body` method, and then the Body method [appears to assert that it is a `runtime.Object`](https://github.com/kubernetes/client-go/blob/v2.0.0/rest/request.go#L549).  But `v1.Pod` doesn't implement `GetObjectKind`, as my compiler is telling me when I try and use it as an Object.  How can you pass it to a client request as such?  I am somewhat new to Go so perhaps I am just ignorant of some feature of Go that allows this, but what am I missing?

I'm using the v2.0.0 release.",closed,False,2017-06-29 21:28:08,2017-06-30 03:27:55
client-go,hongchaodeng,https://github.com/kubernetes/client-go/issues/231,https://api.github.com/repos/kubernetes/client-go/issues/231,k8s 1.7 corresponding release of client-go,"k8s 1.7 is released.
When is client-go doing a release to match that?",closed,False,2017-06-30 17:50:26,2018-01-02 11:36:15
client-go,astropuffin,https://github.com/kubernetes/client-go/issues/232,https://api.github.com/repos/kubernetes/client-go/issues/232,Compile fails due to apimachinery change,"Now that client-go is using apimachinery (which I wholeheartedly appreciate), upstream changes can break compile. The current compile failure was caused by this commit:
https://github.com/kubernetes/apimachinery/commit/6c263f33a6b401d0718c5c5774b5f7ab8daa8488#diff-fb24371e396c1f62cf28521fd747ffa1

client-go depends on those deleted functions in a number of places:
pkg/apis/authentication/v1/defaults.go:24
pkg/apis/authorization/v1/defaults.go:24
pkg/apis/authentication/v1beta1/defaults.go
pkg/apis/authorization/v1beta1/defaults.go:24
pkg/apis/certificates/v1beta1/defaults.go:23
pkg/api/defaults.go:26
pkg/apis/rbac/v1beta1/defaults.go:25
pkg/apis/rbac/v1alpha1/defaults.go:25
",closed,False,2017-07-04 22:35:54,2018-02-12 08:30:57
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/233,https://api.github.com/repos/kubernetes/client-go/issues/233,V3.0.0 updates,I'll create the v3.0.0 release after this is merged.,closed,True,2017-07-05 22:57:18,2017-07-11 20:04:39
client-go,caesarxuchao,https://github.com/kubernetes/client-go/issues/234,https://api.github.com/repos/kubernetes/client-go/issues/234,client-go needs backwards compatibility test,"Client-go needs backwards compatibility test, i.e, checking if a PR changes the public interfaces of client-go. The benefits are:
 * Ensuring release-note is added if a PR has backwards incompatible changes.
 * Making breaking changes more obvious, so developers can avoid them if possible.
 * Helping determine if the major version of client-go needs to be bumped when we cut a release.

The backwards compatibility test is useful no matter if we develop client-go in the kubernetes repo or in this repo.

Special requirements:
* Need to check backwards compatibility of the underlying k8s.io repos, including k8s.io/apimachinery and k8s.io/api, because client-go user deals with their interfaces as well.

Action items:
* find existing tool that looks for breaking changes.
* alternatively write a tool using go2idl.",open,False,2017-07-06 20:37:30,2018-12-10 11:35:35
client-go,caesarxuchao,https://github.com/kubernetes/client-go/issues/235,https://api.github.com/repos/kubernetes/client-go/issues/235,[RFC] Developing in client-go directly,"The goal is to develop in client-go directly, instead of developing in k8s.io/kubernetes/staging. It has several benefits:
* Increasing development velocity. @bgrant0607 mentioned k8s.io/kubernetes had hit the speed of light of developing in a single repo.
* Getting rid of the publishing robot, which is not easy to maintain.
* Getting rid of the staging area, which is not intuitive to human or golang tools.
* Backporting new API to old branches becomes possible, though probably we should solve the problem by distributing client-gen.

@lavalamp has a great writeup on the overall [plan](https://docs.google.com/document/d/1IHTBo6Ul6TtTD87u8OVXgt-NgjgNSzE5JQKlu7nWDmw/edit#heading=h.z9ny9qqwe8dq). This issue focuses on the efforts required on the client-go side.

The prerequisites of developing in client-go are:
* Developing k8s.io/api and k8s.io/apimachinery in their own repos, otherwise we might have weird cyclic dependency.
* Setting up tests that ensures k8s.io/client-go integrates with k8s.io/kubernetes.

Regarding the tests:
* We need to lean more on unit tests
  * Measure the test coverage
  * Improve the coverage
* Run integration/e2e tests with k8s.io/kubernetes master in the presubmit CI of client-go
  * Making backwards incompatible changes becomes difficult, as outline by @lavalamp in this [doc](https://docs.google.com/document/d/1IHTBo6Ul6TtTD87u8OVXgt-NgjgNSzE5JQKlu7nWDmw/edit#heading=h.z9ny9qqwe8dq).
* Integration tests with other client-go users, e.g., service-catalog (@MHBauer), kubeadm (cc @luxas).
* An idea: we can add tests that cross validate the clients in different languages, e.g., between client-go and client-python. Specifically, we define a set of standard REST operations and execute them with client-go and client-python respectively, then compare if client-go and client-python send the same request. @mbohlool @jpbetz might be interested.
  * Might need a fake apiserver if the REST operations involves server interaction
  * Does this require client-python and client-go to be developed at the same pace?

Some open questions:
* Are there other tests we should add?
* How can we involve the community?

cc @lavalamp @ericchiang @hongchaodeng 

",closed,False,2017-07-06 21:28:49,2018-03-01 10:02:51
client-go,tamalsaha,https://github.com/kubernetes/client-go/issues/236,https://api.github.com/repos/kubernetes/client-go/issues/236,How to use PATCH apis?,"I am trying to understand how to use PATCH apis available for various objects. I can't find any documentation for that. Also, what are the benefits of using PATCH over UPDATE api?",closed,False,2017-07-10 19:13:54,2017-10-10 06:58:26
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/237,https://api.github.com/repos/kubernetes/client-go/issues/237,Add v4.0.0 changelog,"TODO: generate TOC.

A step towards fixing https://github.com/kubernetes/client-go/issues/231.",closed,True,2017-07-11 00:47:31,2017-07-11 21:52:47
client-go,kensimon,https://github.com/kubernetes/client-go/issues/238,https://api.github.com/repos/kubernetes/client-go/issues/238,No documentation about the new home for pkg/api(s),"Everything from `pkg/apis` and `pkg/api` are completely gone as of Jun 22nd when https://github.com/kubernetes/kubernetes/commit/ffe74d1fe749b5887711f70af24e1375856f2520 was synced in.

It appears that the new home for all the api calls are in https://github.com/kubernetes/api.

All the existing issues that talk about how broken things are (#232 #226) have been replied to with ""well you should be installing from tags"", but I think there's more at stake here: those packages seem to be altogether deprecated from this repo, with no mention of that fact in any of the documentation.

Could we get something in the readme or otherwise that documents what's going on here?",closed,False,2017-07-11 15:37:33,2017-07-11 23:59:50
client-go,medyagh,https://github.com/kubernetes/client-go/issues/239,https://api.github.com/repos/kubernetes/client-go/issues/239,client-go code broke for k8s 1.6 (from 1.5) ,"Hi I wanted to upgrade [K8Guard](https://github.com/k8guard) (an auditing system for kubernetes) to work with k8s 1.6. 

we were using client-go `v2.0.0-alpha.1` with  `k8s 1.5`
I did notice the API calls have changed and I updated client-go to `v3.0.0-beta.0`

and I changed my code to look like this
```
// NEW CODE FOR v3.0.0-beta.0 THAT DOESNT WORK
import (
	""strings""
	""io/ioutil""
	""encoding/json""
	meta ""k8s.io/apimachinery/pkg/apis/meta/v1""
	lib ""github.com/k8guard/k8guardlibs""
	""k8s.io/client-go/pkg/apis/apps/v1beta1""
	""github.com/k8guard/k8guardlibs/messaging/kafka""
	""github.com/k8guard/k8guardlibs/violations""
	""github.com/k8guard/k8guard-discover/metrics""
	""github.com/prometheus/client_golang/prometheus""
)

func GetAllDeployFromApi() []v1beta1.Deployment {
	deploys, err := Clientset.AppsV1beta1().Deployments(lib.Cfg.Namespace).List(meta.ListOptions{})
	if err != nil {
		lib.Log.Error(""error: "", err)
		panic(err.Error())
	}

...
...
...
	return deploys.Items
```

for previous version ( `v2.0.0-alpha.1` with 1.5 k8s) the code was this:
https://github.com/k8guard/k8guard-discover/blob/cd95898cb406bba14bc327899e4309b0430f9843/discover/deployments.go

```
// OLD CODE FOR v2.0.0-alpha.1 THAT WORKS
package discover
 
import (
    ""strings""
    ""io/ioutil""
    ""encoding/json""
    ""k8s.io/client-go/pkg/api/v1""
    lib ""github.com/k8guard/k8guardlibs""
    ""k8s.io/client-go/pkg/apis/extensions/v1beta1""
    ""github.com/k8guard/k8guardlibs/messaging/kafka""
    ""github.com/k8guard/k8guardlibs/violations""
    ""github.com/k8guard/k8guard-discover/metrics""
    ""github.com/prometheus/client_golang/prometheus""
)
 
func GetAllDeployFromApi() []v1beta1.Deployment {
    deploys, err := Clientset.Deployments(lib.Cfg.Namespace).List(v1.ListOptions{})
    if err != nil {
        lib.Log.Error(""error: "", err)
        panic(err.Error())
    }
...
...
...

    return deploys.Items
}
```


and the error I get is:

```
2017/07/11 20:07:18 [k8guard-discover-deployment-2727519787-fcb08/k4v1x7jbjT-000038] ""GET http://192.168.99.100:32243/deploys HTTP/1.1"" from 172.17.0.1:49460 - panic: runtime error: invalid memory address or nil pointer dereference
2017/07/11 20:07:18 goroutine 94 [running]:
runtime/debug.Stack(0xc420161600, 0x1f75260, 0xc4200d3b60)
	/usr/local/Cellar/go/1.8/libexec/src/runtime/debug/stack.go:24 +0x79
github.com/k8guard/k8guard-discover/vendor/github.com/pressly/chi/middleware.Recoverer.func1.1(0xc420161600, 0x7f305859fdd0, 0xc4200fe7c0)
	/Users/z001r9y/go/src/github.com/k8guard/k8guard-discover/vendor/github.com/pressly/chi/middleware/recoverer.go:23 +0x82
panic(0x14b2f00, 0x1fd28f0)
	/usr/local/Cellar/go/1.8/libexec/src/runtime/panic.go:489 +0x2cf
github.com/k8guard/k8guard-discover/vendor/k8s.io/client-go/kubernetes/typed/apps/v1beta1.(*deployments).List(0xc42000af80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, ...)
	/Users/z001r9y/go/src/github.com/k8guard/k8guard-discover/vendor/k8s.io/client-go/kubernetes/typed/apps/v1beta1/deployment.go:141 +0x9b
github.com/k8guard/k8guard-discover/discover.GetAllDeployFromApi(0xc42023eff0, 0x165a081, 0x12)
	/Users/z001r9y/go/src/github.com/k8guard/k8guard-discover/discover/deployments.go:17 +0x91
main.startHttpServer.func5(0x7f305859fdd0, 0xc4200fe7c0, 0xc420161700)
	/Users/z001r9y/go/src/github.com/k8guard/k8guard-discover/routes.go:80 +0xaa
net/http.HandlerFunc.ServeHTTP(0x16c0570, 0x7f305859fdd0, 0xc4200fe7c0, 0xc420161700)
```",closed,False,2017-07-11 20:14:26,2017-07-12 18:40:41
client-go,lavalamp,https://github.com/kubernetes/client-go/issues/240,https://api.github.com/repos/kubernetes/client-go/issues/240,Clientset: don't ignore nil clientsets,"https://github.com/kubernetes/client-go/blob/v3.0.0-beta.0/kubernetes/clientset.go#L133

Why do we have the `if c == nil { return nil }` bit? It will always return an usuable object. We should omit that, and then it will be more obvious to users that they have to construct a clientset before using it.",closed,False,2017-07-11 20:23:40,2017-08-03 09:12:14
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/241,https://api.github.com/repos/kubernetes/client-go/issues/241,explaining the API migration in CHANGELOG,"Fix https://github.com/kubernetes/client-go/issues/238.
Fix https://github.com/kubernetes/client-go/issues/238.",closed,True,2017-07-11 23:46:09,2017-07-13 03:47:41
client-go,ianlewis,https://github.com/kubernetes/client-go/issues/242,https://api.github.com/repos/kubernetes/client-go/issues/242,"No Auth Provider found for name ""gcp""","For the following code I get an error when trying to connect to a GKE API server with v3.0.0.

FWIW this worked in v3.0.0.beta.0

I have a version of apimachinery that's about 28 days old. Could it have to do with some library incompatibility?

```
F0712 12:20:52.391235   71066 main.go:73] Could not create Kubernetes ThirdPartyResource API client: No Auth Provider found for name ""gcp""
```

```golang
package main

import (
	""flag""

	""github.com/golang/glog""

	metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
	""k8s.io/apimachinery/pkg/runtime""
	""k8s.io/apimachinery/pkg/runtime/schema""
	""k8s.io/apimachinery/pkg/runtime/serializer""
	""k8s.io/client-go/kubernetes/scheme""
	""k8s.io/client-go/rest""
	""k8s.io/client-go/tools/clientcmd""
)

type Thing struct {
	metav1.TypeMeta `json:"",inline""`
	ObjectMeta      metav1.ObjectMeta `json:""metadata""`
}

// Required to satisfy ObjectMetaAccessor interface
func (m *Thing) GetObjectMeta() metav1.Object {
	return &m.ObjectMeta
}

type ThingList struct {
	metav1.TypeMeta `json:"",inline""`
	ListMeta        metav1.ListMeta `json:""metadata""`
	Items           []Thing         `json:""items""`
}

// Required to satisfy ListMetaAccessor interface
func (m *ThingList) GetListMeta() metav1.List {
	return &m.ListMeta
}

func main() {
	kubeconfig := flag.String(""kubeconfig"", """", ""The path to a kubeconfig. Default is in-cluster config."")

	flag.Parse()

	config, err := clientcmd.BuildConfigFromFlags("""", *kubeconfig)
	if err != nil {
		glog.Exitf(""Could not read kubeconfig %s: %v"", *kubeconfig, err)
	}

	groupVersion := schema.GroupVersion{
		Group:   ""ianlewis.org"",
		Version: ""v1alpha1"",
	}

	config.GroupVersion = &groupVersion
	config.APIPath = ""/apis""
	config.ContentType = runtime.ContentTypeJSON
	config.NegotiatedSerializer = serializer.DirectCodecFactory{CodecFactory: scheme.Codecs}

	schemeBuilder := runtime.NewSchemeBuilder(
		func(scheme *runtime.Scheme) error {
			scheme.AddKnownTypes(
				groupVersion,
				&Thing{},
				&ThingList{},
			)
			return nil
		},
	)
	schemeBuilder.AddToScheme(scheme.Scheme)

	_, err = rest.RESTClientFor(config)

	if err != nil {
		glog.Exitf(""Could not create Kubernetes ThirdPartyResource API client: %v"", err)
	}

	glog.Infof(""OK"")
}
```
",closed,False,2017-07-12 03:24:25,2019-04-01 03:31:21
client-go,gquintard,https://github.com/kubernetes/client-go/issues/243,https://api.github.com/repos/kubernetes/client-go/issues/243,out-of-sync READ,The link to the in-cluster example file needs to be changed.,closed,False,2017-07-12 08:51:42,2017-10-03 16:48:05
client-go,tamalsaha,https://github.com/kubernetes/client-go/issues/244,https://api.github.com/repos/kubernetes/client-go/issues/244,How to watch DELETE events for any objects,"I am trying to write a Kubernetes tool that will perform some action when any Kubernetes object is deleted. Is there any way to watch for DELETE event for any objects instead of adding watcher for each one of them individually?

I understand this is all HTTP under the hood. So, this should be technically possible. My question is there any way to do that using client-go? If not, do you have any hints on how this can be done?",closed,False,2017-07-12 22:11:40,2018-01-25 00:39:45
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/245,https://api.github.com/repos/kubernetes/client-go/issues/245,Fix a typo,cc @ash2k,closed,True,2017-07-13 03:47:15,2017-07-13 03:47:30
client-go,fanhaozzu,https://github.com/kubernetes/client-go/issues/246,https://api.github.com/repos/kubernetes/client-go/issues/246,"func (c *threadSafeMap) Resync() , nothing to do ,that's why?","why Resync() function nothing to do？it's called by reflector.go.
if the resync() function nothing to do, Reflector's resyncPeriod parameter is useless.",closed,False,2017-07-13 05:41:26,2018-03-02 15:31:20
client-go,hongchaodeng,https://github.com/kubernetes/client-go/issues/247,https://api.github.com/repos/kubernetes/client-go/issues/247,Including CRD client into client-go repo,"Currently CRD client and api all sits in https://github.com/kubernetes/apiextensions-apiserver.

Eventually, CRD client would be better to live in client-go as well. It would be easier for users if client-go can manage dependencies, manage backward compatibility, and testing all in one place.",closed,False,2017-07-17 18:33:15,2018-04-28 21:29:05
client-go,brandon-bethke-neudesic,https://github.com/kubernetes/client-go/issues/248,https://api.github.com/repos/kubernetes/client-go/issues/248,undefined: v1.Initializers,"I get the following compile error when I import ""k8s.io/api/core/v1"" into my file for the type v1.ConfigMap.

k8s.io/api/core/v1
../k8s.io/api/core/v1/types.go:213: undefined: v1.Initializers

I am using v3.0.0 of client-go as recommended in README.md
I am using to godep management tool and instructions as recommended in INSTALL.md

 ",closed,False,2017-07-17 19:15:46,2017-08-09 12:07:29
client-go,goupeng212,https://github.com/kubernetes/client-go/issues/249,https://api.github.com/repos/kubernetes/client-go/issues/249,Anyone can explain why delete so many go files under pkg/v1?,"Here is the commit id :https://github.com/kubernetes/client-go/commit/d82cfb70ddc9faa25f41e39a8f73d7ccd20d7a55#diff-5c755714d0649f91c00269ed3d88e19c 
The author deleted so many go files, so our project failed to run . I know I don't complaint that too much. But that change is too too big!",closed,False,2017-07-18 06:13:11,2017-07-18 16:58:53
client-go,stevesloka,https://github.com/kubernetes/client-go/issues/250,https://api.github.com/repos/kubernetes/client-go/issues/250,Job labels,"I'm creating `CronJobs` with client-go. They in turn create `Jobs`. Sometimes when my job is misconfigured or not working, the jobs will hang around. I want a way to delete those jobs. I was going to do a delete against a label selector but I see that none of the labels from my CronJob are passed through. 

Is this a bug with k8s API or a symptom of the client?",closed,False,2017-07-20 14:54:53,2017-07-20 15:11:51
client-go,alexellis,https://github.com/kubernetes/client-go/issues/251,https://api.github.com/repos/kubernetes/client-go/issues/251,Broken links for examples,"Hi - there are broken links for the examples - so I wanted to raise a PR, but got redirected. I thought an issue may be easier.

Patch details below:

https://github.com/kubernetes/client-go/compare/master...alexellis:patch-1

Regards,

Alex",closed,False,2017-07-23 18:31:49,2018-01-07 17:56:47
client-go,li-ang,https://github.com/kubernetes/client-go/issues/252,https://api.github.com/repos/kubernetes/client-go/issues/252,Proposal: Remove informers from SharedInformerFactory,"SharedInformerFactory just only adds resource informers into itself, but can not remove. I think we could add `RemoveResource()` method into SharedInformerFactory interface for **removing resource informer**.

Please give me more advice.

THX!

",closed,False,2017-07-24 04:34:01,2017-07-27 01:21:00
client-go,jinankjain,https://github.com/kubernetes/client-go/issues/253,https://api.github.com/repos/kubernetes/client-go/issues/253,UniversalDecoder Broken with version client-go version 4.0.0,"I was using this script to decode some yml files and when I bumped the version from 3.0.0 to 4.0.0. I get this error `no kind ""Deployment"" is registered for version ""extensions/v1beta1""`

Could someone help me out with that one? @lavalamp 

``` go
package main

import (
	""fmt""
	_ ""k8s.io/client-go/kubernetes""
	""k8s.io/client-go/pkg/api""
	apiv1 ""k8s.io/client-go/pkg/api/v1""
	""log""
	""reflect""
)

const yaml = `
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: THISISBROKEN
  namespace: THISCANTBETRUE
`

func main() {

	d := api.Codecs.UniversalDecoder()
	obj, _, err := d.Decode([]byte(yaml), nil, nil)
	if err != nil {
		log.Fatalf(""could not decode yaml: %s\n%s"", yaml, err)
	}

	src := obj.(*api.Pod)
	dst := &apiv1.Pod{}
	err = api.Scheme.Convert(src, dst, 0)
	if err != nil {
		panic(err)
	}
	fmt.Println(reflect.TypeOf(*dst))
}
```",closed,False,2017-07-26 17:53:30,2017-07-27 23:50:03
client-go,hongchaodeng,https://github.com/kubernetes/client-go/issues/254,https://api.github.com/repos/kubernetes/client-go/issues/254,LeaderElection resoucelock.New() should use interface not *ClientSet,"The interface looks:
```Go
func New(... client *cs.Clientset, rlc ResourceLockConfig) 
```

Since this is using a client, instead of digging into the details, should this be a client interface, like `kubernetes.Interface`?",closed,False,2017-07-26 23:09:52,2018-03-09 07:07:33
client-go,hongchaodeng,https://github.com/kubernetes/client-go/issues/255,https://api.github.com/repos/kubernetes/client-go/issues/255,client-go v4.0.0-beta error with 'no kind is registered for the type v1.Endpoints',"We use copy leader election from k8s and replace its client with client-go v4.0.0-beta . But after upgrading to v4, it is broken :

```
Could not construct reference to: '&v1.Endpoints{TypeMeta:v1.TypeMeta{Kind:"""", APIVersion:""""}, ObjectMeta:v1.ObjectMeta{Name:""etcd-operator"", GenerateName:"""", Namespace:""e2e-etcd-operator-flake-145"", SelfLink:""/api/v1/namespaces/e2e-etcd-operator-flake-145/endpoints/etcd-operator"", UID:""730424fb-71ef-11e7-9c2f-42010a800fc0"", ResourceVersion:""467835"", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:63636662689, nsec:0, loc:(*time.Location)(0x23a3f00)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string{""control-plane.alpha.kubernetes.io/leader"":""{\""holderIdentity\"":\""etcd-operator\"",\""leaseDurationSeconds\"":15,\""acquireTime\"":\""2017-07-26T10:44:49Z\"",\""renewTime\"":\""2017-07-26T10:44:49Z\"",\""leaderTransitions\"":0}""}, OwnerReferences:[]v1.OwnerReference(nil), Initializers:(*v1.Initializers)(nil), Finalizers:[]string(nil), ClusterName:""""}, Subsets:[]v1.EndpointSubset(nil)}'
due to: 'no kind is registered for the type v1.Endpoints'. Will not report event: 'Normal' 'LeaderElection' 'etcd-operator became leader'
```
",closed,False,2017-07-26 23:19:39,2017-08-11 23:43:58
client-go,Catorpilor,https://github.com/kubernetes/client-go/issues/256,https://api.github.com/repos/kubernetes/client-go/issues/256,Compiling with v3.0.0 tag not working.,"I followed the [INSTALL.md](https://github.com/kubernetes/client-go/blob/master/INSTALL.md) and use `dep` instead.
This is my `Gopkg.toml` content:
```
[[constraint]]
  revision = ""a13245d02534abe88286859b547d041816f9a3f4"" //release-1.6
  name = ""k8s.io/apimachinery""
[[override]]
  name = ""github.com/emicklei/go-restful""
  revision = ""ad3e7d5a0a11fbbead57cc9353720a60a0a2793f""

[[constraint]]
  name = ""k8s.io/client-go""
  version = ""3.0.0""
```
I run `dep ensure && dep ensure -update` to make sure dependency is safely vendored in the project.

The example file was [out-of-cluster-client-configuration](https://github.com/kubernetes/client-go/blob/master/examples/out-of-cluster-client-configuration/main.go)

when i run `go run main.go`  got the following error: 

```
# github.com/catorpilor/k8s/vendor/k8s.io/client-go/pkg/apis/authentication/v1
vendor/k8s.io/client-go/pkg/apis/authentication/v1/defaults.go:24: scheme.AddDefaultingFuncs undefined (type *runtime.Scheme has no field or method AddDefaultingFuncs)
# github.com/catorpilor/k8s/vendor/k8s.io/client-go/pkg/apis/authentication/v1beta1
vendor/k8s.io/client-go/pkg/apis/authentication/v1beta1/defaults.go:24: scheme.AddDefaultingFuncs undefined (type *runtime.Scheme has no field or method AddDefaultingFuncs)
# github.com/catorpilor/k8s/vendor/k8s.io/client-go/pkg/apis/authorization/v1
vendor/k8s.io/client-go/pkg/apis/authorization/v1/defaults.go:24: scheme.AddDefaultingFuncs undefined (type *runtime.Scheme has no field or method AddDefaultingFuncs)
# github.com/catorpilor/k8s/vendor/k8s.io/client-go/pkg/apis/authorization/v1beta1
vendor/k8s.io/client-go/pkg/apis/authorization/v1beta1/defaults.go:24: scheme.AddDefaultingFuncs undefined (type *runtime.Scheme has no field or method AddDefaultingFuncs)
# github.com/catorpilor/k8s/vendor/k8s.io/client-go/pkg/apis/certificates/v1beta1
vendor/k8s.io/client-go/pkg/apis/certificates/v1beta1/defaults.go:23: scheme.AddDefaultingFuncs undefined (type *runtime.Scheme has no field or method AddDefaultingFuncs)
# github.com/catorpilor/k8s/vendor/k8s.io/client-go/pkg/apis/rbac/v1beta1
vendor/k8s.io/client-go/pkg/apis/rbac/v1beta1/defaults.go:25: scheme.AddDefaultingFuncs undefined (type *runtime.Scheme has no field or method AddDefaultingFuncs)
# github.com/catorpilor/k8s/vendor/k8s.io/client-go/pkg/apis/rbac/v1alpha1
vendor/k8s.io/client-go/pkg/apis/rbac/v1alpha1/defaults.go:25: scheme.AddDefaultingFuncs undefined (type *runtime.Scheme has no field or method AddDefaultingFuncs)
# github.com/catorpilor/k8s/vendor/k8s.io/client-go/pkg/api
vendor/k8s.io/client-go/pkg/api/defaults.go:26: scheme.AddDefaultingFuncs undefined (type *runtime.Scheme has no field or method AddDefaultingFuncs)
vendor/k8s.io/client-go/pkg/api/types.go:3821: undefined: v1.LabelHostname
vendor/k8s.io/client-go/pkg/api/types.go:3821: undefined: v1.LabelZoneFailureDomain
vendor/k8s.io/client-go/pkg/api/types.go:3821: undefined: v1.LabelZoneRegion
vendor/k8s.io/client-go/pkg/api/types.go:3821: const initializer v1.LabelHostname + "","" + v1.LabelZoneFailureDomain + "","" + v1.LabelZoneRegion is not a constant
```
BTW: I think the `INSTALL.md` should be more specific. If i don't change the constrain of `k8s.io/apimachinery`(default branch is `master`) i got more errors complaining about `missing DeepCopyObject method`
",closed,False,2017-07-27 08:07:45,2017-08-21 19:45:05
client-go,kyessenov,https://github.com/kubernetes/client-go/issues/257,https://api.github.com/repos/kubernetes/client-go/issues/257,Serializing struct field to nil,"Field `sizeLimit` defined here https://godoc.org/k8s.io/kubernetes/pkg/api#EmptyDirVolumeSource, can never be nil. How do I invoke the special k8s serializer to make it omit from the resulting JSON/YAML?",closed,False,2017-07-28 01:30:21,2017-08-04 00:25:00
client-go,tobilarscheid,https://github.com/kubernetes/client-go/pull/258,https://api.github.com/repos/kubernetes/client-go/issues/258,README.md: fix link to in-cluster example,"> Sorry, client-go does not accept changes via pull requests at this time. Please
submit your pull request to the main repository:
https://github.com/kubernetes/kubernetes.  See the guidance here:
https://github.com/kubernetes/client-go#contributing-code.

Got it, but I am not submitting code - just a minor README change.",closed,True,2017-07-28 10:15:44,2017-08-18 01:23:30
client-go,svInfra17,https://github.com/kubernetes/client-go/issues/259,https://api.github.com/repos/kubernetes/client-go/issues/259,Upgrading version to 4.0.beta.0 results in compilation errors,"For kubernetes v1.7, [compatibility matrix](https://github.com/kubernetes/client-go#compatibility-matrix) suggest `4.0.beta.0` version of client-go.
After upgrading the version to `4.0.beta.0`, I get bellow compilation errors:

```
vendor/k8s.io/api/core/v1/zz_generated.deepcopy.go:897: in.ObjectMeta.DeepCopyInto undefined (type v1.ObjectMeta has no field or method DeepCopyInto)
vendor/k8s.io/api/core/v1/zz_generated.deepcopy.go:1013: in.ObjectMeta.DeepCopyInto undefined (type v1.ObjectMeta has no field or method DeepCopyInto)
vendor/k8s.io/api/core/v1/zz_generated.deepcopy.go:1079: in.ObjectMeta.DeepCopyInto undefined (type v1.ObjectMeta has no field or method DeepCopyInto)
vendor/k8s.io/api/core/v1/zz_generated.deepcopy.go:1440: in.StartedAt.DeepCopyInto undefined (type v1.Time has no field or method DeepCopyInto)
vendor/k8s.io/api/core/v1/zz_generated.deepcopy.go:1457: in.StartedAt.DeepCopyInto undefined (type v1.Time has no field or method DeepCopyInto)
vendor/k8s.io/api/core/v1/zz_generated.deepcopy.go:1458: in.FinishedAt.DeepCopyInto undefined (type v1.Time has no field or method DeepCopyInto)
vendor/k8s.io/api/core/v1/zz_generated.deepcopy.go:1788: in.ObjectMeta.DeepCopyInto undefined (type v1.ObjectMeta has no field or method DeepCopyInto)
vendor/k8s.io/api/core/v1/zz_generated.deepcopy.go:1967: in.ObjectMeta.DeepCopyInto undefined (type v1.ObjectMeta has no field or method DeepCopyInto)
vendor/k8s.io/api/core/v1/zz_generated.deepcopy.go:1970: in.FirstTimestamp.DeepCopyInto undefined (type v1.Time has no field or method DeepCopyInto)
vendor/k8s.io/api/core/v1/zz_generated.deepcopy.go:1971: in.LastTimestamp.DeepCopyInto undefined (type v1.Time has no field or method DeepCopyInto)
vendor/k8s.io/api/core/v1/zz_generated.deepcopy.go:1971: too many errors

```",closed,False,2017-07-31 12:23:14,2017-09-18 06:35:43
client-go,jgsqware,https://github.com/kubernetes/client-go/issues/260,https://api.github.com/repos/kubernetes/client-go/issues/260,extensions.v1beta1 don't export NetworkPolicy,"I have a Network Policy as this one:

```bash
kubectl describe networkpolicy allow-tcp-443
Name:		allow-tcp-443
Namespace:	default
Labels:		<none>
Annotations:	kubectl.kubernetes.io/last-applied-configuration={""apiVersion"":""extensions/v1beta1"",""kind"":""NetworkPolicy"",""metadata"":{""annotations"":{},""name"":""allow-tcp-443"",""namespace"":""default""},""spec"":{""ingress"":...
```

With `go-client`, when I tried to retrieve it via: 

```go
c.Networking().NetworkPolicies(ns).List(metav1.ListOptions{})
```
I got error:

`the server could not find the requested resource`

the `apiVersion` is `extensions/v1beta1` but I don't find any method that allow retrieving NetworkPolicy for extensions/v1beta1",closed,False,2017-07-31 14:58:27,2017-08-18 06:26:16
client-go,hblanks,https://github.com/kubernetes/client-go/pull/261,https://api.github.com/repos/kubernetes/client-go/issues/261,README.md: fix broken links to examples in & out of cluster,"Seems like this file isn't in the main Kubernetes repo, so here's a PR to fix its broken link.",closed,True,2017-08-01 09:44:23,2017-08-18 01:22:28
client-go,JaSei,https://github.com/kubernetes/client-go/pull/262,https://api.github.com/repos/kubernetes/client-go/issues/262,improve documentation of install via `dep`,related with #256 ,closed,True,2017-08-03 12:31:00,2017-10-30 22:52:02
client-go,asifdxtreme,https://github.com/kubernetes/client-go/pull/263,https://api.github.com/repos/kubernetes/client-go/issues/263,Add GoReportCard badge,"
",closed,True,2017-08-04 04:04:51,2017-12-20 11:55:43
client-go,fisherxu,https://github.com/kubernetes/client-go/pull/264,https://api.github.com/repos/kubernetes/client-go/issues/264,Fix: 'kubernetes' should be start with 'K',"Sorry, client-go does not accept changes via pull requests at this time. Please
submit your pull request to the main repository:
https://github.com/kubernetes/kubernetes.  See the guidance here:
https://github.com/kubernetes/client-go#contributing-code.
",closed,True,2017-08-04 16:38:59,2017-08-29 00:02:45
client-go,orkun1675,https://github.com/kubernetes/client-go/pull/265,https://api.github.com/repos/kubernetes/client-go/issues/265,update broken examples links,"Sorry, client-go does not accept changes via pull requests at this time. Please
submit your pull request to the main repository:
https://github.com/kubernetes/kubernetes.  See the guidance here:
https://github.com/kubernetes/client-go#contributing-code.
",closed,True,2017-08-07 17:26:34,2017-10-01 23:11:11
client-go,orkun1675,https://github.com/kubernetes/client-go/issues/266,https://api.github.com/repos/kubernetes/client-go/issues/266,workqueue example: getsockopt: connection refused,"When I run the [workqueue](https://github.com/kubernetes/client-go/blob/master/examples/workqueue/main.go) example in my cluster, everything works fine (I get the pod updates) except I get spammed in the console with the following message:

```
ERROR: logging before flag.Parse: E0808 19:33:44.347358      19 reflector.go:304] github.com/orkun1675/cni-gatenet/gateway-image/gate.go:208: Failed to watch *v1.Pod: Get https://10.0.0.1:443/api/v1/namespaces/default/pods?resourceVersion=1340001&timeoutSeconds=582&watch=true: dial tcp 10.0.0.1:443: getsockopt: connection refused
ERROR: logging before flag.Parse: E0808 19:33:45.347982      19 reflector.go:201] github.com/orkun1675/cni-gatenet/gateway-image/gate.go:208: Failed to list *v1.Pod: Get https://10.0.0.1:443/api/v1/namespaces/default/pods?resourceVersion=0: dial tcp 10.0.0.1:443: getsockopt: connection refused
ERROR: logging before flag.Parse: E0808 19:33:46.348577      19 reflector.go:201] github.com/orkun1675/cni-gatenet/gateway-image/gate.go:208: Failed to list *v1.Pod: Get https://10.0.0.1:443/api/v1/namespaces/default/pods?resourceVersion=0: dial tcp 10.0.0.1:443: getsockopt: connection refused
ERROR: logging before flag.Parse: E0808 19:33:47.349181      19 reflector.go:201] github.com/orkun1675/cni-gatenet/gateway-image/gate.go:208: Failed to list *v1.Pod: Get https://10.0.0.1:443/api/v1/namespaces/default/pods?resourceVersion=0: dial tcp 10.0.0.1:443: getsockopt: connection refused
ERROR: logging before flag.Parse: E0808 19:33:48.349740      19 reflector.go:201] github.com/orkun1675/cni-gatenet/gateway-image/gate.go:208: Failed to list *v1.Pod: Get https://10.0.0.1:443/api/v1/namespaces/default/pods?resourceVersion=0: dial tcp 10.0.0.1:443: getsockopt: connection refused
```

Line 208 referred to in the logs corresponds to [this line](https://github.com/kubernetes/client-go/blob/master/examples/workqueue/main.go#L123).

Does the tcp connection time out somehow? What can be the cause of this?

Related issue: #18 ",closed,False,2017-08-08 19:27:14,2018-02-08 09:10:00
client-go,ghost,https://github.com/kubernetes/client-go/issues/267,https://api.github.com/repos/kubernetes/client-go/issues/267,Informers with fake clientset,"My informer isn't calling its watch/list function routinely, nor is it calling its event handlers when the client which I've passed to it is updated. Is this expected?

I create a fake clientset, create a node informer with it, update nodes with that client set (I've confirmed that the changes are saved by `List`ing from the client directly. It seems that the problem is that the ListFunc is not being called despite the resyncPeriod being non-zero.

",closed,False,2017-08-09 01:43:58,2017-08-25 17:37:40
client-go,irisdingbj,https://github.com/kubernetes/client-go/issues/268,https://api.github.com/repos/kubernetes/client-go/issues/268,"OIDC cache does not have chance to expire when issuer, clientID and clientSecret does not change","In https://github.com/kubernetes/client-go/blob/master/plugin/pkg/client/auth/oidc/oidc.go. newOIDCAuthProvider()

It will try to find the cached provider like below:

// Check cache for existing provider.
	if provider, ok := cache.getClient(issuer, clientID); ok {
		return provider, nil
	}

However, in some cases there might be no changes for the issuer, clientID and clientSecret. But we only changed the refresh-token or access-token. Since we use  (key := cacheKey{issuer, clientID, clientSecret}) as cached key in this case it will still use the old token.

I suggest we add some code logic to let user define whether we should expire the OIDC cache for the client:
       const   cfgExpired                  = ""expired""
	expired = cfg[cfgExpired]
	if expired != ""true"" {
		// Check cache for existing provider.
		if provider, ok := cache.getClient(issuer, clientID, clientSecret); ok {
			return provider, nil
		}

	}

If you agree with this change, I will submit a PR for this. 

Looking forward to your feedback on this issue~ 

Thanks.

Iris Ding
",closed,False,2017-08-09 07:34:29,2018-03-09 21:21:34
client-go,F00b4rch,https://github.com/kubernetes/client-go/pull/269,https://api.github.com/repos/kubernetes/client-go/issues/269,Updating Readme.md,"Correcting examples location links

Sorry, client-go does not accept changes via pull requests at this time. Please
submit your pull request to the main repository:
https://github.com/kubernetes/kubernetes.  See the guidance here:
https://github.com/kubernetes/client-go#contributing-code.
",closed,True,2017-08-11 21:11:16,2017-08-11 21:23:44
client-go,F00b4rch,https://github.com/kubernetes/client-go/pull/270,https://api.github.com/repos/kubernetes/client-go/issues/270,Updating Readme.md,Correcting examples location links,closed,True,2017-08-11 21:22:42,2017-08-11 21:23:44
client-go,orbitalmedia,https://github.com/kubernetes/client-go/issues/271,https://api.github.com/repos/kubernetes/client-go/issues/271,Is there a way to create a batch/v1 Job using client-go?,,closed,False,2017-08-14 01:30:09,2017-08-14 01:32:26
client-go,nogoegst,https://github.com/kubernetes/client-go/pull/272,https://api.github.com/repos/kubernetes/client-go/issues/272,Fix broken example link,"> Sorry, client-go does not accept changes via pull requests at this time. Please
> submit your pull request to the main repository:
> https://github.com/kubernetes/kubernetes.  See the guidance here:
> https://github.com/kubernetes/client-go#contributing-code.

Hmm, the hack script was removed as part of https://github.com/kubernetes/kubernetes/pull/49346. I have no idea what to do else but submit a PR here.
",closed,True,2017-08-14 09:31:19,2017-10-04 20:41:19
client-go,ppingfann,https://github.com/kubernetes/client-go/issues/273,https://api.github.com/repos/kubernetes/client-go/issues/273,example cannot be found,example cannot be found,closed,False,2017-08-14 12:24:01,2017-08-18 00:54:37
client-go,nikhita,https://github.com/kubernetes/client-go/pull/274,https://api.github.com/repos/kubernetes/client-go/issues/274,README: remove non-existent update-staging-client-go.sh,"https://github.com/kubernetes/kubernetes/pull/49346 removed the script. We no longer need it.

cc @sttts @caesarxuchao 
fyi @dims ",closed,True,2017-08-14 15:23:52,2017-08-14 17:09:43
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/275,https://api.github.com/repos/kubernetes/client-go/issues/275,Update changelog and readme for 4.0.0,,closed,True,2017-08-18 00:48:39,2017-08-18 01:11:54
client-go,frankgreco,https://github.com/kubernetes/client-go/issues/276,https://api.github.com/repos/kubernetes/client-go/issues/276,CRD Bug in v4.0.0,"There are 2 bugs that I thought would get fixed in release 4.0.0 but still persist.

I was getting the following error:
```sh
Failed to list *spec.APIProxy: no kind ""ApiProxyList"" is registered for version ""kanali.io/v1""
```
The fix was to change my type name from `APIProxyList` to `ApiProxyList`. Of course this will break `golint`. It seems as though it expects the type name to match the kind name. However, since we are giving it a `runtime.Object` telling it what the type should be, why should it matter what the type name is?

In addition, client-go does not seem to be respecting the json tags for a type. For example, client-go will not understand my type unless I have an `Items` field in my list type. I would think I could name it whatever I want as long as I have `json:""items""`

It is really unfortunate that in order for client-go to work, I would have to turn off linting...

Is there a fix or a workaround?",closed,False,2017-08-22 01:11:50,2017-10-18 02:04:48
client-go,kenontech,https://github.com/kubernetes/client-go/issues/277,https://api.github.com/repos/kubernetes/client-go/issues/277,UniversalDecoder can't decode Job config file ,"Hi there,

I was trying to use the UniversalDecoder to decode a Job yaml config file, but go an error:
```
import ""k8s.io/client-go/pkg/api""
...
obj, kind, err := api.Codecs.UniversalDecoder.Decode([]byte(doc), nil, nil)
...
Error: could not decode yaml:
...
no kind ""Job"" is registered for version ""batch/v1""
```
The branch I am using is v4.0.0

Is there any special consideration not supporting Job type resources in UniversalDecoder?




",closed,False,2017-08-22 03:44:20,2018-03-11 19:06:36
client-go,vongohren,https://github.com/kubernetes/client-go/issues/278,https://api.github.com/repos/kubernetes/client-go/issues/278,Example is failing. Using dep,"So im trying to run the example, I have copied the source code to my own file and folder. Did a dep init and have this toml file:

```
required = [
    ""github.com/kubernetes/client-go/kubernetes"",
    ""github.com/kubernetes/client-go/rest""
]

[[constraint]]
  branch = ""master""
  name = ""k8s.io/apimachinery""

[[constraint]]
  name = ""k8s.io/client-go""
  version = ""4.0.0""
```  

I get this in my Gopkg.lock:
```
[[projects]]
  branch = ""master""
  name = ""k8s.io/apimachinery""
  packages = [""pkg/api/equality"",""pkg/api/errors"",""pkg/api/meta"",""pkg/api/resource"",""pkg/apimachinery"",""pkg/apimachinery/announced"",""pkg/apimachinery/registered"",""pkg/apis/meta/v1"",""pkg/apis/meta/v1/unstructured"",""pkg/apis/meta/v1alpha1"",""pkg/conversion"",""pkg/conversion/queryparams"",""pkg/conversion/unstructured"",""pkg/fields"",""pkg/labels"",""pkg/openapi"",""pkg/runtime"",""pkg/runtime/schema"",""pkg/runtime/serializer"",""pkg/runtime/serializer/json"",""pkg/runtime/serializer/protobuf"",""pkg/runtime/serializer/recognizer"",""pkg/runtime/serializer/streaming"",""pkg/runtime/serializer/versioning"",""pkg/selection"",""pkg/types"",""pkg/util/clock"",""pkg/util/diff"",""pkg/util/errors"",""pkg/util/framer"",""pkg/util/intstr"",""pkg/util/json"",""pkg/util/net"",""pkg/util/rand"",""pkg/util/runtime"",""pkg/util/sets"",""pkg/util/validation"",""pkg/util/validation/field"",""pkg/util/wait"",""pkg/util/yaml"",""pkg/version"",""pkg/watch"",""third_party/forked/golang/reflect""]
  revision = ""dc1f89aff9a7509782bde3b68824c8043a3e58cc""

[[projects]]
  name = ""k8s.io/client-go""
  packages = [""discovery"",""kubernetes"",""kubernetes/scheme"",""kubernetes/typed/admissionregistration/v1alpha1"",""kubernetes/typed/apps/v1beta1"",""kubernetes/typed/authentication/v1"",""kubernetes/typed/authentication/v1beta1"",""kubernetes/typed/authorization/v1"",""kubernetes/typed/authorization/v1beta1"",""kubernetes/typed/autoscaling/v1"",""kubernetes/typed/autoscaling/v2alpha1"",""kubernetes/typed/batch/v1"",""kubernetes/typed/batch/v2alpha1"",""kubernetes/typed/certificates/v1beta1"",""kubernetes/typed/core/v1"",""kubernetes/typed/extensions/v1beta1"",""kubernetes/typed/networking/v1"",""kubernetes/typed/policy/v1beta1"",""kubernetes/typed/rbac/v1alpha1"",""kubernetes/typed/rbac/v1beta1"",""kubernetes/typed/settings/v1alpha1"",""kubernetes/typed/storage/v1"",""kubernetes/typed/storage/v1beta1"",""pkg/api"",""pkg/api/install"",""pkg/api/v1"",""pkg/api/v1/ref"",""pkg/apis/admissionregistration"",""pkg/apis/admissionregistration/v1alpha1"",""pkg/apis/apps"",""pkg/apis/apps/install"",""pkg/apis/apps/v1beta1"",""pkg/apis/authentication"",""pkg/apis/authentication/install"",""pkg/apis/authentication/v1"",""pkg/apis/authentication/v1beta1"",""pkg/apis/authorization"",""pkg/apis/authorization/install"",""pkg/apis/authorization/v1"",""pkg/apis/authorization/v1beta1"",""pkg/apis/autoscaling"",""pkg/apis/autoscaling/install"",""pkg/apis/autoscaling/v1"",""pkg/apis/autoscaling/v2alpha1"",""pkg/apis/batch"",""pkg/apis/batch/install"",""pkg/apis/batch/v1"",""pkg/apis/batch/v2alpha1"",""pkg/apis/certificates"",""pkg/apis/certificates/install"",""pkg/apis/certificates/v1beta1"",""pkg/apis/extensions"",""pkg/apis/extensions/install"",""pkg/apis/extensions/v1beta1"",""pkg/apis/networking"",""pkg/apis/networking/v1"",""pkg/apis/policy"",""pkg/apis/policy/install"",""pkg/apis/policy/v1beta1"",""pkg/apis/rbac"",""pkg/apis/rbac/install"",""pkg/apis/rbac/v1alpha1"",""pkg/apis/rbac/v1beta1"",""pkg/apis/settings"",""pkg/apis/settings/install"",""pkg/apis/settings/v1alpha1"",""pkg/apis/storage"",""pkg/apis/storage/install"",""pkg/apis/storage/v1"",""pkg/apis/storage/v1beta1"",""pkg/util"",""pkg/util/parsers"",""pkg/version"",""rest"",""rest/watch"",""tools/auth"",""tools/clientcmd"",""tools/clientcmd/api"",""tools/clientcmd/api/latest"",""tools/clientcmd/api/v1"",""tools/metrics"",""transport"",""util/cert"",""util/flowcontrol"",""util/homedir"",""util/integer""]
  revision = ""d92e8497f71b7b4e0494e5bd204b48d34bd6f254""
  version = ""v4.0.0""
```

But when im trying to build my project, which is a copy paste of the example. Then everything goes wrong:

```
# bitbucket.org/enturas/entur-go-scripts/vendor/k8s.io/client-go/tools/clientcmd/api
vendor/k8s.io/client-go/tools/clientcmd/api/register.go:35: cannot use Config literal (type *Config) as type runtime.Object in argument to scheme.AddKnownTypes:
	*Config does not implement runtime.Object (missing DeepCopyObject method)
# bitbucket.org/enturas/entur-go-scripts/vendor/k8s.io/client-go/pkg/apis/admissionregistration
vendor/k8s.io/client-go/pkg/apis/admissionregistration/register.go:47: cannot use InitializerConfiguration literal (type *InitializerConfiguration) as type runtime.Object in argument to scheme.AddKnownTypes:
	*InitializerConfiguration does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/admissionregistration/register.go:48: cannot use InitializerConfigurationList literal (type *InitializerConfigurationList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*InitializerConfigurationList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/admissionregistration/register.go:49: cannot use ExternalAdmissionHookConfiguration literal (type *ExternalAdmissionHookConfiguration) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ExternalAdmissionHookConfiguration does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/admissionregistration/register.go:50: cannot use ExternalAdmissionHookConfigurationList literal (type *ExternalAdmissionHookConfigurationList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ExternalAdmissionHookConfigurationList does not implement runtime.Object (missing DeepCopyObject method)
# bitbucket.org/enturas/entur-go-scripts/vendor/k8s.io/client-go/pkg/apis/authorization
vendor/k8s.io/client-go/pkg/apis/authorization/register.go:47: cannot use SelfSubjectAccessReview literal (type *SelfSubjectAccessReview) as type runtime.Object in argument to scheme.AddKnownTypes:
	*SelfSubjectAccessReview does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/authorization/register.go:48: cannot use SubjectAccessReview literal (type *SubjectAccessReview) as type runtime.Object in argument to scheme.AddKnownTypes:
	*SubjectAccessReview does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/authorization/register.go:49: cannot use LocalSubjectAccessReview literal (type *LocalSubjectAccessReview) as type runtime.Object in argument to scheme.AddKnownTypes:
	*LocalSubjectAccessReview does not implement runtime.Object (missing DeepCopyObject method)
# bitbucket.org/enturas/entur-go-scripts/vendor/k8s.io/client-go/pkg/apis/certificates
vendor/k8s.io/client-go/pkg/apis/certificates/register.go:48: cannot use CertificateSigningRequest literal (type *CertificateSigningRequest) as type runtime.Object in argument to scheme.AddKnownTypes:
	*CertificateSigningRequest does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/certificates/register.go:49: cannot use CertificateSigningRequestList literal (type *CertificateSigningRequestList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*CertificateSigningRequestList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/certificates/zz_generated.deepcopy.go:73: cannot use in.LastUpdateTime.DeepCopy() (type *v1.Time) as type v1.Time in assignment
# bitbucket.org/enturas/entur-go-scripts/vendor/k8s.io/client-go/pkg/apis/policy
vendor/k8s.io/client-go/pkg/apis/policy/register.go:49: cannot use PodDisruptionBudget literal (type *PodDisruptionBudget) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodDisruptionBudget does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/policy/register.go:50: cannot use PodDisruptionBudgetList literal (type *PodDisruptionBudgetList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodDisruptionBudgetList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/policy/register.go:51: cannot use Eviction literal (type *Eviction) as type runtime.Object in argument to scheme.AddKnownTypes:
	*Eviction does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/policy/zz_generated.deepcopy.go:148: cannot use val.DeepCopy() (type *v1.Time) as type v1.Time in assignment
# bitbucket.org/enturas/entur-go-scripts/vendor/k8s.io/client-go/pkg/apis/authentication
vendor/k8s.io/client-go/pkg/apis/authentication/register.go:47: cannot use TokenReview literal (type *TokenReview) as type runtime.Object in argument to scheme.AddKnownTypes:
	*TokenReview does not implement runtime.Object (missing DeepCopyObject method)
# bitbucket.org/enturas/entur-go-scripts/vendor/k8s.io/client-go/pkg/apis/storage
vendor/k8s.io/client-go/pkg/apis/storage/register.go:47: cannot use StorageClass literal (type *StorageClass) as type runtime.Object in argument to scheme.AddKnownTypes:
	*StorageClass does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/storage/register.go:48: cannot use StorageClassList literal (type *StorageClassList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*StorageClassList does not implement runtime.Object (missing DeepCopyObject method)
# bitbucket.org/enturas/entur-go-scripts/vendor/k8s.io/client-go/pkg/apis/rbac
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:47: cannot use Role literal (type *Role) as type runtime.Object in argument to scheme.AddKnownTypes:
	*Role does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:48: cannot use RoleBinding literal (type *RoleBinding) as type runtime.Object in argument to scheme.AddKnownTypes:
	*RoleBinding does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:49: cannot use RoleBindingList literal (type *RoleBindingList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*RoleBindingList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:50: cannot use RoleList literal (type *RoleList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*RoleList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:52: cannot use ClusterRole literal (type *ClusterRole) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ClusterRole does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:53: cannot use ClusterRoleBinding literal (type *ClusterRoleBinding) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ClusterRoleBinding does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:54: cannot use ClusterRoleBindingList literal (type *ClusterRoleBindingList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ClusterRoleBindingList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:55: cannot use ClusterRoleList literal (type *ClusterRoleList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ClusterRoleList does not implement runtime.Object (missing DeepCopyObject method)
# bitbucket.org/enturas/entur-go-scripts/vendor/k8s.io/client-go/pkg/api
vendor/k8s.io/client-go/pkg/api/register.go:76: cannot use Pod literal (type *Pod) as type runtime.Object in argument to scheme.AddKnownTypes:
	*Pod does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:77: cannot use PodList literal (type *PodList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:78: cannot use PodStatusResult literal (type *PodStatusResult) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodStatusResult does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:79: cannot use PodTemplate literal (type *PodTemplate) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodTemplate does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:80: cannot use PodTemplateList literal (type *PodTemplateList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodTemplateList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:81: cannot use ReplicationControllerList literal (type *ReplicationControllerList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ReplicationControllerList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:82: cannot use ReplicationController literal (type *ReplicationController) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ReplicationController does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:83: cannot use ServiceList literal (type *ServiceList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ServiceList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:84: cannot use Service literal (type *Service) as type runtime.Object in argument to scheme.AddKnownTypes:
	*Service does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:85: cannot use ServiceProxyOptions literal (type *ServiceProxyOptions) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ServiceProxyOptions does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:85: too many errors ```",closed,False,2017-08-22 13:38:54,2017-08-23 08:04:41
client-go,MikeSpreitzer,https://github.com/kubernetes/client-go/issues/279,https://api.github.com/repos/kubernetes/client-go/issues/279,Release 3.0 still references github.com/emicklei/go-restful/swagger,"I am using glide in developing my client application, and it wants to flatten out dependencies, so this bogus dependency is a problem.

```
mjs10:client-go mspreitz$ git checkout release-3.0
Branch release-3.0 set up to track remote branch release-3.0 from origin.
Switched to a new branch 'release-3.0'

mjs10:client-go mspreitz$ find * -type f -exec grep go-restful/swagger \{\} \; -print -exec echo \;
			""ImportPath"": ""github.com/emicklei/go-restful/swagger"",
Godeps/Godeps.json

	""github.com/emicklei/go-restful/swagger""
discovery/discovery_client.go

	""github.com/emicklei/go-restful/swagger""
discovery/discovery_client_test.go

	""github.com/emicklei/go-restful/swagger""
discovery/fake/discovery.go

	""github.com/emicklei/go-restful/swagger""
discovery/restmapper_test.go

```",closed,False,2017-08-22 20:50:20,2018-01-03 21:58:49
client-go,yifan-gu,https://github.com/kubernetes/client-go/issues/280,https://api.github.com/repos/kubernetes/client-go/issues/280,client-go v4.0.0 doesn't include CustomResourceDefinition types,"CustomResourceDefinition is introduced in 1.7 k8s, but it's not included in client-go v4.0.0.
Not sure if we can still say client-go v4.0.0 satisfies the compatible matrix as defined in:
https://github.com/kubernetes/client-go#compatibility-matrix",closed,False,2017-08-23 23:03:06,2017-09-06 03:39:26
client-go,MrHohn,https://github.com/kubernetes/client-go/issues/281,https://api.github.com/repos/kubernetes/client-go/issues/281,Use InClusterConfig but allow master IP to be overwritten?,"**Is this a BUG REPORT or FEATURE REQUEST?**:
 /kind feature

**What happened**:
When trying to deploy kube-proxy DaemonSet with service account, I found [`InClusterConfig()`](https://github.com/kubernetes/client-go/blob/v4.0.0/rest/config.go#L305-L309) not usable for kube-proxy, as this function sets master's IP to kubernetes service's VIP, which depends on kube-proxy itself to set up the proxy rules first...

At this point, in order to use service account on kube-proxy, we have to carry the responsibility of provisioning kube-proxy's kubeconfig at cluster deployment level, like [what kubeadm does](https://github.com/kubernetes/kubernetes/blob/b8fde17fc2135b6639922c5861db13fc934ac328/cmd/kubeadm/app/phases/addons/proxy/manifests.go#L20-L49):
```
  kubeconfig.conf: |
    apiVersion: v1
    kind: Config
    clusters:
    - cluster:
        certificate-authority: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        server: {{ .MasterEndpoint }}
      name: default
    contexts:
    - context:
        cluster: default
        namespace: default
        user: default
      name: default
    current-context: default
    users:
    - name: default
      user:
        tokenFile: /var/run/secrets/kubernetes.io/serviceaccount/token
```

(Or alternatively we may be able to overwrite the [`Host` field](https://github.com/kubernetes/client-go/blob/v4.0.0/rest/config.go#L329) after calling `InClusterConfig`?)

**What you expected to happen**:
I would like to have a supported way to generate in-cluster config for components like kube-proxy. Probably something like `InClusterProxyConfig(host string)`?

**How to reproduce it (as minimally and precisely as possible)**:
See https://github.com/kubernetes/kubernetes/pull/51172#discussion_r134681904.

cc @luxas @murali-reddy",closed,False,2017-08-28 18:46:51,2017-09-07 18:02:46
client-go,sttts,https://github.com/kubernetes/client-go/pull/282,https://api.github.com/repos/kubernetes/client-go/issues/282,DO-NOT-MERGE: test export of client-go release-1.7,"Using https://github.com/kubernetes/test-infra/pull/4134.

**Note**: Github skipped all merge commits in this PR. This is **not** what we want in client-go. Hence, do not merge this. Better look at https://github.com/sttts/client-go/commits/release-4.0 or even better at a Git viewer which understands branches and merges:

<img width=""1601"" alt=""bildschirmfoto 2017-08-29 um 17 03 40"" src=""https://user-images.githubusercontent.com/730123/29828080-117c59d0-8cdc-11e7-8b4e-17598c00ba4a.png"">

",closed,True,2017-08-29 15:05:06,2017-08-29 15:06:08
client-go,sttts,https://github.com/kubernetes/client-go/pull/283,https://api.github.com/repos/kubernetes/client-go/issues/283,DO-NOT-MERGE: test export of client-go release-1.7,"Using https://github.com/kubernetes/test-infra/pull/4134.

**Note**: Github skipped all merge commits in this PR. This is **not** what we want in client-go. Hence, do not merge this. Better look at https://github.com/sttts/client-go/commits/release-4.0 or even better at a Git viewer which understands branches and merges:

<img width=""1601"" alt=""bildschirmfoto 2017-08-29 um 17 03 40"" src=""https://user-images.githubusercontent.com/730123/29828080-117c59d0-8cdc-11e7-8b4e-17598c00ba4a.png"">

",closed,True,2017-08-29 15:05:34,2017-09-01 15:14:12
client-go,sttts,https://github.com/kubernetes/client-go/pull/284,https://api.github.com/repos/kubernetes/client-go/issues/284,DO-NOT-MERGE: test export of client-go master,"**Note:** Github dropped the feature branches and some merge commits in this PR view. This is not what we want in client-go. Hence, do not merge this. Better look at https://github.com/sttts/client-go/commits/master or even better at a Git viewer which understands branches and merges:

<img width=""1250"" alt=""bildschirmfoto 2017-08-29 um 17 10 45"" src=""https://user-images.githubusercontent.com/730123/29828456-0a4c91a6-8cdd-11e7-9034-eab3478e9385.png"">
",closed,True,2017-08-29 15:10:29,2017-09-01 15:14:09
client-go,bjhaid,https://github.com/kubernetes/client-go/issues/285,https://api.github.com/repos/kubernetes/client-go/issues/285,`Watch.Stop` not freeing up memory allocated to the watch,"### Version
client-go v4.0.0

### Feature or Bug
Bug

### What happened

Call to `resourceWatch.Stop` in the code below does not free up memory

```go
 for {
   time.Sleep(2 * time.Second)
   for _, namespace := range namespaces {
     for _, resourceName := range resources {
       go func(resourceName string) {
         fmt.Printf(""This is resource: %s\n"", resourceName)
         singularResourceName := resourceName[:len(resourceName)-1]
         kind := strings.Title(singularResourceName) + ""List""
         clientSet, err := clientPool.ClientForGroupVersionKind(schema.GroupVersionKind{Group: """", Version: ""v1""})
         if err != nil {
           log.Fatal(err.Error())
         }
         var timeOut int64 = 3600 * 24
         resourceWatch, err := clientSet.Resource(&metav1.APIResource{Name: resourceName, Namespaced: true, Kind: kind}, namespace).
           Watch(metav1.ListOptions{
             Watch:          true,
             TimeoutSeconds: &timeOut,
             // ResourceVersion: string(waitIndex),
           })
         if err != nil {
           log.Fatal(err.Error())
         }
         watchChan := resourceWatch.ResultChan()
         select {
         case event, ok := <-watchChan:
           if ok && (event.Type == watch.Modified) {
             _ = event.Object.(*unstructured.Unstructured).GetResourceVersion()
           }
           resourceWatch.Stop()
           runtime.GC()
           return
         }
       }(resourceName)
     }
   }
 }
```

### What do I expect
`resourceWatch.Stop()` should free up allocated memory for the watch",closed,False,2017-08-29 15:27:11,2018-06-13 00:09:00
client-go,anguslees,https://github.com/kubernetes/client-go/issues/286,https://api.github.com/repos/kubernetes/client-go/issues/286,Make it possible to set ?export=true,"`rest.Request` supports specifying URL params as objects via `.VersionedParams()`.  I _think_ this is how I'm meant to be use `metav1.ExportOptions`, although there appears to be no opportunity to specify this through the `kubernetes.Interface` typed interfaces.",closed,False,2017-09-05 07:32:45,2018-04-06 21:21:53
client-go,drshrey,https://github.com/kubernetes/client-go/issues/287,https://api.github.com/repos/kubernetes/client-go/issues/287,Add more information to JobStatus,"I'm doing a test where I create a job with an invalid-formatted docker image name. Since the job doesn't fail and just waits, there's no way for me to know that the image had a failure due to InvalidImageName. I don't want to have a timeout for Jobs since there are instances where they can take a long time to complete. 

Is there a way when I poll for the status for the job to get more information about the Job? I noticed in the Kubernetes dashboard the Job's pod status shows `Waiting: InvalidImageName`. It would be nice if I could get that same information programatically. Let me know if this makes sense, and whether there's already an existing solution. Thanks 😄 ",closed,False,2017-09-05 20:23:18,2018-03-11 00:48:35
client-go,hausdorff,https://github.com/kubernetes/client-go/issues/288,https://api.github.com/repos/kubernetes/client-go/issues/288,Namespace flag seems to be ignored when the kubeconfig current context sets it,"I will work on a simple reproduction if there's interest, but before I did, I wanted to socialize the general problem to make sure it's not actually the _desired semantics_.

We develop a project, [kubecfg](https://github.com/ksonnet/kubecfg), which is a Kubernetes client building on top of client-go v3.0.0. Our client-go [flag parsing logic](https://github.com/ksonnet/kubecfg/blob/7551f5de0ad4ced970b7481e4926cc4297df251c/cmd/root.go#L104) is essentially stolen wholesale directly from `kubectl` codebase.

So it is somewhat confusing to us that, under these circumstances, we find that the `--namespace` and `-n` flags are ignored when the current context in the kubeconfig file provides a namespace. We've verified this on 4 machines across 2 companies.

My question is: **is this desired behavior?**

If it is not, let me know, and we will provide a concise code sample that reproduces the issue.

If it is useful, we dug deep into this in [our issue 103](https://github.com/ksonnet/kubecfg/issues/103). The essential nature of the problem is that `DirectClientConfig#getContext` will call `mergo.Merge` with the overwrite flag set to `false`, which causes the overrides (such as the `-n` or `--namespace` flags) to NOT overwrite the current values if they are present. So, if the value is set in the kubeconfig file, they are NOT overwritten. This causes us to ignore the flag.

For posterity, I will quote the relevant parts of the issue""

> Here's what's going on. As I mentioned before, we create an `overrides := clientcmd.ConfigOverrides` to pass into `clientcmd.NewInteractiveDefferedLoadingClientConfig`. By making a package-level `var` we can use `fmt.Println` to verify that this `overrides.Context.Namespace` is set correctly by the `--namespace` flag just before we call `clientConfig.Namespace()` in `update.go`. So the data is there, the question at hand is: why is it not being reported correctly?
>
> * `overrides` is being passed into `NewInteractiveClientConfig` when our `init` routines call `createClientConfig`. A pointer to `overrides` is stored as a member inside it.
> * `clientConfig.Namespace()` is called in `update.go`. This would produce the namespace from the current client context, if we continued.
> * `clientConfig.Namespace()` calls `mergedKubeConfig := config.createClientConfig()`. This returns a `ClientConfig` (it's initialized once, so subsequent calls just return the already-initialized member).
> * `clientConfig.Namespace()` then calls `mergedKubeConfig.Namespace()`.
> * `mergedKubeConfig.Namespace()` calls `mergedKubeConfig.getContext()`. Here's where it gets interesting.
>   * `getContext` retrieves the current context from the client, and merges it with an empty context. This gives us a context identical to the currently default context in the kubeconfig file.
>   * Smoking gun: `getContext` then merges its context with the overrides using a call to `mergo.Merge` with the overwrite flag set to `false`. Thus, the `-n` flag override is ignored.

Finally, cc @anguslees, who has been my partner in crime on this issue.",closed,False,2017-09-06 01:15:08,2018-03-11 03:51:33
client-go,discordianfish,https://github.com/kubernetes/client-go/issues/289,https://api.github.com/repos/kubernetes/client-go/issues/289,Document where to use versioned struct and where not,"Hi,

I'm using client-go's [NewSharedInformer](https://godoc.org/k8s.io/client-go/tools/cache#NewSharedInformer) to access ingresses but I'm not sure which expectedType to use.

I've started out using `(k8s.io/client-go/pkg/apis/)extensions.Ingress` which worked on my 1.7 clusters but another user reported their got the error `expected type *extensions.Ingress, but watch event object had type *v1beta1.Ingress"" component`. If I use `(k8s.io/client-go/pkg/apis/extensions/)v1beta1.Ingress` it seems to work on all cluster but I couldn't find any authoritative information about The Right Way.

Please document which structs to use with NewSharedInformer, preferably in a way that still works when Ingress get moved out of beta.",open,False,2017-09-06 10:56:19,2018-07-05 09:29:53
client-go,timoreimann,https://github.com/kubernetes/client-go/issues/290,https://api.github.com/repos/kubernetes/client-go/issues/290,Cannot find AddOrUpdateTaint function anymore after migrating from v3 to v4,"We recently upgraded a project from client-go v3.0.0 to v4.0.0. Previously, we used the [`AddOrUpdateTaint` function](https://github.com/kubernetes/client-go/blob/v3.0.0/pkg/api/v1/helpers.go#L524) to apply taints to nodes conveniently. Unfortunately, I wasn't able to find the function anymore after the upgrade to the newer client-go version.

Between v3 and v4, [this commit](https://github.com/kubernetes/client-go/commit/bb2e2ad83cfeab769ec660af19256ba6b0f2c6ef) was pushed to refactor the function-hosting `helpers.go` function into multiple files and move them into a new sub-package. `AddOrUpdateTaint` was removed there but apparently not re-added again. Interestingly, the [originating main repository commit](https://github.com/kubernetes/kubernetes/commit/d4850b6c2b3b367345ef944a12a778d860fdd0db#diff-4c2060e6a603f68c60831b6c578e5ad9R10) still included the function, though not in a sub-directory of `staging` (where the whole `helpers` sub-package seems to be missing).

Is `AddOrUpdateTaint` gone for good? If so, what's its designated replacement? Or is it still around and I just happen to miss it?

Thanks.",closed,False,2017-09-07 08:37:16,2017-09-08 17:49:30
client-go,ggaaooppeenngg,https://github.com/kubernetes/client-go/issues/291,https://api.github.com/repos/kubernetes/client-go/issues/291,How to add context in the request?,"I think add context in the request cloud help in tracing system as well as early cancel, is there a support for `golang.org/x/net/context` ?",closed,False,2017-09-08 03:20:13,2018-02-12 07:34:30
client-go,justinsb,https://github.com/kubernetes/client-go/issues/292,https://api.github.com/repos/kubernetes/client-go/issues/292,Does not build with bazel,"Having trouble getting the recommended v4.0.0 tag working with bazel:

* apimachinery requires @io_kubernetes_build, I grabbed this from the kubernetes/kubernetes WORKSAPCE

* Then hit `.../external/io_k8s_apimachinery/pkg/util/sets/BUILD:25:1: no such package '@io_k8s_apimachinery//hack/boilerplate': BUILD file not found on package path and referenced by '@io_k8s_apimachinery//pkg/util/sets:set-gen'`

Do we have any test coverage of bazel builds?  This would both serve as an example and assurance that the code builds...",closed,False,2017-09-09 20:42:19,2018-03-11 04:52:34
client-go,bay1ts,https://github.com/kubernetes/client-go/issues/293,https://api.github.com/repos/kubernetes/client-go/issues/293,install error,"I want to achieve similar kubectl drain function, when I refer to the source code, I hit the following error in function ""evictPods"":

../pkg/k8s/K8S.go:190: cannot use ""k8s.io/apimachinery/pkg/apis/meta/v1"".TypeMeta literal (type ""k8s.io/apimachinery/pkg/apis/meta/v1"".TypeMeta) as type ""k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".TypeMeta in field value
../pkg/k8s/K8S.go:194: cannot use ""k8s.io/apimachinery/pkg/apis/meta/v1"".ObjectMeta literal (type ""k8s.io/apimachinery/pkg/apis/meta/v1"".ObjectMeta) as type ""k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".ObjectMeta in field value
../pkg/k8s/K8S.go:195: cannot use deleteOptions (type *""k8s.io/apimachinery/pkg/apis/meta/v1"".DeleteOptions) as type *""k8s.io/kubernetes/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".DeleteOptions in field value
../pkg/k8s/K8S.go:198: cannot use eviction (type *policy.Eviction) as type *""acp_node/vendor/k8s.io/client-go/pkg/apis/policy/v1beta1"".Eviction in argument to clientSet.Policy().Evictions(eviction.ObjectMeta.Namespace).Evict
",closed,False,2017-09-11 02:31:32,2018-05-11 05:20:11
client-go,sebglon,https://github.com/kubernetes/client-go/issues/294,https://api.github.com/repos/kubernetes/client-go/issues/294,Exec cmd on container not work with example config,"I don't now why but, i have create  a <script src=""https://gist.github.com/sebglon/88662492f979471dd25fd5abd87451ab.js"">gist</script> to exec cmd on container.

I have using example read config. but with this, exec cmd not work i have an error without message.
If i enable glog level 9, i can see, than versionedparameter are not put on request.

I don't say why.
If i  force those parameters, i can run an exec.

I want Help to understant those.

Is it on link with #45",closed,False,2017-09-16 12:57:04,2018-03-11 17:04:32
client-go,timchenxiaoyu,https://github.com/kubernetes/client-go/issues/295,https://api.github.com/repos/kubernetes/client-go/issues/295,patch configmap error,"patch configmap error
```
if _, err := clientset.CoreV1().ConfigMaps(""default"").Patch(""my-config"",types.StrategicMergePatchType, body); nil != err {
			glog.Errorf(""Failed to patch configmap: %#v\n"", err)

		}
```
the object has been modified; please apply your changes to the latest version and try again"", Reason:""Conflict"", Details:(*v1.StatusDetails)(0xc42009f920), Code:409}",closed,False,2017-09-18 11:48:37,2017-09-19 02:59:05
client-go,aaskey,https://github.com/kubernetes/client-go/issues/296,https://api.github.com/repos/kubernetes/client-go/issues/296,not enough arguments in call to spec.ExpandSpec,"Hi there,

I saw the following error when using v4.0.0 client-go in my project. 

```
vendor/github.com/go-openapi/loads/spec.go:140:27: not enough arguments in call to spec.ExpandSpec
	have (*spec.Swagger)
	want (*spec.Swagger, *spec.ExpandOptions)
```
Glide is used to manage my project's dependency. Here is the content of glide.yaml. 
```
import:
- package: google.golang.org/api/container/v1
- package: k8s.io/client-go
  version: v4.0.0
- package: github.com/spf13/pflag
- package: github.com/spf13/cobra/cobra
- package: github.com/coreos/etcd/client
- package: github.com/sirupsen/logrus
```
I used 
```
glide update --strip-vendor
```
To pull the dependancies to vendor directory to my project. 

Did I miss any steps to make client-go dependencies correct?

",closed,False,2017-09-19 21:17:50,2017-09-26 22:25:58
client-go,tamalsaha,https://github.com/kubernetes/client-go/issues/297,https://api.github.com/repos/kubernetes/client-go/issues/297,Get deleted object from work queue,"We are in the process of using workqueue for our various controllers. One of the issue I see is that dequeue from workqueue does not return the object (it is nil). I understand the idea that the desired state by user is `nil`, after an object is deleted. But there are cases where we need access to the metadata/spec on the object. One work around I have found is to register my controller as a finalizer so I can get the object in the UpdateFunc(). One issue with finalizers is that someone can remove them by mistake. Can WorkQueue return deleted objects?

https://github.com/kubernetes/client-go/blob/c6f8cf2c47d21d55fa0df928291b2580544886c8/examples/workqueue/main.go#L69-L88

",closed,False,2017-09-19 22:34:10,2017-12-12 18:38:23
client-go,CSharpRU,https://github.com/kubernetes/client-go/issues/298,https://api.github.com/repos/kubernetes/client-go/issues/298,too many arguments in call to r.DecodeBytes,"Hello there,

I'm having a strange issue with the client code, check info below.

Client version: `v4.0.0`
Go/Dep version: 
```
dep:
 version     : devel
 build date  : 
 git hash    : 
 go version  : go1.9
 go compiler : gc
 platform    : darwin/amd64
```
Log:
```
...
vendor/k8s.io/client-go/pkg/api/v1/types.generated.go:665:26: too many arguments in call to r.DecodeBytes
        have ([]byte, bool, bool)
        want ([]byte, bool)
vendor/k8s.io/client-go/pkg/api/v1/types.generated.go:2423:26: too many arguments in call to r.DecodeBytes
        have ([]byte, bool, bool)
        want ([]byte, bool)
vendor/k8s.io/client-go/pkg/api/v1/types.generated.go:4252:26: too many arguments in call to r.DecodeBytes
        have ([]byte, bool, bool)
        want ([]byte, bool)
vendor/k8s.io/client-go/pkg/api/v1/types.generated.go:5282:26: too many arguments in call to r.DecodeBytes
        have ([]byte, bool, bool)
        want ([]byte, bool)
vendor/k8s.io/client-go/pkg/api/v1/types.generated.go:5975:26: too many arguments in call to r.DecodeBytes
        have ([]byte, bool, bool)
        want ([]byte, bool)
vendor/k8s.io/client-go/pkg/api/v1/types.generated.go:6886:26: too many arguments in call to r.DecodeBytes
        have ([]byte, bool, bool)
        want ([]byte, bool)
vendor/k8s.io/client-go/pkg/api/v1/types.generated.go:8081:26: too many arguments in call to r.DecodeBytes
        have ([]byte, bool, bool)
        want ([]byte, bool)
vendor/k8s.io/client-go/pkg/api/v1/types.generated.go:9242:26: too many arguments in call to r.DecodeBytes
        have ([]byte, bool, bool)
        want ([]byte, bool)
vendor/k8s.io/client-go/pkg/api/v1/types.generated.go:9564:26: too many arguments in call to r.DecodeBytes
        have ([]byte, bool, bool)
        want ([]byte, bool)
vendor/k8s.io/client-go/pkg/api/v1/types.generated.go:9941:26: too many arguments in call to r.DecodeBytes
        have ([]byte, bool, bool)
        want ([]byte, bool)
vendor/k8s.io/client-go/pkg/api/v1/types.generated.go:9941:26: too many errors
...
```
Example of code:
```go
package main

import (
	""fmt""

	metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
	""k8s.io/client-go/kubernetes""
	""k8s.io/client-go/rest""
	""k8s.io/client-go/tools/clientcmd""
)

func main() {
	config, err := rest.InClusterConfig()
	if err != nil {
		panic(err.Error())
	}
		
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		panic(err.Error())
	}

	pods, err := clientset.CoreV1().Pods("""").List(metav1.ListOptions{})
	if err != nil {
		panic(err.Error())
	}

	if len(pods.Items) > 0 {
		fmt.Printf(""There are %d pods in the cluster\n"", len(pods.Items))
		for _, pod := range pods.Items {
			fmt.Printf(""pod %s\n"", pod.GetName())
		}
	} else {
		fmt.Println(""No pods found!"")
	}
}
```

What I did wrong? Error definitely depends on `github.com/ugorji/go/codec`. Do I need to install specific hash or something like that?",closed,False,2017-09-22 09:06:20,2018-03-12 01:12:33
client-go,ianlewis,https://github.com/kubernetes/client-go/issues/299,https://api.github.com/repos/kubernetes/client-go/issues/299,"dep init fails with ""No versions of k8s.io/apimachinery met constraints""","Maybe similar to #186 but errors on apimachinery.

```
$ mkdir -p $GOPATH/src/test
$ cd $GOPATH/src/test
$ curl -o main.go https://raw.githubusercontent.com/kubernetes/client-go/release-4.0/examples/out-of-cluster-client-configuration/main.go
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100  2535  100  2535    0     0  14419      0 --:--:-- --:--:-- --:--:-- 14485

$ dep init
No versions of k8s.io/apimachinery met constraints:
	master: unable to update checked out version: : command failed: [git checkout 3b05bbfa0a45413bfa184edbf9af617e277962fb]: exit status 1
	release-1.6: unable to update checked out version: : command failed: [git checkout 35be0db31bd6e5635ef6366708dc2b137392f6a2]: exit status 1
	release-1.7: unable to update checked out version: : command failed: [git checkout 8ab5f3d8a330c2e9baaf84e39042db8d49034ae2]: exit status 1
	release-1.8: unable to update checked out version: : command failed: [git checkout 9d38e20d609d27e00d4ec18f7b9db67105a2bde0]: exit status 1
```",closed,False,2017-09-28 06:03:02,2017-12-12 05:24:25
client-go,peterwillcn,https://github.com/kubernetes/client-go/issues/300,https://api.github.com/repos/kubernetes/client-go/issues/300,How to get pods ip?,How to get pod ip?,closed,False,2017-09-28 15:59:45,2017-10-01 01:11:25
client-go,nilebox,https://github.com/kubernetes/client-go/issues/301,https://api.github.com/repos/kubernetes/client-go/issues/301,release-4.0 is out of sync,"The latest client-go specific commit in kubernetes monorepo `1.7.6` release (`release-1.7` branch) is the following (Sep 14): https://github.com/kubernetes/kubernetes/commit/4bc5e7f9a6c25dc4c03d4d656f2cefd21540e28c
but the latest commit in `release-4.0` branch of client-go repo is ""v.1.7.5-beta.0"" (Aug 16) https://github.com/kubernetes/client-go/commits/release-4.0",closed,False,2017-09-29 01:14:45,2017-12-19 17:12:09
client-go,alok87,https://github.com/kubernetes/client-go/pull/302,https://api.github.com/repos/kubernetes/client-go/issues/302,Typo fix,Typo fix,closed,True,2017-10-02 08:50:27,2017-10-30 22:49:27
client-go,jekohk,https://github.com/kubernetes/client-go/issues/303,https://api.github.com/repos/kubernetes/client-go/issues/303,unit tests failing,"I'm attempting to add to the CRUD example which requires forking the main kubernetes repository, and making changes in the staging area.

Following the [community development guide](https://github.com/kubernetes/community/blob/master/contributors/devel/development.md) I successfully build with `make` and pass all presubmission verification with `make update` but `make test` always fails with the following error:

```can't load package: package k8s.io/kubernetes/_tmp/federation/pkg/dnsprovider: code in directory /home/john/go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/_tmp/federation/pkg/dnsprovider expects import ""k8s.io/kubernetes/federation/pkg/dnsprovider""
_tmp/federation/pkg/dnsprovider/providers/google/clouddns/clouddns.go:32:2: use of internal package not allowed
_tmp/federation/pkg/dnsprovider/providers/google/clouddns/interface.go:21:2: use of internal package not allowed
_tmp/federation/pkg/dnsprovider/providers/google/clouddns/clouddns.go:33:2: use of internal package not allowed
can't load package: package k8s.io/kubernetes/_tmp/federation/pkg/federation-controller/cluster: code in directory /home/john/go/src/k8s.io/kubernetes/_output/local/go/src/k8s.io/kubernetes/_tmp/federation/pkg/federation-controller/cluster expects import ""k8s.io/kubernetes/federation/pkg/federation-controller/cluster""
```

I haven't changed any of the imports in the example, so not sure what's causing the issue. 
Alternatively, is it even necessary to compile k8s.io/kubernetes when working on client-go examples? It's not very clear if the same PR requirements apply to examples and client libraries in staging ",closed,False,2017-10-02 21:10:43,2017-10-02 23:23:13
client-go,JackQuincy,https://github.com/kubernetes/client-go/issues/304,https://api.github.com/repos/kubernetes/client-go/issues/304,Referenced docker revision in 4.0.0 no longer in github,"Seems like docker changed their history. 
version cd27f179f2c10c5d300e6d09025b538c475b0d51 is no longer in their history. this is breaking me trying to use glide to import client-go.",closed,False,2017-10-03 00:20:15,2017-10-10 21:42:04
client-go,tamalsaha,https://github.com/kubernetes/client-go/issues/305,https://api.github.com/repos/kubernetes/client-go/issues/305,Client-go 5.0.0 ?,When can we expect client-go 5.0.0 released?,closed,False,2017-10-04 03:23:31,2017-10-24 10:30:45
client-go,rickypai,https://github.com/kubernetes/client-go/pull/306,https://api.github.com/repos/kubernetes/client-go/issues/306,Update installation doc to reflect current version and dep command line use,@caesarxuchao,closed,True,2017-10-04 05:13:22,2017-10-30 22:48:39
client-go,timothysc,https://github.com/kubernetes/client-go/issues/307,https://api.github.com/repos/kubernetes/client-go/issues/307,Backwards compatibility testing client 5.0.0 yields errors. ,"Running client 5.0.0 against 1.6 has shown some errors in the api. 

https://scanner.heptio.com/8617196843a164e27ef5fb71b78c34e8/diagnostics/ 
```
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/common/downward_api.go:94
Error creating Pod
Expected error:
    <*errors.StatusError | 0xc4212f9d40>: {
        ErrStatus: {
            TypeMeta: {Kind: """", APIVersion: """"},
            ListMeta: {SelfLink: """", ResourceVersion: """", Continue: """"},
            Status: ""Failure"",
            Message: ""Pod \""downward-api-e1e7a01c-a93e-11e7-93c2-0a580ac00202\"" is invalid: spec.containers[0].env[1].valueFrom.fieldRef.fieldPath: Invalid value: \""status.hostIP\"": error converting fieldPath: field label not supported: status.hostIP"",
            Reason: ""Invalid"",
            Details: {
                Name: ""downward-api-e1e7a01c-a93e-11e7-93c2-0a580ac00202"",
                Group: """",
                Kind: ""Pod"",
                UID: """",
                Causes: [
                    {
                        Type: ""FieldValueInvalid"",
                        Message: ""Invalid value: \""status.hostIP\"": error converting fieldPath: field label not supported: status.hostIP"",
                        Field: ""spec.containers[0].env[1].valueFrom.fieldRef.fieldPath"",
                    },
                ],
                RetryAfterSeconds: 0,
            },
            Code: 422,
        },
    }
    Pod ""downward-api-e1e7a01c-a93e-11e7-93c2-0a580ac00202"" is invalid: spec.containers[0].env[1].valueFrom.fieldRef.fieldPath: Invalid value: ""status.hostIP"": error converting fieldPath: field label not supported: status.hostIP
not to have occurred
/go/src/k8s.io/kubernetes/_output/dockerized/go/src/k8s.io/kubernetes/test/e2e/framework/pods.go:76
``` 

/cc @ncdc @chuckha @sttts 
",closed,False,2017-10-04 20:56:23,2017-10-07 18:00:16
client-go,wangweihong,https://github.com/kubernetes/client-go/issues/308,https://api.github.com/repos/kubernetes/client-go/issues/308,object return by client-go informer don't have  api Kind info,"When I use informer to watch cluster resource infos, I find  runtime.Object return by informer  don't include object `Kind` info. 
`fmt.Println(obj.GetObjectKind().GetVersionKind().String()) `print ` /, Kind=`",closed,False,2017-10-10 03:47:34,2018-11-23 00:44:12
client-go,mrIncompetent,https://github.com/kubernetes/client-go/issues/309,https://api.github.com/repos/kubernetes/client-go/issues/309,Missing ControllerExpectations,"I see the Daemonset controller in kube using ControllerExpectations to wait until a informer got the update that you just triggered.
For example:
If the daemonset controller creates a pod, it needs to wait until the informer got the add-event, so it does not create a seconds one in the meantime.

Is there anything there yet in the client?",closed,False,2017-10-11 12:42:23,2018-03-12 21:32:34
client-go,lzlicd,https://github.com/kubernetes/client-go/issues/310,https://api.github.com/repos/kubernetes/client-go/issues/310,Auto config reload clientset?,"For clientset created via kubernetes.NewForConfig(config), is it possible to automatically reload the config since several fields inside config might expire regularly like client-certificate, and the clientset becomes stale. Kubectl is fine since it's be used in interactive way.",closed,False,2017-10-12 20:30:52,2018-03-13 21:56:00
client-go,jpeeler,https://github.com/kubernetes/client-go/issues/311,https://api.github.com/repos/kubernetes/client-go/issues/311,Change self signed certificates to not include extended key usage,"The current code specifies server auth: https://github.com/kubernetes/client-go/blob/82aa063804cf055e16e8911250f888bc216e8b61/util/cert/cert.go#L155
The problem is the current self generated certificates do not work with curl (on Fedora):
```
curl --cacert apiserver.crt https://localhost:32786 -v
* Rebuilt URL to: https://localhost:32786/
*   Trying ::1...
* TCP_NODELAY set
* Connected to localhost (::1) port 32786 (#0)
* Initializing NSS with certpath: sql:/etc/pki/nssdb
*   CAfile: apiserver.crt
  CApath: none
* Server certificate:
* 	subject: CN=<nil>@1507833167
* 	start date: Oct 12 18:32:47 2017 GMT
* 	expire date: Oct 12 18:32:47 2018 GMT
* 	common name: <nil>@1507833167
* 	issuer: CN=127.0.0.1@1507833167
* NSS error -8101 (SEC_ERROR_INADEQUATE_CERT_TYPE)
* Certificate type not approved for application.
* stopped the pause stream!
* Closing connection 0
curl: (60) Certificate type not approved for application.
More details here: https://curl.haxx.se/docs/sslcerts.html
```
Removing the extended key usage allows everything to work as expected. Since these are for self signed certificates, I am hoping that the removal isn't a security issue. Some potentially relevant links:

https://tools.ietf.org/html/rfc5280#section-4.2.1.12
https://bugzilla.mozilla.org/show_bug.cgi?id=1049176
https://github.com/google/stenographer/issues/124
(?) https://github.com/golang/go/issues/11087",closed,False,2017-10-12 21:38:55,2018-02-23 08:34:34
client-go,EIrwin,https://github.com/kubernetes/client-go/issues/312,https://api.github.com/repos/kubernetes/client-go/issues/312,Out-Of-Cluster example doesn't build when vendoring with dep,"I have been using `k8s.io/client-go` for awhile and have recently been unable to get it to compile due to the following error.

```# k8s.io/client-go/examples/out-of-cluster-client-configuration/vendor/k8s.io/client-go/tools/clientcmd/api
vendor/k8s.io/client-go/tools/clientcmd/api/register.go:35: cannot use Config literal (type *Config) as type runtime.Object in argument to scheme.AddKnownTypes:
	*Config does not implement runtime.Object (missing DeepCopyObject method)
# k8s.io/client-go/examples/out-of-cluster-client-configuration/vendor/k8s.io/client-go/pkg/apis/admissionregistration
vendor/k8s.io/client-go/pkg/apis/admissionregistration/register.go:47: cannot use InitializerConfiguration literal (type *InitializerConfiguration) as type runtime.Object in argument to scheme.AddKnownTypes:
	*InitializerConfiguration does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/admissionregistration/register.go:48: cannot use InitializerConfigurationList literal (type *InitializerConfigurationList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*InitializerConfigurationList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/admissionregistration/register.go:49: cannot use ExternalAdmissionHookConfiguration literal (type *ExternalAdmissionHookConfiguration) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ExternalAdmissionHookConfiguration does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/admissionregistration/register.go:50: cannot use ExternalAdmissionHookConfigurationList literal (type *ExternalAdmissionHookConfigurationList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ExternalAdmissionHookConfigurationList does not implement runtime.Object (missing DeepCopyObject method)
# k8s.io/client-go/examples/out-of-cluster-client-configuration/vendor/k8s.io/client-go/pkg/apis/authentication
vendor/k8s.io/client-go/pkg/apis/authentication/register.go:47: cannot use TokenReview literal (type *TokenReview) as type runtime.Object in argument to scheme.AddKnownTypes:
	*TokenReview does not implement runtime.Object (missing DeepCopyObject method)
# k8s.io/client-go/examples/out-of-cluster-client-configuration/vendor/k8s.io/client-go/pkg/apis/certificates
vendor/k8s.io/client-go/pkg/apis/certificates/register.go:48: cannot use CertificateSigningRequest literal (type *CertificateSigningRequest) as type runtime.Object in argument to scheme.AddKnownTypes:
	*CertificateSigningRequest does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/certificates/register.go:49: cannot use CertificateSigningRequestList literal (type *CertificateSigningRequestList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*CertificateSigningRequestList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/certificates/zz_generated.deepcopy.go:73: cannot use in.LastUpdateTime.DeepCopy() (type *v1.Time) as type v1.Time in assignment
# k8s.io/client-go/examples/out-of-cluster-client-configuration/vendor/k8s.io/client-go/pkg/apis/authorization
vendor/k8s.io/client-go/pkg/apis/authorization/register.go:47: cannot use SelfSubjectAccessReview literal (type *SelfSubjectAccessReview) as type runtime.Object in argument to scheme.AddKnownTypes:
	*SelfSubjectAccessReview does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/authorization/register.go:48: cannot use SubjectAccessReview literal (type *SubjectAccessReview) as type runtime.Object in argument to scheme.AddKnownTypes:
	*SubjectAccessReview does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/authorization/register.go:49: cannot use LocalSubjectAccessReview literal (type *LocalSubjectAccessReview) as type runtime.Object in argument to scheme.AddKnownTypes:
	*LocalSubjectAccessReview does not implement runtime.Object (missing DeepCopyObject method)
# k8s.io/client-go/examples/out-of-cluster-client-configuration/vendor/k8s.io/client-go/pkg/apis/storage
vendor/k8s.io/client-go/pkg/apis/storage/register.go:47: cannot use StorageClass literal (type *StorageClass) as type runtime.Object in argument to scheme.AddKnownTypes:
	*StorageClass does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/storage/register.go:48: cannot use StorageClassList literal (type *StorageClassList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*StorageClassList does not implement runtime.Object (missing DeepCopyObject method)
# k8s.io/client-go/examples/out-of-cluster-client-configuration/vendor/k8s.io/client-go/pkg/apis/rbac
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:47: cannot use Role literal (type *Role) as type runtime.Object in argument to scheme.AddKnownTypes:
	*Role does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:48: cannot use RoleBinding literal (type *RoleBinding) as type runtime.Object in argument to scheme.AddKnownTypes:
	*RoleBinding does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:49: cannot use RoleBindingList literal (type *RoleBindingList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*RoleBindingList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:50: cannot use RoleList literal (type *RoleList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*RoleList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:52: cannot use ClusterRole literal (type *ClusterRole) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ClusterRole does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:53: cannot use ClusterRoleBinding literal (type *ClusterRoleBinding) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ClusterRoleBinding does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:54: cannot use ClusterRoleBindingList literal (type *ClusterRoleBindingList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ClusterRoleBindingList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/rbac/register.go:55: cannot use ClusterRoleList literal (type *ClusterRoleList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ClusterRoleList does not implement runtime.Object (missing DeepCopyObject method)
# k8s.io/client-go/examples/out-of-cluster-client-configuration/vendor/k8s.io/client-go/pkg/apis/policy
vendor/k8s.io/client-go/pkg/apis/policy/register.go:49: cannot use PodDisruptionBudget literal (type *PodDisruptionBudget) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodDisruptionBudget does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/policy/register.go:50: cannot use PodDisruptionBudgetList literal (type *PodDisruptionBudgetList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodDisruptionBudgetList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/policy/register.go:51: cannot use Eviction literal (type *Eviction) as type runtime.Object in argument to scheme.AddKnownTypes:
	*Eviction does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/apis/policy/zz_generated.deepcopy.go:148: cannot use val.DeepCopy() (type *v1.Time) as type v1.Time in assignment
# k8s.io/client-go/examples/out-of-cluster-client-configuration/vendor/k8s.io/client-go/pkg/api
vendor/k8s.io/client-go/pkg/api/register.go:76: cannot use Pod literal (type *Pod) as type runtime.Object in argument to scheme.AddKnownTypes:
	*Pod does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:77: cannot use PodList literal (type *PodList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:78: cannot use PodStatusResult literal (type *PodStatusResult) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodStatusResult does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:79: cannot use PodTemplate literal (type *PodTemplate) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodTemplate does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:80: cannot use PodTemplateList literal (type *PodTemplateList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*PodTemplateList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:81: cannot use ReplicationControllerList literal (type *ReplicationControllerList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ReplicationControllerList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:82: cannot use ReplicationController literal (type *ReplicationController) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ReplicationController does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:83: cannot use ServiceList literal (type *ServiceList) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ServiceList does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:84: cannot use Service literal (type *Service) as type runtime.Object in argument to scheme.AddKnownTypes:
	*Service does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:85: cannot use ServiceProxyOptions literal (type *ServiceProxyOptions) as type runtime.Object in argument to scheme.AddKnownTypes:
	*ServiceProxyOptions does not implement runtime.Object (missing DeepCopyObject method)
vendor/k8s.io/client-go/pkg/api/register.go:85: too many errors
```

I have gotten this in several projects where I have recently vendored (including the out-of-cluster example in `client-go/examples`).

I followed the instructions for `dep` in [https://github.com/kubernetes/client-go/blob/master/INSTALL.md](https://github.com/kubernetes/client-go/blob/master/INSTALL.md) but had the same result. 

The `Gopkg.lock` has the following

```
[[projects]]
  branch = ""master""
  name = ""k8s.io/apimachinery""
  packages = [...]
  revision = ""3b05bbfa0a45413bfa184edbf9af617e277962fb""

[[projects]]
  name = ""k8s.io/client-go""
  packages = [...]
  revision = ""d92e8497f71b7b4e0494e5bd204b48d34bd6f254""
  version = ""v4.0.0""
```

and the `Gopkg.toml` has the following

```

[[constraint]]
  branch = ""master""
  name = ""k8s.io/apimachinery""

[[constraint]]
  name = ""k8s.io/client-go""
  version = ""4.0.0""
```

Any idea on what is causing this and how to fix this?",closed,False,2017-10-14 13:54:07,2018-03-21 00:43:53
client-go,roycaihw,https://github.com/kubernetes/client-go/pull/313,https://api.github.com/repos/kubernetes/client-go/issues/313,add changelog for v5.0.0,,closed,True,2017-10-17 23:03:31,2017-10-20 20:25:33
client-go,Spellchaser,https://github.com/kubernetes/client-go/issues/314,https://api.github.com/repos/kubernetes/client-go/issues/314,Support apiserver access from pods using firewall-only security option,"I'm trying to connect to the apiserver from a pod within a cluster. This might be a support/help question on how to setup kubernetes. 

**Trace Path:**
I followed the [main README](https://github.com/kubernetes/client-go/blob/master/README.md#how-to-use-it) to [Example setup](https://github.com/kubernetes/client-go/tree/master/examples/in-cluster-client-configuration) to [Example go code](https://github.com/kubernetes/client-go/blob/master/examples/in-cluster-client-configuration/main.go#L32) to  what is called by [rest.InClusterConfig](https://github.com/kubernetes/client-go/blob/master/rest/config.go#L323)


**Error Output:**
The error I'm getting is the same as an [old kubernetes issue](https://github.com/kubernetes/kubernetes/issues/27973)
When I deploy and check the logs, I see the same message 
```
open /var/run/secrets/kubernetes.io/serviceaccount/token: no such file or directory
panic: open /var/run/secrets/kubernetes.io/serviceaccount/token: no such file or directory
```

**Resources consulted**
I am not passing the `--service-account-private-key-file` nor the `--service-account-key-file` option referenced [here](https://kubernetes.io/docs/admin/service-accounts-admin/#token-controller). But in the [authentication article](https://kubernetes.io/docs/admin/authentication/#service-account-tokens) it says if it is unspecified, the API server's TLS private key will be used. While my cluster setup does not use TLS, it does have keys in /var/run/kubernetes/ but no directory /srv/kubernetes. I see that `--service-account-private-key-file=/srv/kubernetes/server.key` is expected in the [controller manager config](https://kubernetes.io/docs/getting-started-guides/scratch/#apiserver-controller-manager-and-scheduler)
```
[user@box ~]$ ls -Al /var/run/kubernetes/
total 16
-rw-r--r-- 1 kube kube 1212 Oct 10 18:05 apiserver.crt
-rw------- 1 kube kube 1675 Oct 10 18:05 apiserver.key
-rw-r--r-- 1 root root 1208 Oct 10 18:14 kubelet.crt
-rw------- 1 root root 1679 Oct 10 18:14 kubelet.key
```

**Environment Debug Output**
```
[user@box ~]$ kubectl version
Client Version: version.Info{Major:""1"", Minor:""5"", GitVersion:""v1.5.2"", GitCommit:""c55cf2b7d8bfeb947f77453415d775d7f71c89c2"", GitTreeState:""clean"", BuildDate:""2017-02-06T23:54:31Z"", GoVersion:""go1.7.4"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""5"", GitVersion:""v1.5.2"", GitCommit:""c55cf2b7d8bfeb947f77453415d775d7f71c89c2"", GitTreeState:""clean"", BuildDate:""2017-02-06T23:54:31Z"", GoVersion:""go1.7.4"", Compiler:""gc"", Platform:""linux/amd64""}
[user@box ~]$ kubectl config view
apiVersion: v1
clusters: []
contexts: []
current-context: """"
kind: Config
preferences: {}
users: []
[user@box ~]$ kubectl describe secrets
[user@box ~]$ kubectl get secrets --all-namespaces -o yaml
No resources found.
apiVersion: v1
items: []
kind: List
metadata: {}
resourceVersion: """"
selfLink: """"
[user@box ~]$ kubectl describe sa
Name:           default
Namespace:      default
Labels:         <none>

Image pull secrets:     <none>

Mountable secrets:      <none>

Tokens:                 <none>

```

**Debug steps taken:**
Enabled service accounts in apiserver configs
```
KUBE_ADMISSION_CONTROL=""--admission_control=NamespaceLifecycle,NamespaceExists,LimitRanger,SecurityContextDeny,ServiceAccount,ResourceQuota""
```

Manually creating a [ServiceAccountToken Secret](https://kubernetes.io/docs/admin/service-accounts-admin/#token-controller)
```
[user@box ~]$ kubectl create -f ./secret.json
secret ""mysecretname"" created
[user@box ~]$ kubectl describe secret mysecretname
Name:           mysecretname
Namespace:      default
Labels:         <none>
Annotations:    kubernetes.io/service-account.name=myserviceaccount

Type:   kubernetes.io/service-account-token

Data
====
[user@box ~]$ kubectl get secrets --all-namespaces -o yaml
apiVersion: v1
items:
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      kubernetes.io/service-account.name: myserviceaccount
    creationTimestamp: 2017-10-18T19:33:51Z
    name: mysecretname
    namespace: default
    resourceVersion: ""2447162""
    selfLink: /api/v1/namespaces/default/secrets/mysecretname
    uid: 45674229-b43b-11e7-81ff-a0481cb92994
  type: kubernetes.io/service-account-token
kind: List
metadata: {}
resourceVersion: """"
selfLink: """"
[user@box ~]$ kubectl delete secret mysecretname
secret ""mysecretname"" deleted
```

Manually creating a [service](https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/) [account](https://kubernetes.io/docs/admin/authentication/#service-account-tokens) 
```
[user@box ~]$ kubectl create serviceaccount jenkins
serviceaccount ""jenkins"" created
[user@box ~]$ kubectl get serviceaccounts --all-namespaces -o yaml
apiVersion: v1
items:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: 2017-10-11T00:20:18Z
    name: default
    namespace: default
    resourceVersion: ""5897""
    selfLink: /api/v1/namespaces/default/serviceaccounts/default
    uid: f6484004-ae19-11e7-902c-7446a072e1e8
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: 2017-10-18T19:34:56Z
    name: jenkins
    namespace: default
    resourceVersion: ""2447275""
    selfLink: /api/v1/namespaces/default/serviceaccounts/jenkins
    uid: 6bcfd6c3-b43b-11e7-81ff-a0481cb92994
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    creationTimestamp: 2017-10-11T00:20:18Z
    name: default
    namespace: kube-system
    resourceVersion: ""5898""
    selfLink: /api/v1/namespaces/kube-system/serviceaccounts/default
    uid: f6489af0-ae19-11e7-902c-7446a072e1e8
kind: List
metadata: {}
resourceVersion: """"
selfLink: """"
[user@box ~]$ kubectl create -f /tmp/serviceaccount.yaml
serviceaccount ""build-robot"" created
[user@box ~]$ kubectl get serviceaccounts/build-robot -o yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  creationTimestamp: 2017-10-18T19:46:43Z
  name: build-robot
  namespace: default
  resourceVersion: ""2448531""
  selfLink: /api/v1/namespaces/default/serviceaccounts/build-robot
  uid: 113bc256-b43d-11e7-81ff-a0481cb92994
[user@box ~]$ kubectl delete sa/build-robot
serviceaccount ""build-robot"" deleted
[user@box ~]$ kubectl delete sa/jenkins
serviceaccount ""jenkins"" deleted
```
",closed,False,2017-10-18 19:59:31,2017-11-14 20:51:44
client-go,HackToHell,https://github.com/kubernetes/client-go/issues/315,https://api.github.com/repos/kubernetes/client-go/issues/315,Unable to use client-go v4.0.0,"I have already taken a look at https://blog.heptio.com/straighten-out-your-kubernetes-client-go-dependencies-heptioprotip-8baeed46fe7d,

Using client go with apimachinery's master. ",closed,False,2017-10-23 16:47:05,2017-10-24 05:13:29
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/316,https://api.github.com/repos/kubernetes/client-go/issues/316,Update README.md to explain kubernetes tags and the v5.0.0 tag,@cheftako could you help proof read? Thank you.,closed,True,2017-10-25 01:24:51,2017-11-01 02:48:53
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/317,https://api.github.com/repos/kubernetes/client-go/issues/317,add v5.0.1 to CHANGELOG,,closed,True,2017-10-26 02:15:12,2017-10-26 02:17:32
client-go,danderson,https://github.com/kubernetes/client-go/issues/318,https://api.github.com/repos/kubernetes/client-go/issues/318,go-client 5.0.1 does not build with `dep`,"I believe due to recent mutations in k8s.io/apimachinery, specifically https://github.com/kubernetes/apimachinery/commit/158150cb5856aaec3a319ff460ca4b93b715adda .

To reproduce:
 - Create $GOPATH/bug-repro, and copy examples/workqueue/main.go to it.
 - Install/update dep: go get -u github.com/golang/dep && go install github.com/golang/dep/cmd/dep
 - Run `dep init`. Note in the output that it correctly locks go-client to ^5.0.1.
 - `go install .`

The compile will fail with:

# bug-repro/vendor/k8s.io/client-go/tools/cache
vendor/k8s.io/client-go/tools/cache/mutation_detector.go:103:33: scheme.Scheme.Copy undefined (type *""bug-repro/vendor/k8s.io/apimachinery/pkg/runtime"".Scheme has no field or method Copy)",closed,False,2017-10-30 05:01:03,2017-10-31 17:43:23
client-go,caesarxuchao,https://github.com/kubernetes/client-go/pull/319,https://api.github.com/repos/kubernetes/client-go/issues/319,Document that client-go is not yet compatible with dep,@sttts could you proof read this? Thank you.,closed,True,2017-10-31 00:09:20,2017-11-01 19:12:05
client-go,davecheney,https://github.com/kubernetes/client-go/issues/320,https://api.github.com/repos/kubernetes/client-go/issues/320,release-5.0 is missing from he compatibility matrix,"Release 5.0 is not listed in the [compatibility matrix][0]. Which versions of Kubernetes is client-go 5.0 compatible with?

[0]: https://github.com/kubernetes/client-go#compatibility-matrix ",closed,False,2017-10-31 00:16:06,2017-12-19 14:41:40
client-go,mattnworb,https://github.com/kubernetes/client-go/pull/321,https://api.github.com/repos/kubernetes/client-go/issues/321,readme: fix minor typo in Table of Contents,"I saw the warning about this repo not accepting PRs at this time and that changes should be made in  https://github.com/kubernetes/kubernetes, but it seems to me like the README is only maintained in this repo.",closed,True,2017-11-07 15:22:02,2017-12-14 15:40:56
client-go,anumantharaja,https://github.com/kubernetes/client-go/issues/322,https://api.github.com/repos/kubernetes/client-go/issues/322,Deployments are not creating,"Hi I'am trying to create Deployment from client-go but it is not creating and throwing an error as
**the server could not find the requested resource**

My k8s.io/client-go version 4.0.0
My kubernetes version is:
Client Version: version.Info{Major:""1"", Minor:""6"", GitVersion:""v1.6.0"", GitCommit:""fff5156092b56e6bd60fff75aad4dc9de6b6ef37"", GitTreeState:""clean"", BuildDate:""2017-03-28T16:36:33Z"", GoVersion:""go1.7.5"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""5"", GitVersion:""v1.5.3"", GitCommit:""029c3a408176b55c30846f0faedf56aae5992e9b"", GitTreeState:""clean"", BuildDate:""2017-02-15T06:34:56Z"", GoVersion:""go1.7.4"", Compiler:""gc"", Platform:""linux/amd64""}

My sample code is 
`package main
import (
	""fmt""
	metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
	intstr ""k8s.io/apimachinery/pkg/util/intstr""
	kube ""k8s.io/client-go/kubernetes""
	v1 ""k8s.io/client-go/pkg/api/v1""
	appsv1beta1 ""k8s.io/client-go/pkg/apis/apps/v1beta1""
	rest ""k8s.io/client-go/rest""
	""net""
)

var (
	KubeMasterIP  = ""x.x.x.x""
	Port          = ""xxxx""
	UserName      = ""xxxxx""
	Password      = ""xxxxxxxxxx""
	TLSValue      = true
	Protocol      = ""https""
	NameSpaceName = ""test-namespace""
)

func main() {

	fmt.Println(""***************************"")
	buildAndDeployApp()
	fmt.Println(""***************************"")
}

func buildAndDeployApp() {

	tlsClientConfig := rest.TLSClientConfig{}
	tlsClientConfig.Insecure = TLSValue
	fmt.Println(""HostPath: "", net.JoinHostPort(KubeMasterIP, Port))
	restConfig := &rest.Config{
		Host:            net.JoinHostPort(KubeMasterIP, Port),
		Username:        UserName,
		Password:        Password,
		TLSClientConfig: tlsClientConfig,
	}

	cSet, err := kube.NewForConfig(restConfig)
	if err != nil {
		fmt.Println(""Error in Kube clientSet : "", err.Error())
	}

	deploy, err := cSet.AppsV1beta1().Deployments(NameSpaceName).Create(BuildDeployment())
	fmt.Println(""Deploy Output: "", deploy)
	fmt.Println(""Error: "", err)
}

func int32Ptr(i int32) *int32 { return &i }

func BuildDeployment() *appsv1beta1.Deployment {

	return &appsv1beta1.Deployment{
		ObjectMeta: metav1.ObjectMeta{
			Name: ""test-deploy"",
		},
		Spec: appsv1beta1.DeploymentSpec{
			Replicas: int32Ptr(1),
			Strategy: appsv1beta1.DeploymentStrategy{
				Type: ""RollingUpdate"",
				RollingUpdate: &appsv1beta1.RollingUpdateDeployment{
					MaxSurge: &intstr.IntOrString{
						IntVal: 1,
					},
					MaxUnavailable: &intstr.IntOrString{
						IntVal: 1,
					},
				},
			},
			MinReadySeconds:      int32(5),
			RevisionHistoryLimit: int32Ptr(5),
			Template: v1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: map[string]string{
						""app"": ""demo"",
					},
				},
				Spec: v1.PodSpec{
					Containers: []v1.Container{
						{
							Name:  ""web"",
							Image: ""nginx:1.13"",
							Ports: []v1.ContainerPort{
								{
									Name:          ""http"",
									Protocol:      v1.ProtocolTCP,
									ContainerPort: 80,
								},
							},
							ImagePullPolicy: ""Always"",
						},
					},
					RestartPolicy: ""Always"",
				},
			},
		},
	}
}`",closed,False,2017-11-08 16:29:33,2017-11-09 07:23:48
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/323,https://api.github.com/repos/kubernetes/client-go/issues/323,Propose: provide helper for KUBECONFIG resolution,"Hi maintainers–
I’ve been thinking that lots of people are developing client-side tooling using client-go and almost all of them are accepting [kubeconfig flags](https://github.com/kubernetes/client-go/blob/72e1c2a1ef30b3f8da039e92d4a6a1f079f374e8/examples/out-of-cluster-client-configuration/main.go#L37-L42).

**I propose that we provide functionality in client-go** (or other parts of apimachinery/utils) **that automatically resolves the kubeconfig from the file path or the KUBECONFIG environment variable**.

This helper method can help developers build tools that resolve the kubeconfig the recommended way (the way `kubectl` works).

This would codify the precedence of user-provided `--kubeconfig` flag, `$HOME/.kube/config` and the `$KUBECONFIG` env var. Otherwise, we are leaving open-ended questions like:
- what is the precedence if no user-provided --kubeconfig flag supplied?
- which env var one should use to look up home directory [on windows](https://github.com/kubernetes/client-go/blob/72e1c2a1ef30b3f8da039e92d4a6a1f079f374e8/examples/out-of-cluster-client-configuration/main.go#L80-L85)
- should you be using env vars or `os.Homedir()` to [find the home directory](https://github.com/kubernetes/client-go/blob/72e1c2a1ef30b3f8da039e92d4a6a1f079f374e8/examples/out-of-cluster-client-configuration/main.go#L80-L85)


#### Rough proposal 
A method signature like:

    func clientcmd.BuildFromKubeConfig(userProvidedValue="""") (*Client, error)

should be able to encapsulate user-provided value, $HOME lookup and the environment variable.

/cc @caesarxuchao ",closed,False,2017-11-08 19:17:41,2019-01-22 16:59:01
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/324,https://api.github.com/repos/kubernetes/client-go/issues/324,examples: must use Recommended*** constants,"I see we have 

```go
const (
    RecommendedConfigPathFlag   = ""kubeconfig""
    RecommendedConfigPathEnvVar = ""KUBECONFIG""
    RecommendedHomeDir          = "".kube""
    RecommendedFileName         = ""config""
```

in https://godoc.org/k8s.io/client-go/tools/clientcmd#pkg-constants

We should use `examples/*/*.go` to use these since it’s the best practice.",closed,False,2017-11-08 19:21:42,2018-04-08 20:07:52
client-go,danderson,https://github.com/kubernetes/client-go/issues/325,https://api.github.com/repos/kubernetes/client-go/issues/325,client-go pins a version of gopkg.in/yaml.v2 from 2 years ago,"The Godeps.json for client-go pins gopkg.in/yaml.v2 to version 53feefa2559fb8dfa8d81baad31be332c97d6c77 . That commit is from 2 years ago, and lacks a lot of bug fixes and new functionality (notably UnmarshalStrict, which is extremely useful for parsing configs out of ConfigMaps).

Please update this package pin to a (much) newer version.

More generally, this is a worrying consequence of using package locks without actively updating them over time. How many CVEs am I vulnerable to because client-go is forcing my code to pull in ancient libraries? Are there any plans to try and address this?",closed,False,2017-11-12 20:38:20,2018-02-16 05:20:04
client-go,johngmyers,https://github.com/kubernetes/client-go/issues/326,https://api.github.com/repos/kubernetes/client-go/issues/326,Fake client doesn't filter Pods on FieldSelector,"The fake client is ignoring the FieldSelector when listing Pods.

```golang
package fake_test

import (
	""k8s.io/api/core/v1""
	metaV1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
	""k8s.io/client-go/kubernetes/fake""
	""testing""
)

func TestPodFieldSelectors(t *testing.T) {
	client := fake.NewSimpleClientset(&v1.Pod{
		TypeMeta: metaV1.TypeMeta{
			Kind:       ""Pod"",
			APIVersion: ""v1"",
		},
		ObjectMeta: metaV1.ObjectMeta{
			Name:      ""tls-app-579f7cd745-t6fdg"",
			Namespace: ""default"",
			Labels: map[string]string{
				""tag"": """",
			},
		},
		Status: v1.PodStatus{
			PodIP: ""172.1.0.3"",
		},
	})

	podList, _ := client.CoreV1().Pods(""default"").List(metaV1.ListOptions{FieldSelector: ""status.podIp=10.1.2.3""})
	if len(podList.Items) != 0 {
		t.Errorf(""Expected no items in podList, got %d"", len(podList.Items))
	}
}

```
",closed,False,2017-11-16 00:22:46,2019-01-11 22:14:50
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/327,https://api.github.com/repos/kubernetes/client-go/issues/327,gcp auth plugin is not capturing error output from command,"I get empty error message when I disconnect from internet and use gcp plugin to authenticate:

`Get https://35.192.x.x/api/v1/namespaces/default/services/hello?includeUninitialized=true: error executing access token command ""/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin/gcloud config config-helper --format=json"": err=exit status 1 output=`

When I invoke directly, at least I get an error:

```
$ /usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin/gcloud config config-helper --format=json
ERROR: (gcloud.config.config-helper) There was a problem refreshing your current auth tokens: Unable to find the server at www.googleapis.com
Please run:

  $ gcloud auth login

to obtain new credentials, or if you have already logged in with a
different account:

  $ gcloud config set account ACCOUNT

to select an already authenticated account to use.
```",closed,False,2017-11-16 05:05:02,2017-11-21 20:16:51
client-go,wallrj,https://github.com/kubernetes/client-go/issues/328,https://api.github.com/repos/kubernetes/client-go/issues/328,Allow the /var/run/secrets path to be overridden for InClusterConfig,"My use case is that I want to use Telepresence to test and develop an in cluster component.

Telepresence makes the service account secrets available on my laptop at e.g.
 * `$TELEPRESENCE_ROOT/var/run/secrets/kubernetes.io/serviceaccount`

See:
* https://www.telepresence.io/howto/volumes.html

There's a tool called `proot` which I could use, but it's not available as a Fedora package right now.

Would you consider something like the following patch, which checks for `KUBERNETES_SERVICE_ACCOUNT_PATH` rather than hard coding `/var/run/secrets/...` ?

```diff
@minikube|bash-4.4$ git diff  vendor/k8s.io/client-go/rest/config.go | cat
diff --git a/vendor/k8s.io/client-go/rest/config.go b/vendor/k8s.io/client-go/rest/config.go
index 57848c8a..0fc0f0a0 100644
--- a/vendor/k8s.io/client-go/rest/config.go
+++ b/vendor/k8s.io/client-go/rest/config.go
@@ -40,8 +40,9 @@ import (
 )
 
 const (
-	DefaultQPS   float32 = 5.0
-	DefaultBurst int     = 10
+	DefaultQPS                float32 = 5.0
+	DefaultBurst              int     = 10
+	DefaultServiceAccountPath         = ""/var/run/secrets/kubernetes.io/serviceaccount""
 )
 
 // Config holds the common attributes that can be passed to a Kubernetes client on
@@ -320,12 +321,17 @@ func InClusterConfig() (*Config, error) {
 		return nil, fmt.Errorf(""unable to load in-cluster configuration, KUBERNETES_SERVICE_HOST and KUBERNETES_SERVICE_PORT must be defined"")
 	}
 
-	token, err := ioutil.ReadFile(""/var/run/secrets/kubernetes.io/serviceaccount/"" + v1.ServiceAccountTokenKey)
+	serviceAccountPath := os.Getenv(""KUBERNETES_SERVICE_ACCOUNT_PATH"")
+	if len(serviceAccountPath) == 0 {
+		serviceAccountPath = DefaultServiceAccountPath
+	}
+	tokenPath := filepath.Join(serviceAccountPath, v1.ServiceAccountTokenKey)
+	token, err := ioutil.ReadFile(tokenPath)
 	if err != nil {
 		return nil, err
 	}
 	tlsClientConfig := TLSClientConfig{}
-	rootCAFile := ""/var/run/secrets/kubernetes.io/serviceaccount/"" + v1.ServiceAccountRootCAKey
+	rootCAFile := filepath.Join(serviceAccountPath, v1.ServiceAccountRootCAKey)
 	if _, err := certutil.NewPool(rootCAFile); err != nil {
 		glog.Errorf(""Expected to load root CA config from %s, but got err: %v"", rootCAFile, err)
 	} else {

```",closed,False,2017-11-17 15:24:06,2017-11-21 22:44:23
client-go,tomykaira,https://github.com/kubernetes/client-go/issues/329,https://api.github.com/repos/kubernetes/client-go/issues/329,HTTP port-forward broke on client terminates,"## Situation

- Components are connected as Go server -> port-forward -> iOS Client
- Using chunked transfer encoding to download large movie file from Server to iOS

## problem

When iOS client exits with SIGKILL (i.e. restart app from Xcode), the port forward emits an error

```
E1119 14:59:19.967004    9736 portforward.go:303] error copying from remote stream to local connection: readfrom tcp4 127.0.0.1:8888->127.0.0.1:35390: write tcp4 127.0.0.1:8888->127.0.0.1:35390: write: broken pipe
```

It is ok, but after this error, all connections to portforward are rejected with timeout.

```
E1119 15:15:07.167402    9736 portforward.go:271] error creating error stream for port 8888 -> 8888: Timeout occured
```

## Expected behavior

portforward accepts the following requests after broken pipe.",open,False,2017-11-19 06:16:13,2019-03-25 09:40:41
client-go,BugRoger,https://github.com/kubernetes/client-go/issues/330,https://api.github.com/repos/kubernetes/client-go/issues/330,Keep Dependencies Minimal,"As an example, with the addition of e12b58626cb4cf5f820b924eba476b51df0571dc we added 118MB of additional dependencies (not counting transitive dependencies).

As we all know big dependency trees are  annoying to handle and maintain. This is a plea for trying to keep dependencies to a minimum for client-go.",closed,False,2017-11-21 10:30:59,2018-02-19 19:22:38
client-go,rcorre,https://github.com/kubernetes/client-go/issues/331,https://api.github.com/repos/kubernetes/client-go/issues/331,Glide cannot install 5.X with batchv1 reference,"This is a copy of https://github.com/Masterminds/glide/issues/945. I wasn't sure if it is an issue with `glide` or `client-go`, but since my issue with `glide` is still unanswered, I'm reaching out here. The issue is as follows:

- - -

I'm trying to bump [client-go](https://github.com/kubernetes/client-go/) to 5.x, but `glide up -v` prints:

```
[ERROR] Error scanning k8s.io/client-go/pkg/apis/batch/v1: cannot find package ""."" in:
        /home/rodencor/.glide/cache/src/https-k8s.io-client-go/pkg/apis/batch/v1
```

## Minimal example:

`glide.yaml`:

```yaml
package: github.com/rcorre/k8stest
import:
- package: k8s.io/client-go
  version: 5.x.x
```

`main.go`:

```
package main

import (
	""k8s.io/client-go/kubernetes""
	batch ""k8s.io/client-go/pkg/apis/batch/v1""
	""k8s.io/client-go/rest""
)

func main() {
	conf, err := rest.InClusterConfig()
	if err != nil {
		panic(err)
	}

	kube, err := kubernetes.NewForConfig(conf)
	if err != nil {
		panic(err)
	}

	var jobs []batch.Job
	jobs, err := kube.BatchV1().Jobs(namespace).List(nil)
	if err != nil {
		panic(err)
	}
}
```

I've tried `rm -rf vendor` and `glide cc`.

Let me know if this issue belongs on client-go instead.
",closed,False,2017-11-27 14:47:50,2018-02-02 19:16:06
client-go,rmohr,https://github.com/kubernetes/client-go/issues/332,https://api.github.com/repos/kubernetes/client-go/issues/332,Adding expectations and controller ref manager to client-go,"It would be great if the [expectations](https://github.com/kubernetes/kubernetes/blob/master/pkg/controller/controller_utils.go) and the [controller reference manager](https://github.com/kubernetes/kubernetes/blob/master/pkg/controller/controller_ref_manager.go) could be added to client-go. They make it a lot easier to write proper controllers.

Especially the controller reference manager is useful, since it help integrating CRDs into the garbage colloector (forground, background and orphan deletion strategies, which helps inheriting kubectl --cascade support).",closed,False,2017-11-27 17:25:11,2018-04-26 18:40:03
client-go,donovansolms,https://github.com/kubernetes/client-go/issues/333,https://api.github.com/repos/kubernetes/client-go/issues/333,NetworkPolicyPort requires pointer to const for Protocol,"I found an inconsistency for specifying the Protocol for ingress and egress network policies that requires a workaround since Go doesn't allow getting a `const` address directly.

Client Version: client-go 5.0
Kubernetes Version: 1.8

In other areas where you need to specify a protocol/port combination, such as `ServicePort` you can do:
```go
v1.ServiceSpec{
	Ports: []v1.ServicePort{
		{
			Protocol: v1.ProtocolUDP, // Use the const directly
		},
	},
}
```

However, in [NetworkPolicyPort](https://godoc.org/k8s.io/api/networking/v1#NetworkPolicyPort) you need to provide a pointer to the Protocol constant. 

```go
Ports: []networkv1.NetworkPolicyPort{
    {
        // This can't be done in Go directly
        // error: cannot take the address of ""k8s.io/api/core/v1"".ProtocolUDP
        Protocol: &v1.ProtocolUDP,
        Port: &intstr.IntOrString{
            Type:   intstr.Int,
            IntVal: int32(53),
        },
    },
},
``` 

To make this work you need to assign the `const` to a variable that you can get the address of and use that. This feels wrong to me.

```go
const protocolConst = v1.ProtocolUDP
protocolVar := protocolConst

Ports: []networkv1.NetworkPolicyPort{
    {
        Protocol: &protocolVar,
        Port: &intstr.IntOrString{
            Type:   intstr.Int,
            IntVal: int32(53),
        },
    },
},
```

The differences can be found in [core api/types](https://github.com/kubernetes/api/blob/master/core/v1/types.go#L3340) and [networking api/types](https://github.com/kubernetes/api/blob/master/networking/v1/types.go#L142).

This isn't really an issue as the code works as expected, it just requires an odd workaround to make it work. Am I missing something here? Is there a specific reason why this would require a pointer?

*Note: I could not see any reason why it would be generated as such since there is no real difference in the protobuf definitions for [NetworkPolicyPort](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/api/networking/v1/generated.proto#L139) and [ServicePort](https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/api/core/v1/generated.proto#L4040)*
",closed,False,2017-11-28 20:49:43,2018-05-22 09:28:16
client-go,arunmk,https://github.com/kubernetes/client-go/issues/334,https://api.github.com/repos/kubernetes/client-go/issues/334,Node watch returns events with nil objects,"I have a small code running on master to detect when a node enters / leaves the cluster. The overall code is as follows:
1. Initially get all nodes in cluster using: clientset.Core().Nodes().List(v1.ListOptions{})
2. Create a watcher using: watcher, err := clientset.Core().Nodes().Watch(v1.ListOptions{})
3. Wait on nodeListChangedEventChan := watcher.ResultChan()
4. Consume the event using nodeListChangedEvent := <-nodeListChangedEventChan
5. Determine the node of interest using nodeListChangedEvent.Object.(*v1.Node)
6. Determine the activity of the node using: nodeListChangedEvent.Type (watch.Added / watch.Deleted)

I see that the node addition / removal events are cleanly received. However, after about 30 minutes of waiting on the channel, I begin to get thousands of events with the Object (nodeListChangedEvent.Object) being 'nil'.

As a workaround, whenever the error is hit, I have started recreating the watcher and listening again (2,3). However, it again works well for about 30 minutes and the situation is hit. This happens forever with an interval of about 30 minutes between the creation of the watcher and the error state.

",closed,False,2017-11-29 03:03:58,2018-05-04 21:51:04
client-go,metalmatze,https://github.com/kubernetes/client-go/issues/335,https://api.github.com/repos/kubernetes/client-go/issues/335,Informer doesn't update for briefly running Pods,"Hey!
We create Pods with client-go like:
https://github.com/drone/drone-kubernetes-runtime/blob/e666fd071ca9420ab0e061b1ca5380b5bc88c5f1/engine/kubernetes/kubernetes.go#L123-L140

Once a Pod is running we wait for updates by the informer like:
https://github.com/drone/drone-kubernetes-runtime/blob/e666fd071ca9420ab0e061b1ca5380b5bc88c5f1/engine/kubernetes/kubernetes.go#L176-L194

When you run a container like `docker run --rm alpine:3.6 /bin/sh -c ""echo hello world"" ` in the Pod it exists really fast (1s). 
It seems like the informer maybe isn't properly initialized, because it fails to trigger our update func. 

For now I've simply added a `sleep 5` to the end of the script and thus everything is fine. We could also `time.Sleep(5 * time.Second)` in our code, but that's not really what one whats, right?
",closed,False,2017-11-29 19:06:05,2018-04-29 18:50:05
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/336,https://api.github.com/repos/kubernetes/client-go/issues/336,ResourceEventHandlerFuncs should be called concurrently in separate goroutines,"Simple pod list/watcher below.

I added a `sleep(5s)` and executed 5 pods and realized the `AddFunc` is called serially one by one (similar in DeleteFunc etc). So it took 25 seconds to all the way to the last pod. If AddFunc was invoked in parallel with goroutines, it would complete in ~5s.

This `AddFunc` signature doesn't even return an error, any reason why all invocations to these XxxFuncs aren't being done in parallel using goroutines?

```go
	ctx := context.Background()
        restClient := k8s.CoreV1().RESTClient()
	lw := cache.NewListWatchFromClient(restClient, ""pods"", corev1.NamespaceAll, fields.Everything())
	_, controller := cache.NewInformer(lw,
		&corev1.Pod{},
		time.Second*5,
		cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				pod, ok := obj.(*corev1.Pod)
				if !ok {
					log.Fatalf(""list/watch returned non-pod object: %T"", pod)
				}
				time.Sleep(time.Second * 5)	
				log.Printf(""handling pod %s"", pod.GetName())
			},
		},
	)
	controller.Run(ctx.Done()
```",closed,False,2017-11-29 19:16:33,2017-11-30 18:57:13
client-go,markmandel,https://github.com/kubernetes/client-go/pull/337,https://api.github.com/repos/kubernetes/client-go/issues/337,Add Dependency matrix to README,"This makes it far more explicit about all the libraries that are used in conjunction with client-go and which
versions you require for each version of Kubernetes.

Context: [Friction Log](https://docs.google.com/a/google.com/document/d/1N1pBov7Odpg_u-kILHcswYh4VO-aMlYQdFIH64DYeek/edit?disco=AAAABdZx8JM)
",closed,True,2017-11-29 19:59:01,2018-02-14 22:12:26
client-go,Huang-Wei,https://github.com/kubernetes/client-go/issues/338,https://api.github.com/repos/kubernetes/client-go/issues/338,stale events are pushed repeatedly,"I'm using a tweaked `examples/workqueue/main.go` (v5.0.1) to reproduce a weird issue: stale events are pushed to client repeatedly even when an API object has been deleted:

**Env:**

- k8s server: minikube v1.7.4
- client: `examples/workqueue/main.go` - replace `Pod` with `Service`

**Reproduce steps:**

1. run the main.go - `./main --kubeconfig=/Users/wei.huang1/.kube/config --v=4 --logtostderr=true`
1. create a shell script to do (use kubectl) following things **in parallel**:
    1. create 3 different `Namespace`s
    1. create 3 nginx `Service`s along with nginx `Deployment`s in each Namespace 
    1. delete all 3 namespaces **immediately**

**Log:**

```
I1201 14:58:09.938273   46973 main.go:121] Starting Service controller
I1201 14:58:09.938536   46973 reflector.go:202] Starting reflector *v1.Service (0s) from k8s.io/client-go/examples/workqueue/main.go:123
I1201 14:58:09.938552   46973 reflector.go:240] Listing and watching *v1.Service from k8s.io/client-go/examples/workqueue/main.go:123
I1201 14:58:10.041648   46973 shared_informer.go:116] caches populated
Sync/Add/Update for Service kubernetes
Sync/Add/Update for Service kube-dns
Sync/Add/Update for Service kubernetes-dashboard
Sync/Add/Update for Service alertmanager
Sync/Add/Update for Service prometheus
Sync/Add/Update for Service nginx-svc
Sync/Add/Update for Service nginx-svc
Sync/Add/Update for Service nginx-svc
Service 590-2-10871/nginx-svc does not exist anymore
Service 590-1-12560/nginx-svc does not exist anymore
Service 590-3-7850/nginx-svc does not exist anymore
# logs until here is good
---
# interesting log begins
I1201 15:06:10.957585   46973 reflector.go:421] k8s.io/client-go/examples/workqueue/main.go:123: Watch close - *v1.Service total 6 items received
Sync/Add/Update for Service nginx-svc
Service 590-1-12560/nginx-svc does not exist anymore
I1201 15:15:52.960785   46973 reflector.go:421] k8s.io/client-go/examples/workqueue/main.go:123: Watch close - *v1.Service total 4 items received
Sync/Add/Update for Service nginx-svc
Service 590-1-12560/nginx-svc does not exist anymore
I1201 15:24:11.964377   46973 reflector.go:421] k8s.io/client-go/examples/workqueue/main.go:123: Watch close - *v1.Service total 4 items received
Sync/Add/Update for Service nginx-svc
Service 590-1-12560/nginx-svc does not exist anymore
I1201 15:31:22.967810   46973 reflector.go:421] k8s.io/client-go/examples/workqueue/main.go:123: Watch close - *v1.Service total 4 items received
Sync/Add/Update for Service nginx-svc
Service 590-1-12560/nginx-svc does not exist anymore
I1201 15:38:29.970636   46973 reflector.go:421] k8s.io/client-go/examples/workqueue/main.go:123: Watch close - *v1.Service total 4 items received
Sync/Add/Update for Service nginx-svc
Service 590-1-12560/nginx-svc does not exist anymore
I1201 15:46:55.972923   46973 reflector.go:421] k8s.io/client-go/examples/workqueue/main.go:123: Watch close - *v1.Service total 4 items received
Sync/Add/Update for Service nginx-svc
Service 590-1-12560/nginx-svc does not exist anymore
I1201 15:52:14.976354   46973 reflector.go:421] k8s.io/client-go/examples/workqueue/main.go:123: Watch close - *v1.Service total 4 items received
Sync/Add/Update for Service nginx-svc
Service 590-1-12560/nginx-svc does not exist anymore
```

So my question is: is it a bug that the Add/Delete events (590-1-12560/nginx-svc) are triggered over and over even if they have been deleted? and might be something wrong in namespace garbage collector?",closed,False,2017-12-02 00:43:12,2018-01-27 01:26:07
client-go,a4abhishek,https://github.com/kubernetes/client-go/pull/339,https://api.github.com/repos/kubernetes/client-go/issues/339,Update INSTALL.md,"This is a very minor change, but it'll definitly help the New-Commers like me.

Sorry, client-go does not accept changes via pull requests at this time. Please
submit your pull request to the main repository:
https://github.com/kubernetes/kubernetes.  See the guidance here:
https://github.com/kubernetes/client-go#contributing-code.
",closed,True,2017-12-02 20:49:14,2017-12-14 15:41:44
client-go,zh168654,https://github.com/kubernetes/client-go/issues/340,https://api.github.com/repos/kubernetes/client-go/issues/340,How to use a specific user credential and context,"I created a user credential and added a context, when using kubectl i could use the context to get pods list by the following command:
`kubectl --context=employee-context get pods`
when using client-go i tried the following code but failed with error ""x509: certificate is valid for kubernetes, kubernetes.default, kubernetes.default.svc, kubernetes.default.svc.cluster.local, localhost, node1, node2, not https://XX.XXX.XX.XX:6443""
`	cfg.TLSClientConfig.ServerName = ""https://XX.XXX.XX.XX:6443""`
`	cfg.TLSClientConfig.KeyFile = ""/root/a.key""`
`	cfg.TLSClientConfig.CertFile = ""/root/a.crt""`
`	clientset, err := kubernetes.NewForConfig(cfg)`
`       if err != nil {`
`	    	panic(err.Error())`
`	}`
`pods, err := clientset.CoreV1().Pods("""").List(metav1.ListOptions{})`

So how to use a specific user credential and context?Is there an example?
",closed,False,2017-12-06 08:25:44,2018-05-05 10:03:04
client-go,nikhita,https://github.com/kubernetes/client-go/pull/341,https://api.github.com/repos/kubernetes/client-go/issues/341,Add client-go 6.0.0 changelog,"Ref: https://docs.google.com/spreadsheets/d/1PahRDTfiPbD1DEjtL-3ButW3U-FTKzS8r9NKZQ2kr2c/edit#

/cc @sttts @caesarxuchao @munnerz @timoreimann @markmandel",closed,True,2017-12-06 23:53:06,2017-12-18 12:32:13
client-go,r7vme,https://github.com/kubernetes/client-go/issues/342,https://api.github.com/repos/kubernetes/client-go/issues/342,How to reinitialize client?,"Hello, this is more support question that a bug (i hope so).

I'm using client-go in small app that calls cluster API and checks nodes in NotReady state (like cloud-provider code does). I've stuck with a problem that after pod (guest cluster kubernetes master vm) hard killed, i have dead tcp connection in my pod. Client-go tries to reuse it for next 10-17 minutes until TCP is dropped.

To workaround this problem (and not mess with deep networking stuff), i've tried to reinitialize client for every check i do. But i found out that even in that case client stiff reuses same dead tcp connection. Is it possible? 

I expect reinitializing new client will initiate brand new tcp connection.

Details:
Here i'm [initializing client](https://github.com/giantswarm/kvm-operator-node-controller/blob/wrap-transport/controller.go#L150-L153). Function MonitorNode called every [30 seconds](https://github.com/giantswarm/kvm-operator-node-controller/blob/wrap-transport/controller.go#L140).

[logs](https://gist.github.com/r7vme/640685486ea8c5a71fa1bed6509b3549)
[netstat shows that connection to 172.31.53.156 is broken](https://gist.github.com/r7vme/75768439e4fc1c5527de4a08268ca9a0)",open,False,2017-12-08 16:11:51,2018-04-02 21:03:23
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/343,https://api.github.com/repos/kubernetes/client-go/issues/343,go get broken,"I just did `go get` on a clean gopath and it seems to be broken at the moment. 

I think it's also blocking [godep method](https://github.com/kubernetes/client-go/blob/master/INSTALL.md#godep) from working, too.

```sh
$ go get k8s.io/client-go/...
# k8s.io/apimachinery/pkg/util/strategicpatch
../../../k8s.io/apimachinery/pkg/util/strategicpatch/meta.go:166:17: cannot use kindItem (type *kindItem) as type ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor in argument to s.Schema.Accept:
	*kindItem does not implement ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor (missing VisitArbitrary method)
../../../k8s.io/apimachinery/pkg/util/strategicpatch/meta.go:181:17: cannot use sliceItem (type *sliceItem) as type ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor in argument to s.Schema.Accept:
	*sliceItem does not implement ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor (missing VisitArbitrary method)
../../../k8s.io/apimachinery/pkg/util/strategicpatch/types.go:55:5: cannot use kindItem literal (type *kindItem) as type LookupPatchItem in assignment:
	*kindItem does not implement LookupPatchItem (missing VisitArbitrary method)
../../../k8s.io/apimachinery/pkg/util/strategicpatch/types.go:79:28: cannot use item (type *kindItem) as type ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor in argument to schema.SubSchema().Accept:
	*kindItem does not implement ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor (missing VisitArbitrary method)
../../../k8s.io/apimachinery/pkg/util/strategicpatch/types.go:118:5: cannot use sliceItem literal (type *sliceItem) as type LookupPatchItem in assignment:
	*sliceItem does not implement LookupPatchItem (missing VisitArbitrary method)
../../../k8s.io/apimachinery/pkg/util/strategicpatch/types.go:146:28: cannot use item (type *sliceItem) as type ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor in argument to schema.SubSchema().Accept:
	*sliceItem does not implement ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor (missing VisitArbitrary method)
../../../k8s.io/apimachinery/pkg/util/strategicpatch/types.go:169:18: cannot use item (type *sliceItem) as type ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor in argument to subschema.Accept:
	*sliceItem does not implement ""k8s.io/kube-openapi/pkg/util/proto"".SchemaVisitor (missing VisitArbitrary method)
```",closed,False,2017-12-10 21:27:09,2017-12-15 23:46:41
client-go,destructive-dragon,https://github.com/kubernetes/client-go/issues/344,https://api.github.com/repos/kubernetes/client-go/issues/344,glog requires flag.parse() else it will error,"This issue got fixed in https://github.com/kubernetes/kubernetes/issues/17162, would be great if we could fix it here as well!",closed,False,2017-12-15 10:20:44,2018-07-13 17:13:11
client-go,r0fls,https://github.com/kubernetes/client-go/issues/345,https://api.github.com/repos/kubernetes/client-go/issues/345,"panic: No Auth Provider found for name ""oidc""","The out of cluster config example no longer works for me. I believe it was recently so I'm not sure what changed. I get this error:

```
panic: No Auth Provider found for name ""oidc""

goroutine 1 [running]:
main.main()
        /Users/raphael.deem/Documents/code/go/src/list-proms/main.go:53 +0x60d
```

I am able to list the nodes:

```
$ kubectl get nodes | wc -l
      10
```

I tried doing https://github.com/coreos/tectonic-forum/issues/99#issuecomment-295458740

But then I just get this, as expected:

```
$ go build                                                                                       
# _/Users/raphael.deem/Documents/code/list-proms                                                                      
./main.go:14:2: imported and not used: ""k8s.io/client-go/plugin/pkg/client/auth/oidc""   
```",closed,False,2017-12-15 23:38:38,2017-12-16 01:28:16
client-go,mactr0n,https://github.com/kubernetes/client-go/issues/346,https://api.github.com/repos/kubernetes/client-go/issues/346,"""create-update-delete-deployment"" example outdated","The ""create-update-delete-deployment"" example seems to be outdated because 
`RollbackTo` of `v1beta1.DeploymentSpec` is deprecated.

There example should be updated using `Rollback` of `v1beta1.DeploymentExpansion`.",closed,False,2017-12-18 10:15:59,2018-08-09 22:31:38
client-go,sttts,https://github.com/kubernetes/client-go/pull/347,https://api.github.com/repos/kubernetes/client-go/issues/347,Update README.md and INSTALL.md for v6.0.0,"Prepare for v6.0.0 release.
",closed,True,2017-12-18 16:28:30,2017-12-19 08:22:50
client-go,jackchee,https://github.com/kubernetes/client-go/issues/348,https://api.github.com/repos/kubernetes/client-go/issues/348,"how to get image within deployment, like the result of ""kubectl describe deployment $app""?",,closed,False,2017-12-19 07:20:20,2018-05-19 10:33:11
client-go,xianlubird,https://github.com/kubernetes/client-go/pull/349,https://api.github.com/repos/kubernetes/client-go/issues/349,Change api path from api to apis,"Signed-off-by: xianlubird <xianlubird@gmail.com>

Sorry, client-go does not accept changes via pull requests at this time. Please
submit your pull request to the main repository:
https://github.com/kubernetes/kubernetes.  See the guidance here:
https://github.com/kubernetes/client-go#contributing-code.
",closed,True,2017-12-19 11:42:25,2017-12-19 11:43:26
client-go,spiffxp,https://github.com/kubernetes/client-go/pull/350,https://api.github.com/repos/kubernetes/client-go/issues/350,Add code-of-conduct.md,"Refer to kubernetes/community as authoritative source for code of conduct

ref: kubernetes/community#1527",closed,True,2017-12-20 18:31:36,2017-12-20 20:13:54
client-go,vjsamuel,https://github.com/kubernetes/client-go/issues/351,https://api.github.com/repos/kubernetes/client-go/issues/351,Add HTTP proxy setting to kubeconfig,"Whilst managing several Kubernetes clusters, there could be potential scenarios where certain clusters require the usage of an HTTP proxy to be accessible. It would be useful to have http-proxy as a per cluster setting on the kube config so that it is easy to talk to clusters that require and don't require the usage of a proxy.",closed,False,2017-12-20 22:20:46,2018-07-09 11:33:37
client-go,AlexShemeshWix,https://github.com/kubernetes/client-go/issues/352,https://api.github.com/repos/kubernetes/client-go/issues/352,Fake Clientset and cache.ListWatch,"Hi
I have project that uses cache.ListWatch to monitor k8s Deployments.
I want to create tests for my projects.
im creating cache.ListWatch with NewListWatchFromClient and im passing  it to cache.NewInformer

```
unc Test_TestListInformer(t *testing.T) {
	dpl := GenerateHelloMyDeployment()
	clientSet := fake.NewSimpleClientset(&dpl)
	//clientSet := GetClientOutOfCluster()

	restClient := clientSet.ExtensionsV1beta1().RESTClient()
	if restClient == nil {
		t.Error(""Cant get rest client"")
	}
	watchlist := cache.NewListWatchFromClient(clientSet.ExtensionsV1beta1().RESTClient(), ""deployments"", api_v1.NamespaceAll, fields.Everything())

	var expectedObj interface{}

	resyncPeriod := 30 * time.Minute

	_, eController := cache.NewInformer(
		watchlist,
		&v1beta1.Deployment{},
		resyncPeriod,
		cache.ResourceEventHandlerFuncs{
			AddFunc: func(obj interface{}) {
				expectedObj = obj
			},
			DeleteFunc: func(obj interface{}) {
				expectedObj = obj
			},
			UpdateFunc: func(oldObj interface{}, newObj interface{}) {
				expectedObj = oldObj
			},
		},
	)
	stopChan := make(chan struct{})
	go eController.Run(stopChan)
	time.Sleep(time.Second)
	close(stopChan)
}
```

It fails when i call eController.Run(stopChan) at here
github.com/wix-private/hdc3/conductor/vendor/k8s.io/client-go/rest.(*RESTClient).Verb at client.go:222

```
func (c *RESTClient) Verb(verb string) *Request {
	backoff := c.createBackoffMgr()

	if c.Client == nil {
		return NewRequest(nil, verb, c.base, c.versionedAPIPath, c.contentConfig, c.serializers, backoff, c.Throttle)
	}
	return NewRequest(c.Client, verb, c.base, c.versionedAPIPath, c.contentConfig, c.serializers, backoff, c.Throttle)
}
```

c is nil.
As far as i understand NewSimpleClientset is not implementing REST client functionality properly.

What fake objects should i use?
How should i approach such problem? ",closed,False,2017-12-24 09:50:05,2018-07-02 17:54:43
client-go,pavel-khritonenko,https://github.com/kubernetes/client-go/issues/353,https://api.github.com/repos/kubernetes/client-go/issues/353,Azure authentication fails on acquiring consequent tokens,"We use `kubectl` with Azure authentication provider, and our devs are facing issue when `access-token` expired.

    $ kubectl get pods
    E1226 11:52:13.723835   16281 azure.go:126] Failed to acquire a token: refreshing the expired token: refreshing token: adal: Refresh request failed. Status Code = '400'
    Unable to connect to the server: acquiring a token for authorization header: refreshing the expired token: refreshing token: adal: Refresh request failed. Status Code = '400'

Deleting all tokens from `~/.kube/config` and authentication solves the issue until next expiring period.",closed,False,2017-12-26 09:09:52,2018-09-27 18:38:55
client-go,asridharan,https://github.com/kubernetes/client-go/issues/354,https://api.github.com/repos/kubernetes/client-go/issues/354,Need example to use `informers` package to listen to pod events,"I followed this example:
https://gist.github.com/ctaggart/deba294becac3c14678c1c04df2cd089

Which seems to be relevant here, but I am unable to import:
""k8s.io/kubernetes/pkg/api""
with golang 1.8?

Is there a documentation of how the Resource Handlers emanate objects and what go structs these objects map to. The documentation is horrendous in this regard !!",closed,False,2017-12-29 00:30:13,2018-07-08 15:13:37
client-go,spoptchev,https://github.com/kubernetes/client-go/issues/355,https://api.github.com/repos/kubernetes/client-go/issues/355,Secret EnvVar cannot be set,"Hello,

I am getting the following message when I try to set a secret as an `EnvVar`:

```
Deployment.apps \""xxx-deployment\"" is invalid: [spec.template.spec.containers[0].env[3].valueFrom: Invalid value: \""\"": may not be specified when `value` is not empty, spec.template.spec.containers[0].env[4].valueFrom: Invalid value: \""\"": may not be specified when `value` is not empty]""
```

The code used to generate the `EnvVar` is:

```go
	return apiv1.EnvVar{
		Name: secretEnvVar.Name,
		ValueFrom: &apiv1.EnvVarSource{
			SecretKeyRef: &apiv1.SecretKeySelector{
				LocalObjectReference: apiv1.LocalObjectReference{
					Name: secretEnvVar.SecretName,
				},
				Key: secretEnvVar.Key,
			},
		},
	}
```

As you can see I am not setting any `Value` here. And as I can see from the code:

```go
type EnvVar struct {
	// Name of the environment variable. Must be a C_IDENTIFIER.
	Name string `json:""name"" protobuf:""bytes,1,opt,name=name""`

	// Optional: no more than one of the following may be specified.

	// Variable references $(VAR_NAME) are expanded
	// using the previous defined environment variables in the container and
	// any service environment variables. If a variable cannot be resolved,
	// the reference in the input string will be unchanged. The $(VAR_NAME)
	// syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped
	// references will never be expanded, regardless of whether the variable
	// exists or not.
	// Defaults to """".
	// +optional
	Value string `json:""value,omitempty"" protobuf:""bytes,2,opt,name=value""`
	// Source for the environment variable's value. Cannot be used if value is not empty.
	// +optional
	ValueFrom *EnvVarSource `json:""valueFrom,omitempty"" protobuf:""bytes,3,opt,name=valueFrom""`
}
```

`Value` should be omitted if it is empty, but it is not. Am I missing something here or is this a bug in the current implementation?

",closed,False,2018-01-03 16:20:18,2018-01-03 16:52:02
client-go,spiffxp,https://github.com/kubernetes/client-go/pull/356,https://api.github.com/repos/kubernetes/client-go/issues/356,Remove .github in prep to sync from k/k/staging,ref: https://github.com/kubernetes/kubernetes/pull/57571,closed,True,2018-01-08 20:35:49,2018-01-09 17:53:25
client-go,kujenga,https://github.com/kubernetes/client-go/issues/357,https://api.github.com/repos/kubernetes/client-go/issues/357,LGPL License in this repository,"There is an LGPL license for code that is vendored in this repository:

https://github.com/kubernetes/client-go/blob/master/vendor/github.com/juju/ratelimit/LICENSE

It appears that this is inherited from the main Kubernetes repository:

https://github.com/kubernetes/kubernetes/blob/master/vendor/github.com/juju/ratelimit/LICENSE

Does this not ""infect"" use of the code in this repository in some way? What compatibility is there with the Apache 2.0 license that this repository bears?

---

Edit: Apache lists incompatible licenses: http://www.apache.org/legal/resolved.html#category-x",closed,False,2018-01-08 21:44:59,2018-01-25 15:09:07
client-go,destructive-dragon,https://github.com/kubernetes/client-go/issues/358,https://api.github.com/repos/kubernetes/client-go/issues/358,glog terminates program when it can't create a logfile,"This is quite a big deal when using with containerized read-only environments. We should absolutely get rid of glog as it just calls `os.Exit(2)` if it can't create a file, killing our entire process.

A workaround would be to do all calls to glog inside a seperate process, which shouldn't be worth the hassle.",open,False,2018-01-12 10:18:11,2019-02-05 19:52:47
client-go,kweisamx,https://github.com/kubernetes/client-go/issues/359,https://api.github.com/repos/kubernetes/client-go/issues/359,Can't go get client with verision 6.0,"I use the `go get `to get the library, but it always say no finding like this,

```
# go get  k8s.io/client-go/6.0/kubernetes
package k8s.io/client-go/6.0/kubernetes: cannot find package ""k8s.io/client-go/6.0/kubernetes"" in any of:
	/usr/local/go/src/k8s.io/client-go/6.0/kubernetes (from $GOROOT)
	/root/go/src/k8s.io/client-go/6.0/kubernetes (from $GOPATH)
```
is anything I lost? or Wrong?

I follow this [doc]( https://kubernetes.io/docs/tasks/administer-cluster/access-cluster-api/#go-client)

Kubernetes version is 1.9",closed,False,2018-01-16 13:22:00,2018-01-21 06:32:33
client-go,ljnelson,https://github.com/kubernetes/client-go/issues/360,https://api.github.com/repos/kubernetes/client-go/issues/360,"In delta_fifo.go, is it possible that deletions are dropped?","Hello; thanks for Kubernetes and higher-order projects like this one!

I'm trying to understand `delta_fifo.go` in depth.  Consider this issue a question that may actually be a bug, but I'm not sure.  I hope this is the right way to bring up questions and issues like this; I've tried to do my homework in the Slack channel and elsewhere.  Feel free to close this or redirect me if I've made an obvious mistake.

At a high level, `Delete()` will not enqueue a deletion event if it discovers that there was no event queue (`Deltas`) already existing for the object in question.  See [lines 201-205](https://github.com/kubernetes/kubernetes/blob/v1.9.0/staging/src/k8s.io/client-go/tools/cache/delta_fifo.go#L201-L205).

Meanwhile, in the `Pop()` method, it grabs and removes the first key in the `queue`, and grabs and removes the corresponding event queue (`Deltas`) in `items`.  See [lines 440-450](https://github.com/kubernetes/kubernetes/blob/v1.9.0/staging/src/k8s.io/client-go/tools/cache/delta_fifo.go#L440-L450).

Consider, now, the following sequence of events:
* `Add()` is called for key `abc`.  This sets up an event queue in `items`, indexed by `abc`.  It also puts `abc` into `queue`.
* Now in a separate thread of execution `Pop()` comes along and _removes_ that event queue and processes it.  The result at exactly this point in time is that there is no event queue anymore indexed under `abc`.
* Now let's say `Delete` is called for the object whose key is `abc`.  Delete will see if there's an event queue indexed under `abc`.  It won't find one.  Let's assume for simplicity that `knownObjects` is `nil`.  The deletion activity stops here, right?  That is, unless I'm missing something, *the deletion is dropped*.  A downstream `ResourceEventHandler` won't get this deletion message.

Is that by design?  Thanks for any time or help here.",closed,False,2018-01-22 23:33:49,2018-06-22 01:44:31
client-go,olttwa,https://github.com/kubernetes/client-go/issues/361,https://api.github.com/repos/kubernetes/client-go/issues/361,BackOffLimit missing for job spec,"According to the documentation for jobs(`https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#pod-backoff-failure-policy`)

In order to setup Pod Backoff failure policy, you need to add `BackOffLimit` to job's spec. The code for that is missing from golang client.

Is there a reason that's been left out? I'd like to contribute to kubernetes golang client if this is a required feature.",closed,False,2018-01-23 19:24:33,2018-06-22 21:03:33
client-go,tamalsaha,https://github.com/kubernetes/client-go/issues/362,https://api.github.com/repos/kubernetes/client-go/issues/362,Move ReconcileRoleOptions to client-go ?,"Currently we use PATCH to update Roles from my CRD controllers. Instead, we would like to use the `auth reconcile` functionality, since it is safer. But this functionality in the main Kube repo. 
https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/rbac/reconciliation/reconcile_role.go#L97:10

It will be great if we can use this functionality without needing to depend on the main repo. Can this be moved to client-go ?

cc: @liggitt @deads2k ",closed,False,2018-01-29 08:02:09,2018-06-28 15:17:46
client-go,yuan-make,https://github.com/kubernetes/client-go/issues/363,https://api.github.com/repos/kubernetes/client-go/issues/363,Excpetion About codec.EncodeParameters(),"When I want use exec method  and  write one  like kubectl exec.
Always Respone me 
`you must specify at least 1 of stdin, stdout, stderr`
And I debug   
code : `func ExecWithOptions(kubeconfig string, ClientSet *kubernetes.Clientset, options ExecOptions) (string, string, error) {
	beego.Info(""ExecWithOptions %+v"", options)

	var err error
	//	config, err := restclient.InClusterConfig()
	config, err := LoadConfig(kubeconfig)
	if err != nil {
		beego.Error(err)
		return """", """", err
	}
	const tty = false

	req := ClientSet.CoreV1().RESTClient().Post().
		Resource(""pods"").
		Name(options.PodName).
		Namespace(options.Namespace).
		SubResource(""exec"").
		Param(""container"", options.ContainerName)
	req.VersionedParams(&v1.PodExecOptions{
		Container: options.ContainerName,
		Command:   options.Command,
		Stdin:     options.Stdin !=  nil,
		Stdout:    options.CaptureStdout,
		Stderr:    options.CaptureStderr,
		TTY:       tty,
	}, legacyscheme.ParameterCodec)

	var stdout, stderr bytes.Buffer
	err = execute(""POST"", req.URL(), config, options.Stdin, &stdout, &stderr, tty)
	fmt.Println(""make debug"",err)

	if options.PreserveWhitespace {
		return stdout.String(), stderr.String(), err
	}
	return strings.TrimSpace(stdout.String()), strings.TrimSpace(stderr.String()), err
}

func (r *Request) VersionedParams(obj runtime.Object, codec runtime.ParameterCodec) *Request {
	if r.err != nil {
		return r
	}
	params, err := codec.EncodeParameters(obj, *r.content.GroupVersion)
	if err != nil {
		fmt.Println(""codec.EncodeParameters"",err)
		r.err = err
		return r
	}
	for k, v := range params {
		if r.params == nil {
			r.params = make(url.Values)
		}
		r.params[k] = append(r.params[k], v...)
	}
	fmt.Println(""params"",r)
	return r
}
`
   

Error:
_**`codec.EncodeParameters no kind is registered for the type v1.PodExecOptions`**_
",closed,False,2018-01-29 08:26:48,2018-06-28 11:13:44
client-go,ingvagabund,https://github.com/kubernetes/client-go/issues/364,https://api.github.com/repos/kubernetes/client-go/issues/364,[RFE] extend the ObjectTracker with Patch action,"PATCH action handled by `fake.NewSimpleClientset` is currently silently ignored. It would be great to implement that as well as part of the `ObjectTracker` interface [1]. Checking the code briefly, it is not trivial but it should be still doable. Just wire necessary pieces and call ` strategicpatch.StrategicMergeMapPatch` as a starter.

[1] https://github.com/kubernetes/client-go/blob/4b76cf9824ec474ca9b122449fee23807a51e786/testing/fixture.go#L40",closed,False,2018-01-31 15:41:33,2018-06-30 18:07:44
client-go,ericuldall,https://github.com/kubernetes/client-go/issues/365,https://api.github.com/repos/kubernetes/client-go/issues/365,Autoscaling Examples,"Hello,

I'm looking for some examples on how to interact with the autoscaling api using this client. Is there any recommended documentation for this?

My current use cases would be:

1. List HPA's
2. Edit HPA's
3. Attach methods to HPA Informer() Event Handlers

Also, we have multiple clusters with different versions of the HPA. Will the go client handle backward compatibility from the newest version?

I apologize if this is not the best place to post this question. I'm happy to repost in a more appropriate location if you point me that way. Thanks in advance :D",closed,False,2018-02-06 01:29:13,2018-07-07 00:35:13
client-go,madari,https://github.com/kubernetes/client-go/issues/366,https://api.github.com/repos/kubernetes/client-go/issues/366,Cache Informer sets ResourceVersion=0 which causes API list chunking to break,"/kind bug

**What happened**:

Something in the way the cache ListWatch/Informer machinery sets ResourceVersion=""0"" breaks API chunking when listing pods.

It seems that the API server ignores the limit parameter when ResourceVersion = ""0"". It's not clear what the actual issue here is.

In contrast, `kubectl` does not appear to set ResourceVersion for the first GET request.

Is there a semantic difference between ResourceVersion ""0"" and """"?

**How to reproduce it (as minimally and precisely as possible)**:

Create a cluster with more than one pods, run the following code accessing the cluster via `kubectl proxy -v=7` and notice how chunking is not happening:

```go
// client := ...
lw := &cache.ListWatch{
  ListFunc: func(options metav1.ListOptions) (runtime.Object, error) {
    options.Limit = 1
    // Uncommenting the following ""fixes"" the chunking:
    // if options.ResourceVersion == ""0"" {
    //  options.ResourceVersion = """"
    // }
    return client.Core().Pods(metav1.NamespaceAll).List(options)
  },
  WatchFunc: func(options metav1.ListOptions) (watch.Interface, error) {
    return client.Core().Pods(metav1.NamespaceAll).Watch(options)
  },
}
_ informer := cache.NewInformer(lw, &apiv1.Pod{}, 0, cache.ResourceEventHandlerFuncs{})
informer.Run(context.Background())
```

**Environment**:

client-go Version: 78700dec6369ba22221b72770783300f143df150

Server Version: version.Info{Major:""1"", Minor:""9+"", GitVersion:""v1.9.2-gke.1"", GitCommit:""4ce7af72d8d343ea2f7680348852db641ff573af"", GitTreeState:""clean"", BuildDate:""2018-01-31T22:30:55Z"", GoVersion:""go1.9.2b4"", Compiler:""gc"", Platform:""linux/amd64""}",closed,False,2018-02-09 04:27:25,2018-07-11 23:32:11
client-go,hongchaodeng,https://github.com/kubernetes/client-go/issues/367,https://api.github.com/repos/kubernetes/client-go/issues/367,Remove objectType/expectedType as parameter in Informer/Reflector constructor,"It is weird and cumbersome to add `&Pod{}` as parameter in constructor of Informer. Digging further, the objectType is used for logging and runtime type checking:

https://github.com/kubernetes/client-go/blob/7cd1d3291b7d9b1e2d54d4b69eb65995eaf8888e/tools/cache/reflector.go#L385

Is that right? If so, this is unnecessary from user's perspective, and adds another parameter to constructing informer. It would be great to remove that.",closed,False,2018-02-13 03:20:14,2018-02-13 19:21:19
client-go,lucasponce,https://github.com/kubernetes/client-go/issues/368,https://api.github.com/repos/kubernetes/client-go/issues/368,"Excessive ""Throttling request took..."" logging ","Hello,
Apologizes if this is not the way to report/ask for a technical question.

Using the API to query services like

```
services, err := in.k8s.CoreV1().Services(namespace).List(emptyListOptions)
service, err := in.k8s.CoreV1().Services(namespace).Get(serviceName, emptyGetOptions)
```

is showing a high logging messages like 

```
I0214 13:00:34.181260       1 request.go:480] Throttling request took 166.201583ms, request: GET:https://172.30.0.1:443/api/v1/namespaces/istio-system/services
I0214 13:00:34.381281       1 request.go:480] Throttling request took 196.769791ms, request: GET:https://172.30.0.1:443/api/v1/namespaces/istio-system/services/details
I0214 13:00:34.581235       1 request.go:480] Throttling request took 197.069613ms, request: GET:https://172.30.0.1:443/api/v1/namespaces/istio-system/endpoints/details
I0214 13:00:34.781304       1 request.go:480] Throttling request took 197.325988ms, request: GET:https://172.30.0.1:443/api/v1/namespaces/istio-system/pods/details-v1-1476947904-5dg29
I0214 13:00:34.981414       1 request.go:480] Throttling request took 190.770702ms, request: GET:https://172.30.0.1:443/api/v1/namespaces/istio-system/services/grafana
I0214 13:00:35.181269       1 request.go:480] Throttling request took 197.389858ms, request: GET:https://172.30.0.1:443/api/v1/namespaces/istio-system/endpoints/grafana
I0214 13:00:35.381320       1 request.go:480] Throttling request took 182.869843ms, request: GET:https://172.30.0.1:443/api/v1/namespaces/istio-system/pods/grafana-3098480057-dnf8c
I0214 13:00:35.581367       1 request.go:480] Throttling request took 190.798304ms, request: GET:https://172.30.0.1:443/api/v1/namespaces/istio-system/services/istio-ingress
```
I wonder if this could be:
- a pure local environment on my testing machine
- or, we are not refining the query (we use empty options for GET and LIST)
- or, is there any best practice from the client side ?

Thanks,
Lucas Ponce
",closed,False,2018-02-14 14:27:53,2018-07-14 16:36:11
client-go,amandahla,https://github.com/kubernetes/client-go/issues/369,https://api.github.com/repos/kubernetes/client-go/issues/369,[Question] Example to cp file Kubernetes Container (POD),"Is it possible to do it using client-go?

Should I use something like this?

```
execRequest := kubeClient.CoreV1().RESTClient().Post().
        Resource(""pods"").
        Name(req.Pod).
        Namespace(req.Namespace).
        SubResource(""exec"").
        Param(""container"", req.Container).
        Param(""command"", req.Command).
        Param(""stdin"", ""true"").
        Param(""stdout"", ""false"").
        Param(""stderr"", ""false"").
        Param(""tty"", ""false"")
```",closed,False,2018-02-15 18:18:58,2018-07-15 20:03:10
client-go,FaKod,https://github.com/kubernetes/client-go/issues/370,https://api.github.com/repos/kubernetes/client-go/issues/370,portforward.go:331] an error occurred forwarding,"K8s 1.9.3 kubectl on MacOS (to 1.9.3 K8s Cluster on Container Linux)

Doing a simple port-forward (f.e. to tiller) on my mac bash results in:

```
E0216 15:52:41.029173   40160 portforward.go:331] an error occurred forwarding 44134 -> 44134: error forwarding port 44134 to pod 33eb364bdf5a87418a05acd16e35822ec4146eed7e1fca4d41ab2a8cc43b594b, uid : exit status 1: 2018/02/16 14:52:40 socat[6313] E getaddrinfo(""localhost"", ""NULL"", {1,2,1,6}, {}): Temporary failure in name resolution
```
This exception occurs only after trying to send data.

Any idea what can be the cause of this?  

Complete log:
```
> kubectl -n kube-system port-forward tiller-deploy-5b48764ff7-pm6cd 44134:44134 --v=10
I0216 16:32:23.189909   44953 loader.go:357] Config loaded from file /.../kubeconfig
I0216 16:32:23.210702   44953 round_trippers.go:417] curl -k -v -XGET  -H ""Accept: application/json, */*"" -H ""User-Agent: kubectl/v1.9.3 (darwin/amd64) kubernetes/d283541"" https://1.2.3.4/api/v1/namespaces/kube-system/pods/tiller-deploy-5b48764ff7-pm6cd
I0216 16:32:25.047948   44953 round_trippers.go:436] GET https://1.2.3.4/api/v1/namespaces/kube-system/pods/tiller-deploy-5b48764ff7-pm6cd 200 OK in 1837 milliseconds
I0216 16:32:25.048006   44953 round_trippers.go:442] Response Headers:
I0216 16:32:25.048022   44953 round_trippers.go:445]     Content-Type: application/json
I0216 16:32:25.048036   44953 round_trippers.go:445]     Content-Length: 2985
I0216 16:32:25.048048   44953 round_trippers.go:445]     Date: Fri, 16 Feb 2018 15:32:24 GMT
I0216 16:32:25.086489   44953 request.go:873] Response Body: {""kind"":""Pod"",""apiVersion"":""v1"",""metadata"":{""name"":""tiller-deploy-5b48764ff7-pm6cd"",""generateName"":""tiller-deploy-5b48764ff7-"",""namespace"":""kube-system"",""selfLink"":""/api/v1/namespaces/kube-system/pods/tiller-deploy-5b48764ff7-pm6cd"",""uid"":""6472e10f-12f8-11e8-adc0-0671000007fc"",""resourceVersion"":""2211"",""creationTimestamp"":""2018-02-16T09:04:28Z"",""labels"":{""app"":""helm"",""name"":""tiller"",""pod-template-hash"":""1604320993""},""ownerReferences"":[{""apiVersion"":""extensions/v1beta1"",""kind"":""ReplicaSet"",""name"":""tiller-deploy-5b48764ff7"",""uid"":""64712df6-12f8-11e8-adc0-0671000007fc"",""controller"":true,""blockOwnerDeletion"":true}]},""spec"":{""volumes"":[{""name"":""tiller-token-pst7g"",""secret"":{""secretName"":""tiller-token-pst7g"",""defaultMode"":420}}],""containers"":[{""name"":""tiller"",""image"":""gcr.io/kubernetes-helm/tiller:v2.8.1"",""ports"":[{""name"":""tiller"",""containerPort"":44134,""protocol"":""TCP""},{""name"":""http"",""containerPort"":44135,""protocol"":""TCP""}],""env"":[{""name"":""TILLER_NAMESPACE"",""value"":""kube-system""},{""name"":""TILLER_HISTORY_MAX"",""value"":""0""}],""resources"":{},""volumeMounts"":[{""name"":""tiller-token-pst7g"",""readOnly"":true,""mountPath"":""/var/run/secrets/kubernetes.io/serviceaccount""}],""livenessProbe"":{""httpGet"":{""path"":""/liveness"",""port"":44135,""scheme"":""HTTP""},""initialDelaySeconds"":1,""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""readinessProbe"":{""httpGet"":{""path"":""/readiness"",""port"":44135,""scheme"":""HTTP""},""initialDelaySeconds"":1,""timeoutSeconds"":1,""periodSeconds"":10,""successThreshold"":1,""failureThreshold"":3},""terminationMessagePath"":""/dev/termination-log"",""terminationMessagePolicy"":""File"",""imagePullPolicy"":""IfNotPresent""}],""restartPolicy"":""Always"",""terminationGracePeriodSeconds"":30,""dnsPolicy"":""ClusterFirst"",""serviceAccountName"":""tiller"",""serviceAccount"":""tiller"",""nodeName"":""k8s-bc-worker-839b7c4"",""securityContext"":{},""schedulerName"":""default-scheduler"",""tolerations"":[{""key"":""node.kubernetes.io/not-ready"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300},{""key"":""node.kubernetes.io/unreachable"",""operator"":""Exists"",""effect"":""NoExecute"",""tolerationSeconds"":300}]},""status"":{""phase"":""Running"",""conditions"":[{""type"":""Initialized"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2018-02-16T09:04:28Z""},{""type"":""Ready"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2018-02-16T09:04:40Z""},{""type"":""PodScheduled"",""status"":""True"",""lastProbeTime"":null,""lastTransitionTime"":""2018-02-16T09:04:28Z""}],""hostIP"":""1.2.3.4"",""podIP"":""10.244.4.4"",""startTime"":""2018-02-16T09:04:28Z"",""containerStatuses"":[{""name"":""tiller"",""state"":{""running"":{""startedAt"":""2018-02-16T09:04:32Z""}},""lastState"":{},""ready"":true,""restartCount"":0,""image"":""gcr.io/kubernetes-helm/tiller:v2.8.1"",""imageID"":""docker-pullable://gcr.io/kubernetes-helm/tiller@sha256:394fb7d5f2fbaca54f6a0dec387cef926f6ae359786c89f7da67db173b97a322"",""containerID"":""docker://9aa5cb229a52d53da9dc53d73588067c668657ee937d034b0713191992b3371d""}],""qosClass"":""BestEffort""}}
I0216 16:32:25.130036   44953 round_trippers.go:417] curl -k -v -XPOST  -H ""X-Stream-Protocol-Version: portforward.k8s.io"" -H ""User-Agent: kubectl/v1.9.3 (darwin/amd64) kubernetes/d283541"" https://1.2.3.4/api/v1/namespaces/kube-system/pods/tiller-deploy-5b48764ff7-pm6cd/portforward
I0216 16:32:32.044524   44953 round_trippers.go:436] POST https://1.2.3.4/api/v1/namespaces/kube-system/pods/tiller-deploy-5b48764ff7-pm6cd/portforward 101 Switching Protocols in 6914 milliseconds
I0216 16:32:32.044583   44953 round_trippers.go:442] Response Headers:
I0216 16:32:32.044606   44953 round_trippers.go:445]     Connection: Upgrade
I0216 16:32:32.044625   44953 round_trippers.go:445]     Upgrade: SPDY/3.1
I0216 16:32:32.044647   44953 round_trippers.go:445]     X-Stream-Protocol-Version: portforward.k8s.io
I0216 16:32:32.044662   44953 round_trippers.go:445]     Date: Fri, 16 Feb 2018 15:32:29 GMT
Forwarding from 127.0.0.1:44134 -> 44134
Handling connection for 44134
E0216 16:32:36.106965   44953 portforward.go:331] an error occurred forwarding 44134 -> 44134: error forwarding port 44134 to pod 33eb364bdf5a87418a05acd16e35822ec4146eed7e1fca4d41ab2a8cc43b594b, uid : exit status 1: 2018/02/16 15:32:35 socat[13536] E getaddrinfo(""localhost"", ""NULL"", {1,2,1,6}, {}): Temporary failure in name resolution
```",closed,False,2018-02-16 15:37:12,2018-02-17 09:05:56
client-go,trunet,https://github.com/kubernetes/client-go/issues/371,https://api.github.com/repos/kubernetes/client-go/issues/371,"crypto/x509: verification fails with ""cannot parse dnsName"" in intermediate","Loading an intermediate certificate, is generating this error:
```
E0226 11:51:47.736103       7 config.go:330] Expected to load root CA config from /var/run/secrets/kubernetes.io/serviceaccount/ca.crt, but got err: error reading /var/run/secrets/kubernetes.io/serviceaccount/ca.crt: x509: cannot parse dnsName ""Trunet.co AMS Kubernetes Intermediate CA""
```

My intermediate CA generated by hashicorp vault, contains:
```
X509v3 Basic Constraints: critical
    CA:TRUE
X509v3 Subject Alternative Name: 
    DNS:Trunet.co AMS Kubernetes Intermediate CA
```

This will probably be fixed on https://github.com/golang/go/issues/23995",closed,False,2018-02-26 12:10:45,2018-07-27 19:45:53
client-go,xiangpengzhao,https://github.com/kubernetes/client-go/issues/372,https://api.github.com/repos/kubernetes/client-go/issues/372,"Support ""DeleteByKey"" for ""Store interface""","The interface has `Get` and `GetByKey`, but it only has `Delete` for deletion. It would be great to support `DeleteByKey`.

https://github.com/kubernetes/client-go/blob/8aceb98010c1c18b6b54a35b52fd5b46905e3d7f/tools/cache/store.go#L34-L48

Guess this might influence some downstream codes if we support this.

/cc @caesarxuchao @deads2k ",closed,False,2018-02-28 09:04:21,2018-03-05 03:02:14
client-go,F21,https://github.com/kubernetes/client-go/issues/373,https://api.github.com/repos/kubernetes/client-go/issues/373,Raft log replication support,"I have a few apps that uses the [hashicorp/raft](https://github.com/hashicorp/raft) library. Since these apps are running on kubernetes, I want to remove the `hashicorp/raft` library and lean on kubernetes.

There is currently the [tools/leaderelection](https://godoc.org/k8s.io/client-go/tools/leaderelection) package for handling leader election. However, I need to propagate other state to all my app instances. This is currently being done using `hashicorp/raft`'s log replication feature. It would be nice if `client-go` can introduce an abstraction on top of config map or another primitive to support storing arbitrary data structures via consensus.",closed,False,2018-03-02 06:52:03,2018-07-30 08:45:22
client-go,jfoy,https://github.com/kubernetes/client-go/issues/374,https://api.github.com/repos/kubernetes/client-go/issues/374,Client should expose a mechanism to close underlying TCP connections,"Re kubernetes/kubernetes#52176, kubernetes/kubernetes#56720, #342 

(Short form: a stalled TCP connection to apiserver from kubelet or kube-proxy can cause ~15 minutes of disruption across a substantial number of nodes until the local kernel closes the socket.)

I believe we need a mechanism for `requestCanceler.CancelRequest` to invoke `transport.CloseIdleConnections` based on config. It looks like we could do this with a small `http.RoundTripper` built to purpose. I hope to submit a PR with this change shortly. 

I'm not sure if that behavior should be activated on a case-by-case basis using `config.WrapTransport` (less invasive, narrower change) or if it should be part of the core config used in `transport.HTTPWrappersForConfig` (needed in multiple use cases per issues listed above). What's the convention here? ",open,False,2018-03-08 22:23:53,2019-02-16 17:11:08
client-go,karthickrajamani,https://github.com/kubernetes/client-go/issues/375,https://api.github.com/repos/kubernetes/client-go/issues/375,in-cluster example fails without addition of suitable role for serviceAccount,"When trying the ""kubectl run --rm -i demo --image=localhost:5000/in-cluster  --image-pull-policy=Never"" command on a kubeadm deployed cluster (not minikube), the command doesn't return. Logs shows following issue.

$ kubectl logs demo-7d7f49f598-8xwpr
panic: pods is forbidden: User ""system:serviceaccount:default:default"" cannot list pods at the cluster scope
goroutine 1 [running]:
main.main()
	/home/karthick/go/src/k8s.io/client-go/examples/in-cluster-client-configuration/main.go:44 +0x41e

Setting up an appropriate cluster role for the serviceAccount appears to be needed, e.g., 
$ kubectl create clusterrolebinding serviceaccounts-view --clusterrole=view --group=system:serviceaccounts 

After doing so, the demo appears to work as expected. Maybe example can be updated to include this step.",closed,False,2018-03-13 21:32:17,2018-08-21 06:20:36
client-go,sunlintong,https://github.com/kubernetes/client-go/pull/376,https://api.github.com/repos/kubernetes/client-go/issues/376,Update main.go,"Add some note
",closed,True,2018-03-14 03:50:21,2018-03-14 03:55:21
client-go,sunlintong,https://github.com/kubernetes/client-go/pull/377,https://api.github.com/repos/kubernetes/client-go/issues/377,Update main.go,"add some note

",closed,True,2018-03-14 05:00:00,2018-03-14 05:02:38
client-go,nim-nim,https://github.com/kubernetes/client-go/issues/378,https://api.github.com/repos/kubernetes/client-go/issues/378,Regenerating APIS,"Hi,

It seems the kubernetes 1.7.14 client is using an obsolete ugorji version (they released their first stable supported version a little while ago). I get a lot of

```
/usr/share/gocode/src/k8s.io/client-go/pkg/apis/authentication/v1beta1/types.generated.go:132:6: z.EncSendContainerState undefined (type codec.genHelperEncoder has no field or method EncSendContainerState)
```

Errors. What is the preferred way to regenerate those files with a newer ugorji? IIRC for etcd you just removed the generated files and ugorji regenerated clean ones. Is it the same for kubernetes?
",closed,False,2018-03-19 13:41:17,2018-03-19 13:49:09
client-go,nim-nim,https://github.com/kubernetes/client-go/issues/379,https://api.github.com/repos/kubernetes/client-go/issues/379,The vendored Azure autorest may present security issues,"A race condition was discovered in the Azure Active Directory client of github.com/Azure/go-autorest/ when refreshing auth tokens, requiring an API change to fix and the bump of the autorest major version from 9 to 10.

The kubernetes clients (1.7 to 1.9) are still built against a pre-10 autorest version.

It would be awfully nice if they could be switched to the latest autorest 10 release.

I've no idea if the race is exploitable but in such cases it's better not to try to be smarter than attackers and just apply security fixes.",closed,False,2018-03-20 10:04:17,2018-05-09 23:30:56
client-go,anguslees,https://github.com/kubernetes/client-go/issues/380,https://api.github.com/repos/kubernetes/client-go/issues/380,`restclient.Request.Do()` does not retry after io errors while reading body (and should),"`Request.transformResponse` helpfully translates an `http2.StreamError` while reading the response body into a nice error message explaining that the requester should retry:
https://github.com/kubernetes/client-go/blob/master/rest/request.go#L780

Unfortunately `Request.Do` has no handler for this error, and indeed the textual nature of the error makes it hard to match.

Typically the body is larger than the headers, and it's easy to hit this error while using restclient over a slow link.

I think:
- `Request.Do` should be improved to handle this error and trigger a throttled retry for GET requests, similar to the clever logic in `Request.request` used while reading the headers. 
- For POST requests, `Request.transformResponse` should raise this as a more specific error, so callers can decide if/when to retry.",open,False,2018-03-21 00:19:55,2019-02-01 00:58:57
client-go,zhangcunli,https://github.com/kubernetes/client-go/issues/381,https://api.github.com/repos/kubernetes/client-go/issues/381,I can't build the out-of-cluster-client-configuration example.,"# github.com/kubernetes/client-go/examples/out-of-cluster-client-configuration
./main.go:56:67: cannot use ""github.com/kubernetes/client-go/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".ListOptions literal (type ""github.com/kubernetes/client-go/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".ListOptions) as type ""k8s.io/apimachinery/pkg/apis/meta/v1"".ListOptions in argument to clientset.CoreV1().Pods("""").List
./main.go:67:73: cannot use ""github.com/kubernetes/client-go/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".GetOptions literal (type ""github.com/kubernetes/client-go/vendor/k8s.io/apimachinery/pkg/apis/meta/v1"".GetOptions) as type ""k8s.io/apimachinery/pkg/apis/meta/v1"".GetOptions in argument to clientset.CoreV1().Pods(namespace).Get",closed,False,2018-03-21 03:40:49,2018-03-21 03:45:48
client-go,sttts,https://github.com/kubernetes/client-go/issues/382,https://api.github.com/repos/kubernetes/client-go/issues/382,informers: resync is inactive without event handlers,"If there is no event handler registered for`sharedIndexInformers` the shared processor has no listener and the `shouldResync` func (https://github.com/kubernetes/kubernetes/blob/5f7b530d87a426348ac7c8fa27f8079fd9445d70/staging/src/k8s.io/client-go/tools/cache/shared_informer.go#L436) returns always false.

As a consequence a typed informer without event handlers returns a listener interface for the underlying store that has no working resync. 

Thanks for the great analysis in https://github.com/kubernetes/kube-state-metrics/issues/402#issue-307052307.",closed,False,2018-03-21 14:54:18,2018-04-13 15:05:43
client-go,nim-nim,https://github.com/kubernetes/client-go/issues/383,https://api.github.com/repos/kubernetes/client-go/issues/383,"Go 1.10: selector_test.go:390: Errorf format %t arg result.Empty is a func value, not called","1.7.15 does not pass unit tests with Go 1.10. At least:

```
+ GOPATH=/builddir/build/BUILD/apimachinery-kubernetes-1.7.15/_build:/usr/share/gocode
+ go test -buildmode pie -compiler gc -ldflags '-extldflags '\''-Wl,-z,relro  '\'''
# k8s.io/apimachinery/pkg/fields
./selector_test.go:390: Errorf format %t arg result.Empty is a func value, not called
FAIL	k8s.io/apimachinery/pkg/fields [build failed]
```",closed,False,2018-03-24 08:07:56,2018-03-24 08:09:00
client-go,nim-nim,https://github.com/kubernetes/client-go/issues/384,https://api.github.com/repos/kubernetes/client-go/issues/384,"Go 1.10: client_test.go:102: Fatalf format %v reads arg #1, but call has only 0 args","1.9.6 does not pass unit tests with Go 1.10. At least:

```
+ GOPATH=/builddir/build/BUILD/client-go-kubernetes-1.9.6/_build:/usr/share/gocode
+ go test -buildmode pie -compiler gc -ldflags '-extldflags '\''-Wl,-z,relro  '\'''
# k8s.io/client-go/scale
./client_test.go:102: Fatalf format %v reads arg #1, but call has only 0 args
FAIL    k8s.io/client-go/scale [build failed]
+ GOPATH=/builddir/build/BUILD/client-go-kubernetes-1.9.6/_build:/usr/share/gocode
+ go test -buildmode pie -compiler gc -ldflags '-extldflags '\''-Wl,-z,relro  -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld '\'''
# k8s.io/client-go/util/certificate
./certificate_manager_test.go:249: Errorf format %d has arg g.lastValue of wrong type float64
FAIL    k8s.io/client-go/util/certificate [build failed]
```",closed,False,2018-03-26 07:49:48,2018-03-26 14:06:43
client-go,nim-nim,https://github.com/kubernetes/client-go/issues/385,https://api.github.com/repos/kubernetes/client-go/issues/385,Go 1.10: oidc_test.go:113: Errorf format % is missing verb at end of string,"1.7.15 is not passing unit tests with Go 1.10. At least:

```
+ GOPATH=/builddir/build/BUILD/client-go-kubernetes-1.7.15/_build:/usr/share/gocode
+ go test -buildmode pie -compiler gc -ldflags '-extldflags '\''-Wl,-z,relro  -Wl,-z,now -specs=/usr/lib/rpm/redhat/redhat-hardened-ld '\'''
# k8s.io/client-go/plugin/pkg/client/auth/oidc
./oidc_test.go:113: Errorf format % is missing verb at end of string
```",closed,False,2018-03-26 08:00:21,2018-03-26 12:53:38
client-go,tamalsaha,https://github.com/kubernetes/client-go/issues/386,https://api.github.com/repos/kubernetes/client-go/issues/386,Add Safe** methods to Listers,"We are using listers to write own controllers. The issue is that it is very easy to inadvertently mutate objects extracted from Listers. I propose that

- Generated Code automatically return DeepCopied versoined in GET and LIST methods.
- Add Unsafe** version methods that return without DeepCopy.

I understand that this might be late for this type of changes. Thanks for the consideration.

cc: @sttts @deads2k ",closed,False,2018-03-29 00:16:14,2018-07-29 04:18:23
client-go,yingyan003,https://github.com/kubernetes/client-go/issues/387,https://api.github.com/repos/kubernetes/client-go/issues/387,Is there demo shows how to use client-go to connect the k8s?,"Are there any official docs show us how to use client-go to connect to the k8s? I mean the details  codes in programing. Because I am new with k8s and client-go, I hava tried to find the docs anywhere I can but failed. ",closed,False,2018-03-29 03:38:28,2018-03-29 04:29:13
client-go,gururajs15,https://github.com/kubernetes/client-go/issues/388,https://api.github.com/repos/kubernetes/client-go/issues/388,Support auth method for AWS,"Hi Team,

Does client-go support AWS auth method?

I could see only Azure, Openstack, GCP, OIDC in import section of https://github.com/kubernetes/client-go/tree/master/plugin/pkg/client/auth 

import (
	        // Initialize all known client auth plugins.
	        _ ""k8s.io/client-go/plugin/pkg/client/auth/azure""
	        _ ""k8s.io/client-go/plugin/pkg/client/auth/gcp""
	        _ ""k8s.io/client-go/plugin/pkg/client/auth/oidc""
	        _ ""k8s.io/client-go/plugin/pkg/client/auth/openstack""
	)
",closed,False,2018-03-29 08:51:50,2018-03-30 01:09:09
client-go,nikhita,https://github.com/kubernetes/client-go/pull/389,https://api.github.com/repos/kubernetes/client-go/issues/389,Add client-go 7.0.0 changelog,"Ref: https://docs.google.com/spreadsheets/d/14A9bijhCBHju5V0R4leKaa-ugcm-pEC9SZ0zJFHpVBk/edit#gid=0

/cc @sttts @caesarxuchao @timoreimann @munnerz @LiliC
",closed,True,2018-04-01 11:36:13,2018-04-03 08:06:06
client-go,mengqiy,https://github.com/kubernetes/client-go/issues/390,https://api.github.com/repos/kubernetes/client-go/issues/390,support modifying an object in jsonpath package,">var nodes = jp.apply(data, '$..author', function(value) { return value.toUpperCase() });
// [
//   { path: ['$', 'store', 'book', 0, 'author'], value: 'NIGEL REES' },
//   { path: ['$', 'store', 'book', 1, 'author'], value: 'EVELYN WAUGH' },
//   { path: ['$', 'store', 'book', 2, 'author'], value: 'HERMAN MELVILLE' },
//   { path: ['$', 'store', 'book', 3, 'author'], value: 'J. R. R. TOLKIEN' }
// ]

Have something similar to https://github.com/dchester/jsonpath#jpapplyobj-pathexpression-fn in our [jsonpath package](https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io/client-go/util/jsonpath) 

/kind feature",closed,False,2018-04-02 16:41:19,2018-12-09 21:19:11
client-go,nikhita,https://github.com/kubernetes/client-go/pull/391,https://api.github.com/repos/kubernetes/client-go/issues/391,Update README to reflect 7.0.0 release,"/cc @sttts @caesarxuchao 
",closed,True,2018-04-03 08:21:47,2018-04-03 20:16:04
client-go,sttts,https://github.com/kubernetes/client-go/issues/392,https://api.github.com/repos/kubernetes/client-go/issues/392,Release v7.0.0,"TODO:

- [x] smoke test with https://gist.github.com/sttts/06f5e440540ac629a313f28ad8002277
- [x] update release notes https://github.com/kubernetes/client-go/pull/389
- [x] update README https://github.com/kubernetes/client-go/pull/391
",closed,False,2018-04-03 10:06:23,2018-04-04 08:25:43
client-go,bgrant0607,https://github.com/kubernetes/client-go/issues/393,https://api.github.com/repos/kubernetes/client-go/issues/393,third_party isn't populated correctly,"Please see:
https://github.com/kubernetes/kubernetes/tree/master/third_party/forked/golang",open,False,2018-04-03 16:51:03,2018-08-01 19:58:19
client-go,hochuenw,https://github.com/kubernetes/client-go/issues/394,https://api.github.com/repos/kubernetes/client-go/issues/394,Document of dynamic client,"Hi, I am trying to create one crd through `dynamic client` and `unstructured`. It would be nice if we have one example for this in `examples` For example, using them to create a normal `job`?",closed,False,2018-04-04 16:24:46,2019-02-14 05:42:46
client-go,madari,https://github.com/kubernetes/client-go/issues/395,https://api.github.com/repos/kubernetes/client-go/issues/395,Panics within cache.IndexerInformer's OnDelete watch handlers don't propagate up,This can be reproduced by creating a cache.NewIndexerInformer and panicing in its OnDelete resource event handler.,closed,False,2018-04-05 17:45:13,2018-09-03 11:31:52
client-go,reneherrero,https://github.com/kubernetes/client-go/issues/396,https://api.github.com/repos/kubernetes/client-go/issues/396,ConfigMap.Data not working with multilines,"Hi,
Not sure if this is a bug, or if the problem is between the chair and the keyboard: the Data map[string]string in the ConfigMap struct does not work with new lines.

Sample code is attached (renamed it from config_map.go to config_map.log) 

[config_map.log](https://github.com/kubernetes/client-go/files/1904614/config_map.log)

Thanks",closed,False,2018-04-12 19:13:40,2018-04-14 15:39:51
client-go,michelleN,https://github.com/kubernetes/client-go/pull/397,https://api.github.com/repos/kubernetes/client-go/issues/397,fix(docs): fix out-of-cluster example description,"Sorry, we do not accept changes directly against this repository. Please see 
CONTRIBUTING.md for information on where and how to contribute instead.
",closed,True,2018-04-18 01:02:29,2018-04-18 01:02:45
client-go,anumantharaja,https://github.com/kubernetes/client-go/issues/398,https://api.github.com/repos/kubernetes/client-go/issues/398,Option to rollback using client-go ,"I would like to rollback the deployment to a particular revision( rollout history) using client-go(6.0.0) library of k8s. I created a deployment using workload API object apps/v1beta2 . Seems in apps/v1beta2 there is no "".spec.rollbackTo options"". Where can i find the options to rollback to particular revision using client-go(6.0.0) library.",closed,False,2018-04-18 06:36:18,2018-09-24 04:45:19
client-go,zwtj,https://github.com/kubernetes/client-go/issues/399,https://api.github.com/repos/kubernetes/client-go/issues/399,How to get the node on which a pod is running?,"`kubectl get pods -o wide` returns a `NODES` column that shows where each pod is running. Given a pod name, how can I get the corresponding node name? I couldn't find a way to get it from `v1.Pod`.",closed,False,2018-04-19 20:41:14,2018-10-14 09:33:31
client-go,borntorock,https://github.com/kubernetes/client-go/issues/400,https://api.github.com/repos/kubernetes/client-go/issues/400,Getting undefined kubernetes.NewforConfig while using the code from the in-cluster-config ,"Took the functions of clienset for creating the in-cluster-config and clientset from the example below:

https://github.com/kubernetes/client-go/blob/master/examples/in-cluster-client-configuration/main.go

```	// creates the in-cluster config
	config, err := rest.InClusterConfig()
	if err != nil {
		panic(err.Error())
	}
	// creates the clientset
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		panic(err.Error())
	}
```

But while executing this code, I'm getting the error message:
undefined: kubernetes.NewForConfig

I have imported these in my code:
```
	""k8s.io/apimachinery/pkg/api/errors""
	""k8s.io/client-go/kubernetes""
	""k8s.io/client-go/rest""
```

Any suggestions on how to resolve this issue? Possibilities where this error is being faced.

",closed,False,2018-04-24 09:52:05,2018-05-09 10:04:36
client-go,mingyuanzhu,https://github.com/kubernetes/client-go/issues/401,https://api.github.com/repos/kubernetes/client-go/issues/401,How convert the event object to k8s.io type when watch the event,"When I use the client watch api to monitor the event, how cover the runtime.Object to the k8s type?
```
        stream, err := c.clientSet.CoreV1().Nodes().Watch(opts)
	if err != nil {
		return err
	}
	for event := range stream.ResultChan() {
		switch event.Type {
		case watch.Added:
		// How convert the event.Object to k8s.io/api/core/v1.Node? 
                // Is there some tools can help do this?
		case watch.Modified:			
		case watch.Deleted:			
		case watch.Error:			
	}
	return nil
```",closed,False,2018-04-26 11:28:19,2018-04-26 14:02:55
client-go,zanhsieh,https://github.com/kubernetes/client-go/issues/402,https://api.github.com/repos/kubernetes/client-go/issues/402,"Error: error parsing jsonpath {.items[?(!(@.spec.taints))]].metadata.name}, unclosed array expect ]","Hi,

Try to get all `untainted nodes` from k8s cluster with pure kubectl way.

# What happen?

```
$ kubectl get nodes -o jsonpath='{.items[?(!(@.spec.taints))]].metadata.name}'
error: error parsing jsonpath {.items[?(!(@.spec.taints))]].metadata.name}, unclosed array expect ]
```
# Expectation
Similar output just like:
```
$ kubectl get nodes -o json | jq '.items[] | select(.spec.taints == null) | .metadata.name'
""ip-172-20-109-153.ap-southeast-1.compute.internal""
""ip-172-20-47-98.ap-southeast-1.compute.internal""
```
# Kubernetes version
```
$ kubectl version
Client Version: version.Info{Major:""1"", Minor:""10"", GitVersion:""v1.10.1"", GitCommit:""d4ab47518836c750f9949b9e0d387f20fb92260b"", GitTreeState:""clean"", BuildDate:""2018-04-13T22:27:55Z"", GoVersion:""go1.9.5"", Compiler:""gc"", Platform:""darwin/amd64""}
Server Version: version.Info{Major:""1"", Minor:""9"", GitVersion:""v1.9.3"", GitCommit:""d2835416544f298c919e2ead3be3d0864b52323b"", GitTreeState:""clean"", BuildDate:""2018-02-07T11:55:20Z"", GoVersion:""go1.9.2"", Compiler:""gc"", Platform:""linux/amd64""}
```
Please let me know if I do anything wrong. Thanks.",closed,False,2018-04-30 01:06:11,2018-09-27 02:22:54
client-go,lbathina,https://github.com/kubernetes/client-go/issues/403,https://api.github.com/repos/kubernetes/client-go/issues/403,Secrets created from json is different from secrets created using the go-client api,"```
func  CreateSecret(name string, encryptedData map[string][]byte, unencryptedData map[string]string) error {
	var secret *corev1.Secret
	if (len(encryptedData) == 0) && (len(unencryptedData) == 0) {
		return fmt.Errorf(""Secret data cannot be blank"")
	}
	secret = &corev1.Secret{
		Type: corev1.SecretTypeOpaque,
		ObjectMeta: metav1.ObjectMeta{
			Name: name,
			Labels: map[string]string{
				""heritage"": ""component-testing"",
				""app"":      ""super8"",
			},
		},
	}
	if encryptedData != nil || len(encryptedData) != 0 {
		secret.Data = encryptedData

	}
	if unencryptedData != nil || len(unencryptedData) != 0 {
		secret.StringData = unencryptedData
	}
	secretOut, err := kubeClient.client.CoreV1().Secrets(kubeClient.namespace).Create(secret)
	fmt.Println(secretOut.Name)
	return err
}
```

encrypts all the data provided in secret.Data and secret.StringData irrespective of the content 

where as the same when created with below method matches creating a secret using kubectl create -f secrets.yaml


```
func CreateSecretFromJson(b []byte) {
	var s corev1.Secret
	err := json.Unmarshal(b, &s)
	if err != nil {
		fmt.Printf(""unmarshall error"")

	}
	secret, poderr := kubeClient.client.CoreV1().Secrets(kubeClient.namespace).Create(&s)
	if poderr != nil {
		fmt.Println(poderr.Error())
	} else {
		fmt.Printf(""Created Secret %q.\n"", secret.GetObjectMeta().GetName())
	}
}
```


My data in secret has both base 64 encrypted  and unencrypted (which is already an encrypted or binary data)

",closed,False,2018-05-04 20:26:45,2018-05-08 20:56:40
client-go,venezia,https://github.com/kubernetes/client-go/issues/404,https://api.github.com/repos/kubernetes/client-go/issues/404,Add / Update examples to show rest configuration loaded through clientcmd.RESTConfigFromKubeConfig(...),"`clientcmd.RESTConfigFromKubeConfig(...)` was recently [added](https://github.com/kubernetes/kubernetes/pull/61287) but there are no examples that show its use.  There are likely individuals who wish to use client-go to connect to an arbitrary kubernetes cluster, but do not want to have to a kubeconfig file to disk in order to connect through documented methods.

It would be nice to show how someone could generate a `*rest.Config` in a real world situation using the `clientcmd.RESTConfigFromKubeConfig(...)` method, and add it to the examples folder.",closed,False,2018-05-08 14:23:09,2018-10-05 15:45:07
client-go,borntorock,https://github.com/kubernetes/client-go/issues/405,https://api.github.com/repos/kubernetes/client-go/issues/405,Not able to update the Kubernetes Configmap via the go client,"I'm  trying to update the ConfigMap in OpenShift namespace via the custom controller in Golang. 

Here is what I have in this updation of configmap function
```
    var namespace string = ""default""
    // creates the in-cluster config
    config, err := rest.InClusterConfig()
		if err != nil {
			glog.Fatal(err)
		}
		// creates the clientset
		clientset, err := kubernetes.NewForConfig(config)
		if err != nil {
			glog.Fatal(err)
		}

		configMaps, err := clientset.CoreV1().ConfigMaps(namespace).List(metav1.ListOptions{})
		if err != nil {
			return err
		}

		for _, cm := range configMaps.Items {
			if cm.GetName() == ""some1"" {
				cm.Data = file1
				_, err := clientset.CoreV1().ConfigMaps(namespace).Update(&cm)
				if err != nil {
					return err
				}
				glog.Infof(""ConfigMap '%s' updated!\n"", cm.GetName())
			}
			if cm.GetName() == ""some2"" {
				cm.Data = file2
				_, err := clientset.CoreV1().ConfigMaps(namespace).Update(&cm)
				if err != nil {
					return err
				}
				glog.Infof(""ConfigMap '%s' updated!\n"", cm.GetName())
			}
		}
```

file1 and file2 has the data which I need to update in the respective configmaps some1 and some2. 
But in this, I'm facing the below issue:
1. cannot use file1 (type string) as type map[string]string in assignment

Not sure how can I update the configmap with the data which I have in file1.

Any suggestions to resolve this issue from the maintainers or community would be highly appreciated. 

",closed,False,2018-05-09 09:43:13,2018-05-09 11:22:59
client-go,lvangool,https://github.com/kubernetes/client-go/issues/406,https://api.github.com/repos/kubernetes/client-go/issues/406,Installation Failure,"## Description

Following the `glide` [installation instructions](https://github.com/kubernetes/client-go/blob/master/INSTALL.md) I am seeing errors. I've attempted the following:
1. remove `vendor`
2. remove `~/.glide`
3. remove `glide.lock`

I've also tried installing via `Dep` [overrides](https://github.com/kubernetes/client-go/issues/78) but it looks like we have the `same issue` there.
Help appreciated!

## Details
```
$ glide -v
glide version 0.13.1
```
```
$ cat glide.yaml
package: github.com/blah/blah
import:
- package: k8s.io/client-go
  version: v7.0.0
```
```
$ glide up -v
[INFO]  Downloading dependencies. Please wait...
[INFO]  --> Fetching k8s.io/client-go
[INFO]  --> Setting version for k8s.io/client-go to v7.0.0.
[INFO]  Resolving imports
[INFO]  --> Fetching github.com/cloud66/cxlogger
[INFO]  Found Godeps.json file in /Users/lvg/.glide/cache/src/https-k8s.io-client-go
[INFO]  --> Parsing Godeps metadata...
[INFO]  --> Fetching github.com/golang/glog
[INFO]  --> Setting version for github.com/golang/glog to 44145f04b68cf362d9c4df2182967c2275eaefed.
[INFO]  --> Fetching golang.org/x/net
[INFO]  --> Setting version for golang.org/x/net to 1c05540f6879653db88113bc4a2b70aec4bd491f.
[INFO]  --> Fetching k8s.io/api
[INFO]  --> Setting version for k8s.io/api to 73d903622b7391f3312dcbac6483fed484e185f8.
[INFO]  --> Fetching k8s.io/apimachinery
[INFO]  --> Setting version for k8s.io/apimachinery to 302974c03f7e50f16561ba237db776ab93594ef6.
[INFO]  --> Fetching github.com/howeyc/gopass
[INFO]  --> Setting version for github.com/howeyc/gopass to bf9dde6d0d2c004a008c27aaee91170c786f6db8.
[INFO]  --> Fetching github.com/imdario/mergo
[INFO]  --> Setting version for github.com/imdario/mergo to 6633656539c1639d9d78127b7d47c622b5d7b6dc.
[INFO]  --> Fetching github.com/spf13/pflag
[INFO]  --> Setting version for github.com/spf13/pflag to 4c012f6dcd9546820e378d0bdda4d8fc772cdfea.
[INFO]  Found Godeps.json file in /Users/lvg/.glide/cache/src/https-k8s.io-apimachinery
[INFO]  --> Parsing Godeps metadata...
[INFO]  --> Fetching github.com/gogo/protobuf
[INFO]  --> Setting version for github.com/gogo/protobuf to c0656edd0d9eab7c66d1eb0c568f9039345796f7.
[INFO]  --> Fetching github.com/google/gofuzz
[INFO]  --> Setting version for github.com/google/gofuzz to 44d81051d367757e1c7c6a5a86423ece9afcf63c.
[INFO]  --> Fetching updates for github.com/inconshreveable/log15
[ERROR] Error scanning k8s.io/client-go/pkg/api/v1: cannot find package ""."" in:
  /Users/lvg/.glide/cache/src/https-k8s.io-client-go/pkg/api/v1
[ERROR] Error scanning k8s.io/client-go/pkg/apis/batch/v1: cannot find package ""."" in:
  /Users/lvg/.glide/cache/src/https-k8s.io-client-go/pkg/apis/batch/v1
[ERROR] Error scanning k8s.io/client-go/pkg/apis/extensions/v1beta1: cannot find package ""."" in:
  /Users/lvg/.glide/cache/src/https-k8s.io-client-go/pkg/apis/extensions/v1beta1
[INFO]  --> Fetching github.com/golang/protobuf
[INFO]  --> Setting version for github.com/golang/protobuf to 1643683e1b54a9e88ad26d98f81400c8c9d9f4f9.
[INFO]  --> Fetching github.com/googleapis/gnostic
[INFO]  --> Setting version for github.com/googleapis/gnostic to 0c5108395e2debce0d731cf0287ddf7242066aba.
[INFO]  --> Fetching golang.org/x/time
[INFO]  --> Setting version for golang.org/x/time to f51c12702a4d776e4c1fa9b0fabab841babae631.
[INFO]  Found Godeps.json file in /Users/lvg/.glide/cache/src/https-k8s.io-api
[INFO]  --> Parsing Godeps metadata...
[INFO]  --> Fetching golang.org/x/crypto
[INFO]  --> Setting version for golang.org/x/crypto to 81e90905daefcd6fd217b62423c0908922eadb30.
[INFO]  --> Fetching github.com/hashicorp/golang-lru
[INFO]  --> Setting version for github.com/hashicorp/golang-lru to a0d98a5f288019575c6d1f4bb1573fef2d1fcdc4.
[INFO]  --> Fetching github.com/davecgh/go-spew
[INFO]  --> Setting version for github.com/davecgh/go-spew to 782f4967f2dc4564575ca782fe2d04090b5faca8.
[INFO]  --> Fetching golang.org/x/sys
[INFO]  --> Setting version for golang.org/x/sys to 95c6576299259db960f6c5b9b69ea52422860fce.
[INFO]  --> Fetching gopkg.in/inf.v0
[INFO]  --> Setting version for gopkg.in/inf.v0 to 3887ee99ecf07df5b447e9b00d9c0b2adaa9f3e4.
[INFO]  --> Fetching github.com/go-stack/stack
[INFO]  --> Fetching github.com/mattn/go-colorable
[INFO]  --> Fetching github.com/mattn/go-isatty
[INFO]  --> Fetching gopkg.in/yaml.v2
[INFO]  --> Setting version for gopkg.in/yaml.v2 to 670d4cfef0544295bc27a114dbac37980d83185a.
[INFO]  --> Fetching golang.org/x/text
[INFO]  --> Setting version for golang.org/x/text to b19bf474d317b857955b12035d2c5acb57ce8b01.
[INFO]  --> Fetching github.com/ghodss/yaml
[INFO]  --> Setting version for github.com/ghodss/yaml to 73d445a93680fa1a78ae23a5839bad48f32ba1ee.
[INFO]  --> Fetching github.com/json-iterator/go
[INFO]  --> Setting version for github.com/json-iterator/go to 13f86432b882000a51c6e610c620974462691a97.
[ERROR] Failed to retrieve a list of dependencies: Error resolving imports
```

## Apendix

```
$ dep ensure
Solving failure: No versions of k8s.io/client-go met constraints:
v7.0.0: Could not introduce k8s.io/client-go@v7.0.0 due to multiple problematic subpackages:
Subpackage k8s.io/client-go/pkg/api/v1 is missing. (Package is required by (root).)	
Subpackage k8s.io/client-go/pkg/apis/batch/v1 is missing. (Package is required by (root).)
Subpackage k8s.io/client-go/pkg/apis/extensions/v1beta1 is missing. (Package is required by (root).)
v6.0.0: Could not introduce k8s.io/client-go@v6.0.0, as it is not allowed by constraint ^7.0.0 from project ...
... ",closed,False,2018-05-09 11:53:06,2018-12-22 15:17:31
client-go,kongsys,https://github.com/kubernetes/client-go/issues/407,https://api.github.com/repos/kubernetes/client-go/issues/407,how to use client-go add custom http header?,as the title says,closed,False,2018-05-10 08:11:05,2018-05-16 22:49:52
client-go,guilhem,https://github.com/kubernetes/client-go/issues/408,https://api.github.com/repos/kubernetes/client-go/issues/408,Being able to easily get current Namespace,"Getting current namespace should be easy with `client-go`.

Code is pretty easy and is already code [here](https://github.com/kubernetes/client-go/blob/master/tools/clientcmd/client_config.go#L321) but not easy to get for any app.",closed,False,2018-05-11 12:07:57,2018-10-08 13:54:36
client-go,surajnarwade,https://github.com/kubernetes/client-go/issues/409,https://api.github.com/repos/kubernetes/client-go/issues/409,Error while deleting services,"I am trying to delete bunch of services using following line,

```
err = c.kubeClient.CoreV1().Services(c.namespace).DeleteCollection(&metav1.DeleteOptions{},metav1.ListOptions{LabelSelector: selector})
```

I am getting following error,

```
the server does not allow this method on the requested resource
```",closed,False,2018-05-15 11:57:17,2018-05-15 12:51:50
client-go,bbhikkaji,https://github.com/kubernetes/client-go/issues/410,https://api.github.com/repos/kubernetes/client-go/issues/410,How to get all pods running in a given node.,"I am trying to get all pods in a given node. Can list all nodes by following but node struct having NodeSpec and NodeStatus does not have container information.

 nodes, _ := clientset.CoreV1().Nodes().List(metav1.ListOptions{})",closed,False,2018-05-16 21:20:29,2018-05-18 20:50:10
client-go,anmolbabu,https://github.com/kubernetes/client-go/issues/411,https://api.github.com/repos/kubernetes/client-go/issues/411,Unable to create istio rule,"I am trying to create an istio metric(for the sample bookinfo application as in https://istio.io/docs/guides/bookinfo.html) on my openshift cluster programmatically.
My source is at: https://github.com/anmolbabu/istio-poc while the metric and prometheus resources are created successfully and also the rule gets created without any failures, the metric doesn't appear in the prometheus. I tried to remove the rule and recreate using cli and using the yaml file at https://github.com/anmolbabu/istio-poc/blob/master/rule.yaml then the new stat starts appearing in the prometheus..

Can anyone please help",closed,False,2018-05-17 09:44:55,2018-05-19 07:25:50
client-go,bbhikkaji,https://github.com/kubernetes/client-go/issues/412,https://api.github.com/repos/kubernetes/client-go/issues/412,importing goclient takes long time to run.,"I have a simple program using goclient but takes a long time run. In the following case takes about 46 seconds.

bb#time go run example.go
<output>
real    0m21.933s
user    0m46.468s
sys     0m3.988s

Here is the program.

package main

import (
        ""flag""
        ""fmt""
        ""os""
        ""path/filepath""
        //""time""

        //""k8s.io/apimachinery/pkg/api/errors""
//      v1 ""k8s.io/api/core/v1""
        metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
        ""k8s.io/client-go/kubernetes""
        ""k8s.io/client-go/tools/clientcmd""
)

func main() {
        var kubeconfig *string
        if home := homeDir(); home != """" {
                kubeconfig = flag.String(""kubeconfig"", filepath.Join(home, "".kube"", ""config""), ""(optional) absolute path to the kubeconfig file"")
        } else {
                kubeconfig = flag.String(""kubeconfig"", """", ""absolute path to the kubeconfig file"")
        }
        flag.Parse()

        // use the current context in kubeconfig
        config, err := clientcmd.BuildConfigFromFlags("""", *kubeconfig)
        if err != nil {
                panic(err.Error())
        }

        // create the clientset
        clientset, err := kubernetes.NewForConfig(config)
        if err != nil {
                panic(err.Error())
        }

        namespace := ""default""
        nodes, _ := clientset.CoreV1().Nodes().List(metav1.ListOptions{})
        for _, node := range nodes.Items {
                pods, _ := clientset.CoreV1().Pods(namespace).List(metav1.ListOptions{
                        FieldSelector: ""spec.nodeName="" + node.Name,
                })
                fmt.Printf(""\t%s:\n"", node.Name)
                for _, pod := range pods.Items {
                        fmt.Printf(""\t\t%s: %s\n"",pod.Name, pod.Status.PodIP)
                }
        }
}

func homeDir() string {
        if h := os.Getenv(""HOME""); h != """" {
                return h
        }
        return os.Getenv(""USERPROFILE"") // windows
}
",closed,False,2018-05-18 20:53:22,2018-05-18 21:11:54
client-go,mickael-carl,https://github.com/kubernetes/client-go/issues/413,https://api.github.com/repos/kubernetes/client-go/issues/413,Object's TypeMeta is empty,"Running the following:

```
package main

import (
    ""log""

    metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
    ""k8s.io/client-go/kubernetes""
    ""k8s.io/client-go/tools/clientcmd""
    _ ""k8s.io/client-go/plugin/pkg/client/auth/oidc""
)   
    
func main() {
    config, err := clientcmd.BuildConfigFromFlags("""", ""/home/carlm/.kube/config"")
    clientset, err := kubernetes.NewForConfig(config) 
    
    configMaps, err := clientset.CoreV1().ConfigMaps(""some-namespace"").List(metav1.ListOptions{})
    log.Print(configMaps.Items[0].TypeMeta)
    log.Print(configMaps.TypeMeta)
}   
```

should yield non-empty TypeMetas but actually yields nothing in both cases (""{ }""). I believe this has also been mentioned [here](https://github.com/kubernetes/client-go/issues/193#issuecomment-383535861). ",closed,False,2018-05-19 00:33:11,2018-06-29 09:21:10
client-go,jianzi123,https://github.com/kubernetes/client-go/issues/414,https://api.github.com/repos/kubernetes/client-go/issues/414,how to attach label to some node by using client-go,"when using clientset.CoreV1().Nodes().Update(node), I found this orrors:
`Operation cannot be fulfilled on nodes ""node1"": the object has been modified; please apply your changes to the latest version and try again`.
Ask if anyone can help, thanks.",closed,False,2018-05-20 07:35:19,2018-05-20 13:08:50
client-go,benkeil,https://github.com/kubernetes/client-go/issues/415,https://api.github.com/repos/kubernetes/client-go/issues/415,API server not set from kubecontext,"If you use the newest version of `github.com/imdario/mergo` you can't init the config via a kubecontext.

from https://github.com/kubernetes/client-go/blob/e1b1ad35184abf07819079215c7374ade5b576c9/tools/clientcmd/client_config.go#L420 works with

```
name = ""github.com/imdario/mergo""
revision = ""6633656539c1639d9d78127b7d47c622b5d7b6dc""
``` 

For 

```
name = ""github.com/imdario/mergo""
version = ""v0.3.4""
```

you need to use 

```go
mergo.Merge(mergedClusterInfo, configClusterInfo, mergo.WithOverride)
```",closed,False,2018-05-20 14:16:36,2018-10-18 07:43:16
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/416,https://api.github.com/repos/kubernetes/client-go/issues/416,client-go does not respect system trusted CAs,"I'm trying to debug a Go program using client-go using mitmproxy.

Therefore I'm starting my program with environment variable `HTTPS_PROXY=:8080`.

The rest of the program is working fine, however, the API calls made to Kubernetes apiserver are failing with error:

    Get https://x.x.x.x/api/v1/services: x509: certificate signed by unknown authority

I'm authenticating to the cluster as follows:

	config := &rest.Config{
		TLSClientConfig: rest.TLSClientConfig{
			CAData: ca,
		},
		Host:        ""https://x.x.x.x"",
		BearerToken: tok.AccessToken,
	}
",closed,False,2018-05-22 03:09:09,2018-05-22 03:34:03
client-go,seblegall,https://github.com/kubernetes/client-go/issues/417,https://api.github.com/repos/kubernetes/client-go/issues/417,Issue at compilation time when required with dep,"Hi,

It seems that there is a compilation error when the client-go is required from `dep`.

The `dep ensure` command goes well. But then... `go build` output this error : 

```sh
# github.com/seblegall/test-k8s-go-client/vendor/k8s.io/client-go/discovery
vendor/k8s.io/client-go/discovery/restmapper.go:42:75: undefined: meta.VersionInterfacesFunc
vendor/k8s.io/client-go/discovery/restmapper.go:176:19: undefined: meta.VersionInterfacesFunc
```

Steps to reproduce this error : 

- Copy past the source code from : [https://github.com/kubernetes/client-go/blob/master/examples/out-of-cluster-client-configuration/main.go](https://github.com/kubernetes/client-go/blob/master/examples/out-of-cluster-client-configuration/main.go) in new project.
- Run `dep init`
- Run `go build`

I originally had this trouble when trying to do a `dep update` on project that use this dependency : [https://github.com/Meetic/blackbeard](https://github.com/Meetic/blackbeard)

I'm using : `go version go1.9.2 darwin/amd64`

`dep version` output (I'm using dep build from source and I'm up to date with master) : 
```sh
dep:
 version     : devel
 build date  :
 git hash    :
 go version  : go1.9.2
 go compiler : gc
 platform    : darwin/amd64
 features    : ImportDuringSolve=false
```
",closed,False,2018-05-23 13:03:27,2018-12-30 23:34:27
client-go,jessfraz,https://github.com/kubernetes/client-go/issues/418,https://api.github.com/repos/kubernetes/client-go/issues/418,Create a SECURITY_CONTACTS file.,"As per the email sent to kubernetes-dev[1], please create a SECURITY_CONTACTS
file.

The template for the file can be found in the kubernetes-template repository[2].
A description for the file is in the steering-committee docs[3], you might need
to search that page for ""Security Contacts"".

Please feel free to ping me on the PR when you make it, otherwise I will see when
you close this issue. :)

Thanks so much, let me know if you have any questions.

(This issue was generated from a tool, apologies for any weirdness.)

[1] https://groups.google.com/forum/#!topic/kubernetes-dev/codeiIoQ6QE
[2] https://github.com/kubernetes/kubernetes-template-project/blob/master/SECURITY_CONTACTS
[3] https://github.com/kubernetes/community/blob/master/committee-steering/governance/sig-governance-template-short.md
",closed,False,2018-05-24 14:39:07,2018-06-02 04:19:47
client-go,dudehook,https://github.com/kubernetes/client-go/issues/419,https://api.github.com/repos/kubernetes/client-go/issues/419,Interesting Readme language,"Please read the first part of the README.md file carefully...

![capture](https://user-images.githubusercontent.com/222246/40504399-cc31ad82-5f56-11e8-8973-16e4b7c5bf9f.PNG)
",closed,False,2018-05-24 18:31:48,2018-05-25 12:35:34
client-go,mistyhacks,https://github.com/kubernetes/client-go/pull/420,https://api.github.com/repos/kubernetes/client-go/issues/420,Rewording for clarity,"Signed-off-by: Misty Stanley-Jones <mistyhacks@google.com>

Fixes #419 

Yes I read the notice below, but the `README.md` is not in `kubernetes/kubernetes` (or I certainly can't find it), so I think this is the only way to fix this.

```
Sorry, we do not accept changes directly against this repository. Please see 
CONTRIBUTING.md for information on where and how to contribute instead.
```
",closed,True,2018-05-24 20:17:52,2018-05-25 17:29:11
client-go,mistyhacks,https://github.com/kubernetes/client-go/pull/421,https://api.github.com/repos/kubernetes/client-go/issues/421,Document that changes to the README.md are done in this repo,"Signed-off-by: Misty Stanley-Jones <mistyhacks@google.com>

Documenting exceptions to the no-PR policy that were uncovered in #420.
",closed,True,2018-05-25 17:33:33,2018-05-29 07:13:42
client-go,SachinMaharana,https://github.com/kubernetes/client-go/issues/422,https://api.github.com/repos/kubernetes/client-go/issues/422,[Question] How to watch for deployments for new version?,"https://github.com/kubernetes/client-go/issues/132

I am following the above example and issue, but i am not getting to make it work. Did check the documentation that the api has changed.
https://kubernetes.io/blog/2018/01/introducing-client-go-version-6/

Can anybody point me out the changes i need to make in the example of the above issue?
Thanks.",closed,False,2018-05-27 17:31:03,2018-05-30 20:46:07
client-go,sttts,https://github.com/kubernetes/client-go/pull/423,https://api.github.com/repos/kubernetes/client-go/issues/423,Revert non-staging change to .github/PULL_REQUEST_TEMPLATE.md,"Stop the bot falling over, reverting part of https://github.com/kubernetes/client-go/pull/421.

Compare: the original file is at https://github.com/kubernetes/kubernetes/tree/master/staging/src/k8s.io/client-go/.github",closed,True,2018-05-29 07:11:55,2018-06-08 07:34:48
client-go,njyeti,https://github.com/kubernetes/client-go/issues/424,https://api.github.com/repos/kubernetes/client-go/issues/424,Client using Google Service account Config,"Greetings,
Using this client library for the first time and planning on using the Google Service account for instantiating the client for query our GKE cluster.  While using the below code, I'm running into 

`x509: certificate signed by unknown authority`

Upon debugging, it looks like it is not setting the Authorization header while sending the request to the cluster. WrapperTansport/Transport is grabbing the OAuth token, however, it's not set while sending the final request to the cluster. Can you please give me a pointer on how to fix this or not sure whether it is a bug therefore starting out with this ticket. I won't be surprise, if I'm not using the client correctly as I'm using this first time. Any pointer will be much appreciated

`func main() {

	ctx := context.Background()
	serviceaccount := `{
  		""type"": ""service_account"",
  		""project_id"": ""<project ID>"",
  		""private_key_id"": ""<private key ID>"",
  		""private_key"": ""<private key>"",
  		""client_email"": ""<email address>"",
  		""client_id"": ""<client ID>"",
  		""auth_uri"": ""https://accounts.google.com/o/oauth2/auth"",
  		""token_uri"": ""https://accounts.google.com/o/oauth2/token"",
  		""auth_provider_x509_cert_url"": ""https://www.googleapis.com/oauth2/v1/certs"",
  		""client_x509_cert_url"": ""x509 URL""
	}
	`

	cfg, err := google.JWTConfigFromJSON([]byte(serviceaccount), ""https://www.googleapis.com/auth/cloud-platform"", ""https://www.googleapis.com/auth/userinfo.email"")

  	if err != nil {
  		fmt.Println(err)
  		return
	}

	config := &rest.Config{
		Host: ""<Cluster IP>"",
		TLSClientConfig: rest.TLSClientConfig{
		       Insecure: false,
		       CAFile: ""<path to the ca file>"",
	         },
		WrapTransport: func(rt http.RoundTripper) http.RoundTripper {
			return &oauth2.Transport{
				Source: cfg.TokenSource(ctx),
			}
		},
	}

	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		fmt.Printf(""failed to get k8s client set from config: %s\n"", err)
		return
	}

	ns, err  := clientset.CoreV1().Namespaces().List(v1.ListOptions{})
	if err != nil {
		fmt.Printf(""failed to get the ns: %s\n"", err)
	}

	for _, item := range ns.Items {
		fmt.Println(item.Name)
	}
}`",closed,False,2018-05-29 17:54:40,2018-06-05 20:35:30
client-go,ambiknai,https://github.com/kubernetes/client-go/issues/425,https://api.github.com/repos/kubernetes/client-go/issues/425,no field or method AnnotatedEventf,"I am getting below error on line

https://github.com/kubernetes/kubernetes/blob/master/pkg/kubelet/container/helpers.go#L198

tests/e2e/vendor/k8s.io/kubernetes/pkg/kubelet/container/helpers.go:198:21: irecorder.recorder.AnnotatedEventf undefined (type record.EventRecorder has no field or method AnnotatedEventf)

I dont see this function defined either in the interface

https://github.com/kubernetes/client-go/blob/master/tools/record/event.go#L56",closed,False,2018-05-30 11:55:54,2018-06-06 14:33:56
client-go,SachinMaharana,https://github.com/kubernetes/client-go/issues/426,https://api.github.com/repos/kubernetes/client-go/issues/426,Conflict between /apps/v1 and apps/v1beta1,"When creating custom controller, i get the following error:

https://play.golang.org/p/qYc_VSGtfFl
612 reflector.go:205]........Failed to list *v1.Deployment: the server could not find the requested resource

But when i change line 78 from 
watch(clientSet.**AppsV1()**.RESTClient(), new(apps_v1.Deployment), ""deployments"")
to 
watch(clientSet.**AppsV1beta1()**.RESTClient(), new(apps_v1.Deployment), ""deployments"")
 it seems to work fine.

https://play.golang.org/p/0O3DN4Tyea7

Am i missing something, or maybe mismatch of clientset object?
",closed,False,2018-05-30 20:54:16,2018-05-30 21:39:03
client-go,SpComb,https://github.com/kubernetes/client-go/issues/427,https://api.github.com/repos/kubernetes/client-go/issues/427,util/retry RetryOnConflict swallows wait.ErrWaitTimeout returned by func if it times out before conflicting,"The `k8s.io/client-go/util/retry` `RetryOnConflict` assumes that the given func will fail at least once with a conflict error before the `wait.ExponentialBackoff` fails with `wait.ErrWaitTimeout`, returning the conflict error instead of the wait timeout: https://github.com/kubernetes/client-go/blob/9a5fde770f6e71fdfaead48ebfac7a4c81632c15/util/retry/util.go#L75-L77

However, if the given func itself fails with `wait.ErrWaitTimeout` before failing with a conflict error, then the `lastConflictErr` returned by `RetryOnConflict` will be `nil`, silently hiding the timeout error.

## Example
Useful example demonstrating this in conjunction with a `watch.Util` timeout within the retry block: https://gist.github.com/SpComb/44c7663bd78b3d3ba61622d3d0dd399a

```go
	var watcher = watch.NewFake()
	var timeout = 100 * time.Millisecond

	err := retry.RetryOnConflict(retry.DefaultBackoff, func() error {
		if ev, err := watch.Until(timeout, watcher, func(event watch.Event) (bool, error) { return false, nil }); err != nil {
			log.Printf(""watch.Util returned err=%#v"", err)
			return err
		} else {
			log.Printf(""watch.Until returned ev=%#v"", ev)
			return nil
		}
	})

	log.Printf(""RetryOnConflict returned err=%#v"", err)
```

```
$ go run main.go  
2018/05/31 13:37:05 watch.Util returned err=&errors.errorString{s:""timed out waiting for the condition""}
2018/05/31 13:37:05 RetryOnConflict returned err=<nil>
```",closed,False,2018-05-31 10:44:43,2018-10-28 12:44:12
client-go,shigy123456,https://github.com/kubernetes/client-go/issues/428,https://api.github.com/repos/kubernetes/client-go/issues/428,How to modify the post body size,"When I use client-go to create a new crd resource object, the object is larger, the creation fails, and when the object is smaller, I can create it. How should I modify the post size limit so that my object can be created successfully.
my code is:
               resp, err := c.client.Post().
		Namespace(""default"").
		Resource(""externalservices"").
		Body(externalservice).
		DoRaw()
the externalservice is my post object.",closed,False,2018-06-04 09:45:00,2018-06-29 12:54:54
client-go,nikhita,https://github.com/kubernetes/client-go/pull/429,https://api.github.com/repos/kubernetes/client-go/issues/429,Add client-go 8.0.0 changelog,"Ref: https://docs.google.com/spreadsheets/d/1jPexPgSohmD7zVmIeVvAFjjK_pqFu4MdjsmBXlINfvg/edit#gid=0

/assign sttts caesarxuchao 
",closed,True,2018-06-14 14:42:14,2018-06-29 09:30:23
client-go,shershen08,https://github.com/kubernetes/client-go/issues/430,https://api.github.com/repos/kubernetes/client-go/issues/430,create-update-delete-deployment error: the server could not find the requested resource,"I am trying to run `create-update-delete-deployment` [example](https://github.com/kubernetes/client-go/tree/master/examples/create-update-delete-deployment) on GKE
```
$: go build -o ./app
$:~/sample-client-go$ ./app -kubeconfig=$HOME/.kube/config
Creating deployment...
panic: the server could not find the requested resource
```
however the kubectlr version is 1.9+
```
$ kubectl version
Client Version: version.Info{Major:""1"", Minor:""9"", GitVersion:""v1.9.7"", ... GoVersion:""go1.9.3"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""8+"", GitVersion:""v1.8.10-gke.0"", ... GoVersion:""go1.8.3b4"", Compiler:""gc"", Platform:""linux/amd64""}
```
is the example outdated or some extra settings are not described?",closed,False,2018-06-23 03:19:27,2018-09-12 07:22:41
client-go,gregf1,https://github.com/kubernetes/client-go/issues/431,https://api.github.com/repos/kubernetes/client-go/issues/431,ExecConfig args duplicated when using BuildConfigFromFlags,"The out-of-cluster-client-configuration example uses `config, err := clientcmd.BuildConfigFromFlags("""", *kubeconfig)`

If I use this to load a kubeconfig file containing an exec provider
```
users:
  name: foo
  user:
    exec:
      command: foo-command
      args:
      - arg1
      - arg2
```
The args end up being duplicated.  The resulting command gets executed as
`foo-command arg1 arg2 arg1 arg2`

The problem appears to come from
https://github.com/kubernetes/client-go/blob/master/tools/clientcmd/loader.go#L227
where the config is merged.  For maps and structs this is fine, but for slices mergo is appending the values.

client-go is using a four year old version of mergo, but from mergo >= 0.3.5 the default append slice behavior is changed so if I upgrade mergo the problem goes away.

Here is a test case that demonstrates the problem
```
package main

import (
        ""io/ioutil""
        ""os""
        ""reflect""
        ""testing""

        ""k8s.io/client-go/tools/clientcmd""
)

func TestAuthConfig(t *testing.T) {
        content := `
apiVersion: v1
clusters:
- cluster:
    server: https://localhost:8080
  name: foo-cluster
contexts:
- context:
    cluster: foo-cluster
    user: foo-user
    namespace: bar
  name: foo-context
current-context: foo-context
kind: Config
users:
- name: foo-user
  user:
    exec:
      apiVersion: client.authentication.k8s.io/v1alpha1
      args:
      - arg-1
      - arg-2
      command: foo-command
`
        tmpfile, err := ioutil.TempFile("""", ""kubeconfig"")
        if err != nil {
                t.Fatal(err)
        }
        defer os.Remove(tmpfile.Name())
        if err := ioutil.WriteFile(tmpfile.Name(), []byte(content), 0666); err != nil {
                t.Fatal(err)
        }
        config, err := clientcmd.BuildConfigFromFlags("""", tmpfile.Name())
        if err != nil {
                t.Fatal(err)
        }
        if !reflect.DeepEqual(config.ExecProvider.Args, []string{""arg-1"", ""arg-2""}) {
                t.Fatalf(""Got args %v when they should be %v\n"", config.ExecProvider.Args, []string{""arg-1"", ""arg-2""})
        }

}
```
The test fails with the version of mergo specified by client-go and passes with mergo >= 0.3.5",closed,False,2018-06-25 14:36:15,2018-08-17 18:30:11
client-go,nikhita,https://github.com/kubernetes/client-go/issues/432,https://api.github.com/repos/kubernetes/client-go/issues/432,Release v8.0.0,"Simple tracking issue for the v8.0.0 release. Now that v1.11 has been released, we should release client-go v8.0.0 too.

TODO:

- [x] Smoke test with https://gist.github.com/sttts/d05106dae85a79f1ca513f1c71260d56
- [x] Create the tag/release. 
- [x] Update CHANGELOG and README: https://github.com/kubernetes/client-go/pull/429
- [x] Link the changelog on the releases page: https://github.com/kubernetes/client-go/releases/tag/v8.0.0.

/cc @sttts @caesarxuchao ",closed,False,2018-06-28 06:19:11,2018-06-29 13:49:54
client-go,Itfly,https://github.com/kubernetes/client-go/issues/433,https://api.github.com/repos/kubernetes/client-go/issues/433,Support labelSelector for list and watch filtering,"I want to list all the jobs created by my specific platform that all the jobs  are labeled by `""job-from"": ""aiflow""`. However the method `NewListWatchFromClient` in package cache only support `fieldSelector`, it can not to filter jobs by using labels directly. I can create the `optionsModifer` and call `NewFilteredListWatchFromClient` to list/watch with labelSelector:

```
optionsModifer := func(options *metav1.ListOptions) {
		options.LabelSelector = myLabelSelector
	}
watchList := cache.NewFilteredListWatchFromClient(restClient, ""jobs"", metav1.NamespaceAll, optionsModifer)

```

It's better to add a method to new ListWatch with labelSlector.",closed,False,2018-06-29 09:21:18,2018-07-02 03:16:30
client-go,dvasilen,https://github.com/kubernetes/client-go/issues/434,https://api.github.com/repos/kubernetes/client-go/issues/434,Unable to find semantic version for constraint k8s.io/client-go v8.0.0,"An attempt to run `glide up -v` on `glide.yaml` 

```
package: <my-package-name>
import:
- package: k8s.io/client-go
  version: v8.0.0
```

Results in 

```
Unable to find semantic version for constraint k8s.io/client-go v8.0.0
```

Has anyone been able to upgrade to v8.0.0 client? ",closed,False,2018-07-02 14:56:23,2018-07-03 14:21:57
client-go,robfig,https://github.com/kubernetes/client-go/issues/435,https://api.github.com/repos/kubernetes/client-go/issues/435,Proposal: Don't vendor glog,"The vendored glog dependency is causing me a huge headache trying to use the kubernetes client from a large glock-managed codebase due to the ""flag redefinition"" error.  Forking the repos and removing the vendor directories doesn't help me either because of all the cross imports. I'll look for a tool that can do the mass import renaming to use my fork, but wanted to raise an issue to see if it's an option to not vendor glog? glog never has backwards incompatible changes introduced, so regardless of your feelings on vendoring it seems inarguable that it introduces more hassle than it's worth in this particular case. Thanks!",closed,False,2018-07-02 21:30:22,2018-07-03 09:52:52
client-go,ashi009,https://github.com/kubernetes/client-go/issues/436,https://api.github.com/repos/kubernetes/client-go/issues/436,package doc for k8s.io/client-go/discovery is wrong,"https://godoc.org/k8s.io/client-go/discovery

```
Package transport provides a round tripper capable of caching HTTP responses.
```
",closed,False,2018-07-03 15:30:53,2018-07-05 15:51:13
client-go,grantr,https://github.com/kubernetes/client-go/issues/437,https://api.github.com/repos/kubernetes/client-go/issues/437,Fake client returns singular object when given an empty ObjectKey,"If the fake client is only tracking one object, when given an empty ObjectKey it will return that object.

```go
import (
	""context""
	""testing""

	corev1 ""k8s.io/api/core/v1""
	apierrors ""k8s.io/apimachinery/pkg/api/errors""
	metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
	""sigs.k8s.io/controller-runtime/pkg/client""
	""sigs.k8s.io/controller-runtime/pkg/client/fake""
)

func TestFakeClient(t *testing.T) {
	c := fake.NewFakeClient(&corev1.Pod{
		ObjectMeta: metav1.ObjectMeta{
			Name:      ""testpod"",
			Namespace: ""test"",
		},
	})

	p := &corev1.Pod{}

	err := c.Get(context.TODO(), client.ObjectKey{}, p)

	if !apierrors.IsNotFound(err) {
		t.Errorf(""Expected NotFound error, got %v"", err)
	}

	t.Logf(""pod: %s/%s"", p.Namespace, p.Name)
}

```

 I'd consider this a bug in this client-go ObjectTracker method, but I'm not sure what its intended behavior is.

https://github.com/kubernetes/client-go/blob/7ab20732fabbacddb8795c3b259fdf540d3de616/testing/fixture.go#L438 ",closed,False,2018-07-07 00:03:37,2018-12-04 02:03:28
client-go,charrywanganthony,https://github.com/kubernetes/client-go/pull/438,https://api.github.com/repos/kubernetes/client-go/issues/438,update INSTALL.md,"To prevent: `cannot find package ""k8s.io/api/xxx"" in any of: xxx(vendor tree)`",closed,True,2018-07-09 02:37:23,2018-07-24 09:23:36
client-go,copejon,https://github.com/kubernetes/client-go/issues/439,https://api.github.com/repos/kubernetes/client-go/issues/439,Fake Client should generate name for resources,"The Fake Clientset does not behave as expected when the GenerateName field is defined in a resource.   On creation, the resource does not get a Name with a unique suffix.  

When 2 or more resources are created by the Fake ClientSet in testing, an api error occurs because of a Name collision, e.g. ""Pod 'default/' already exists"" (where Name is an empty string).

This has become a problem for us in testing a custom controller that creates 2 pods sequentially with the GenerateName field defined.

cc @screeley44 @jeffvance ",closed,False,2018-07-10 15:32:46,2018-07-10 15:35:13
client-go,fanux,https://github.com/kubernetes/client-go/issues/440,https://api.github.com/repos/kubernetes/client-go/issues/440,Internal Privoxy Error,"Using `kubectl --kubeconfig get deploy -n pengqiao ` success,
But using client-go failed:
```
Get https://172.16.154.50:6443/apis/apps/v1/namespaces/pengqiao/deployments/acc: Internal Privoxy Error
```
This is my code:
```
package main

import (
	""fmt""

	meta_v1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
	""k8s.io/client-go/kubernetes""
	""k8s.io/client-go/tools/clientcmd""
)

func main() {
	cfg, err := clientcmd.BuildConfigFromFlags("""", ""./config"")
	if err != nil {
		fmt.Println(err)
	}

	clientSet, err := kubernetes.NewForConfig(cfg)
	if err != nil {
		fmt.Println(err)
	}

	option := meta_v1.GetOptions{}
	deploy, err := clientSet.AppsV1().Deployments(""pengqiao"").Get(""acc"", option)
	if err != nil {
		fmt.Println(err)
	}
	fmt.Println(deploy)
}
```",closed,False,2018-07-11 08:12:22,2018-07-26 01:09:36
client-go,pawelprazak,https://github.com/kubernetes/client-go/pull/441,https://api.github.com/repos/kubernetes/client-go/issues/441,Fixes #192 - adds ability to use kubeconfig context,"Sorry, we do not accept changes directly against this repository, unless the
change is to the `README.md` itself. Please see 
`CONTRIBUTING.md` for information on where and how to contribute instead.

^^^^^^^^^^^
How one does that? Instructions are not very clear.",closed,True,2018-07-17 09:22:27,2018-07-17 09:27:27
client-go,afritzler,https://github.com/kubernetes/client-go/issues/442,https://api.github.com/repos/kubernetes/client-go/issues/442,Full Send Queue in local TCP stack leads to connection timeouts against GCP Load Balancer ,"Hi,

we are experiencing here an extremely weird behaviour on the client side when talking to a Kube-apiserver sitting behind a GCP LoadBalancer. We are using client-go version 1.11.0.

The connection flow is the following:
```
controller(using client-go) -> GCP_LB_IP:443 -> K8s-service -> Kube-Apiserver Pod
``` 
The controller connects to the API server as soon as the LoadBalancer IP is created. However the client throws the following error (and keeps doing it since we retry this operation periodically in our control logic):
```
Get https://api.MY_CLUSTER_DOMAIN/version?timeout=32s: context deadline exceeded (Client.Timeout exceeded while awaiting headers)
```
From looking at the opened connections I realised, that the send-queue gets filled up right after the connection is established. (seems like no ACK packets are being received from the LB)
```
netstat -lanW
Active Internet connections (servers and established)
Proto Recv-Q Send-Q Local Address        Foreign Address     State
tcp        0   5511 10.241.130.171:44256 LB_IP_OF_API_SERVER_1:443  ESTABLISHED    
tcp        0   5946 10.241.130.171:52804  LB_IP_OF_API_SERVER_2:443  ESTABLISHED 
```
The controller then gets stuck in limbo mode for a couple of hours. At some point in time (1-4h) things are turning normal again.

With `ss` I am getting the following:
```
/ # ss -tie dst LOADBALANCER_IP
State      Recv-Q Send-Q                                             Local Address:Port                                                              Peer Address:Port
ESTAB      0      6555                                              LOCAL_IP:58804                                                           LOADBALANCER_IP:https                 timer:(on,1min42sec,14) ino:164320264 sk:1 <->
	 ts sack cubic wscale:9,7 rto:120000 backoff:14 rtt:14.475/0.602 ato:40 mss:1398 rcvmss:1348 advmss:1398 cwnd:1 ssthresh:14 bytes_acked:4352 bytes_received:35384 segs_out:83 segs_in:76 data_segs_out:51 data_segs_in:63 send 772.6Kbps lastsnd:17094 lastrcv:672721 lastack:672721 pacing_rate 7.7Mbps delivery_rate 7.9Mbps app_limited busy:732928ms unacked:5 retrans:1/15 lost:4 sacked:1 rcv_rtt:15.139 rcv_space:28200 notsent:1263 minrtt:13.602
```

`tcpdump` on both ends is showing, that on the client side we are seeing sporadic ACK packets coming back. 

We ran into this problem just this week (on Monday), not sure if GCP changed something on their LB side. For the last couple of weeks we didn't see any of that. And it also took quite some time to understand what is happening there.

This might be related to issue https://github.com/kubernetes/client-go/issues/374

Since we only see this happen on GCP (since this Monday), I am a bit puzzled on how exactly this could have happened.

Did anybody else ran into a similar situation?

Regards,
Andreas",closed,False,2018-07-25 13:40:41,2018-10-29 10:06:44
client-go,shilpakarthik,https://github.com/kubernetes/client-go/pull/443,https://api.github.com/repos/kubernetes/client-go/issues/443,Release 5.0,"Sorry, we do not accept changes directly against this repository, unless the
change is to the `README.md` itself. Please see 
`CONTRIBUTING.md` for information on where and how to contribute instead.
",closed,True,2018-08-01 03:35:37,2018-08-01 06:25:41
client-go,fabstao,https://github.com/kubernetes/client-go/issues/444,https://api.github.com/repos/kubernetes/client-go/issues/444,"Please add examples and/or docs on how to create PVS, ResourceList, Storage size, etc.","Hi!
Please add examples and/or docs on how to create PVS, ResourceList, Storage size, etc.

Is hard trying to guess a lot of things like this:

`Requests: apiv1.ResourceList{`
  `    Storage: resource.Quantity(20),`
`    },` 

Is wrong and can't guess how it should be done, nor where the docs are,

Thanks a lot!",closed,False,2018-08-01 04:49:06,2019-01-08 17:00:33
client-go,ahmetb,https://github.com/kubernetes/client-go/issues/445,https://api.github.com/repos/kubernetes/client-go/issues/445,leaderelection: LeaseDurationSeconds field not used,"Unless I'm mistaken, there's no good use of `LeaderElectionRecord.LeaseDurationSeconds` field.

https://github.com/kubernetes/client-go/blob/0b97d57a869d33ee2fe3cc567d0f8553c70357b0/tools/leaderelection/leaderelection.go#L243

There are no references to this field in the client-go.

It's very likely that the person who started the leader election has configured this through `LeaderElectionConfig` and they have a more accurate representation of this value (time.Duration) rather than int seconds.

Maybe I'm just having trouble understanding why this value is exposed in the record . It doesn't seem like anyone's using it.",closed,False,2018-08-01 20:37:44,2018-10-31 23:10:48
client-go,27149chen,https://github.com/kubernetes/client-go/issues/446,https://api.github.com/repos/kubernetes/client-go/issues/446,"Test panic when deleting a fake pv with error ""send on closed channel""","I want to delete a pv in one of my test cases in this way:
```
kubeClient := fakekubeclientset.NewSimpleClientset(pv)
kubeClient.CoreV1().PersistentVolumes().Delete(""pvName"", nil)
```

But got a panic (send on closed channel) with stack
```
/usr/local/go/src/runtime/panic.go:491 +0x283
    b/vendor/k8s.io/apimachinery/pkg/watch.(*FakeWatcher).Delete(...)
/Users/a/go/src/b/vendor/k8s.io/apimachinery/pkg/watch/watch.go:145
    ./vendor/k8s.io/client-go/testing.(*tracker).Delete(0xc4204e0730, 0x0, 0x0, 0x22b65b2, 0x2, 0x22c6a60, 0x11, 0x0, 0x0, 0x22b6acf, ...)
/Users/a/go/src/b/vendor/k8s.io/client-go/testing/fixture.go:398 +0x671
    b/vendor/k8s.io/client-go/testing.ObjectReaction.func1(0x2ca6940, 0xc4203288c0, 0x2, 0x10, 0xc4204e8c70, 0xc4204f4e20, 0xc4200b6a00)
/Users/a/go/src/b/vendor/k8s.io/client-go/testing/fixture.go:127 +0x687
    b/vendor/k8s.io/client-go/testing.(*SimpleReactor).React(0xc4204f8450, 0x2ca6940, 0xc4203288c0, 0x1, 0x2, 0xc4204f4e20, 0x1, 0x2)
/Users/a/go/src/b/vendor/k8s.io/client-go/testing/fixture.go:464 +0x3e
    b/vendor/k8s.io/client-go/testing.(*Fake).Invokes(0xc4200b6a00, 0x2ca6940, 0xc4203288c0, 0x2c919a0, 0xc4204e8ec8, 0x0, 0x0, 0x0, 0x0)
/Users/a/go/src/b/vendor/k8s.io/client-go/testing/fake.go:143 +0x198
    b/vendor/k8s.io/client-go/kubernetes/typed/core/v1/fake.(*FakePersistentVolumes).Delete(0xc420503318, 0x22b6acf, 0x3, 0x0, 0x0, 0x0)
/Users/a/go/src/b/vendor/k8s.io/client-go/kubernetes/typed/core/v1/fake/fake_persistentvolume.go:111 +0x1cc
```

Seems like a deletion event is sent to a closed watcher. Check my code, find that I do have a pvWatcher which is closed by ""pvWatcher.Stop()"" before the deletion. After I comment out the Stop() function, the case is passed. But it is not what I want, I don't want to watch the deletion at all.

I write a small test case to reproduce it:
```
kubeClient := fakekubeclientset.NewSimpleClientset(pv)
pvWatcher, _ := kubeClient.CoreV1().PersistentVolumes().Watch(metav1.ListOptions{})
pvWatcher.Stop()
kubeClient.CoreV1().PersistentVolumes().Delete(""pvName"", nil)
```
Client-go verison: 7.0",closed,False,2018-08-02 10:32:04,2019-01-11 12:05:21
client-go,ynqa,https://github.com/kubernetes/client-go/issues/447,https://api.github.com/repos/kubernetes/client-go/issues/447,NewNonInteractiveDeferredLoadingClientConfig doesn't override cluster context,"I'd like to get a GKE cluster config using `NewNonInteractiveDeferredLoadingClientConfig` like the following codes, but the config remains default values.  On the other hands, it's possible to get the config if you use `clientcmd.BuildConfigFromFlags("""", ""/path/to/.kube/config"")`.

```go
package main

import (
	""fmt""
	
	""k8s.io/client-go/tools/clientcmd""
)

func main() {
    loadingRules := clientcmd.NewDefaultClientConfigLoadingRules()
    loadingRules.DefaultClientConfig = &clientcmd.DefaultClientConfig
    loadingRules.ExplicitPath = ""/path/to/.kube/config""
    configOverrides := &clientcmd.ConfigOverrides{
        ClusterDefaults: clientcmd.ClusterDefaults,
        CurrentContext:  """",  // or ""current-context name""
    }

    config, _ := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(loadingRules, configOverrides).ClientConfig()
    fmt.Println(config)
}
```

result in below:
```
$ go run main.go
&{http://localhost:8080  {  <nil> <nil>}    { [] map[]} <nil> <nil> <nil> {false     [] [] []}  <nil> <nil> 0 0 <nil> 0s <nil>}
```

version in dep:
```
name = ""k8s.io/client-go""
version = ""kubernetes-1.11.0""
```",closed,False,2018-08-06 06:32:44,2018-08-07 19:04:22
client-go,kdomanski,https://github.com/kubernetes/client-go/issues/448,https://api.github.com/repos/kubernetes/client-go/issues/448,leader election: a records's observedTime is checked instead of an actual timestamp,"in https://github.com/kubernetes/client-go/blob/master/tools/leaderelection/leaderelection.go#L269 the client makes sure that at least `LeaseDuration` has expired since the election record is observed and the leader doesn't renew the lease in this time.

However this means that the client will always wait at least `LeaseDuration` on startup, since `observedTime` is only ever set to `time.Now()` and the actual age of the record is irrelevant.

The client should instead take the record's `AcquireTime` and `RenewTime` under consideration when waiting for hearbeat, and thus instantly acquire the lease if the last record is already expired.",closed,False,2018-08-08 13:21:39,2018-08-08 14:59:54
client-go,talhairfanbentley,https://github.com/kubernetes/client-go/issues/449,https://api.github.com/repos/kubernetes/client-go/issues/449,Build Failure,"I'm trying to build my code through docker build, and I've been doing it successfully, and today suddenly I get this error:
`/k8s.io/client-go/transport/round_trippers.go:437:9: undefined: strings.Builder`
What can be the issue.",closed,False,2018-08-10 09:37:08,2018-08-10 09:56:33
client-go,tedli,https://github.com/kubernetes/client-go/issues/450,https://api.github.com/repos/kubernetes/client-go/issues/450,Add hooks mechanism to affect structured input & output for client-go APIs,"The ones who use client-go, many of them want to process some other business logics that use client-go rather than making the client side calls the kubernetes native apis directly, so that they can make sure the extra logics being taken place at the right moment to meet their product needs.

Indeed, kubernetes provided Dynamic Admission Control, but I want features like the dynamic admission control at client-go level.

Meaning, something like, if I register a filter to 'deployment' - 'create', and what the filter dose, is that copy all labels of the deployment to the deployment.spec.template.metadata.label, then when I
```golang
client.AppsV1().Deployments(""ns1"").Create(someDeploy)
```
the filter invoked before calling the kubernetes native api and the pod template's label field contains all the deployment's labels.

In this way the business logics could be more plugable, then if I want to add more logic, I can just implement a filter and register to a resource with an action.",closed,False,2018-08-13 12:13:50,2019-01-10 14:44:52
client-go,ruoshan,https://github.com/kubernetes/client-go/issues/451,https://api.github.com/repos/kubernetes/client-go/issues/451,cache's threadSafeMap should remove the index key when value set is empty,"https://github.com/kubernetes/client-go/blob/master/tools/cache/thread_safe_store.go#L288

Should we add the following after delete value from set?
```
if set.Len() == 0 {
    delete(index, indexValue)
}
```",closed,False,2018-08-17 07:55:12,2018-08-31 03:00:13
client-go,szuecs,https://github.com/kubernetes/client-go/issues/452,https://api.github.com/repos/kubernetes/client-go/issues/452,allow custom transport with TLS certificate options,"I would like to setup a custom Transport with custom TLS certificate options.
This disallows it for whatever reason: https://github.com/kubernetes/client-go/blob/master/transport/transport.go#L31-L32

## Example

client config
```
        ...
	ctx, cancel := context.WithCancel(context.Background())
	kubeConfig, err := configureKubeConfig(config.APIServer, 5*time.Second, ctx.Done())
	if err != nil {
		log.Fatalf(""Failed to setup Kubernetes config: %v"", err)
	}
	client, err := kubernetes.NewForConfig(kubeConfig)
	if err != nil {
		log.Fatalf(""Failed to setup Kubernetes client: %v"", err)
	}
       ....

func configureKubeConfig(apiServerURL *url.URL, timeout time.Duration, stopCh <-chan struct{}) (*rest.Config, error) {
	tr := &http.Transport{
		DialContext: (&net.Dialer{
			Timeout:   timeout,
			KeepAlive: 30 * time.Second,
			DualStack: false, // K8s do not work well with IPv6
		}).DialContext,
		TLSHandshakeTimeout:   timeout,
		ResponseHeaderTimeout: 10 * time.Second,
		MaxIdleConns:          10,
		MaxIdleConnsPerHost:   2,
		IdleConnTimeout:       20 * time.Second,
	}

	// We need this to reliably fade on DNS change, which is right
	// now not fixed with IdleConnTimeout in the http.Transport.
	// https://github.com/golang/go/issues/23427
	go func(d time.Duration) {
		for {
			select {
			case <-time.After(d):
				tr.CloseIdleConnections()
			case <-stopCh:
				return
			}
		}
	}(20 * time.Second)

	if apiServerURL != nil {
		return &rest.Config{
			Host:      apiServerURL.String(),
			Timeout:   timeout,
			Transport: tr,
		}, nil
	}

	config, err := rest.InClusterConfig()
	if err != nil {
		return nil, err
	}

	config.Timeout = timeout
	config.Transport = tr
	return config, nil
}
```


Log output
```
time=""2018-08-17T13:59:30Z"" level=fatal msg=""Failed to setup Kubernetes client: using a custom transport with TLS certificate options or the insecure flag is not allowed""
```
",closed,False,2018-08-17 14:19:05,2018-11-15 15:58:38
client-go,maorfr,https://github.com/kubernetes/client-go/issues/453,https://api.github.com/repos/kubernetes/client-go/issues/453,Implementing file copy to and from a container,"Hello,

First of all, thank you all for the great work!

Maybe someone can help with a question -
We want to implement a mechanism to read/write files from/to a container. We would want the `read` to read a file and return []byte (or Buffer), and the write to get []byte and write them to a file.

We have managed to implement the `read` using `SubResource(""exec"")` with a `cat` command.
How would you recommend to implement the `write` function?

Thanks a lot!",closed,False,2018-08-23 06:27:28,2018-10-24 09:18:32
client-go,krasi-georgiev,https://github.com/kubernetes/client-go/issues/454,https://api.github.com/repos/kubernetes/client-go/issues/454,the k8s client keeps sending updates for /api/v1/namespaces/kube-system/endpoints/kube-controller-manager,"as part of troubleshooting https://github.com/prometheus/prometheus/issues/4518 I figured that the k8s client keeps sending updates for the `/api/v1/namespaces/kube-system/endpoints/kube-controller-manager` and the change is only  in the `ResourceVersion`

Is this to be expected and what would be a good way to ignore these updates?



```
&Endpoints{ObjectMeta:k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta{Name:kube-controller-manager,GenerateName:,Namespace:kube-system,SelfLink:/api/v1/namespaces/kube-system/endpoints/kube-controller-manager,UID:f76b6132-a268-11e8-b8b3-08002709c498,ResourceVersion:363220,Generation:0,CreationTimestamp:2018-08-18 01:00:34 +0300 EEST,DeletionTimestamp:<nil>,DeletionGracePeriodSeconds:nil,Labels:map[string]string{},Annotations:map[string]string{control-plane.alpha.kubernetes.io/leader: {""holderIdentity"":""minikube_cc9a294c-a268-11e8-9149-08002709c498"",""leaseDurationSeconds"":15,""acquireTime"":""2018-08-17T22:00:34Z"",""renewTime"":""2018-08-26T12:45:07Z"",""leaderTransitions"":0},},OwnerReferences:[],Finalizers:[],ClusterName:,Initializers:nil,},Subsets:[],}
```
```
&Endpoints{ObjectMeta:k8s_io_apimachinery_pkg_apis_meta_v1.ObjectMeta{Name:kube-controller-manager,GenerateName:,Namespace:kube-system,SelfLink:/api/v1/namespaces/kube-system/endpoints/kube-controller-manager,UID:f76b6132-a268-11e8-b8b3-08002709c498,ResourceVersion:363222,Generation:0,CreationTimestamp:2018-08-18 01:00:34 +0300 EEST,DeletionTimestamp:<nil>,DeletionGracePeriodSeconds:nil,Labels:map[string]string{},Annotations:map[string]string{control-plane.alpha.kubernetes.io/leader: {""holderIdentity"":""minikube_cc9a294c-a268-11e8-9149-08002709c498"",""leaseDurationSeconds"":15,""acquireTime"":""2018-08-17T22:00:34Z"",""renewTime"":""2018-08-26T12:45:09Z"",""leaderTransitions"":0},},OwnerReferences:[],Finalizers:[],ClusterName:,Initializers:nil,},Subsets:[],}
```",closed,False,2018-08-26 12:42:14,2018-08-26 23:17:01
client-go,marwan-at-work,https://github.com/kubernetes/client-go/issues/455,https://api.github.com/repos/kubernetes/client-go/issues/455,Introduce Go Modules,"With Go 1.11 released, it would be great to lock the dependencies of client-go users through a go.mod file. 

I'm not totally familiar with how kubernetes/kubernetes/staging and kubernetes/client-go get synchronized. So I didn't open a PR. 

However, I did write a [tool](https://github.com/marwan-at-work/mod) to help migrate >=2 repos to Semantic Import Versioning I applied those imports to the client-go repository directly: https://github.com/marwan-at-work/client-go/commit/47880e79b47d26f3f4f9b619946d9e7b84787982",closed,False,2018-08-26 21:31:16,2018-08-26 21:33:35
client-go,krasi-georgiev,https://github.com/kubernetes/client-go/issues/456,https://api.github.com/repos/kubernetes/client-go/issues/456,stream updates happen very slowly when the clients hit the MaxConcurrentStreams of the k8s API.,"https://github.com/golang/net/commit/1c05540f6879653db88113bc4a2b70aec4bd491f
after this commit when the client reaches the MaxConcurrentStreams any updates using the stream happen very slowly (1-2 per minute) so on systems with constant changes the client can never catch up.


> Currently if the http2.Transport hits SettingsMaxConcurrentStreams for a
> server, it just makes a new TCP connection and creates the stream on the
> new connection. This CL updates that behavior to instead block RoundTrip
> until a new stream is available.

as per the commit message the old behaviour was that the client creates a new connection and after https://github.com/golang/net/commit/1c05540f6879653db88113bc4a2b70aec4bd491f is just waits until there is  available streams.

Not sure if we can have some configurable settings in the k8s client or the http2 package needs to allows some tuning.

more details about the issue as part of troubleshooting https://github.com/prometheus/prometheus/issues/4528
",closed,False,2018-08-27 15:20:39,2018-11-25 16:49:37
client-go,scholar-ink,https://github.com/kubernetes/client-go/issues/457,https://api.github.com/repos/kubernetes/client-go/issues/457,Unable to watch configmap,"
```
podListWatcher := cache.NewListWatchFromClient(clientset.CoreV1().RESTClient(), ""ConfigMap"", v1.NamespaceDefault, fields.OneTermEqualSelector(""metadata.name"", ""micro""))
```

get this error

```
&{GET https://139.196.70.154:6443/api/v1/namespaces/default/configmap?fieldSelector=metadata.name%3Dmicro&limit=500&resourceVersion=0 HTTP/1.1 1 1 map[Accept:[application/json, */*]] <nil> <nil> 0 [] false 139.196.70.154:6443 map[] map[] <nil> map[]   <nil> <nil> <nil> <nil>}
E0828 10:31:51.514766    6121 reflector.go:134] github.com/kubernetes/client-go/examples/out-of-cluster-client-configuration/main.go:75: Failed to list *v1.ConfigMap: the server could not find the requested resource
```",closed,False,2018-08-28 03:03:30,2018-10-25 09:28:30
client-go,sstarcher,https://github.com/kubernetes/client-go/issues/458,https://api.github.com/repos/kubernetes/client-go/issues/458,Writing out a config object duplicates CA data and key data,"Using a small snippet like
```
	loader := clientcmd.NewDefaultClientConfigLoadingRules()

	client, err := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(loader, &clientcmd.ConfigOverrides{}).RawConfig()
	if e != nil {
		return e
	}

	err = clientcmd.WriteToFile(client, kubeConfigPath))
```

If the kubeconfig contains `certificate-authority-data` or `client-certificate-data` that data will be duplicated.

Example data
```
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: YWJjCg==
    server: https://api.test.com
  name: test.com
```

CA data is `abc` initially.  After one run you get 

```
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: YWJjCmFiYwo=
    server: https://api.test.com
  name: test.com
contexts: []
current-context: """"
kind: Config
preferences: {}
users: []
```

Which is 
```
abc
abc
```

This of course happens continuously every run.  The data is correctly loaded, but when serialised to a file it looks to be appending to the base64 encoded data.


",closed,False,2018-09-01 19:33:49,2018-09-02 14:38:24
client-go,youngperson,https://github.com/kubernetes/client-go/issues/459,https://api.github.com/repos/kubernetes/client-go/issues/459,vendor/k8s.io/apimachinery/pkg/runtime/serializer/json,"go version go1.10 darwin/amd64

govendor fetch  pkg  

go run main.go 

error log
vendor/k8s.io/apimachinery/pkg/runtime/serializer/json

vendor/k8s.io/apimachinery/pkg/runtime/serializer/json/json.go:115:16: unknown field 'CaseSensitive' in struct literal of type jsoniter.Config",closed,False,2018-09-03 07:32:14,2018-09-04 02:21:54
client-go,maorfr,https://github.com/kubernetes/client-go/issues/460,https://api.github.com/repos/kubernetes/client-go/issues/460,Copy of 16M+ file to container causes invalid data frame error,"Hello,

We have been trying to implement a copy mechanism in to a container.
We are using this code:

```
stdin := bytes.NewReader(byteArray)
req := clientset.Core().RESTClient().Post().
	Resource(""pods"").
	Name(""podName"").
	Namespace(""namespace"").
	SubResource(""exec"")
scheme := runtime.NewScheme()
check(err)

parameterCodec := runtime.NewParameterCodec(scheme)
req.VersionedParams(&core_v1.PodExecOptions{
	Command:   strings.Fields(""cp /dev/stdin /tmp/file""),
	Container: containerName,
	Stdin:     stdin != nil,
	Stdout:    true,
	Stderr:    true,
	TTY:       false,
}, parameterCodec)

exec, err := remotecommand.NewSPDYExecutor(config, ""POST"", req.URL())
check(err)

var stdout, stderr bytes.Buffer
err = exec.Stream(remotecommand.StreamOptions{
	Stdin:  stdin,
	Stdout: &stdout,
	Stderr: &stderr,
	Tty:    false,
})
check(err)
```

The complete code can be found [here](https://github.com/maorfr/skbn/blob/master/pkg/skbn/kube.go)

We noticed that when trying to copy a file which is 16M and up, the action is not successful and we get an output of `E0904 12:56:33.953212   15894 v2.go:105] invalid data frame`.

Any file that is under 16M (16777215 and less) is being copied without any error.

Can anyone help on this?

Thanks in advance!",closed,False,2018-09-04 11:56:56,2018-11-14 17:26:07
client-go,YannickLange,https://github.com/kubernetes/client-go/issues/461,https://api.github.com/repos/kubernetes/client-go/issues/461,Google container cluster as config,"I am trying to use the kubernetes go-client with cloud.google.com/go/container. I create the cluster using the google cloud go container package, then I want to deploy on that cluster using go-client. But since I just created this cluster I don’t have that config file. How can I setup a “k8s.io/client-go/rest” config with a ""google.golang.org/genproto/googleapis/container/v1"" Cluster? I was wondering if anyone has tried this before. If it is even possible. Any other approach is more than welcome! Thanks in advance",closed,False,2018-09-06 15:00:12,2018-09-18 21:18:53
client-go,cmoulliard,https://github.com/kubernetes/client-go/issues/462,https://api.github.com/repos/kubernetes/client-go/issues/462,[v2.go:105] write tcp 192.168.65.1:57934->192.168.65.4:8443: write: protocol wrong type for socket,"## Versions

- client-go : kubernetes-1.9.1

## Problem

We can copy a file to a pod using a command issued from a terminal

```
kubectl | oc cp ./target/ocp-fmp-build-install-1.0-exec.jar sb1-app-1-rxpc9:/deployments
```

that works fine but when we try to achieve the same thing using  the `client-go` and remotecommand `v2.go`, then that fails with this error

```
E0907 06:53:18.293590   34159 v2.go:105] write tcp 192.168.65.1:57934->192.168.65.4:8443: write: protocol wrong type for socket
I0907 06:53:18.293718   34159 root.go:157] Error:
unable push files to pod: error while streaming command: Internal error occurred: error executing command in container: read unix @->/var/run/docker.sock: read: connection reset by peer
```

Why do we get `protocol wrong type for socket` ? Is there a workaround ?",closed,False,2018-09-07 05:11:33,2018-09-07 13:21:20
client-go,bboreham,https://github.com/kubernetes/client-go/issues/463,https://api.github.com/repos/kubernetes/client-go/issues/463,testing ObjectTracker should implement ResourceVersion and optimistic locking ,"In other words `client-go/testing/fixture.go` should modify `ResourceVersion` on each `Update()` and error if the supplied version does not match the previous.

I have done a simple implementation of this for my own testing.
",closed,False,2018-09-08 12:53:32,2018-09-12 15:59:18
client-go,youngperson,https://github.com/kubernetes/client-go/issues/464,https://api.github.com/repos/kubernetes/client-go/issues/464,How to make a web terminal,"websocket + exec pod?  
How to write input and output to the websocket stream？

exec pod code:

> 

        req := p.Client.CoreV1().RESTClient().Post().
		Resource(""pods"").
		Name(pod.Name).
		Namespace(pod.Namespace).
		SubResource(""exec"").
		VersionedParams(
			&v1.PodExecOptions{
				Container: containerName,
				Command:   []string{""/bin/sh""},
				Stdin:     true,
				Stdout:    true,
				Stderr:    true,
				TTY:       true,
			}, scheme.ParameterCodec)

	exec, err := remotecommand.NewSPDYExecutor(p.Config, ""POST"", req.URL())

	err = exec.Stream(remotecommand.StreamOptions{
		Stdin:  os.Stdin,
		Stdout: os.Stdout,
		Stderr: os.Stderr,
		Tty:    true,
	})

",closed,False,2018-09-10 12:15:22,2019-03-16 18:46:03
client-go,the-redback,https://github.com/kubernetes/client-go/issues/465,https://api.github.com/repos/kubernetes/client-go/issues/465,Listing bug in dynamic 'fake' client in 'kubernetes-1.11.3',"`List`ing Bug in dynamic `fake` client in `kubernetes-1.11.3` tag. https://github.com/kubernetes/client-go/blob/kubernetes-1.11.3/dynamic/fake/simple.go#L275
```
no kind ""ListList"" is registered for version ""v1""
```

Though the problem is fixed months ago on master - [commit link](https://github.com/kubernetes/client-go/commit/4b43750b963d2b6e0f7527fe558e71c47bfc5045).

The fix should be picked to kubernetes-1.11 branch (if there is any) as well.",closed,False,2018-09-11 09:20:43,2018-10-05 10:42:12
client-go,nikhita,https://github.com/kubernetes/client-go/pull/466,https://api.github.com/repos/kubernetes/client-go/issues/466,Add client-go 9.0.0 changelog,"Ref: https://docs.google.com/spreadsheets/d/1VwVbMA1JBPo30QhX92Z5wuyp5MLUNkW9JGs7s59GZyU/edit#gid=0

/assign @sttts @caesarxuchao ",closed,True,2018-09-19 10:04:38,2018-11-28 06:12:39
client-go,nikhita,https://github.com/kubernetes/client-go/pull/467,https://api.github.com/repos/kubernetes/client-go/issues/467,Bump go version to 1.10.2 for travis,"The travis build fails with `undefined: strings.Builder`. This is due to an old go version (1.8.1 :scream: )

Also, see a similar fix for publishing bot for more details: https://github.com/kubernetes/publishing-bot/pull/74.

This blocks merging any PRs sent directly to this repo: https://github.com/kubernetes/client-go/pull/466.

/assign @sttts ",closed,True,2018-09-19 10:15:36,2018-09-19 11:34:30
client-go,nikhita,https://github.com/kubernetes/client-go/pull/468,https://api.github.com/repos/kubernetes/client-go/issues/468,Remove INSTALL.md,"This is going to move to staging: https://github.com/kubernetes/kubernetes/pull/68790

/assign @sttts ",closed,True,2018-09-19 10:29:54,2018-09-19 12:05:00
client-go,nikhita,https://github.com/kubernetes/client-go/pull/469,https://api.github.com/repos/kubernetes/client-go/issues/469,Remove INSTALL.md from release-9.0,"https://github.com/kubernetes/client-go/pull/468 removed INSTALL.md from master and https://github.com/kubernetes/kubernetes/pull/68790 added it to staging.

Because https://github.com/kubernetes/kubernetes/pull/68790 added it to staging, the publishing bot first ""publishes"" it to master and then tries to cherry-pick it to release-9 but fails because of conflicts -- since an INSTALL.md file exists there already: https://github.com/kubernetes/kubernetes/issues/56876#issuecomment-423013411.

/cc @dims 
/assign @sttts ",closed,True,2018-09-20 05:07:49,2018-09-20 12:01:00
client-go,nikhita,https://github.com/kubernetes/client-go/pull/470,https://api.github.com/repos/kubernetes/client-go/issues/470,Bump go version to 1.10.2 for travis for release-9.0,"Travis is broken on release-9.0. This PR fixes it and unblocks other direct PRs to this repo on release-9.0.

See https://github.com/kubernetes/client-go/pull/467 - similar PR for master for more details.",closed,True,2018-09-20 05:14:18,2018-09-20 11:46:05
client-go,lucastheisen,https://github.com/kubernetes/client-go/issues/471,https://api.github.com/repos/kubernetes/client-go/issues/471,INSTALL.md referenced in README.md is missing,"The [README.md](https://github.com/kubernetes/client-go/blob/master/README.md) states:

>See [INSTALL.md](https://github.com/kubernetes/client-go/blob/master/INSTALL.md) for detailed installation instructions.

But there is no INSTALL.md.",closed,False,2018-09-21 14:59:31,2018-09-28 08:41:56
client-go,mtaylor91,https://github.com/kubernetes/client-go/issues/472,https://api.github.com/repos/kubernetes/client-go/issues/472,PortForwarder.GetPorts does not return correct port number when local port omitted or set to zero.,"Hey guys,

I came across the new code on master to return the list of forwarded ports (see here: https://github.com/kubernetes/client-go/blob/master/tools/portforward/portforward.go#L349).

After doing some testing, I discovered that this function does not return the correct port if the local port is specified as '0' or left unspecified.

This seems to be because the port reference passed in to `portforwarder.listenOnPort` is a copy of the ForwardedPort struct, and not the actual ForwardedPort owned by the PortForwarder (see here: https://github.com/kubernetes/client-go/blob/master/tools/portforward/portforward.go#L155).",closed,False,2018-09-25 20:39:07,2018-12-25 10:32:33
client-go,nitishm,https://github.com/kubernetes/client-go/issues/473,https://api.github.com/repos/kubernetes/client-go/issues/473,Incorrect error reporting if clusterrole.rules resources not pluralised (configmap instead of configmaps),"
With RBAC enabled, setting the ClusterRole to - 

```
...
- apiGroups: [""""]
  resources: [""configmap""] // Instead of configmaps
  verbs: [""get"", ""watch"", ""list""]
...
```

 causes the go-client client.CoreV1().ConfigMaps("""").{...} method(s) to return ERROR 
`""unknown (get configmaps)""` instead of warning the user about an RBAC Permission denied issue, which is otherwise reported if the resource is no specified in the ClusterRole definition.",closed,False,2018-09-26 16:05:23,2018-09-26 17:32:08
client-go,jharshman,https://github.com/kubernetes/client-go/issues/474,https://api.github.com/repos/kubernetes/client-go/issues/474,Dependency resolution issues with Go Modules.,"Running into some dependency resolution issues using go 1.11 and go modules

I'm experiencing what I think is version incompatibilities in my package dependencies.

Here is the error I am receiving when running `go build ./...`
``` 
# k8s.io/client-go/pkg/apis/clientauthentication/v1alpha1
/go/pkg/mod/k8s.io/client-go@v8.0.0+incompatible/pkg/apis/clientauthentication/v1alpha1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/client-go/pkg/apis/clientauthentication/v1beta1
/go/pkg/mod/k8s.io/client-go@v8.0.0+incompatible/pkg/apis/clientauthentication/v1beta1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/util/parsers
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/util/parsers/parsers.go:36:16: undefined: reference.ParseNormalizedNamed
# k8s.io/kubernetes/pkg/apis/admissionregistration/v1alpha1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/admissionregistration/v1alpha1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/admissionregistration/v1beta1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/admissionregistration/v1beta1/zz_generated.conversion.go:40:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/authentication/v1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/authentication/v1/zz_generated.conversion.go:41:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/authentication/v1beta1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/authentication/v1beta1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/authorization/v1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/authorization/v1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/authorization/v1beta1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/authorization/v1beta1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/autoscaling/v1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/autoscaling/v1/zz_generated.conversion.go:43:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/autoscaling/v2beta1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/autoscaling/v2beta1/zz_generated.conversion.go:43:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/certificates/v1beta1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/certificates/v1beta1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/componentconfig/v1alpha1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/componentconfig/v1alpha1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/policy/v1beta1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/policy/v1beta1/zz_generated.conversion.go:43:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/networking/v1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/networking/v1/zz_generated.conversion.go:43:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/rbac/v1beta1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/rbac/v1beta1/zz_generated.conversion.go:40:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/rbac/v1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/rbac/v1/zz_generated.conversion.go:40:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/rbac/v1alpha1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/rbac/v1alpha1/zz_generated.conversion.go:40:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/scheduling/v1alpha1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/scheduling/v1alpha1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/scheduling/v1beta1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/scheduling/v1beta1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/storage/v1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/storage/v1/zz_generated.conversion.go:41:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/storage/v1alpha1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/storage/v1alpha1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
# k8s.io/kubernetes/pkg/apis/storage/v1beta1
/go/pkg/mod/k8s.io/kubernetes@v1.11.3/pkg/apis/storage/v1beta1/zz_generated.conversion.go:41:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
```

And here is my go.mod
```
module github.ancestry.com/Ancestry/platform-haas

require (
        github.com/BurntSushi/toml v0.3.1 // indirect
        github.com/Masterminds/semver v1.4.2 // indirect
        github.com/Masterminds/sprig v2.16.0+incompatible // indirect
        github.com/aokoli/goutils v1.0.1 // indirect
        github.com/docker/distribution v2.6.2+incompatible // indirect
        github.com/ghodss/yaml v1.0.0 // indirect
        github.com/gobwas/glob v0.2.3 // indirect
        github.com/gogo/protobuf v1.1.1 // indirect
        github.com/golang/mock v1.1.1
        github.com/golang/snappy v0.0.0-20180518054509-2e65f85255db // indirect
        github.com/google/gofuzz v0.0.0-20170612174753-24818f796faf // indirect
        github.com/google/uuid v1.0.0 // indirect
        github.com/gorilla/mux v1.6.2
        github.com/hashicorp/errwrap v1.0.0 // indirect
        github.com/hashicorp/go-cleanhttp v0.5.0
        github.com/hashicorp/go-rootcerts v0.0.0-20160503143440-6bb64b370b90
        github.com/hashicorp/go-sockaddr v0.0.0-20180320115054-6d291a969b86 // indirect
        github.com/hashicorp/vault v0.11.1
        github.com/huandu/xstrings v1.2.0 // indirect
        github.com/imdario/mergo v0.3.6 // indirect
        github.com/json-iterator/go v1.1.5 // indirect
        github.com/mitchellh/go-homedir v1.0.0
        github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
        github.com/modern-go/reflect2 v1.0.1 // indirect
        github.com/ryanuber/go-glob v0.0.0-20170128012129-256dc444b735 // indirect
        github.com/sethgrid/pester v0.0.0-20180430140037-03e26c9abbbf
        github.com/sirupsen/logrus v1.1.0
        github.com/spf13/cobra v0.0.3
        github.com/spf13/viper v1.2.0
        golang.org/x/net v0.0.0-20180926154720-4dfa2610cdf3
        golang.org/x/time v0.0.0-20180412165947-fbb02b2291d2 // indirect
        google.golang.org/grpc v1.15.0 // indirect
        gopkg.in/inf.v0 v0.9.1 // indirect
        gopkg.in/yaml.v2 v2.2.1
        k8s.io/api v0.0.0-20180925152912-a191abe0b71e // indirect
        k8s.io/apiextensions-apiserver v0.0.0-20180925155151-c0b566b8903b // indirect
        k8s.io/apimachinery v0.0.0-20180925152725-5ae511e0ed34 // indirect
        k8s.io/apiserver v0.0.0-20180925200106-4eecb3917976 // indirect
        k8s.io/client-go v8.0.0+incompatible // indirect
        k8s.io/helm v2.11.0+incompatible
        k8s.io/kubernetes v1.11.3 // indirect
)
```

Any help would be greatly appreciated :) 

Thanks!",closed,False,2018-09-26 23:36:46,2019-01-29 15:20:21
client-go,zpatrick,https://github.com/kubernetes/client-go/issues/475,https://api.github.com/repos/kubernetes/client-go/issues/475,How to implement a (pseudo) reverse proxy?,"I'm having trouble tying some pieces together, was hoping to get some insight here. 

On a high level, what I'm trying to build is a reverse proxy service that sits in front of the K8s api. 
The service will require that incoming requests contain an authentication token header. 
That token will be validated and then converted to a username to impersonate during the proxied request. 
The service will be running inside of the K8s cluster, so it's expected that the service account will have permissions to impersonate users (in addition to any other required permissions). 

Here is my plan-of-attack so far (I feel like there may be an easier way to do this; please let me know if that's the case):

* Get a `*rest.Config`
  * If developing locally, use `clientcmd.BuildConfigFromFlags`
  * If running in the cluster, use `rest.InClusterConfig`
* During each request
  * Validate and get a username from an auth header 
  * Update `config.Impersonate` with the appropriate username
  * Create/Update a `http.ReverseProxy` with settings from `config`
  * Serve the request using the proxy

```go
func main() {
    config, err := rest.InClusterConfig()
    ...

    http.HandleFunc(""/"", func(w ResponseWriter, r *Request){
        username, err := someFunction(r)
        ...

        config.Impersonate = rest.ImpersonationConfig{UserName:username}

        // how should I create/update this proxy using config? 
        proxy := httputil.ReverseProxy{...}
        proxy.ServeHTTP(w, r)
    })
    ...
}
```

I've noticed some promising-looking things in the `transport` package, but I'm not sure how to put these pieces together to create the `httputil.ReverseProxy`. Any help would be appreciated!",closed,False,2018-09-27 21:33:19,2018-10-01 22:27:20
client-go,nikhita,https://github.com/kubernetes/client-go/issues/476,https://api.github.com/repos/kubernetes/client-go/issues/476,Release v9.0.0,"Tracking issue for the v9.0.0 release. Now that v1.12 has been released, we should release client-go v9.0.0 too.

TODO:

- [x] Update CHANGELOG and README: https://github.com/kubernetes/client-go/pull/466
- [x] Smoke test with https://gist.github.com/nikhita/183c20c8dd1a34b4ba04ef38b244d67b
- [x] Create the tag/release. 
- [x] Link the changelog on the releases page: https://github.com/kubernetes/client-go/releases/tag/v9.0.0.
- [x]  Fix the tag title using GitHub UI

Retagging:

- [x] Smoke test with https://gist.github.com/nikhita/183c20c8dd1a34b4ba04ef38b244d67b
- [x] Create the tag/release. 
- [x]  Fix the tag title using GitHub UI

/cc @sttts @caesarxuchao ",closed,False,2018-09-28 07:23:31,2018-10-05 10:08:15
client-go,xieydd,https://github.com/kubernetes/client-go/issues/477,https://api.github.com/repos/kubernetes/client-go/issues/477,How to get nodes with client-go in a container?,"when i use this in a container created by kubernetes ,i get nothing. why?
Can you help me?
@tamalsaha @liggitt @ericchiang 
```
nodes, err := clientset.CoreV1().Nodes().List(metav1.ListOptions{})
```",closed,False,2018-09-29 08:53:43,2018-09-30 01:28:13
client-go,vaikas-google,https://github.com/kubernetes/client-go/issues/478,https://api.github.com/repos/kubernetes/client-go/issues/478,dynamic/fake not honoring the patch type -> json doc error,"Having a hard time unit testing a Patch operation using a dynamic fake. If I run the code against a real cluster (using the dynamic client, not fake), things work aok, but in unit tests when trying to create a JSONPatch operation it fails always with ""invalid JSON document"".

It seems to be coming from pkg/util/strategicpatch/patch.go

Looks to me like our use of JSON Patch is not being honored since the patch type is not being used anywhere, and seems like instead it's trying to unserialized into a map[string]interface{} and it fails since JSON patch is an array of patch operations.
https://github.com/kubernetes/client-go/blob/master/dynamic/fake/simple.go#L334

Or, am I holding it somehow wrong and this is supposed to work?
Thanks in advance!
",closed,False,2018-10-01 13:01:16,2018-10-15 22:04:33
client-go,stevvooe,https://github.com/kubernetes/client-go/issues/479,https://api.github.com/repos/kubernetes/client-go/issues/479,"""fake"" clientset doesn't match kubernetes API behavior","I've been trying to make a very simple controller test that creates objects with the API then sees if the objects are there. I have tested this with the kube API and its clear that Update will create an object if it does not exist. However, if you do the same with a fake.NewSimpleClientset, it returns a not found error.

We can see the issue at https://github.com/kubernetes/client-go/blob/master/testing/fixture.go#L375. If the object does not exist, it should be added to the tracker.

I understand that I could be using this incorrectly. If you have a more sane way to mock out the client api, please point me in the right direction.",closed,False,2018-10-03 00:07:19,2019-03-15 19:22:55
client-go,nikhita,https://github.com/kubernetes/client-go/pull/480,https://api.github.com/repos/kubernetes/client-go/issues/480,travis: run godep restore for non-master branches,"Currently, we just run `go build ./...` in travis. This means that go build ends up using master branches of client-go's dependencies (apimachinery, api) for building the non-master branches. This will fail almost all the time for non-master branches.

So, for non-master branches we should run `godep restore && go build ./...`.",closed,True,2018-10-05 11:06:29,2018-10-05 15:13:00
client-go,nikhita,https://github.com/kubernetes/client-go/pull/481,https://api.github.com/repos/kubernetes/client-go/issues/481,travis: bump go version to 1.11.1,Ref: https://github.com/kubernetes/kubernetes/pull/69386,closed,True,2018-10-06 07:39:33,2018-10-09 08:07:31
client-go,fedebongio,https://github.com/kubernetes/client-go/issues/482,https://api.github.com/repos/kubernetes/client-go/issues/482,Create a better introductory documentation to CRUD with client-go,"Hi!

After chatting with @misterikkit about his struggles figuring out alone how to use some functionalities, decided to create this issue. 

The [client-go example](https://github.com/kubernetes/client-go/tree/master/examples) maybe cover the basic setup and one single case of CRUD (list) but the rest is basically to be deducted or trialed. Seems that a ""CRUD for Dummies"" is needed.

Even when using an autocomplete tool the hierarchy of extensible objects can be scary. For example, is _clientset.CoreV1()_ the right one to use? how do I know? Which packages can I safely ignore?

A couple of additional improvements suggested:
- in go-doc link to github examples for constructing client
- Optionally add example tests to constructing client

As a comparison guideline, [Python client](https://github.com/kubernetes-client/python/tree/master/examples) has many more examples, [Java client](https://github.com/kubernetes-client/java/blob/master/kubernetes/README.md) has a complete documentation on the rest API. Either way, both seem to be more complete than client-Go). ",open,False,2018-10-09 00:40:19,2019-03-18 18:53:00
client-go,fedebongio,https://github.com/kubernetes/client-go/issues/483,https://api.github.com/repos/kubernetes/client-go/issues/483,No documentation for Watch API & Informer API,"After chatting with @misterikkit about his struggles figuring out alone how to use some functionalities, decided to create this issue.

There is no clear guidelines about using informers vs watch api in general. A new comer doesn't know what to do, since there is basically no mention. Informers seem to be easier and nicer. 

Maybe informers can have it's own dedicated section, because there isn't much (almost nothing).
It doesn't have to be very fancy: 
- Here is what an Informer is
- and this is how to use it: Start by sharedInformerFactory, etc..

For Watch could be sufficient to link to the concept docs.",open,False,2018-10-09 00:41:58,2019-03-18 20:22:31
client-go,zakiournani,https://github.com/kubernetes/client-go/issues/484,https://api.github.com/repos/kubernetes/client-go/issues/484,Kubectl exec command issue,"Hi,
I am trying to execute command using the go client on pods running int a distant kubernetes server.
my issue is about the command construction, for example when i run with {cmd:= ""touch test""} it works, but when i use {cmd:=touch test && echo hello > test} it doesnt.
This this just an example, what i really need to run is a command like rados that takes at least 5 parameters.
Any hint, thanks in advance?

	kubeconfig := filepath.Join(os.Getenv(""HOME""), "".kube"", ""config"")
	config, err := clientcmd.BuildConfigFromFlags("""", kubeconfig)
	if err != nil {
		panic(err)
	}

	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		panic(err)
	}
	command := ""touch test && echo cool > test""
	req := clientset.Core().RESTClient().Post().
		Resource(""pods"").
		Name(jobName).
		Namespace(""default"").
		SubResource(""exec"")
	scheme := runtime.NewScheme()
	if err := core_v1.AddToScheme(scheme); err != nil {
		panic(err)
	}

	parameterCodec := runtime.NewParameterCodec(scheme)
	req.VersionedParams(&core_v1.PodExecOptions{
		Command:   strings.Fields(command),
		Container: """",
		Stdin:     false,
		Stdout:    true,
		Stderr:    true,
		TTY:       false,
	}, parameterCodec)

	fmt.Println(""Request URL:"", req.URL().String())

	exec, err := remotecommand.NewSPDYExecutor(config, ""POST"", req.URL())
	if err != nil {
		panic(err)
	}

	var stdout, stderr bytes.Buffer
	err = exec.Stream(remotecommand.StreamOptions{
		Stdin:  nil,
		Stdout: &stdout,
		Stderr: &stderr,
		Tty:    false,
	})
	if err != nil {
		panic(err)
	}",closed,False,2018-10-09 14:46:52,2019-03-24 00:35:24
client-go,avnish30jn,https://github.com/kubernetes/client-go/issues/485,https://api.github.com/repos/kubernetes/client-go/issues/485,Unable to get the ServerVersion for GKE cluster if gcloud config directory is changed,"**Issue**

the default gcloud config location is ~/.gcloud/config. Using CLOUDSDK_CONFIG environment variable the config location can be changed. The kubeconfig file when used with client-go and kubectl gives the below error as there is no active session in default config directory.

```
[root@localhost gke]# CLOUDSDK_CONFIG=/tmp/tmpconfig1 gcloud auth activate-service-account --key-file  sa.json
Activated service account credentials for: [user1@project.iam.gserviceaccount.com]
[root@localhost gke]# CLOUDSDK_CONFIG=/tmp/tmpconfig1 gcloud container clusters get-credentials cluster-1 --zone=us-central1-a

[root@localhost gke]# kubectl version
Client Version: version.Info{Major:""1"", Minor:""9"", GitVersion:""v1.9.0"", GitCommit:""925c127ec6b946659ad0fd596fa959be43f0cc05"", GitTreeState:""clean"", BuildDate:""2017-12-15T21:07:38Z"", GoVersion:""go1.9.2"", Compiler:""gc"", Platform:""linux/amd64""}
Unable to connect to the server: error executing access token command ""/home/apporbit/google-cloud-sdk/bin/gcloud config config-helper --format=json"": err=exit status 1 output= stderr=ERROR: (gcloud.config.config-helper) You do not currently have an active account selected.
Please run:

  $ gcloud auth login

to obtain new credentials, or if you have already logged in with a
different account:

  $ gcloud config set account ACCOUNT

to select an already authenticated account to use.
[root@localhost gke]#
```

**Expected behaviour**

ServerVersion is returned.

There is provision in kubectl to pass the environment. Something similar is needed in client-go
```
[root@localhost gke]# CLOUDSDK_CONFIG=/tmp/tmpconfig1 kubectl version
Client Version: version.Info{Major:""1"", Minor:""9"", GitVersion:""v1.9.0"", GitCommit:""925c127ec6b946659ad0fd596fa959be43f0cc05"", GitTreeState:""clean"", BuildDate:""2017-12-15T21:07:38Z"", GoVersion:""go1.9.2"", Compiler:""gc"", Platform:""linux/amd64""}
Server Version: version.Info{Major:""1"", Minor:""9+"", GitVersion:""v1.9.7-gke.6"", GitCommit:""9b635efce81582e1da13b35a7aa539c0ccb32987"", GitTreeState:""clean"", BuildDate:""2018-08-16T21:33:47Z"", GoVersion:""go1.9.3b4"", Compiler:""gc"", Platform:""linux/amd64""}
```",closed,False,2018-10-09 17:10:29,2019-03-08 19:40:33
client-go,youngperson,https://github.com/kubernetes/client-go/issues/486,https://api.github.com/repos/kubernetes/client-go/issues/486,How to get all the events below a deployment,"command
~ kubectl -n test  get event | grep   beego
1m          3h           671       beego-67b98c5cc4-6b4v7.155c23f1200bb6e3               Pod                                 Warning   FailedScheduling        default-scheduler


client
fieldSelector := ""involvedObject.name=beego""
clientset.CoreV1().Events(namespace).List(metav1.ListOptions{FieldSelector: fieldSelector})
{
    ""code"": 0,
    ""data"": {
        ""metadata"": {
            ""selfLink"": ""/api/v1/namespaces/test/events"",
            ""resourceVersion"": ""39397040""
        },
        ""items"": []
    }
}

ps：use client,How to get all the events below a deployment",closed,False,2018-10-10 07:32:41,2019-03-19 18:29:53
client-go,cosmonawt,https://github.com/kubernetes/client-go/issues/487,https://api.github.com/repos/kubernetes/client-go/issues/487,Is there a way to pause the rollout of a deployment?,"Hello,

I want to pause the rollout of deployments automatically after a certain number of replicas are updated to make staged rollouts easier.
What I tried is to set `deployment.Spec.Paused = true` and using `AppsV1beta2().Deployments().UpdateStatus(deployment)` to apply this change, but its not having any effect. What is the correct way to pause a rollout?

Thank you",closed,False,2018-10-10 16:16:47,2018-10-16 16:24:28
client-go,vaikas-google,https://github.com/kubernetes/client-go/issues/488,https://api.github.com/repos/kubernetes/client-go/issues/488,Add tests for strategic merge patch for the fake dynamic client,There are no tests for Strategic Merge Patch. We should add some.,open,False,2018-10-10 17:42:55,2019-03-17 17:07:52
client-go,nfisher,https://github.com/kubernetes/client-go/issues/489,https://api.github.com/repos/kubernetes/client-go/issues/489,Proposal: Move k8s.io/apimachinery/pkg/apis/meta/v1 to k8s.io/api/meta,"I was looking through the the [deployment example](https://github.com/kubernetes/client-go/blob/master/examples/create-update-delete-deployment/main.go#L29) as I'd like to generate JSON templates that I can pipe into `kubectl apply`. Might look at building additional functionality in the future but for now it's as far as I want to go for an MVP.

There's a few issues I've encountered;

1. meta is imported from another repo which feels weird.
2. the dep on apimachinery transitively imports glog. 👎
3. I'm not sure where I'd start with a PR if people agree with the change.

The intended PR would be moving the meta struct from apimachinery to `api/meta` or similar. So instead of this import list;
```
	appsv1 ""k8s.io/api/apps/v1""
	apiv1 ""k8s.io/api/core/v1""
	metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
```

It would look like this;
```
	appsv1 ""k8s.io/api/apps/v1""
	apiv1 ""k8s.io/api/core/v1""
	metav1 ""k8s.io/api/meta/v1""
```

~~Longer term would it make sense to do something similar to the Google and AWS SDK's where they generate the language SDKs from a pure JSON request/response definition? Think this would be pretty nifty in terms of multi-language support.~~",closed,False,2018-10-11 01:40:42,2018-10-11 04:02:43
client-go,justlooks,https://github.com/kubernetes/client-go/issues/490,https://api.github.com/repos/kubernetes/client-go/issues/490,"../../rest/request.go:43:2: cannot find package ""k8s.io/apimachinery/pkg/watch""","i download client-go on my k8s master node ,when i test it ,i get package can not find error

```
[root@t-k8s-a1 in-cluster-client-configuration]# GOOS=linux go build -o ./app .
../../discovery/cached_discovery.go:28:2: cannot find package ""github.com/golang/glog"" in any of:
	/root/go/src/k8s.io/client-go/vendor/github.com/golang/glog (vendor tree)
	/usr/local/go/src/github.com/golang/glog (from $GOROOT)
	/root/go/src/github.com/golang/glog (from $GOPATH)
../../kubernetes/scheme/register.go:22:2: cannot find package ""k8s.io/api/admissionregistration/v1alpha1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/admissionregistration/v1alpha1 (vendor tree)
	/usr/local/go/src/k8s.io/api/admissionregistration/v1alpha1 (from $GOROOT)
	/root/go/src/k8s.io/api/admissionregistration/v1alpha1 (from $GOPATH)
../../kubernetes/scheme/register.go:23:2: cannot find package ""k8s.io/api/admissionregistration/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/admissionregistration/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/admissionregistration/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/admissionregistration/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:24:2: cannot find package ""k8s.io/api/apps/v1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/apps/v1 (vendor tree)
	/usr/local/go/src/k8s.io/api/apps/v1 (from $GOROOT)
	/root/go/src/k8s.io/api/apps/v1 (from $GOPATH)
../../kubernetes/scheme/register.go:25:2: cannot find package ""k8s.io/api/apps/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/apps/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/apps/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/apps/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:26:2: cannot find package ""k8s.io/api/apps/v1beta2"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/apps/v1beta2 (vendor tree)
	/usr/local/go/src/k8s.io/api/apps/v1beta2 (from $GOROOT)
	/root/go/src/k8s.io/api/apps/v1beta2 (from $GOPATH)
../../kubernetes/scheme/register.go:27:2: cannot find package ""k8s.io/api/authentication/v1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/authentication/v1 (vendor tree)
	/usr/local/go/src/k8s.io/api/authentication/v1 (from $GOROOT)
	/root/go/src/k8s.io/api/authentication/v1 (from $GOPATH)
../../kubernetes/scheme/register.go:28:2: cannot find package ""k8s.io/api/authentication/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/authentication/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/authentication/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/authentication/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:29:2: cannot find package ""k8s.io/api/authorization/v1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/authorization/v1 (vendor tree)
	/usr/local/go/src/k8s.io/api/authorization/v1 (from $GOROOT)
	/root/go/src/k8s.io/api/authorization/v1 (from $GOPATH)
../../kubernetes/scheme/register.go:30:2: cannot find package ""k8s.io/api/authorization/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/authorization/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/authorization/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/authorization/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:31:2: cannot find package ""k8s.io/api/autoscaling/v1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/autoscaling/v1 (vendor tree)
	/usr/local/go/src/k8s.io/api/autoscaling/v1 (from $GOROOT)
	/root/go/src/k8s.io/api/autoscaling/v1 (from $GOPATH)
../../kubernetes/scheme/register.go:32:2: cannot find package ""k8s.io/api/autoscaling/v2beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/autoscaling/v2beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/autoscaling/v2beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/autoscaling/v2beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:33:2: cannot find package ""k8s.io/api/autoscaling/v2beta2"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/autoscaling/v2beta2 (vendor tree)
	/usr/local/go/src/k8s.io/api/autoscaling/v2beta2 (from $GOROOT)
	/root/go/src/k8s.io/api/autoscaling/v2beta2 (from $GOPATH)
../../kubernetes/scheme/register.go:34:2: cannot find package ""k8s.io/api/batch/v1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/batch/v1 (vendor tree)
	/usr/local/go/src/k8s.io/api/batch/v1 (from $GOROOT)
	/root/go/src/k8s.io/api/batch/v1 (from $GOPATH)
../../kubernetes/scheme/register.go:35:2: cannot find package ""k8s.io/api/batch/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/batch/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/batch/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/batch/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:36:2: cannot find package ""k8s.io/api/batch/v2alpha1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/batch/v2alpha1 (vendor tree)
	/usr/local/go/src/k8s.io/api/batch/v2alpha1 (from $GOROOT)
	/root/go/src/k8s.io/api/batch/v2alpha1 (from $GOPATH)
../../kubernetes/scheme/register.go:37:2: cannot find package ""k8s.io/api/certificates/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/certificates/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/certificates/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/certificates/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:38:2: cannot find package ""k8s.io/api/coordination/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/coordination/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/coordination/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/coordination/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:39:2: cannot find package ""k8s.io/api/core/v1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/core/v1 (vendor tree)
	/usr/local/go/src/k8s.io/api/core/v1 (from $GOROOT)
	/root/go/src/k8s.io/api/core/v1 (from $GOPATH)
../../kubernetes/scheme/register.go:40:2: cannot find package ""k8s.io/api/events/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/events/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/events/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/events/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:41:2: cannot find package ""k8s.io/api/extensions/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/extensions/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/extensions/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/extensions/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:42:2: cannot find package ""k8s.io/api/networking/v1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/networking/v1 (vendor tree)
	/usr/local/go/src/k8s.io/api/networking/v1 (from $GOROOT)
	/root/go/src/k8s.io/api/networking/v1 (from $GOPATH)
../../kubernetes/scheme/register.go:43:2: cannot find package ""k8s.io/api/policy/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/policy/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/policy/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/policy/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:44:2: cannot find package ""k8s.io/api/rbac/v1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/rbac/v1 (vendor tree)
	/usr/local/go/src/k8s.io/api/rbac/v1 (from $GOROOT)
	/root/go/src/k8s.io/api/rbac/v1 (from $GOPATH)
../../kubernetes/scheme/register.go:45:2: cannot find package ""k8s.io/api/rbac/v1alpha1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/rbac/v1alpha1 (vendor tree)
	/usr/local/go/src/k8s.io/api/rbac/v1alpha1 (from $GOROOT)
	/root/go/src/k8s.io/api/rbac/v1alpha1 (from $GOPATH)
../../kubernetes/scheme/register.go:46:2: cannot find package ""k8s.io/api/rbac/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/rbac/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/rbac/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/rbac/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:47:2: cannot find package ""k8s.io/api/scheduling/v1alpha1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/scheduling/v1alpha1 (vendor tree)
	/usr/local/go/src/k8s.io/api/scheduling/v1alpha1 (from $GOROOT)
	/root/go/src/k8s.io/api/scheduling/v1alpha1 (from $GOPATH)
../../kubernetes/scheme/register.go:48:2: cannot find package ""k8s.io/api/scheduling/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/scheduling/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/scheduling/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/scheduling/v1beta1 (from $GOPATH)
../../kubernetes/scheme/register.go:49:2: cannot find package ""k8s.io/api/settings/v1alpha1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/settings/v1alpha1 (vendor tree)
	/usr/local/go/src/k8s.io/api/settings/v1alpha1 (from $GOROOT)
	/root/go/src/k8s.io/api/settings/v1alpha1 (from $GOPATH)
../../kubernetes/scheme/register.go:50:2: cannot find package ""k8s.io/api/storage/v1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/storage/v1 (vendor tree)
	/usr/local/go/src/k8s.io/api/storage/v1 (from $GOROOT)
	/root/go/src/k8s.io/api/storage/v1 (from $GOPATH)
../../kubernetes/scheme/register.go:51:2: cannot find package ""k8s.io/api/storage/v1alpha1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/storage/v1alpha1 (vendor tree)
	/usr/local/go/src/k8s.io/api/storage/v1alpha1 (from $GOROOT)
	/root/go/src/k8s.io/api/storage/v1alpha1 (from $GOPATH)
../../kubernetes/scheme/register.go:52:2: cannot find package ""k8s.io/api/storage/v1beta1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/api/storage/v1beta1 (vendor tree)
	/usr/local/go/src/k8s.io/api/storage/v1beta1 (from $GOROOT)
	/root/go/src/k8s.io/api/storage/v1beta1 (from $GOPATH)
main.go:24:2: cannot find package ""k8s.io/apimachinery/pkg/api/errors"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/api/errors (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/api/errors (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/api/errors (from $GOPATH)
../../tools/reference/ref.go:26:2: cannot find package ""k8s.io/apimachinery/pkg/api/meta"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/api/meta (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/api/meta (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/api/meta (from $GOPATH)
main.go:25:2: cannot find package ""k8s.io/apimachinery/pkg/apis/meta/v1"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/apis/meta/v1 (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/apis/meta/v1 (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/apis/meta/v1 (from $GOPATH)
../../pkg/apis/clientauthentication/v1alpha1/zz_generated.conversion.go:27:2: cannot find package ""k8s.io/apimachinery/pkg/conversion"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/conversion (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/conversion (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/conversion (from $GOPATH)
../../kubernetes/typed/core/v1/event_expansion.go:24:2: cannot find package ""k8s.io/apimachinery/pkg/fields"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/fields (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/fields (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/fields (from $GOPATH)
../../discovery/cached_discovery.go:32:2: cannot find package ""k8s.io/apimachinery/pkg/runtime"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/runtime (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/runtime (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/runtime (from $GOPATH)
../../discovery/discovery_client.go:34:2: cannot find package ""k8s.io/apimachinery/pkg/runtime/schema"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/runtime/schema (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/runtime/schema (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/runtime/schema (from $GOPATH)
../../discovery/discovery_client.go:35:2: cannot find package ""k8s.io/apimachinery/pkg/runtime/serializer"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/runtime/serializer (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/runtime/serializer (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/runtime/serializer (from $GOPATH)
../../rest/request.go:41:2: cannot find package ""k8s.io/apimachinery/pkg/runtime/serializer/streaming"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/runtime/serializer/streaming (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/runtime/serializer/streaming (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/runtime/serializer/streaming (from $GOPATH)
../../rest/client.go:31:2: cannot find package ""k8s.io/apimachinery/pkg/types"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/types (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/types (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/types (from $GOPATH)
../../util/flowcontrol/backoff.go:23:2: cannot find package ""k8s.io/apimachinery/pkg/util/clock"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/util/clock (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/util/clock (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/util/clock (from $GOPATH)
../../rest/request.go:42:2: cannot find package ""k8s.io/apimachinery/pkg/util/net"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/util/net (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/util/net (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/util/net (from $GOPATH)
../../discovery/discovery_client.go:36:2: cannot find package ""k8s.io/apimachinery/pkg/util/runtime"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/util/runtime (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/util/runtime (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/util/runtime (from $GOPATH)
../../discovery/helper.go:24:2: cannot find package ""k8s.io/apimachinery/pkg/util/sets"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/util/sets (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/util/sets (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/util/sets (from $GOPATH)
../../discovery/cached_discovery.go:33:2: cannot find package ""k8s.io/apimachinery/pkg/version"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/version (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/version (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/version (from $GOPATH)
../../rest/request.go:43:2: cannot find package ""k8s.io/apimachinery/pkg/watch"" in any of:
	/root/go/src/k8s.io/client-go/vendor/k8s.io/apimachinery/pkg/watch (vendor tree)
	/usr/local/go/src/k8s.io/apimachinery/pkg/watch (from $GOROOT)
	/root/go/src/k8s.io/apimachinery/pkg/watch (from $GOPATH)
```",closed,False,2018-10-11 06:27:52,2018-10-11 06:47:08
client-go,justlooks,https://github.com/kubernetes/client-go/issues/491,https://api.github.com/repos/kubernetes/client-go/issues/491,"panic: pods is forbidden: User ""system:serviceaccount:testalex:default"" cannot list pods at the cluster scope","hi , i am testing client-go in-cluster-client-configuration ,and my k8s version is v1.11.3, when i pack app file into my image ,and write a deployment of the image,and run it on k8s,i get error,default sa seems no permission to list all pods,and i try create my own sa and connect it to my deployment ,still same error,how to handle this?

# docker logs 1d29cf7b4df0
panic: pods is forbidden: User ""system:serviceaccount:testalex:default"" cannot list pods at the cluster scope
goroutine 1 [running]:
main.main()
	/root/go/src/k8s.io/client-go/examples/in-cluster-client-configuration/main.go:44 +0x414",closed,False,2018-10-11 07:11:22,2018-10-19 10:54:54
client-go,qq362541268,https://github.com/kubernetes/client-go/pull/492,https://api.github.com/repos/kubernetes/client-go/issues/492,Release 5.0,"Sorry, we do not accept changes directly against this repository, unless the
change is to the `README.md` itself. Please see 
`CONTRIBUTING.md` for information on where and how to contribute instead.
",closed,True,2018-10-11 07:17:56,2018-10-11 07:19:35
client-go,antoineco,https://github.com/kubernetes/client-go/issues/493,https://api.github.com/repos/kubernetes/client-go/issues/493,Creating Events fails with fake ClientSet,"**Problem description**

Creating Events via a record.EventRecorder does not work in combination with a fake ClientSet.
The generated error message is:

`'Server rejected event '&v1.Event{...}': request namespace does not match object namespace, request: """" object: ""test""' (will not retry!)`

**How to reproduce**

```go
package main

import (
	""flag""
	""time""

	""github.com/golang/glog""

	corev1 ""k8s.io/api/core/v1""
	metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
	""k8s.io/client-go/kubernetes/fake""
	""k8s.io/client-go/kubernetes/scheme""
	clientcorev1 ""k8s.io/client-go/kubernetes/typed/core/v1""
	""k8s.io/client-go/tools/record""
)

func main() {
	flag.Parse()

	pod := &corev1.Pod{
		ObjectMeta: metav1.ObjectMeta{
			Namespace: ""test"",
			Name:      ""dummy"",
			SelfLink:  ""/api/v1/namespaces/test/pods/dummy"",
		},
	}

	cli := fake.NewSimpleClientset(pod)

	eventSink := &clientcorev1.EventSinkImpl{
		cli.CoreV1().Events(corev1.NamespaceAll),
	}

	eventBroadcaster := record.NewBroadcaster()
	eventBroadcaster.StartLogging(glog.V(3).Infof)
	eventBroadcaster.StartRecordingToSink(eventSink)

	r := eventBroadcaster.NewRecorder(scheme.Scheme, corev1.EventSource{Component: ""test""})

	r.Event(pod, corev1.EventTypeNormal, ""SomeReason"", ""Dummy event"")

	time.Sleep(time.Second)
}
```


**Investigation**

At [fake/fake_event_expansion.go#L27](https://github.com/kubernetes/client-go/blob/release-9.0/kubernetes/typed/core/v1/fake/fake_event_expansion.go#L27), [`core.NewRootCreateAction()`](https://github.com/kubernetes/client-go/blob/release-9.0/testing/actions.go#L94) returns an `action` without Namespace:

```
x/vendor/k8s.io/client-go/testing.CreateActionImpl {
        ActionImpl: x/vendor/k8s.io/client-go/testing.ActionImpl {
                Namespace: """",
                Verb: ""create"",
                Resource: (*x/vendor/k8s.io/apimachinery/pkg/runtime/schema.GroupVersionResource)(0xc0000f5a58),
                Subresource: """",},
        Name: """",
        Object: x/vendor/k8s.io/apimachinery/pkg/runtime.Object(*x/vendor/k8s.io/api/core/v1.Event) *{
                ...
                Reason: ""SuccessfulCreate"",
                Message: ""Dummy event"",
                ...},}
```

Later, inside [c.Fake.Invokes()](https://github.com/kubernetes/client-go/blob/release-9.0/testing/fake.go#L130), the action is [handled](https://github.com/kubernetes/client-go/blob/release-9.0/testing/fixture.go#L91), but because `ns != obj.Namespace` an [error is returned](https://github.com/kubernetes/client-go/blob/release-9.0/testing/fixture.go#L353-L356).",closed,False,2018-10-11 21:05:36,2019-03-28 00:11:19
client-go,alcheagle,https://github.com/kubernetes/client-go/issues/494,https://api.github.com/repos/kubernetes/client-go/issues/494,Dynamic Client Usage,"I am struggling to create a service that handles the creation/deletion and updates of kubernetes resources. Since I don't know what kind of resource I am creating I need to be as dynamic as possible.

I would like to list all the possible resource instances that have a label on them. 

1st step: I need a k8s dynamic client
```golang
config, err = clientcmd.BuildConfigFromFlags("""", PATH_TO_KUBECONFIG) //Also possible with incluster configuration

client, err := dynamic.NewForConfig(config)
```

2nd step: I need to get the definition of the resource I need to operate with, for this reason I think I need a `restmapper` and the only way I have managed to create one is the following:
```golang
discoveryCacheDir := filepath.Join(""./.kube"", ""cache"", ""discovery"")
httpCacheDir := filepath.Join(""./.kube"", ""http-cache"")
discoveryClient, err := discovery.NewCachedDiscoveryClientForConfig(
	config,
	discoveryCacheDir,
	httpCacheDir,
	time.Duration(10*time.Minute))

mapper := restmapper.NewDeferredDiscoveryRESTMapper(discoveryClient)
my_restmapper := restmapper.NewShortcutExpander(mapper, discoveryClient)
```

3rd step: with the ``restmapper`` I can actually get unique definition of a resource, but I need to know which kind of resource I am looking for. 
```golang
mapping, _ := my_restmapper.ResourceFor(schema.GroupVersionResource{"""", """", ""pod""})
```

4th step: I can list the pod resource kind
```golang
list, err := my_restmapper.Resource(mapping).Namespace(""default"").List(metav1.ListOptions{})
```

Am I using the apis correctly? I have found no examples on this kind of usage. 
Is there any other way to dynamically handle resources on k8s? 
How Can I manage to get all the available resources in a k8s cluster and list them?

Thank you in advance for the support.",closed,False,2018-10-12 10:04:21,2019-03-14 09:50:25
client-go,jgrobbel,https://github.com/kubernetes/client-go/issues/495,https://api.github.com/repos/kubernetes/client-go/issues/495,Delete K8S Job leaks the pods,"From the docs we can see this text:
https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/#job-termination-and-cleanup

""When you delete the job using kubectl, all the pods it created are deleted too.""

But my testing shows this is not the case going through the go client:
https://github.com/kubernetes/client-go/blob/master/kubernetes/typed/batch/v1/job.go#L140

Is this expected, in that I should clean up the pods manually?",closed,False,2018-10-16 10:00:00,2018-10-16 21:22:32
client-go,ry1015,https://github.com/kubernetes/client-go/issues/496,https://api.github.com/repos/kubernetes/client-go/issues/496,Create Secret Error,"Hi,

I'm not sure why I'm getting an error 
```
cannot use *secret (type ""vendor/k8s.io/api/core/v1"".Secret) as type *""vendor/k8s.io/api/core/v1"".Secret in argument to kubeClient.clientset.CoreV1().Secrets(cr.ObjectMeta.Namespace).Create
```
```
type k8s struct {
	clientset clientset.Interface
}

func createSecret(pass string, cr *api.PredixMessageQueue) {
	kubeClient := k8s{}
	secret := corev1.Secret{
		TypeMeta: metav1.TypeMeta{
			Kind:       ""Secret"",
			APIVersion: ""apps/v1beta1"",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      ""rabbitmq-secret"",
			Namespace: cr.Namespace,
		},
		Data: map[string][]byte{
			""rabbitmq-secret"": []byte(pass),
		},
		Type: ""Opaque"",
	}
	secretOut, err := kubeClient.clientset.CoreV1().Secrets(cr.Namespace).Create(secret)
	if err != nil {
		fmt.Println(""ERROR:"", err)
	}
}
```",closed,False,2018-10-17 19:21:41,2018-10-17 19:22:41
client-go,berroteran,https://github.com/kubernetes/client-go/pull/497,https://api.github.com/repos/kubernetes/client-go/issues/497,Add entry topic license on readme file,"By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
have the right to submit it under the open source license
indicated in the file;

(b) I understand and agree that this project and the contribution
are public and that a record of the contribution (including all
personal information I submit with it, including my sign-off) is
maintained indefinitely and may be redistributed consistent with
this project or the open source license(s) involved.

Signed-off-by: Omar Berroteran Silva

Sorry, we do not accept changes directly against this repository, unless the
change is to the `README.md` itself. Please see 
`CONTRIBUTING.md` for information on where and how to contribute instead.
",closed,True,2018-10-23 04:42:07,2018-10-23 06:10:59
client-go,weeco,https://github.com/kubernetes/client-go/issues/498,https://api.github.com/repos/kubernetes/client-go/issues/498,Get resource usage of pods & nodes (Stackoverflow + Bounty),"I am struggling to fetch the current resource usage from pods & nodes. I created a Stackoverflow post and proposed a bounty, however I believe I couldn't target enough people who are familiar with Go and the Kubernetes architecture. If someone could enlighten me how to fetch the node & pod metrics I'd highly appreciate it:

https://stackoverflow.com/questions/52763291/get-current-resource-usage-of-a-pod-in-kubernetes-with-go-client",closed,False,2018-10-24 08:21:11,2018-10-31 11:58:51
client-go,wongma7,https://github.com/kubernetes/client-go/issues/499,https://api.github.com/repos/kubernetes/client-go/issues/499,coordination/Lease object leaderelection?,Are there any plans to write a `Lease` https://github.com/kubernetes/kubernetes/blob/f6b54f79fb8163af7cd39a4c2c9c31f973c2becf/staging/src/k8s.io/api/coordination/v1beta1/types.go#L27 implementation of the resourcelock interface so components can use it instead of configmaps? Or are configmaps the way to go? Thanks!,closed,False,2018-10-25 16:28:28,2019-01-24 16:59:58
client-go,pcj,https://github.com/kubernetes/client-go/issues/500,https://api.github.com/repos/kubernetes/client-go/issues/500,Reactor Usage,"Asking a question and adding reactor example for some future poor schmuck like myself that spent the afternoon trying to figure out why my reactor was not called.  

The key is understanding that that most generated / fake clientsets add in a ""catch-all"" reactor for the `ObjectTracker` that will always terminate the ReactorChain before it gets to yours.  So, although you'd think `.AddReactor` would work, in practice it's never called.  

Consider this snippet in which the `ReactorFunc` will never be called:

```go
import (
	""k8s.io/client-go/kubernetes/fake""
	fakebatchv1 ""k8s.io/client-go/kubernetes/typed/batch/v1/fake""
	k8stesting ""k8s.io/client-go/testing""
)
fakeClient := fake.NewSimpleClientset()
fakeClient.BatchV1().(*fakebatchv1.FakeBatchV1).Fake.AddReactor(""*"", ""*"", func(action k8stesting.Action) (bool, runtime.Object, error) {
    t.Logf(""I'm never triggered :("")
    return true, nil, nil
})
```

Looking at https://github.com/kubernetes/client-go/blob/master/kubernetes/fake/clientset_generated.go, we see this code:

```go

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())

        ...

	fakePtr := testing.Fake{}
	fakePtr.AddReactor(""*"", ""*"", testing.ObjectReaction(o))

        ...

	return &Clientset{fakePtr, &fakediscovery.FakeDiscovery{Fake: &fakePtr}}
}
```

In the `testing/fake.go` base clientset, one finds the `Invokes` function that is called by all the derived fake client implementations:

```go

// Invokes records the provided Action and then invokes the ReactionFunc that
// handles the action if one exists. defaultReturnObj is expected to be of the
// same type a normal call would return.
func (c *Fake) Invokes(action Action, defaultReturnObj runtime.Object) (runtime.Object, error) {
	c.Lock()
	defer c.Unlock()

	c.actions = append(c.actions, action)
	for _, reactor := range c.ReactionChain {

		if !reactor.Handles(action) {
			continue
		}

		handled, ret, err := reactor.React(action)
		if !handled {
			continue
		}

		return ret, err
	}

	return defaultReturnObj, nil
}
```

So the first ReactorFunc that handles the action will be called.  Since there is always a `*, *` in the front if the reactor chain, any other one added via the `AddReactor` function will never be called.

The workaround is to use `PrependReactor` instead:

```go
fakeClient := fake.NewSimpleClientset()
fakeClient.BatchV1().(*fakebatchv1.FakeBatchV1).Fake.PrependReactor(""*"", ""*"", func(action k8stesting.Action) (bool, runtime.Object, error) {
    t.Logf(""This works :)"")
    return true, nil, nil
})
```

My question is, am I doing this wrong?  How is the `AddReactor` function ever useful?  I would like to write idiomatic tests but unclear on the reactor usage.
",closed,False,2018-10-30 22:46:35,2019-03-30 17:15:15
client-go,rglyons,https://github.com/kubernetes/client-go/issues/501,https://api.github.com/repos/kubernetes/client-go/issues/501,gcp auth plugin: use service account (JSON) bytes directly,"Hi there,

I'm trying to create a k8s cluster rest config from google service account key JSON file bytes. Here's what I currently have: 
```go
import (
    _ ""k8s.io/client-go/plugin/pkg/client/auth/gcp"" 
)
...
config := &rest.Config{
	Host: ""https://"" + <cluster endpoint>,
	AuthProvider: &api.AuthProviderConfig{
		Name: ""gcp"",
	},
	TLSClientConfig: rest.TLSClientConfig{
		Insecure: false,
		CAData:   <cluster cert>,
	},
}
```
When I make my request to manipulate the k8s cluster, the gcp auth provider uses the default token source. I was using the GOOGLE_APPLICATION_CREDENTIALS env var to point to a file where the JSON service account key was located, and it was working fine. 

Now, I'd like to make a change. I want to source the JSON service account key from a secure location and use the bytes of the file directly to authenticate with gcp. That means I will _not_ be writing the JSON to the filesystem, and I will _not_ be using GOOGLE_APPLICATION_CREDENTIALS and the default token source workflow. 

How do I tell the rest config to use the JSON service account bytes directly?

I thought of doing something like this to get the token, but I am unsure of how to then _use_ that token - 
```go
creds := google.CredentialsFromJSON(context.Background(), saBytes)
tok := creds.TokenSource.Token()
config := &rest.Config{
	Host: ""https://"" + <cluster endpoint>,
	AuthProvider: &api.AuthProviderConfig{
		Name: ""gcp"",
                 Config: map[string]string{
                     ""access-token"": tok.AccessToken,
                     ""expiry"": tok.Expiry,
                 },
	},
	TLSClientConfig: rest.TLSClientConfig{
		Insecure: false,
		CAData:   <cluster cert>,
	},
}
```
I believe the above will fail, since the gcp auth plugin seems to be written to accept only a command that fetches the token or the use of default access token (and therefore the GOOGLE_APPLICATION_CREDENTIALS env var and a file on the filesystem).

Any ideas?",open,False,2018-11-07 23:55:04,2019-03-08 01:22:43
client-go,xichengliudui,https://github.com/kubernetes/client-go/pull/502,https://api.github.com/repos/kubernetes/client-go/issues/502,Delete some redundant code,"Sorry, we do not accept changes directly against this repository, unless the
change is to the `README.md` itself. Please see 
`CONTRIBUTING.md` for information on where and how to contribute instead.
",closed,True,2018-11-13 08:26:20,2018-11-13 08:27:04
client-go,aisensiy,https://github.com/kubernetes/client-go/issues/503,https://api.github.com/repos/kubernetes/client-go/issues/503,Dep support for client-go,I read the [INSTALL md dep part](https://github.com/kubernetes/client-go/blob/kubernetes-1.11.3/INSTALL.md#dep-not-supported-yet). But does that mean I have to convert all the json into `[[override]]` from [Godeps.json](https://github.com/kubernetes/client-go/blob/kubernetes-1.11.3/Godeps/Godeps.json)?,closed,False,2018-11-15 06:26:35,2018-12-17 16:36:09
client-go,cainzhong,https://github.com/kubernetes/client-go/issues/504,https://api.github.com/repos/kubernetes/client-go/issues/504,remote error: tls: access denied with go get,"I cannot use `go get` to download `k8s.io/client-go/...,` but I can download others such as `github.com/nsf/gocode`.

So I think my configuration about git and go are correct.
I don't know why this happens?

Any ideas how to fix it?

```
$ git version
git version 2.19.1.windows.1

$ go version
go version go1.11.2 windows/amd64

$ go env
set GOARCH=amd64
set GOBIN=
set GOCACHE=C:\Users\zhongtao\AppData\Local\go-build
set GOEXE=.exe
set GOFLAGS=
set GOHOSTARCH=amd64
set GOHOSTOS=windows
set GOOS=windows
set GOPATH=C:\Users\zhongtao\go
set GOPROXY=
set GORACE=
set GOROOT=C:\Software\Go
set GOTMPDIR=
set GOTOOLDIR=C:\Software\Go\pkg\tool\windows_amd64
set GCCGO=gccgo
set CC=gcc
set CXX=g++
set CGO_ENABLED=1
set GOMOD=
set CGO_CFLAGS=-g -O2
set CGO_CPPFLAGS=
set CGO_CXXFLAGS=-g -O2
set CGO_FFLAGS=-g -O2
set CGO_LDFLAGS=-g -O2
set PKG_CONFIG=pkg-config
set GOGCCFLAGS=-m64 -mthreads -fno-caret-diagnostics -Qunused-arguments -fmessage-length=0 -fdebug-prefix-map=C:\Users\zhongtao\AppData\LoTemp\go-build041230430=/tmp/go-build -gno-record-gcc-switches

$ go get -u -v github.com/nsf/gocode
github.com/nsf/gocode (download)
github.com/nsf/gocode

$ go get -u -v k8s.io/client-go/...
Fetching https://k8s.io/client-go?go-get=1
https fetch failed: Get https://k8s.io/client-go?go-get=1: remote error: tls: access denied
package k8s.io/client-go/...: unrecognized import path ""k8s.io/client-go/..."" (https fetch: Get https://k8s.io/client-go?go-get=1: remote r: tls: access denied)
```",open,False,2018-11-20 01:53:02,2019-03-20 14:15:55
client-go,tony-haibo-zhu,https://github.com/kubernetes/client-go/issues/505,https://api.github.com/repos/kubernetes/client-go/issues/505,Is there any delete collection method for service? ,"Hi there~ 
When I use go-client to do some delete resource job, I found there isn't any delete collection (maybe by label)methods for service resource, but others have. Is there any similar method for service? Thank you.   ",closed,False,2018-11-21 09:49:55,2018-11-21 14:23:35
client-go,nikhita,https://github.com/kubernetes/client-go/issues/506,https://api.github.com/repos/kubernetes/client-go/issues/506,Release v10.0.0,"Tracking issue for the v10.0.0 release - we are at double digit releases of client-go! :tada:  This will be released once Kubernetes v1.13.0 is released ([slated for 3rd December](https://github.com/kubernetes/sig-release/tree/master/releases/release-1.13#timeline)).


TODO:

- [x] Create the release notes spreadsheet.
   - https://docs.google.com/spreadsheets/d/1DS9hI2u1wYMG70_ALqc4holhmovNz-fr-ZUQGvhoplM/edit?usp=sharing
- [x] Update CHANGELOG and README.
   - [x] https://github.com/kubernetes/client-go/pull/510 (master)
   - [x] https://github.com/kubernetes/client-go/pull/515 (release-10.0)
- [x] Smoke test + logs: https://gist.github.com/nikhita/fcf466640d4d8a754cbb6f153a67e57b
- [x] Manually verify that all commits in the tag are correct and `git checkout v10.0.0 && godep restore && go build ./...` runs successfully.
- [x] Create the tag/release. 
- [x] Link the changelog on the releases page.
- [x]  Fix the tag title using GitHub UI

/assign
/cc @sttts ",closed,False,2018-11-23 08:22:39,2018-12-04 12:26:26
client-go,doodlesbykumbi,https://github.com/kubernetes/client-go/issues/507,https://api.github.com/repos/kubernetes/client-go/issues/507,fake client does not error when resource client has empty namespace as in real client,"the real client errors with `an empty namespace may not be set when a resource name is provided` when the namespace is empty

1. **As real client** ->Similar scenario with a real client against an actual cluster; assuming `kubeconfig` is present in the usual place e.g.`$HOME/.kube/config`. Save this file as `main.go` and run `go run main.go`. Observe that the program panics as expected:
    ```
    package main
    
    import (
        ""fmt""
        ""k8s.io/api/core/v1""
        metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
        ""k8s.io/client-go/kubernetes""
        ""k8s.io/client-go/tools/clientcmd""
        // if you're on GKE
        _ ""k8s.io/client-go/plugin/pkg/client/auth/gcp""
    )
    
    func main() {
        // use available config
        rules := clientcmd.NewDefaultClientConfigLoadingRules()
        overrides := &clientcmd.ConfigOverrides{}
        clientConfig := clientcmd.NewNonInteractiveDeferredLoadingClientConfig(rules, overrides)
        config, _ := clientConfig.ClientConfig()

        // creates real clientset
        clientset, _ := kubernetes.NewForConfig(config)
    
        secretsClient := clientset.CoreV1().Secrets("""")
    
        secret, err = secretsClient.Get(""database"", metav1.GetOptions{})
    
        // expecting
        // an empty namespace may not be set when a resource name is provided
        if err != nil {
            panic(err)
        }
    
        fmt.Println(secret.Data)
    }
    ```

2. **As fake client** -> Save this file as `main.go` and run `go run main.go`. Observe that it will run to the end without error:
    ```
    package main
    
    import (
    	""fmt""
    	""k8s.io/api/core/v1""
    	metav1 ""k8s.io/apimachinery/pkg/apis/meta/v1""
    	testclient ""k8s.io/client-go/kubernetes/fake""
    )
    
    func main() {
    	testClientSet := testclient.NewSimpleClientset()
    	secretsClient := testClientSet.CoreV1().Secrets("""")
    
    	secretsClient.Create(&v1.Secret{
    		ObjectMeta: metav1.ObjectMeta{
    			Name: ""database"",
    		},
    		Data: map[string][]byte{
    			""password"": []byte(""secret""),
    		},
    	})
    	
    	secret, err = secretsClient.Get(""database"", metav1.GetOptions{})
    
    	// expecting 
    	// an empty namespace may not be set when a resource name is provided
    	if err != nil {
    		panic(err)
    	}
    
    	fmt.Println(secret.Data)
    }
    ```",open,False,2018-11-26 15:38:59,2019-03-28 13:24:13
client-go,barnettZQG,https://github.com/kubernetes/client-go/issues/508,https://api.github.com/repos/kubernetes/client-go/issues/508,MatchExpressions:[]v1.LabelSelectorRequirement(nil)}: field is immutabl,"I want patch deployment with:
```
{""metadata"":{""creationTimestamp"":null,""labels"":{""creater_id"":""1543299964865665410"",""version"":""20181127142603""}},""spec"":{""template"":{""metadata"":{""labels"":{""version"":""20181127142603"",""creater_id"":""1543299964865665410""}},""spec"":{""volumes"":[{""name"":""slug"",""hostPath"":{""path"":""/grdata/build/tenant/e8539a9c33fd418db11cce26d2bca431/slug/2bc58cb783992dff584ee7454360b0c1/20181127142603.tgz""}}],""containers"":[{""name"":""2bc58cb783992dff584ee7454360b0c1"",""image"":""goodrain.me/runner"",""args"":[""start"",""web""],""ports"":[{""containerPort"":5000}],""env"":[{""name"":""LOGGER_DRIVER_NAME"",""value"":""streamlog""},{""name"":""PORT"",""value"":""5000""},{""name"":""PROTOCOL"",""value"":""http""},{""name"":""DEFAULT_DOMAIN_5000"",""value"":""5000.gr60b0c1.0enb7gyx.37e53f.grapps.cn""},{""name"":""MONITOR_PORT"",""value"":""5000""},{""name"":""CUR_NET"",""value"":""calico""},{""name"":""TENANT_ID"",""value"":""e8539a9c33fd418db11cce26d2bca431""},{""name"":""SERVICE_ID"",""value"":""2bc58cb783992dff584ee7454360b0c1""},{""name"":""MEMORY_SIZE"",""value"":""micro""},{""name"":""SERVICE_NAME"",""value"":""gr60b0c1""},{""name"":""SERVICE_POD_NUM"",""value"":""1""},{""name"":""HOST_IP"",""valueFrom"":{""fieldRef"":{""fieldPath"":""status.hostIP""}}},{""name"":""POD_IP"",""valueFrom"":{""fieldRef"":{""fieldPath"":""status.podIP""}}}],""resources"":{""limits"":{""cpu"":""80m"",""memory"":""128Mi""},""requests"":{""cpu"":""30m"",""memory"":""128Mi""}},""volumeMounts"":[{""name"":""slug"",""readOnly"":true,""mountPath"":""/tmp/slug/slug.tgz""}]}]}},""strategy"":{},""selector"":{""matchLabels"":{""version"":""20181127142603""}}}}
```
if I use method:
```
_, err := s.manager.client.AppsV1().RESTClient().Patch(types.MergePatchType).Namespace(deployment.Namespace).Resource(""deployments"").Name(deployment.Name).Body(app.UpgradePatch[""deployment""]).Do().Get()
```
It will fail. The error message is as follows：
```
Deployment.apps ""2bc58cb783992dff584ee7454360b0c1-deployment"" is invalid: spec.selector: Invalid value: v1.LabelSelector{MatchLabels:map[string]string{""version"":""20181127141244"", ""name"":""gr60b0c1""}, MatchExpressions:[]v1.LabelSelectorRequirement(nil)}: field is immutable
```
but if I use method:
```
_, err := s.manager.client.ExtensionsV1beta1().RESTClient().Patch(types.MergePatchType).Namespace(deployment.Namespace).Resource(""deployments"").Name(deployment.Name).Body(app.UpgradePatch[""deployment""]).Do().Get()
```
it can be successful. 

kube-api version is : v1.10.9


",closed,False,2018-11-27 06:37:31,2018-11-27 14:53:48
client-go,crimsonfaith91,https://github.com/kubernetes/client-go/issues/509,https://api.github.com/repos/kubernetes/client-go/issues/509,metrics.Register() is not called in kubernetes controller manager,"An inspection towards codebase unveils that `metrics.Register()` is not called in kubernetes controller manager before calling `metrics.RequestLatency()` [here](https://github.com/kubernetes/client-go/blob/master/rest/request.go#L682).

This may be the reason following error happens: `Observed a panic: &runtime.TypeAssertionError{interfaceString:"""", concreteString:"""", assertedString:""prometheus.Observer"", missingMethod:""""} (interface conversion: interface is nil, not prometheus.Observer)`

I will work on the fix.

@cheftako ",open,False,2018-11-27 23:12:31,2019-03-28 00:11:12
client-go,nikhita,https://github.com/kubernetes/client-go/pull/510,https://api.github.com/repos/kubernetes/client-go/issues/510,Add client-go 10.0.0 changelog,"For https://github.com/kubernetes/client-go/issues/506

Ref: https://docs.google.com/spreadsheets/d/1DS9hI2u1wYMG70_ALqc4holhmovNz-fr-ZUQGvhoplM

/assign @sttts @caesarxuchao ",closed,True,2018-11-28 06:52:33,2018-12-03 10:01:40
client-go,nikhita,https://github.com/kubernetes/client-go/pull/511,https://api.github.com/repos/kubernetes/client-go/issues/511,travis: bump go version to 1.11.2,"Ref for bumping go version: https://github.com/kubernetes/kubernetes/pull/70665

`godep restore` is automatically run by Travis CI, so we don't really need an explicit godep step for it.

/assign @sttts ",closed,True,2018-11-28 06:58:06,2018-12-04 10:36:16
client-go,ashi009,https://github.com/kubernetes/client-go/issues/512,https://api.github.com/repos/kubernetes/client-go/issues/512,Reduce the number of third-party dependencies,"There is an incredibly large number (over 20) of third-party dependencies from using k8s.io/client-go.

Security issues may come from unaudited third-party dependencies, and bloat the package really quick. 

Given the recent npm's event-stream incident, IMHO k8s.io/client-go (or k8s.io/* in general) should consider reducing the number of third-party dependencies and make the package more self-contained.
",open,False,2018-11-28 17:52:03,2019-02-27 07:26:09
client-go,shsjshentao,https://github.com/kubernetes/client-go/issues/513,https://api.github.com/repos/kubernetes/client-go/issues/513,how to stop klog output,"how to ignore these logs? or stop log?

E1129 19:01:09.081414   12762 reflector.go:134] uk8s/uk8s-watcher/collector/collector.go:79: Failed to list *v1beta1.CronJob: Get https://[2003:da8:2004:1000:0a09:131d:0101:23ba]:6443/apis/batch/v1beta1/cronjobs?limit=500&resourceVersion=0: dial tcp [2003:da8:2004:1000:a09:131d:101:23ba]:6443: i/o timeout
E1129 19:01:09.082359   12762 reflector.go:134] uk8s/uk8s-watcher/collector/collector.go:79: Failed to list *v1.Node: Get https://[2003:da8:2004:1000:0a09:131d:0101:23ba]:6443/api/v1/nodes?limit=500&resourceVersion=0: dial tcp [2003:da8:2004:1000:a09:131d:101:23ba]:6443: i/o timeout
E1129 19:01:09.083523   12762 reflector.go:134] uk8s/uk8s-watcher/collector/collector.go:79: Failed to list *v1.ResourceQuota: Get https://[2003:da8:2004:1000:0a09:131d:0101:23ba]:6443/api/v1/resourcequotas?limit=500&resourceVersion=0: dial tcp [2003:da8:2004:1000:a09:131d:101:23ba]:6443: i/o timeout
E1129 19:01:09.084575   12762 reflector.go:134] uk8s/uk8s-watcher/collector/collector.go:79: Failed to list *v1.Secret: Get https://[2003:da8:2004:1000:0a09:131d:0101:23ba]:6443/api/v1/secrets?limit=500&resourceVersion=0: dial tcp [2003:da8:2004:1000:a09:131d:101:23ba]:6443: i/o timeout
E1129 19:01:09.085640   12762 reflector.go:134] uk8s/uk8s-watcher/collector/collector.go:79: Failed to list *v1.Job: Get https://[2003:da8:2004:1000:0a09:131d:0101:23ba]:6443/apis/batch/v1/jobs?limit=500&resourceVersion=0: dial tcp [2003:da8:2004:1000:a09:131d:101:23ba]:6443: i/o timeout
",open,False,2018-11-29 09:06:35,2019-03-30 05:03:11
client-go,matthewsamuel95,https://github.com/kubernetes/client-go/pull/514,https://api.github.com/repos/kubernetes/client-go/issues/514,use bytes.Buffer for Go version 1.9,"Current code has resulted in this 
go/src/github.com/kubernetes-incubator/cri-tools/vendor/k8s.io/client-go/transport/round_trippers.go:437:9: undefined: strings.Builder

",closed,True,2018-11-30 00:36:19,2018-11-30 08:02:13
client-go,nikhita,https://github.com/kubernetes/client-go/pull/515,https://api.github.com/repos/kubernetes/client-go/issues/515,Cherry-pick of changelog updates to release-10.0 branch,"https://github.com/kubernetes/client-go/pull/510 added the changelog to master. But this change is not present in the `release-10.0` branch, so this PR cherry-picks commits from #510 onto the `release-10.0` branch.

---

Until now, we have never cherry-picked the changelog changes, so all release-`n` branches contain changelog/readme updates for the the release `n-1`.
Example - https://github.com/kubernetes/client-go/tree/release-9.0.",closed,True,2018-12-03 10:15:08,2018-12-04 12:18:39
client-go,adinunzio84,https://github.com/kubernetes/client-go/issues/527,https://api.github.com/repos/kubernetes/client-go/issues/527,Intermittent connectivity to api-server when using with Istio,"Client-go seems to have a problem while running on AKS with Istio. We've spent a lot of time trying to figure out which of the 3 causes the issue, but we suspect it to be client-go at this point.

Environment:
* Azure Kubernetes Service (Kubernetes 1.11.5)
* Istio 1.0.2 (bugs in later versions)
* client-go (tried 7.0.0 and 9.0.0)

Description:
We noticed that if our client makes calls to the API server every 10 seconds, it continues to work - however, after (pretty close to if not exactly) 5 minutes of idle time, requests start failing. After another period of time (about 10-15 minutes), it works again before repeating the issue. This is noticeable in (a slightly modified version of) the [in-cluster example](https://github.com/kubernetes/client-go/tree/master/examples/in-cluster-client-configuration).

Error log:
```
...
2018-12-05 18:37:27: Making request
E1205 18:37:37.333173       8 round_trippers.go:169] CancelRequest not implemented by *rest.tokenSourceTransport
2018-12-05 18:37:37: Panic
Error Get https://${FQDN}:443/api/v1/pods: net/http: request canceled (Client.Timeout exceeded while awaiting headers):
```
(replaced my apiserver with `${FQDN}`)

We're also seeing:
```
...
Error Get https://${FQDN}:443/api/v1/pods: unexpected EOF:
```
(replaced my apiserver with `${FQDN}`)


The main factors involved seem to be a combination of:
* Using environment variables on the Pod to access the API server
* Using a ServiceEntry with Istio to access the API server due to the previous factor
* Using client-go to access the API server

The ServiceEntry that needs to be created looks like this:
```
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: azmk8s-ext
  namespace: default
spec:
  hosts:
  - ${FQDN}
  location: MESH_EXTERNAL
  ports:
  - name: https
    number: 443
    protocol: HTTPS
  resolution: DNS
```

**Why is this ServiceEntry necessary?**
* On AKS, there is a workaround to Azure/AKS#676 where the following environment variables are set automatically via some MutatingAdmissionWebhook, where FQDN is the fully qualified name for your AKS cluster's apiserver:
  * KUBERNETES_PORT_443_TCP_ADDR = ""${FQDN}""
  * KUBERNETES_PORT = ""tcp://${FQDN}:443""
  * KUBERNETES_PORT_443_TCP = ""tcp://${FQDN}:443""
  * KUBERNETES_SERVICE_HOST = ""${FQDN}""

**Why client-go?**
* The issue occurs using client-go but not [client-node](https://github.com/kubernetes-client/javascript). Even though it only happens on AKS and not on GKE, this is probably due to the ServiceEntry requirement, which is necessary on AKS but not on GKE. In both environments, client-node works, provided the ServiceEntry is there on AKS.

Other things we've noticed:
* Making raw REST calls to the API server with the token and cacerts stored on the pod seems to work fine, both via `curl` and Go's `http.Client`.
* The problems are pod-specific - that is, I can have one pod making requests every 10 seconds while another is every 6 minutes, and the 10-second one works while the 6-minute one does not
* Deleting the ServiceEntry and recreating it seems to ""restart"" the error cycle, so it works soon after, but fails again after that brief period.
* We can use any 2 of AKS, Istio, and client-go, but not all 3
  * If we do not use Istio, the sample app works okay, even with the AKS environment variables set
  * If we do not use AKS (and therefore no ServiceEntry), it works okay
  * If we do not use client-go, but use client-node, it works okay
",open,False,2018-12-05 18:52:37,2019-04-03 19:18:06
client-go,mansi-a,https://github.com/kubernetes/client-go/issues/528,https://api.github.com/repos/kubernetes/client-go/issues/528,Allow passing Interface as a parameter when creating new workqueue,"We are in the process of using workqueue for our various controllers. One of the issue I see is that I cannot implement a new type to satisfy `Interface` as `newDelayingQueue()` defaults it to `NewNamed(name)`.

For example, I'd like to define a queue which is not a FIFO but a priority queue and use it with delaying and rateLimiting properties.

https://github.com/kubernetes/client-go/blob/117d288bbeebfecd84ac5dde6a31dc16ee2ae55d/util/workqueue/delaying_queue.go#L44-L57
",open,False,2018-12-07 21:49:26,2019-03-07 22:19:29
client-go,nfons,https://github.com/kubernetes/client-go/issues/529,https://api.github.com/repos/kubernetes/client-go/issues/529,Cache.NewInformer UpdateFunc called repeatedly w/o any updates,"I'm using the `NewListWatchFromClient` and `NewInformer` to listen to deployments as per #132.

However, the `UpdatFunc` seems to be repeatedly called, ever 30 secs, event w/o any update to the deployments.

relevant code:


```
watchList := cache.NewListWatchFromClient(clientset.AppsV1().RESTClient(), ""deployments"", core.NamespaceDefault, fields.Everything())
	_, controller := cache.NewInformer(
		watchList,
		&v1.Deployment{},
		time.Second*30,
		cache.ResourceEventHandlerFuncs{
			UpdateFunc: taskUpdate,
		})
```

the update Task is fired repeatedly in the interval...and all my deployments are output as ""updated"" even though there are not any updates to my deployments 

I solved the issue by adding a `reflect.DeepEqual()` check on my taskUpdate ) but even with that, on a single deployment update, the taskUpdate gets fired 3x.

it seems the resyncPeriod is not working as intended? I updated this to 0, and still fires multiple times",closed,False,2018-12-09 21:58:09,2018-12-18 19:45:41
client-go,rajdhandus,https://github.com/kubernetes/client-go/issues/530,https://api.github.com/repos/kubernetes/client-go/issues/530,Is there a way to get cluster name programmatically from client-go,"hello,

I am looking to derive the current cluster name i am running the controller from. I am using in-cluster authentication method. Is there a way i can retrieve the name of the cluster using client-go ?

thanks..",open,False,2018-12-13 18:09:47,2019-03-13 18:35:47
client-go,eivantsov,https://github.com/kubernetes/client-go/issues/531,https://api.github.com/repos/kubernetes/client-go/issues/531,fake package: faulty deployment isn't validated,"I am testing creation of a deployment with fake package, and everything goes smooth, however, when I provide and non existing deployment strategy, tests passes anyway, while when deployed on a real cluster, I get an error of course. Below is my deployment definition:
```
{
		TypeMeta: metav1.TypeMeta{
			Kind:       ""Deployment"",
			APIVersion: ""apps/v1"",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name:      keycloakName,
			Namespace: namespace,
			Labels:    keycloakLabels,
		},
		Spec: appsv1.DeploymentSpec{
			Selector: &metav1.LabelSelector{MatchLabels: keycloakLabels},
			Strategy: appsv1.DeploymentStrategy{
				Type: ""non-existing-type"",
			},
			Template: corev1.PodTemplateSpec{
				ObjectMeta: metav1.ObjectMeta{
					Labels: keycloakLabels,
				},
				Spec: corev1.PodSpec{
					// testing https on k8s
					HostAliases: hostAliases,
					Containers: []corev1.Container{
						{
							Name:            keycloakName,
							Image:           keycloakImage,
							ImagePullPolicy: corev1.PullIfNotPresent,
							Command: []string{
								""/bin/sh"",
							},
							Args: []string{
								""-c"",
								command,
							},
							Ports: []corev1.ContainerPort{
								{
									Name:          keycloakName,
									ContainerPort: 8080,
									Protocol:      ""TCP"",
								},
							},
							Resources: corev1.ResourceRequirements{
								Requests: corev1.ResourceList{
									corev1.ResourceMemory: resource.MustParse(""512Mi""),
								},
								Limits: corev1.ResourceList{
									corev1.ResourceMemory: resource.MustParse(""2Gi""),
								},
							},
							ReadinessProbe: &corev1.Probe{
								Handler: corev1.Handler{
									HTTPGet: &corev1.HTTPGetAction{
										Path: ""auth/js/keycloak.js"",
										Port: intstr.IntOrString{
											Type:   intstr.Int,
											IntVal: int32(8080),
										},
										Scheme: corev1.URISchemeHTTP,
									},
								},
								InitialDelaySeconds: 25,
								FailureThreshold:    10,
								TimeoutSeconds:      5,
							},
							Env: keycloakEnv,
						},
					},
				},
			},
		},
	}
```

Deployment is created as: 

```
	deployment, err := fakeK8s.clientset.AppsV1().Deployments(""my-namespace"").Create(newKeycloakDeployment())
```
Is there anything I might be doing wrong?",closed,False,2018-12-16 07:25:32,2018-12-21 15:58:44
client-go,qiujian16,https://github.com/kubernetes/client-go/issues/532,https://api.github.com/repos/kubernetes/client-go/issues/532,client-go 9.0 does not work with apimachinery 1.12.2,"```
# github.ibm.com/IBMPrivateCloud/hcmctl/vendor/k8s.io/client-go/transport/spdy
vendor/k8s.io/client-go/transport/spdy/spdy.go:41:45: not enough arguments in call to spdy.NewRoundTripper
	have (*tls.Config, bool)
	want (*tls.Config, bool, bool)
```

Seems apimachinery change round tripper interface in pkg/util/httpstream/spdy/roundtripper.go after 1.12.2",closed,False,2018-12-17 06:06:37,2018-12-21 15:36:19
client-go,HankZhengg,https://github.com/kubernetes/client-go/issues/533,https://api.github.com/repos/kubernetes/client-go/issues/533,Convert object to kubernetes manifest,"Hi ,

Is there exist way to convert an object to kubernetes manifest. For example

From:
```
type email struct{
     name string
     kind string
     image string
}
e:= email {
      name:email,
      kind:Deployment,
      image:email-service:version-1.9.1
}
```
To:
```
kind: Deployment
metadata:
  name: email
...
  image: email-service:version-1.9.1
```",open,False,2018-12-20 05:26:06,2019-02-02 05:37:52
client-go,rametta,https://github.com/kubernetes/client-go/issues/534,https://api.github.com/repos/kubernetes/client-go/issues/534,Can't watch only one configMap,"Hello,

I'm having an issue of not being able to ""watch"" a single configMap.

I can watch ALL the configMaps in a namespace successfully and receive all the updates in the ResultChan() channel. BUT to get the updates of just one config, i need to do hacky stuff with filtering by Labels using the metav1.ListOptions LabelSelector.

Like this:
```go
configMapWatch, err := client.CoreV1().ConfigMaps(namespace).Watch(metav1.ListOptions{
	LabelSelector: ""component = config"",
	Watch:         true,
})
```

But I would like something like this:
```go
configMapWatch, err := client.CoreV1().ConfigMaps(namespace).Watch(metav1.ListOptions{
	Name: ""name-of-my-config"",
	Watch:         true,
})
```

Is this possible already??

Thank you very much",closed,False,2018-12-21 15:27:54,2018-12-21 15:57:35
client-go,smanpathak,https://github.com/kubernetes/client-go/issues/535,https://api.github.com/repos/kubernetes/client-go/issues/535,Provide a way to check compatibility,"I ran into an interesting situation: An application controller used UpdateStatus calls for CRDs which are only supported by K8s 1.11 onwards. So I experienced failures on 1.10 K8s.
Can client-go expose an API/we can create a tool which checks if the platform supports all calls made by client-go? ",closed,False,2018-12-21 18:30:35,2018-12-21 18:45:03
client-go,Cloudzp,https://github.com/kubernetes/client-go/issues/536,https://api.github.com/repos/kubernetes/client-go/issues/536, certificate signed by unknown authority,"InsecureSkipVerify: true is initialized in rest.Config when using ""k8s.io/client-go/tools/remotecommand"", but it does not seem to take effect
### this is my config
![image](https://user-images.githubusercontent.com/25190767/50435325-c11a3d00-091b-11e9-8abc-68c5536ac2f4.png)
### this is the error
![Uploading image.png…]()

",closed,False,2018-12-26 06:50:34,2018-12-27 02:35:45
client-go,filmil,https://github.com/kubernetes/client-go/issues/537,https://api.github.com/repos/kubernetes/client-go/issues/537,Document what errors are returned by the client API methods,"It would be nice to have the API documentation also say what errors are returned.

For example see: https://github.com/kubernetes/client-go/blob/master/listers/apps/v1/deployment.go#L31

Did you know that if you call `List` and it finds no matching deployments, you'd get a `404 Not Found`.  From the signature here this is not obvious.  An empty list and a `nil` error would have been just as reasonable a result.

Docs should either mention the error behavior explicitly, or link to a place that documents the general behavior. Otherwise, it's really hard to program against an interface with undocumented behavior.",open,False,2018-12-26 21:42:36,2019-03-26 22:47:22
client-go,Cloudzp,https://github.com/kubernetes/client-go/issues/538,https://api.github.com/repos/kubernetes/client-go/issues/538,Upgrade request required,"Use k8s.io/client-go/tools/remotecommand to create a socket connection. My code looks like this. It returns me an Upgrade request required. What should I do?

![image](https://user-images.githubusercontent.com/25190767/50462991-d5197980-09c3-11e9-8d20-d0f9a925602a.png)

",closed,False,2018-12-27 02:44:07,2019-02-01 10:00:25
client-go,cofyc,https://github.com/kubernetes/client-go/issues/539,https://api.github.com/repos/kubernetes/client-go/issues/539,Request to implement resource version behavior in fake clientset,"Global or per object incremental resource version.
It helps to test logic involving resource version and detect races.",closed,False,2018-12-27 03:48:37,2019-03-27 09:57:57
client-go,lijiansgit,https://github.com/kubernetes/client-go/issues/540,https://api.github.com/repos/kubernetes/client-go/issues/540,"pod.Spec.Containers[0].Resources.Limits.Cpu() = resource.NewQuantity(500, """")","pod.Spec.Containers[0].Resources.Limits.Cpu() = resource.NewQuantity(500, """") 
go build 
./main.go:33:48: cannot assign to pod.Spec.Containers[0].Resources.Limits.Cpu()
why
",closed,False,2019-01-07 14:12:21,2019-01-08 05:24:41
client-go,shsjshentao,https://github.com/kubernetes/client-go/issues/541,https://api.github.com/repos/kubernetes/client-go/issues/541,typemeta is empty in all resource,"https://github.com/kubernetes/client-go/blob/e6b0ffda95bb53fab6259ebc653a0bbd3e826d9d/rest/request.go#L1107

It is not only CRD and list resource, all resource has this issue.
I have tried 9.0 and 10.0 version.

K8S response is ok and contains ""kind"" and ""apiVersion"".
And after decoder, these two parameters has lost.

for json type, i can json.unmarshal to deal with this problem like
`client.CoreV1().RESTClient().Get().Resource(""pods"").Name(""nginx-controller-zwdhq"").Namespace(""default"").DoRaw()`

However, I want to use protobuf by
`config.AcceptContentTypes = ""application/vnd.kubernetes.protobuf,application/json""`
Then no way to decode it properly.

Is it a bug and how to decode by protobuf with typemeta?",open,False,2019-01-08 09:45:17,2019-04-03 08:35:32
client-go,liukaii,https://github.com/kubernetes/client-go/issues/542,https://api.github.com/repos/kubernetes/client-go/issues/542,"forbidden: User ""system:anonymous"" cannot get resource ""pods"" in API group """" in the namespace ""default""","here is my config:
```
var kubeconfig *string
	kubeconfig = flag.String(""kubeconfig"", ""/app/config"", ""(optional) absolute path to the kubeconfig file"")
	flag.Parse()
	// uses the current context in kubeconfig
	config, err := clientcmd.BuildConfigFromFlags("""", *kubeconfig)
	if err != nil {
		fmt.Println(""buildconfigfromflag failed! err:"", err.Error())
		return PotRepository{}
	}
	config.TLSClientConfig = rest.TLSClientConfig{Insecure: true} 
	// creates the clientset
	clientset, err := kubernetes.NewForConfig(config)
	if err != nil {
		fmt.Println(""init kubernetes clientset failed! err:"", err.Error())
		return PotRepository{}
	}
```
then I `pod, err := repo.clientset.CoreV1().Pods(""default"").Get(potname, v1.GetOptions{})`
the error is 
`pods ""wordpressv3-wordpressv3-80"" is forbidden: User ""system:anonymous"" cannot get resource ""pods"" in API group """" in the namespace ""default""`
Could you tell me how to solve this?",closed,False,2019-01-08 15:19:15,2019-01-08 15:47:51
client-go,cmoulliard,https://github.com/kubernetes/client-go/issues/543,https://api.github.com/repos/kubernetes/client-go/issues/543,[question] Get all the resources linked to a resource using ownerreference or label,"# Use case

I wonder if there is a utility function that I could use to retrieve for a k8s resource all the associated/linked resources created such as by example : deployment, replicaset, service, route, .... using either the ownerReference or labels ?",open,False,2019-01-12 14:40:33,2019-02-06 11:05:15
client-go,sb10,https://github.com/kubernetes/client-go/issues/544,https://api.github.com/repos/kubernetes/client-go/issues/544,Dependency issue with Go Modules,"Using go 1.11.4 (had no problem with an earlier version), I'm trying to import `k8s.io/client-go@v7.0.0+incompatible`. First I had to get around the hash somehow changing by removing the entries from my `go.sum`. But I'm left with:

```
# k8s.io/client-go/util/workqueue
../../../../../go/pkg/mod/k8s.io/client-go@v7.0.0+incompatible/util/workqueue/delaying_queue.go:48:25: clock.Tick undefined (type clock.Clock has no field or method Tick)
# k8s.io/client-go/pkg/apis/clientauthentication/v1alpha1
../../../../../go/pkg/mod/k8s.io/client-go@v7.0.0+incompatible/pkg/apis/clientauthentication/v1alpha1/zz_generated.conversion.go:39:15: scheme.AddGeneratedConversionFuncs undefined (type *runtime.Scheme has no field or method AddGeneratedConversionFuncs)
``` 

What can I do now?",closed,False,2019-01-16 17:01:55,2019-01-17 09:52:08
client-go,MikeSpreitzer,https://github.com/kubernetes/client-go/issues/545,https://api.github.com/repos/kubernetes/client-go/issues/545,README does not mention authentication plugins,"The client-go README does not even mention the fact that authentication plugins exist.  It should be explained that they exist and how to get the desired ones plugged in.

You can see in #242 and #345 other developers who suffered from this lack of information.
",closed,False,2019-01-17 03:22:36,2019-01-29 13:15:49
client-go,liggitt,https://github.com/kubernetes/client-go/pull/546,https://api.github.com/repos/kubernetes/client-go/issues/546,Reference auth plugins in readme,"Mention the auth plugins as a noteworthy package.

xref #545 ",closed,True,2019-01-17 03:50:43,2019-01-17 14:02:29
client-go,rametta,https://github.com/kubernetes/client-go/issues/547,https://api.github.com/repos/kubernetes/client-go/issues/547,ConfigMap watching drops connection silently,"Hello,

I'm have an issue watching configMaps. After a while the connection will drop silently without any warning and the server will stop receiving updates through the ResultChan(). I've tried using TimeoutSeconds to keep the timeout to be much longer but it seems hacky to put a very large number there.

**Is there any way to catch a dropped connection so i can schedule a reconnect?**

Here is my code. Any insights will be helpful, thank you.

```go
watcher, err := client.CoreV1().ConfigMaps(namespace).Watch(metav1.ListOptions{
  FieldSelector: fields.Set{""metadata.name"": namespace + ""-"" + stage + ""-config""}.AsSelector().String(),
  Watch:         true,
})

if err != nil {
  log.Fatalln(err.Error())
}

for event := range watcher.ResultChan() {
  fmt.Println(""EVENT TYPE: "", event.Type)
  c := event.Object.(*v1.ConfigMap)
  configMap = c.Data
  fmt.Println(""Updated config map"")
}
```",closed,False,2019-01-21 21:50:10,2019-01-22 15:32:33
client-go,vvkkhjt,https://github.com/kubernetes/client-go/issues/548,https://api.github.com/repos/kubernetes/client-go/issues/548,how to get pods with deployment or statefulset?,how to get pods with deployment or statefulset?,open,False,2019-01-22 02:55:03,2019-02-02 03:53:30
client-go,vvkkhjt,https://github.com/kubernetes/client-go/issues/549,https://api.github.com/repos/kubernetes/client-go/issues/549,Cannot use 'clientSet.CoreV1().RESTClient()' (type rest.Interface) as type Getter Type does not implement 'Getter' as some methods are missing: Get() *restclient.Request,"I want to watch deployments add or delete
but I use cache.NewListWatchFromClient find something wrong
```go
watchlist := cache.NewListWatchFromClient(
		clientSet.CoreV1().RESTClient(),
		""deployments"",
		metav1.NamespaceAll,
		fields.Everything())
```
1,Cannot use 'clientSet.CoreV1().RESTClient()' (type rest.Interface) as type Getter Type does not implement 'Getter' as some methods are missing: Get() *restclient.Request
2,Cannot use 'fields.Everything()' (type ""aranya/vendor/k8s.io/apimachinery/pkg/fields"".Selector) as type ""k8s.io/apimachinery/pkg/fields"".Selector Type does not implement 'fields.Selector' as some methods are missing: DeepCopySelector() Selector,

please help me tks!",closed,False,2019-01-22 11:45:43,2019-01-23 02:20:33
client-go,vvkkhjt,https://github.com/kubernetes/client-go/issues/550,https://api.github.com/repos/kubernetes/client-go/issues/550,Unable to decode an event from the watch stream: stream error: stream ID 3; INTERNA L_ERROR,"```go
func startWatchDeployment(clientSet *kubernetes.Clientset){
	defer func() {
		err := recover()
		if err != nil {
			fmt.Println(err)
		}
	}()

	fmt.Println(""listenning deployment..."")
	count := 0
	deploymentsClient := clientSet.AppsV1beta1().Deployments(metav1.NamespaceAll)
	list,_ := deploymentsClient.List(metav1.ListOptions{})
	items := list.Items
	w, _ := deploymentsClient.Watch(metav1.ListOptions{})
	for {
		select {
			case e, _ := <-w.ResultChan():
				if e.Type == ""ADDED"" || e.Type == ""DELETED""{
					if count != len(items){
						count += 1
					}else{
						channel <- 1
					}
				}
		}
	}
}
```
```bash
E0123 12:17:23.014696   22876 streamwatcher.go:109] Unable to decode an event from the watch stream: stream error: stream ID 3; INTERNA
L_ERROR
```

why???please help me!! tks!",open,False,2019-01-23 04:22:03,2019-01-23 04:22:03
client-go,SimonTheLeg,https://github.com/kubernetes/client-go/issues/551,https://api.github.com/repos/kubernetes/client-go/issues/551,Building with go modules suddenly returns 'cannot find module providing package',"Hi there,

I've been using client-go in combination with go modules and got it to work last week. However suddenly it fails with the following message:

```
go: finding k8s.io/api/admissionregistration/v1alpha1 latest
go: finding k8s.io/api/admissionregistration latest
go: finding k8s.io/api latest
/Users/simonbein/.gvm/pkgsets/go1.11.2/global/pkg/mod/k8s.io/client-go@v10.0.0+incompatible/kubernetes/scheme/register.go:22:2: unknown import path ""k8s.io/api/admissionregistration
/v1alpha1"": cannot find module providing package k8s.io/api/admissionregistration/v1alpha1
```
Go modules seems to be correctly set-up in the project as I am able to resolve other dependencies (e.g. logrus) without any issues.

### Steps to reproduce

1. Create a project outside $GOPATH. 
2. run _go mod init [great-module-name]_
3. Write some code that imports packages from client-go, like so
```go
package main

import (
	""k8s.io/client-go/rest""
	""k8s.io/client-go/tools/clientcmd""
	""k8s.io/client-go/kubernetes""
	""path/filepath""
	""os""
	""fmt""
)

func main() {
	var config *rest.Config

	kubecfgpath := filepath.Join(os.Getenv(""HOME""), "".kube"", ""config"")
	config, err := clientcmd.BuildConfigFromFlags("""", kubecfgpath)

	clientset, err := kubernetes.NewForConfig(config)

	// Please handle errors differently in your code ;)
	if err != nil {
		panic(err)
	}

	fmt.Println(clientset)

}
```
4. run _go build_

### Additional Info

go.mod
```
module github.com/simontheleg/talks/k8s-client-package

require (
	github.com/gogo/protobuf v1.2.0 // indirect
	github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b // indirect
	github.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c // indirect
	github.com/google/gofuzz v0.0.0-20170612174753-24818f796faf // indirect
	github.com/googleapis/gnostic v0.2.0 // indirect
	github.com/gregjones/httpcache v0.0.0-20181110185634-c63ab54fda8f // indirect
	github.com/imdario/mergo v0.3.7 // indirect
	github.com/json-iterator/go v1.1.5 // indirect
	github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd // indirect
	github.com/modern-go/reflect2 v1.0.1 // indirect
	github.com/peterbourgon/diskv v2.0.1+incompatible // indirect
	github.com/sirupsen/logrus v1.3.0
	github.com/spf13/pflag v1.0.3 // indirect
	golang.org/x/net v0.0.0-20190125091013-d26f9f9a57f3 // indirect
	golang.org/x/oauth2 v0.0.0-20190115181402-5dab4167f31c // indirect
	golang.org/x/time v0.0.0-20181108054448-85acf8d2951c // indirect
	gopkg.in/inf.v0 v0.9.1 // indirect
	gopkg.in/yaml.v2 v2.2.2 // indirect
	k8s.io/api v0.0.0-20190126160303-ccdd560a045f // indirect
	k8s.io/apimachinery v0.0.0-20190126155707-0e6dcdd1b5ce // indirect
	k8s.io/client-go v10.0.0+incompatible
	k8s.io/klog v0.1.0 // indirect
	sigs.k8s.io/yaml v1.1.0 // indirect
)
```

go.sum
```
cloud.google.com/go v0.34.0/go.mod h1:aQUYkXzVsufM+DwF1aE+0xfcU+56JwCaLick0ClmMTw=
github.com/davecgh/go-spew v1.1.1/go.mod h1:J7Y8YcW2NihsgmVo/mv3lAwl/skON4iLHjSsI+c5H38=
github.com/gogo/protobuf v1.2.0 h1:xU6/SpYbvkNYiptHJYEDRseDLvYE7wSqhYYNy0QSUzI=
github.com/gogo/protobuf v1.2.0/go.mod h1:r8qH/GZQm5c6nD/R0oafs1akxWv10x8SbQlK7atdtwQ=
github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b h1:VKtxabqXZkF25pY9ekfRL6a582T4P37/31XEstQ5p58=
github.com/golang/glog v0.0.0-20160126235308-23def4e6c14b/go.mod h1:SBH7ygxi8pfUlaOkMMuAQtPIUF8ecWP5IEl/CR7VP2Q=
github.com/golang/protobuf v1.2.0 h1:P3YflyNX/ehuJFLhxviNdFxQPkGK5cDcApsge1SqnvM=
github.com/golang/protobuf v1.2.0/go.mod h1:6lQm79b+lXiMfvg/cZm0SGofjICqVBUtrP5yJMmIC1U=
github.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c h1:964Od4U6p2jUkFxvCydnIczKteheJEzHRToSGK3Bnlw=
github.com/google/btree v0.0.0-20180813153112-4030bb1f1f0c/go.mod h1:lNA+9X1NB3Zf8V7Ke586lFgjr2dZNuvo3lPJSGZ5JPQ=
github.com/google/gofuzz v0.0.0-20170612174753-24818f796faf h1:+RRA9JqSOZFfKrOeqr2z77+8R2RKyh8PG66dcu1V0ck=
github.com/google/gofuzz v0.0.0-20170612174753-24818f796faf/go.mod h1:HP5RmnzzSNb993RKQDq4+1A4ia9nllfqcQFTQJedwGI=
github.com/googleapis/gnostic v0.2.0 h1:l6N3VoaVzTncYYW+9yOz2LJJammFZGBO13sqgEhpy9g=
github.com/googleapis/gnostic v0.2.0/go.mod h1:sJBsCZ4ayReDTBIg8b9dl28c5xFWyhBTVRp3pOg5EKY=
github.com/gregjones/httpcache v0.0.0-20181110185634-c63ab54fda8f h1:ShTPMJQes6tubcjzGMODIVG5hlrCeImaBnZzKF2N8SM=
github.com/gregjones/httpcache v0.0.0-20181110185634-c63ab54fda8f/go.mod h1:FecbI9+v66THATjSRHfNgh1IVFe/9kFxbXtjV0ctIMA=
github.com/imdario/mergo v0.3.7 h1:Y+UAYTZ7gDEuOfhxKWy+dvb5dRQ6rJjFSdX2HZY1/gI=
github.com/imdario/mergo v0.3.7/go.mod h1:2EnlNZ0deacrJVfApfmtdGgDfMuh/nq6Ok1EcJh5FfA=
github.com/json-iterator/go v1.1.5 h1:gL2yXlmiIo4+t+y32d4WGwOjKGYcGOuyrg46vadswDE=
github.com/json-iterator/go v1.1.5/go.mod h1:+SdeFBvtyEkXs7REEP0seUULqWtbJapLOCVDaaPEHmU=
github.com/konsorten/go-windows-terminal-sequences v1.0.1/go.mod h1:T0+1ngSBFLxvqU3pZ+m/2kptfBszLMUkC4ZK/EgS/cQ=
github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd h1:TRLaZ9cD/w8PVh93nsPXa1VrQ6jlwL5oN8l14QlcNfg=
github.com/modern-go/concurrent v0.0.0-20180306012644-bacd9c7ef1dd/go.mod h1:6dJC0mAP4ikYIbvyc7fijjWJddQyLn8Ig3JB5CqoB9Q=
github.com/modern-go/reflect2 v1.0.1 h1:9f412s+6RmYXLWZSEzVVgPGK7C2PphHj5RJrvfx9AWI=
github.com/modern-go/reflect2 v1.0.1/go.mod h1:bx2lNnkwVCuqBIxFjflWJWanXIb3RllmbCylyMrvgv0=
github.com/peterbourgon/diskv v2.0.1+incompatible h1:UBdAOUP5p4RWqPBg048CAvpKN+vxiaj6gdUUzhl4XmI=
github.com/peterbourgon/diskv v2.0.1+incompatible/go.mod h1:uqqh8zWWbv1HBMNONnaR/tNboyR3/BZd58JJSHlUSCU=
github.com/pmezard/go-difflib v1.0.0/go.mod h1:iKH77koFhYxTK1pcRnkKkqfTogsbg7gZNVY4sRDYZ/4=
github.com/sirupsen/logrus v1.3.0 h1:hI/7Q+DtNZ2kINb6qt/lS+IyXnHQe9e90POfeewL/ME=
github.com/sirupsen/logrus v1.3.0/go.mod h1:LxeOpSwHxABJmUn/MG1IvRgCAasNZTLOkJPxbbu5VWo=
github.com/spf13/pflag v1.0.3 h1:zPAT6CGy6wXeQ7NtTnaTerfKOsV6V6F8agHXFiazDkg=
github.com/spf13/pflag v1.0.3/go.mod h1:DYY7MBk1bdzusC3SYhjObp+wFpr4gzcvqqNjLnInEg4=
github.com/stretchr/objx v0.1.1/go.mod h1:HFkY916IF+rwdDfMAkV7OtwuqBVzrE8GR6GFx+wExME=
github.com/stretchr/testify v1.2.2/go.mod h1:a8OnRcib4nhh0OaRAV+Yts87kKdq0PP7pXfy6kDkUVs=
golang.org/x/crypto v0.0.0-20180904163835-0709b304e793 h1:u+LnwYTOOW7Ukr/fppxEb1Nwz0AtPflrblfvUudpo+I=
golang.org/x/crypto v0.0.0-20180904163835-0709b304e793/go.mod h1:6SG95UA2DQfeDnfUPMdvaQW0Q7yPrPDi9nlGo2tz2b4=
golang.org/x/net v0.0.0-20180724234803-3673e40ba225/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
golang.org/x/net v0.0.0-20190108225652-1e06a53dbb7e/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
golang.org/x/net v0.0.0-20190125091013-d26f9f9a57f3 h1:ulvT7fqt0yHWzpJwI57MezWnYDVpCAYBVuYst/L+fAY=
golang.org/x/net v0.0.0-20190125091013-d26f9f9a57f3/go.mod h1:mL1N/T3taQHkDXs73rZJwtUhF3w3ftmwwsq0BUmARs4=
golang.org/x/oauth2 v0.0.0-20190115181402-5dab4167f31c h1:pcBdqVcrlT+A3i+tWsOROFONQyey9tisIQHI4xqVGLg=
golang.org/x/oauth2 v0.0.0-20190115181402-5dab4167f31c/go.mod h1:gOpvHmFTYa4IltrdGE7lF6nIHvwfUNPOp7c8zoXwtLw=
golang.org/x/sync v0.0.0-20181221193216-37e7f081c4d4/go.mod h1:RxMgew5VJxzue5/jJTE5uejpjVlOe/izrB70Jof72aM=
golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33 h1:I6FyU15t786LL7oL/hn43zqTuEGr4PN7F4XJ1p4E3Y8=
golang.org/x/sys v0.0.0-20180905080454-ebe1bf3edb33/go.mod h1:STP8DvDyc/dI5b8T5hshtkjS+E42TnysNCUPdjciGhY=
golang.org/x/text v0.3.0 h1:g61tztE5qeGQ89tm6NTjjM9VPIm088od1l6aSorWRWg=
golang.org/x/text v0.3.0/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
golang.org/x/time v0.0.0-20181108054448-85acf8d2951c h1:fqgJT0MGcGpPgpWU7VRdRjuArfcOvC4AoJmILihzhDg=
golang.org/x/time v0.0.0-20181108054448-85acf8d2951c/go.mod h1:tRJNPiyCQ0inRvYxbN9jk5I+vvW/OXSQhTDSoE431IQ=
google.golang.org/appengine v1.4.0/go.mod h1:xpcJRLb0r/rnEns0DIKYYv+WjYCduHsrkT7/EB5XEv4=
gopkg.in/check.v1 v0.0.0-20161208181325-20d25e280405/go.mod h1:Co6ibVJAznAaIkqp8huTwlJQCZ016jof/cbN4VW5Yz0=
gopkg.in/inf.v0 v0.9.1 h1:73M5CoZyi3ZLMOyDlQh031Cx6N9NDJ2Vvfl76EDAgDc=
gopkg.in/inf.v0 v0.9.1/go.mod h1:cWUDdTG/fYaXco+Dcufb5Vnc6Gp2YChqWtbxRZE0mXw=
gopkg.in/yaml.v2 v2.2.2 h1:ZCJp+EgiOT7lHqUV2J862kp8Qj64Jo6az82+3Td9dZw=
gopkg.in/yaml.v2 v2.2.2/go.mod h1:hI93XBmqTisBFMUTm0b8Fm+jr3Dg1NNxqwp+5A1VGuI=
k8s.io/api v0.0.0-20190126160303-ccdd560a045f h1:CgbcfvEnFr7J/BeUgOeg2c1FCdhMfv3MZkPGu/3e7GI=
k8s.io/api v0.0.0-20190126160303-ccdd560a045f/go.mod h1:iuAfoD4hCxJ8Onx9kaTIt30j7jUFS00AXQi6QMi99vA=
k8s.io/apimachinery v0.0.0-20190126155707-0e6dcdd1b5ce h1:CzCioXa348Dzt9UuYrvxRrLGpL1ZV50QpyBHt01SYj4=
k8s.io/apimachinery v0.0.0-20190126155707-0e6dcdd1b5ce/go.mod h1:ccL7Eh7zubPUSh9A3USN90/OzHNSVN6zxzde07TDCL0=
k8s.io/client-go v8.0.0+incompatible h1:tTI4hRmb1DRMl4fG6Vclfdi6nTM82oIrTT7HfitmxC4=
k8s.io/client-go v8.0.0+incompatible/go.mod h1:7vJpHMYJwNQCWgzmNV+VYUl1zCObLyodBc8nIyt8L5s=
k8s.io/client-go v9.0.0+incompatible h1:2kqW3X2xQ9SbFvWZjGEHBLlWc1LG9JIJNXWkuqwdZ3A=
k8s.io/client-go v9.0.0+incompatible/go.mod h1:7vJpHMYJwNQCWgzmNV+VYUl1zCObLyodBc8nIyt8L5s=
k8s.io/client-go v10.0.0+incompatible h1:F1IqCqw7oMBzDkqlcBymRq1450wD0eNqLE9jzUrIi34=
k8s.io/client-go v10.0.0+incompatible/go.mod h1:7vJpHMYJwNQCWgzmNV+VYUl1zCObLyodBc8nIyt8L5s=
k8s.io/klog v0.1.0 h1:I5HMfc/DtuVaGR1KPwUrTc476K8NCqNBldC7H4dYEzk=
k8s.io/klog v0.1.0/go.mod h1:Gq+BEi5rUBO/HRz0bTSXDUcqjScdoY3a9IHpCEIOOfk=
sigs.k8s.io/yaml v1.1.0 h1:4A07+ZFc2wgJwo8YNlQpr1rVlgUDlxXHhPJciaPY5gs=
sigs.k8s.io/yaml v1.1.0/go.mod h1:UJmg0vDUVViEyp3mgSv9WPwZCDxu4rQW1olrI1uml+o=
```",closed,False,2019-01-27 13:37:46,2019-03-22 13:51:24
client-go,jkondapalli03,https://github.com/kubernetes/client-go/issues/552,https://api.github.com/repos/kubernetes/client-go/issues/552,Unable to go get k8s.io/client-go/kubernetes/typed/core/v1beta1,"I'm trying to use statefulsets interfaces. I tried go get & dep ensure to get v1beta1 pkg into my environment. Nothing works...
- go get k8s.io/client-go/kubernetes/typed/core/v1beta1 fails with the following error
`└─ $ ▶ go get k8s.io/client-go/kubernetes/typed/core/v1beta1
package k8s.io/client-go/kubernetes/typed/core/v1beta1: cannot find package ""k8s.io/client-go/kubernetes/typed/core/v1beta1"" in any of:
        /usr/local/go/src/k8s.io/client-go/kubernetes/typed/core/v1beta1 (from $GOROOT)
        /home/*****/.go/src/k8s.io/client-go/kubernetes/typed/core/v1beta1 (from `$GOPATH)`

- `go get k8s.io/client-g`o or `go get k8s.io/client-go/... ` silently fails
- `dep ensure -v` fails with following error:
`ensure Solve(): No versions of k8s.io/client-go met constraints:
        v10.0.0: Could not introduce k8s.io/client-go@v10.0.0, as its subpackage k8s.io/client-go/kubernetes/typed/core/v1beta1 is missing. (Package is required by (root).)
        v9.0.0: Could not introduce k8s.io/client-go@v9.0.0, as it is not allowed by constraint ^10.0.0 from project github.com/my-org/my-project.`
",closed,False,2019-01-28 15:00:33,2019-01-29 04:33:34
client-go,louiscryan,https://github.com/kubernetes/client-go/issues/553,https://api.github.com/repos/kubernetes/client-go/issues/553,jsonpath does not handle periods in arraydict refs,"Consider the following JSON
`
{
  outer : {
    ""some.key"" : ""someval""
  }
}
`


A path expression of the form ...
{.outer.some\.key} 
... will produce a match but ...
{.outer['some.key']}
... will not, instead the path is treated as the equivalent of ...
{.outer.some.key}

P.S - This utility is super useful! Thanks
",open,False,2019-01-30 04:09:50,2019-01-30 04:10:28
client-go,rberrelleza,https://github.com/kubernetes/client-go/issues/554,https://api.github.com/repos/kubernetes/client-go/issues/554,How to cancel a SPDYExecutor stream?,"I'm executing a long-running command on a pod with the following code:

```
exec, err := remotecommand.NewSPDYExecutor(config, method, url)
	if err != nil {
		return err
	}

	return exec.Stream(remotecommand.StreamOptions{
		Stdin:             stdin,
		Stdout:            stdout,
		Stderr:            stderr,
		Tty:               tty,
		TerminalSizeQueue: terminalSizeQueue,
	})
```

In this implementation, `exec.Stream` won't return until the command finishes. 

How can I cancel the call to `Executor.Stream`? (e.g. to react to a cancellation context, or to initiate a shutdown sequence). I searched in the docs and the code base but couldn't figure out a way to pass a context, a cancel function or something similar.",open,False,2019-01-31 10:15:09,2019-01-31 10:47:49
client-go,gautammoulik,https://github.com/kubernetes/client-go/issues/555,https://api.github.com/repos/kubernetes/client-go/issues/555,"Need information related to ""the server could not find the requested resource"" error.","Hello all,
Firstly thanks a lot for the wonderful documentation and the sample crud code.  I have mixed experience running this code.
On Windows 10: ( Kubectl version : client : 1.13.0, server : 1.8.7 )
the code is running all good.

On Ubuntu 16.04 VM ( Kubectl version : client : 1.10.8, server 1.8.7)
 the same code fails with error ""the server could not find the requested resource"". 
_list, err := deploymentsClient.List(metav1.ListOptions{})_ [ code was failing here ]

While searching about this issue, I found this post useful ( https://github.com/kubernetes/client-go/issues/178 ) and as mentioned I have modified my code as 
_deployments, err := clientset.ExtensionsV1beta1().Deployments("""").List(metav1.ListOptions{})_ 

After changing the code, now the code runs fine on my ubuntu. 

I am new in Go language & Kubernetes and hence wanted to know a few things ... 
a) how to debug such issues to find out the root cause ? the error message was not good enough to indicate what the real issue was (""the server could not find the requested resource"". ), is there a way we can take a log of server and can I enable logging while running my code ?
b) Does that mean [ _list, err := deploymentsClient.List(metav1.ListOptions{})_ ] is depends on the Kubectl client and server version ? 
c) I didn't try this piece of code [ _deployments, err := clientset.ExtensionsV1beta1().Deployments("""").List(metav1.ListOptions{})_  ] on windows yet, however it will be good to know if this code works absolutely fine in all the environments. 
d ) how to determine which version of these code to choose for my K8 environment ? is it simply error and trial model ?

Note: I was just running the listing existing deployments part from the sample code.
Thanks,
Gautam



















",open,False,2019-02-02 01:59:53,2019-02-02 03:52:24
client-go,narasago,https://github.com/kubernetes/client-go/issues/556,https://api.github.com/repos/kubernetes/client-go/issues/556,Unable to resolve k8s.io/api/admissionregistration/v1alpha1,"Hi,

I am using k8s.io/client-go which internally uses k8s.io/api which has dependency resolution problem.

Go version : go version go1.11.4 linux/amd64
Version details of the apis:
k8s.io/api v0.0.0-20190205051315-663a691defed
k8s.io/client-go v10.0.0+incompatible

The packages of k8s.io/api are latest, but when ""env GO111MODULE=on go mod vendor"" is executed, the dependencies present in k8s.io/client-go are not getting updated.

Error that is seen while building:
vendor/k8s.io/client-go/kubernetes/scheme/register.go:22:2: cannot find package ""."" in:
        /root/asn/go/src/gerrit.ext.net.nokia.com/AANM/service/egress/vendor/k8s.io/api/admissionregistration/v1alpha1

Any help in troubleshooting this issue would be welcomed.
",closed,False,2019-02-05 17:13:08,2019-02-26 17:08:49
client-go,gbrener,https://github.com/kubernetes/client-go/issues/557,https://api.github.com/repos/kubernetes/client-go/issues/557,Documentation enh request,"Hello, this is a very minor documentation enhancement request, which could have helped me immensely while trying out the in-cluster example.

In https://github.com/kubernetes/client-go/tree/master/examples/in-cluster-client-configuration , there is a paragraph:

> If you are not using Minikube, you should build this image and push it to a registry that your Kubernetes cluster can pull from. If you have RBAC enabled, use the following snippet to create role binding which will grant the default service account view permissions.
> ```
> kubectl create clusterrolebinding default-view --clusterrole=view --serviceaccount=default:default
> ```

When read in the context of the rest of the document, this step appears to be unnecessary if you are using Minikube, when in fact it is necessary with the latest version of Minikube: when this is not done, the `kubectl run` command hangs with no output.

Could we please delimit or reword this paragraph so that it is clearer that the `kubectl create` command is necessary regardless of whether someone is using Minikube? A newline would probably be sufficient.",closed,False,2019-02-05 20:45:59,2019-02-06 19:32:06
client-go,gbrener,https://github.com/kubernetes/client-go/pull/558,https://api.github.com/repos/kubernetes/client-go/issues/558,Update in-cluster-client-configuration/README.md,"Split paragraph to address https://github.com/kubernetes/client-go/issues/557 .

This is to a repository README file, so should not be subject to https://github.com/kubernetes/community/tree/master/contributors/guide .",closed,True,2019-02-06 19:21:13,2019-02-06 19:23:26
client-go,fridex,https://github.com/kubernetes/client-go/pull/559,https://api.github.com/repos/kubernetes/client-go/issues/559,File controllers.md has moved,,closed,True,2019-02-12 11:51:42,2019-02-12 12:22:15
client-go,fridex,https://github.com/kubernetes/client-go/pull/560,https://api.github.com/repos/kubernetes/client-go/issues/560,File controllers.md has moved,"Sorry, we do not accept changes directly against this repository, unless the
change is to the `README.md` itself. Please see 
`CONTRIBUTING.md` for information on where and how to contribute instead.
",closed,True,2019-02-12 12:10:49,2019-02-12 12:22:07
client-go,fridex,https://github.com/kubernetes/client-go/pull/561,https://api.github.com/repos/kubernetes/client-go/issues/561,File controllers.md has moved,,closed,True,2019-02-12 12:21:33,2019-02-12 20:15:36
client-go,eivantsov,https://github.com/kubernetes/client-go/issues/562,https://api.github.com/repos/kubernetes/client-go/issues/562,Get public IP/DNS from within the pod,"Is there a way to get such info? I need public IP/DNS to be used when creating an identity provider with Keycloak (openshift-v3)

Is there a way for kube client to get this public endpoint?",open,False,2019-02-14 06:46:24,2019-02-14 06:46:24
client-go,vvkkhjt,https://github.com/kubernetes/client-go/issues/563,https://api.github.com/repos/kubernetes/client-go/issues/563,Unable to decode an event from the watch stream: stream error: stream ID 3; INTERNAL_ERROR,"Here is my question:https://stackoverflow.com/questions/54760830/unable-to-decode-an-event-from-the-watch-stream-stream-error-stream-id-3-inte

Please help me.Thanks",open,False,2019-02-19 07:33:19,2019-02-19 07:33:19
client-go,pboiseau,https://github.com/kubernetes/client-go/issues/564,https://api.github.com/repos/kubernetes/client-go/issues/564,Same ClientSet and multiple concurrent requests,"Hello,

I have some performance issue when using the same kubernetes `Clientset` for multiple concurrent requests.

Is it required to create a new Clientset for every request we want to make on the kubernetes API ? 

### Case 1

Same kubernetes client for multiple requests

```go
config, err := clientcmd.BuildConfigFromFlags("""", k8s.KubeConfigDefaultPath())
if err != nil {
	panic(err)
}

clientSet, err := kubernetes.NewForConfig(config)
if err != nil {
	panic(err)
}

h.engine.GET(""/test"", func(context *gin.Context) {
	n, _ := clientSet.CoreV1().Namespaces().Get(""pbo"", metav1.GetOptions{})

	context.JSON(http.StatusOK, n)
})
```
performance result

```sh
[GIN-debug] Listening and serving HTTP on :8080
[GIN] 2019/02/22 - 16:10:02 | 200 |   58.440892ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:02 | 200 |   58.881891ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:02 | 200 |   59.497636ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:02 | 200 |    59.56138ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:02 | 200 |   59.518548ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:02 | 200 |    60.31543ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:02 | 200 |   60.800629ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:02 | 200 |   61.954711ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:02 | 200 |   63.625243ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:02 | 200 |   67.860491ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:02 | 200 |  206.455916ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:03 | 200 |  408.115984ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:03 | 200 |  607.690261ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:03 | 200 |  807.993448ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:03 | 200 |  1.007878327s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:03 | 200 |  1.208085531s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:04 | 200 |   1.40728416s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:04 | 200 |  1.608727369s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:04 | 200 |  1.807163054s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:04 | 200 |  2.020470871s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:04 | 200 |   2.21428725s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:05 | 200 |  2.407558019s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:05 | 200 |  2.607879629s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:05 | 200 |  2.808593723s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:05 | 200 |  3.047961266s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:05 | 200 |  3.207485163s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:06 | 200 |  3.407720794s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:06 | 200 |  3.606962978s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:06 | 200 |  3.806729891s |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:10:06 | 200 |  4.008047368s |       127.0.0.1 | GET      /test
```

***As you can see, response time is increasing a lot***

### Case 2

Multiple kubernetes client for multiple requests

```go
config, err := clientcmd.BuildConfigFromFlags("""", k8s.KubeConfigDefaultPath())
if err != nil {
	panic(err)
}

h.engine.GET(""/test"", func(context *gin.Context) {
	clientSet, err := kubernetes.NewForConfig(config)
	if err != nil {
		panic(err)
	}

	n, _ := clientSet.CoreV1().Namespaces().Get(""pbo"", metav1.GetOptions{})

	context.JSON(http.StatusOK, n)
})
```

performance results

```sh
[GIN-debug] Listening and serving HTTP on :8080
[GIN] 2019/02/22 - 16:15:08 | 200 |   72.396467ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   70.278917ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   70.280447ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   70.540351ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   74.080429ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   64.624353ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   64.625551ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   65.463379ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   64.596104ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   63.223988ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   64.173776ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   71.004154ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   60.494451ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |    64.89178ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   58.537382ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   60.858438ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   65.097315ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   65.678975ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   77.676868ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   75.129987ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   66.895068ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   57.573911ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   62.804671ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   63.060401ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   60.212228ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |    63.97812ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |    62.08053ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   64.246716ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   67.220965ms |       127.0.0.1 | GET      /test
[GIN] 2019/02/22 - 16:15:08 | 200 |   70.261863ms |       127.0.0.1 | GET      /test
```

### Packages versions

```toml
[[constraint]]
  branch = ""release-1.10""
  name = ""k8s.io/api""

[[constraint]]
  branch = ""release-1.10""
  name = ""k8s.io/apimachinery""

[[constraint]]
  name = ""k8s.io/client-go""
  version = ""7.0.0""
```

Thanks",closed,False,2019-02-22 15:23:19,2019-02-22 15:27:22
client-go,protheusfr,https://github.com/kubernetes/client-go/issues/565,https://api.github.com/repos/kubernetes/client-go/issues/565,How to get current node name / hostname from pod,"Hello,

I'm looking from a way from client-go to get current node name or node hostname when the code is running in a pod in the cluster (via a `rest.InClusterConfig()`).
Is it possible ?
",open,False,2019-02-26 09:48:28,2019-02-26 09:48:28
client-go,omerlh,https://github.com/kubernetes/client-go/issues/566,https://api.github.com/repos/kubernetes/client-go/issues/566,"Azure authentication - request tokens without ""aud"": ""spn:xxx"" prefix","Today, go client is using Azure legacy endpoint (v1.0) that produce tokens with ""aud"": ""spn:xxx"" prefix. For this reason, Kubernetes clusters on Azure (AKS/AKS-engine) are deployed with `oidc-client-id` with ""spn:xxx"" prefix. 
This is a problem because it's very hard to request a token from Azure Active Directory in any language besides Go. There is almost no support to the legacy token format `spn`. See this issue for example - AzureAD/azure-activedirectory-library-for-dotnet#1493. Especially the last [comment](https://github.com/AzureAD/azure-activedirectory-library-for-dotnet/issues/1493#issuecomment-467674113) by @lodejard. Look like we need to make the API version option [here](https://github.com/kubernetes/kubernetes/blob/092f3988255801ce7a97de5448384c50c400a3a4/vendor/github.com/Azure/go-autorest/autorest/adal/config.go#L44).

My question is - why it is like that? Is there a reason? I really hope to see this solved, as for now, we cannot authenticate users to the dashboard, for example. See Azure/aks-engine#376",open,False,2019-02-27 14:02:53,2019-02-27 14:02:53
client-go,jney,https://github.com/kubernetes/client-go/issues/567,https://api.github.com/repos/kubernetes/client-go/issues/567,watch logs,"Hi there, I'd like to watch Job logs, and stream them through a pubsub mechanism.
I'm not sure I should accomplish it through `client.Batch().Jobs(cfg.KubeNamespace).Watch(options)` or using informers. 
Any advices are welcome,  or even better, examples.

By the way, I'm not sure this is the right place to post such question, feel free to delete it, if it shouldn't be there",open,False,2019-02-27 16:36:29,2019-03-28 03:27:30
client-go,anguslees,https://github.com/kubernetes/client-go/issues/568,https://api.github.com/repos/kubernetes/client-go/issues/568,pkg/version is useless,"As far as I can work out, k8s.io/client-go/pkg/version is useless in its current form.

It relies on either `-X` flags set at link time, which is highly likely to result in a mismatch between the reported version and actual client-go source version, _or_ it relies on a $Format$ string getting expanded by `git archive`.  As far as I know, none of the tools that are used to consume a go library (eg: glide, godep, go modules) use git in a way that will cause this `$Format$` string to be expanded.

Sad face.",open,False,2019-02-28 00:21:04,2019-02-28 00:54:23
client-go,eriksw,https://github.com/kubernetes/client-go/issues/569,https://api.github.com/repos/kubernetes/client-go/issues/569,Provide instructions in INSTALL.md for go modules users,"INSTALL.md should include working instructions for how to use this library when using go modules.

I have been unable to accomplish this. To reproduce, save the following as `Dockerfile` in an empty directory then `docker build .`:

    FROM golang:1.12

    WORKDIR /src

    RUN go mod init example

    RUN go get \
    k8s.io/client-go@kubernetes-1.13.4 \
    k8s.io/apimachinery@kubernetes-1.13.4

    RUN wget -q https://raw.githubusercontent.com/kubernetes/client-go/master/examples/in-cluster-client-configuration/main.go

    RUN go mod tidy

    RUN go build main.go

Output of the step that fails:

    ...
    Step 7/7 : RUN go build main.go
     ---> Running in 5014f5103213
    go: finding k8s.io/api/admissionregistration/v1alpha1 latest
    go: finding k8s.io/api/admissionregistration latest
    go: finding k8s.io/api latest
    build command-line-arguments: cannot load k8s.io/api/admissionregistration/v1alpha1: cannot find module providing package k8s.io/api/admissionregistration/v1alpha1
    The command '/bin/sh -c go build main.go' returned a non-zero code: 1

Please update `INSTALL.md` with what the `go get ...` should be for this to work.
",closed,False,2019-03-01 01:34:59,2019-04-01 09:24:35
client-go,eivantsov,https://github.com/kubernetes/client-go/issues/570,https://api.github.com/repos/kubernetes/client-go/issues/570,Perform rolling update,Is there an example of initiating a rolling update using go client? Thanks,open,False,2019-03-01 04:23:36,2019-03-01 04:23:36
client-go,cy-zheng,https://github.com/kubernetes/client-go/issues/571,https://api.github.com/repos/kubernetes/client-go/issues/571,Informer could loss some event,"I found out that informer could loss some short event. For example, when I run a k8s job with a simple command ""ls -l"", informer receive event list such as PodPending, PodPending, PodPending, PodSucceed. The PodRunning state is lost. 

Is that a bug? Or the informer doesn't guarantee that every event will be received correctly?",open,False,2019-03-01 08:45:24,2019-03-28 03:22:51
client-go,lblackstone,https://github.com/kubernetes/client-go/issues/572,https://api.github.com/repos/kubernetes/client-go/issues/572,Get method for dynamic client expects a name but doesn't validate,"The [Get method](https://github.com/kubernetes/client-go/blob/9c9f7f424e65af6ded246bd4ba1a1cec988acc7b/dynamic/simple.go#L218-L232) expects a nonempty `name` to be provided, but does not validate this. If an empty name is provided, this method will panic because it expects an `*unstructured.Unstructured`, but the response will actually be an `*unstructured.UnstructuredList`.
https://github.com/kubernetes/client-go/blob/9c9f7f424e65af6ded246bd4ba1a1cec988acc7b/dynamic/simple.go#L231

Since a name is required, a check should be added that returns an error if it is empty.",closed,False,2019-03-06 22:05:39,2019-03-06 23:38:33
client-go,joelsmith,https://github.com/kubernetes/client-go/pull/573,https://api.github.com/repos/kubernetes/client-go/issues/573,Update embargo doc link in SECURITY_CONTACTS and change PST to PSC,See https://github.com/kubernetes/security/issues/8 for more information,closed,True,2019-03-08 18:40:59,2019-03-09 01:23:46
client-go,f4tq,https://github.com/kubernetes/client-go/issues/574,https://api.github.com/repos/kubernetes/client-go/issues/574,jsonpb & json co-existance,"Hi,

We have a bunch of types (Istio 1.0x) whose implementations return `jsonpb` encoded results as `json`: NOT straight `json` go encoding: enums as strings etc.
 
Obviously, such translations fail harshly with json-iterator when proto3 go structs are unmarshalled when the cross into jsonpb assumptions.

Is there a straightforward way (actually any approach)  to register a type deserializer so as to invoke `jsonpb` `Unmarshal` functions were I to generate them for all istio types with `protoc` and register them with client-go? 

In general, is there a way to register a type's json de-serializer (interpretor) ? 

I don't see a way to insert such a de-serializer into the client (NewRESTClient)  without `createSerializers` (private) stomping on any such notions.

kubernetes, as expected, returns `application/json` for istio types so content-type negotiation seems out of the question.   There must be an approach I'm missing....

> FWIW, here is the [proto3 jsonpb encoding 'standard'](https://developers.google.com/protocol-buffers/docs/proto3#json)

I don't mind managing the type <-> [de]serializer relationship either.

Please shed some light on what I'm missing ( a way to register and/or insert some json interpretation)?
Many thanks,
-Chris",open,False,2019-03-09 07:18:59,2019-03-12 23:17:54
client-go,herrdu,https://github.com/kubernetes/client-go/issues/575,https://api.github.com/repos/kubernetes/client-go/issues/575,about leader release and tryAcquireOrRenew ,"when My service leader release itself
```
func (le *LeaderElector) release() bool {
	if !le.IsLeader() {
		return true
	}
	leaderElectionRecord := rl.LeaderElectionRecord{
		LeaderTransitions: le.observedRecord.LeaderTransitions,
	}
	if err := le.config.Lock.Update(leaderElectionRecord); err != nil {
		klog.Errorf(""Failed to release lock: %v"", err)
		return false
	}
	le.observedRecord = leaderElectionRecord
	le.observedTime = le.clock.Now()
	return true
}
```
I found in the  tryAcquireOrRenew , non-leader still wait for  LeaseDuration  for acquire the leader 
```
	if le.observedTime.Add(le.config.LeaseDuration).After(now.Time) &&
		!le.IsLeader() {
		klog.V(4).Infof(""lock is held by %v and has not yet expired"", oldLeaderElectionRecord.HolderIdentity)
		return false
	}

```

Should non-leader service acquire the leader immediately? Like below:
```
	if le.observedTime.Add(le.config.LeaseDuration).After(now.Time) &&
		!le.IsLeader()  && oldLeaderElectionRecord.HolderIdentity != """" {
		klog.V(4).Infof(""lock is held by %v and has not yet expired"", oldLeaderElectionRecord.HolderIdentity)
		return false
	}
```

 
",open,False,2019-03-18 10:04:27,2019-03-18 10:04:27
client-go,vvkkhjt,https://github.com/kubernetes/client-go/issues/576,https://api.github.com/repos/kubernetes/client-go/issues/576,I cant get Apiversion and Kind from deployment.create return *v1beta2.Deployment,"![11](https://user-images.githubusercontent.com/12765476/54660485-9e11ba80-4b11-11e9-9de1-233c8910023a.png)
",open,False,2019-03-20 05:12:22,2019-03-20 05:12:22
client-go,muratsplat,https://github.com/kubernetes/client-go/issues/577,https://api.github.com/repos/kubernetes/client-go/issues/577,"Question: ""kubectl delete pods,services -l name=myLabel"" ","Hello Guys

As you know We can delete two and more resource on an kubernetes cluster follow `kubectl` cli command on terminal. I want to do same thing using `client-go`. 

How can I delete two and  more resource( pods,services,config,etc..) by client-go library at same time.? Can you give an example about deleting  different resource using label selector ? 

",closed,False,2019-03-20 15:29:45,2019-03-20 16:09:43
client-go,yyq2013,https://github.com/kubernetes/client-go/issues/578,https://api.github.com/repos/kubernetes/client-go/issues/578,v1.PodList missing in out side cluster example,"I just run the example out-of-cluster-client-configuration in local, after resolved the dependencies, it still can't compile at this line:
`fmt.Printf(""There are %d pods in the cluster\n"", len(pods.Items))`

""pods.Items"" reports error, because can't find  'v1.PodList' 

Then How can I resolve it?

client-go version  v10.0.0


Thanks in advance.
",closed,False,2019-03-22 07:14:06,2019-03-23 01:47:45
client-go,apollocse,https://github.com/kubernetes/client-go/issues/579,https://api.github.com/repos/kubernetes/client-go/issues/579,List deployments on label selectors with fake client not working for AppsV1().Deployments,"With Fake client, when try to list deployments on label selector with AppsV1().Deployments() is not working.
Similar call with ExtensionsV1beta1().Deployments() works perfectly fine.
Eg.
Working :- 
fake.NewSimpleClientset().ExtensionsV1beta1().Deployments(<namespace>).List(metav1.ListOptions{
		LabelSelector: ""<some=label>"",
	})

Not working :-
fake.NewSimpleClientset().AppsV1().Deployments(<namespace>).List(metav1.ListOptions{
		LabelSelector: ""<some=label>"",
	})",open,False,2019-03-26 04:42:36,2019-03-26 21:34:08
client-go,gpanagiotidis,https://github.com/kubernetes/client-go/issues/580,https://api.github.com/repos/kubernetes/client-go/issues/580,Watching and getting resources from multiple namespaces,"How to get resoures from multiple namespaces? I do not want to use """" for all namespaces, I want to define my own namespaces I want to get resources from.",open,False,2019-03-26 08:57:17,2019-04-05 12:32:49
client-go,nikhita,https://github.com/kubernetes/client-go/issues/581,https://api.github.com/repos/kubernetes/client-go/issues/581,Release v11.0.0,"Tracking issue for the v11.0.0 release. This release corresponds to Kubernetes release 1.14. 

TODO:

- [ ] Create the release notes spreadsheet.
- [ ] Update CHANGELOG and README.
- [x] Run smoke tests.
- [x] Manually verify that all commits in the tag are correct and `git checkout v11.0.0 && godep restore && go build ./...` runs successfully.
- [x] Create the tag/release. 
- [ ] Link the changelog on the releases page.
- [x]  Fix the tag title using GitHub UI


/assign
/cc @sttts ",open,False,2019-03-29 10:28:31,2019-04-03 07:48:13
client-go,sttts,https://github.com/kubernetes/client-go/pull/582,https://api.github.com/repos/kubernetes/client-go/issues/582,Update .travis.yml for go.mod,,closed,True,2019-04-04 08:49:15,2019-04-04 09:14:32
client-go,nikhita,https://github.com/kubernetes/client-go/pull/583,https://api.github.com/repos/kubernetes/client-go/issues/583,Update README to reflect v11.0.0 release,"We should reflect the latest release in the README and deprecate v8.0. 

Also, remove info about using godep from the README.",closed,True,2019-04-04 09:35:46,2019-04-04 09:38:52
