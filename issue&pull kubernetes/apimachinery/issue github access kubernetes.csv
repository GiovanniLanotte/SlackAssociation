name repository,creator user,url_html issue,url_api issue,title,body,state,pull request,data open,updated at
apimachinery,deads2k,https://github.com/kubernetes/apimachinery/pull/1,https://api.github.com/repos/kubernetes/apimachinery/issues/1,add sync script,First attempt at a script to automatically sync this repo.  Will test it once I get a practice commit from https://github.com/kubernetes/kubernetes/pull/39747,closed,True,2017-01-11 19:26:01,2017-01-11 20:50:15
apimachinery,deads2k,https://github.com/kubernetes/apimachinery/pull/2,https://api.github.com/repos/kubernetes/apimachinery/issues/2,"Kube sync scripts, plus the output they produce","Here's an attempt at a basic kube sync script and the output it produces.  Alternatives welcome, but I'd rather not linger too long on it.

@sttts @lavalamp @smarterclayton ",closed,True,2017-01-11 20:49:02,2017-01-11 21:51:36
apimachinery,deads2k,https://github.com/kubernetes/apimachinery/pull/3,https://api.github.com/repos/kubernetes/apimachinery/issues/3,Update the sync script,"I got an error when the script attempted to cherry-pick a merge commit. I'm not sure if I need to or not.

@sttts @smarterclayton ",closed,True,2017-01-12 13:44:38,2017-01-13 21:24:34
apimachinery,fate-grand-order,https://github.com/kubernetes/apimachinery/pull/4,https://api.github.com/repos/kubernetes/apimachinery/issues/4,handle err in  converter_test.go,,closed,True,2017-01-17 06:31:37,2017-02-15 02:41:54
apimachinery,mqliang,https://github.com/kubernetes/apimachinery/issues/5,https://api.github.com/repos/kubernetes/apimachinery/issues/5,openAPI import issue,,closed,False,2017-02-15 05:45:48,2017-02-15 05:47:08
apimachinery,r2d4,https://github.com/kubernetes/apimachinery/issues/6,https://api.github.com/repos/kubernetes/apimachinery/issues/6,Tag corresponding kubernetes releases,"I understand the `sync-from-kubernetes.sh` can match up your client library to the kubernetes version, but for vendor tools like godeps, this tracks the commit checksum, so its not reproducible when rewriting the history.  

I'm not sure how most users are using this library, but it would be great to be able to checkout k8s tags directly here instead of using the sync script.",closed,False,2017-02-15 19:12:49,2017-06-28 21:47:41
apimachinery,emosbaugh,https://github.com/kubernetes/apimachinery/pull/7,https://api.github.com/repos/kubernetes/apimachinery/issues/7,YAMLDecoder.Read returns incorrect number of read bytes when doc fits within buffer,,closed,True,2017-02-28 01:47:16,2017-09-25 18:40:45
apimachinery,caesarxuchao,https://github.com/kubernetes/apimachinery/pull/8,https://api.github.com/repos/kubernetes/apimachinery/issues/8,[Do not merge] [PoC] Changes generated by publish script,"Generated by https://github.com/kubernetes/test-infra/pull/2077

@sttts @deads2k @lavalamp 
",closed,True,2017-03-01 07:59:11,2017-03-08 18:21:55
apimachinery,caesarxuchao,https://github.com/kubernetes/apimachinery/pull/9,https://api.github.com/repos/kubernetes/apimachinery/issues/9,Changes generated by publish script,"In the first commit I manually removed the filter-branch-sha. I also rewrote kubernets-sha: it used to records the last commit of k8s.io/kubernetes when the sync script is called, now it records the last commit of k8s.io/kubernetes ***that affects staging/src/k8s.io/apimachinery*** when the sync script is called.

Ref:
https://github.com/kubernetes/client-go/pull/140 is the changes generated for client-go in the same run of the scripts.

cc @sttts ",closed,True,2017-03-08 21:26:10,2017-03-20 17:12:07
apimachinery,caesarxuchao,https://github.com/kubernetes/apimachinery/pull/10,https://api.github.com/repos/kubernetes/apimachinery/issues/10,Generated by robot,"All 5 PRs generated in the same run of the robot:
https://github.com/kubernetes/client-go/pull/140
https://github.com/kubernetes/apimachinery/pull/10
https://github.com/kubernetes/apiserver/pull/4
https://github.com/kubernetes/kube-aggregator/pull/4
https://github.com/kubernetes/sample-apiserver/pull/2",closed,True,2017-03-18 20:04:20,2017-03-20 20:08:53
apimachinery,caesarxuchao,https://github.com/kubernetes/apimachinery/pull/11,https://api.github.com/repos/kubernetes/apimachinery/issues/11,Round 2: sync: resync vendor folder,"Last round of PRs failed to update vendor/. This one fixed it.

@deads2k @sttts 
PRs to other repos:
https://github.com/kubernetes/apiserver/pull/5
https://github.com/kubernetes/kube-aggregator/pull/5
https://github.com/kubernetes/sample-apiserver/pull/3
https://github.com/kubernetes/client-go/pull/154
https://github.com/kubernetes/apimachinery/pull/11",closed,True,2017-03-20 22:26:45,2017-03-21 21:09:48
apimachinery,piosz,https://github.com/kubernetes/apimachinery/pull/12,https://api.github.com/repos/kubernetes/apimachinery/issues/12,Remove fluentd-ds-ready label,https://github.com/kubernetes/kubernetes/issues/42840,closed,True,2017-03-23 10:53:26,2017-03-27 08:18:10
apimachinery,emaildanwilson,https://github.com/kubernetes/apimachinery/issues/13,https://api.github.com/repos/kubernetes/apimachinery/issues/13,Support for Float comparisons in selector.go for Gt Lt operations,"It would be nice to provide support for label selector comparisons of major version numbers and other Float values possibly for other use cases.
```
[{""key"": ""version"", ""operator"": ""Gt"", ""values"": [""1.5""]}]
```
The current [NewRequirement](https://github.com/kubernetes/apimachinery/blob/master/pkg/labels/selector.go#L136) and [Matches](https://github.com/kubernetes/apimachinery/blob/master/pkg/labels/selector.go#L208) function only support comparison of Integers. 

Any concern with updating this to convert and compare Floats instead of Integers?
Would it need to support both and only convert and compare Floats if a decimal character is found or is that overkill?",closed,False,2017-04-25 22:28:36,2017-04-25 23:08:25
apimachinery,jamiehannaford,https://github.com/kubernetes/apimachinery/pull/14,https://api.github.com/repos/kubernetes/apimachinery/issues/14,Use dedicated Unix types for user and group,"This PR alters some validation functions to use the dedicated types for Unix Group/User IDs. 

Relates to https://github.com/kubernetes/kubernetes/issues/38120 and https://github.com/kubernetes/kubernetes/pull/44714. API change has been approved in former thread.",closed,True,2017-04-26 09:46:04,2017-04-26 09:56:18
apimachinery,magnushiie,https://github.com/kubernetes/apimachinery/pull/15,https://api.github.com/repos/kubernetes/apimachinery/issues/15,Fix IntOrStr JSON Schema type,Sum types can be expressed in JSON schema either via the type array or with the anyOf construct. This change chooses the former to give the type the correct schema.,closed,True,2017-06-26 14:26:45,2017-06-27 15:18:20
apimachinery,kargakis,https://github.com/kubernetes/apimachinery/issues/16,https://api.github.com/repos/kubernetes/apimachinery/issues/16,(*IntOrString) IntValue() always returns zero when IntOrString is a percentage,"https://github.com/kubernetes/apimachinery/blob/21807b270ec15d19215659a5caa08b17f66d6f44/pkg/util/intstr/intstr.go#L104-L107
https://play.golang.org/p/YQMgFOpopM

There is no added value by that conversion, even worse it can be misused.

@kubernetes/sig-api-machinery-bugs ",closed,False,2017-07-24 10:11:58,2017-07-24 12:32:08
apimachinery,apelisse,https://github.com/kubernetes/apimachinery/issues/17,https://api.github.com/repos/kubernetes/apimachinery/issues/17,Command-line options prevent in-cluster configuration usage,"## My problem:

Changing any client configuration through command-line arguments prevents me from using the in-cluster configuration. It falls back to default configuration which is clearly surprising for the user.

## Steps to reproduce:
```
# Run a random container in the cluster
kubectl run --restart=Never --image=nginx test
# Copy a kubectl binary in there
kubectl cp ""$(which kubectl)"" test:/tmp/kubectl

# WORKING CASE:

# Try to get pods, using in-cluster config
kubectl exec test -- /tmp/kubectl get pods -v7
# Gets the pods, yay
I0801 21:14:50.499145      14 merged_client_builder.go:123] Using in-cluster configuration
I0801 21:14:50.499496      14 round_trippers.go:395] GET https://10.67.240.1:443/api
...

# BROKEN CASE:

# Try to get pods, using in-cluster config, but change a random configuration flag
kubectl exec test -- /tmp/kubectl get pods -v7 --request-timeout=5
I0801 21:14:58.051543      27 round_trippers.go:395] GET http://localhost:8080/api
# It doesn't use in-cluster configuration anymore, and tries to connect to localhost ..
```",closed,False,2017-08-01 21:21:26,2018-03-09 11:11:36
apimachinery,fatih,https://github.com/kubernetes/apimachinery/issues/18,https://api.github.com/repos/kubernetes/apimachinery/issues/18,no DeepCopyObject() method for watch.Event type,"Hi,

We're using the `watch.Event` type in our internal code base extensively. Some of the places encode it as well. After upgrading to latest client-go it stopped compiling because of the missing method `DeepCopyObject`. Seems like the following line is missing (https://github.com/kubernetes/apimachinery/blob/master/pkg/watch/watch.go#L54):

```
// k8s:deepcopy-gen:interfaces=k8s.io/kubernetes/runtime.Object
```

Can we generate this method for this type as well? I can open a PR but wasn't sure if that was intentionally like this. ",closed,False,2017-08-04 19:53:38,2017-08-10 17:43:14
apimachinery,armstrongli,https://github.com/kubernetes/apimachinery/issues/19,https://api.github.com/repos/kubernetes/apimachinery/issues/19,Strange code in decoder and strange code in ref,"I encountered strange issue in the external resources added in /pkg/apis/... while logging resource events. The error message while getting the resources is 
```
error: unknown type &ext.Group{TypeMeta:v1.TypeMeta{Kind:"""", APIVersion:""""}, ObjectMeta:v1.ObjectMeta{Name:""****"", GenerateName:"""", Namespace:"""", SelfLink:""/apis/***/v1alpha1/***"", UID:""994f56a4-6f16-11e7-856b-74dbd1a04845"", ResourceVersion:""55349629"", Generation:0, CreationTimestamp:v1.Time{Time:time.Time{sec:63636349651, nsec:0, loc:(*time.Location)(0x2b2e9e0)}}, DeletionTimestamp:(*v1.Time)(nil), DeletionGracePeriodSeconds:(*int64)(nil), Labels:map[string]string(nil), Annotations:map[string]string(nil), OwnerReferences:[]v1.OwnerReference(nil), Finalizers:[]string(nil), ClusterName:""""}, ***.GroupSpec{GroupDescription:"""", Owner:""****"", Users:[]string(nil)}, ***.GroupStatus{Phase:""Inactive"", Conditions:[]***.GroupCondition(nil), StartTime:(*v1.Time)(nil)}}
```

After debugging the source code, and I found strange code in kubernetes between decode and versioning.

In direct decoder:

The `apiVersion` and `Kind` is override to **null values** in [`versioning.go`](https://github.com/kubernetes/apimachinery/blob/master/pkg/runtime/serializer/versioning/versioning.go#L267-#L271): https://github.com/kubernetes/apimachinery/blob/master/pkg/runtime/serializer/versioning/versioning.go#L267-#L271.
```go
// Decode does not do conversion. It removes the gvk during deserialization.
func (d DirectDecoder) Decode(data []byte, defaults *schema.GroupVersionKind, into runtime.Object) (runtime.Object, *schema.GroupVersionKind, error) {
	obj, gvk, err := d.Decoder.Decode(data, defaults, into)
	if obj != nil {
		kind := obj.GetObjectKind()
		// clearing the gvk is just a convention of a codec
		kind.SetGroupVersionKind(schema.GroupVersionKind{})
	}
	return obj, gvk, err
}
```

However, the code is using something which marked **`wrong`** in [ref.go](https://github.com/kubernetes/kubernetes/blob/v1.6.3/staging/src/k8s.io/client-go/pkg/api/v1/ref.go#L55-#L62) : https://github.com/kubernetes/kubernetes/blob/v1.6.3/staging/src/k8s.io/client-go/pkg/api/v1/ref.go#L55-#L62

```go
	// if the object referenced is actually persisted, we can just get kind from meta
	// if we are building an object reference to something not yet persisted, we should fallback to scheme
	kind := gvk.Kind
	if len(kind) == 0 {
		// TODO: this is wrong
		gvks, _, err := scheme.ObjectKinds(obj)
		if err != nil {
			return nil, err
		}
		kind = gvks[0].Kind
	}
```

And after commenting out the reset GVK part(`func (d DirectDecoder) Decode(data []byte, defaults *schema.GroupVersionKind, into runtime.Object) (runtime.Object, *schema.GroupVersionKind, error)`), everything works as expected.",closed,False,2017-08-11 13:55:45,2018-03-09 23:23:33
apimachinery,mbssaiakhil,https://github.com/kubernetes/apimachinery/pull/20,https://api.github.com/repos/kubernetes/apimachinery/issues/20,Fix Typo in apimachinery README,,closed,True,2017-08-13 11:21:58,2017-12-19 14:01:05
apimachinery,fabiand,https://github.com/kubernetes/apimachinery/issues/21,https://api.github.com/repos/kubernetes/apimachinery/issues/21,Should OwnerReference be namespace aware?,"KubeVirt is aiming to become an add-on for running virtual machines on Kube,
This includes that KubeVirt is getting installed into the `kube-system` (or some other predefined namespace) and will handle `VM` objects in other namespaces.

This is at least how add-ons could be imagined to work.

But - As a good citizen KubeVirt's controllers should add `OwnerReference`s to the objects it creates and manages, and here is the issue: The [current OwnerReference API](https://kubernetes.io/docs/api-reference/v1.7/#ownerreference-v1-meta) does work with the assumption that owner and owned object live in different namespaces.

What is the expectation here? Should KubeVirt behave different or should the API be extended?",closed,False,2017-08-29 16:11:14,2018-03-10 17:41:34
apimachinery,mikebrow,https://github.com/kubernetes/apimachinery/issues/22,https://api.github.com/repos/kubernetes/apimachinery/issues/22,Need another sync ,"The following commit in kubernetes is now blocking our ability to move up to fixes we (kubernetes-incubator/cri-containerd) need in kubernetes:

https://github.com/kubernetes/kubernetes/commit/1b3836d5df302281a9db4b03bdc8fd5079142431

Specifically the above commit moved ""List"" from ""k8s.io/api/types.go"" to the following location in their staging version of apimachinery ""k8s.io/apimachinery/pkg/apis/meta/internalversion/types.go""

@Random-Liu ",closed,False,2017-08-29 17:39:00,2017-09-01 15:34:42
apimachinery,lavalamp,https://github.com/kubernetes/apimachinery/issues/23,https://api.github.com/repos/kubernetes/apimachinery/issues/23,Ship a Gopkg.toml,"...to help `dep` users get the correct version of dependencies (e.g., k8s.io/apimachinery).",open,False,2017-09-07 17:37:58,2018-03-04 05:39:51
apimachinery,fejta,https://github.com/kubernetes/apimachinery/issues/24,https://api.github.com/repos/kubernetes/apimachinery/issues/24,"People (sttts, caesarxuchao) need to be able to stage api-machinery code","Assigning to @kubernetes/sig-api-machinery-misc leads:
/assign @deads2k @lavalamp 

Please give @sttts @caesarxuchao write access to the following repos:

- [ ] k8s.io/code-generator
- [ ] k8s.io/sample-apiserver
- [ ] k8s.io/kube-aggregator
- [ ] k8s.io/apiserver
- [ ] k8s.io/client-go
- [ ] k8s.io/api master
- [ ] k8s.io/apimachinery
- [ ] k8s.io/metrics
- [ ] k8s.io/apiextensions-apiserver

This is basically a repetition of kubernetes/kubernetes#51643, the same situation 2 weeks ago.

Status Quo: The github publisher bot https://github.com/kubernetes/test-infra/tree/master/mungegithub/publisher is not pushing the repos right now because it cannot cope with a number of commits (merges) and branch structures (fast-forward master merges) and falls over. Fixes are being reviewed #4134, but it might take another 1-2 weeks until they are ready and maybe more days to build up the confidence again that we can let it push nightly automatically.

To unblock people with components depending on 1.8 another soon'ish push is necessary. For that the bot is run in a private GKE cluster now and pushes to private forks (https://github.com/sttts/client-go, https://github.com/sttts/apiserver, ...). The actual manual push is a sequence of fast-forward pushes. These are codified in

https://gist.github.com/anonymous/2fd6e66e9364dd87e66b12cdb9bd92dc for the pushes, all fast-forward (no force-pushes!)
https://gist.github.com/anonymous/62e661ea6dde3cb7615023f2e7fd69fb for the latest repo heads for a possible roll-back.
Only somebody with push permissions to the repos can execute them. Neither I nor @caesarxuchao have these permisssions. PRs against the repos do not work either because they linearize the branches and destroy the structure we need to consistently create tags.

What we need:

somebody to give us (@sttts and @caesarxuchao) push permissions (or some special user for that we have access to) for those repos to do this push and maybe some more until the bot is running again.
As the situation can happen easily again that the bot falls over (or even pushes wrong content such that we have to react reasonably fast), I would feel much better with (2). Last time it took 3.5 days until we were able to do (1) after asking a number of people for help, not a good experience.

/cc @kubernetes/sig-api-machinery-misc @fejta @lavalamp @thockin @wojtek-t @smarterclayton @eparis

Further context: kubernetes/kubernetes#51643 https://github.com/kubernetes/test-infra/issues/4499",closed,False,2017-09-11 20:46:14,2017-09-12 07:32:08
apimachinery,alrs,https://github.com/kubernetes/apimachinery/pull/25,https://api.github.com/repos/kubernetes/apimachinery/issues/25,Fix strategicpatch swallowed errors,There are four dropped error variables in the strategicpatch package.,closed,True,2017-09-25 00:53:47,2017-09-25 18:47:21
apimachinery,onorua,https://github.com/kubernetes/apimachinery/pull/26,https://api.github.com/repos/kubernetes/apimachinery/issues/26,Add loopback to bind IPs,"Currently in case IP set to localhost, it will be rediscovered from available interfaces. This blocks use-cases like localhost proxy on client side, as described in https://github.com/kubernetes/kubeadm/issues/487 
Let me know if you prefer an additional method instead of changing this one, or you have any concerns about using localhost as a bind interface (even for local testing). ",closed,True,2017-10-09 05:42:46,2017-12-20 07:05:24
apimachinery,caoruidong,https://github.com/kubernetes/apimachinery/pull/27,https://api.github.com/repos/kubernetes/apimachinery/issues/27,Update README.md,fix a typo,closed,True,2017-10-10 08:55:43,2018-01-26 11:05:12
apimachinery,nikhita,https://github.com/kubernetes/apimachinery/pull/28,https://api.github.com/repos/kubernetes/apimachinery/issues/28,Remove README and LICENSE,"Addresses https://github.com/kubernetes/kubernetes/issues/54398.

/cc @sttts ",closed,True,2017-10-23 11:52:50,2017-12-18 12:22:03
apimachinery,cliveseldon,https://github.com/kubernetes/apimachinery/issues/29,https://api.github.com/repos/kubernetes/apimachinery/issues/29,metadata.creationTimeStamp JSON string can not be parsed using proto with JsonFormat,"The proto for metadata.creationTimeStamp 

In k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto creationTimestamp is defined as 
```
// CreationTimestamp is a timestamp representing the server time when this object was
  // created. It is not guaranteed to be set in happens-before order across separate operations.
  // Clients may not set this value. It is represented in RFC3339 form and is in UTC.
  // 
  // Populated by the system.
  // Read-only.
  // Null for lists.
  // More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata
  // +optional
  optional Time creationTimestamp = 8;
```

where Time is

```
// Time is a wrapper around time.Time which supports correct
// marshaling to YAML and JSON.  Wrappers are provided for many
// of the factory methods that the time package offers.
// 
// +protobuf.options.marshal=false
// +protobuf.as=Timestamp
// +protobuf.options.(gogoproto.goproto_stringer)=false
message Time {
  // Represents seconds of UTC time since Unix epoch
  // 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
  // 9999-12-31T23:59:59Z inclusive.
  optional int64 seconds = 1;

  // Non-negative fractions of a second at nanosecond resolution. Negative
  // second values with fractions must still have non-negative nanos values
  // that count forward in time. Must be from 0 to 999,999,999
  // inclusive. This field may be limited in precision depending on context.
  optional int32 nanos = 2;
}
```

If receiving a message from the kube API with metadata the creationTimestamp will be serialized as a string such as : ""2017-10-31T08:17:56Z""
If you try to use in Java the JsonFormat proto buffer class using the k8s protos to parse such as resource response you will get an error like:

com.google.protobuf.InvalidProtocolBufferException: Expect message object but got: ""2017-10-31T08:17:56Z"" as JsonFormat can't handle the time string in a custom manner.

In the Java protobuffers library JSONFormat has special handlers for normal timestamps, e.g.
```
 // Special-case Timestamp.
      parsers.put(
          Timestamp.getDescriptor().getFullName(),
          new WellKnownTypeParser() {
            @Override
            public void merge(ParserImpl parser, JsonElement json, Message.Builder builder)
                throws InvalidProtocolBufferException {
              parser.mergeTimestamp(json, builder);
            }
          });
```
But the parsers are not available to be extended: 
```
 private static final Map<String, WellKnownTypeParser> wellKnownTypeParsers =
        buildWellKnownTypeParsers();
```

deletionTimestamp has the same issue.",closed,False,2017-11-02 15:48:11,2018-04-01 19:21:51
apimachinery,mattmoor,https://github.com/kubernetes/apimachinery/issues/30,https://api.github.com/repos/kubernetes/apimachinery/issues/30,Bazel BUILD files are broken,"e.g. [This](https://github.com/kubernetes/apimachinery/blob/18a564baac720819100827c16fdebcadb05b2d0d/pkg/util/sets/BUILD#L44) label points to a dependency that is not vendored.
",closed,False,2017-11-14 23:04:22,2018-06-13 08:45:41
apimachinery,tnozicka,https://github.com/kubernetes/apimachinery/issues/31,https://api.github.com/repos/kubernetes/apimachinery/issues/31,labels.Set.AsSelector and labels.SelectorFromSet ignore errors and select everything in that case,"It should return also error, not hide it and return selector matching everything. We used [.AsSelector](
https://github.com/kubernetes/apimachinery/blob/a0c9892b4fdd2632ded0da92ef8c2d5326b6c734/pkg/labels/labels.go#L61) in our reaper which ended up deleting everything because of it. Sure, it was unvalidated input (selector value was ""_aaaa"") but not returning an error and ignoring it is a bug. Pretty sure this is widely used and error prone.

https://github.com/kubernetes/apimachinery/blob/a0c9892b4fdd2632ded0da92ef8c2d5326b6c734/pkg/labels/selector.go#L803


",open,False,2017-11-27 19:27:23,2018-05-11 10:40:27
apimachinery,andreis,https://github.com/kubernetes/apimachinery/pull/32,https://api.github.com/repos/kubernetes/apimachinery/issues/32,More README typos (also see #27),,closed,True,2017-12-10 13:52:36,2017-12-19 17:02:37
apimachinery,spiffxp,https://github.com/kubernetes/apimachinery/pull/33,https://api.github.com/repos/kubernetes/apimachinery/issues/33,Add code-of-conduct.md,"Refer to kubernetes/community as authoritative source for code of conduct

ref: kubernetes/community#1527",closed,True,2017-12-20 18:31:22,2017-12-22 15:32:41
apimachinery,xh3b4sd,https://github.com/kubernetes/apimachinery/issues/34,https://api.github.com/repos/kubernetes/apimachinery/issues/34,internal state of Quantity type modified when calling getter method String(),"I discovered a weird behaviour when working with the [`Quantity`](https://godoc.org/k8s.io/apimachinery/pkg/api/resource#Quantity) type. It's `String()` implementation tries to be smart by caching the calculated string representation into the private property `s`. `String()` is actually meant to be a getter, read only if you like. At least this is my intuition on it. Modifying internal state on such a getter is considered an anti-pattern IMO. I discovered this when unit tests failed because you either call `String()` or not and the result of the tests change in case you use `reflect.DeepEqual` as comparator. I would like to know what you think. IMO if something should be cached, and I do not really see the need for that from my naive point of view, then it should happen on instance construction (as soon as all necessary information are present), and not during runtime (especially not to change internal state auto magically).

See https://github.com/kubernetes/apimachinery/blob/20bbfef868144faf29af69ddb2f01646ead5c1a1/pkg/api/resource/quantity.go#L606-L617. ",closed,False,2017-12-22 18:29:59,2018-05-21 20:29:35
apimachinery,sttts,https://github.com/kubernetes/apimachinery/pull/35,https://api.github.com/repos/kubernetes/apimachinery/issues/35,Remove outdated and unused hack files,Part of https://github.com/kubernetes/kubernetes/issues/57559.,closed,True,2017-12-22 21:53:57,2017-12-22 22:21:08
apimachinery,jdxyw,https://github.com/kubernetes/apimachinery/issues/36,https://api.github.com/repos/kubernetes/apimachinery/issues/36,"use this repo as an external dependence, build fail.","Hi

I have a project which need this repo as external dependence. 

`My environment is bazel 0.11.0, Docker engine 17.12 docker compose 1.18 .`

After adding it to my WORKSPACE and try to build it, it throw an error information like below:
`ERROR: /root/cache/bazel/21cdec581d01b82fb2aa0eb823f1cae8/external/com_k8s_io_apimachinery/pkg/apis/meta/v1/BUILD.bazel:9:1: @com_k8s_io_apimachinery//pkg/apis/meta/v1:go_default_test: no such attribute 'embed' in 'go_test' rule`

Is the bazel version issue?

Does anyone know this error?",closed,False,2018-03-02 08:25:21,2018-07-30 10:47:21
apimachinery,nim-nim,https://github.com/kubernetes/apimachinery/issues/37,https://api.github.com/repos/kubernetes/apimachinery/issues/37,"Go 1.10: selector_test.go:390: Errorf format %t arg result.Empty is a func value, not called","Release 1.7.15 does not pass unit tests with Go 1.10. At least:

```
+ GOPATH=/builddir/build/BUILD/apimachinery-kubernetes-1.7.15/_build:/usr/share/gocode
+ go test -buildmode pie -compiler gc -ldflags '-extldflags '\''-Wl,-z,relro  '\'''
# k8s.io/apimachinery/pkg/fields
./selector_test.go:390: Errorf format %t arg result.Empty is a func value, not called
FAIL	k8s.io/apimachinery/pkg/fields [build failed]
```",closed,False,2018-03-24 08:11:03,2018-03-24 10:26:44
apimachinery,nim-nim,https://github.com/kubernetes/apimachinery/issues/38,https://api.github.com/repos/kubernetes/apimachinery/issues/38,Go 1.10: roundtripper_test.go:402: direct assignment to atomic value,"Releases 1.9.5 1.8.10 and 1.7.15 do not pass unit tests with Go 1.10. At least:

```
+ GOPATH=/builddir/build/BUILD/apimachinery-kubernetes-1.9.5/_build:/usr/share/gocode
+ go test -buildmode pie -compiler gc -ldflags '-extldflags '\''-Wl,-z,relro  '\'''
# k8s.io/apimachinery/pkg/util/httpstream/spdy
./roundtripper_test.go:402: direct assignment to atomic value
FAIL	k8s.io/apimachinery/pkg/util/httpstream/spdy [build failed]
```",closed,False,2018-03-24 08:14:52,2018-03-26 06:51:48
apimachinery,nim-nim,https://github.com/kubernetes/apimachinery/issues/39,https://api.github.com/repos/kubernetes/apimachinery/issues/39,FAIL: TestMicroTimeMarshalYAML,"With pretty much the latest of everything, I'm getting:
```
+ GOPATH=/builddir/build/BUILD/apimachinery-kubernetes-1.9.6/_build:/usr/share/gocode
+ go test -buildmode pie -compiler gc -ldflags '-extldflags '\''-Wl,-z,relro  '\'''
--- FAIL: TestMicroTimeMarshalYAML (0.00s)
        micro_time_test.go:49: Failed to marshal input: '{1998-05-05 01:05:05.00000005 -0400 test}': expected t: 1998-05-05T05:05:05.000000Z
                , got ""t: \""1998-05-05T05:05:05.000000Z\""\n""
        micro_time_test.go:49: Failed to marshal input: '{1998-05-05 05:05:05 +0000 UTC}': expected t: 1998-05-05T05:05:05.000000Z
                , got ""t: \""1998-05-05T05:05:05.000000Z\""\n""
--- FAIL: TestTimeMarshalYAML (0.00s)
        time_test.go:49: Failed to marshal input: '{1998-05-05 01:05:05.00000005 -0400 test}': expected t: 1998-05-05T05:05:05Z
                , got ""t: \""1998-05-05T05:05:05Z\""\n""
        time_test.go:49: Failed to marshal input: '{1998-05-05 05:05:05 +0000 UTC}': expected t: 1998-05-05T05:05:05Z
                , got ""t: \""1998-05-05T05:05:05Z\""\n""
FAIL
exit status 1
FAIL    k8s.io/apimachinery/pkg/apis/meta/v1    0.068s
```
",closed,False,2018-03-26 06:32:06,2018-08-23 08:09:38
apimachinery,mixj93,https://github.com/kubernetes/apimachinery/issues/40,https://api.github.com/repos/kubernetes/apimachinery/issues/40,Pluralize name algorithm is different in apimachinery and gengo,"Comparing [apimachinery/pkg/api/meta/restmapper.go](https://github.com/kubernetes/apimachinery/blob/0ed326127d3068118ef128c76673dad6005736ba/pkg/api/meta/restmapper.go#L160) and [gengo/blob/master/namer/plural_namer.go](https://github.com/kubernetes/gengo/blob/01a732e01d00cb9a81bb0ca050d3e6d2b947927b/namer/plural_namer.go#L65), I find that apimachinery and gengo have a different algorithm of pluralize name, it's fine at most time, but it becomes tricky when the name ends with capital 'S'.

In apimachinery add ""es"" will pass the test:
```
{Kind: ""MongoRS"", Plural: ""mongorses"", Singular: ""mongors""}
```

But in gengo add 's' will pass the test:
```
{
    ""MongoRS"",
    ""mongorss"",
    ""MongoRSs"",
},
```

It seems that in apimachinery, `ToLower()` first and then add 'es' after lowercase 's', but in gengo add 's' after Capital 'S' first then `ToLower()`.

the package `k8s.io/gengo/namer` was used in `k8s.io/code-generator` and I use it to generate CRD client and it's different from apimachinery generated rest api.

Maybe apimachinery may use funcs in gengo to stay the same.",closed,False,2018-03-29 02:38:08,2018-10-18 20:56:11
apimachinery,zhangcunli,https://github.com/kubernetes/apimachinery/issues/41,https://api.github.com/repos/kubernetes/apimachinery/issues/41,"""(sw *StreamWatcher) receive()"" receive io.EOF  every 30~50 minittues?","I use client-go to watch k8s service and endpoints like this:
clientset.CoreV1().Services("""").Watch(metav1.ListOptions{})

But every 30~50 minittues，the StreamWatcher will receive the io.EOF.
""(sw *StreamWatcher) receive()"" receive io.EOF and stop.  
And I have to watch again.

",closed,False,2018-04-12 03:32:43,2018-04-16 16:05:07
apimachinery,bjornmagnusson,https://github.com/kubernetes/apimachinery/issues/42,https://api.github.com/repos/kubernetes/apimachinery/issues/42,Bash for Windows: fatal error: runtime: netpoll failed (syscall),"When running Helm 2.9.0-rcX in Bash for Windows, the entire application crashes.
This version of Helm was the first with support for K8S 1.10.
Below error does not appear in Helm 2.8.x or earlier.
Got advice from Helm core maintainer in https://github.com/kubernetes/helm/issues/3833 to report it here.

runtime: epollwait on fd 7 failed with 38
fatal error: runtime: netpoll failed

runtime stack:
runtime.throw(0x1619830, 0x17)
/usr/local/go/src/runtime/panic.go:616 +0x81
runtime.netpoll(0x5d207926fc500, 0xc400000000)
/usr/local/go/src/runtime/netpoll_epoll.go:75 +0x216
runtime.sysmon()
/usr/local/go/src/runtime/proc.go:4265 +0x424
runtime.mstart1(0x0)
/usr/local/go/src/runtime/proc.go:1227 +0xe7
runtime.mstart()
/usr/local/go/src/runtime/proc.go:1193 +0x76

goroutine 1 [runnable, locked to thread]:
k8s.io/helm/vendor/k8s.io/apimachinery/pkg/runtime.(*Scheme).AddKnownTypeWithName(0xc420320c40, 0x1614fc4, 0x14, 0x1600cac, 0x2, 0x12c31f7, 0xd, 0x17486a0, 0xc4203218c0)
/go/src/k8s.io/helm/vendor/k8s.io/apimachinery/pkg/runtime/scheme.go:199 +0x498
k8s.io/helm/vendor/k8s.io/apimachinery/pkg/runtime.(*Scheme).AddKnownTypes(0xc420320c40, 0x1614fc4, 0x14, 0x1600cac, 0x2, 0xc4204dc7b0, 0x4, 0x4)
/go/src/k8s.io/helm/vendor/k8s.io/apimachinery/pkg/runtime/scheme.go:167 +0x168
k8s.io/helm/vendor/k8s.io/apimachinery/pkg/apis/meta/v1.AddToGroupVersion(0xc420320c40, 0x1614fc4, 0x14, 0x1600cac, 0x2)
/go/src/k8s.io/helm/vendor/k8s.io/apimachinery/pkg/apis/meta/v1/register.go:50 +0x39d
k8s.io/helm/vendor/k8s.io/api/authorization/v1.addKnownTypes(0xc420320c40, 0x0, 0x0)
/go/src/k8s.io/helm/vendor/k8s.io/api/authorization/v1/register.go:53 +0x1a6
k8s.io/helm/vendor/k8s.io/apimachinery/pkg/runtime.(*SchemeBuilder).AddToScheme(0x20a9d70, 0xc420320c40, 0x0, 0x0)
/go/src/k8s.io/helm/vendor/k8s.io/apimachinery/pkg/runtime/scheme_builder.go:29 +0x6d
k8s.io/helm/vendor/k8s.io/apimachinery/pkg/runtime.(*SchemeBuilder).AddToScheme-fm(0xc420320c40, 0x0, 0x0)
/go/src/k8s.io/helm/vendor/k8s.io/api/core/v1/register.go:41 +0x34
k8s.io/helm/vendor/k8s.io/client-go/kubernetes/scheme.AddToScheme(0xc420320c40)
/go/src/k8s.io/helm/vendor/k8s.io/client-go/kubernetes/scheme/register.go:87 +0xc9
k8s.io/helm/vendor/k8s.io/kubernetes/pkg/kubectl/scheme.init.0()
/go/src/k8s.io/helm/vendor/k8s.io/kubernetes/pkg/kubectl/scheme/install.go:60 +0x85

goroutine 5 [chan receive]:
k8s.io/helm/vendor/github.com/golang/glog.(*loggingT).flushDaemon(0x20abb40)
/go/src/k8s.io/helm/vendor/github.com/golang/glog/glog.go:879 +0x8b
created by k8s.io/helm/vendor/github.com/golang/glog.init.0
/go/src/k8s.io/helm/vendor/github.com/golang/glog/glog.go:410 +0x203

goroutine 7 [syscall]:
os/signal.signal_recv(0x0)
/usr/local/go/src/runtime/sigqueue.go:139 +0xa6
os/signal.loop()
/usr/local/go/src/os/signal/signal_unix.go:22 +0x22
created by os/signal.init.0
/usr/local/go/src/os/signal/signal_unix.go:28 +0x41",open,False,2018-04-15 18:38:52,2019-04-01 15:22:58
apimachinery,mynameisD,https://github.com/kubernetes/apimachinery/issues/43,https://api.github.com/repos/kubernetes/apimachinery/issues/43,function meta.VersionInterfacesFunc defination missing,"../../vendor/k8s.io/client-go/discovery/restmapper.go:42:75: undefined: meta.VersionInterfacesFunc
../../vendor/k8s.io/client-go/discovery/restmapper.go:176:19: undefined: meta.VersionInterfacesFunc

client-go version is 7.0.0
apimachinery version kubernetes-1.9.4 works fine, but the latest broke",closed,False,2018-04-30 20:16:16,2018-04-30 20:20:08
apimachinery,jessfraz,https://github.com/kubernetes/apimachinery/issues/44,https://api.github.com/repos/kubernetes/apimachinery/issues/44,Create a SECURITY_CONTACTS file.,"As per the email sent to kubernetes-dev[1], please create a SECURITY_CONTACTS
file.

The template for the file can be found in the kubernetes-template repository[2].
A description for the file is in the steering-committee docs[3], you might need
to search that page for ""Security Contacts"".

Please feel free to ping me on the PR when you make it, otherwise I will see when
you close this issue. :)

Thanks so much, let me know if you have any questions.

(This issue was generated from a tool, apologies for any weirdness.)

[1] https://groups.google.com/forum/#!topic/kubernetes-dev/codeiIoQ6QE
[2] https://github.com/kubernetes/kubernetes-template-project/blob/master/SECURITY_CONTACTS
[3] https://github.com/kubernetes/community/blob/master/committee-steering/governance/sig-governance-template-short.md
",closed,False,2018-05-24 14:43:00,2018-06-02 04:20:56
apimachinery,karan,https://github.com/kubernetes/apimachinery/issues/45,https://api.github.com/repos/kubernetes/apimachinery/issues/45,glog.Infof for runtime.RawExtension does not print fields,"Trying to print a provider config (all of it using `glog.Infof(""%+v"", foo)`) will not work. It will print an empty blob. However printing actual fields in it work just fine.

```
I0530 18:07:42.608732    3635 machineactuator.go:158] clusterConfig = &TypeMeta{Kind:,APIVersion:,}
I0530 18:07:42.608737    3635 machineactuator.go:159] clusterConfig.VsphereUser = administrator@vsphere.local
```

I don't have a smaller example (we run into this with sigs.k8s.io/cluster-api) but if needed, I can make one.",closed,False,2018-05-31 16:28:09,2019-01-26 19:02:45
apimachinery,nlamirault,https://github.com/kubernetes/apimachinery/issues/46,https://api.github.com/repos/kubernetes/apimachinery/issues/46,Incorrect vendored version of jsoniter,"I try to use the k8s.io/client-go v7.0.0, and i've got this error : 

```bash
vendor/k8s.io/apimachinery/pkg/runtime/serializer/json/json.go:115:16: unknown field 'CaseSensitive' in struct literal of type jsoniter.Config
```

Same error as in https://github.com/operator-framework/getting-started/issues/16 i think.",open,False,2018-06-26 08:04:12,2019-03-25 05:03:17
apimachinery,timfallmk,https://github.com/kubernetes/apimachinery/issues/47,https://api.github.com/repos/kubernetes/apimachinery/issues/47,metav1.ListOptions LabelSelector field takes string instead of LabelSelector{} object,"I'm not sure I'm framing this issue correctly, but I'm trying to pass multiple `LabelSelector`s to the `metav1.ListOptions` construct (currently I have them as a `map[string]string`), but the `LabelSelector` on that struct only takes a string.

https://github.com/kubernetes/apimachinery/blob/594fc14b6f143d963ea2c8132e09e73fe244b6c9/pkg/apis/meta/v1/types.go#L321-L324

Are multiple selectors intended to be passed as a single concatenated string? Is it even possible to specify multiple selectors for `ListOptions`? I found a possibly related conversion function, but I'm not sure that covers the correct case.

https://github.com/kubernetes/apimachinery/blob/594fc14b6f143d963ea2c8132e09e73fe244b6c9/pkg/apis/meta/v1/conversion.go#L279-L293

Apologies if this ended up in the wrong place. The reference is vapor-ware/ksync#216 if that helps.",closed,False,2018-07-19 23:47:08,2018-10-18 16:28:42
apimachinery,cynepco3hahue,https://github.com/kubernetes/apimachinery/issues/48,https://api.github.com/repos/kubernetes/apimachinery/issues/48,"Generating type with openapi-gen that includes Quantity, does not succeed to generate entry for infDecAmount","I have some type that looks like 
```
type EmptyDiskSource struct {
	// Capacity of the sparse disk.
	Capacity resource.Quantity `json:""capacity""`
}
```
when I run `openapi-gen` on it, I have 
```
""kubevirt.io/kubevirt/pkg/api/v1.EmptyDiskSource"": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: ""EmptyDisk represents a temporary disk which shares the vmis lifecycle."",
					Properties: map[string]spec.Schema{
						""capacity"": {
							SchemaProps: spec.SchemaProps{
								Description: ""Capacity of the sparse disk."",
								Ref:         ref(""k8s.io/apimachinery/pkg/api/resource.Quantity""),
							},
						},
					},
					Required: []string{""capacity""},
				},
			},
			Dependencies: []string{
				""k8s.io/apimachinery/pkg/api/resource.Quantity""},
		},
...
""k8s.io/apimachinery/pkg/api/resource.Quantity"": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: ""Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to String() and Int64() accessors.\n\nThe serialization format is:\n\n<quantity>        ::= <signedNumber><suffix>\n  (Note that <suffix> may be empty, from the \""\"" case in <decimalSI>.)\n<digit>           ::= 0 | 1 | ... | 9 <digits>          ::= <digit> | <digit><digits> <number>          ::= <digits> | <digits>.<digits> | <digits>. | .<digits> <sign>            ::= \""+\"" | \""-\"" <signedNumber>    ::= <number> | <sign><number> <suffix>          ::= <binarySI> | <decimalExponent> | <decimalSI> <binarySI>        ::= Ki | Mi | Gi | Ti | Pi | Ei\n  (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI>       ::= m | \""\"" | k | M | G | T | P | E\n  (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \""e\"" <signedNumber> | \""E\"" <signedNumber>\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: 0.1m will rounded up to 1m.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \""canonical form\"". This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n  a. No precision is lost\n  b. No fractional digits will be emitted\n  c. The exponent (or suffix) is as large as possible.\nThe sign will be omitted unless the number is negative.\n\nExamples:\n  1.5 will be serialized as \""1500m\""\n  1.5Gi will be serialized as \""1536Mi\""\n\nNOTE: We reserve the right to amend this canonical format, perhaps to\n  allow 1.5 to be canonical.\n  or after March 2015.\n\nNote that the quantity will NEVER be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation."",
					Properties: map[string]spec.Schema{
						""i"": {
							SchemaProps: spec.SchemaProps{
								Description: ""i is the quantity in int64 scaled form, if d.Dec == nil"",
								Ref:         ref(""k8s.io/apimachinery/pkg/api/resource.int64Amount""),
							},
						},
						""d"": {
							SchemaProps: spec.SchemaProps{
								Description: ""d is the quantity in inf.Dec form if d.Dec != nil"",
								Ref:         ref(""k8s.io/apimachinery/pkg/api/resource.infDecAmount""),
							},
						},
						""s"": {
							SchemaProps: spec.SchemaProps{
								Description: ""s is the generated value of this quantity to avoid recalculation"",
								Type:        []string{""string""},
								Format:      """",
							},
						},
						""Format"": {
							SchemaProps: spec.SchemaProps{
								Description: ""Change Format at will. See the comment for Canonicalize for more details."",
								Type:        []string{""string""},
								Format:      """",
							},
						},
					},
					Required: []string{""i"", ""d"", ""s"", ""Format""},
				},
			},
			Dependencies: []string{
				""k8s.io/apimachinery/pkg/api/resource.infDecAmount"", ""k8s.io/apimachinery/pkg/api/resource.int64Amount""},
		},
...
""k8s.io/apimachinery/pkg/api/resource.int64Amount"": {
			Schema: spec.Schema{
				SchemaProps: spec.SchemaProps{
					Description: ""int64Amount represents a fixed precision numerator and arbitrary scale exponent. It is faster than operations on inf.Dec for values that can be represented as int64."",
					Properties: map[string]spec.Schema{
						""value"": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{""integer""},
								Format: ""int64"",
							},
						},
						""scale"": {
							SchemaProps: spec.SchemaProps{
								Type:   []string{""integer""},
								Format: ""int32"",
							},
						},
					},
					Required: []string{""value"", ""scale""},
				},
			},
			Dependencies: []string{},
		},
...
```
but I do not have entry for `k8s.io/apimachinery/pkg/api/resource.infDecAmount`, I think it because that `infDecAmount` type includes type from go standard library and they can not be auto-generated by `openapi-gen`. I can set `// +k8s:openapi-gen=false` on problematic field
```
// d is the quantity in inf.Dec form if d.Dec != nil
// +k8s:openapi-gen=false
d infDecAmount
```
,  but I do not sure if it good solution.",closed,False,2018-08-08 12:16:02,2018-08-08 20:13:09
apimachinery,MartinForReal,https://github.com/kubernetes/apimachinery/issues/49,https://api.github.com/repos/kubernetes/apimachinery/issues/49,support i18n in error messages,"Hi,

Is there any plan to support i18n in error message? ",closed,False,2018-09-21 03:57:35,2019-02-18 10:28:19
apimachinery,michaelkipper,https://github.com/kubernetes/apimachinery/issues/50,https://api.github.com/repos/kubernetes/apimachinery/issues/50,Encoder does not encode oneof in protobufs correctly,"Hi,

I'm working on getting an Istio VirtualService client working, and am running into the following error:

```
admission webhook ""pilot.validation.istio.io"" denied the request: error decoding configuration: YAML decoding error: gateways:
- test-gateway
hosts:
- '*'
http:
- match:
  - uri:
      MatchType:
        Prefix: /
  route:
  - destination:
      host: test-service
      port:
        Port:
          Number: 8080
 unknown field ""MatchType"" in v1alpha3.StringMatch 
```

This is because the match should encode to:

```yaml
- match:
  - uri:
    -prefix: /
```

Ultimately, the `encoding/json` package is being used to encode the object, which includes a Protobuf for the VirtualService: https://github.com/kubernetes/apimachinery/blob/90473842928c717082a393d6adceee99889fe8cc/pkg/runtime/serializer/json/json.go#L245-L246

The VirtualService is defined here: https://github.com/istio/api/blob/master/networking/v1alpha3/virtual_service.proto

Is there a non-obvious way for me to control the encoding of this object?

I can reproduce the error here: https://github.com/michaelkipper/istio-client-go/pull/6

Thanks!
Michael",closed,False,2018-11-21 20:39:04,2018-11-21 21:09:08
apimachinery,EngHabu,https://github.com/kubernetes/apimachinery/issues/55,https://api.github.com/repos/kubernetes/apimachinery/issues/55,Use Semantic Versions for releases,I don't get why are we using the weird notion of kubernetes-<version> that breaks Go Dep sem-version matching logic... was there a reason behind it or just evolved that way?,open,False,2018-12-10 22:21:47,2019-03-18 01:23:19
apimachinery,michaelkipper,https://github.com/kubernetes/apimachinery/issues/59,https://api.github.com/repos/kubernetes/apimachinery/issues/59,"Type resource.Quantity unmarshals with json, but not jsonpb","Hi all.

Given that the API types are actually protobufs, I would expect to use `jsonpb` to Marshal/Unmarshal, not the standard `json` package.

Here was my setup:

```go
package clienttest

import (
	""bytes""
	""encoding/json""
	""testing""

	corev1 ""k8s.io/api/core/v1""
	""k8s.io/apimachinery/pkg/api/resource""

	""github.com/gogo/protobuf/jsonpb""
	""github.com/stretchr/testify/assert""

	log ""github.com/sirupsen/logrus""
)

func quantityOrDie(s string) resource.Quantity {
	q, err := resource.ParseQuantity(s)
	if err != nil {
		log.Fatal(err)
	}
	return q
}

func getContainer() corev1.Container {
	return corev1.Container{
		Resources: corev1.ResourceRequirements{
			Limits: corev1.ResourceList{
				""cpu"": quantityOrDie(""0.2""),
				""ram"": quantityOrDie(""2000000000""),
			},
		},
	}
}

func TestMarshalContainerJsonpb(t *testing.T) {
	c := getContainer()
	m := jsonpb.Marshaler{}
	s, err := m.MarshalToString(&c)
	assert.NoError(t, err, ""Could not marshal Container"")
	log.WithField(""buffer"", s).Info(""Marshalled Container"")

	cc := corev1.Container{}
	u := jsonpb.Unmarshaler{}
	err = u.Unmarshal(bytes.NewBufferString(s), &cc)
	assert.NoError(t, err, ""Could not unmarshal Container"")
	log.WithField(""container"", cc.String()).Info(""Unmarshalled Container"")
}

func TestMarshalContainerJson(t *testing.T) {
	c := getContainer()
	b, err := json.Marshal(c)
	assert.NoError(t, err, ""Could not marshal Container"")
	log.WithField(""buffer"", string(b)).Info(""Marshalled Container"")

	cc := corev1.Container{}
	err = json.Unmarshal(b, &cc)
	assert.NoError(t, err, ""Could not unmarshal Container"")
	log.WithField(""container"", cc.String()).Info(""Unmarshalled Container"")
}
```

The error message is:

```
--- FAIL: TestMarshalContainerJsonpb (0.00s)
    resource_requirements_test.go:47: 
        	Error Trace:	resource_requirements_test.go:47
        	Error:      	Received unexpected error:
        	            	json: cannot unmarshal string into Go value of type map[string]json.RawMessage
        	Test:       	TestMarshalContainerJsonpb
        	Messages:   	Could not unmarshal Container
```

Also, when I switched from `github.com/gogo/protobuf/jsonpb` to `github.com/golang/protobuf/jsonpb` things got even worse:

```
--- FAIL: TestMarshalContainerJsonpb (0.00s)
panic: reflect.Value.Addr of unaddressable value [recovered]
	panic: reflect.Value.Addr of unaddressable value
```

Should I be using the `json` package with these types?

Thanks,
-mk
",closed,False,2018-12-21 05:07:47,2018-12-21 15:29:38
apimachinery,xiaoxiadazhi,https://github.com/kubernetes/apimachinery/issues/60,https://api.github.com/repos/kubernetes/apimachinery/issues/60,Kubernetes initializer IncludeUninitialized parameter is deprecated how can my initializer controller list and watch for uninitialized objects now?,"In the latest version of kubernetes/apimachinery，the includeUninitialized parameter is deprecated，how can my initializer controller list and watch for uninitialized objects now?
Thanks!",closed,False,2019-03-04 12:41:44,2019-03-04 13:34:54
apimachinery,joelsmith,https://github.com/kubernetes/apimachinery/pull/61,https://api.github.com/repos/kubernetes/apimachinery/issues/61,Update embargo doc link in SECURITY_CONTACTS and change PST to PSC,See https://github.com/kubernetes/security/issues/8 for more information,closed,True,2019-03-08 17:52:02,2019-03-09 01:18:18
apimachinery,tralexa,https://github.com/kubernetes/apimachinery/pull/62,https://api.github.com/repos/kubernetes/apimachinery/issues/62,"fix panic when name is ""-""","Sorry, we do not accept changes directly against this repository. Please see
CONTRIBUTING.md for information on where and how to contribute instead.
",open,True,2019-03-25 11:23:10,2019-03-25 11:23:38
apimachinery,tmessinis,https://github.com/kubernetes/apimachinery/issues/63,https://api.github.com/repos/kubernetes/apimachinery/issues/63,Changes to NewStreamWatcher breaks compatibility with k8s.io/client-go/rest library,"Hello,

I began getting the following error when importing the `k8s.io/client-go/rest` package.

```
go/pkg/mod/k8s.io/client-go@v11.0.0+incompatible/rest/request.go:598:31: not enough arguments in call to watch.NewStreamWatcher
	have (*versioned.Decoder)
	want (watch.Decoder, watch.Reporter)
```

Upon doing some investigation it seems that the NewStreamWatcher function in was changed fairly recently:
https://github.com/kubernetes/apimachinery/commit/6bfc4729640e1b788e991515a8ea4e16504c3a5d#diff-13d4c1aef2b5ff5ac3d279505679acc0L52

This change though wasn't reflected in the call to NewStreamWatcher in request.go:
https://github.com/kubernetes/client-go/blob/master/rest/request.go#L598

It seems that only a single decoder struct gets returned from the NewDecoder function:
https://github.com/kubernetes/client-go/blob/master/rest/watch/decoder.go#L39

Is this something that's planned to be fixed?",closed,False,2019-04-03 20:05:47,2019-04-03 20:38:14
