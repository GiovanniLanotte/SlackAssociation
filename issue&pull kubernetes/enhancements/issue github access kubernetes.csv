name repository,creator user,url_html issue,url_api issue,title,body,state,pull request,data open,updated at
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/1,https://api.github.com/repos/kubernetes/enhancements/issues/1,Kubernetes feature tracking issue template,,closed,True,2016-05-02 18:55:21,2016-05-03 20:05:24
enhancements,erictune,https://github.com/kubernetes/enhancements/issues/2,https://api.github.com/repos/kubernetes/enhancements/issues/2,Role-based access control (RBAC),"# Feature Description
- One-line feature description (can be used as a release note): Role-based access control
- Primary contact (assignee): @ericchiang @deads2k @liggitt
- Responsible SIGs: sig-auth
- Design proposal link (community repo):
- Reviewer(s): @deads2k @ericchiang 
- Approver (likely from SIG/area to which feature belongs): @erictune @smarterclayton 
- Feature target (which target equals to which milestone):
  - Alpha release target - 1.3
  - Beta release target - 1.6
  - Stable release target - 1.8

https://github.com/kubernetes/kubernetes/pull/25634
kubernetes/kubernetes#26753
kubernetes/kubernetes.github.io#643",closed,False,2016-05-03 20:06:07,2017-10-24 15:20:04
enhancements,pwittrock,https://github.com/kubernetes/enhancements/issues/3,https://api.github.com/repos/kubernetes/enhancements/issues/3,Support Api Object Templates,"Thanks for wanting to add a feature to Kubernetes!  You will be responsible for guiding
your feature through completion, and asking the right people for approvals.  

Large features typically go through three stages: [Alpha, Beta, and Stable](https://github.com/kubernetes/kubernetes/blob/master/docs/api.md#api-versioning)
Each stage requires various approvals from various teams.

You can use the checkboxes below to
track your progress.  You can delete the text above once you have read it.  Please keep the checklist.
- [ ] Before Alpha
  - [x] Design Approval
    - [x] < 1 page PR description of the design. [advice for design description] 
      - **[done in design doc](https://github.com/kubernetes/kubernetes/commits/release-1.2/docs/proposals/templates.md)**
    - [x] Design doc under [docs/proposals](https://github.com/kubernetes/kubernetes/docs/proposals).
      - **[done in design doc](https://github.com/kubernetes/kubernetes/commits/release-1.2/docs/proposals/templates.md)**
    - [x] Initial API review (if API).  Maybe same PR as design doc.
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
      -  - **[done in design doc](https://github.com/kubernetes/kubernetes/commits/release-1.2/docs/proposals/templates.md)**
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-05-03 20:44:16,2016-06-17 20:19:07
enhancements,erictune,https://github.com/kubernetes/enhancements/pull/4,https://api.github.com/repos/kubernetes/enhancements/issues/4,Update ISSUE_TEMPLATE.md,,closed,True,2016-05-09 16:54:20,2017-03-24 18:57:32
enhancements,erictune,https://github.com/kubernetes/enhancements/issues/5,https://api.github.com/repos/kubernetes/enhancements/issues/5,Pod Security Policy,"# Feature Description
- Define policy objects that limit what security-related features pods and containers can use
- Primary contact (assignee): @tallclair
- Responsible SIGs: @kubernetes/sig-auth-feature-requests @kubernetes/sig-node-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/auth/pod-security-policy.md
- Link to e2e and/or unit tests: https://github.com/kubernetes/kubernetes/blob/master/test/e2e/auth/pod_security_policy.go
- Reviewer(s) - (for LGTM): @liggitt @tallclair 
- Approver: @liggitt @tallclair 
- Feature target (which target equals to which milestone):
  - Beta release target (extensions/v1beta1) - 1.8
  - Beta release target (policy/v1beta1) - 1.10
  - Stable release target - TBD

# Related issues
* https://github.com/kubernetes/kubernetes/issues/43214 - Move out of extensions/v1beta1 API group:
  - 1.10
    - [x] additionally allow authorizing via `use` verb in `policy` API group (will need to allow via either group for some time period)
    - [x] update e2e tests (test both for some time period)
  - 1.11
    - [ ] move internal types to policy package (cleanup)
    - [ ] move registry to policy package (cleanup)
    - [ ] update addon manifests to use policy/v1beta1, grant permissions in policy API group
    - [ ] switch admission plugin to use policy group informer
    - [ ] switch preferred storage version to policy group
* https://github.com/kubernetes/kubernetes/issues/56174
* https://github.com/kubernetes/kubernetes/issues/55435
* https://github.com/kubernetes/kubernetes/issues/56173",open,False,2016-05-09 16:58:22,2019-03-26 00:24:45
enhancements,erictune,https://github.com/kubernetes/enhancements/pull/6,https://api.github.com/repos/kubernetes/enhancements/issues/6,Update ISSUE_TEMPLATE.md,"Require docs/proposals for all features, to allow commenting.
",closed,True,2016-05-09 17:03:38,2016-06-08 21:31:47
enhancements,erictune,https://github.com/kubernetes/enhancements/pull/7,https://api.github.com/repos/kubernetes/enhancements/issues/7,Update README.md,"describe how and when to use feature tracking issues.
",closed,True,2016-05-09 17:56:20,2017-03-24 18:57:32
enhancements,CsatariGergely,https://github.com/kubernetes/enhancements/pull/8,https://api.github.com/repos/kubernetes/enhancements/issues/8,Location of proposals directory corrected.,,closed,True,2016-06-16 08:38:14,2016-07-18 21:01:39
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/9,https://api.github.com/repos/kubernetes/enhancements/issues/9,Directory with 1.3 features added,"Added directory with the actual features for 1.3 release
",closed,True,2016-06-20 15:11:29,2016-06-20 15:57:21
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/10,https://api.github.com/repos/kubernetes/enhancements/issues/10,List of the with 1.3 features added,"Features for 1.3 list added.
",closed,True,2016-06-20 16:23:49,2016-06-24 16:12:45
enhancements,jbeda,https://github.com/kubernetes/enhancements/issues/11,https://api.github.com/repos/kubernetes/enhancements/issues/11,Dramatically Simplify Kubernetes Cluster Creation (kubeadm umbrella issue).,"# Description

Creating a new Kubernetes cluster is too hard.  We need to simplify the number and types of actions to get a production cluster up and running.

Note that this is different from bringing up a development cluster (single node ala monokube or minikube) or automation around cluster creation (https://github.com/kubernetes/community/wiki/Roadmap:-Cluster-Deployment).

If we do this right, the number of manual steps to get a cluster running should be minimal.  This will have the added benefit of making other deployment scenarios (dev cluster, cluster automation) simpler and smaller.

As part of this, we should make simplifying assumptions and have opinionated defaults.  An example would be embedding etcd and picking an easy to use network technology.  Certificates and trust should be established automatically.
# Progress Tracker
- [x] Before Alpha
  - [x] Design Approval
    - [x] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: https://github.com/kubernetes/kubernetes/pull/30360
    - [x] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
  - [x] Write (code + tests + docs) then get them merged. https://github.com/kubernetes/kubernetes/pull/33262
    - [x] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [x] Minimal testing
    - [x] Minimal docs https://github.com/kubernetes/kubernetes.github.io/pull/1265
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [x] Update release notes
- [x] Before Beta
  - [x] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [x] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-06-22 17:14:18,2018-12-03 22:46:21
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/12,https://api.github.com/repos/kubernetes/enhancements/issues/12,Performance and scale improvements to core infrastructure and clients to hit scale goals,"# Description

Continue to refine the performance of the API server, controllers, and client infrastructure to achieve our scale goals (~5k nodes and 300k pods) on a single cluster.  This involves continuous testing at scale and refinement of our core systems for efficiency, as well as scaling testing from many large deployments.

By the 1.4 release, we hope to identify major scale blockers between the current certified numbers and our target numbers and get much closer.
# Progress Tracker

**FEATURE_STATUS: ONGOING**

Design
-  [x] Summarization of ongoing work under https://github.com/kubernetes/kubernetes/issues/27667

Coding
- PRs are tracked under https://github.com/kubernetes/kubernetes/issues?utf8=✓&q=label%3Aarea%2Fperformance+label%3A%22team%2FCSI-API+Machinery+SIG%22+
- Coding work is prioritized by the sig-scale and sig-api-machinery groups.
- PRs trying to make v1.4
  - https://github.com/kubernetes/kubernetes/pull/26709
  - https://github.com/kubernetes/kubernetes/pull/29978
  - https://github.com/kubernetes/kubernetes/pull/29926
  - https://github.com/kubernetes/kubernetes/pull/24841

Docs
- [x] None specifically required at this point.
",closed,False,2016-06-23 17:46:06,2017-04-25 17:45:15
enhancements,verb,https://github.com/kubernetes/enhancements/pull/13,https://api.github.com/repos/kubernetes/enhancements/issues/13,Fix broken links to kubernetes designs in README,,closed,True,2016-06-23 18:29:38,2016-06-23 18:42:24
enhancements,verb,https://github.com/kubernetes/enhancements/pull/14,https://api.github.com/repos/kubernetes/enhancements/issues/14,Fix broken links to kubernetes designs in README,,closed,True,2016-06-24 05:30:27,2016-06-24 05:52:24
enhancements,philips,https://github.com/kubernetes/enhancements/pull/15,https://api.github.com/repos/kubernetes/enhancements/issues/15,"683ed1d (Brandon Philips, 27 minutes ago)    release-1.3: features-1.3: make dlorenc the minikube assignee","dlorenc seems to be doing all of the hacking here, I don't think we should
   overload bgrant with more stuff.

7376cbd (Brandon Philips, 28 minutes ago)
   release-1.3/features-1.3: add CoreOS to minikube

   I work at CoreOS and contributed the VMware Fusion backend for minikube and
   fixed upstream libmachine bugs.
",closed,True,2016-06-25 02:33:03,2016-06-29 17:34:05
enhancements,MikeSpreitzer,https://github.com/kubernetes/enhancements/issues/16,https://api.github.com/repos/kubernetes/enhancements/issues/16,Allow Tags on Containers,"# Description

This feature adds a way for users to control metadata tags on their containers.  Each of the various container runtimes has a way to put some sort of user tag on containers.  Giving users control over this is useful for scenarios in which the user wants to integrate Kubernetes with other platforms and facilities.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PR-NUMBER**  ---  See https://github.com/kubernetes/kubernetes/pull/27964, which is not yet merged
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-06-28 14:46:02,2016-10-12 16:54:55
enhancements,sarahnovotny,https://github.com/kubernetes/enhancements/pull/17,https://api.github.com/repos/kubernetes/enhancements/issues/17,made summary/description usage consistent.,,closed,True,2016-06-28 15:51:46,2016-07-20 21:09:20
enhancements,errordeveloper,https://github.com/kubernetes/enhancements/issues/18,https://api.github.com/repos/kubernetes/enhancements/issues/18,Addon management layer,"# Feature Description
- One-line feature description (can be used as a release note): Support for system addon management
- Primary contact (assignee): @justinsb
- Responsible SIGs: @kubernetes/sig-cluster-lifecycle-feature-requests  
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.8
  - Beta release target (x.y) 1.9
  - Stable release target (x.y) 1.10

<del>
# Description

Currently add-on management is baked in `kube-up.sh` and is subject to various kinds of issues. Current implementation lacks transparency, clear specification and any separation from other layers, among other more technical downsides. This part of the effort towards #11, and is a fairly easy one to tackle.

As discussed in kubernetes/kubernetes-anywhere#126, it looks like a low-hanging fruit, and existing projects can be easily used to pave the way. More specifically, the assumption is that Helm should work  pretty well for this, and only a thin layer of automation would be required to make it seamless.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here:
      - https://github.com/kubernetes/kubernetes/pull/29551
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
</del>",open,False,2016-06-28 16:41:53,2019-02-07 16:16:59
enhancements,soltysh,https://github.com/kubernetes/enhancements/issues/19,https://api.github.com/repos/kubernetes/enhancements/issues/19,CronJobs (previously ScheduledJobs),"# Feature Description
- One-line feature description (can be used as a release note):
CronJobs (previously ScheduledJobs) are meant for performing all time-related actions, namely backups, report generation and the like.  Each of these tasks should be allowed to run repeatedly (once a day/month, etc.) or once at a given point in time.
- Primary contact (assignee): @soltysh
- Responsible SIGs: @kubernetes/sig-apps-feature-requests
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/apps/cronjob.md
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @soltysh @janetkuo @kow3ns
- Approver (likely from SIG/area to which feature belongs): @soltysh
- Feature target (which target equals to which milestone):
  - [x] Alpha release target 1.4 (as ScheduledJobs)
  - [x] Beta release target 1.9/1.10
  - [ ] Stable release target ?.? (see [requirements](https://github.com/kubernetes/features/issues/19#issuecomment-359481544))

Planned improvements for 1.10 see https://github.com/kubernetes/features/issues/19#issuecomment-359478294",open,False,2016-07-04 19:27:58,2019-02-25 20:18:29
enhancements,mdshuai,https://github.com/kubernetes/enhancements/pull/20,https://api.github.com/repos/kubernetes/enhancements/issues/20,Update github user link,,closed,True,2016-07-11 05:48:45,2016-07-11 10:23:53
enhancements,MikeSpreitzer,https://github.com/kubernetes/enhancements/issues/21,https://api.github.com/repos/kubernetes/enhancements/issues/21,Vertical Scaling of Pods,"# Description

Make it possible to vary the resource limits on a pod over its lifetime.  In particular, this is valuable for pets (i.e., pods that are very costly to destroy and re-create).

This was discussed in the Node SIG meeting of 12 July 2016, where it was noted that this is a big cross-cutting issue and that @ncdc might be an appropriate owner.
# Progress Tracker
- [x] Before Alpha
  - [x] Design Approval
    - [x] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: https://github.com/kubernetes/community/pull/338
    - [x] Initial API review (if API).  Maybe same PR as design doc. https://github.com/kubernetes/community/pull/338
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
  - [x] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [x] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [x] Minimal testing
    - [x] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [x] Update release notes
- [x] Before Beta
  - [x] Testing is sufficient for beta
  - [x] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [x] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",open,False,2016-07-12 18:59:44,2019-03-07 13:11:03
enhancements,roberthbailey,https://github.com/kubernetes/enhancements/issues/22,https://api.github.com/repos/kubernetes/enhancements/issues/22,API Audit Logging,"# API Audit Logging
- The Kubernetes apiserver can generate audit logs for all requests, and export to a pluggable backend.
- Primary contact (assignee): Tim Allclair @tallclair
- Responsible SIGs: sig-auth
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/auditing.md
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @sttts @soltysh @x13n 
- Approver (likely from SIG/area to which feature belongs): @sttts @tallclair
- Feature target (which target equals to which milestone):
  - [x] Alpha release target (1.7)
  - [x] Beta release target (1.8) - https://github.com/kubernetes/kubernetes/issues/48561
  - [ ] Stable release target (1.12) - https://github.com/kubernetes/kubernetes/pull/65891
- Docs: https://github.com/kubernetes/kubernetes.github.io/blob/master/docs/tasks/debug-application-cluster/audit.md",closed,False,2016-07-12 22:03:10,2018-10-05 16:58:46
enhancements,timstclair,https://github.com/kubernetes/enhancements/pull/23,https://api.github.com/repos/kubernetes/enhancements/issues/23,Fix instructions referring to non-existant header,,closed,True,2016-07-14 02:04:02,2016-07-14 13:13:10
enhancements,timstclair,https://github.com/kubernetes/enhancements/issues/24,https://api.github.com/repos/kubernetes/enhancements/issues/24,Add AppArmor support,"# Description

Add AppArmor support to Kubernetes. Initial support should include the ability to specify an AppArmor profile for a container or pod in the API, and have that profile applied by the container runtime.
# Progress Tracker
- [x] Before Alpha
  - [x] Design Approval
    - [x] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: https://github.com/kubernetes/kubernetes/pull/29168
    - [x] Initial API review (if API).  Maybe same PR as design doc. https://github.com/kubernetes/kubernetes/pull/29168
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
  - [x] Write (code + tests + docs) then get them merged.  https://github.com/kubernetes/kubernetes/pull/29812 https://github.com/kubernetes/kubernetes/pull/30118 https://github.com/kubernetes/kubernetes/pull/30722 https://github.com/kubernetes/kubernetes/pull/30183 https://github.com/kubernetes/kubernetes/pull/31314 https://github.com/kubernetes/kubernetes/pull/31473 https://github.com/kubernetes/kubernetes/pull/31471 https://github.com/kubernetes/kubernetes/pull/31557 https://github.com/kubernetes/kubernetes/pull/31625 https://github.com/kubernetes/kubernetes/pull/31659
    - [x] ~~**Code needs to be disabled by default.**   Verified by code OWNERS~~
        AppArmor is enabled by default, but gated by a feature-gate: https://github.com/kubernetes/kubernetes/pull/31473
    - [x] Minimal testing
    - [x] Minimal docs - https://github.com/kubernetes/kubernetes.github.io/pull/1147
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [x] Before Beta https://github.com/kubernetes/kubernetes/pull/31471
  - [x] Testing is sufficient for beta
  - [x] User docs with tutorials - https://github.com/kubernetes/kubernetes.github.io/pull/1147
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: BETA**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [x] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",open,False,2016-07-14 02:10:24,2019-03-18 18:14:00
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/25,https://api.github.com/repos/kubernetes/enhancements/issues/25,Added Release-1.4.md,"As we have discussed during the 2016/07/14 Kubernetes community meeting, this is the proposal to move https://github.com/kubernetes/community/wiki/Release-1.4 to the features repo.
",closed,True,2016-07-15 13:48:38,2016-07-15 14:30:11
enhancements,philips,https://github.com/kubernetes/enhancements/pull/26,https://api.github.com/repos/kubernetes/enhancements/issues/26,README: it is unclear what a feature is,"A feature is:
- Something that can span multiple releases
- Something that can sit on a backlog
",closed,True,2016-07-15 17:57:05,2016-07-19 13:37:09
enhancements,girishkalele,https://github.com/kubernetes/enhancements/issues/27,https://api.github.com/repos/kubernetes/enhancements/issues/27,GCP Cloud Provider: Source IP preservation for Virtual IPs,"# Feature Description
- One-line feature description (can be used as a release note): Source IP Preservation - change Cloud load-balancer strategy to health-checks and respond to health check only on nodes that host pods for the service.
- Primary contact (assignee): @MrHohn
- Responsible SIGs: sig-network
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/external-lb-source-ip-preservation.md
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @thockin @freehan @bprashanth 
- Approver (likely from SIG/area to which feature belongs): @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.4)
  - Beta release target (1.5)
  - Stable release target (1.7)",closed,False,2016-07-17 20:47:16,2017-09-20 04:00:50
enhancements,philips,https://github.com/kubernetes/enhancements/pull/28,https://api.github.com/repos/kubernetes/enhancements/issues/28,ISSUE_TEMPLATE: add a requirement for WIP docs,"During the 1.3 retrospective one of the things we identified was that UX
and docs were coming long after a feature was perceived to be ""done"".
Further, the proposals might have changed while the feature was being
built. A few examples of this are PetSet or RBAC which landed in 1.3 but
the user experience rough sketch would have been helpful to get everyone
understanding the feature and as a starting off point for writing ""real
docs"".
",closed,True,2016-07-18 16:05:40,2016-07-20 14:58:14
enhancements,aronchick,https://github.com/kubernetes/enhancements/pull/29,https://api.github.com/repos/kubernetes/enhancements/issues/29,Add Secondary & Shepherd check boxes to the template,,closed,True,2016-07-18 16:53:30,2016-07-18 20:02:02
enhancements,philips,https://github.com/kubernetes/enhancements/pull/30,https://api.github.com/repos/kubernetes/enhancements/issues/30,ISSUE_TEMPLATE: fix a broken link,"This link is broken, fix it.
",closed,True,2016-07-18 17:49:04,2016-07-18 20:43:18
enhancements,philips,https://github.com/kubernetes/enhancements/pull/31,https://api.github.com/repos/kubernetes/enhancements/issues/31,OWNERS: add idvoretskyi,"Add aronchick, idvoretskyi, and myself as the initial OWNERS as we have
been involved in the last few weeks to make this repo successful for
v1.4.

Explicitly not adding @erictune right now even though he created the
repo because he is overloaded.
",closed,True,2016-07-18 21:34:56,2016-07-20 17:40:44
enhancements,ericchiang,https://github.com/kubernetes/enhancements/issues/32,https://api.github.com/repos/kubernetes/enhancements/issues/32,Kubectl login subcommand,"# Description

Add a subcommand to kubectl which can update kubeconfig auth providers configs (https://github.com/kubernetes/kubernetes/pull/23066) and trigger login events. The initial implementation will add support for the OpenID Connect auth provider and a basic auth challenge.

Prior POC and discussion in https://github.com/kubernetes/kubernetes/pull/25758

cc @kubernetes/sig-auth 
# Progress Tracker
- [ ] Before Alpha
  - [ ] Design Approval
    - [x] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: kubernetes/kubernetes#29350
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** sig-auth
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-18 23:58:50,2018-01-22 16:29:15
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/33,https://api.github.com/repos/kubernetes/enhancements/issues/33,Support services that reference an external service,"# Description

Services should be able to reference an external DNS address instead of only pods, which will allow application authors to reference services that exist off platform, on other clusters, or locally.

Owner @rata
# Progress Tracker
- [x] Before Alpha
  - [x] Design Approval
    - [x] [Design Proposal](https://github.com/kubernetes/kubernetes/pull/29073)
    - [x] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @smarterclayton + @thockin
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [x] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [x] Write (code + tests + docs) then get them merged.  https://github.com/kubernetes/kubernetes/pull/30599
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [x] Minimal testing
    - [x] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [x] Update release notes
- [x] Before Beta
  - [x] Testing is sufficient for beta
  - [x] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [x] Thorough API review
    - **cc @kubernetes/api**
- [x] Before Stable
  - [x] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [x] Soak, load testing  
  - [x] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-19 20:01:33,2017-02-04 04:15:13
enhancements,sttts,https://github.com/kubernetes/enhancements/issues/34,https://api.github.com/repos/kubernetes/enhancements/issues/34,Add sysctl support,"# Description

This feature aims at extending the current pod specification with support
 for namespaced kernel parameters (sysctls) set for each pod.

# Scope of work planned for v1.11
- graduate to beta

# Progress Tracker
- [x] Before Alpha
  - [x] Design Approval
    - [x] Design Proposal: https://github.com/kubernetes/kubernetes/pull/26057
    - [x] Initial API review (if API).
      -  **cc @kubernetes/api**
    - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @vishh 
    - [x] Identify secondary/backup contact point @derekwaynecarr 
  - [x] Write (code **done** + tests **done** + docs **done, ready to be merged**) then get them merged.  https://github.com/kubernetes/kubernetes/pull/27180
    - [x] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [x] Minimal testing
    - [x] Minimal docs: https://github.com/kubernetes/kubernetes.github.io/pull/1126
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [x] Update release notes
- [x] Before Beta
  - [x] Testing is sufficient for beta
  - [x] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs: https://github.com/kubernetes/website/pull/8804
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [x] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [x] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",open,False,2016-07-20 09:05:40,2019-02-06 02:46:41
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/35,https://api.github.com/repos/kubernetes/enhancements/issues/35,Add a simple template API object that assists with config parameterization,"# Description

Simple config parameterization is an important tool for extending the utility of example config. This feature will add an API object that represents a set of standard parameters and a list of objects with replacement syntax, a minimal set of CLI commands that transform templates + parameters into a list of API objects, and an API endpoint that allow templates to be stored.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Design Approval
    - [ ] [Design Proposal](https://github.com/kubernetes/kubernetes/blob/master/docs/proposals/templates.md)
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @smarterclayton for now
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-20 14:21:48,2017-12-30 23:15:12
enhancements,childsb,https://github.com/kubernetes/enhancements/issues/36,https://api.github.com/repos/kubernetes/enhancements/issues/36,Configurable Dynamic Provisioning aka StorageClass,"# Description

The current dynamic provisioning feature supports only a single provisioner per cluster.  This feature will allow multiple provisioners to be configured in a single cluster.  
# Progress Tracker
- [x] Before Alpha
  - [x] [Design Proposal.](https://github.com/kubernetes/kubernetes/blob/master/docs/proposals/volume-provisioning.md)  
  - [x] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
    -  Any code that changes an API (`/pkg/apis/...`)
    -  **cc @kubernetes/api**
  - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @childsb for now.
    -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
    -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
  - [x] Identify secondary/backup contact point. **My Secondary Contact Point is:** @saad-ali
    - [x] Write (code + tests + docs) then get them merged.  [#29006](https://github.com/kubernetes/kubernetes/pull/29006)
  - [x] **Code needs to be disabled by default.**   Verified by code OWNERS
  - [x] Minimal testing
  - [x] Minimal docs
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
    - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
  - [x] Update release notes
- [x] Before Beta
  - [x] Testing is sufficient for beta
  - [x] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [x] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/volume-provisioning.md moved to docs/design/volume-provisioning.md
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Completely removed alpha behavior (annotation `volume.alpha.kubernetes.io/storage-class`).
    - **not removed, will remove in 1.7**
  - [ ] Updated e2e tests
    - not yet merged, waiting for new API in GKE. https://github.com/kubernetes/kubernetes/pull/42477
  - [x] Soak, load testing  
  - [x] detailed user docs and examples
    - [x] updated existing docs at http://kubernetes.io/docs/user-guide/persistent-volumes/ with real attributes instead of annotations
      - https://github.com/kubernetes/kubernetes.github.io/pull/2686
    - [x] updated existing examples in https://github.com/kubernetes/kubernetes/tree/master/examples/experimental/persistent-volume-provisioning with real attributes instead of annotations
      - https://github.com/kubernetes/kubernetes/pull/42637
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-20 19:09:13,2017-12-22 12:17:58
enhancements,deads2k,https://github.com/kubernetes/enhancements/issues/37,https://api.github.com/repos/kubernetes/enhancements/issues/37,Access Review APIs,"# Description

The API server should provide endpoints to allow access control checks and subject access checks without direct knowledge of the backing authorization engine.  This allows delegation of authorization.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [x] Design Approval
    - [x] Design Proposal. Upstreaming *AccessReview checks from https://github.com/openshift/origin/blob/master/docs/proposals/policy.md#apiversionnsnamespaceresourceaccessreview was agreed to some time ago in @kubernetes/sig-auth 
    - [x] Initial API review (if API).  Maybe same PR as design doc. https://github.com/kubernetes/kubernetes/pull/18722 introduced the objects
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). @deads2k @erictune 
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [x] Identify secondary/backup contact point. @liggitt 
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [x] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [x] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-20 19:41:31,2018-03-09 17:17:45
enhancements,nebril,https://github.com/kubernetes/enhancements/issues/38,https://api.github.com/repos/kubernetes/enhancements/issues/38,ConfigMaps can consume pod facts,"# Description

The idea is to add templated variables to ConfigMap values, so each time a ConfigMap is applied to a pod - it can transform the value into something specific to a pod. Right now the best example is pod IP address.
## Example

We assume that there are two possible variables that can be used to consume pod facts: `pod.IP` and `pod.name`, which evaluate to `pod.Status.podIP` and `pod.Name`.

Let's consider following ConfigMap:

``` yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: special-config
  namespace: default
data:
  service.ip: $(pod.IP)
  other.value: trololo
  service.name: $(pod.name)
```

Then we have a pod with a service that needs to put the IP of the pod in the config file `/etc/config/service.ip`.

Pod manifest can look like that:

``` yaml
apiVersion: v1
kind: Pod
metadata:
  name: pod-facts-consumer
spec:
  containers:
    - name: test-container
      image: gcr.io/google_containers/busybox
      command: [ ""/bin/sh"", ""cat"", ""/etc/config/service.ip"" ]
      volumeMounts:
      - name: config-volume
        mountPath: /etc/config
  volumes:
    - name: config-volume
      configMap:
        name: special-config
  restartPolicy: Never
```

When we create above ConfigMap and run the pod, we expect the `test-container` output to be an IP address that was assigned to the Pod.

The proof of concept implementation is demoed here: https://asciinema.org/a/e90cs3ymgtatdexk6rmjuet92

It uses the code from this fork/branch: https://github.com/nebril/kubernetes/tree/pod-facts-in-configmaps.

This feature will allow applications that need pod facts to be configured properly using just ConfigMaps. An example of such application can be Galera, which needs local IP addresses in `my.conf` file.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-21 14:11:37,2016-07-22 06:28:02
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/issues/39,https://api.github.com/repos/kubernetes/enhancements/issues/39,kubelet evicts resources when observing disk pressure,"# Description

As a cluster operator, I want the kubelet to monitor local disk usage and respond accordingly to maintain node stability.  If the kubelet observes available disk and/or inodes (rootfs or imagefs) are under pressure, the kubelet should pro-actively reclaim related resource to maintain node stability by deleting images, logs, and evicting pods.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-21 14:30:56,2018-03-14 12:09:57
enhancements,pigmej,https://github.com/kubernetes/enhancements/pull/40,https://api.github.com/repos/kubernetes/enhancements/issues/40,"Remove duplicated ""that""","Just removed duplicated ""that""
",closed,True,2016-07-21 17:23:58,2016-07-21 17:25:41
enhancements,philips,https://github.com/kubernetes/enhancements/pull/41,https://api.github.com/repos/kubernetes/enhancements/issues/41,README: cleanups to make it more compact,"We had some duplicated information in the README and some informatin
that really wasn't adding much value.

The number one question we have gotten is still ""should I file a
feature"". The number two point of contention on this repo is ""what is
the process I should follow before filing a feature"".

Make these two things the top points of the README and drop other things
that aren't really connected. In particular the coding section and
proposal sections weren't adding much value. The process for proposals
are terribly hard to discover but we shouldn't try to solve this here.
",closed,True,2016-07-22 04:57:30,2016-08-11 21:54:41
enhancements,pigmej,https://github.com/kubernetes/enhancements/issues/42,https://api.github.com/repos/kubernetes/enhancements/issues/42,AppController - statefull app deployments,"# Description

AppController will allow to work with statefull applications that involve many components (openstack for example) more easy and more native. AppController will understand dependencies between kubernetes objects and therefore it will create them in correct order.

kubernetes/kubernetes issue: https://github.com/kubernetes/kubernetes/issues/29453

cc @kubernetes/sig-openstack @kubernetes/sig-apps
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-22 14:26:36,2016-09-29 14:28:10
enhancements,philips,https://github.com/kubernetes/enhancements/issues/43,https://api.github.com/repos/kubernetes/enhancements/issues/43,Kubelet TLS Bootstrap,"# Feature Description
- One-line feature description (can be used as a release note): kubelet generates a private key and a CSR for submission to a cluster-level certificate signing process.
- Primary contact (assignee): @mikedanese
- Responsible SIGs: sig-auth
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/cluster-lifecycle/kubelet-tls-bootstrap.md
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @liggitt
- Approver (likely from SIG/area to which feature belongs): @liggitt
- Feature target (which target equals to which milestone):
  - Alpha release target (1.4)
  - Beta release target (1.6)
  - Stable release target (1.12)",closed,False,2016-07-22 16:40:44,2018-10-15 13:50:46
enhancements,hongchaodeng,https://github.com/kubernetes/enhancements/issues/44,https://api.github.com/repos/kubernetes/enhancements/issues/44,etcd v3 as storage backend for APIServer,"# Description

This feature was merged into v1.3 and is an alpha feature behind a flag. Creating a feature for tracking through the rest of the process.

etcd v3 is a new API supported by etcd v3.0.0+. There are a [number advantages of this new API](https://coreos.com/blog/etcd3-a-new-etcd.html) but there are a changes that need to happen both externally, like turning etcd v3 on by default and migration docs, and internally, like testing and continued storage improvements, to fully take advantage of etcd v3.

Why is this a feature? It slightly changes the operation of Kubernetes clusters and impacts SIG Scalabilities and SIG API Machinery work. This is already an alpha feature today that makes etcd v3 a non-default backend but there is work that remains to move from an alpha feature to a well tested complete feature.
# Progress Tracker
- [x] Before Alpha
  - [x] Design Approval
    - [x] https://github.com/kubernetes/kubernetes/issues/22448
    - [x] **My Shepherd is:** Brandon Philips brandon.philips@coreos.com @philips
    - [x] **My Secondary Contact Point is:** Mike Saparov mike.saparov@coreos.com @mike-saparov 
  - [x] Write (code + unit tests + docs) of etcd3 storage implementation:
    - [x] https://github.com/kubernetes/kubernetes/pull/23387 https://github.com/kubernetes/kubernetes/pull/23694 https://github.com/kubernetes/kubernetes/pull/23995 https://github.com/kubernetes/kubernetes/pull/24079 https://github.com/kubernetes/kubernetes/pull/24455 https://github.com/kubernetes/kubernetes/pull/24638 https://github.com/kubernetes/kubernetes/pull/25068 https://github.com/kubernetes/kubernetes/pull/25331 https://github.com/kubernetes/kubernetes/pull/25396 https://github.com/kubernetes/kubernetes/pull/25415 https://github.com/kubernetes/kubernetes/pull/25992
    - [x] TLS support: https://github.com/kubernetes/kubernetes/pull/30843
  - [x] testing
    - [x] e2e tests with etcd3: https://github.com/kubernetes/test-infra/pull/375
    - [x] switch unit tests to use v3 client: https://github.com/kubernetes/kubernetes/pull/30634, https://github.com/kubernetes/kubernetes/pull/30890 https://github.com/kubernetes/kubernetes/pull/31704
    - [x] switch integration tests to use v3 client:
  - [x] migration
    - [X] upgrade etcd image to v3.0+: https://github.com/kubernetes/kubernetes/pull/29399, https://github.com/kubernetes/kubernetes/pull/30508
    - [X] cluster bootstrap with etcd3: https://github.com/kubernetes/kubernetes/pull/30349 (GCE)
    - [X] support migration from etcd2 to etcd3: kubernetes/kubernetes#30500 (GCE)
    - [x] attaching events (the only objects with TTL) to a lease (TTL is not migratable): https://github.com/kubernetes/kubernetes/issues/20504#issuecomment-240971518, https://github.com/kubernetes/kubernetes/pull/31242
  - [x] Minimal docs
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/features-maintainers on this issue** to get approval before checking this off
    - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
  - [x] Update release notes
- [x] Before Beta
  - [x] Testing is sufficient for beta
    - [x] corretness testing for migration
    - [x] scalability testing
  - [x] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/features-maintainers on this issue** to get approval before checking this off
  - [x] Thorough API review
    - **cc @kubernetes/api**
- [x] Before Stable
  - [x] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/features-maintainers on this issue** to get approval before checking this off
  - [x] Soak, load testing
  - [x] rollback  
  - [x] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/features-maintainers on this issue** to get approval before checking this off

**FEATURE_STATUS: Stable**
",closed,False,2016-07-22 18:42:49,2017-12-23 03:19:43
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/45,https://api.github.com/repos/kubernetes/enhancements/issues/45,Finish Federated Services,"# Description

Finish the federated services that have been completed in 1.3. This description is woefully incomplete and will be fleshed out/replaced by @quinton-hoole.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-22 19:04:56,2016-09-30 22:20:16
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/46,https://api.github.com/repos/kubernetes/enhancements/issues/46,Federated ReplicaSet,"# Feature Description
- One-line feature description (can be used as a release note): Support ReplicaSets in Federation
- Primary contact (assignee): @perotinus
- Responsible SIGs: @kubernetes/sig-federation-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/09ef55a496f8928573f7f4d2a8a38d0601737ddb/contributors/design-proposals/federated-replicasets.md
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @marun
- Approver (likely from SIG/area to which feature belongs): @madhusudancs
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.5
  - Beta release target (x.y): 1.7",closed,False,2016-07-22 19:58:55,2018-02-09 18:49:31
enhancements,goltermann,https://github.com/kubernetes/enhancements/pull/47,https://api.github.com/repos/kubernetes/enhancements/issues/47,Adding release 1.3 schedule to features repo,"Adding this for parallelism to 1.4.  Will update other wikis to point here authoritatively.

@idvoretskyi @erictune 
",closed,True,2016-07-22 20:26:52,2016-07-23 03:40:46
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/48,https://api.github.com/repos/kubernetes/enhancements/issues/48,Simplify HA Setup for Master,"# Description

Simplify setup for HA Master. Description in kubernetes/kubernetes#29649
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-22 20:53:00,2017-10-27 19:43:08
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/49,https://api.github.com/repos/kubernetes/enhancements/issues/49,Handle out-of-disk and refactor intelligent disk management,"# Description

Building on the disk accounting in 1.3, handle out-of-disk and refactor intelligent disk management. Proposal will be fleshed out by @dchen1107 or assignee.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-22 20:55:37,2016-08-16 14:29:20
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/50,https://api.github.com/repos/kubernetes/enhancements/issues/50,Provide Opt-in Self-Reporting Pod,"# Description

The Kubernetes project would love to collect information about how customers are using their clusters, to help us prioritize work. The initial version of this feature would be downloaded (separate from installation) and would report on a regular basis:
- A UUID for the cluster
- How old the cluster is
- How many nodes are running on the cluster and what the profile of each node is
- How many pods, RCs, services, deployments and jobs are on the cluster

All data would be stripped of any PII before submission, and shared with the CNCF.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-22 21:00:12,2016-11-04 05:11:27
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/51,https://api.github.com/repos/kubernetes/enhancements/issues/51,Workload spreading across failure domains (fix pod anti-affinity performance problem),"# Description

As a user, I want to be able to spread workloads to multiple clusters spread across multiple failure domains to improve my application uptime. 

(Note: This is just one use case for pod affinity/anti-affinity.)
# Progress Tracker
- [ ] Before Alpha
  - [x] Write and maintain draft quality doc: _This feature was implemented in 1.3, before the features repo process existed. It was disabled by default due to performance issues, which are now fixed in 1.4._
  - [x] Design Approval
    - [x] Design Proposal.  https://github.com/kubernetes/kubernetes/blob/master/docs/design/podaffinity.md
    - [x] Initial API review (if API).  Maybe same PR as design doc. kubernetes/kubernetes#18265
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @davidopp
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  kubernetes/kubernetes#28952 kubernetes/kubernetes#29109 kubernetes/kubernetes#29379 kubernetes/kubernetes#29539
    - [x] **Code needs to be disabled by default.**   Accessed via alpha annotation.
    - [x] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-22 21:06:27,2016-10-08 12:08:32
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/52,https://api.github.com/repos/kubernetes/enhancements/issues/52,Ingress for Multi-Zone Clusters,"# Description

Provide ingress for multi-zone clusters. This description will be fleshed out by @quinton-hoole.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [x] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [x] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [x] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [x] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [x] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-22 21:07:31,2016-10-06 14:03:20
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/53,https://api.github.com/repos/kubernetes/enhancements/issues/53,Enable non-go clients: Move to OpenAPI(Swagger 2.0),"# Description

Third party orchestrators can use a clean, swagger 2.0 based interface to interact with K8s, improving the ability to build k8s clients, and letting users use tools they are familiar with, and read up to date documentation. (includes + Swagger bug fixes). This description will be fleshed out by @lavalamp.
# Progress Tracker
- [x] Basic Swagger 2.0 discovery documents are served by 1.4 kube-apiserver.

There are many planned improvements but we will treat them as bug fixes.

(lavalamp deleted all of the checkboxes that used to be here because they don't make any sense for this feature.)
",closed,False,2016-07-22 21:09:37,2017-04-19 23:03:22
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/54,https://api.github.com/repos/kubernetes/enhancements/issues/54,Redefine the Container Runtime Interface,"# Description

We should separate image management, resource / cgroup management, logging management from today's runtime interface. After this effort, we effectively make today's runtime interface as pod / container lifecycle management interface. cc @yujuhong @dchen1107 

Proposal here: https://github.com/kubernetes/kubernetes/pull/25899
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-22 21:12:39,2017-06-12 21:55:03
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/55,https://api.github.com/repos/kubernetes/enhancements/issues/55,System Correctness: Single Source for Default Values,"# Description

Developers have a single place where defaults should be coded, and kubectl doesn't need to roundtrip json before sending it to the apiserver

kubectl doesn't apply defaults or overwrite apiserver - the apiserver is the single place where defaults are intelligently created. cc @lavalamp 
- [x] https://github.com/kubernetes/kubernetes/issues/3955
",closed,False,2016-07-22 21:15:08,2018-01-02 17:01:27
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/56,https://api.github.com/repos/kubernetes/enhancements/issues/56,Define NodeSpec,"# Description

As a user, I want to add my own nodes to Kubernetes, and make sure they meet the minimum requirements for running as a Kubernetes node so that I can use pre-approved images, and speed adding new compute. cc @yujuhong @dchen1107 
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-22 21:16:30,2017-12-22 12:15:48
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/57,https://api.github.com/repos/kubernetes/enhancements/issues/57,Automate Docker Validation Process,"EDITED by @dchen1107 on Sept 23, 2016
# Description

Currently, Docker (https://www.docker.com/) is the default container runtime used by Kubernetes. Kubernetes release quality is significantly affected by Docker release quality.

The container technology evolves very rapidly, and so does Docker. Kubernetes can’t stick with a specific Docker version because
- Customers might ask for new features in new Docker release.
- Each Docker release solves some known issues and enhances the overall reliability and performance.  

Docker releases per month, and before each release there are also several pre-releases. To ensure Kubernetes compatible with new Docker release, every quarter we had to invest at least 2-week engineer time to manually validate Docker release quality. For example, for 1.3 Kubernetes release, Kubernetes engineer manually validated 
- Docker 1.9:    https://github.com/kubernetes/kubernetes/issues/16110
- Docker 1.10:  https://github.com/kubernetes/kubernetes/issues/19720
- Docker 1.11:  https://github.com/kubernetes/kubernetes/issues/23397

but we still couldn't cover all Docker (pre)release.

Thus, we developed the automated docker validation framework. It is a framework automatically validates newest Docker (pre)release against Kubernetes HEAD everyday, the validation includes functionality validation and performance validation.
# Progress Tracker
- [x] Before Alpha: proposed at https://github.com/kubernetes/kubernetes/issues/22765
  - [x] Write and maintain draft quality doc: https://docs.google.com/document/d/1eZHAPG74GR9UkDOdp2GYdOs6_rPaIAS3BS7mtKJ9rj4/edit
    - [x] Identify shepherd: @dchen1107
    - [x] Identify secondary/backup contact point. @liangchenye, @wonderfly 
- [x] Before Beta
  - [x] Initial docker micro benchmark: https://github.com/kubernetes/contrib/tree/master/docker-micro-benchmark
- [x] Before Stable
  - [x] Write (code + tests + docs) then get them merged.
    - [x] Test infrastructure work on k8s side: 
      - https://github.com/kubernetes/kubernetes/pull/26813
      - https://github.com/kubernetes/kubernetes/pull/28213
      - https://github.com/kubernetes/kubernetes/pull/28927
      - https://github.com/kubernetes/kubernetes/pull/29435
    - [x] Jenkins support:
      - https://github.com/kubernetes/test-infra/pull/113
      - https://github.com/kubernetes/test-infra/pull/173
      - https://github.com/kubernetes/test-infra/pull/280
      - https://github.com/kubernetes/test-infra/pull/283
      - https://github.com/kubernetes/test-infra/pull/304
    - [ ] Docker specific test:
      - https://github.com/kubernetes/kubernetes/pull/25471 [Pending]
    - [x] Runtime Conformance Test:
      - https://github.com/kubernetes/kubernetes/pull/20415
      - https://github.com/kubernetes/kubernetes/pull/22933
      - https://github.com/kubernetes/kubernetes/pull/24191
      - https://github.com/kubernetes/kubernetes/pull/24329
    - [ ] Runtime Performance Test:
      - https://github.com/kubernetes/kubernetes/pull/30026
      - TODO: enable performance test on docker validation infrastructure
- [ ] Docs
  - [ ] Write user docs and get them merged in.
  - [x] Publish the link to access the test result: https://k8s-testgrid.appspot.com/docker
",closed,False,2016-07-22 21:18:09,2018-03-09 18:18:38
enhancements,euank,https://github.com/kubernetes/enhancements/issues/58,https://api.github.com/repos/kubernetes/enhancements/issues/58,rkt container engine support ,"# Description

There is ongoing work for Kubernetes' support of [rkt](https://coreos.com/rkt/) as a production-ready, generally usable container runtime option. This project is sometimes called rktnetes. :rocket:

There has already been significant work to implement this feature, and as of v1.3 it's already a supported option. However, it does not yet have full feature parity with the default Docker runtime, and I would be wary of calling it ""production ready"".

In order to have a sane scope for this feature, I'd like for it to track the rkt container runtime having full support for all Kubernetes features, support in Kubernetes deployment, well documented, and a great production choice.
# Progress Tracker
- [x] Pre-release
  - [x] Write and maintain draft quality doc 
    - [x] https://kubernetes.io/docs/getting-started-guides/rkt/
  - [ ] Design Approval
    - [x] Design Proposal: Does-not-exist
    - [x]  **My Shepherd is:** @euank and see also @kubernetes/sig-rktnetes 
    - [x] **My Secondary Contact Point is:** @philips 
  - [x] Lots of PRs for code, tests, and docs.
- [x] Initial release
  - [x] Testing is sufficient for initial release
  - [x] User docs with tutorials - http://kubernetes.io/docs/getting-started-guides/rkt/ 
  - [x] Known issues are clearly documented - http://kubernetes.io/docs/getting-started-guides/rkt/notes/
- [ ] Released as fully supported/stable
  - [ ] All Kubernetes features are supported when using rkt as the container runtime
    - [x] subPath support https://github.com/kubernetes/kubernetes/pull/30934
    - [ ] Init containers -- Depends on #54
    - [ ] Privileged containers work for all known use-cases
    - [ ] Hostpath volume mounts that don't exist https://github.com/kubernetes/kubernetes/issues/26816, xref https://github.com/kubernetes/kubernetes/issues/31384
    - [ ] Kubernetes examples all work under rkt container runtime
      - [ ] Fluentd logging addon (bindmounts in docker specific directory right now)
      - [ ] to be added....
  - [ ] Well Tested
    - [x] K8s master is tested with rkt as the runtime
    - [ ] Failures against k8s master blocks merges
    - [ ] PRs are tested with rkt as the runtime
    - [ ] Failures on PRs block merges
  - [ ] Known to be used actively in at least one production environment
  - [ ] docs/design/rkt-container-runtime.md exists.
  - [ ] Soak, load testing, performance testing with awesome results  
  - [ ] detailed user docs and examples

**FEATURE_STATUS: IN_DEVELOPMENT** (I'm not sure the right status; this has had an initial release suitable for use; development is being done to improve the integration and address known issues / caveats).

cc @kubernetes/sig-node 

Short meta-note: This feature might or might not actually fit here since it's something that is and has been in progress for quite a while. Many of the bullet points don't work well for it because of its circumstances, and I'm hopeful that it can help refine this process a bit; I've taken some liberties with formatting.
",closed,False,2016-07-23 00:25:52,2017-02-28 16:09:33
enhancements,philips,https://github.com/kubernetes/enhancements/issues/59,https://api.github.com/repos/kubernetes/enhancements/issues/59,Container Image Policy,"# Description

Organizations wish to avoid running ""unapproved"" images.

The exact nature of ""approval"" is beyond the scope of Kubernetes, but may include reasons like:
- only run images that are scanned to confirm they do no contain vulnerabilities
- only run images that use a ""required"" base image
- only run images that contain binaries which were built from peer reviewed, checked-in source by a trusted compiler toolchain.
- etc...
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] **DOC-LINK**: https://docs.google.com/document/d/1u2czdRaPacwP2dtDxQr3Vg-fLjNi4UJCrxCIA_HEKLw/edit#
  - [x] Design Approval
    - [x] **PROPOSAL-NUMBER** https://github.com/kubernetes/kubernetes/pull/27129
    - [ ] Initial API review (if API).  Maybe same PR as design doc. https://github.com/kubernetes/kubernetes/pull/30241
    - [ ] **My Shepherd is:** Evan Cordell evan.cordell@coreos.com @ecordell
    - [ ] **My Secondary Contact Point is:** Brandon Philips brandon.philips@coreos.com @philips
  - [x] Write (code + tests + docs) then get them merged. https://github.com/kubernetes/kubernetes/pull/30631 
    - [x] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [x] Minimal testing
    - [x] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

**FEATURE_STATUS: Proposal review**
",closed,False,2016-07-23 01:59:29,2018-01-03 17:23:21
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/60,https://api.github.com/repos/kubernetes/enhancements/issues/60,Inter-pod affinity/anti-affinity,"Design Doc: https://github.com/kubernetes/kubernetes/blob/master/docs/design/podaffinity.md
- e.g. ""put these pods in zone us-central1-a""
- predicate and priority function are done, it was alpha in 1.2, no change in 1.3
- remaining work (low-priority since nobody has been asking for it) is to implement the ""RequiredDuringExecution"" option which means evict a pod if node labels change, or pod's affinity/anti-affinity request changes, such that the pod's affinity/anti-affinity is no longer satisfied
- In theory we could move it to Beta in 1.4 but I think we should leave it as alpha for two reasons: (1) get more people using it so we can get feedback, (2) it shares the same annotation (scheduler.alpha.kubernetes.io/affinity) with inter-pod affinity/anti-affinity (see below), and we definitely need to keep that one in alpha in 1.4
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-24 22:03:16,2018-02-19 21:18:01
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/61,https://api.github.com/repos/kubernetes/enhancements/issues/61,Forgiveness,"# Description
- taints/tolerations is a building block for this
- what it is: ""instead of the usual five minutes, wait to evict this pod until the node has been not-ready for N minutes"" (where N is selected in the pod); this is useful for stateful apps where it's painful to rebuild state on a new node
- we'll have a simple version of this in 1.4; see here: https://github.com/kubernetes/kubernetes/issues/1574#issuecomment-231004150
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc @kubernetes/api**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-24 22:04:33,2017-01-30 23:22:59
enhancements,aronchick,https://github.com/kubernetes/enhancements/issues/62,https://api.github.com/repos/kubernetes/enhancements/issues/62,Prioritized scheduling of critical cluster addon pods,"# Description

Kubernetes has ""cluster addon pods"" that provide system services but do not run on the master node. Some of them are critical to have fully functional cluster: Heapster, DNS, UI. Users can break their cluster by evicting a critical addon (either manually or as a side effect of an other operation like upgrade) which possibly can become pending (for example when the cluster is highly utilized). To avoid such situation we introduce a rescheduler component that runs on the master and guarantees that critical addons are scheduled assuming the cluster is big enough. It does this by watching for pending critical pods and evicting other pods to make room for the pending one(s). 

Design Proposal: https://github.com/kubernetes/kubernetes/pull/29195
# Progress Tracker
- [ ] Before Alpha
  - [x] Write and maintain draft quality doc. **This step was skipped, instead a design proposal was circulated (see below)**
  - [x] Design Approval
    - [x] Design Proposal. https://github.com/kubernetes/kubernetes/blob/master/docs/proposals/rescheduler.md
    - [x] Initial API review **This PR does not introduce or change an API.**
    - [x] Identify shepherd: @davidopp / @mwielgus
  - [x] Write (code + tests + docs) then get them merged.  See kubernetes/contrib/rescheduler repo, plus kubernetes/kubernetes#30870
    - [x] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [x] Minimal testing
    - [ ] Minimal docs
      - cc @kubernetes/docs on docs PR
      - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc @kubernetes/docs on docs PR
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc @kubernetes/api**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc @kubernetes/docs**
    - **cc @kubernetes/feature-reviewers on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by @kubernetes/feature-reviewers._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _@kubernetes/feature-reviewers_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning @kubernetes/feature-reviewers and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning @kubernetes/docs.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-07-25 02:05:14,2017-05-05 08:49:46
enhancements,euank,https://github.com/kubernetes/enhancements/issues/63,https://api.github.com/repos/kubernetes/enhancements/issues/63,"Support multiple image types, e.g. OCI","# Description

Currently, a Kubernetes Pod's containers are assumed to be Docker images (and to use Docker's discovery).

However, with the progress of the [OCI Image Spec](https://github.com/opencontainers/image-spec), the inclusion of the rkt runtime (which supports docker, OCI, and ACI images), it's clear that now is a good time to consider making it possible to run additional formats.

Existing discussion of this feature have already shown demand and intent to address it eventually, just not urgency.

Ref: [An old proposal](https://github.com/kubernetes/kubernetes/pull/18308), [a user's request](https://github.com/kubernetes/kubernetes/issues/7203), and [a bit more discussion](https://github.com/kubernetes/kubernetes/issues/8702).

This issue could also relate to generalizing image transport (ref https://github.com/kubernetes/kubernetes/issues/15484), but does not necessarily have to.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review: **PR-NUMBER**
    - [ ] **My Shepherd is:** (waiting to be found)
    - [ ] **My Secondary Contact Point is:** (@euank, pending shepherd)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
  - [ ] Thorough API review
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples

**FEATURE_STATUS: PENDING**

Note: This feature does not currently have a shepherd and it is likely it will not make the v1.4 milestone. I think tentatively marking it v1.5 and trying to get a shepherd and initial proposal a little before the v1.4 release would be a good thing to shoot for.
",closed,False,2016-07-25 06:53:30,2018-01-22 21:39:56
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/64,https://api.github.com/repos/kubernetes/enhancements/issues/64,Update ISSUE_TEMPLATE.md,"quote team names to reduce noise when creating a new feature
",closed,True,2016-08-09 23:53:46,2016-08-11 16:51:48
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/65,https://api.github.com/repos/kubernetes/enhancements/issues/65,Cleans up README to make it more compact,"Based on [Brandon's work](https://github.com/kubernetes/features/pull/41)
",closed,True,2016-08-11 21:43:19,2016-08-12 13:42:01
enhancements,goltermann,https://github.com/kubernetes/enhancements/pull/66,https://api.github.com/repos/kubernetes/enhancements/issues/66,"Add update to 1.4 feature complete date, and feature complete exception process",,closed,True,2016-08-17 22:08:25,2016-08-17 23:25:08
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/67,https://api.github.com/repos/kubernetes/enhancements/issues/67,Federated Secrets,"- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-22 23:12:03,2016-08-22 23:15:16
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/68,https://api.github.com/repos/kubernetes/enhancements/issues/68,Federated Secrets,"- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-22 23:13:28,2016-09-30 22:19:04
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/69,https://api.github.com/repos/kubernetes/enhancements/issues/69,Federated Namespaces,"# Description

**Add description here**
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-22 23:14:01,2016-09-30 22:18:41
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/70,https://api.github.com/repos/kubernetes/enhancements/issues/70,Federation Events,"# Description

**Add description here**
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-22 23:14:34,2016-09-30 22:18:16
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/71,https://api.github.com/repos/kubernetes/enhancements/issues/71,Federated read access to cluster API objects,"# Feature Description
- One-line feature description (can be used as a release note): Federated read access to cluster API objects
- Primary contact (assignee): li.xing1@huawei.com aka cindyxing12345@gmail.com
- Responsible SIGs: @kubernetes/sig-federation-feature-requests 
- Design proposal link (community repo): https://docs.google.com/document/d/1H2BkqSKvoCSifi7c8D2gASSJo20ocIEYDMSfNfcylBc/edit#
- Reviewer(s) - @quinton-hoole @nikhiljindal 
- Approver (likely from SIG/area to which feature belongs): @quinton-hoole
- Feature target (which target equals to which milestone):
  - Alpha release target (1.8)
  - Beta release target (1.9)
  - Stable release target (1.10)

<del>
# Description

Accessing Kubernetes resources from federation apiserver feature enables users to be able to get all or a subset of all their resources from all their Kubernetes clusters under federation by talking to federation Apiserver. Note that users will be able to get all resources from underlying clusters, not just the ones which have a corresponding federation object.

_The design doc is in progress will be uploaded soon_

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

</del>",closed,False,2016-08-23 15:46:18,2019-02-05 19:38:06
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/72,https://api.github.com/repos/kubernetes/enhancements/issues/72,Private Federated Services,"# Description

Federated services that are not exposed on public IP's or public DNS names.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-23 15:49:35,2018-02-19 17:14:02
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/73,https://api.github.com/repos/kubernetes/enhancements/issues/73,"Federation per-user cluster authentication, authorization and audit logging","# Feature Description
- One-line feature description (can be used as a release note):
- Primary contact (assignee): @nikhiljindal 
- Responsible SIGs: @kubernetes/sig-federation-feature-requests 
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

<del>
# Description

In v1.3, v1.4 of Cluster Federation, the Kubernetes v1.3 style authentication model is used.  A single set of credentials per cluster is used by the federation control plane to access underlying clusters on behalf of all users of the federation.  The underlying clusters have no idea who the federation user on behalf of whom the federation control plane is acting is.

In this enhancement, each federation user will be individually authenticated, authorized and tracked in underlying clusters.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
</del>",closed,False,2016-08-23 16:00:17,2018-02-24 13:07:50
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/74,https://api.github.com/repos/kubernetes/enhancements/issues/74,Federation: Generalized Cluster Selection and Weighting,"# Feature Description
- One-line feature description (can be used as a release note):
- Primary contact (assignee): @marun 
- Responsible SIGs: @kubernetes/sig-federation-feature-requests 
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

<del>
# Description

Many of the existing (v1.4) federated API objects are by default scheduled across all underlying clusters (e.g. federated services, namespaces, secrets, ingress...).  Federated replicasets support a set of alpha annotations by which the user can influence replica placement.  This alpha concept is extended to a fully supported API for scheduling entities across multiple clusters and cloud providers.

The beginnings of a design proposal are here:

https://docs.google.com/document/d/1dbKS6banuv44eEUm4YLNvEI0lDa1dpI-Z1E4MWeEyxQ/edit?ts=58f4e60e

# Progress Tracker
- [ ] Before Alpha
  - [x] Write and maintain draft quality doc https://docs.google.com/document/d/1dbKS6banuv44eEUm4YLNvEI0lDa1dpI-Z1E4MWeEyxQ/edit?ts=58f4e60e
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
</del>",closed,False,2016-08-23 21:10:43,2018-02-28 22:51:50
enhancements,ardnaxelarak,https://github.com/kubernetes/enhancements/issues/75,https://api.github.com/repos/kubernetes/enhancements/issues/75,Allow namespace rather than kubelet to supply the added DNS client config,"# Description

The use case for this new feature is a Kubernetes operator who is providing a multi-tenant service based on namespaces.  Each namespace belongs to one tenant.  One tenant should not have a view of the whole cluster; rather the tenant's view should be constricted properly.

There are a few facets to this problem.  One of them is the DNS client configuration applied in the tenant's pods.  The k8s API has an optional `dnsPolicy` field in a `PodSpec`, and that field's value can be either `ClusterFirst` or `Default`; the default behavior is that of `ClusterFirst`.  The `Default` setting means that the pod uses its host's DNS client configuration.  The `ClusterFirst` setting means that the pod's DNS client configuration ignores the host's DNS client configuration and gives the pod only settings based on the kubelet arguments.  The kubelet's `--cluster-dns` parameter, if supplied, is prepended to the DNS server list.  The domain search list is prepended by the kubelet's `--cluster-domain` parameter if there is one, and then `svc.cluster.local` `cluster.local` (where the `cluster.local` part can be varied by another kubelet parameter) unconditionally.

The idea in this proposal is to allow a namespace to override the behavior of the `ClusterFirst` setting to make it mean that the stuff prepended comes from a new namespace field rather than kubelet parameters.  We introduce into `NamespaceSpec` an optional field `dnsClientConfig` of a new type `DNSClientConfig`.  A `DNSClientConfig` holds a list of DNS server addresses and a list of strings (search domains).  If the `dnsClientConfig` is present in a namespace then for every pod in that namespace the `ClusterFirst` behavior is to derive the pod's DNS client config by prepending the contents of the namespace's `DNSClientConfig` (rather than the settings derived from the kubelet parameters) to the config from the host.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-24 20:07:08,2018-02-17 22:32:06
enhancements,ConnorDoyle,https://github.com/kubernetes/enhancements/issues/76,https://api.github.com/repos/kubernetes/enhancements/issues/76,Opaque integer resources,"This feature provides a simple way to advertise some amount of arbitrary countable resource for a node in a Kubernetes cluster. Users can consume these resources by including them in pod specs, and the scheduler takes them into account when placing pods on nodes.

**Issues:**
- https://github.com/kubernetes/kubernetes/issues/28312
- https://github.com/kubernetes/kubernetes/issues/19082

**Related:**
- https://github.com/kubernetes/kubernetes/issues/19080
# Progress Tracker
- [ ] Before Alpha
  - [X] Write and maintain draft quality doc
    - [x] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: http://goo.gl/IoKYP1, http://goo.gl/xu697K
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [X] Initial API review (if API).  Maybe same PR as design doc. [PR 31652](https://github.com/kubernetes/kubernetes/pull/31652)
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [X] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @timothysc (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [X] Identify secondary/backup contact point. **My Secondary Contact Point is:** @davidopp (and/or GH Handle)
  - [X] Write (code + tests + docs) then get them merged.  [PR 31652](https://github.com/kubernetes/kubernetes/pull/31652)
    - [x] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [X] Minimal testing
    - [x] Minimal docs
      - cc `@kubernetes/docs` on docs PR [DOCS PR 1783](https://github.com/kubernetes/kubernetes.github.io/pull/1783)
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-24 23:00:47,2018-01-22 14:38:03
enhancements,goltermann,https://github.com/kubernetes/enhancements/pull/77,https://api.github.com/repos/kubernetes/enhancements/issues/77,Kubernetes 1.5 schedule,,closed,True,2016-08-25 01:40:53,2016-08-25 20:20:13
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/78,https://api.github.com/repos/kubernetes/enhancements/issues/78,Update the 1.5 release date to Mon Nov 7,"In the 1.4 schedule, the release date for 1.5 was off.
",closed,True,2016-08-25 20:24:35,2016-08-25 20:30:08
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/79,https://api.github.com/repos/kubernetes/enhancements/issues/79,New Volume Plugin: Azure Data Disk,"# Description

Add volume plugin for [Azure Data Disk](https://azure.microsoft.com/en-us/documentation/articles/virtual-machines-windows-about-disks-vhds/#data-disk).
# Progress Tracker
- [x] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [x] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [x] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [x] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-25 21:09:10,2017-01-23 23:15:55
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/80,https://api.github.com/repos/kubernetes/enhancements/issues/80,New Volume Plugin: Quobyte,"# Description

Add volume plugin for [Quobyte](https://www.quobyte.com/).
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-25 21:11:57,2017-01-23 23:15:45
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/81,https://api.github.com/repos/kubernetes/enhancements/issues/81,Federated Services,"# Description

**Add description here**
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-25 21:43:18,2016-09-30 22:17:14
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/82,https://api.github.com/repos/kubernetes/enhancements/issues/82,Federated Ingress for GCP,"# Description

**Add description here**
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-25 21:45:37,2016-09-30 22:16:27
enhancements,dchen1107,https://github.com/kubernetes/enhancements/issues/83,https://api.github.com/repos/kubernetes/enhancements/issues/83,Node Performance Benchmark,"# Description

Node Performance Benchmark
# Progress Tracker
- [x] Before Alpha: Initially proposed at https://github.com/kubernetes/kubernetes/issues/23349#issuecomment-200484407
  - [x] Write and maintain draft quality doc:
    - [x] Initial doc: https://drive.google.com/file/d/0B5b9gVHyDCGPa2dISk1xa1lmOTQ/view
    - [x] Demo slide: https://drive.google.com/a/google.com/file/d/0B5b9gVHyDCGPYklzS1BuOEFlUzQ/view
  - [x] Design Approval: @dchen1107 
    - [x] Identify shepherd: @dchen1107
    - [x] Identify secondary/backup contact point: @Random-Liu 
  - [ ] Write (code + tests + docs) then get them merged. 
    - [x] Performance related node e2e tests (density test and resource usage tests):
      - https://github.com/kubernetes/kubernetes/pull/29764
      - https://github.com/kubernetes/kubernetes/pull/30026
      - https://github.com/kubernetes/kubernetes/pull/30333
      - https://github.com/kubernetes/kubernetes/pull/30568
      - https://github.com/kubernetes/kubernetes/pull/30786
      - https://github.com/kubernetes/kubernetes/pull/31185
    - [x] Test Infrastructure (benchmark jenkins ci job):
      - https://github.com/kubernetes/kubernetes/pull/30425
      - https://github.com/kubernetes/kubernetes/pull/31039
      - https://github.com/kubernetes/test-infra/pull/426
      - https://github.com/kubernetes/kubernetes/pull/31164
    - [ ] Kubelet tracing:
      - https://github.com/kubernetes/kubernetes/pull/31280 (pending)

**FEATURE_STATUS: IN_DEVELOPMENT**

Docs
- [x] Write user docs and get them merged in: https://github.com/kubernetes/contrib/blob/master/node-perf-dash/README.md
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-25 23:36:12,2018-03-09 17:17:45
enhancements,dchen1107,https://github.com/kubernetes/enhancements/issues/84,https://api.github.com/repos/kubernetes/enhancements/issues/84,Node Conformance Test,"# Description

Node Conformance Test (This is part of Kubernetes NodeSpec effort: https://github.com/kubernetes/features/issues/56)
# Progress Tracker
- [x] Before Alpha
  - [x] Pre-requisite: Built node e2e test infrastructure: https://docs.google.com/document/d/1Q3R-wmPDJesFz-MoLEZxlNZwDgRCenhzwETunIqPNK4/edit#heading=h.kjny7qtri1e1
    - [x] Identify shepherd: @dchen1107, @pwittrock 
    - [x] Identify secondary/backup contact point: @k8s/sig-node
  - [ ] Write (code + tests + docs) then get them merged.  
    - [x] Node Conformance Test planning:
      - https://github.com/kubernetes/kubernetes/issues/30174
    - [x] Test framework enhancement+Improve test coverage:
      - https://github.com/kubernetes/kubernetes/issues/29081
      - https://github.com/kubernetes/kubernetes/pull/28807
      - https://github.com/kubernetes/kubernetes/pull/29806
      - https://github.com/kubernetes/kubernetes/pull/29807
      - https://github.com/kubernetes/kubernetes/pull/29809
      - https://github.com/kubernetes/kubernetes/pull/29814
      - https://github.com/kubernetes/kubernetes/pull/29020
      - https://github.com/kubernetes/kubernetes/pull/29092
    - [x] Refactor test framework and package node conformance test
      - https://github.com/kubernetes/kubernetes/issues/30122
      - https://github.com/kubernetes/kubernetes/pull/30348
      - https://github.com/kubernetes/kubernetes/pull/30540
      - https://github.com/kubernetes/kubernetes/pull/30116
      - https://github.com/kubernetes/kubernetes/pull/30211
      - https://github.com/kubernetes/kubernetes/pull/30198
      - https://github.com/kubernetes/kubernetes/pull/30200
      - https://github.com/kubernetes/kubernetes/pull/31093
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-08-26 17:33:45,2018-03-09 18:18:36
enhancements,davidopp,https://github.com/kubernetes/enhancements/issues/85,https://api.github.com/repos/kubernetes/enhancements/issues/85,PodDisruptionBudget and /eviction subresource,"# Description

Various cluster management operations may ""voluntarily"" evict pods. By ""voluntary"" we mean the operation can be safely delayed for a reasonable period of time. The principal examples today are draining a node for maintenance or upgrade (`kubectl drain`), and cluster autoscaling down. In the future we will have the [rescheduler](https://github.com/kubernetes/kubernetes/blob/master/docs/proposals/rescheduling.md) and possibly other examples. (In contrast, something like evicting pods because a node has become unreachable or reports NotReady, is not ""voluntary."") For these ""voluntary"" evictions it can be useful for applications to be able to limit the number of pods that are down, or the rate with which pods are evicted. For example, a quorum-based application would like to ensure that the number of replicas running is never brought below the number needed for a quorum, even temporarily. Or a web front end might want to ensure that the number of replicas serving load never falls below a certain percentage of the total, even briefly. `PodDisruptionBudget` is an API object that specifies the minimum number or percentage of replicas of a collection that must be up at a time, and/or the maximum eviction rate across the collection. Components that wish to eviction a pod subject to disruption budget use the `/eviction` subresource on pod; unlike a regular pod deletion, this operation may be rejected by the API server if the eviction would cause a disruption budget to be violated.

kubernetes/kubernetes#12611
# Progress Tracker
- [ ] Before Alpha
  - [x] Design Approval
    - [x] Design Proposal: [here](https://github.com/kubernetes/kubernetes/blob/master/docs/proposals/rescheduling.md), discussion was in kubernetes/kubernetes#22217
    - [x] Initial API review (if API).  Maybe same PR as design doc. kubernetes/kubernetes#12611 kubernetes/kubernetes#24697
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _@davidopp_ 
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [x] Write (code + tests + docs) then get them merged.  kubernetes/kubernetes#24697 kubernetes/kubernetes#25551 kubernetes/kubernetes#25288 kubernetes/kubernetes#25297 kubernetes/kubernetes#25921 kubernetes/kubernetes#30800 kubernetes/kubernetes#31033
    - [x] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [x] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",open,False,2016-08-30 05:21:27,2019-02-05 06:01:38
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/86,https://api.github.com/repos/kubernetes/enhancements/issues/86,Update proposed 1.4 release date,"...to reflect our current targeted date of 20 September 2016
",closed,True,2016-09-07 18:10:43,2016-09-07 18:11:39
enhancements,goltermann,https://github.com/kubernetes/enhancements/pull/87,https://api.github.com/repos/kubernetes/enhancements/issues/87,One more place to change release date.,,closed,True,2016-09-07 18:16:13,2016-09-08 02:57:24
enhancements,errordeveloper,https://github.com/kubernetes/enhancements/issues/88,https://api.github.com/repos/kubernetes/enhancements/issues/88,Support out-of-process and out-of-tree cloud providers,"Feature Description: 
Support out-of-tree and out-of-process cloud providers, a.k.a pluggable cloud providers. 

Feature Progress:
In order to complete this feature, cloud provider dependencies need to be moved out the the following Kubernetes binaries, then docs and tests need to be added. The Links to the right hand side of the binary denote the PRs that lead to the completion of the sub-feature

1. Kube-controller-manager - 

- https://github.com/kubernetes/kubernetes/pull/34273,
- https://github.com/kubernetes/kubernetes/pull/36785,
- https://github.com/kubernetes/kubernetes/pull/39394,
- https://github.com/kubernetes/kubernetes/pull/41856,
- https://github.com/kubernetes/kubernetes/pull/42604,
- https://github.com/kubernetes/kubernetes/pull/43777

2. Kubelet

- https://github.com/kubernetes/kubernetes/pull/44258


3. Docs

- https://github.com/kubernetes/kubernetes.github.io/pull/2900

4. Tests
```
e2e Tests - Incomplete
```

The cloud-specific functionality of the above features needs to be moved into a new binary called cloud-controller-manager that support a plugin architecture. 

Primary Contact: @wlan0

Responsible SIG: @k8s-mirror-cluster-lifecycle-feature-re 

Design Proposal Link: https://github.com/kubernetes/community/pull/128

Reviewers:
@luxas 
@roberthbailey 
@thockin 

Approver: 
@thockin 

Feature Target:
Alpha: 1.7
Beta: 1.8
Stable: 1.10

---

Here's an updated status report for this feature, please let me know if anything needs clarification:

## Beta (starting v1.11)
* The common interface used by cloud providers has been well tested and support will not be dropped, though implementation details may change. Any methods that are deprecated should follow the Kubernetes Deprecation Policy.
* The cloud controller manager has been tested by various cloud providers and is considered safe to use for out-of-tree providers. Features to be deprecated that are part of the cloud controller manager (controllers, component flags, etc) will follow the Kubernetes Deprecation Policy.
* The cloud controller manager does not run in any cluster by default. It must be explicitly turned on and added like any other control plane component. Instructions for setup may slightly vary per cloud provider. More details [here](https://kubernetes.io/docs/tasks/administer-cluster/developing-cloud-controller-manager/). 

## Reasoning for Graduation
There were a few things on our TODO list that we wanted to get done before graduating to beta such as collecting E2E tests from all providers & improving out-of-tree storage. However, many of these initiatives require collaboration from external parties that was delaying progress on this effort. In addition, there was uncertainty since we do not develop some of the components we rely on, a good example is whether CSI would be able to meet demands for out-of-tree storage that was on par with in-tree storage support. Though in hindsight we have more confidence in CSI, prior to its beta release it was unclear if it would meet our requirements. With this context in mind, we had decided to graduate to beta because:
* blocking out-of-tree cloud providers from going beta meant that less in-tree providers will adopt this feature. 
* some goals (like E2E tests from cloud providers) requires a significant amount of collaboration and may unnecessarily block progress for many releases. 
* features that are lacking from the cloud controller manager (mainly storage) would be handled by future projects from other SIGs (e.g. CSI by SIG Storage). 

## Goals for GA (targetted for v1.13/v1.14)
* Frequently collect E2E tests results from all in-tree & out-of-tree cloud providers  https://github.com/kubernetes/community/pull/2224 
* Cloud Provider Documentation includes:
    * “Getting Started” documentation - outlines the necessary steps required to stand up a Kubernetes cluster. 
    * Documentation outlining all cloud provider features such as LoadBalancers, Volumes, etc. There should be docs providing a high-level overview and docs that dig into sufficient details on how each feature works under the hood. 
    * Docs should also be centralized in an automated fashion where documentation from all cloud providers are placed into a central location (ideally https://kubernetes.io/docs/home/).  
*  A well-documented plan exists for how to migrate a cluster from using in-tree cloud provider to out-of-tree cloud provider, this only applies to AWS, Azure, GCP, OpenStack, and VMWare.
* All current cloud providers have implemented an out-of-tree solution, deprecation of in-tree code is preferred but not a requirement.",closed,False,2016-09-12 06:01:12,2019-01-17 01:02:05
enhancements,liggitt,https://github.com/kubernetes/enhancements/issues/89,https://api.github.com/repos/kubernetes/enhancements/issues/89,Authenticated/Authorized access to kubelet API,"# Description

The kubelet API gives access to a wide variety of resources.

Allow authenticating requests to the kubelet API using any of:
- x509 client certs
- bearer token (validated using the TokenReview API)
- anonymous authentication (default in 1.0-1.4)

Allow authorizing requests to the kubelet API using one of:
- SubjectAccessReview API
- AlwaysAllow (default in 1.0-1.4)
# Progress Tracker
- [x] Before Alpha
  - [x] Write and maintain draft quality doc
    - [x] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. https://github.com/liggitt/kubernetes.github.io/blob/kubelet-authnz/docs/admin/kubelet-authentication-authorization.md
  - [x] Design Approval
    - [x] Design Proposal: https://github.com/kubernetes/kubernetes/pull/32518
    - [x] **My Shepherd is:** @liggitt
    - [x] **My Secondary Contact Point is:** @deads2k @erictune 
  - [x] Write (code + tests + docs) then get them merged.
    - [x] https://github.com/kubernetes/kubernetes/pull/32597 - refactor authentication webhook
    - [x] https://github.com/kubernetes/kubernetes/pull/34071 - refactor authorization webhook
    - [x] https://github.com/kubernetes/kubernetes/pull/34381 - kubelet authn/authz
    - [x] **Code needs to be disabled by default.**
    - [x] Minimal testing
    - [x] Minimal docs
      - https://github.com/kubernetes/kubernetes.github.io/issues/1684
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
    - [x] Update release notes (release notes in https://github.com/kubernetes/kubernetes/pull/34381)
- [x] Before Beta
  - [x] Testing is sufficient for beta
  - [x] User docs with tutorials
    - https://github.com/kubernetes/kubernetes.github.io/issues/1684
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

**FEATURE_STATUS: IN_DEVELOPMENT**
",closed,False,2016-09-12 18:37:49,2018-01-02 16:31:43
enhancements,goltermann,https://github.com/kubernetes/enhancements/pull/90,https://api.github.com/repos/kubernetes/enhancements/issues/90,"Add ""choose repo"" to features issue template",,closed,True,2016-09-12 22:14:22,2017-03-24 18:57:33
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/91,https://api.github.com/repos/kubernetes/enhancements/issues/91,Fixed 1.4 release date,,closed,True,2016-09-13 12:25:43,2016-09-13 17:59:35
enhancements,stevesloka,https://github.com/kubernetes/enhancements/issues/92,https://api.github.com/repos/kubernetes/enhancements/issues/92,Encrypt secrets in etcd,"# Description
- One-line feature description (can be used as a release note):
Encrypt secrets stored in etcd.
- Primary contact (assignee): 
  - @smarterclayton 
- Responsible SIGs: @kubernetes/sig-auth-feature-requests 
- Design proposal link (community repo):
https://github.com/kubernetes/community/pull/454
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  - @saad-ali 
  - @destijl
  - @liggitt 
- Approver (likely from SIG/area to which feature belongs):
  - @liggitt 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
    - 1.7
  - Beta release target (x.y)
    - 1.8
  - Stable release target (x.y)
    - 1.9",closed,False,2016-09-13 13:33:22,2018-12-04 13:34:44
enhancements,chakri-nelluri,https://github.com/kubernetes/enhancements/issues/93,https://api.github.com/repos/kubernetes/enhancements/issues/93,Flex volume API and Improved lifecycle (flexvolume),"# Description

Existing flex volume plugin enables administrators/vendors to create out-of-tree volume plugins, i.e., plugins which do not reside in Kubernetes project. But, it has the following gaps.

It lacks support for the latest enhancements to in-tree plugins like dynamic provisioning and centralized attach-detach controller
It does not define a stable driver api for administrators/vendors to work.
The current flex volume plugin deployment model is not suitable for environments like GCE & CoreOS, where access to the root file system is restricted. And in other environments the overall user experience is poor, as it requires manual installation of the plugin on every node and restart of kubelets & controller manager.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-09-13 20:44:08,2017-09-01 14:59:37
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/94,https://api.github.com/repos/kubernetes/enhancements/issues/94,AWS: External tagger controller,"# Description

There are a lot of different ways for how things should be tagged on AWS.  Rather than immediately try to put them all into core, we should create a customizable controller that can configure various policies.  It can probably be configured using a configmap (maybe containing templates)

In particular, it would be nice to be able to tag ELBs with:
- A friendly name tag
- Billing / owner tags
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-09-14 16:20:18,2018-02-18 22:56:01
enhancements,deads2k,https://github.com/kubernetes/enhancements/issues/95,https://api.github.com/repos/kubernetes/enhancements/issues/95,"CustomResourceDefinitions, née ThirdPartyResources","# CustomResourceDefinitions, née Third Party Resources

- **One-line feature description (can be used as a release note):**
  - The deprecated ThirdPartyResource API is now removed. If you have any TPRs, you should [migrate them to CRD](https://kubernetes.io/docs/tasks/access-kubernetes-api/migrate-third-party-resource/) before upgrading to 1.8.
  - Add validation, defaulting, and subresources for CRD.
- **Primary contact (assignee):** @deads2k, @enisoc, @sttts
- **Responsible SIGs:** sig-api-machinery, sig-apps
- **Design proposal link (community repo):**
  - [Moving ThirdPartyResources to beta](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/thirdpartyresources.md)
  - [Versioning](kubernetes/community#2026)
  - [Validation](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/customresources-validation.md)
  - [Subresources](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/customresources-subresources.md)
- **Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:**
  - @enisoc
  - @deads2k
- **Approver (likely from SIG/area to which feature belongs):**
  - @deads2k
- **Feature target (which target equals to which milestone):**
  - **Alpha release target:** Already released.
  - **Beta release target:** released in v1.7
  - **Stable release target:**

## Scope of work planned for v1.11

- Implement first steps of CRD versioning. This has another features issue: https://github.com/kubernetes/features/issues/544. Design proposal: https://github.com/kubernetes/community/pull/2026.
- Add pruning and defaulting for custom resources.
- Support maps in the CRD validation schema. https://github.com/kubernetes/kubernetes/issues/59485
- Implement quota support for custom resources (this can be considered as a bug fix too) https://github.com/kubernetes/kubernetes/issues/53777

## Scope of work planned for v1.10

- Finish CRD sub-resources as alpha https://github.com/kubernetes/community/pull/913
- Support categories for CRDs.

## Scope of work planned for v1.9

- CRD validation to beta https://github.com/kubernetes/kubernetes/issues/22768 https://github.com/kubernetes/kubernetes/issues/53829

## Scope of work planned for v1.8

- Remove deprecated ThirdPartyResource API.
- Add validation ~~and defaulting~~ for CustomResourceDefinition.
- Add subresources for CustomResourceDefinition.
  - Support Spec/Status split (/status subresource) on custom resources.
  - Support incrementing object Generation on custom resource data mutation (requires Spec/Status split).
- Support OwnerReference-based garbage collection with CRD.

## Scope of work planned for v1.7

- Move TPR to a new API group (tentatively called `apiextensions`) to support [deprecation of the `extensions` group](https://github.com/kubernetes/kubernetes/issues/43214)
  - Ideally, implement the new TPR in a separate API server, to be integrated into kube-apiserver via [API Aggregation](https://github.com/kubernetes/features/issues/263).
- For now, only allow 1 version at a time per TPR. In the absence of conversion (which is out of scope for this release), this is necessary to [remain consistent with the expectations of other components](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/thirdpartyresources.md#desired-api-semantics).
  - Support for multiple versions could be added (with or without conversion) in a later release.
- Fix name conflicts due to lossy conversion of TPR name into resource/kind.
- Allow TPRs to specify their own names for resources and kinds, rather than tying them to the TPR name.
- Allow TPRs to register short names that will be discoverable by kubectl.
- Allow TPRs to optionally be cluster-scoped rather than namespaced.
- Define and document a process to migrate from `extensions/v1beta1` TPR, possibly requiring brief downtime for TPR custom controllers and operators.
  - Where possible, provide automated tools to help with migration.
- A finalizer ensures CR data is deleted if a CRD is deleted.
- Fix TPR/CRD data cleanup upon namespace deletion for the 3rd time, this time with a regression test.

## Other plans *not* in scope for this release

- Support multiple versions at the same time for a given TPR.
  - Other components (e.g. GC, namespace finalizers) expect [automatic conversion](https://github.com/kubernetes/community/blob/master/contributors/devel/api_changes.md#operational-overview). TPR currently does not support that.
  - Note that it's possible to change the single registered version of a TPR, but it requires brief downtime for TPR custom controllers and operators.
  - The `extensions/v1beta1` TPR gives the appearance of supporting multiple versions, but multiple version support was never implemented.
- Support customizing where TPR APIs appear in discovery, relative to other TPRs or other APIs.
- Support namespace-scoped CRD whose CRs are only visible in one namespace.

## Plans with unclear status

Still investigating or TBD. Please comment/edit with any updates.

- Improve the display of TPRs in kubectl/dashboard.
  - There may be other feature trackers addressing this.",open,False,2016-09-30 12:16:20,2019-01-16 16:41:01
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/96,https://api.github.com/repos/kubernetes/enhancements/issues/96,"Removing the word ""before"" (stage) in the feature checklist","The terms ""before alpha"", ""before beta"", ""before stable"" may confuse the actual meaning of the section. 
I'd like to name the section with the ""stage"" purely, while checked or unchecked bullet will define the actual status of the feature.
",closed,True,2016-09-30 13:17:05,2016-10-04 11:28:38
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/97,https://api.github.com/repos/kubernetes/enhancements/issues/97,It should be fast and painless to deploy a Federation of Kubernetes clusters,"# Description
- It should be easy to deploy a Federation control plane into one (or more) clusters using a single kubectl command
- It should be easy to add a cluster to a Federation using a single kubectl command (including configuring credentials/secrets)
- It should be easy to add a new cluster to a federation while creating the cluster using kubeadm
- It should be easy to include a federation control plane when creating a new cluster using kubeadm
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: https://github.com/kubernetes/kubernetes/pull/34484 (Yet to be merged)
    - [x] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. Core - **[kubernetes/kubernetes](https://github.com/kubernetes/kubernetes)**
    - ~~[ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**~~
      -  ~~Any code that changes an API (`/pkg/apis/...`)~~
      -  ~~**cc `@kubernetes/api`**~~
    - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @quinton-hoole
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [x] Identify secondary/backup contact point. **My Secondary Contact Point is:** @allannaim (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [x] **Code needs to be disabled by default.**   Verified by code OWNERS. -  I am the OWNER of the code. This need not be disabled by default. This is a new command line tool we are shipping. So people need to voluntarily use it.
    - [ ] Minimal testing - Very good unit test coverage. End-to-end testing is mostly manual at this point. Automated tests PR is out for review, needs one small change - https://github.com/kubernetes/kubernetes/pull/35961
    - [ ] Minimal docs - https://github.com/kubernetes/kubernetes.github.io/pull/1822
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [x] Update release notes
- [ ] Before Beta
  - [x] Testing is sufficient for beta
  - [ ] User docs with tutorials: https://github.com/kubernetes/kubernetes.github.io/pull/2899
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-09-30 22:28:17,2018-02-20 09:30:00
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/98,https://api.github.com/repos/kubernetes/enhancements/issues/98,Hybrid Cloud Federated Ingress,"# Description

Federated Ingress should work across hybrid-cloud federations (initially across Google Cloud and AWS).

In v1.4, Federated Ingress is only supported on Google Cloud.  ([User Guide](http://kubernetes.io/docs/user-guide/federation/federated-ingress/).

Extend this to support federations across both GCP and AWS clusters.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-09-30 22:34:49,2018-02-20 22:43:13
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/99,https://api.github.com/repos/kubernetes/enhancements/issues/99,"Federation: Support generalized deletions, including cascading and finalizers","# Feature Description
- One-line feature description (can be used as a release note):
- Primary contact (assignee): @nikhiljindal 
- Responsible SIGs: @kubernetes/sig-federation-feature-requests 
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

<del>
# Description

TBD
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
</del>",closed,False,2016-09-30 22:37:01,2018-02-23 17:48:52
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/100,https://api.github.com/repos/kubernetes/enhancements/issues/100,Federated Deployments,"# Description

See [proposal doc](https://docs.google.com/document/d/1Vi_CKah8oR5ByPp8BlgUD0SoINMD1SE0iMQf_2BKlpw/edit)
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-09-30 22:39:13,2018-02-19 20:17:05
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/101,https://api.github.com/repos/kubernetes/enhancements/issues/101,Federated Daemonset,"# Description

TBD  
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-09-30 22:43:02,2018-02-19 21:18:00
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/102,https://api.github.com/repos/kubernetes/enhancements/issues/102,Federation: Per-user cluster authentication,"# Description

TBD

cc @kubernetes/sig-cluster-federation @kubernetes/sig-auth @nikhiljindal 

**Add description here**
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-09-30 22:44:54,2016-10-21 01:07:13
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/103,https://api.github.com/repos/kubernetes/enhancements/issues/103,Federation: Metrics-based Cluster Selection,"# Description

TBD  

cc @kubernetes/sig-cluster-federation @kubernetes/sig-scheduling @kubernetes/huawei 
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-09-30 22:48:26,2018-02-16 09:56:03
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/104,https://api.github.com/repos/kubernetes/enhancements/issues/104,HA Federation Control Plane,"# Description

As per Kubernetes HA Control plane, but spanning multiple clusters.

cc @kubernetes/sig-cluster-federation @kubernetes/sig-scheduling @kubernetes/huawei 
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-09-30 23:12:35,2018-02-19 17:14:03
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/105,https://api.github.com/repos/kubernetes/enhancements/issues/105,Federated ConfigMap,"# Description

cc @kubernetes/sig-cluster-federation @kubernetes/sig-config 
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-09-30 23:15:44,2018-02-21 14:59:01
enhancements,davidopp,https://github.com/kubernetes/enhancements/issues/106,https://api.github.com/repos/kubernetes/enhancements/issues/106,Node affinity,"# Description

Significantly expanded version of `nodeSelector`. Pods can limit which nodes are eligible for them to schedule on, or tell the scheduler they prefer certain nodes, based on label selectors. 

This feature has been in Kubernetes since 1.2. I'm just filing this issue so we can track moving it to Beta, which we plan to do in 1.5 (kubernetes/kubernetes#25319).

Design doc discussion in kubernetes/kubernetes#18261 and checked in [here].(https://github.com/kubernetes/kubernetes/blob/master/docs/design/nodeaffinity.md)
Implementation in kubernetes/kubernetes#19758
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-01 08:58:03,2018-05-17 04:40:12
enhancements,davidopp,https://github.com/kubernetes/enhancements/issues/107,https://api.github.com/repos/kubernetes/enhancements/issues/107,Multiple/user-defined schedulers,"# Description

Users and cluster administrators can run their own custom scheduler(s) as (a) pod(s) on the cluster, instead of or alongside of the default scheduler, and add an annotation to some or all pods to indicate which scheduler should be responsible for scheduling the pod. 

Design doc discussion in kubernetes/kubernetes#17197 and checked in [here](https://github.com/kubernetes/kubernetes/blob/master/docs/proposals/multiple-schedulers.md).
Feature was implemented in kubernetes/kubernetes#17865

This feature has been in Kubernetes since 1.2. I am just filing an issue so we can track moving it to Beta (kubernetes/kubernetes#25318), which we plan to do in 1.5.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-01 09:06:56,2018-02-20 03:24:01
enhancements,davidopp,https://github.com/kubernetes/enhancements/issues/108,https://api.github.com/repos/kubernetes/enhancements/issues/108,Taints/tolerations,"# Description

Design doc discussion in kubernetes/kubernetes#18263, checked in [here](https://github.com/kubernetes/kubernetes/blob/master/docs/design/taint-toleration-dedicated.md).

Implementation in kubernetes/kubernetes#24134

This feature first appeared in Kubernetes 1.4. I'm filing the issue to track moving it to Beta in 1.5 (kubernetes/kubernetes#25320).

See also #61
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-01 09:13:59,2018-02-20 04:25:00
enhancements,davidopp,https://github.com/kubernetes/enhancements/issues/109,https://api.github.com/repos/kubernetes/enhancements/issues/109,Rescheduler,"# Feature Description
- One-line feature description (can be used as a release note):
- Primary contact (assignee): @davidopp @aveshagarwal 
- Responsible SIGs: @kubernetes/sig-scheduling-feature-requests 
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

<del>
# Description

A component that evicts pods (that are managed by a controller) to achieve some set of objectives.

This feature needs a detailed design doc; an initial design proposal is [here](https://github.com/kubernetes/kubernetes/blob/master/docs/proposals/rescheduling.md).
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
</del>",closed,False,2016-10-01 09:22:38,2018-03-12 10:21:33
enhancements,davidopp,https://github.com/kubernetes/enhancements/issues/110,https://api.github.com/repos/kubernetes/enhancements/issues/110,Cluster-level priority and preemption,"# Description

A mechanism of assigning relative priorities to pods such that when scheduling a new pod, one or more already-running pods of lower (or possibly equal, depending on the design) priority may be evicted (""preempted"") from a node in order to free up sufficient resources for the new pod to schedule there. Presumably preemption is only employed when there is no node where the pod can schedule without preemption.

This feature needs a detailed design doc; an initial proposal is [here](https://github.com/kubernetes/kubernetes/blob/master/docs/proposals/rescheduling.md).
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-01 09:28:45,2017-04-29 00:40:42
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/111,https://api.github.com/repos/kubernetes/enhancements/issues/111,Feature tracking links added,,closed,True,2016-10-03 08:46:42,2016-10-04 11:28:17
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/112,https://api.github.com/repos/kubernetes/enhancements/issues/112,Addon manager,"# Description

We should create an addon manager that addresses the following pain points:

1) kube-addons makes it hard for users to edit / manage addons
2) we should make it easier to add an addon
3) we should have a repository of addons, and make it easy for projects to publish their own addons and addon updates
4) we should have a way to determine what addons have been installed and what we want to add

Prototype is here: https://github.com/kubernetes/kops/tree/master/channels
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-03 17:54:22,2017-10-27 19:42:54
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/113,https://api.github.com/repos/kubernetes/enhancements/issues/113,Show node roles in kubectl,"# Description

We need to show node roles in kubectl, cf https://github.com/kubernetes/kubernetes/issues/33533

Otherwise there is no way to know whether a node is a master, in our new tainted world.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-03 17:56:35,2017-01-24 19:06:09
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/114,https://api.github.com/repos/kubernetes/enhancements/issues/114,Easier installation by borrowing from self-hosting,"# Description

As part of the ongoing work in sig-cluster-lifecycle, we are going to continue with the plan to combine the self-hosting work done by bootkube / k8s-in-k8s etc.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-03 18:00:53,2017-10-27 19:43:10
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/115,https://api.github.com/repos/kubernetes/enhancements/issues/115,Easier installation through componentconfig,"# Description

As part of the work to make installation/operation easier being done by sig-cluster-lifecycle, we are going to continue to make configuration more dynamic, through ongoing work on componentconfig.
# Progress Tracker
- [ ] Before Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] [Design Proposal](https://docs.google.com/document/d/1arP4T9Qkp2SovlJZ_y790sBeiWXDO6SG10pZ_UUU-Lc/edit)
    - [ ] Identify shepherd: @mikedanese, @roberthbailey 
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Before Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Before Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-03 18:02:09,2018-10-11 18:11:29
enhancements,michmike,https://github.com/kubernetes/enhancements/issues/116,https://api.github.com/repos/kubernetes/enhancements/issues/116,Support Windows Server Containers for K8s,"# Description
Microsoft, in collaboration with Docker, is introducing a new feature called Windows Server Containers, which enables Docker containers to run on Windows. SIG-Windows would like to enhance Kubernetes to support Windows Server Containers (and Windows Server 2016 as the operating system of choice for the windows-based kubelet). With this feature, customers will be able to run Windows-based and .NET-based applications inside containers on Kubernetes. Kubernetes will be the first fully functional cross-platform cluster manager.

# Feature Description
- One-line feature description (can be used as a release note): Support for Windows Server Containers
- Primary contact (assignee): @michmike
- Responsible SIGs: sig-windows
- Kubernetes Enhancement Proposal (KEP): https://github.com/kubernetes/enhancements/pull/676
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @brendandburns, @JiangtianLi, @alinbalutoiu
- Approver (likely from SIG/area to which feature belongs): @michmike
- Feature target (which target equals to which milestone):
  - Beta release target 1.9
  - GA release target 1.14

SIG-Windows approved GA release criteria: https://docs.google.com/document/d/1YkLZIYYLMQhxdI2esN5PuTkhQHhO0joNvnbHpW68yg8/edit (old)

New KEP release criteria:
https://github.com/kubernetes/enhancements/pull/676",closed,False,2016-10-06 22:42:26,2019-03-19 20:45:44
enhancements,DirectXMan12,https://github.com/kubernetes/enhancements/issues/117,https://api.github.com/repos/kubernetes/enhancements/issues/117,Arbitrary/Custom Metrics in the Horizontal Pod Autoscaler,"# Arbitrary/Custom Metrics in the Horizontal Pod Autoscaler
- One-line feature description (can be used as a release note): Reworked Horizontal Pod Autoscaler functionality, including support for custom metrics and status conditions.
- Primary contact (assignee): @directxman12
- Responsible SIGs: @kubernetes/sig-autoscaling-feature-requests 
- Design proposal links (community repo):
  - [x] [HPA v2](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/autoscaling/hpa-v2.md)
  - [x] [HPA v2 status conditions](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/autoscaling/hpa-status-conditions.md)
  - [x] [HPA v2 external metrics](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/autoscaling/hpa-external-metrics.md)
  - [ ] [HPA v2 metrics specificity improvements](https://github.com/kubernetes/community/pull/2055)
- Testing 
  - [x] Unit tests: https://github.com/kubernetes/kubernetes/tree/master/pkg/controller/podautoscaler
  - [x] https://github.com/kubernetes/kubernetes/blob/master/test/e2e/autoscaling/custom_metrics_stackdriver_autoscaling.go
  - [ ] https://github.com/kubernetes/kubernetes/pull/62351
- Reviewer(s): @mwielgus @MaciekPytel 
- Approver (likely from SIG/area to which feature belongs): @mwielgus 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.6
  - Beta release target (x.y): 1.8, 1.12 (pending)
  - Stable release target (x.y)",open,False,2016-10-07 20:57:48,2019-01-16 20:46:36
enhancements,DirectXMan12,https://github.com/kubernetes/enhancements/issues/118,https://api.github.com/repos/kubernetes/enhancements/issues/118,Monitoring Pipeline Metrics HPA API,"# Description

The new monitoring vision (https://docs.google.com/document/d/1z7R44MUz_5gRLwsVH0S9rOy8W5naM9XE5NrbeGIqO2k/) proposes several APIs for the HPA to access metrics.  The master metrics API, used to access ""core"" resource metrics, is already implemented, but still needs to be stabilized.  The vision also proposes an adapter API that allows the HPA to access arbitrary metrics from the monitoring pipeline.

This feature tracks defining the API(s), producing an initial implementation (most likely on top of Heapster), and making sure that the HPA is set up to consume the API.

**Sponsored by SIG Instrumentation (@kubernetes/sig-instrumentation) and SIG Autoscaling  (@kubernetes/autoscaling)**
# Progress Tracker
- [ ] Alpha
  - [x] Write and maintain draft quality doc
    - [x] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: https://docs.google.com/document/d/1z7R44MUz_5gRLwsVH0S9rOy8W5naM9XE5NrbeGIqO2k/
  - [ ] Design Approval
    - [ ] Design Proposal: kubernetes/kubernetes#34586 (in progress)
    - [ ] Repository: Kubernetes core or Heapster
    - [ ] Initial API review (may be same PR as design doc): **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] **My Shepherd is:** @directxman12
    - [ ] **My Secondary Contact Point is:** @derekwaynecarr 
  - [ ] Write (code + tests + docs) then get them merged.  kubernetes/metrics#2
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs: kubernetes/kubernetes.github.io#2720
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-07 22:16:51,2018-04-24 18:35:37
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/119,https://api.github.com/repos/kubernetes/enhancements/issues/119,Make StatefulSets safe during cluster failure,"# Description

In order to safely run clustered software, the PetSet controller (and other high level components) must be able to ensure only one instance of a pet is running at any one time.  This change will correct the core cluster logic controlling pod deletion to ensure pods can be used with this guarantee, and set direction for future improvements for reliable clusters around fencing and storage safety.
# Progress Tracker
- [ ] Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  https://github.com/kubernetes/kubernetes/pull/34160
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. kubernetes/kubernetes
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-08 23:54:14,2017-10-27 20:08:19
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/120,https://api.github.com/repos/kubernetes/enhancements/issues/120,Communicate replica set and deployment status via conditions,"# Description

Deployments and replica sets are the key components of the system for ensuring pods are being created and maintained, but it is currently difficult to summarize / roll-up the status of the RS/D during operation.  In addition, certain cluster policies like quota, limit range, or pod security policy can prevent pod creation, but the failures are only shown through events.  This change will expose more information directly in RS / D status about recent failures on the RS/D, giving clients summarized info that problems are occurring.
# Progress Tracker
- [ ] Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  https://github.com/kubernetes/kubernetes/pull/33905
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @smarterclayton
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-08 23:57:06,2016-12-15 18:18:47
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/121,https://api.github.com/repos/kubernetes/enhancements/issues/121,Durable (non-shared) local storage management,"# Feature Description
- One-line feature description (can be used as a release note): Make locally attached (non-network attached) storage available as a persistent volume source. 
- Primary contact (assignee): @msau42 @vishh
- Responsible SIGs: @kubernetes/sig-storage-feature-requests @kubernetes/sig-apps-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/306
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  - @jsafrane 
  - @saad-ali
- Approver (likely from SIG/area to which feature belongs):
  - @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.7/1.8
  - Beta release target (x.y): 1.10
  - Stable release target (x.y): 1.14
",open,False,2016-10-09 00:00:52,2019-03-01 03:16:06
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/122,https://api.github.com/repos/kubernetes/enhancements/issues/122,Allow deployments to correctly indicate they are failing to deploy,"# Feature Description
- One-line feature description (can be used as a release note): Allow deployments to correctly indicate they are failing to deploy
- Primary contact (assignee): @kargakis 
- Responsible SIGs: @kubernetes/sig-apps-proposals 
- Design proposal link: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#failed-deployment
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @janetkuo @smarterclayton 
- Approver (likely from SIG/area to which feature belongs): @smarterclayton 
- Feature target (which target equals to which milestone):
  - Beta release target (1.5)
  - Stable release target (1.6)",closed,False,2016-10-09 00:04:06,2017-07-19 23:11:04
enhancements,ingvagabund,https://github.com/kubernetes/enhancements/issues/123,https://api.github.com/repos/kubernetes/enhancements/issues/123,Cluster capacity analysis,"# Description

Estimation current cluster utilization and express it in a form of ""how many pods of given requirements can be still scheduled in a cluster"". Operator can then estimation remaining capacity in the following way:
- if I can schedule 100 pods of a given shape, capacity is still sufficient
- if I can scheduler only 50 pods of a given a shape i am about to run out of resources and need to do something about it.
# Progress Tracker
- [ ] Alpha
  - [ ] Write and maintain draft quality doc
    - [x] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **http://goo.gl/y4q42Y**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **https://github.com/ingvagabund/cluster-capacity**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _tstclair@redhat.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-10 10:28:48,2018-02-17 02:12:01
enhancements,lukaszo,https://github.com/kubernetes/enhancements/issues/124,https://api.github.com/repos/kubernetes/enhancements/issues/124,DaemonSet updates,"# Feature Description
- DaemonSet rolling update, history, and rollback
- Primary contact (assignee): @janetkuo @lukaszo 
- Responsible SIGs: sig-apps
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/527
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @erictune @janetkuo @lukaszo @kargakis 
- Approver (likely from SIG/area to which feature belongs): @erictune @smarterclayton  
- Feature target (which target equals to which milestone):
  - Beta release target (1.7)
  - Stable release target (x.y)

---

Description

DaemonSet template spec can be updated but running pods will not be updated. This change will add option to automate pod updates when daemon spec was changed.
# Progress Tracker
- [x] Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [x] Design Proposal.  https://github.com/kubernetes/community/pull/262 (implementation kubernetes/kubernetes#31693)
    - [x] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. https://github.com/kubernetes/kubernetes
    - [x] Initial API review (if API).  Maybe same PR as design doc. https://github.com/kubernetes/community/pull/262
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
      -  **cc`@kubernetes/sig-apps`**
      - **`@@kubernetes/sig-openstack`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [x] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [x] Minimal testing
    - [X] Minimal docs https://github.com/kubernetes/kubernetes.github.io/pull/2878
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [x] Update release notes
- [x] Beta
  - [x] Testing is sufficient for beta
  - [x] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [x] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-10 16:52:02,2017-07-21 18:11:21
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/issues/125,https://api.github.com/repos/kubernetes/enhancements/issues/125,Improve responsiveness of kubelet eviction module,"# Description

Improve the responsiveness of the kubelet eviction module at detecting memory pressure.  Integrate with the memcg notification API rather than polling cAdvisor.
# Progress Tracker
- [ ] Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-10 18:57:57,2018-03-02 19:35:17
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/issues/126,https://api.github.com/repos/kubernetes/enhancements/issues/126,Add support for pod and qos level cgroups,"# Description

Add support for pod and qos level cgroups on the node.
# Progress Tracker
- [ ] Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-10 19:00:14,2018-03-02 19:35:17
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/issues/127,https://api.github.com/repos/kubernetes/enhancements/issues/127,Support node-level user namespace remapping,"# Support node-level user namespace remapping
- One-line enhancement description (can be used as a release note): support user namespace remapping
- Kubernetes Enhancement Proposal: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/node-usernamespace-remapping.md
- Primary contact (assignee): @vikaschoudhary16 
- Responsible SIGs: sig-node
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.14)
  - Beta release target (x.y)
  - Stable release target (x.y)

PRs
- [ ] https://github.com/kubernetes/kubernetes/pull/64005",open,False,2016-10-10 19:02:52,2019-03-06 18:40:57
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/128,https://api.github.com/repos/kubernetes/enhancements/issues/128,Support deleting previous objects in `kubectl apply`,"# Description

When creating objects with `kubectl apply`, it is frequently desired to make changes to the config that remove objects and then re-apply and have those objects deleted.  This feature will support pruning which deletes objects previously applied that no longer exist in the source config.
# Progress Tracker
- [x] Alpha
  - [x] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [x] Design Approval
    - [x] Design Proposal.  https://github.com/kubernetes/kubernetes/pull/33075
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [x] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-11 04:29:37,2018-03-09 21:21:36
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/129,https://api.github.com/repos/kubernetes/enhancements/issues/129,Enable custom workflows to be built on top of Deployments,"# Description

Most applications have some logical deployment process that controls how deployments are rolled out.  In some cases, such as example applications, it's valuable to have scripts that initialize a database or perform setup to make an example as easy to consume as possible (via a Helm Chart or template).  In other cases, the deployment process might clear shared caches or sessions so that old and new code do not mix.  It should be possible in Kubernetes to implement this sort of logic above and around deployments from tools like Jenkins or more opinionated workflow engines, and to do so with minimal impact to the existing Kube objects.
- Enable custom deployment strategies to be implemented above Kube that leverage scripts, code in containers, or an external workflow engine to drive deployments
- Ensure that deployments can be reused in multiple ways to deploy real applications

(this feature is slightly vague because it reflects evolution of the deployment hooks proposal - it will be cleaned up shortly).
# Progress Tracker
- [ ] Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  https://github.com/kubernetes/kubernetes/issues/14512 and https://github.com/kubernetes/kubernetes/pull/33545
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-11 04:37:27,2019-02-24 02:30:32
enhancements,jbeda,https://github.com/kubernetes/enhancements/issues/130,https://api.github.com/repos/kubernetes/enhancements/issues/130,Integrate Cluster Bootstrap/Discovery with Kubenetes Core,"# Feature Description
- One-line feature description (can be used as a release note): Add a new authentication and verification mechanism called Bootstrap Tokens to use to easily add new members to a cluster
- Primary contact (assignee): @luxas @jbeda 
- Responsible SIGs: sig/cluster-lifecycle, sig/auth
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/628
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @mikedanese @liggitt @ericchiang 
- Approver (likely from SIG/area to which feature belongs): @mikedanese @liggitt @ericchiang
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): v1.6
  - Beta release target (x.y): v1.8
  - Stable release target (x.y): v1.9",open,False,2016-10-11 18:11:00,2019-01-16 16:28:37
enhancements,pipejakob,https://github.com/kubernetes/enhancements/pull/131,https://api.github.com/repos/kubernetes/enhancements/issues/131,Improve readability of rendered exception questionnaire,"Prior to the change, the Markdown rendering created a long-running paragraph without line breaks that didn't match the source's intent.

Compare current [source](https://raw.githubusercontent.com/kubernetes/features/bdb3cb9e41c656c62e67230bb05107173ca5c619/EXCEPTIONS.md) to current [rendering](https://github.com/kubernetes/features/blob/bdb3cb9e41c656c62e67230bb05107173ca5c619/EXCEPTIONS.md).
",closed,True,2016-10-12 18:23:50,2016-10-12 23:11:26
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/132,https://api.github.com/repos/kubernetes/enhancements/issues/132,Kubernetes Dev Summit added,"Kubernetes Dev Summit (Nov 10) date added.
",closed,True,2016-10-12 23:10:24,2016-10-24 12:14:03
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/133,https://api.github.com/repos/kubernetes/enhancements/issues/133,Feature submission freeze added (1.5),"Oct 10 (Mon) feature submission freeze
",closed,True,2016-10-12 23:13:32,2016-10-24 12:14:32
enhancements,dgoodwin,https://github.com/kubernetes/enhancements/issues/134,https://api.github.com/repos/kubernetes/enhancements/issues/134,Implement Token Management in Kubernetes Core,"# Description

Implement token management in Kubernetes Core.

Tokens today originate from a static file passed to the API server. They do not expire, cannot be synced across multiple API servers without external config management, and cannot be added/removed without an API server restart. 

This feature will bring tokens into the API as a core type and allow them to be stored in etcd, and managed on the fly. It will include expiry, and typed tokens to satisfy upcoming needs of cluster bootstrapping (feature #130).
# Progress Tracker
- [ ] Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-14 18:17:09,2016-10-19 13:10:21
enhancements,pweil-,https://github.com/kubernetes/enhancements/issues/135,https://api.github.com/repos/kubernetes/enhancements/issues/135,Seccomp,"# Description

Seccomp support is providing the ability to define seccomp profiles and configure pods to run with those profiles.  This includes the ability control usage of the profiles via PSP as well as maintaining the ability to run as unconfined or with the default container runtime profile.
# Progress Tracker
- [x] Alpha
  - [ ] Write and maintain draft quality doc: available in downstream OpenShift https://github.com/openshift/openshift-docs/pull/2975
  - [ ] Design Approval
    - [x] Design Proposal #24602
    - [x] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [x] Initial API review (if API).  Maybe same PR as design doc. https://github.com/kubernetes/kubernetes/pull/24602
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  https://github.com/kubernetes/kubernetes/pull/25324 https://github.com/kubernetes/kubernetes/pull/26710 https://github.com/kubernetes/kubernetes/pull/27036
    - [ ] ~~**Code needs to be disabled by default.**   Verified by code OWNERS~~
    - [x] Minimal testing: limited e2e tests https://github.com/kubernetes/kubernetes/blob/33ebe1f18b9cf5909931376f656e19e80ac9ac1c/test/e2e/security_context.go#L110
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [x] Update release notes https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG.md/#changes-since-v130-alpha4
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",open,False,2016-10-25 14:06:37,2019-03-15 07:29:29
enhancements,bryk,https://github.com/kubernetes/enhancements/issues/136,https://api.github.com/repos/kubernetes/enhancements/issues/136,Dashboard UI: show all user facing resources ,"# Description

User story: As a user I want to be able to access my cluster using only UI, only CLI or any mix of CLI and UI interactions. I want to see my entire application architecture through the UI.

Goals: The Dashboard UI shows all user facing resources and allows for CRUD operations on them. We define ""user facing resources"" as all Kubernetes resources that cluster admin or cluster users may want to interact with during their daily routine. In the view, the UI should show resource specification, status and all metadata. It should also link to all related resources, e.g., creator of a pod, or Deployment's Replica Sets. CRUD should be done as generic YAML/JSON editors that are equivalent to `kubectl edit`.
# Progress Tracker

We moved this feature from https://github.com/kubernetes/dashboard/issues/961 to this issue. Alpha is already implemented, so was not tracked here. Development artifacts are linked here for reference. 
- [x] Alpha
  - [x] Design Approval
    - [x] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: https://github.com/kubernetes/dashboard/pull/589
    - [x] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. https://github.com/kubernetes/dashboard
    - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @bryk @pwittrock 
    - [x] Identify secondary/backup contact point. **My Secondary Contact Point is:** @rf232
- [x] Beta
  - [x] Testing is sufficient for beta
  - [x] All resources are properly handled in the UI
  - [x] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
- [ ] Stable
  - [x] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

**FEATURE_STATUS: BETA**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-25 14:15:48,2018-03-09 18:18:37
enhancements,apsinha,https://github.com/kubernetes/enhancements/issues/137,https://api.github.com/repos/kubernetes/enhancements/issues/137,StatefulSets,"# Description

https://github.com/kubernetes/kubernetes/issues/28718
# Progress Tracker
- [X] Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [X] Design Approval
    - [X] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [X] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [X] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [X] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** etune@google.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [X] Beta
  - [ ] Testing is sufficient for beta
  - [x] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [x] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [x] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/feature-reviewers`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-26 00:04:42,2017-12-30 23:17:27
enhancements,bogdando,https://github.com/kubernetes/enhancements/issues/138,https://api.github.com/repos/kubernetes/enhancements/issues/138,More flexible Kubernetes cluster creation with kubeadm feature flags,"# Description

The kubeadm, a Kubernetes cluster bootstrap and lifecycle management tool, simplifies the cluster creation a lot. It executes a fixed set of configuration steps, like certificates management or creation of system pods manifests, although doing them _all_ and in the strict order, which is not flexible.

This is a problem when it comes about integrating with external configuration management tools (aka installers) taking off some of those configuration steps away from the kubeadm.

The feature flags, either CLI or config file based, should ease such integration efforts and make the tool more flexible as well.

Source issue https://github.com/kubernetes/kubernetes/issues/35133
Related feature https://github.com/kubernetes/features/issues/11
# Progress Tracker
- [ ] Alpha
  - [ ] Write and maintain draft quality doc
    - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
  - [ ] Design Approval
    - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
    - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
    - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
      -  Any code that changes an API (`/pkg/apis/...`)
      -  **cc `@kubernetes/api`**
    - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
      -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
      -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
    - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
  - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
    - [ ] Minimal testing
    - [ ] Minimal docs
      - cc `@kubernetes/docs` on docs PR
      - **cc `@kubernetes/sig-cluster-lifecycle` on this issue** to get approval before checking this off
      - New apis: _Glossary Section Item_ in the docs repo: kubernetes/kubernetes.github.io
    - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
    - _Updated walkthrough / tutorial_ in the docs repo: kubernetes/kubernetes.github.io
    - cc `@kubernetes/docs` on docs PR
    - **cc `@kubernetes/sig-cluster-lifecycle` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
    - **cc `@kubernetes/sig-cluster-lifecycle` on this issue** to get approval before checking this off
  - [ ] Soak, load testing  
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/sig-cluster-lifecycle` on this issue** to get approval before checking this off

_FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/sig-cluster-lifecycle`._
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
- Once you get LGTM from a _`@kubernetes/sig-cluster-lifecycle`_ member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.

Coding
- Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
- As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
      and sometimes http://github.com/kubernetes/contrib, or other repos.
- When you are done with the code, apply the ""code-complete"" label.
- When the feature has user docs, please add a comment mentioning `@kubernetes/sig-cluster-lifecycle` and they will
      check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
      testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
      When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
- [ ] Write user docs and get them merged in.
- User docs go into http://github.com/kubernetes/kubernetes.github.io.
- When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
- When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
",closed,False,2016-10-27 11:13:33,2016-10-28 08:49:05
enhancements,Moinheart,https://github.com/kubernetes/enhancements/issues/139,https://api.github.com/repos/kubernetes/enhancements/issues/139,Data awareness and Data/Pod affinity,"# Description

Kubernetes is aware of the state of data in local volumes of nodes, so that scheduler could make better decisions for pods. Pods' definitions could require local volumes and specific data when they are created, scheduler preferentially places pods to nodes which already have needed data/local volumes, and data would be transmissed to nodes which pods are running on.

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2016-11-07 08:18:38,2018-06-15 23:21:01
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/140,https://api.github.com/repos/kubernetes/enhancements/issues/140,Add 1.5.0 draft release notes,,closed,True,2016-12-05 20:50:21,2016-12-06 01:22:32
enhancements,davidopp,https://github.com/kubernetes/enhancements/pull/141,https://api.github.com/repos/kubernetes/enhancements/issues/141,Add release note about PodDisruptionBudget alpha->beta.,"ref/ kubernetes/kubernetes#37862

@spiffxp @saad-ali 
",closed,True,2016-12-06 07:47:44,2016-12-06 16:21:31
enhancements,enisoc,https://github.com/kubernetes/enhancements/pull/142,https://api.github.com/repos/kubernetes/enhancements/issues/142,Clarify StatefulSet release notes,cc @erictune @foxish @kow3ns @janetkuo @kubernetes/sig-apps,closed,True,2016-12-06 22:01:59,2016-12-07 19:00:11
enhancements,luxas,https://github.com/kubernetes/enhancements/pull/143,https://api.github.com/repos/kubernetes/enhancements/issues/143,Fix sig-cluster-lifecycle statement and small other things in the draft,@idvoretskyi @sarahnovotny @spiffxp @kubernetes/sig-cluster-lifecycle ,closed,True,2016-12-07 17:46:45,2016-12-07 19:01:05
enhancements,madhusudancs,https://github.com/kubernetes/enhancements/pull/144,https://api.github.com/repos/kubernetes/enhancements/issues/144,Move kubefed to the federation section.,,closed,True,2016-12-07 21:39:18,2016-12-08 17:58:25
enhancements,mwielgus,https://github.com/kubernetes/enhancements/pull/145,https://api.github.com/repos/kubernetes/enhancements/issues/145,Update 1.5 release notes to Mark ConfigMap in federation as alpha,cc: @nikhiljindal @madhusudancs ,closed,True,2016-12-09 19:27:42,2016-12-09 20:28:31
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/146,https://api.github.com/repos/kubernetes/enhancements/issues/146,Fix scheduled release date for 1.5,It's Monday not Thursday.,closed,True,2016-12-09 19:32:40,2016-12-09 20:00:14
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/147,https://api.github.com/repos/kubernetes/enhancements/issues/147,Update kubectl release notes with changes in behavior in 1.5,,closed,True,2016-12-09 19:59:35,2016-12-11 19:49:29
enhancements,yujuhong,https://github.com/kubernetes/enhancements/pull/148,https://api.github.com/repos/kubernetes/enhancements/issues/148,CRI 1.5 release notes,,closed,True,2016-12-09 19:59:54,2016-12-09 21:43:13
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/pull/149,https://api.github.com/repos/kubernetes/enhancements/issues/149,Include information on force deletion,Describe changes to `--force` where they belong.,closed,True,2016-12-09 21:49:25,2016-12-11 19:51:10
enhancements,madhusudancs,https://github.com/kubernetes/enhancements/pull/150,https://api.github.com/repos/kubernetes/enhancements/issues/150,[Federation] Add feature gates and lack of upgrade tests to the known issues section.,cc @kubernetes/sig-federation @matchstick @nikhiljindal @roberthbailey ,closed,True,2016-12-10 00:05:28,2016-12-12 02:12:17
enhancements,MrHohn,https://github.com/kubernetes/enhancements/pull/151,https://api.github.com/repos/kubernetes/enhancements/issues/151,Adds release note for DNS Horizontal Autoscaling,"Sorry about adding release note this late.

It is somehow difficult to define what phase this feature should be. Bad new is the corresponding feature issue does not exist yet. If we must have it, please advise, thanks!

@bprashanth @thockin @saad-ali 
cc @matchstick 
",closed,True,2016-12-10 00:49:43,2016-12-10 05:02:52
enhancements,david-mcmahon,https://github.com/kubernetes/enhancements/pull/152,https://api.github.com/repos/kubernetes/enhancements/issues/152,Remove extraneous info from draft,So it can be more easily consumed by relnotes.,closed,True,2016-12-10 01:22:56,2017-03-24 18:57:34
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/153,https://api.github.com/repos/kubernetes/enhancements/issues/153,Change release-1.5 draft notes doc uris to final,,closed,True,2016-12-12 05:06:22,2016-12-12 18:29:03
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/154,https://api.github.com/repos/kubernetes/enhancements/issues/154,Added StatefulSets to the Major themes secton,,closed,True,2016-12-12 15:29:47,2016-12-12 18:23:48
enhancements,mbohlool,https://github.com/kubernetes/enhancements/pull/155,https://api.github.com/repos/kubernetes/enhancements/issues/155,Add OpenAPI feature to release notes,,closed,True,2016-12-12 18:29:58,2016-12-12 19:21:11
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/156,https://api.github.com/repos/kubernetes/enhancements/issues/156,Typo fixes,,closed,True,2016-12-12 18:40:00,2016-12-12 18:41:05
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/157,https://api.github.com/repos/kubernetes/enhancements/issues/157,Add brief section about external dependencies,Adds a brief note on what versions of external dependencies were used in CI. In future releases this section should link to an easy to understand test matrix for users.,closed,True,2016-12-12 19:15:14,2016-12-12 19:16:35
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/158,https://api.github.com/repos/kubernetes/enhancements/issues/158,1.6 Schedule,"A proposal in line with our one release per quarter for the 1.6 release.  We can modify and update based on feedback at the next community meeting.

cc @idvoretskyi @calebamiles @sarahnovotny ",closed,True,2016-12-12 20:00:10,2017-01-05 17:54:03
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/159,https://api.github.com/repos/kubernetes/enhancements/issues/159,Update release-notes-draft.md,"Add links to additional validation of docker, etcd versions",closed,True,2016-12-12 20:07:17,2016-12-12 20:10:48
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/160,https://api.github.com/repos/kubernetes/enhancements/issues/160,Update release-notes-draft.md,add link to known issues when using rkt runtime,closed,True,2016-12-12 21:37:15,2016-12-12 23:24:00
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/161,https://api.github.com/repos/kubernetes/enhancements/issues/161,Updated template with the new design proposals link,"Before the Issue Template will be globally reimplemented, the quick fix.",closed,True,2016-12-19 16:13:18,2016-12-19 18:56:33
enhancements,jessfraz,https://github.com/kubernetes/enhancements/issues/162,https://api.github.com/repos/kubernetes/enhancements/issues/162,[Service Catalog]: Pod Preset,"# Description

Add a policy resource that allows loose coupling from services to the pods that consume them.
Proposal here: https://github.com/kubernetes/community/pull/254



# Progress Tracker


- [ ] Alpha
    - [x] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [x] Design Approval
      - [x] Design Proposal: **kubernetes/community#254**
      - [x] Repo: **kubernetes/kubernetes**
      - [x] Initial API review: **kubernetes/community#254**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] **My Shepherd is:** @pmorie 
      - [ ] **My Secondary Contact Point is:**@pwittrock
    - [x] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [x] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [x] Minimal testing
      - [ ] Minimal docs: https://github.com/kubernetes/kubernetes.github.io/pull/2807
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-06 00:09:49,2018-01-18 21:23:08
enhancements,jsafrane,https://github.com/kubernetes/enhancements/issues/163,https://api.github.com/repos/kubernetes/enhancements/issues/163,WIP: Promote StorageClass to GA,"Work in progress. This note will be removed when TODO list in ""Feature tracker"" is complete and agreed.

# Description

Change `StorageClass` implementation from Beta to Stable.

We already went through Alpha and Beta, this feature tracks progress from Beta to Stable

# Progress Tracker

 - [ ] Design Approval
   - [ ] Design Proposal.  This goes under [docs/proposals](https://github.com/kubernetes/kubernetes/tree/master/docs/proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/volume-provisioning.md

- [ ] Stable
  - [ ]  moved kubernetes/community/contributors/design-proposals to docs/design/
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Change API:
      - introduced `PersistentVolume.Spec.Class` and `PersistentVolumeClaim.Spec.Class` attributes (instead of annotation `volume.beta.kubernetes.io/storage-class`)
      - change annotation `storageclass.beta.kubernetes.io/is-default-class` to `storageclass.kubernetes.io/is-default-class`
      - moved StorageClass from `storage.k8s.io/v1beta1` to `storage.k8s.io/v1`
  - [ ] Completely removed alpha behavior (annotation `volume.alpha.kubernetes.io/storage-class`).
  - [ ] Updated e2e tests
  - [ ] detailed user docs and examples
    - [ ] updated existing docs at http://kubernetes.io/docs/user-guide/persistent-volumes/ with real attributes instead of annotations
    - [ ] updated existing examples in https://github.com/kubernetes/kubernetes/tree/master/examples/experimental/persistent-volume-provisioning with real attributes instead of annotations
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

# Open items

- should be mixing of selectors and classes part of this feature? https://github.com/kubernetes/community/pull/247

# More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-06 11:51:43,2017-01-10 20:53:08
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/164,https://api.github.com/repos/kubernetes/enhancements/issues/164,Feature submission template updated,"With regards to the PM meeting [conversation](https://docs.google.com/document/d/1ZElyRqNsGebvMpikEBhSuf2Q6WrEYHB2PgWIlGgwt78/edit?ts=58740b3d#heading=h.1txgejyk87dr), the feature submission template was enhanced and simplified.",closed,True,2017-01-10 22:04:52,2017-03-15 00:05:18
enhancements,davidopp,https://github.com/kubernetes/enhancements/issues/165,https://api.github.com/repos/kubernetes/enhancements/issues/165,Inter-pod affinity/anti-affinity,"# Description

A pod can specify which other pod(s) it cannot share (anti-affinity) or must share (affinity) a ""topology domain"" with. The most common topology domain is node. The set of ""other pod(s)"" is specified using a label selector.

The use cases for this feature are described in the [design doc](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/podaffinity.md). Current user documentation is [here](https://kubernetes.io/docs/user-guide/node-selection/). 

Note: This feature went to alpha before the feature proposal process / feature repo was instituted.

# Progress Tracker

- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-20 00:21:39,2017-01-20 07:16:58
enhancements,davidopp,https://github.com/kubernetes/enhancements/issues/166,https://api.github.com/repos/kubernetes/enhancements/issues/166,Taint Based Eviction,"# Feature Description
- One-line feature description (can be used as a release note):
- Primary contact (assignee): @gmarek 
- Responsible SIGs: @kubernetes/sig-scheduling-feature-requests 
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y) 1.13
  - Stable release target (x.y)
",open,False,2017-01-20 00:55:45,2019-01-30 09:51:40
enhancements,rootfs,https://github.com/kubernetes/enhancements/issues/167,https://api.github.com/repos/kubernetes/enhancements/issues/167,Provide Metrics for Volume Controllers and Plugins,"# Description
Volume Controllers (Attach/Detach and PV) and plugins don't report any metrics. Often time, developers have to look at logs to identify performance issues. Admins don't have insight to Volume level latency, utilization, or errors. Adding metrics to controllers and plugins can inspect multiple levels in volume layer and help both developers and admins.

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** Brad Childs @childsb 
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:**  Hemant Kumar @gnufied
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-20 16:37:32,2017-04-28 17:28:43
enhancements,rootfs,https://github.com/kubernetes/enhancements/issues/168,https://api.github.com/repos/kubernetes/enhancements/issues/168,Support Volume Mount Options,"# Description

We currently support network filesystems: NFS, Glusterfs, Ceph FS, SMB (Azure file), Quobytes, and local filesystems such as ext[3|4] and XFS.

Mount time options that are operationally important and have no security implications should be suppported. Examples are NFS's TCP mode, versions, lock mode, caching mode; Glusterfs's caching mode; SMB's version, locking, id mapping; and more.

One solution is to walk through all the mount options and create API objects for each one of them in their volume source. This solution clearly states what are the supported options. But supporting all valid mount options makes us liable to compatibility issues when mount options changes between OS distributions/releases, or between OSes (Linux, BSD/OSX if they are to be supported in the future)

Second solution also adds an API objects in volume source. Instead of 1-1 mapping, the single API object is a string comma separated blob like `version=3,protoc=tcp,nolock`. It is the convention used by mount command. Since this solution only supported a subset of filesystem options, it is not subject to mount option changes. Arguably, the mount options are only for expert user who understand what they do. The mount options API object defaults to none.

- Primary contact (assignee): @gnufied 
- Responsible SIGs: Storage
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
Google: @saad-ali @jingxu97 
RedHat: @childsb @jsafrane 
- Approver (likely from SIG/area to which feature belongs): @saad-ali @childsb 
- Feature target (which target equals to which milestone):
  - Alpha release target: 1.6
  - Beta release target: -
  - Stable release target (x.y): 1.8",closed,False,2017-01-20 17:05:50,2018-01-02 17:48:54
enhancements,pwittrock,https://github.com/kubernetes/enhancements/issues/169,https://api.github.com/repos/kubernetes/enhancements/issues/169,[Service Catalog]: Explicit Service Links / Injection,"# Description

Support explicitly specifying which Services a Pod connects to and inject Service information (VIP end-point) for only these services.  This is an alternative to the current approach where a Pod is implicitly assumed to be able to connect to all available Services in the namespace.

Proposal kubernetes/community#176

# Progress Tracker

- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal:  **kubernetes/community#176**
      - [ ] Repo: **kubernetes/kubernetes**
      - [ ] Initial API review: **kubernetes/community#176**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] **My Shepherd is:** @pmorie 
      - [ ] **My Secondary Contact Point is:** @pwittrock
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-20 17:49:23,2018-03-12 17:28:43
enhancements,adityadani,https://github.com/kubernetes/enhancements/issues/170,https://api.github.com/repos/kubernetes/enhancements/issues/170,Portworx Volume Plugin,"# Description

Add a new volume plugin in Kubernetes for Portworx Volumes. Portworx pools available block storage on nodes and carves out volumes from them. More info about Portworx can be found [here](http://docs.portworx.com).

The Portworx volume plugin will support
1. Dynamic Provisioning using Storage Classes
2. Persistent Volumes and Persistent Volume Claims

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** Saad Ali @saad-ali 
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** Huamin Chen @rootfs  (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-20 18:53:21,2018-01-23 06:12:23
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/171,https://api.github.com/repos/kubernetes/enhancements/issues/171,IAM integration (primarily AWS),"# Description

Pod-level IAM policies, so that a pod gets the IAM permissions (and only those permissions) that are configured.  This is widely achieved today via kube2iam, but we want to investigate baking this more deeply, either into kops or kubernetes itself (or both!)

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-23 17:33:10,2019-03-07 20:18:31
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/172,https://api.github.com/repos/kubernetes/enhancements/issues/172,Pluggable storage backends,"# Description

AWS (and other clouds) offers services that may be easier to operate than etcd.  This feature would allow our storage to be pluggable, so that we can experiment with integrating with them.

It would also allow integrating with e.g. consul, or testing backends that deliberately behave badly.

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-23 17:35:26,2017-10-17 18:27:06
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/173,https://api.github.com/repos/kubernetes/enhancements/issues/173,AWS shared ownership tags,"# Description

On AWS, we are using tags to associate resources to clusters.  But the current tag is `KubernetesCluster=<clusterid>`.  However, this does not allow sharing a resource between multiple clusters.  Not all resources can be shared, but we need to define a tag that can support sharing (for example `k8s.io/<clusterid>=shared`

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-23 17:36:52,2018-02-19 14:11:02
enhancements,pmorie,https://github.com/kubernetes/enhancements/issues/174,https://api.github.com/repos/kubernetes/enhancements/issues/174,Create environment variables from all keys in a Secret/Configmap,"# Description

This feature is to allow users to easily inject environment variables from Secrets and Configmaps by just referencing the name of the resource they want to inject instead of creating an `EnvVar` for each key in the resource.

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [x] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: #148
      - [x] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [x] Initial API review (if API).  Maybe same PR as design doc. #148
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @pmorie (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-23 19:11:46,2018-02-24 23:17:51
enhancements,jpeeler,https://github.com/kubernetes/enhancements/issues/175,https://api.github.com/repos/kubernetes/enhancements/issues/175,All in one volume proposal,"# Description
This is a proposal for a new projected volume type that can project secrets,
configmaps, and downward API items.

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-23 20:19:08,2017-04-12 14:57:01
enhancements,rkouj,https://github.com/kubernetes/enhancements/issues/176,https://api.github.com/repos/kubernetes/enhancements/issues/176,Customized mounts in chroot to GA,"# Description

With the default image changing to Container-Optimized OS (aka gci image) starting Google Container Engine version 1.4, some volume plugins including NFS and Gluster could not work because the image does not install the necessary utilities to mount the file system. 

To solve this issue, we are working on an approach to use mount in a chroot environment. By creating a customized image with all the utility installed and mounting inside of chroot, we can overcome the issue and be able to share mount from chroot to host. The following lists the basic steps for this approach

1. Create a docker image has storage tools (nfs and glusterfs) pre-installed.
2. Export the image to a tar file and upload to the google cloud storage
3. When starting a k8s cluster, download the tar file and untar to a directory as the rootfs of chroot command
4. Setup the chroot environment by bind mounting /var/lib/kubelet, /proc, /dev ...
5. In the kubelet mount code, change to use chroot to mount if it is gci image


# Progress Tracker
TBD

- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-23 23:08:50,2018-02-20 08:29:02
enhancements,jingxu97,https://github.com/kubernetes/enhancements/issues/177,https://api.github.com/repos/kubernetes/enhancements/issues/177,Snapshot / Restore Volume Support for Kubernetes (CRD + External Controller),"# Feature Description
- One-line feature description (can be used as a release note): 
```
Snapshot / restore functionality for Kubernetes and CSI. This provides standardized APIs design (CRDs) and adds PV snapshot/restore support for CSI volume drivers.
```
Old description:
```
Expose the ability in the Kubernetes API to create,list, delete, and restore snapshots from an arbitrary underlying storage systems that support it.
```
- Primary contact (assignee): @jingxu97, @xing-yang 
- Responsible SIGs: storage-SIG
- Design proposal link (community repo): 
  - Current: https://github.com/kubernetes/community/pull/2335
  - Old: https://docs.google.com/document/d/17WS4Wk4MXRH24i-BpMpIFo5F-SNoRkm_KtkBMZEEoAo/edit
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  - Luis Pabón (@lpabon)
  - Ritesh Shukla (@kerneltime) 
  - Brad Childs (@childsb)
- Approver (likely from SIG/area to which feature belongs):
  - Saad Ali (@saad-ali)
- Feature target (which target equals to which milestone):
  - External repo (x.y): 1.8
  - Alpha release target (x.y): 1.12
  - Beta release target (x.y): 1.14",open,False,2017-01-23 23:52:31,2019-01-22 20:50:21
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/178,https://api.github.com/repos/kubernetes/enhancements/issues/178,Out-of-tree CSI Volume Plugins,"- One-line feature description (can be used as a release note): Add support for Out-of-Tree CSI Volume Plugins in Kubernetes
- Primary contact (assignee): @saad-ali
- Responsible SIGs: storage  
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1258
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  @childsb 
  @jsafrane 
- Approver (likely from SIG/area to which feature belongs):
  @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.9
  - Beta release target (x.y): 1.10
  - Stable release target (x.y): 1.13

# Background

Kubernetes volume plugins are currently all ""in-tree"" meaning that their source code is included in the main Kubernetes repo. All volume plugins are compiled and ship along with kubernetes binaries.

The drawback to this approach is that it requires third-party storage vendors wanting to support Kubernetes to commit code to the Kubernetes repo, and thus be locked into Kubernetes release schedules. It requires them to make their source code public/open-source.

While the Flex volume plugin already provides a mechanism for Plugin developers to experiment with out-of-tree plugins, it provides no guarantees of backwards compatibility (since it is alpha), and is completely exec based (driver installation requires ability to deploy files to specific locations on node and master machines).

This feature aims to create a new (or adopt an existing) API for Volume Plugins in Kubernetes that:
* Will allow volume plugins to be developed out-of-tree.
* Not require building volume plugins (or their dependencies) into Kubernetes binaries.
* Not requiring direct machine access to deploy new volume plugins (drivers).

CC @kubernetes/sig-storage-feature-requests @kubernetes/sig-storage-proposals 
",closed,False,2017-01-24 05:34:07,2019-01-15 21:52:41
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/179,https://api.github.com/repos/kubernetes/enhancements/issues/179,Scheduling by Node (Storage/Volume) Capabilities,"# Description

Only schedule pods on nodes that support the required volume type.

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-24 05:37:50,2018-03-02 19:35:16
enhancements,jsafrane,https://github.com/kubernetes/enhancements/issues/180,https://api.github.com/repos/kubernetes/enhancements/issues/180,Default Storage Classes for Cloud Providers,"# Description

Kubernetes should deploy a default StorageClass instance during installation if it is possible on target platform (i.e. no default storage class on bare metal).

In 1.5, alpha dynamic provisioning worked out of the box on AWS, GCE, OpenStack, vSphere, Azure and Photon cloud providers without any configuration. In order to keep similar user experience in 1.6, we need a default StorageClass instance deployed there that will handle provision a PV for all PVCs.

# Progress Tracker

*simplified, we're aiming directly at 'stable', we don't need API changes and the amount of code should be fairly low*

- [ ] Stable
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [x] Design Approval
      - [x] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: https://github.com/kubernetes/community/pull/285
      - [X] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. Repos: kubernetes/kubernetes, kubernetes/kops
      - [X] Initial API review (if API).  No API changes.
      - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @saad-ali 
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [x] Identify secondary/backup contact point. **My Secondary Contact Point is:** @childsb  
    - [x] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
    - [x] Testing
    - [x] Update release notes
  - [X] Thorough API review - no API changes
  - [x] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [x] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-24 13:24:49,2018-01-05 08:39:19
enhancements,vladimirvivien,https://github.com/kubernetes/enhancements/issues/181,https://api.github.com/repos/kubernetes/enhancements/issues/181,DellEMC ScaleIO Volume Plugin,"# Description
This is to implement a volume plugin to allow pods to access `DellEMC ScaleIO` volumes. ScaleIO is a software-based storage platform that creates a pool of distributed block storage using locally attached disks on participating servers. The plugin is implemented to support persistent volumes using PVs, PVCs, and dynamic provisioning.  You can learn more about [ScaleIO here](https://www.emc.com/storage/scaleio/index.htm).

Refer to the initial PR here - https://github.com/kubernetes/kubernetes/pull/38924


# Progress Tracker


- [ ] Alpha
    - [x] Write and maintain draft quality doc
      - [x] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: https://docs.google.com/document/d/1Wj2FB7BRz4kLwVsRiqo1ufaLGT82IdKOiKmdq9_WRTY/edit?usp=sharing
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-24 16:35:31,2017-06-07 14:19:06
enhancements,gnufied,https://github.com/kubernetes/enhancements/issues/182,https://api.github.com/repos/kubernetes/enhancements/issues/182,Cloudprovider metrics for storage ,"# Feature Description
- Add support for cloudprovider metrics for storage API calls.
- Primary contact (assignee): @gnufied 
- Responsible SIGs: @kubernetes/sig-storage-feature-requests 
- Design proposal link (community repo):https://github.com/kubernetes/community/blob/master/contributors/design-proposals/cloudprovider-storage-metrics.md
- Reviewer(s) - @brancz @saad-ali 
- Approver (likely from SIG/area to which feature belongs): @saad-ali 
- Feature target (which target equals to which milestone): 1.7 GA

<del>
# Description

We need metrics from Cloud Provider about its usage. The emitted metrics will contain count and latency metrics for the Cloud API.  The metrics will have `namespace` as an additional dimension wherever available.

# Progress Tracker

- [ ] Alpha
    - [x] Write and maintain draft quality doc
      - [x] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **[Draft Doc](https://docs.google.com/document/d/1e7UzKmJQcLrWsviH6cfv299u4aiP75iR3Vos-z01ytQ/edit?usp=sharing)**
    - [x] Design Approval
      - [x] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **https://github.com/kubernetes/community/blob/master/contributors/design-proposals/cloudprovider-storage-metrics.md**
      - [x] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **kubernetes**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** bchilds@redhat.com (@childsb)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [x] Identify secondary/backup contact point. **My Secondary Contact Point is:**  Huamin Chen (@rootfs)
    - [x] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

</del>",closed,False,2017-01-24 19:12:05,2018-02-27 11:16:51
enhancements,wongma7,https://github.com/kubernetes/enhancements/issues/183,https://api.github.com/repos/kubernetes/enhancements/issues/183,External provisioners,"# Description

External provisioners are possible as of 1.5 but we are still missing an official, easy to use & find helper library. Need to host it somewhere official with documentation on how to use it, best practices, etc.


# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-01-24 19:32:34,2017-05-04 15:21:54
enhancements,SimenB,https://github.com/kubernetes/enhancements/issues/184,https://api.github.com/repos/kubernetes/enhancements/issues/184,ignore me,"Didn't mean to create this, please ignore",closed,False,2017-01-27 06:32:35,2017-01-30 15:58:54
enhancements,mdelio,https://github.com/kubernetes/enhancements/issues/185,https://api.github.com/repos/kubernetes/enhancements/issues/185,Bring Network Policy to GA,"# Feature Description
- One-line feature description (can be used as a release note): NetworkPolicy promoted to GA
- Primary contact (assignee): @danwinship 
- Responsible SIGs: @kubernetes/sig-network-misc 
- Design proposal link (community repo): [Design Proposal](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/network-policy.md)
- Reviewer(s): @thockin @caseydavenport
- Approver: @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) N/A
  - Beta release target (x.y) v1.5.0
  - Stable release target (x.y) v1.7.0

<del>
# Description
Network Policy is a specification of how selections of pods are allowed to communicate with each other and other network endpoints.

# Progress Tracker

- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.
</del>

",closed,False,2017-01-27 23:22:41,2017-07-14 17:34:57
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/186,https://api.github.com/repos/kubernetes/enhancements/issues/186,Cleanup 1.6 Release Readme,Just cleaning up the outdated header at the top.,closed,True,2017-02-10 02:14:39,2017-03-24 18:58:35
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/187,https://api.github.com/repos/kubernetes/enhancements/issues/187,Update 1.6 release schedule,,closed,True,2017-02-11 01:47:53,2017-02-13 20:04:52
enhancements,krmayankk,https://github.com/kubernetes/enhancements/issues/188,https://api.github.com/repos/kubernetes/enhancements/issues/188,StatefulSet Upgrades,"# Feature Description

- One-line feature description (can be used as a release note):  StatefulSets currently do not support -
Upgrades, which makes it limiting for lot of Enterprise use cases. This feature will  track supporting Upgrade for StatefulSets on the server side declaratively.
- Primary contact (assignee): @kow3ns 
- Responsible SIGs: sig-apps
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/503/
Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @smarterclayton @kargakis @janetkuo 
@krmayankk
- Approver (likely from SIG/area to which feature belongs): @smarterclayton 
- Initial target stage (alpha/beta/stable) and release (x.y): beta 1.7
- Code: https://github.com/kubernetes/kubernetes/pull/46669",closed,False,2017-02-11 21:18:52,2017-10-20 10:49:38
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/189,https://api.github.com/repos/kubernetes/enhancements/issues/189,Change References to Petset,,closed,True,2017-02-16 23:58:17,2017-03-24 18:58:35
enhancements,croomes,https://github.com/kubernetes/enhancements/issues/190,https://api.github.com/repos/kubernetes/enhancements/issues/190,StorageOS Volume Plugin,"# StorageOS Volume Plugin
- One-line feature description (can be used as a release note): Volume plugin for StorageOS provides highly-available cluster-wide persistent volumes from local or attached node storage.
- Primary contact (assignee): Simon Croome @croomes
- Responsible SIGs: Storage
- Design proposal link (community repo):  https://github.com/kubernetes/kubernetes/pull/42156
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @rootfs 
- Approver (likely from SIG/area to which feature belongs): @saad-ali 
- Feature target (which target equals to which milestone):
  - Stable release target (1.7)",closed,False,2017-02-24 16:38:39,2017-10-11 13:21:12
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/191,https://api.github.com/repos/kubernetes/enhancements/issues/191,1.6 release team added,,closed,True,2017-02-28 12:29:55,2017-03-01 17:37:51
enhancements,vishh,https://github.com/kubernetes/enhancements/issues/192,https://api.github.com/repos/kubernetes/enhancements/issues/192,Support for Hardware Accelerators,"# Description

Kubernetes is becoming popular for managing workloads that consume accelerators like Tensorflow for example. The agility that Kubernetes offers makes it easy to consume accelerators across a fleet of machines.
Kubernetes can provide an end to end workflow by separating provisioning and configuration of accelerators from consumption.

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

cc @kubernetes/sig-node-feature-requests @kubernetes/sig-scheduling-feature-requests ",closed,False,2017-02-28 22:05:04,2018-05-17 03:39:14
enhancements,flowerpp,https://github.com/kubernetes/enhancements/pull/193,https://api.github.com/repos/kubernetes/enhancements/issues/193,Update features-1.3.md,add a blank only,closed,True,2017-03-02 09:37:47,2017-03-02 22:14:58
enhancements,soltysh,https://github.com/kubernetes/enhancements/issues/194,https://api.github.com/repos/kubernetes/enhancements/issues/194,Deployments to GA,"# Feature Description
- One-line feature description (can be used as a release note): Deployments to GA
- Primary contact (assignee): @janetkuo  
- Responsible SIGs: @kubernetes/sig-apps-proposals 
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/deployment.md
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @kargakis @tnozicka  
- Approver (likely from SIG/area to which feature belongs): @smarterclayton @erictune 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)",closed,False,2017-03-03 10:33:40,2017-12-22 12:12:50
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/195,https://api.github.com/repos/kubernetes/enhancements/issues/195,Create Flake Report for 2017-03-03,Begin filing test flake reports as status reports under 1.6 release directory,closed,True,2017-03-03 19:33:21,2017-03-04 04:08:21
enhancements,boynux,https://github.com/kubernetes/enhancements/issues/196,https://api.github.com/repos/kubernetes/enhancements/issues/196,IPvS Option for KubeProxy,"# Feature Description
- One-line feature description (can be used as a release note):
- Primary contact (assignee):
- Responsible SIGs:
- Design proposal link (community repo): https://github.com/kubernetes/community/issues/429
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)


############### **Outdated template below** ###########

# Description

IPvS or LVS is a kernel feature that can proxy requests in 3 different ways, Direct Routing model is the preferred model.


# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [x] Design Proposal.  https://github.com/kubernetes/community/issues/429
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-03-05 09:13:40,2017-07-14 17:32:00
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/197,https://api.github.com/repos/kubernetes/enhancements/issues/197,Release go signal 06 March 2017,Prepare release go/no go signal report for 2017-03-06,closed,True,2017-03-06 20:08:36,2017-03-07 11:36:35
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/198,https://api.github.com/repos/kubernetes/enhancements/issues/198,Release go signal for 08 March 2017,,closed,True,2017-03-08 17:08:21,2017-03-10 19:13:30
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/199,https://api.github.com/repos/kubernetes/enhancements/issues/199,update release blocking issue handling for 1.6,notifies community that only milestone will determine whether an issue is release blocking or not,closed,True,2017-03-08 23:32:57,2017-03-16 19:13:35
enhancements,ethernetdan,https://github.com/kubernetes/enhancements/pull/200,https://api.github.com/repos/kubernetes/enhancements/issues/200,Release go signal for 10 March 2017,,closed,True,2017-03-10 20:31:35,2017-03-11 01:39:39
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/201,https://api.github.com/repos/kubernetes/enhancements/issues/201,Create draft for 2017-03-13 report,,closed,True,2017-03-13 18:46:02,2017-03-14 11:57:23
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/202,https://api.github.com/repos/kubernetes/enhancements/issues/202,Create 2017-03-14 draft,Update test flakes and bugs,closed,True,2017-03-14 16:21:03,2017-03-15 17:41:13
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/203,https://api.github.com/repos/kubernetes/enhancements/issues/203,Create empty release notes doc for commenting,For the [1.5 release](https://github.com/kubernetes/features/blob/master/release-1.5/release-notes-draft.md) we created a draft here for manual curation. Anyone who has write access to the repo should be able to update the PR on the `release-notes-draft-1.6` branch and we can merge the draft in a single PR. **please do not edit this file on the master branch**,closed,True,2017-03-14 20:16:06,2017-03-24 18:57:20
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/204,https://api.github.com/repos/kubernetes/enhancements/issues/204,Feature submission template updated,"Following the discussion, happened at the SIG PM regular meeting 2017-03-14, agreed in the [document](https://docs.google.com/document/d/1-D_QP2IC5Z_QJUmTOV24IsFknc9pGPU5xeq6gjP4f38/edit?usp=sharing), feature submission template is much simplified and enhanced.",closed,True,2017-03-14 21:19:18,2017-10-02 21:49:45
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/205,https://api.github.com/repos/kubernetes/enhancements/issues/205,Create report for 2017-03-15,,closed,True,2017-03-15 18:39:50,2017-03-16 06:24:50
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/206,https://api.github.com/repos/kubernetes/enhancements/issues/206,Prepare draft for 2017-03-16,,closed,True,2017-03-16 19:04:14,2017-03-17 01:33:03
enhancements,davidopp,https://github.com/kubernetes/enhancements/pull/207,https://api.github.com/repos/kubernetes/enhancements/issues/207,"Add release notes for scheduler features moving from alpha to beta, and new alpha feature.","@calebamiles @lukemarsden 
",closed,True,2017-03-16 23:34:00,2017-03-17 01:20:24
enhancements,michmike,https://github.com/kubernetes/enhancements/pull/208,https://api.github.com/repos/kubernetes/enhancements/issues/208,sig-windows update,,closed,True,2017-03-17 03:34:38,2017-03-17 19:25:02
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/209,https://api.github.com/repos/kubernetes/enhancements/issues/209,Kubernetes should be able to easily integrate external policy control ,"# Feature Description
- One-line feature description (can be used as a release note): Add extensible external admission control
- Primary contact (assignee): @smarterclayton 
- Responsible SIGs: @kubernetes/sig-api-machinery-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/132
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @lavalamp @deads2k @liggitt @sttts @ncdc 
- Approver (likely from SIG/area to which feature belongs): @lavalamp 
- Initial target stage (alpha/beta/stable) and release (x.y): alpha in 1.7

## Longer Description

As a Kubernetes administrator or integrator, I should be able to add policy and security integrations that can control the admission of content to the cluster, so that I can add my own administrative policy to the cluster.  As a Kubernetes developer looking to build new features out of the core repository, I need a way to easily integrate into the pod lifecycle in a decoupled and decentralized way.

In Kubernetes this mechanism is known as ""admission"" and we are planning to add a way of having Kubernetes make calls out to remote servers to perform those checks.  We are also looking to add an additional concept to objects called an ""initializer"", which gives system agents an opportunity to react to objects (like pods) being created before other clients can see them - this would make very common integrations like setting defaults on pods easy to build and run on the cluster.  Finally we want to enable a way to dynamically alter the configuration of a running system to add or remove these integrations.

Part of sig-api-machinery.
",closed,False,2017-03-17 17:09:05,2018-02-26 08:50:51
enhancements,davidopp,https://github.com/kubernetes/enhancements/pull/210,https://api.github.com/repos/kubernetes/enhancements/issues/210,Add manual release note for #43271,"cc/ @calebamiles 

ref/ kubernetes/kubernetes#43271
",closed,True,2017-03-17 19:06:22,2017-03-17 19:24:23
enhancements,lukemarsden,https://github.com/kubernetes/enhancements/pull/211,https://api.github.com/repos/kubernetes/enhancements/issues/211,kubeadm release notes draft for 1.6,"For discussion in SIG-cluster-lifecycle.

Hailing @jbeda @luxas @pires @errordeveloper",closed,True,2017-03-17 19:33:34,2017-03-22 20:35:08
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/212,https://api.github.com/repos/kubernetes/enhancements/issues/212,Prepare draft for 2017-03-17,,closed,True,2017-03-17 19:58:22,2017-03-18 00:47:40
enhancements,krmayankk,https://github.com/kubernetes/enhancements/issues/213,https://api.github.com/repos/kubernetes/enhancements/issues/213,Provide RunAsGroup feature for Containers in a Pod,"# Feature Description
As a Kubernetes User, i should be able to specify both user id and group id for the containers running inside a pod on a per Container basis, similar to how docker allows that using docker run options `-u, --user=""""                 Username or UID (format: <name|uid>[:<group|gid>])` format. Currently kubernetes only allows us to control the primary user id and allows us to add supplemental groups. There is no way to control the primary group id of the running container which is always 0(root).
   This feature would enable enterprises to run containers as non root(non zero uid and non zero gid) and hence improve the level of security for the running containers. More discussion and agreement was gathered in this issue [22179](https://github.com/kubernetes/kubernetes/issues/22179)

- One-line feature description (can be used as a release note): Provide RunAsGroup feature for Containers in a Pod
- Primary contact (assignee): @krmayankk
- Responsible SIGs: sig-node, sig-auth
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/756
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @pmorie @liggitt @tallclair 
- Approver (likely from SIG/area to which feature belongs): TBD
- Feature target (which target equals to which milestone):
Alpha release target: v1.10
Beta release target v1.14
Stable release target TBD

List of Work Items:-
- [x]  RunAsGroup Implementation
- [x]  Add feature flag , mark it alpha and disable by default
- [x] PSP Implementation for RunAsGroup
- [ ]  RunAsNonRootGroup implementation ([In Progress PR # 62216] (https://github.com/kubernetes/kubernetes/pull/62216/files)) On Hold Currently
- [ ] Verify e2e and Unit test Coverage --- In progress
- [ ] Verify Containerd and cri-o coverage 

Containerd and Cri-o Implementation PR's
- https://github.com/kubernetes-sigs/cri-o/pull/1601
- https://github.com/kubernetes-sigs/cri-o/pull/1898
- https://github.com/containerd/cri/pull/710

Test Results for CRI-O PR with latest Kubernetes Master
https://k8s-testgrid.appspot.com/sig-node-cri-o#crio-e2e-fedora
",open,False,2017-03-19 04:23:39,2019-03-13 22:30:45
enhancements,saad-ali,https://github.com/kubernetes/enhancements/pull/214,https://api.github.com/repos/kubernetes/enhancements/issues/214,Rearrange/reword storage release notes for 1.6,CC @kubernetes/sig-storage-misc ,closed,True,2017-03-20 17:56:03,2017-03-24 18:57:19
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/215,https://api.github.com/repos/kubernetes/enhancements/issues/215,Adds 2017-03-20 report,"- updates suite failures
- updates flake counts
- adds broken test run issues to close by release team",closed,True,2017-03-20 19:09:34,2017-03-20 21:48:06
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/216,https://api.github.com/repos/kubernetes/enhancements/issues/216,2017-03-21 report,,closed,True,2017-03-21 18:43:15,2017-03-22 02:26:23
enhancements,bowei,https://github.com/kubernetes/enhancements/pull/217,https://api.github.com/repos/kubernetes/enhancements/issues/217,Update release notes with networking features,,closed,True,2017-03-21 20:52:56,2017-03-22 19:30:31
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/218,https://api.github.com/repos/kubernetes/enhancements/issues/218,Create 1.6 release notes draft,,closed,True,2017-03-21 22:28:41,2017-03-23 12:34:02
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/219,https://api.github.com/repos/kubernetes/enhancements/issues/219,2017-03-22 report,,closed,True,2017-03-22 18:32:54,2017-03-23 03:37:07
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/220,https://api.github.com/repos/kubernetes/enhancements/issues/220,"Revert ""Create 1.6 release notes draft""",Reverts kubernetes/features#218. we meant to put this on the release notes 1.6 draft branch,closed,True,2017-03-22 19:49:15,2017-03-22 19:49:53
enhancements,jbeda,https://github.com/kubernetes/enhancements/pull/221,https://api.github.com/repos/kubernetes/enhancements/issues/221,Tweak kubeadm release notes,"Add some more detail and references.

This is a continuation of #211.

Astute readers will notice that I accidentally checked this in directly and then reverted it.  Sorry about that.",closed,True,2017-03-22 21:44:02,2017-03-22 22:07:20
enhancements,mengqiy,https://github.com/kubernetes/enhancements/pull/222,https://api.github.com/repos/kubernetes/enhancements/issues/222,update CLI section in release note,,closed,True,2017-03-22 23:43:56,2017-03-23 22:50:27
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/223,https://api.github.com/repos/kubernetes/enhancements/issues/223,Added the 1.7 proposed timeline,"Just getting the ball rolling

**Needs to incorporate feedback from 1.6 retrospective and needs approval at community meeting**

",closed,True,2017-03-23 18:13:55,2017-04-13 00:52:46
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/224,https://api.github.com/repos/kubernetes/enhancements/issues/224,Create 2017-03-23 status report,,closed,True,2017-03-23 19:34:45,2017-03-24 01:29:42
enhancements,bowei,https://github.com/kubernetes/enhancements/pull/225,https://api.github.com/repos/kubernetes/enhancements/issues/225,Update with CNI + CRI compatibility caveat,,closed,True,2017-03-23 20:14:46,2017-03-23 23:49:20
enhancements,mlycore,https://github.com/kubernetes/enhancements/pull/226,https://api.github.com/repos/kubernetes/enhancements/issues/226,add issue link and author to HPA features,add issue link and author to HPA features,closed,True,2017-03-24 01:43:31,2017-03-24 12:47:08
enhancements,liggitt,https://github.com/kubernetes/enhancements/pull/227,https://api.github.com/repos/kubernetes/enhancements/issues/227,sig-auth highlights,hoists notable items out of the generated list into the auth section,closed,True,2017-03-24 17:23:11,2017-03-24 18:46:40
enhancements,mikedanese,https://github.com/kubernetes/enhancements/pull/228,https://api.github.com/repos/kubernetes/enhancements/issues/228,fix up the certificates api release notes,to be more accurate and point to the docs,closed,True,2017-03-24 18:35:12,2017-03-24 18:58:34
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/229,https://api.github.com/repos/kubernetes/enhancements/issues/229,2017-03-24 release status report,,closed,True,2017-03-24 19:58:26,2017-06-30 03:14:35
enhancements,davidopp,https://github.com/kubernetes/enhancements/pull/230,https://api.github.com/repos/kubernetes/enhancements/issues/230,Add alpha scheduling feature at top of release notes,"@calebamiles @idvoretskyi 
",closed,True,2017-03-24 20:07:23,2017-03-24 21:50:36
enhancements,mengqiy,https://github.com/kubernetes/enhancements/pull/231,https://api.github.com/repos/kubernetes/enhancements/issues/231,release note for HPA,cc: @pwittrock ,closed,True,2017-03-25 00:21:46,2017-03-26 20:28:52
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/232,https://api.github.com/repos/kubernetes/enhancements/issues/232,"Revert ""release note for HPA""",Reverts kubernetes/features#231,closed,True,2017-03-25 01:16:12,2017-03-25 02:48:00
enhancements,jbeda,https://github.com/kubernetes/enhancements/pull/233,https://api.github.com/repos/kubernetes/enhancements/issues/233,Add kubeadm to 'Themes' for 1.6,Signed-off-by: Joe Beda <joe.github@bedafamily.com>,closed,True,2017-03-25 16:56:58,2017-03-26 03:54:14
enhancements,justinsb,https://github.com/kubernetes/enhancements/pull/234,https://api.github.com/repos/kubernetes/enhancements/issues/234,Try to persuade people to backup etcd,"We really need people to back up before attempting this upgrade, and to understand the scenarios where there is no alternative but to restore from backup.

I hope this is enough to persuade users that a backup really is needed this time, but I worry that it's still not enough.",closed,True,2017-03-26 02:01:25,2018-01-04 23:49:19
enhancements,craigbox,https://github.com/kubernetes/enhancements/pull/235,https://api.github.com/repos/kubernetes/enhancements/issues/235,Copy edit release notes,"Many people are going to hit this doc in the next few days.  Consequently I have:

 * re-ordered the points in perceived order of importance
 * heavily copy-edited 
 * linked to documentation where appropriate",closed,True,2017-03-27 09:47:10,2017-03-27 13:35:49
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/236,https://api.github.com/repos/kubernetes/enhancements/issues/236,Group changes by area/component rather than by SIG,"1. Breaks down SIG structure in favor of area/component
1. Creates single action required section
1. Creates depreciation section

TODO
- [ ] edit for structure (@bgrant0607, @shtatfeld)
- [ ] edit for content (all)
- [ ] make changes (all)
- [ ] add go/docker/etcd version information (@bgrant0607, @dchen1107, @xiang90)
- [ ] add known issues (all)
- [ ] squash commits (someone)
- [ ] approve final version (@idvoretskyi) ",closed,True,2017-03-28 00:52:11,2017-03-28 20:43:53
enhancements,piosz,https://github.com/kubernetes/enhancements/pull/237,https://api.github.com/repos/kubernetes/enhancements/issues/237,Updated release notes for rescheduler,cc @calebamiles @idvoretskyi @enisoc ,closed,True,2017-03-28 12:37:20,2017-03-28 15:25:09
enhancements,ejc3,https://github.com/kubernetes/enhancements/pull/238,https://api.github.com/repos/kubernetes/enhancements/issues/238,"Remove ""for new clusters"" qualification",The release note as written implies that existing clusters won't have their storage format affected. I believe this is incorrect.,closed,True,2017-03-28 14:38:55,2017-03-28 16:47:25
enhancements,ejc3,https://github.com/kubernetes/enhancements/pull/239,https://api.github.com/repos/kubernetes/enhancements/issues/239,Typo fix and shorten sentence,,closed,True,2017-03-28 14:43:24,2017-03-28 16:51:40
enhancements,mwielgus,https://github.com/kubernetes/enhancements/pull/240,https://api.github.com/repos/kubernetes/enhancements/issues/240,Release notes for Cluster Autoscaler for 1.6,,closed,True,2017-03-28 14:47:21,2017-03-28 15:25:16
enhancements,ejc3,https://github.com/kubernetes/enhancements/pull/241,https://api.github.com/repos/kubernetes/enhancements/issues/241,spelling corrections,two spelling corrections and uppercase K in Kubernetes,closed,True,2017-03-28 18:37:42,2017-03-28 18:38:58
enhancements,yujuhong,https://github.com/kubernetes/enhancements/pull/242,https://api.github.com/repos/kubernetes/enhancements/issues/242,Add release note for the node components/kubelet,"/cc @kubernetes/sig-node-pr-reviews @dchen1107 @derekwaynecarr @vishh 

/cc @ethernetdan @calebamiles ",closed,True,2017-03-28 18:52:04,2017-03-28 18:57:35
enhancements,maciaszczykm,https://github.com/kubernetes/enhancements/pull/243,https://api.github.com/repos/kubernetes/enhancements/issues/243,Update 1.6.0 release notes,Aligned with https://github.com/kubernetes/dashboard/releases/tag/v1.6.0.,closed,True,2017-03-29 13:04:37,2017-03-29 19:03:51
enhancements,jsafrane,https://github.com/kubernetes/enhancements/issues/244,https://api.github.com/repos/kubernetes/enhancements/issues/244,Expose StorageClass Params To End Users (Configurable storage dynamic provisioning),"# Feature Description
- One-line feature description (can be used as a release note): Expose StorageClass Params To End Users (aka Provisioning configuration in PVC)
- Primary contact (assignee): @jsafrane 
- Responsible SIGs: @kubernetes/sig-storage-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/247/
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @msau42 @gnufied 
- Approver (likely from SIG/area to which feature belongs): @saad-ali 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.8) 
  - Beta release target (>=1.9)
  - Stable release target (>1.9)",closed,False,2017-04-03 11:14:34,2018-03-09 11:11:34
enhancements,msau42,https://github.com/kubernetes/enhancements/issues/245,https://api.github.com/repos/kubernetes/enhancements/issues/245,Capacity Isolation Resource Management,"# Feature Description
- One-line feature description (can be used as a release note): This feature adds capacity isolation support for local storage at node, container, and volume levels.
- Primary contact (assignee): @vishh @jingxu97
- Responsible SIGs: @kubernetes/sig-storage-feature-requests 
- Design proposal link (community repo): kubernetes/community#306
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @derekwaynecarr, @vishh, @dashpole
- Approver (likely from SIG/area to which feature belongs): @thockin, @vishh, @derekwaynecarr 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.7/1.8
  - Beta release target (x.y): 1.9
  - Stable release target (x.y): 1.10",closed,False,2017-04-04 22:25:28,2017-11-02 00:42:03
enhancements,ConnorDoyle,https://github.com/kubernetes/enhancements/issues/246,https://api.github.com/repos/kubernetes/enhancements/issues/246,Extended pod-level resource isolation,"# Feature Name
- One-line feature description (can be used as a release note): Extended pod-level resource isolation
- Primary contact (assignee): @ConnorDoyle 
- Responsible SIGs:
- Design proposal link (community repo): [Design document](https://docs.google.com/document/d/142xh0IpQe2olyyGmMuCsWAvlUG_mMz0LgdJPsdDIyG4) (in progress).
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)


############### **Outdated template below** #################

# Description

Currently, the pod-level isolation strategy is fixed in Kubernetes. This feature is for Kubernetes to provide a way for cluster operators to extend the pod-level container management policy. This is a low-level feature that has been discussed as part of a solution to a broad number of resource isolation use cases including, but not limited to, device initialization and related container setup, and node-local cpu affinity policy.

[Design document](https://docs.google.com/document/d/142xh0IpQe2olyyGmMuCsWAvlUG_mMz0LgdJPsdDIyG4) (in progress).

Related issues:
- https://github.com/kubernetes/kubernetes/issues/28313
- #192 
- #76

# Progress Tracker

- [ ] Alpha
    - [x] Write and maintain draft quality doc
      - [x] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc:  [design doc](https://docs.google.com/document/d/142xh0IpQe2olyyGmMuCsWAvlUG_mMz0LgdJPsdDIyG4)
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [x] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **kubernetes/kubernetes**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **https://github.com/kubernetes/kubernetes/pull/44870**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [x] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** @vishh
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.",closed,False,2017-04-05 22:08:34,2017-05-04 04:03:24
enhancements,countspongebob,https://github.com/kubernetes/enhancements/issues/247,https://api.github.com/repos/kubernetes/enhancements/issues/247,"Feature repo and SIG PM should track ""efforts"", not ""features""","Creating this issue per the SIG PM discussion today. Linking this issue to Ihor's proposed feature lifecycle doc and the governance PM discussion as requested during the call.

Linking to governance umbrella seems sensible, as the Seven need to ensure they either define or define who will own the overall change control process.

Draft feature lifecycle doc is [here](https://docs.google.com/document/d/1-D_QP2IC5Z_QJUmTOV24IsFknc9pGPU5xeq6gjP4f38/edit
). (Note that this proposal would also rename this to a ""effort submission process"".

Use of the word ""feature"" implies that that some new API call or new functional behavior of kubernetes is scope of the repo or the PM SIG. This also starts to beg the question ""what is a feature"". 

Proposing that the scope is instead a chunk of work of sufficiently large or significant scope that it should tracked and visible across the entire community with the following guidelines:

Your proposed work might belong in the ""effort repo"" if:
- It's a feature that would show up in blog
- It's something that would end up in the release notes
- If it crosses SIG boundaries
- If it affects a lot of developers 
- If it affects a lot of users

Checklists, review, and timing of all significant chunks of work (whether features or not) demand the same level of rigor and process.

Proposing feature repo should be renamed and SIG PM scope clarified.

-Bob

",closed,False,2017-04-11 21:39:38,2017-04-12 15:13:32
enhancements,jbw976,https://github.com/kubernetes/enhancements/pull/248,https://api.github.com/repos/kubernetes/enhancements/issues/248,Fix typo in 1.6 release notes for --storage-backend,,closed,True,2017-04-12 21:14:19,2017-05-04 15:08:36
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/249,https://api.github.com/repos/kubernetes/enhancements/issues/249,Propose Maru Newby as 1.7 Release Manager,"- Propose Maru as 1.7 release manager following his work in the 1.6 release team. 
- Also proposes Shruti Ramesh from Microsoft as shadow release manager with the intent of having Shruti serve as the 1.8 release manager.
 - Propose that Anthony Howe retain role as Manual upgrade lead for 1.7",closed,True,2017-04-17 18:41:10,2017-04-17 23:27:45
enhancements,tsandall,https://github.com/kubernetes/enhancements/issues/250,https://api.github.com/repos/kubernetes/enhancements/issues/250,Policy-based Federated Resource Placement,"# Feature Description
- One-line feature description (can be used as a release note): Policy-based control over Federated resource placement
- Primary contact (assignee): @tsandall 
- Responsible SIGs: @kubernetes/sig-federation-feature-requests
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/292
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @quinton-hoole @nikhiljindal 
- Approver (likely from SIG/area to which feature belongs): @nikhiljindal 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.7)
  - Beta release target (TBD)
  - Stable release target (TBD)
",closed,False,2017-04-17 20:04:16,2018-03-02 00:16:02
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/251,https://api.github.com/repos/kubernetes/enhancements/issues/251,"Propose Dawn, Ihor, Andrew, Wojciech as Release Team for 1.7",,closed,True,2017-04-17 22:23:47,2017-04-20 23:42:05
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/252,https://api.github.com/repos/kubernetes/enhancements/issues/252,keep dates in order; add beta0 to details,,closed,True,2017-04-20 23:31:25,2017-06-30 03:14:58
enhancements,jamiehannaford,https://github.com/kubernetes/enhancements/issues/253,https://api.github.com/repos/kubernetes/enhancements/issues/253,Add --until and --until-time flags for kubectl logs,"# Feature Description
- One-line feature description (can be used as a release note): **Add --until and --until-time flags for kubectl logs**
- Primary contact (assignee): @jamiehannaford
- Responsible SIGs: **sig-cli, sig-node**
- Design proposal link: https://docs.google.com/document/d/13Fl-7B45Uw2nuIMt71-al7E0xMTrjZ-0OHaLstWqaU4/edit?usp=sharing 
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: **TBD**
- Approver (likely from SIG/area to which feature belongs): **TBD**
- Feature target (which target equals to which milestone): **TBD**
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

## Longer Description

Many logging tools such as `journalctl` allow relativistic log access. This is useful, for example, when an outage has happened at a specific time and a user wants to retrieve logs from a specific time window.

Right now `kubectl` provides `--since` and `--since-time` but not it `--until` or `--until-then`. This feature request tracks the implementation of the latter.

Note: I wasn't sure if this justified a feature issue, but I erred on the side of caution and created one anyway. I thought that because it touched multiple codebases and SIGs, plus that it affects end-users directly via kubectl, it should probably be tracked here. Since this is a relatively minor feature, however, I'm not sure it needs to be broken up into Alpha, Beta and Stable stages. So I've edited the progress tracker template a bit
",closed,False,2017-04-21 11:31:18,2018-01-08 15:42:54
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/254,https://api.github.com/repos/kubernetes/enhancements/issues/254,Propose Caleb Miles as member of 1.7 release team,Proposes Caleb Miles (myself) as the Release Team Secondary for 1.7. The Secondary has helped picked up less technical work to allow the Release Team Lead to load shed.,closed,True,2017-04-21 17:19:01,2017-04-21 23:35:17
enhancements,shrutir25,https://github.com/kubernetes/enhancements/pull/255,https://api.github.com/repos/kubernetes/enhancements/issues/255,Propose shrutir25 for Release Shadow and anhowe for Manual Upgrade,,closed,True,2017-04-21 22:22:16,2017-05-03 22:38:45
enhancements,dhilipkumars,https://github.com/kubernetes/enhancements/issues/256,https://api.github.com/repos/kubernetes/enhancements/issues/256,deferContainers - Pod Termination Semantics,"# Feature Description
- One-line feature description (can be used as a release note): Pod Termination Semantics 
- Primary contact (assignee): @dhilipkumars 
- Responsible SIGs: @kubernetes/sig-apps-feature-requests @kubernetes/sig-node-feature-requests 
- Design proposal link (community repo): [design-proposal](https://github.com/kubernetes/community/pull/483)
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @smarterclayton @erictune 
- Approver (likely from SIG/area to which feature belongs): @dchen1107 
- Feature target (which target equals to which milestone):
  - Alpha release target (1..7)  minimal viable implementation of design and API (api) finished. 
",closed,False,2017-04-22 04:31:56,2018-02-22 15:23:12
enhancements,dhilipkumars,https://github.com/kubernetes/enhancements/issues/257,https://api.github.com/repos/kubernetes/enhancements/issues/257,Federated Pod AutoScaler feature ,"# Feature Description
- One-line feature description (can be used as a release note): Horizontal Workload Scaling across Federation
- Primary contact (assignee): @irfanurrehman 
- Responsible SIGs: @kubernetes/sig-autoscaling-feature-requests @kubernetes/sig-federation-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/593
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @quinton-hoole @madhusudancs 
- Approver (likely from SIG/area to which feature belongs): @quinton-hoole 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.7):  Initial implementation of the Desing along with respective API",closed,False,2017-04-22 04:36:12,2018-03-11 18:05:34
enhancements,dhilipkumars,https://github.com/kubernetes/enhancements/issues/258,https://api.github.com/repos/kubernetes/enhancements/issues/258,Federated Jobs feature ,"# Feature Description
- One-line feature description (can be used as a release note): 
- Primary contact (assignee): @quinton-hoole 
- Responsible SIGs: @kubernetes/sig-federation-feature-requests 
- Design proposal link (community repo):  https://docs.google.com/document/d/1TZ4ZMZ8AEOlVyK6H_q-zNpAdlzTip8sxMQUVQeQ-O-w/edit#heading=h.v3yscf7s8679
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @quinton-hoole @madhusudancs @irfanurrehman
- Approver (likely from SIG/area to which feature belongs): @quinton-hoole 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.7): Inital implementation of the design along with API.",closed,False,2017-04-22 04:40:23,2018-04-17 20:53:54
enhancements,dhilipkumars,https://github.com/kubernetes/enhancements/issues/259,https://api.github.com/repos/kubernetes/enhancements/issues/259,Federated StatefulSets feature,"# Feature Description
- One-line feature description (can be used as a release note): Federated StatefulSets
- Primary contact (assignee): @irfanurrehman 
- Responsible SIGs: @kubernetes/sig-federation-feature-requests  
- Design proposal link (community repo): [design-proposal](https://github.com/kubernetes/community/pull/437)
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @quinton-hoole @shashidharatd @madhusudancs 
- Approver (likely from SIG/area to which feature belongs): @quinton-hoole 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.7): Initial Implementation along with API",closed,False,2017-04-22 04:47:10,2018-03-11 00:48:34
enhancements,dhilipkumars,https://github.com/kubernetes/enhancements/issues/260,https://api.github.com/repos/kubernetes/enhancements/issues/260,Accessing Kubernetes Resources from Federation Apiserver,"# Description

Accessing Kubernetes resources from federation apiserver feature enables users to be able to get all or a subset of all their resources from all their Kubernetes clusters under federation by talking to federation Apiserver. Note that users will be able to get all resources from underlying clusters, not just the ones which have a corresponding federation object.

_The design doc is in progress will be uploaded soon_

# Progress Tracker


- [ ] Alpha
    - [ ] Write and maintain draft quality doc
      - [ ] During development keep a doc up-to-date about the desired experience of the feature and how someone can try the feature in its current state. Think of it as the README of your new feature and a skeleton for the docs to be written before the Kubernetes release. Paste link to Google Doc: **DOC-LINK**
    - [ ] Design Approval
      - [ ] Design Proposal.  This goes under [design-proposals](https://github.com/kubernetes/community/tree/master/contributors/design-proposals).  Doing a proposal as a PR allows line-by-line commenting from community, and creates the basis for later design documentation.  Paste link to merged design proposal here: **PROPOSAL-NUMBER**
      - [ ] Decide which repo this feature's code will be checked into. Not everything needs to land in the core kubernetes repo. **REPO-NAME**
      - [ ] Initial API review (if API).  Maybe same PR as design doc. **PR-NUMBER**
        -  Any code that changes an API (`/pkg/apis/...`)
        -  **cc `@kubernetes/api`**
      - [ ] Identify shepherd (your SIG lead and/or kubernetes-pm@googlegroups.com will be able to help you). **My Shepherd is:** _replace.me@replaceme.com_ (and/or GH Handle)
        -  A shepherd is an individual who will help acquaint you with the process of getting your feature into the repo, identify reviewers and provide feedback on the feature. They are _not_ (necessarily) the code reviewer of the feature, or tech lead for the area.
        -  The shepherd is _not_ responsible for showing up to Kubernetes-PM meetings and/or communicating if the feature is on-track to make the release goals. That is still your responsibility.
      - [ ] Identify secondary/backup contact point. **My Secondary Contact Point is:** _replace.me@replaceme.com_ (and/or GH Handle)
    - [ ] Write (code + tests + docs) then get them merged.  **ALL-PR-NUMBERS**
      - [ ] **Code needs to be disabled by default.**   Verified by code OWNERS
      - [ ] Minimal testing
      - [ ] Minimal docs
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
        - New apis: *Glossary Section Item* in the docs repo: kubernetes/kubernetes.github.io
      - [ ] Update release notes
- [ ] Beta
  - [ ] Testing is sufficient for beta
  - [ ] User docs with tutorials
        - *Updated walkthrough / tutorial* in the docs repo: kubernetes/kubernetes.github.io
        - cc `@kubernetes/docs` on docs PR
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Thorough API review
    - **cc `@kubernetes/api`**
- [ ] Stable
  - [ ] docs/proposals/foo.md moved to docs/design/foo.md 
        - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off
  - [ ] Soak, load testing 			
  - [ ] detailed user docs and examples
    - **cc `@kubernetes/docs`**
    - **cc `@kubernetes/feature-reviewers` on this issue** to get approval before checking this off

*FEATURE_STATUS is used for feature tracking and to be updated by `@kubernetes/feature-reviewers`.*
**FEATURE_STATUS: IN_DEVELOPMENT**

More advice:

Design
   - Once you get LGTM from a *`@kubernetes/feature-reviewers`* member, you can check this checkbox, and the reviewer will apply the ""design-complete"" label.
 
Coding
  - Use as many PRs as you need.  Write tests in the same or different PRs, as is convenient for you.
  - As each PR is merged, add a comment to this issue referencing the PRs.  Code goes in the http://github.com/kubernetes/kubernetes repository,
        and sometimes http://github.com/kubernetes/contrib, or other repos.
  - When you are done with the code, apply the ""code-complete"" label.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/feature-reviewers` and they will
        check that the code matches the proposed feature and design, and that everything is done, and that there is adequate
        testing.  They won't do detailed code review: that already happened when your PRs were reviewed.
        When that is done, you can check this box and the reviewer will apply the ""code-complete"" label.

Docs
  - [ ] Write user docs and get them merged in.
  - User docs go into http://github.com/kubernetes/kubernetes.github.io.
  - When the feature has user docs, please add a comment mentioning `@kubernetes/docs`.
  - When you get LGTM, you can check this checkbox, and the reviewer will apply the ""docs-complete"" label.

",closed,False,2017-04-22 04:51:34,2017-04-24 02:39:44
enhancements,dhilipkumars,https://github.com/kubernetes/enhancements/issues/261,https://api.github.com/repos/kubernetes/enhancements/issues/261,Federated Resource Quota feature ,"# Feature Description
- One-line feature description (can be used as a release note): Federated Resource Quota 
- Primary contact (assignee): @quinton-hoole 
- Responsible SIGs: @kubernetes/sig-federation-feature-requests
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @derekwaynecarr 
- Approver (likely from SIG/area to which feature belongs): @quinton-hoole @derekwaynecarr 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.7): Initial implementation of the design along with API",closed,False,2017-04-22 04:53:04,2018-10-03 15:58:07
enhancements,marun,https://github.com/kubernetes/enhancements/pull/262,https://api.github.com/repos/kubernetes/enhancements/issues/262,Propose Maru Newby as bug lead on 1.7 release team,,closed,True,2017-04-24 20:13:20,2017-04-26 22:58:47
enhancements,lavalamp,https://github.com/kubernetes/enhancements/issues/263,https://api.github.com/repos/kubernetes/enhancements/issues/263,API Aggregation,"# Feature Description
- One-line feature description (can be used as a release note): User-provided apiservers can be aggregated (served along with) the rest of the Kubernetes API.
- Primary contact (assignee): @lavalamp, @deads2k, @cheftako 
- Responsible SIGs: API Machinery
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/aggregated-api-servers.md
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @deads2k, @lavalamp
- Approver (likely from SIG/area to which feature belongs): @lavalamp
- Initial target stage (alpha/beta/stable) and release (x.y):
  - Alpha: v1.6
  - Beta (and on-by-default): v1.7
  - GA: v1.10",closed,False,2017-04-24 21:09:33,2018-10-15 13:50:46
enhancements,DirectXMan12,https://github.com/kubernetes/enhancements/issues/264,https://api.github.com/repos/kubernetes/enhancements/issues/264,HPA Status Conditions,"# Feature Description
- One-line feature description (can be used as a release note): Status conditions indicating current status and/or blocking issues for the HorizontalPodAutoscaler
- Primary contact (assignee): @directxman12
- Responsible SIGs: @kubernetes/sig-autoscaling-feature-requests 
- Design proposal link (community repo): kubernetes/community#560
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @mwielgus @derekwaynecarr 
- Approver (likely from SIG/area to which feature belongs):
- Initial target stage (alpha/beta/stable) and release (x.y): alpha in 1.7
",closed,False,2017-04-24 21:28:10,2018-04-24 18:35:17
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/issues/265,https://api.github.com/repos/kubernetes/enhancements/issues/265,Implement IPVS-based in-cluster service load balancing,"# Feature Description
- One-line feature description (can be used as a release note): Implement IPVS-based in-cluster service load balancing
- Primary contact (assignee): @m1093782566 (@quinton-hoole acting as proxy as @haibinxie is not yet a member of the K8s org)
- Responsible SIGs: sig-networking
- Design proposal link (community repo):  See https://github.com/kubernetes/kubernetes/issues/44063
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @thockin @quinton-hoole
- Approver (likely from SIG/area to which feature belongs): @thockin 
- Initial target stage (alpha/beta/stable) and release (x.y):
   - alpha in v1.8
   - beta in v1.9
   - GA in v1.10

cc: @kubernetes/sig-network-feature-requests ",closed,False,2017-04-24 21:52:51,2018-10-15 13:50:46
enhancements,jcbsmpsn,https://github.com/kubernetes/enhancements/issues/266,https://api.github.com/repos/kubernetes/enhancements/issues/266,Kubelet Client TLS Certificate Rotation,"# Feature Description
- One-line feature description (can be used as a release note):
Rotation of the client TLS certificate on the kubelet.

- Primary contact (assignee):
@jcbsmpsn

- Responsible SIGs: @kubernetes/sig-auth-feature-requests 

- Design proposal link (community repo): https://github.com/kubernetes/community/pull/768

- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@ericchiang @mikedanese @liggitt 

- Approver (likely from SIG/area to which feature belongs):
@timstclair

- Initial target stage (alpha/beta/stable) and release (x.y):
alpha 1.7
",open,False,2017-04-24 23:24:07,2019-01-16 16:30:25
enhancements,jcbsmpsn,https://github.com/kubernetes/enhancements/issues/267,https://api.github.com/repos/kubernetes/enhancements/issues/267,Kubelet Server TLS Certificate Rotation,"# Feature Description
- One-line feature description (can be used as a release note):
Rotation of the server TLS certificate on the kubelet.

- Primary contact (assignee):
@jcbsmpsn 

- Responsible SIGs:
sig-auth

- Design proposal link (community repo): https://github.com/kubernetes/community/pull/602

- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@mikedanese @awly 

- Approver (likely from SIG/area to which feature belongs):
@tallclair 

- Initial target stage (alpha/beta/stable) and release (x.y):
  - alpha 1.7
  - beta 1.12
",open,False,2017-04-24 23:24:48,2019-01-25 05:34:28
enhancements,davidopp,https://github.com/kubernetes/enhancements/issues/268,https://api.github.com/repos/kubernetes/enhancements/issues/268,Priority/preemption,"# Feature Description
- One-line feature description (can be used as a release note): A mechanism for imposing a total order on pods, that determines which pods run and which go pending when the cluster is overcomitted, implemented through a priority scheme, preemption of running pods by the default scheduler, having kubelet eviction order take the priority into account, and modifications to the quota mechanism to take priority into account.
- Primary contact (assignee): @bsalamat 
- Responsible SIGs: @kubernetes/sig-scheduling-feature-requests, @kubernetes/sig-node-feature-requests 
- Design proposal link (community repo): high-level architecture doc (currently under review/discussion/iteration) [here](https://docs.google.com/document/d/1-H2hnZap7gQivcSU-9j4ZrJ8wE_WwcfOkTeAGjzUyLA/edit); detailed design doc for first chunk is in https://github.com/kubernetes/community/pull/604
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @davidopp, @derekwaynecarr, @erictune, @k82cn, @timothysc, @wojtek-t 
- Approver (likely from SIG/area to which feature belongs): @davidopp  
- Initial target stage (alpha/beta/stable) and release (x.y): for 1.7 we anticipate having the detailed design, API (alpha), and implementation of kubelet eviction ordering (alpha); some implementation work for the other pieces will hopefully have begun but will not be in 1.7

ref/ kubernetes/kubernetes#22212
cc/ @dchen1107 

Note: this feature is intimately related to #269.

",open,False,2017-04-25 06:34:32,2019-01-16 16:31:08
enhancements,davidopp,https://github.com/kubernetes/enhancements/issues/269,https://api.github.com/repos/kubernetes/enhancements/issues/269,Batch job admission and flexible resource allocation,"# Feature Description
- One-line feature description (can be used as a release note): Batch job admission and flexible resource allocation
- Primary contact (assignee): @k82cn, @foxish 
- Responsible SIGs: @kubernetes/sig-scheduling-feature-requests @kubernetes/sig-apps-feature-requests 
- Design proposal link (community repo): high-level architecture doc (currently under review/discussion/iteration) [here](https://docs.google.com/document/d/1-H2hnZap7gQivcSU-9j4ZrJ8wE_WwcfOkTeAGjzUyLA/edit); detailed design doc to be forthcoming once there is iteration and agreement on the high level design
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @davidopp, @erictune, @foxish, @k82cn, @timothysc 
- Approver (likely from SIG/area to which feature belongs): @davidopp, @erictune, @timothysc 
- Initial target stage (alpha/beta/stable) and release (x.y): unclear what, if anything, will be finished in time for 1.7, but it would be alpha in any event

ref/ kubernetes/kubernetes#36716

Note: This feature is intimately related to #268.
",closed,False,2017-04-25 06:49:53,2018-04-06 01:54:45
enhancements,ravigadde,https://github.com/kubernetes/enhancements/issues/270,https://api.github.com/repos/kubernetes/enhancements/issues/270,Bind method in scheduler extender,"# Feature Description
- One-line feature description (can be used as a release note): Support for delegation of pod binding to a scheduler extender
- Primary contact (assignee): @ravigadde
- Responsible SIGs: scheduling-sig
- Design proposal link (community repo): #41235 and #41447 have details on requirements and solution options
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @timothysc @k82cn 
- Approver (likely from SIG/area to which feature belongs): @davidopp 
- Initial target stage (alpha/beta/stable) and release (x.y): alpha 1.7
",closed,False,2017-04-25 14:56:38,2017-12-30 22:08:16
enhancements,DirectXMan12,https://github.com/kubernetes/enhancements/issues/271,https://api.github.com/repos/kubernetes/enhancements/issues/271,Metrics Server (for resource metrics API),"# Feature Description
- One-line feature description (can be used as a release note): Introduces a lightweight monitoring component for serving the core resource metrics API used by the Horizontal Pod Autoscaler and other components.
- Primary contact (assignee): @piosz 
- Responsible SIG: sig/instrumentation
- Design proposal link (community repo): [Metrics server](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/metrics-server.md)
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @directxman12
- Approver (likely from SIG/area to which feature belongs): @directxman12
- Initial target stage (alpha/beta/stable) and release (x.y): alpha in 1.7, beta in 1.8
",closed,False,2017-04-25 15:39:15,2018-06-16 05:26:58
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/272,https://api.github.com/repos/kubernetes/enhancements/issues/272,StatefulSets should support a burst mode for faster scale up / down,"# Feature Description
- One-line feature description (can be used as a release note): StatefulSet authors should be able to relax the ordering and parallelism policies for software that can safely support rapid, out-of-order changes.
- Primary contact (assignee): @smarterclayton
- Responsible SIGs: sig-apps
- Design proposal link (community repo): https://github.com/kubernetes/kubernetes/issues/41255
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @kow3ns 
- Approver (likely from SIG/area to which feature belongs): 
- Initial target stage (alpha/beta/stable) and release (x.y): alpha 1.7",closed,False,2017-04-25 17:39:31,2017-07-31 16:55:49
enhancements,kevin-wangzefeng,https://github.com/kubernetes/enhancements/issues/273,https://api.github.com/repos/kubernetes/enhancements/issues/273,Automatic rollback for failed deployments,"# Feature Description
- One-line feature description (can be used as a release note): Automatic rollback for failed deployments
- Primary contact (assignee): @kevin-wangzefeng
- Responsible SIGs: sig-apps
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @kargakis 
- Approver (likely from SIG/area to which feature belongs):
- Initial target stage (alpha/beta/stable) and release (x.y): alpha 1.8
",closed,False,2017-04-25 17:51:27,2018-03-09 14:14:35
enhancements,therc,https://github.com/kubernetes/enhancements/issues/274,https://api.github.com/repos/kubernetes/enhancements/issues/274,"Pod locality for services (node-local, etc.)","# Feature Description
- One-line feature description (can be used as a release note): Allow clients to talk only to a service's pods running on the same node/rack/AZ/region/label, etc.
- Primary contact (assignee): therc
- Responsible SIGs: sig-network
- Design proposal link (community repo): https://github.com/kubernetes/kubernetes/pull/28637 (can be recreated in the community repo if needed)
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @thockin @smarterclayton
- Approver (likely from SIG/area to which feature belongs): @thockin
- Initial target stage (alpha/beta/stable) and release (x.y): alpha 1.7
",closed,False,2017-04-25 20:40:47,2019-01-18 19:38:13
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/issues/275,https://api.github.com/repos/kubernetes/enhancements/issues/275,Add support for pre-allocated hugepages,"# Feature Description
- One-line feature description (can be used as a release note): Enable a pod to express a resource requirement for a pre-allocated hugepage of a particular size.  Kubelet isolates access to hugepages.
- Primary contact (assignee): @derekwaynecarr
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/837
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @vishh @sjenning 
- Approver (likely from SIG/area to which feature belongs):
- Initial target stage (alpha/beta/stable) and release (x.y): alpha release 1.8, beta 1.10",closed,False,2017-04-25 21:19:15,2018-10-03 15:58:08
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/issues/276,https://api.github.com/repos/kubernetes/enhancements/issues/276,Further differentiate performance characteristics associated with pod level QoS,"# Feature Description
- One-line feature description (can be used as a release note): Provide a reason why users would choose to run Guaranteed pods over Burstable pods.  Right now, Guaranteed pods have a penalty (due to cpu limit enforcement).  Ideally, we can optimize how the kubelet manages Guaranteed pods to provide material benefits over Burstable pods, particularly with respect to latency sensitivity.
- Primary contact (assignee): @sjenning @ConnorDoyle 
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/community/issues/654
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @vishh @derekwaynecarr
- Approver (likely from SIG/area to which feature belongs): @derekwaynecarr 
- Initial target stage (alpha/beta/stable) and release (x.y): Alpha 1.8, Beta 1.10
",closed,False,2017-04-25 21:25:45,2019-03-07 19:16:48
enhancements,verb,https://github.com/kubernetes/enhancements/issues/277,https://api.github.com/repos/kubernetes/enhancements/issues/277,Ephemeral Containers,"# Feature Description
- One-line feature description (can be used as a release note): Support advanced troubleshooting of running pods by running a new container image in shared pod namespaces.
- Primary contact (assignee): @verb 
- Responsible SIGs: sig-node
- Design proposal link (community repo): [Troubleshoot Running Pods](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/troubleshoot-running-pods.md) (pending update: kubernetes/community#1269)
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @dashpole @yujuhong 
- Approver (likely from SIG/area to which feature belongs): @dchen1107 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.15)
  - Beta release target (x.y)
  - Stable release target (x.y)",open,False,2017-04-25 21:49:18,2019-02-05 16:08:55
enhancements,jsafrane,https://github.com/kubernetes/enhancements/issues/278,https://api.github.com/repos/kubernetes/enhancements/issues/278,Containerized mounts,"# Feature Description
- One-line feature description (can be used as a release note):
**Kubernetes can run mount utilities in pods instead on the host.**

- Primary contact (assignee): @jsafrane
- Responsible SIGs: sig-storage, sig-node
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/589
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  - @saad-ali for sig-storage
  - @vishh for sig-node
- Approver (likely from SIG/area to which feature belongs): @saad-ali 
- Initial target stage (alpha/beta/stable) and release (x.y): 
  - Alpha release target (x.y): ~~1.7~~ ~~1.8~~ 1.9
  - Beta release target (x.y): 1.10?
  - Stable release target (x.y): 1.11

",closed,False,2017-04-26 12:10:27,2018-04-23 07:59:15
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/279,https://api.github.com/repos/kubernetes/enhancements/issues/279,Limit node access to API,"# Limit node access to API
- One-line feature description (can be used as a release note):
  * A new `Node` authorization mode and `NodeRestriction` admission plugin, when used in combination, limit nodes' access to specific APIs, so that they may only modify their own Node API object, only modify Pod objects bound to themselves, and only retrieve secrets and configmaps referenced by pods bound to themselves.
- Primary contact (assignee):
  * @liggitt, @saad-ali
- Responsible SIGs:
  * sig/auth
- Design proposal link (community repo):
  * https://github.com/kubernetes/community/pull/585
  * https://github.com/kubernetes/community/pull/911
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  * @deads2k 
  * @timstclair  
  * @ericchiang 
- Approver (likely from SIG/area to which feature belongs):
  * @smarterclayton 
- Feature target (which target equals to which milestone):
  * 1.7
    - node authorizer and noderestriction admission beta release
  * 1.13
    - continued beta work
    - restrict node label addition (https://github.com/kubernetes/community/pull/911)
  * 1.14
    - restrict node address self-modification
    - stable release",open,False,2017-04-26 17:17:39,2019-01-16 16:31:57
enhancements,msau42,https://github.com/kubernetes/enhancements/issues/280,https://api.github.com/repos/kubernetes/enhancements/issues/280,1.7 Local Persistent Volumes,"# Local Persistent Volumes
- One-line feature description (can be used as a release note): On alpha clusters, a new volume type, LocalVolume, can be created as a PersistentVolumeSource that represents a local mount point on a specific node.
- Primary contact (assignee): @msau42
- Responsible SIGs: sig-storage, sig-scheduling
- Design proposal link (community repo): kubernetes/community#306
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @vishh, @saad-ali, @jsafrane, @childsb, @lpabon
- Approver (likely from SIG/area to which feature belongs): @thockin, @saad-ali 
- Feature target (which target equals to which milestone): Alpha 1.7",closed,False,2017-04-26 19:48:51,2017-04-26 22:04:40
enhancements,mtaufen,https://github.com/kubernetes/enhancements/issues/281,https://api.github.com/repos/kubernetes/enhancements/issues/281,Dynamic Kubelet Configuration,"# Dynamic Kubelet Configuration
- One-line feature description (can be used as a release note): 
**New Kubelet configurations can be rolled out in a live cluster**
- Primary contact (assignee): @mtaufen
- Responsible SIGs: sig-node
- [Design proposal](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/dynamic-kubelet-configuration.md) (community repo)
- Documentation:
  - [Low-level manual workflow](https://github.com/kubernetes/kubernetes.github.io/pull/5523)
- Tests:
  - https://k8s-testgrid.appspot.com/sig-node-kubelet#kubelet-serial-gce-e2e&include-filter-by-regex=DynamicKubeletConfig
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @liggitt @thockin @dchen1107 @dashpole  
- Approver (likely from SIG/area to which feature belongs): @dchen1107 
- Feature targets (which target equals to which milestone):
  - Alpha release target (1.8):
    - [x] Foundational primitives and Kubelet behavior implemented behind an Alpha feature gate
  - 1.9:
    - [x] Incremental improvements working towards 1.10 goals
  - 1.10:
    - [x] Improved testing, see https://github.com/kubernetes/kubernetes/issues/50217
    - [x] Kubelet configuration type reviewed and moved to beta
    - [x] Kubelet loading configuration from a file moved to beta
  - Beta release target (1.11):
    - [x] Node authorizer automatically allows access to the source specified by `Node.Spec.ConfigSource` https://github.com/kubernetes/kubernetes/pull/60100
    - [x] Unpack remote configs to directories on the node: https://github.com/kubernetes/kubernetes/pull/59692
    - [x] Make the Kubelet config key explicit: 
      - [x] PR: https://github.com/kubernetes/kubernetes/pull/59847
    - [x] Simplify skew scenarios/debugging by respecting ConfigMap mutations  
      - [x] Issue: https://github.com/kubernetes/kubernetes/issues/61643
      - [x] PR: https://github.com/kubernetes/kubernetes/pull/63221
    - [x] Expose a structured status for dynamic config, rather than a node condition: 
      - [x] Issue: https://github.com/kubernetes/kubernetes/issues/56896
      - [x] PR: https://github.com/kubernetes/kubernetes/pull/63314
    - [x] Expose metrics for Kubelet config: 
      - [x] PR: https://github.com/kubernetes/kubernetes/pull/57527
    - [x] Kubelet config validation should respect target feature gate combination 
      - [x] Issue: https://github.com/kubernetes/kubernetes/issues/63305
      - [x] PR: https://github.com/kubernetes/kubernetes/pull/63409
    - [x] Improve test coverage of the file utils (`pkg/kubelet/kubeletconfig/util/files/files.go`): 
      - [x] PR: https://github.com/kubernetes/kubernetes/pull/63496
    - [x] Document the structure of the file tree under `--dynamic-config-dir`, other docs updates for 1.11
      - [x] PR: https://github.com/kubernetes/website/pull/8766
    - [x] Document per-field advise for cluster administrators and k8s-as-a-service providers
      - [x] PR: https://github.com/kubernetes/kubernetes/pull/64354 
    - [x] Dynamic kubelet configuration moved to beta
",open,False,2017-04-26 23:03:26,2019-01-16 21:29:36
enhancements,caesarxuchao,https://github.com/kubernetes/enhancements/issues/282,https://api.github.com/repos/kubernetes/enhancements/issues/282,Moving external API types to a separate repo (k8s.io/api),"# k8s.io/api: repo for external API types
- External API types are moved from `k8s.io/kubernetes/pkg/api/` and `k8s.io/kubernetes/pkg/apis/` to another repo, `k8s.io/api`. kubernetes repositories, including the main repo and client-go, should import API types from there.
- Primary contact (assignee): @caesarxuchao @lavalamp 
- Responsible SIGs: sig-apimachinery
- Design proposal link (community repo): https://github.com/kubernetes/kubernetes/issues/44065
- Reviewer(s) - @lavalamp @smarterclayton @sttts (are there other volunteers?)
- Approver (likely from SIG/area to which feature belongs): @lavalamp @smarterclayton 
- Feature target (which target equals to which milestone):
  - k8s.io/apis in alpha state (meaning contents and directory layout of the repo might change in non-backward compatible way) in 1.8
",closed,False,2017-04-26 23:03:49,2018-01-02 08:45:50
enhancements,rootfs,https://github.com/kubernetes/enhancements/issues/283,https://api.github.com/repos/kubernetes/enhancements/issues/283,Hung NFS volumes can wedge the kubelet,"# Hung NFS volumes can wedge the kubelet
- One-line feature description (can be used as a release note):
When an NFS volume hangs, reading directory off the volume or unmounting the volume will stuck and thus wedges Kubelet. (also see https://github.com/kubernetes/kubernetes/issues/31272)
- Primary contact (assignee): Hemant Kumar @gnufied 
- Responsible SIGs: Storage 
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:  Google: @saad-ali  @jingxu97 Red Hat: @childsb @rootfs 
- Approver (likely from SIG/area to which feature belongs): @childsb @saad-ali 
- Feature target (which target equals to which milestone):
  - Stable release target (1.7)
",closed,False,2017-04-27 16:35:12,2017-05-25 17:39:05
enhancements,gnufied,https://github.com/kubernetes/enhancements/issues/284,https://api.github.com/repos/kubernetes/enhancements/issues/284,Add support for resizing PVs,"# Feature Name
- Add support for resizing existing PVs
- Primary contact (assignee): Hemant Kumar( @gnufied)
- Responsible SIGs: storage-sig
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/657 
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers: @saad-ali @jsafrane 
- Approver (likely from SIG/area to which feature belongs): @jsafrane 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.8 
    - File system resizing and GCE, EBS, Cinder volume type support : 1.9
  - Beta release target (x.y): 1.11
  - Stable release target (x.y): 1.12
",closed,False,2017-04-28 21:47:40,2019-03-31 21:43:13
enhancements,kow3ns,https://github.com/kubernetes/enhancements/issues/285,https://api.github.com/repos/kubernetes/enhancements/issues/285,Add MaxUnavailable to PodDisruptionBudget,"# Feature Description
- Add MaxUnavialable field to PodDistruptionBudgetSpec
- Primary contact: @kow3ns (for now)
- Responsible SIGs: @kubernetes/sig-apps-feature-requests 
- Reviewer(s) - one reviewer from each of the above sigs
- Approver (likely from SIG/area to which feature belongs): @erictune 
- Feature target: 1.7
  - Beta release target 1.7
  - Stable release target 1.7
",closed,False,2017-04-28 22:36:45,2017-07-31 16:43:27
enhancements,Random-Liu,https://github.com/kubernetes/enhancements/issues/286,https://api.github.com/repos/kubernetes/enhancements/issues/286,Containerd CRI Integration,"# Feature Name
- One-line feature description (can be used as a release note): Alpha containerd CRI integration with basic sandbox/container lifecycle management and image management.
- Primary contact (assignee): @Random-Liu
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes-incubator/cri-containerd/blob/master/docs/proposal.md
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @mikebrow @yujuhong 
- Approver (likely from SIG/area to which feature belongs): @dchen1107
- Feature target (which target equals to which milestone): alpha 1.7",closed,False,2017-04-29 00:49:07,2018-04-21 01:59:13
enhancements,kargakis,https://github.com/kubernetes/enhancements/issues/287,https://api.github.com/repos/kubernetes/enhancements/issues/287,Hashing collision avoidance mechanism for Deployments,"# Feature Name
- One-line feature description (can be used as a release note): Hashing collision avoidance mechanism for Deployments
- Primary contact (assignee): @kargakis
- Responsible SIGs: @kubernetes/sig-apps-misc 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/477
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @janetkuo, @lukaszo 
- Approver (likely from SIG/area to which feature belongs):  @smarterclayton 
- Feature target (which target equals to which milestone): 1.7
  - Alpha release target 1.7
",closed,False,2017-04-29 10:38:49,2017-07-19 23:08:36
enhancements,luxas,https://github.com/kubernetes/enhancements/issues/288,https://api.github.com/repos/kubernetes/enhancements/issues/288,Improve the multi-platform compability,"# Kubernetes on multiple platforms
- One-line feature description (can be used as a release note): Kubernetes should work on the platforms the community expects it to work on. Automated CI e2e tests should be run for all supported architectures. It should be possible to run clusters with nodes of mixed architectures.
- Primary contact (assignee): @luxas @mkumatag @ixdy
- Responsible SIGs: no formal sig / `sig-release` will probably be the closest
  - Mostly this is about making our release/test tooling work on multiple platforms and providing a deployment solution that works everywhere: `kubeadm`
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/multi-platform.md
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @ixdy @luxas @vishh 
- Approver (likely from SIG/area to which feature belongs): @ixdy @luxas @vishh @thockin @brendandburns 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): v1.3/v1.4
  - Beta release target (x.y): v1.12?
  - Stable release target (x.y): TBD

It's very hard to estimate alpha/beta/stable levels of this feature as there is no clear graduation path.
Anyway, I'd consider this feature ""done"" when:
 - We have automated CI e2e Conformance tests running for arm, arm64, ppc64le, s390x and windows continously. Currently we're lacking the hardware support. I'm in touch with CNCF to fix this eventually. Also the e2e suite should be 
 - Manifest lists are pushed to the same image tag is usable on any platform without having to substitute `-ARCH` in order to get the right docker image downloaded.
 - All Kubernetes core and Incubated projects push artifacts for all supported platforms
 - QEMU inside of the multiarch containers isn't needed anymore. When building docker images for a foreign architecture, we're using QEMU for the syscall emulation, which currently requires the QEMU binary to be in the resulting image. However, with a new 4.8 kernel it can be done without any extra addition to the resulting image.

KubeCon video where I'm talking about this: https://www.youtube.com/watch?v=ZdzKQwMjg2w",open,False,2017-04-30 09:02:57,2019-02-07 22:46:16
enhancements,yguo0905,https://github.com/kubernetes/enhancements/issues/289,https://api.github.com/repos/kubernetes/enhancements/issues/289,Client Initiated Pod Termination Reason,"# Client Initiated Pod Termination Reason
- One-line feature description (can be used as a release note):
**A mechanism for specifying and delivering a signal to a Pod's containers indicating why the Pod has been terminated.**
- Primary contact (assignee): @kow3ns, @yguo0905
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/541
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @dchen1107
- Approver (likely from SIG/area to which feature belongs): @dchen1107
- Feature target (which target equals to which milestone):
  - Alpha release target (1.7): having all the design, API (alpha) and implementation finished.",closed,False,2017-05-01 16:32:46,2019-03-07 19:16:47
enhancements,yujuhong,https://github.com/kubernetes/enhancements/issues/290,https://api.github.com/repos/kubernetes/enhancements/issues/290,Enhance the Container Runtime Interface ,"# Feature Name
- One-line feature description (can be used as a release note): Enhance the Container Runtime Interface (e.g., add container and image filesystem metrics/stats, improve debuggability, etc.)
- Primary contact (assignee): @yujuhong 
- Responsible SIGs: Node
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @dchen1107 @Random-Liu 
- Approver (likely from SIG/area to which feature belongs): @dchen1107 
- Feature target (which target equals to which milestone): Alpha 1.7
",closed,False,2017-05-01 18:13:03,2017-07-10 21:52:28
enhancements,chenopis,https://github.com/kubernetes/enhancements/pull/291,https://api.github.com/repos/kubernetes/enhancements/issues/291,Add k8s.io docs to ISSUE_TEMPLATE.md,Add description for different types of documentation on kubernetes.io for new features.,closed,True,2017-05-01 20:26:18,2017-06-22 21:23:50
enhancements,dchen1107,https://github.com/kubernetes/enhancements/issues/292,https://api.github.com/repos/kubernetes/enhancements/issues/292,CRI validation test suite,"# Feature Name
- One-line feature description (can be used as a release note): Provide a serial of common validation test suites for Kubelet CRI. 
- Primary contact (assignee): @feiskyer 
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes-incubator/cri-tools
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @Random-Liu @yujuhong @dchen1107
- Approver (likely from SIG/area to which feature belongs): @dchen1107
- Feature target (which target equals to which milestone): 
  - Alpha release target 1.9
  - Beta release target 1.10
  - GA release target 1.11

  ",closed,False,2017-05-01 23:23:23,2018-10-15 13:50:46
enhancements,jingxu97,https://github.com/kubernetes/enhancements/issues/293,https://api.github.com/repos/kubernetes/enhancements/issues/293,PVC Capacity Usage Stats,"# Feature Description
- One-line feature description (can be used as a release note): PVC should show how much of the available capacity is used vs available
- Primary contact (assignee): @vkamra  
- Responsible SIGs: SIG-Storage
- Design proposal link (community repo): 
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  - @jingxu97 
  - @gnufied 
  - @vladimirvivien
- Approver (likely from SIG/area to which feature belongs):
  - @saad-ali
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.8
  - Beta release target (x.y) TBD
  - Stable release target (x.y) TBD
",closed,False,2017-05-02 05:53:16,2017-08-02 20:59:38
enhancements,ericchiang,https://github.com/kubernetes/enhancements/issues/294,https://api.github.com/repos/kubernetes/enhancements/issues/294,Webhook for determining user's group membership,"# Decouple Group Population from Authentication
- One-line feature description (can be used as a release note): User group membership can be determined by a webhook seperately from authentication.
- Primary contact (assignee): @ericchiang
- Responsible SIGs: @kubernetes/sig-auth-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/kubernetes/issues/23720
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  - @liggitt 
  - @deads2k 
  - @cjcullen 
- Approver (likely from SIG/area to which feature belongs):
  @liggitt 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.7)
  - Beta release target (x.y)
  - Stable release target (x.y)
",closed,False,2017-05-02 20:52:48,2017-05-08 22:34:30
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/295,https://api.github.com/repos/kubernetes/enhancements/issues/295,Eric Chiang fills CI Signal Lead for 1.7 Release,"Thanks for volunteering, @ericchiang!",closed,True,2017-05-03 18:00:28,2017-05-03 19:15:04
enhancements,lukemarsden,https://github.com/kubernetes/enhancements/issues/296,https://api.github.com/repos/kubernetes/enhancements/issues/296,"Easy, automated upgrades with the `kubeadm upgrade` command","# Feature Description
- One-line feature description (can be used as a release note): A new command, `kubeadm upgrade`, allows you to automatically upgrade a cluster created by `kubeadm`
- Primary contact (assignee): @lukemarsden, @luxas 
- Responsible SIGs: SIG-cluster-lifecycle
- Design proposal link (community repo):
   - https://docs.google.com/document/d/1PRrC2tvB-p7sotIA5rnHy5WAOGdJJOIXPPv23hUFGrY/edit
   - https://github.com/kubernetes/community/issues/825
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @luxas @jbeda 
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (1.7): https://kubernetes.io/docs/tasks/administer-cluster/kubeadm-upgrade-1-7/
  - Beta release target (1.8 & 1.9): https://github.com/kubernetes/community/issues/825
  - Stable release target: 1.12
",closed,False,2017-05-04 14:55:04,2018-10-30 18:37:54
enhancements,mikedanese,https://github.com/kubernetes/enhancements/issues/297,https://api.github.com/repos/kubernetes/enhancements/issues/297,Component configuration API,"# Feature Description
- One-line feature description (can be used as a release note):
Implement a config API for each kubernetes component and migrate off flag driven configuration.
- Primary contact (assignee):
@mikedanese
- Responsible SIGs: sig-cluster-lifecycle
- Design proposal link (community repo):
TBD
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
TBD
- Approver (likely from SIG/area to which feature belongs):
@roberthbailey 
- Feature target (which target equals to which milestone):
  - Alpha release target TBD
  - Beta release target TBD
  - Stable release target TBD
",closed,False,2017-05-05 03:27:11,2017-10-27 19:43:12
enhancements,kargakis,https://github.com/kubernetes/enhancements/issues/298,https://api.github.com/repos/kubernetes/enhancements/issues/298,Failure policy for Jobs,"# Feature Description
- One-line feature description (can be used as a release note):  Failure policy for Jobs
- Primary contact (assignee): @soltysh 
- Responsible SIGs: @kubernetes/sig-apps-misc 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/583
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs): @erictune 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.7)
  - Beta release target (1.8)
",closed,False,2017-05-05 12:16:16,2018-01-24 17:29:24
enhancements,chakri-nelluri,https://github.com/kubernetes/enhancements/issues/299,https://api.github.com/repos/kubernetes/enhancements/issues/299,Fix broken volume spec reconstruction,"# Feature Description
Fix broken volume spec reconstruction

- Primary contact (assignee):
@chakri-nelluri @saad-ali 

- Responsible SIGs:
sig/storage

- Design proposal link (community repo):
https://github.com/kubernetes/community/pull/650

- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@saad-ali

- Approver (likely from SIG/area to which feature belongs):
sig/storage",closed,False,2017-05-05 18:28:47,2017-05-25 17:50:05
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/300,https://api.github.com/repos/kubernetes/enhancements/issues/300,AWS: Cluster level tags,"# Feature Description
- One-line feature description (can be used as a release note): Allow configuration of additional AWS tags for dynamic resources (canonically: ELBs & EBS volumes)
- Primary contact (assignee): justinsb
- Responsible SIGs: @kubernetes/sig-aws-misc 
- Design proposal link (community repo): TBD
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)
",closed,False,2017-05-06 01:07:58,2018-03-02 18:34:16
enhancements,kokhang,https://github.com/kubernetes/enhancements/issues/301,https://api.github.com/repos/kubernetes/enhancements/issues/301,Rook Volume Plugin,"# Rook Volume Plugin
- [Rook](http://www.github.com/rook/rook) is an open source, cloud-native storage system that provides block, filesystem and object storage to cloud-native apps. A Rook volume plugin would allow users to seamlessly consume storages on their Kubernetes Apps.
- Primary contact (assignee): Steve Leon @kokhang
- Responsible SIGs: Storage
- Design proposal link (community repo): https://github.com/kubernetes/kubernetes/issues/46451
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  @rootfs 
  @liggitt 
- Approver (likely from SIG/area to which feature belongs):
  - @saad-ali
- Feature target (which target equals to which milestone):
  - Stable release target: 1.8
",closed,False,2017-05-25 17:48:33,2017-08-23 19:53:07
enhancements,sas977,https://github.com/kubernetes/enhancements/issues/302,https://api.github.com/repos/kubernetes/enhancements/issues/302,Add star,"# Feature Description
- One-line feature description (can be used as a release note):
- Primary contact (assignee):
- Responsible SIGs:
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)
",closed,False,2017-05-30 23:08:43,2017-06-05 01:09:11
enhancements,sas977,https://github.com/kubernetes/enhancements/issues/303,https://api.github.com/repos/kubernetes/enhancements/issues/303,Sas977,,closed,False,2017-06-05 01:11:14,2017-06-10 12:04:00
enhancements,xingzhou,https://github.com/kubernetes/enhancements/issues/304,https://api.github.com/repos/kubernetes/enhancements/issues/304,Add resize support for FlexVolume,"# Feature Description
- One-line feature description (can be used as a release note): Add resize call support for FlexVolume to support volume resizing like LVM expansion
- Primary contact (assignee): Tom Xing(@xingzhou)
- Responsible SIGs: sig-storage
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1700
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:  @gnufied & @chakri-nelluri
- Approver (likely from SIG/area to which feature belongs): TBD
- Feature target (which target equals to which milestone):
  - Alpha release target 1.13
  - Beta release target TBD
  - Stable release target TBD",open,False,2017-06-09 02:38:22,2019-01-30 10:06:13
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/305,https://api.github.com/repos/kubernetes/enhancements/issues/305,First pass at 1.8 schedule,"Approximate timeline and schedule for the Kubernetes 1.8 release

@kubernetes/sig-release-misc ",closed,True,2017-06-22 21:11:33,2017-07-21 22:18:23
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/306,https://api.github.com/repos/kubernetes/enhancements/issues/306,Initial incomplete release notes draft for 1.7,"I do not have the committed hours to shepherd release notes all the way through but have volunteered to do a quick first cut, mostly based on the features spreadsheet.  I have dropped TODO's on places that need filling in.  I will send followon PR's as I am able to help with content and wordsmithing.

I started with the release-1.5/release-notes-draft.md file, and removed all content under the existing headings.

I used the following script to start populating the features section
```sh
for sig in $(hub issue -M 6 | sed -e 's|.*sig/\([^ ]*\).*|\1|g' | sort | uniq); do
  echo ""- **$sig**""
  for stage in alpha beta stable; do 
    hub issue -M 6 -l sig/$sig,stage/$stage -f \
      ""  - [$stage] %t ([kubernetes/features%i](%U))%n"";
  done
done
```

I noticed the following sections in the release-1.6/release-notes-draft.md file, but have explicitly left them out here.  Please add back in if you feel they're necessary:
- WARNING: etcd backup strongly recommneded
- Changes to API Resources
- Changes to Major Components
- Changes to Cluster Provisioning Scripts
- Changes to Addons

I manually replaced the feature issue titles with one-line release notes from the [feature tracking spreadsheet](https://docs.google.com/spreadsheets/d/1IJSTd3MHorwUt8i492GQaKKuAFsZppauT4v1LJ91WHY/edit#gid=0)

I manually added the `docs PR` links using the links provided in the feature tracking spreadsheet

Assigning @dchen1107 as requested /cc @kubernetes/kubernetes-release-managers",closed,True,2017-06-26 22:35:04,2017-12-19 15:20:18
enhancements,emaildanwilson,https://github.com/kubernetes/enhancements/pull/307,https://api.github.com/repos/kubernetes/enhancements/issues/307,Add Federation ClusterSelector to release notes,cc @nikhiljindal ,closed,True,2017-06-28 03:54:13,2017-06-28 17:51:17
enhancements,mlycore,https://github.com/kubernetes/enhancements/pull/308,https://api.github.com/repos/kubernetes/enhancements/issues/308,add some docs PR links,add some docs PR links I got from feature issues pages,closed,True,2017-06-28 06:09:12,2017-06-28 14:03:47
enhancements,rickypai,https://github.com/kubernetes/enhancements/pull/309,https://api.github.com/repos/kubernetes/enhancements/issues/309,fix 1.7 release notes indentation to properly show sublists,it seems like there was a different space character used in those two lines.,closed,True,2017-06-28 17:19:38,2017-06-28 19:16:24
enhancements,rickypai,https://github.com/kubernetes/enhancements/pull/310,https://api.github.com/repos/kubernetes/enhancements/issues/310,add release note for HostAlias feature,"based on slack discussions with @thockin, we should add a feature release note for HostAliases in 1.7",closed,True,2017-06-28 17:56:51,2017-06-28 19:16:30
enhancements,mindprince,https://github.com/kubernetes/enhancements/pull/311,https://api.github.com/repos/kubernetes/enhancements/issues/311,Fix formatting in GPU release note bullet.,"This was rendering as ""type=,count="" before this.",closed,True,2017-06-28 23:57:02,2017-06-29 00:58:04
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/312,https://api.github.com/repos/kubernetes/enhancements/issues/312,update NetworkPolicy Action Required section,Based on @thockin's comments in the draft doc.,closed,True,2017-06-29 00:36:37,2017-06-29 01:04:31
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/313,https://api.github.com/repos/kubernetes/enhancements/issues/313,Rewording backsteps in volume path,,closed,True,2017-06-29 00:40:21,2017-06-29 01:04:49
enhancements,feiskyer,https://github.com/kubernetes/enhancements/pull/314,https://api.github.com/repos/kubernetes/enhancements/issues/314,Fix frakti release notes,,closed,True,2017-06-29 02:39:39,2017-06-29 07:07:46
enhancements,liggitt,https://github.com/kubernetes/enhancements/pull/315,https://api.github.com/repos/kubernetes/enhancements/issues/315,Update 1.7 known issues and links,"updated known issues descriptions and links

removed gzip line item (it didn't get picked into the 1.7 release branch)",closed,True,2017-06-29 03:52:33,2019-02-04 14:12:35
enhancements,Random-Liu,https://github.com/kubernetes/enhancements/pull/316,https://api.github.com/repos/kubernetes/enhancements/issues/316,Add cri-containerd v0.1.0 release note.,Update cri-containerd v0.1.0 release note.,closed,True,2017-06-29 07:00:34,2017-06-29 17:05:58
enhancements,luxas,https://github.com/kubernetes/enhancements/pull/317,https://api.github.com/repos/kubernetes/enhancements/issues/317,Update the release notes for sig-cluster-lifecycle,cc @roberthbailey @lukemarsden @jbeda @pipejakob @timothysc ,closed,True,2017-06-29 09:59:07,2017-06-29 10:09:58
enhancements,luxas,https://github.com/kubernetes/enhancements/pull/318,https://api.github.com/repos/kubernetes/enhancements/issues/318,Format the NetworkPolicy yaml,This looks a little bit nicer :),closed,True,2017-06-29 10:01:36,2017-06-29 11:16:37
enhancements,luxas,https://github.com/kubernetes/enhancements/pull/319,https://api.github.com/repos/kubernetes/enhancements/issues/319,Mention CRDs in major themes,"ref: https://docs.google.com/document/d/1dWFkFJIHo3liTWomvB1ur6jqd6cnxvGb_jjE-3-c6Bo/edit?disco=AAAABN87-9Q

I really think CRDs should be mentioned, it's one of the major adds in this release for sure

cc @apsinha @deads2k @liggitt ",closed,True,2017-06-29 10:08:42,2017-06-29 15:02:38
enhancements,luxas,https://github.com/kubernetes/enhancements/pull/320,https://api.github.com/repos/kubernetes/enhancements/issues/320,Add note about cAdvisor not listening on 0.0.0.0 by default in the kubeadm packages,"ref: https://github.com/kubernetes/release/pull/356

FYI @dchen1107 @jbeda ",closed,True,2017-06-29 11:22:33,2017-06-29 11:47:08
enhancements,superbrothers,https://github.com/kubernetes/enhancements/pull/321,https://api.github.com/repos/kubernetes/enhancements/issues/321,Fix incorrect release notes for kubernetes/kubernetes#44251,This PR fixes incorrect release notes for kubernetes/kubernetes#44251.,closed,True,2017-06-29 14:48:11,2017-06-29 23:41:58
enhancements,superbrothers,https://github.com/kubernetes/enhancements/pull/322,https://api.github.com/repos/kubernetes/enhancements/issues/322,Move kubernetes/kubernetes#42336 to Enhancement of CLI,"It is appropriate that kubernetes/kubernetes#42336 is in Enhancement of CLI.

> * Kubectl config use-context now supports completion ([#42336](https://github.com/kubernetes/kubernetes/pull/42336), [@superbrothers](https://github.com/superbrothers))",closed,True,2017-06-29 15:02:49,2017-06-29 23:39:27
enhancements,emaildanwilson,https://github.com/kubernetes/enhancements/pull/323,https://api.github.com/repos/kubernetes/enhancements/issues/323,add back ClusterSelector note,This was accidentally reverted in https://github.com/kubernetes/features/commit/f0f38da3e878e4f97c3068e15900352c83268443,closed,True,2017-06-29 15:26:30,2017-06-29 15:28:28
enhancements,mtaufen,https://github.com/kubernetes/enhancements/pull/324,https://api.github.com/repos/kubernetes/enhancements/issues/324,Grammar/style edits,Some grammar and style edits for the release notes.,closed,True,2017-06-29 15:35:43,2017-06-29 16:19:52
enhancements,mtaufen,https://github.com/kubernetes/enhancements/pull/325,https://api.github.com/repos/kubernetes/enhancements/issues/325,Grammar/style edits part 2,,closed,True,2017-06-29 16:13:07,2017-06-29 16:20:28
enhancements,Random-Liu,https://github.com/kubernetes/enhancements/pull/326,https://api.github.com/repos/kubernetes/enhancements/issues/326,Remove extra `Alpha`.,"Addresses https://github.com/kubernetes/features/pull/316#discussion_r124726659.

@luxas 
Signed-off-by: Random-Liu <taotaotheripper@gmail.com>",closed,True,2017-06-29 17:18:44,2017-06-29 17:42:44
enhancements,mtaufen,https://github.com/kubernetes/enhancements/pull/327,https://api.github.com/repos/kubernetes/enhancements/issues/327,put commands and flags inside backticks and fix some typos,,closed,True,2017-06-29 17:23:33,2017-06-29 17:26:18
enhancements,chenopis,https://github.com/kubernetes/enhancements/pull/328,https://api.github.com/repos/kubernetes/enhancements/issues/328,[WIP] Update links and typos for release notes,Do not merge until [WIP] has be removed from the title.,closed,True,2017-06-29 20:51:44,2017-06-29 21:02:37
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/329,https://api.github.com/repos/kubernetes/enhancements/issues/329,Recategorize ActionRequired items by the components and sorted by the…,… severity.,closed,True,2017-06-29 21:27:05,2017-06-30 03:14:57
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/330,https://api.github.com/repos/kubernetes/enhancements/issues/330,small clean up on containerd integreation,,closed,True,2017-06-29 21:54:23,2017-06-29 21:57:51
enhancements,chenopis,https://github.com/kubernetes/enhancements/pull/331,https://api.github.com/repos/kubernetes/enhancements/issues/331,update documentation links to k8s.io,,closed,True,2017-06-29 22:27:12,2017-06-29 22:30:09
enhancements,chenopis,https://github.com/kubernetes/enhancements/pull/332,https://api.github.com/repos/kubernetes/enhancements/issues/332,fix typos,fix spelling and link typos,closed,True,2017-06-29 22:44:42,2017-06-29 22:50:31
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/333,https://api.github.com/repos/kubernetes/enhancements/issues/333,Categorize the prs by components,,closed,True,2017-06-29 23:38:05,2017-06-30 03:14:56
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/334,https://api.github.com/repos/kubernetes/enhancements/issues/334,Introduce Cluster provisioning,,closed,True,2017-06-30 00:09:31,2017-06-30 03:14:55
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/335,https://api.github.com/repos/kubernetes/enhancements/issues/335,Combine two security sections into one and put it in order,,closed,True,2017-06-30 00:22:37,2017-06-30 03:14:54
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/336,https://api.github.com/repos/kubernetes/enhancements/issues/336,"Revert ""Update release-notes-draft.md""",This reverts commit 1d051a6e552d0d94be529327fbfaf773f98d0666.,closed,True,2017-06-30 01:05:35,2017-06-30 01:05:39
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/337,https://api.github.com/repos/kubernetes/enhancements/issues/337,Fix networking section's format and recategory,,closed,True,2017-06-30 01:13:44,2017-06-30 03:14:26
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/338,https://api.github.com/repos/kubernetes/enhancements/issues/338,Sort bucket 5,,closed,True,2017-06-30 01:31:12,2017-06-30 01:36:00
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/339,https://api.github.com/repos/kubernetes/enhancements/issues/339,Bucket 2,,closed,True,2017-06-30 01:48:08,2017-06-30 01:48:44
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/340,https://api.github.com/repos/kubernetes/enhancements/issues/340,Redo Networking cleanup,,closed,True,2017-06-30 01:48:14,2017-06-30 03:14:40
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/341,https://api.github.com/repos/kubernetes/enhancements/issues/341,caleb-bucket-4-updates,,closed,True,2017-06-30 01:49:15,2017-06-30 03:14:41
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/342,https://api.github.com/repos/kubernetes/enhancements/issues/342,Combining two Node sections together and minor cleanup,,closed,True,2017-06-30 02:07:47,2017-06-30 03:14:39
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/343,https://api.github.com/repos/kubernetes/enhancements/issues/343,Bucket 1 Done,,closed,True,2017-06-30 02:16:24,2017-06-30 03:14:38
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/344,https://api.github.com/repos/kubernetes/enhancements/issues/344,Wip 1.7 release notes draft by component,,closed,True,2017-06-30 02:57:04,2017-06-30 02:57:27
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/345,https://api.github.com/repos/kubernetes/enhancements/issues/345,"Format Node Component, Scheduling, and API Machinery sections.",,closed,True,2017-06-30 03:06:23,2017-06-30 03:14:25
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/346,https://api.github.com/repos/kubernetes/enhancements/issues/346,Sort changes by component and area,"Thank you so much

- @dchen1107 
- @pwittrock 
- @grodrigues3 
- @idvoretskyi 
- @caesarxuchao 

for helping to get the release notes over the line",closed,True,2017-06-30 03:13:30,2017-06-30 03:14:09
enhancements,dchen1107,https://github.com/kubernetes/enhancements/pull/347,https://api.github.com/repos/kubernetes/enhancements/issues/347,Removed dup copy of API Machinery section.,,closed,True,2017-06-30 03:57:49,2018-01-04 23:49:20
enhancements,droot,https://github.com/kubernetes/enhancements/issues/348,https://api.github.com/repos/kubernetes/enhancements/issues/348,PodPreset API Beta release,"# Feature Description
- One-line feature description (can be used as a release note): PodPreset APIs Beta release
- Primary contact (assignee): @pwittrock
- Responsible SIGs: Sig-Service-Catalog, Sig-Apps
- Design proposal link (community repo):[Original design proposal](https://github.com/kubernetes/community/blob/45988676be1714cc275b8e736b42e0820aa57362/contributors/design-proposals/pod-preset.md), [Availability Roadmap](https://docs.google.com/document/d/1bUsO1Sj8K4LlR9lykWtY5kQxd1ovKtZ2LKKtLL7yM5w/edit#)
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @pmorie @pwittrock
- Approver (likely from SIG/area to which feature belongs): @bgrant0607 
- Feature target (which target equals to which milestone):
  - Beta release target (1.8)

Action Items for Beta release (as per agreed in this [doc](https://docs.google.com/document/d/1bUsO1Sj8K4LlR9lykWtY5kQxd1ovKtZ2LKKtLL7yM5w/edit#)):
- [ ] Container targeting support in PodPreset
- [ ] Extend information injection support for Init-Containers
- [ ] Improve visibility in conflict scenario
- [ ] Improve End user documentation

",closed,False,2017-07-06 17:21:00,2017-07-06 20:53:56
enhancements,gnufied,https://github.com/kubernetes/enhancements/issues/349,https://api.github.com/repos/kubernetes/enhancements/issues/349,Add support for high level volume operation metrics,"# Feature Description
- One-line feature description (can be used as a release note): Add support for high level volume operation metrics
- Primary contact (assignee): Hemant Kumar (@gnufied)
- Responsible SIGs: sig-storage
- Design proposal link (community repo):  https://github.com/kubernetes/community/pull/809
- Reviewer(s) - @saad-ali @piosz 
- Approver (likely from SIG/area to which feature belongs):  @saad-ali 
- Feature target (which target equals to which milestone):
  - Stable release target (x.y): 1.8

",closed,False,2017-07-07 13:21:14,2018-03-10 23:47:37
enhancements,subodh01,https://github.com/kubernetes/enhancements/issues/350,https://api.github.com/repos/kubernetes/enhancements/issues/350,Nutanix Volume Plugin,"# Feature Description
- One-line feature description (can be used as a release note):
Nutanix volume plugin for Kubernetes. This adds support for both static and dynamic provisioning of persistent volume on Nutanix cluster.

- Primary contact (assignee): Subodh Mathur @subodh01
- Responsible SIGs: @kubernetes/sig-storage-feature-requests 
- Design proposal link (community repo): 
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: Huamin Chen (rootfs)
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Stable release target (1.8)
",closed,False,2017-07-09 13:41:48,2017-08-01 16:32:27
enhancements,erinboyd,https://github.com/kubernetes/enhancements/issues/351,https://api.github.com/repos/kubernetes/enhancements/issues/351,Raw block device using persistent volume source,"# Feature Description
- One-line feature description (can be used as a release note): Make raw block devices (non-networked) available for consumption via a Persistent Volume Source
- Primary contact (assignee): @erinboyd, @screeley44, @mtanino
- Responsible SIGs: @kubernetes/sig-storage-feature-requests @kubernetes/sig-apps-feature-requests
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/805 & https://github.com/kubernetes/community/pull/1265
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
    @msau42 
    @jsafrane 
- Approver (likely from SIG/area to which feature belongs):
    @saad-ali 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.9
  - Beta release target (x.y): 1.13
  - Stable release target (x.y): 1.15?
",open,False,2017-07-12 15:48:37,2019-02-22 22:42:27
enhancements,wongma7,https://github.com/kubernetes/enhancements/issues/352,https://api.github.com/repos/kubernetes/enhancements/issues/352,ReclaimPolicy in StorageClass,"# Feature Description
- One-line feature description (can be used as a release note): Allow configuration of dynamically provisioned PVs' reclaim policies (Delete or Retain) via StorageClass
- Primary contact (assignee): @wongma7
- Responsible SIGs: Storage
- Design proposal link (community repo): https://github.com/kubernetes/kubernetes/issues/38192
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  @jeffvance
- Approver (likely from SIG/area to which feature belongs): 
  @saad-ali
- Feature target (which target equals to which milestone):
  - Beta release target (1.8)
  - Stable release target (1.9)
",closed,False,2017-07-12 18:09:56,2018-01-11 08:43:30
enhancements,kow3ns,https://github.com/kubernetes/enhancements/issues/353,https://api.github.com/repos/kubernetes/enhancements/issues/353,Workload API,"# Feature Description
- One-line feature description (can be used as a release note): The core workload API (DaemonSet, Deployment, ReplicaSet, StatefulSet) have been moved to the apps group at version v1beta2. 
- Primary contact (assignee): @kow3ns
- Responsible SIGs: apps
- Design proposal link (community repo): NA
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @kargakis @janetkuo @foxish @enisoc @crimsonfaith91 
- Approver (likely from SIG/area to which feature belongs): @smarterclayton @erictune 
- Feature branch : https://github.com/kubernetes/kubernetes/tree/feature-workload-ga
- Feature target (which target equals to which milestone):
  - Beta release target (1.8)
  - GA release target (1.9)

Create a new version in the apps group for the core workloads API.
When we advance the core workloads API (DaemonSet, Deployment, ReplicaSet, and StatefulSet) to v1, we want them to advance as a group and be (where possible) consistent. Prior to doing so, we would like to make any API incompatible changes. In particular we will

- move DaemonSet to apps
- remove the TemplateGeneration field of DaemonSet
- change the StatefulSet ObservedGeneration from a pointer to an int for consistency.
- remove the /rollback subresource of Deployment, or modify it such that the controller is not required to modify its own spec.
- add a scale subresource for StatefulSet
- review the API objects for consistency, and (where appropriate) make changes to bring them into alignment (modifying field names a necessary).
- ensure that the defaults and validation are consistent and appropriate across all controllers.

We may find other incompatible changes that are required prior to promotion, and we would like to make them in this version, prior to releasing it. When the community is satisfied with the API surface, as contained in this version, and it is stable, we would like to promote all of the core workloads API to GA by moving the contained API to v1.
",closed,False,2017-07-19 23:36:15,2017-12-22 12:21:13
enhancements,jdumars,https://github.com/kubernetes/enhancements/pull/354,https://api.github.com/repos/kubernetes/enhancements/issues/354,Updated the release team as it currently stands,"Updated to the release team as agreed upon by SIG Release 7/21/2017, 21:00 UTC.  Vacancies still need volunteers.",closed,True,2017-07-21 23:20:47,2017-07-24 09:54:45
enhancements,rohitsardesai83,https://github.com/kubernetes/enhancements/issues/355,https://api.github.com/repos/kubernetes/enhancements/issues/355,Resource oversubscription for efficient resource utilization,"# Feature Description
- One-line feature description (can be used as a release note): This proposal describes a design to enable resource oversubscription in Kubernetes. The objective of resource oversubscription is to offer reserved, but unused, resources to low priority best effort jobs in a way such that the overall resource utilization will be increased without sacrificing the performance of critical services
- Primary contact (assignee): @rohitsardesai83
- Responsible SIGs: wg-resource-management, sig-node
- Design proposal link (community repo): https://docs.google.com/document/d/1Ynkey7UREOE5iny01L7fgKL84LFAzT7KViCHGrfZwsQ/edit#
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @vishh , @derekwaynecarr
- Approver (likely from SIG/area to which feature belongs): @derekwaynecarr 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.10
  - Beta release target (x.y): 1.11
  - Stable release target (x.y): 1.12
",closed,False,2017-07-26 06:22:56,2018-03-12 09:20:35
enhancements,luxas,https://github.com/kubernetes/enhancements/issues/356,https://api.github.com/repos/kubernetes/enhancements/issues/356,Extensible configuration/invocation of `kubeadm`,"# Feature Description
- One-line feature description (can be used as a release note): kubeadm will have a new `kubeadm phase` command that supports performing only subtasks of the full `kubeadm init` flow. Combined with fine-grained configuration kubeadm will be easily consumable by higher-level tools like kops or GKE.
- Primary contact (assignee): @luxas @justinsb 
- Responsible SIGs: @kubernetes/sig-cluster-lifecycle-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/kubeadm/blob/master/docs/design/design_v1.8.md
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @timothysc @mikedanese
- Approver (likely from SIG/area to which feature belongs): @jbeda @mikedanese 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): v1.6
  - Beta release target (x.y): v1.12
  - Stable release target (x.y): TBD
",closed,False,2017-07-26 07:30:46,2018-10-30 18:39:27
enhancements,luxas,https://github.com/kubernetes/enhancements/issues/357,https://api.github.com/repos/kubernetes/enhancements/issues/357,Ability to create dynamic HA clusters with kubeadm,"# Feature Description
- One-line feature description (can be used as a release note): Dynamic HA clusters can easily be created with the kubeadm tool using exactly the same `kubeadm init` and `kubeadm join` commands the users are familiar with.
- Primary contact (assignee): @luxas @timothysc 
- Responsible SIGs: @kubernetes/sig-cluster-lifecycle-feature-requests 
- Design proposal link (community repo): https://docs.google.com/document/d/1P3oUJ_kdaRSTlGONujadGBpYegjn4RjBNZLHZ4zU7lI/edit#
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @justinsb @mikedanese 
- Approver (likely from SIG/area to which feature belongs): @mikedanese @jbeda 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): v1.9
  - Beta release target (x.y): v1.15
  - Stable release target (x.y): TBD

---
Edit by @spiffxp:

Per https://github.com/kubernetes/enhancements/issues/357#issuecomment-460658341 we should consider kicking this out of of v1.14 and using a separate tracking issue for the actual KEP being implemented this cycle: https://github.com/kubernetes/enhancements/blob/master/keps/sig-cluster-lifecycle/20190122-Certificates-copy-for-kubeadm-join--control-plane.md",open,False,2017-07-26 07:35:03,2019-03-21 22:09:16
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/358,https://api.github.com/repos/kubernetes/enhancements/issues/358,kops: GCE support from alpha to beta,"# Feature Description
- One-line feature description (can be used as a release note): kops GCE support now in beta
- Primary contact (assignee): justinsb
- Responsible SIGs: sig-cluster-lifecycle
- Design proposal link (community repo): NA
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target: 1.6
  - Beta release target: 1.8
  - Stable release target: 1.9
",closed,False,2017-07-26 15:17:19,2018-06-16 05:26:58
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/359,https://api.github.com/repos/kubernetes/enhancements/issues/359,kops: kops-server using apimachinery / aggregated API server,"# Feature Description
- One-line feature description (can be used as a release note): kops supports running as a server
- Primary contact (assignee): justinsb
- Responsible SIGs: sig-cluster-lifecycle
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target 1.8
  - Beta release target 1.9
  - Stable release target 1.a
",closed,False,2017-07-26 15:18:35,2018-03-11 19:06:35
enhancements,justinsb,https://github.com/kubernetes/enhancements/issues/360,https://api.github.com/repos/kubernetes/enhancements/issues/360,kops: support for bare-metal,"# Feature Description
- One-line feature description (can be used as a release note): kops supports targeting bare metal (or non-cloudprovider) machines
- Primary contact (assignee): justinsb
- Responsible SIGs: sig-cluster-lifecycle
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target 1.8
  - Beta release target 1.9
  - Stable release target 1.a
",closed,False,2017-07-26 15:19:22,2018-10-03 08:56:06
enhancements,jingxu97,https://github.com/kubernetes/enhancements/issues/361,https://api.github.com/repos/kubernetes/enhancements/issues/361,Local Ephemeral Storage Capacity Isolation ,"# Feature Description
- One-line feature description (can be used as a release note): Add support for capacity isolation of shared partitions for pods and containers.
- Primary contact (assignee): @jingxu97 @vishh 
- Responsible SIGs: @kubernetes/sig-storage-feature-requests 
- Design proposal link (community repo): kubernetes/community#306
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @derekwaynecarr, @vishh, @dashpole
- Approver (likely from SIG/area to which feature belongs): @thockin, @vishh, @derekwaynecarr 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.7/1.8
  - Beta release target (x.y): 1.10
  - Stable release target (x.y): 1.11",open,False,2017-07-26 16:47:17,2019-01-16 15:16:39
enhancements,jingxu97,https://github.com/kubernetes/enhancements/issues/362,https://api.github.com/repos/kubernetes/enhancements/issues/362,Supports Storage as Allocatable Resource,"# Feature Description
- One-line feature description (can be used as a release note): Supports storage as part of the node allocatable resources in a similar way as CPU and memory. 
- Primary contact (assignee): @vishh @jingxu97
- Responsible SIGs: @kubernetes/sig-storage-feature-requests 
- Design proposal link (community repo): kubernetes/community#306
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @derekwaynecarr, @vishh, @dashpole
- Approver (likely from SIG/area to which feature belongs): @thockin, @vishh, @derekwaynecarr 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.7
  - Beta release target (x.y): 1.10
  - Stable release target (x.y): 1.11",open,False,2017-07-26 16:57:47,2019-03-08 18:14:10
enhancements,jingxu97,https://github.com/kubernetes/enhancements/issues/363,https://api.github.com/repos/kubernetes/enhancements/issues/363,Expose Storage Metrics,"# Feature Description
- One-line feature description (can be used as a release note): Expose storage metrics to end users
- Primary contact (assignee): @vkamra @jingxu97
- Responsible SIGs: @kubernetes/sig-storage-feature-requests 
- Design proposal link (community repo): kubernetes/community#855
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @derekwaynecarr, @vishh, @dashpole
- Approver (likely from SIG/area to which feature belongs): @thockin, @vishh, @derekwaynecarr 
- Feature target (which target equals to which milestone):
  - Stable release target (x.y): 1.8/1.9",closed,False,2017-07-26 17:19:12,2018-07-28 18:05:35
enhancements,jdumars,https://github.com/kubernetes/enhancements/pull/364,https://api.github.com/repos/kubernetes/enhancements/issues/364,added most recent volunteers,/cc @idvoretskyi ,closed,True,2017-07-26 20:18:37,2017-07-27 17:15:33
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/365,https://api.github.com/repos/kubernetes/enhancements/issues/365,Support paged LIST queries from the Kubernetes API,"# Feature Description
- One-line feature description (can be used as a release note): Allow API consumers - especially those that must retrieve large sets of data - to retrieve results in pages so as to reduce the memory and size impact of those very large queries.
- Primary contact (assignee): @smarterclayton
- Responsible SIGs: sig-api-machinery, sig-scalability
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/896
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: deads2k lavalamp
- Approver (likely from SIG/area to which feature belongs): lavalamp
- Feature target (which target equals to which milestone):
  - Alpha release target (1.8) 
  - Beta release target (1.9)
  - Stable release target ()",open,False,2017-07-27 02:07:57,2019-02-13 13:00:31
enhancements,cmluciano,https://github.com/kubernetes/enhancements/issues/366,https://api.github.com/repos/kubernetes/enhancements/issues/366,Egress support for Network Policy,"# Feature Description
- One-line feature description (can be used as a release note):
  - Enable Egress network policy filtering 
- Primary contact (assignee): @cmluciano
- Responsible SIGs: SIG-Network
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @caseydavenport @danwinship 
- Approver (likely from SIG/area to which feature belongs): @thockin 
- Feature target (which target equals to which milestone):
  - Beta release target (1.8)
  - Stable release target (1.12)
",closed,False,2017-07-28 16:28:27,2018-10-15 13:50:47
enhancements,cmluciano,https://github.com/kubernetes/enhancements/issues/367,https://api.github.com/repos/kubernetes/enhancements/issues/367,ipBlock for Network Policies,"# Feature Description
- One-line feature description (can be used as a release note):
  - CIDR selector support for egress/ingress network policies
- Primary contact (assignee): @cmluciano
- Responsible SIGs: SIG-Network
- Design proposal link (community repo): kubernetes/kubernetes#49978
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @caseydavenport @danwinship 
- Approver (likely from SIG/area to which feature belongs): @thockin 
- Feature target (which target equals to which milestone):
  - Beta release target (1.8)
  - Stable release target (1.11)
",closed,False,2017-07-28 16:30:43,2018-10-15 13:50:47
enhancements,vishh,https://github.com/kubernetes/enhancements/issues/368,https://api.github.com/repos/kubernetes/enhancements/issues/368,Extension to support new compute resources,"# Feature Description
- One-line feature description (can be used as a release note):
New Extension at the node level to surface, schedule and manage lifecycle of new compute resources.
- Primary contact (assignee): jiayingz@
- Responsible SIGs: node
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/695
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:  derekwaynecarr@, jiayingz@
- Approver (likely from SIG/area to which feature belongs): vishh@
- Feature target (which target equals to which milestone): 
  - Alpha release target (1.8) 
  - Beta release target (1.9), actual (1.10)
  - Stable release target (1.11)
",closed,False,2017-07-30 23:56:16,2018-06-16 04:25:58
enhancements,vishh,https://github.com/kubernetes/enhancements/issues/369,https://api.github.com/repos/kubernetes/enhancements/issues/369,Monitoring support for Hardware Accelerators,"# Feature Description
- One-line feature description (can be used as a release note): Monitoring support for Hardware Accelerators
- Primary contact (assignee): @mindprince 
- Responsible SIGs: node, instrumentation
- Design proposal link (community repo): https://docs.google.com/document/d/13O4HNrB7QFpKQcLcJm28R-QBH3Xo0VmJ7w_Pkvmsf68/edit
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @dashpole, @piosz 
- Approver (likely from SIG/area to which feature belongs): @vishh
- Feature target (which target equals to which milestone):
  - Alpha release target (1.8)
  - Beta release target (1.9)
  - Stable release target (1.10)
",closed,False,2017-07-31 00:00:28,2017-12-19 08:46:10
enhancements,jdumars,https://github.com/kubernetes/enhancements/issues/370,https://api.github.com/repos/kubernetes/enhancements/issues/370,Enable encryption of etcd secrets by an Azure Key Vault managed key,"# Enable encryption of etcd secrets by an Azure Key Vault managed key
- One-line feature description (can be used as a release note):

**Enable encryption of etcd secrets by an Azure Key Vault managed key.** 
- Primary contact (assignee):

**Khaled (Kal) Henidak [khnidk@outlook.com]**
- Responsible SIGs:

**Azure**
- Design proposal link (community repo):

**WIP: https://github.com/Azure/acs-engine/issues/1116**
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:

**Brendan Burns, Anthony Howe (Not yet agreed upon, proposed)**
- Approver (likely from SIG/area to which feature belongs):

**Brendan Burns (Not yet agreed upon, Proposed)**
- Feature target (which target equals to which milestone):
- Alpha release target (x.y)

N/A
- Beta release target (x.y)

N/A
- Stable release target (x.y)

**1.9**",closed,False,2017-07-31 20:27:07,2019-01-16 16:23:39
enhancements,fabianofranz,https://github.com/kubernetes/enhancements/issues/371,https://api.github.com/repos/kubernetes/enhancements/issues/371,kubectl binary plugins,"# Feature Description
- One-line feature description (can be used as a release note): Plugins to allow extending the set of commands provided by the main `kubectl` binary.
- Primary contact (assignee): @fabianofranz
- Responsible SIGs: @kubernetes/sig-cli-feature-requests 
- Design proposal link (community repo):
  - [Initial Proposal](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/kubectl-extension.md)
  - [Detailed proposal with milestones](https://docs.google.com/a/google.com/document/d/1xIIaJaFLX1ExzSu2_MTZvACGrm0uJPLdIKwlXDrmEdM/edit?usp=sharing)
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @monopole @pwittrock @adohe @droot @deads2k @soltysh @smarterclayton 
- Approver (likely from SIG/area to which feature belongs): @fabianofranz
- Feature target (which target equals to which milestone):
  - Alpha release target (1.8)
  - Beta release target (1.9)
  - Stable release target (1.10)
",closed,False,2017-07-31 21:01:16,2018-04-07 15:39:53
enhancements,MrHohn,https://github.com/kubernetes/enhancements/issues/372,https://api.github.com/repos/kubernetes/enhancements/issues/372,GCE Cloud Provider: Ingress support for security policy,"# Feature Description
- One-line feature description (can be used as a release note): GCE Ingress support for security policy from Google Cloud Provider.
- Primary contact (assignee): @mrhohn  
- Responsible SIGs: sig-network
- Design proposal link (community repo): TBD
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @bowei @nicksardo 
- Approver (likely from SIG/area to which feature belongs): @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target ()
  - Beta release target ()
  - Stable release target ()
",closed,False,2017-07-31 22:18:13,2018-04-18 01:07:11
enhancements,roberthbailey,https://github.com/kubernetes/enhancements/issues/373,https://api.github.com/repos/kubernetes/enhancements/issues/373,DaemonSet upgrade strategy: Start-then-kill,"# Feature Description
- One-line feature description (can be used as a release note): DaemonSet upgrades can be achieved via a start-then-kill update strategy
- Primary contact (assignee): @aaronlevy @diegs 
- Responsible SIGs: @kubernetes/sig-cluster-lifecycle-feature-requests @kubernetes/sig-apps-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/977
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @janetkuo @kargakis 
- Approver (likely from SIG/area to which feature belongs): @erictune 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) _n/a_
  - Beta release target (x.y) 1.8
  - Stable release target (x.y) 1.9
",closed,False,2017-07-31 22:21:23,2017-10-27 19:43:16
enhancements,davidopp,https://github.com/kubernetes/enhancements/issues/374,https://api.github.com/repos/kubernetes/enhancements/issues/374,Scheduler policy can be read from ConfigMap,"# Feature Description
- One-line feature description (can be used as a release note): Allow users to configure scheduler policy (which predicates to enable, which priority functions to enable, weights of priority functions, etc.) using ConfigMap, as an alternative to [scheduler config file](https://github.com/kubernetes/community/blob/master/contributors/devel/scheduler.md#Modifying_policies)
- Primary contact (assignee): @bsalamat 
- Responsible SIGs: sig-scheduling
- Design proposal link (community repo): https://docs.google.com/document/d/19AKH6V6ejOeIvyGtIPNvRMR4Yi_X8U3Q1zz2fgTNhvM/edit#heading=h.lcgxfb3ef4vt
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @davidopp 
- Approver (likely from SIG/area to which feature belongs): @davidopp 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.8
  - Beta release target (x.y) 1.9
  - Stable release target (x.y)
",closed,False,2017-08-01 06:44:04,2018-04-20 04:45:50
enhancements,sjenning,https://github.com/kubernetes/enhancements/issues/375,https://api.github.com/repos/kubernetes/enhancements/issues/375,Add CPU Manager for pod cpuset assignment,"# Feature Description
- One-line feature description (can be used as a release note): add CPU Manager for pod cpuset assignment based on resource/QoS attributes
- Primary contact (assignee): @sjenning, @ConnorDoyle 
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/654
- Reviewer(s) - (for LGTM) @derekwaynecarr @vishh 
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone): alpha 1.8

Add UpdateContainerResources method to CRI:
https://github.com/kubernetes/kubernetes/pull/46105

Primary feature PR:
https://github.com/kubernetes/kubernetes/pull/49186
",closed,False,2017-08-01 17:34:08,2019-01-24 19:29:21
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/376,https://api.github.com/repos/kubernetes/enhancements/issues/376,Add hostPath volume type,"# Feature Description
- One-line feature description (can be used as a release note): Extend hostPath volumes to prevent the ""silent and implicit creation of directories on the host"".
- Primary contact (assignee): @dixudx
- Responsible SIGs: /sig-storage
- Design proposal link (community repo): https://github.com/kubernetes/kubernetes/pull/34058
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  @thockin 
- Approver (likely from SIG/area to which feature belongs):
  @saad-ali
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 
  - Beta release target (x.y): 
  - Stable release target (x.y): 1.8
",closed,False,2017-08-01 18:11:43,2017-10-20 10:47:44
enhancements,verult,https://github.com/kubernetes/enhancements/issues/377,https://api.github.com/repos/kubernetes/enhancements/issues/377,Improve Flexvolume Deployment,"# Feature Description
- One-line feature description (can be used as a release note): Provides a way to deploy Flexvolume drivers using DaemonSet, and allows drivers to be discovered automatically on the fly, rather than only at kubelet or controller manager initialization.
- Primary contact (assignee): @verult
- Responsible SIGs: @kubernetes/sig-storage-feature-requests
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/833
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @bassam @chakri-nelluri @kokhang @liggitt @thockin 
- Approver (likely from SIG/area to which feature belongs): @jsafrane @saad-ali 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.8
",closed,False,2017-08-01 18:17:54,2018-01-06 00:27:27
enhancements,calebamiles,https://github.com/kubernetes/enhancements/issues/378,https://api.github.com/repos/kubernetes/enhancements/issues/378,"support pod bootstrap ""checkpointing"" in the kubelet ","# Feature Description
- One-line feature description (can be used as a release note): support pod ""checkpointing"" in the kubelet for self hosting
- Primary contact (assignee): @timothysc 
- Responsible SIGs: SIG Cluster Lifecycle, SIG Node
- Design proposal link (community repo): https://github.com/kubernetes/kubernetes/issues/49236
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @timothysc, @dchen1107 
- Approver (likely from SIG/area to which feature belongs): @dchen1107 
- Feature target (which target equals to which milestone):
  - Alpha release target 1.9
  - Beta release target (TBD)
  - Stable release target (TBD)
",closed,False,2017-08-01 18:36:47,2018-10-01 13:56:23
enhancements,calebamiles,https://github.com/kubernetes/enhancements/issues/379,https://api.github.com/repos/kubernetes/enhancements/issues/379,Add dynamic configuration to the node problem detector,"# Feature Description
- One-line feature description (can be used as a release note):
- Primary contact (assignee): @ajitak 
- Responsible SIGs: SIG Node
- Design proposal link (community repo): https://github.com/kubernetes/node-problem-detector
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @dchen1107, @yujuhong 
- Approver (likely from SIG/area to which feature belongs): @dchen1107 
- Feature target (which target equals to which milestone):
  - Alpha release target 1.8
  - Beta release target (TBD)
  - Stable release target (TBD)
",closed,False,2017-08-01 18:41:38,2017-09-12 16:53:31
enhancements,ericchiang,https://github.com/kubernetes/enhancements/issues/380,https://api.github.com/repos/kubernetes/enhancements/issues/380,Rules review API: API for a user to know which actions they can perform,"# Feature Description
- One-line feature description (can be used as a release note): APIs for determining the actions a user can perform in the system.
- Primary contact (assignee): @xilabao, @ericchiang
- Responsible SIGs: @kubernetes/sig-auth-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/887
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @deads2k @cjcullen
- Approver (likely from SIG/area to which feature belongs): @liggitt 
- Feature target (which target equals to which milestone):
  - Beta release target (1.8)
  - Stable release target (1.9)",closed,False,2017-08-01 20:04:17,2018-06-16 05:26:58
enhancements,jessfraz,https://github.com/kubernetes/enhancements/issues/381,https://api.github.com/repos/kubernetes/enhancements/issues/381,AllowPrivilegeEscalation aka no_new_privs,"# Feature Description
- One-line feature description (can be used as a release note): AllowPrivilegeEscalation when false will ensure `execve` promises not to grant more privileges that the parent process.
- Primary contact (assignee): @jessfraz
- Responsible SIGs: sig-auth?
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/639/files
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @smarterclayton @timstclair 
- Approver (likely from SIG/area to which feature belongs): @smarterclayton 
- Feature target (which target equals to which milestone): 1.8
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y): 1.8
",closed,False,2017-08-01 21:09:27,2018-03-11 14:01:34
enhancements,k82cn,https://github.com/kubernetes/enhancements/issues/382,https://api.github.com/repos/kubernetes/enhancements/issues/382,Taint node by Condition,"# Feature Description
- One-line feature description (can be used as a release note): Represent node conditions that block scheduling using taints
- Primary contact (assignee): @k82cn
- Responsible SIGs: sig-scheduling
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/taint-node-by-condition.md
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @gmarek @davidopp 
- Approver (likely from SIG/area to which feature belongs): @gmarek 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.8)
  - Beta release target (1.12)
",open,False,2017-08-04 01:07:46,2019-01-16 15:19:30
enhancements,gmarek,https://github.com/kubernetes/enhancements/issues/383,https://api.github.com/repos/kubernetes/enhancements/issues/383,Redesign Event API,"# Feature Description
- One-line feature description (can be used as a release note): Add more structure to Event API and change deduplication logic so Events won't overload the cluster
- Primary contact (assignee): @gmarek
- Responsible SIGs: scalability
- Design proposal link (community repo): [design goolge doc](https://docs.google.com/a/google.com/document/d/13BeJlrEcJhSKgsHOHWmHdJGqXrjSm_o9XxOtwcN6yNg/edit?usp=sharing) - design discussions in github are too painful for me
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @timothysc @wojtek-t 
- Approver (likely from SIG/area to which feature belongs): @bgrant0607 @thockin @countspongebob 
- Feature target (which target equals to which milestone):
  - Beta release target (1.8), disabled by default until we migrate our components",open,False,2017-08-04 08:19:16,2019-02-26 14:54:13
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/384,https://api.github.com/repos/kubernetes/enhancements/issues/384,Mark SPDY transport for exec/portforward/attach deprecated,"# Feature Description
- One-line feature description (can be used as a release note): We now have feature parity with websockets on all streaming protocols (exec/portforward/attach), and as SPDY itself is deprecated we should move clients down to supporting only a single streaming protocol in Kubernetes - websockets.  This serves as the deprecation notice for all SPDY transports that they will not be added for new features and their use is discouraged.
- Primary contact (assignee): @smarterclayton
- Responsible SIGs: sig-api-machinery, sig-cli
- Design proposal link (community repo): https://github.com/kubernetes/kubernetes/issues/7452
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: lavalamp, pwittrock
- Approver (likely from SIG/area to which feature belongs): lavalamp
- Feature target (which target equals to which milestone):
  - Announce deprecation in 1.12 for exec and attach of SPDY
  - Beta websocket protocol in 1.12 or 1.13
  - Remove exec and attach in 1.14
",closed,False,2017-08-04 16:52:16,2019-03-07 19:16:47
enhancements,FengyunPan,https://github.com/kubernetes/enhancements/issues/385,https://api.github.com/repos/kubernetes/enhancements/issues/385,Resource Quota feature,"# Feature Description
Currently resourceQuotaController just support:
\- Pod, Service, ReplicationController, PersistentVolumeClaim, Secret, ConfigMap
Can we add codes to support the following type which is necessary for the products:
\- daemonsets, deployments, replicasets, jobs, statefulsets

- One-line feature description (can be used as a release note): Resource Quota
- Primary contact (assignee):
- Responsible SIGs: /sig area/apiserver  /sig api-machinery
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:@derekwaynecarr
- Approver (likely from SIG/area to which feature belongs):@derekwaynecarr @quinton-hoole
- Feature target (which target equals to which milestone):

",closed,False,2017-08-07 04:13:47,2018-01-16 02:48:23
enhancements,mwielgus,https://github.com/kubernetes/enhancements/issues/386,https://api.github.com/repos/kubernetes/enhancements/issues/386,Node Auto-Provisioning in Cluster Autoscaler,"# Feature Description
- One-line feature description (can be used as a release note): Automatically create a node pool/MIG/autoscaling group if none of the existing node groups can accommodate a pod. 
- Primary contact (assignee): @mwielgus
- Responsible SIGs: sig-autoscaling
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @MaciekPytel @aleksandra-malinowska @bskiba 
- Approver (likely from SIG/area to which feature belongs): @DirectXMan12 @MaciekPytel 
- Feature target (which target equals to which milestone):
  - Alpha release target 1.9
  - Beta release target (x.y)
  - Stable release target (x.y)
",closed,False,2017-08-08 15:21:18,2018-05-17 03:39:13
enhancements,MaciekPytel,https://github.com/kubernetes/enhancements/issues/387,https://api.github.com/repos/kubernetes/enhancements/issues/387,Resource overprovisioning in Cluster Autoscaler,"# Feature Description
- One-line feature description (can be used as a release note): Allow user to request Cluster Autoscaler to keep resources available for upcoming pods.
- Primary contact (assignee): @MaciekPytel
- Responsible SIGs: sig-autoscaling
- Design proposal link (community repo): https://github.com/kubernetes/autoscaler/issues/148
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @mwielgus, @bskiba, @aleksandra-malinowska 
- Approver (likely from SIG/area to which feature belongs): @mwielgus, @DirectXMan12 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.8
  - Beta release target (x.y): 1.8
  - Stable release target (x.y): 
",closed,False,2017-08-08 15:45:35,2018-03-10 07:31:34
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/388,https://api.github.com/repos/kubernetes/enhancements/issues/388,A draft release note for Kubernetes 1.8 ,,closed,True,2017-08-08 23:15:03,2017-08-08 23:17:10
enhancements,mbssaiakhil,https://github.com/kubernetes/enhancements/pull/389,https://api.github.com/repos/kubernetes/enhancements/issues/389,Fix Typo in Feature Tracking and Backlog,,closed,True,2017-08-13 10:59:44,2017-08-14 17:36:06
enhancements,childsb,https://github.com/kubernetes/enhancements/pull/390,https://api.github.com/repos/kubernetes/enhancements/issues/390,Add storage features to release notes.,Skeleton of storage features for release notes (will update as features solidify),closed,True,2017-08-14 20:13:10,2017-08-17 17:06:21
enhancements,pipejakob,https://github.com/kubernetes/enhancements/pull/391,https://api.github.com/repos/kubernetes/enhancements/issues/391,First draft of SIG Cluster Lifecycle related relnotes.,"These are mostly populated from the [issues](https://github.com/kubernetes/features/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.8+label%3Asig%2Fcluster-lifecycle) labeled for sig/cluster-lifecycle and 1.8. I have reworded them in places to change from future to past tense and have more consistent verbiage.

CC @timothysc @luxas @justinsb @jbeda @mkumatag @ixdy @wlan0 @aaronlevy @diegs

Could everyone on the above CC list please take a look at the feature(s) you own and sign off on their representation here?

Also, if there is anything that is definitely going to slip the 1.8 release, now is a good time to pull it out of the release notes and update its issue.",closed,True,2017-08-14 22:36:59,2017-08-18 14:55:51
enhancements,jcbsmpsn,https://github.com/kubernetes/enhancements/pull/392,https://api.github.com/repos/kubernetes/enhancements/issues/392,Add certificate rotation to 1.8 release notes.,,closed,True,2017-08-14 22:58:44,2017-08-18 21:28:16
enhancements,kow3ns,https://github.com/kubernetes/enhancements/pull/393,https://api.github.com/repos/kubernetes/enhancements/issues/393,Adds release notes for feature https://github.com/kubernetes/features/issues/353,,closed,True,2017-08-16 17:44:27,2017-08-18 21:26:06
enhancements,m1093782566,https://github.com/kubernetes/enhancements/pull/394,https://api.github.com/repos/kubernetes/enhancements/issues/394,Add `Paramaterize session affinity timeout seconds in service API` to 1.8 release notes,"Add `Paramaterize session affinity timeout seconds in service API` to 1.8 release notes. Original PR, see https://github.com/kubernetes/kubernetes/pull/49850/

@thockin ",closed,True,2017-08-17 06:51:53,2017-08-18 05:02:45
enhancements,bsalamat,https://github.com/kubernetes/enhancements/pull/395,https://api.github.com/repos/kubernetes/enhancements/issues/395,Add pod priority and preemption to release notes,,closed,True,2017-08-17 20:30:49,2017-08-18 21:24:53
enhancements,sjenning,https://github.com/kubernetes/enhancements/pull/396,https://api.github.com/repos/kubernetes/enhancements/issues/396,draft of resource management node features relnotes,@derekwaynecarr @ConnorDoyle ,closed,True,2017-08-17 20:32:17,2017-08-18 21:24:36
enhancements,DirectXMan12,https://github.com/kubernetes/enhancements/pull/397,https://api.github.com/repos/kubernetes/enhancements/issues/397,Release Notes: v1.8: Add HPA v2 graduation notes,"This notes that autoscaling/v2 is graduating from alpha1 to beta1, and
adds a warning about upgrade compatibility.",closed,True,2017-08-17 20:35:48,2017-08-21 19:09:58
enhancements,k82cn,https://github.com/kubernetes/enhancements/pull/398,https://api.github.com/repos/kubernetes/enhancements/issues/398,Added 'Taint nodes by condition' release notes.,Added 'Taint nodes by condition' release notes.,closed,True,2017-08-21 08:09:34,2017-08-22 07:40:12
enhancements,pipejakob,https://github.com/kubernetes/enhancements/pull/399,https://api.github.com/repos/kubernetes/enhancements/issues/399,Checking off SIG Cluster Lifecycle for 1.8 draft.,"Our draft was already merged in https://github.com/kubernetes/features/pull/391, so checking off the SIG from the checklist.",closed,True,2017-08-23 17:33:49,2017-08-23 18:48:19
enhancements,ConnorDoyle,https://github.com/kubernetes/enhancements/pull/400,https://api.github.com/repos/kubernetes/enhancements/issues/400,Add extended resources release note.,cc @davidopp @vishh @thockin ,closed,True,2017-08-23 21:14:27,2017-08-29 17:39:09
enhancements,janetkuo,https://github.com/kubernetes/enhancements/pull/401,https://api.github.com/repos/kubernetes/enhancements/issues/401,Fix deprecation announcements for sig-apps,"apps/v1beta2 is a new API version in 1.8. Changes to this API within the same release does not require a release note. 

extensions/v1beta1 Deployment field deprecation should be announced. ",closed,True,2017-08-24 22:45:11,2017-08-24 22:52:44
enhancements,cmluciano,https://github.com/kubernetes/enhancements/pull/402,https://api.github.com/repos/kubernetes/enhancements/issues/402,Add network-policy features for SIG Network,"Signed-off-by: Christopher M. Luciano <cmluciano@us.ibm.com>

Special notes for your reviewer:
- Marked as WIP so that I can add Egress notes when the PR merges",closed,True,2017-08-25 19:09:07,2017-08-25 21:07:16
enhancements,xueyihan,https://github.com/kubernetes/enhancements/issues/403,https://api.github.com/repos/kubernetes/enhancements/issues/403,api2 and api3 problem,"I used API=2 to set a key named qwe and it worked fine when i used API=2 to get the key
But I can't get the key by API=3

here is the command
etcdctl --endpoints=http://etcd:2379 set qwe 1  
./etcdctl --endpoints=http://etcd:2379 get qwe
ETCDCTL_API=3 etcdctl --endpoints=http://etcd:2379 get qwe   (can't find the key)
why!",closed,False,2017-08-28 03:01:03,2017-08-28 03:05:10
enhancements,m1093782566,https://github.com/kubernetes/enhancements/pull/404,https://api.github.com/repos/kubernetes/enhancements/issues/404,Add kube-proxy ipvs mode features for SIG network ,"Adding kube-proxy ipvs mode features for SIG network.

@thockin @quinton-hoole @haibinxie",closed,True,2017-08-29 15:16:36,2017-08-29 17:55:40
enhancements,ericchiang,https://github.com/kubernetes/enhancements/pull/405,https://api.github.com/repos/kubernetes/enhancements/issues/405,release notes: high level sig-auth release notes for 1.8,cc @kubernetes/sig-auth-misc ,closed,True,2017-08-30 22:32:02,2017-08-31 23:23:00
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/406,https://api.github.com/repos/kubernetes/enhancements/issues/406,add a new section for external dependencies,,closed,True,2017-08-30 23:41:58,2017-08-30 23:43:48
enhancements,praving55,https://github.com/kubernetes/enhancements/issues/407,https://api.github.com/repos/kubernetes/enhancements/issues/407,API for dumping current master node configuration,"# Feature Description
- API for dumping current master node configuration
- Primary contact (assignee): @roberthbailey 
- Responsible SIGs: @kubernetes/sig-cluster-lifecycle-feature-requests and @kubernetes/sig-api-machinery-feature-requests 
- Design proposal link (community repo): Yet to discuss and design
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @deads2k @lukemarsden @jbeda 
- Approver (likely from SIG/area to which feature belongs): @roberthbailey @lavalamp 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.9)
  - Beta release target (1.10)
  - Stable release target (1.11)
",closed,False,2017-08-31 02:24:10,2018-07-31 22:13:55
enhancements,yguo0905,https://github.com/kubernetes/enhancements/pull/408,https://api.github.com/repos/kubernetes/enhancements/issues/408,Add Docker release notes for 1.8,"Release notes for Docker 1.13 (17.03) validation in https://github.com/kubernetes/kubernetes/issues/42926.

/assign @dchen1107 
/assign @radhikapc ",closed,True,2017-08-31 17:39:47,2017-08-31 22:45:24
enhancements,mtaufen,https://github.com/kubernetes/enhancements/pull/409,https://api.github.com/repos/kubernetes/enhancements/issues/409,Add dynamic kubelet config to 1.8 release notes,,closed,True,2017-08-31 19:25:58,2017-08-31 19:26:35
enhancements,mtaufen,https://github.com/kubernetes/enhancements/pull/410,https://api.github.com/repos/kubernetes/enhancements/issues/410,Add kubectl create configmap/secret --append-hash to 1.8 release notes,,closed,True,2017-08-31 19:36:00,2017-08-31 21:54:35
enhancements,jcbsmpsn,https://github.com/kubernetes/enhancements/pull/411,https://api.github.com/repos/kubernetes/enhancements/issues/411,Update release note for Google KMS encryption provider.,,closed,True,2017-08-31 23:33:46,2017-09-01 02:38:22
enhancements,ericchiang,https://github.com/kubernetes/enhancements/pull/412,https://api.github.com/repos/kubernetes/enhancements/issues/412,"sig-auth release notes: add advanced audit to action required, add selfsubjectrulesreview","Add notes about advanced auditing changes. cc @sttts @CaoShuFeng @soltysh 

https://github.com/kubernetes/kubernetes/pull/48051 has been approved, so adding it here.

/cc @radhikapc 
",closed,True,2017-09-01 17:35:57,2017-09-01 18:23:44
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/413,https://api.github.com/repos/kubernetes/enhancements/issues/413,"Use ""Release Team Lead"" rather than ""Release Czar"" when describing the exception process","We're a team now so reflect that.

**cc: @kubernetes/kubernetes-release-managers**",closed,True,2017-09-01 20:24:00,2017-09-01 23:58:59
enhancements,luxas,https://github.com/kubernetes/enhancements/pull/414,https://api.github.com/repos/kubernetes/enhancements/issues/414,Update release notes for SIG-Cluster-Lifecycle,PTAL @jdumars @calebamiles @radhikapc @kubernetes/sig-cluster-lifecycle-pr-reviews @andrewsykim @wlan0 ,closed,True,2017-09-03 16:16:16,2017-09-06 17:43:53
enhancements,luxas,https://github.com/kubernetes/enhancements/issues/415,https://api.github.com/repos/kubernetes/enhancements/issues/415,Self-hosting support in kubeadm,"# Feature Description
- One-line feature description (can be used as a release note): A new way of deploying the control plane; self-hosted, is added to kubeadm. There are two modes of storing certificates: on-disk (using `hostPath`) and using Secrets.
- Primary contact (assignee): @luxas @timothysc 
- Responsible SIGs: SIG-cluster-lifecycle
- Design proposal link (community repo):
   - https://github.com/kubernetes/kubeadm/issues/127
   - kubernetes/community#825 
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @luxas @jbeda @mattmoyer 
- Approver (likely from SIG/area to which feature belongs): @luxas @jbeda @timothysc 
- Feature target (which target equals to which milestone):
  - Alpha release target: 1.8
  - Beta release target: 1.9
  - Stable release target: 1.10
",closed,False,2017-09-04 15:52:59,2018-08-02 16:34:32
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/416,https://api.github.com/repos/kubernetes/enhancements/issues/416,[do-not-merge] first round of edits plus comments,"This PR is for release note writer review only. DO NOT MERGE.

@radhikapc PTAL. Questions indicated in HTML comments. A few stylistic changes, but more content questions. A little proposed IA to reduce duplicate content. We should discuss further, both style and process. ",closed,True,2017-09-05 15:17:19,2017-09-11 17:48:29
enhancements,cmluciano,https://github.com/kubernetes/enhancements/pull/417,https://api.github.com/repos/kubernetes/enhancements/issues/417,Add EgressRule to 1.8 release notes,,closed,True,2017-09-05 17:36:37,2017-09-05 22:00:43
enhancements,bsalamat,https://github.com/kubernetes/enhancements/pull/418,https://api.github.com/repos/kubernetes/enhancements/issues/418,Check sig-scheduling for 1.8,,closed,True,2017-09-05 18:55:41,2017-09-05 18:59:13
enhancements,DirectXMan12,https://github.com/kubernetes/enhancements/pull/419,https://api.github.com/repos/kubernetes/enhancements/issues/419,1.8 release notes for SIG Autoscaling and SIG Instrumentation,"This contains the final set of updates for SIG Autoscaling and SIG Instrumentation for the
1.8 release notes.",closed,True,2017-09-07 17:16:15,2017-09-08 18:51:50
enhancements,enisoc,https://github.com/kubernetes/enhancements/pull/420,https://api.github.com/repos/kubernetes/enhancements/issues/420,1.8: Add relnotes for TPR and other deprecation removals.,,closed,True,2017-09-07 19:00:01,2017-09-08 18:22:32
enhancements,CaoShuFeng,https://github.com/kubernetes/enhancements/pull/421,https://api.github.com/repos/kubernetes/enhancements/issues/421,record change about advanced auditing feature gate,"This record:
https://github.com/kubernetes/kubernetes/pull/51943",closed,True,2017-09-08 07:30:45,2017-09-11 16:59:20
enhancements,soltysh,https://github.com/kubernetes/enhancements/pull/422,https://api.github.com/repos/kubernetes/enhancements/issues/422,Add batch-related release notes,"@janetkuo ptal

@jdumars fyi, wrt to https://github.com/kubernetes/kubernetes/pull/51465#issuecomment-326304850

@clamoriniere1A @joelsmith @weiwei04 fyi",closed,True,2017-09-08 13:05:48,2017-09-15 10:27:59
enhancements,tamalsaha,https://github.com/kubernetes/enhancements/issues/423,https://api.github.com/repos/kubernetes/enhancements/issues/423,Support AWS Network Load Balancer,"Can Kubernetes support the new AWS NLB for LoadBalancer type Service? https://aws.amazon.com/elasticloadbalancing/details/ . I am assuming that users can apply some annotation on the Service that will tell aws cloud provider to use NLB instead of classic ELB to expose Kubernetes service.

# Feature Description
- One-line feature description (can be used as a release note): Use AWS Network Load Balancer for LoadBalancer type Service for aws cloud provider
- Primary contact (assignee): @justinsb 
- Responsible SIGs: @kubernetes/sig-aws-misc 
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (1.9)
  - Beta release target (1.12)
    * [tests] Create an e2e integration test
    * [bug fix] LoadBalancerSourceRanges not working (https://github.com/kubernetes/kubernetes/issues/57212)
    * [bug fix] Failure to update SG's after an update (https://github.com/kubernetes/kubernetes/issues/60825)
    * [bug fix] SG rules are removed erroneously (https://github.com/kubernetes/kubernetes/issues/64148)
    * [feature] Support IP address targeting (https://github.com/kubernetes/kubernetes/issues/57249)
    * [feature] Cross-zone load balancing (https://github.com/kubernetes/kubernetes/pull/61064)

  - Stable release target (1.13)
v1: targeting Kubenetes v1.13 (estimated release in December)
    * [edge case / bug fix] externalTrafficPolicy issues with alternate DHCP (https://github.com/kubernetes/kubernetes/issues/61486)
    * [edge case / bug fix] Incorrect behavior with older instances (https://github.com/kubernetes/kubernetes/issues/66044)
    * [feature] Support EIP (https://github.com/kubernetes/kubernetes/issues/63959)
    * [feature] PROXY protocol support (https://github.com/kubernetes/kubernetes/issues/57250)
    * [stretch feature] More configurability to health checks
    * [stretch feature] Better tagging support
",open,False,2017-09-08 23:03:50,2019-03-27 14:17:57
enhancements,mengqiy,https://github.com/kubernetes/enhancements/pull/424,https://api.github.com/repos/kubernetes/enhancements/issues/424,Update sig cli release note,"/assign @pwittrock @fabianofranz 
",closed,True,2017-09-08 23:44:37,2017-09-12 19:04:18
enhancements,xsgordon,https://github.com/kubernetes/enhancements/pull/425,https://api.github.com/repos/kubernetes/enhancements/issues/425,Mark SIG-OpenStack complete,"Marking SIG-OpenStack complete, both v1.8 milestone targeted items were merged with release-note-none.",closed,True,2017-09-10 19:00:31,2017-09-11 16:55:44
enhancements,zacharysarah,https://github.com/kubernetes/enhancements/pull/426,https://api.github.com/repos/kubernetes/enhancements/issues/426,Update release_team.md,"👋 I'm adding myself as a shadow to Steve Perry, in prep for acting as the 1.9 docs lead.",closed,True,2017-09-11 18:29:06,2017-09-12 22:19:57
enhancements,johnbelamaric,https://github.com/kubernetes/enhancements/issues/427,https://api.github.com/repos/kubernetes/enhancements/issues/427,Enable CoreDNS as a DNS plugin for Kubernetes,"# Feature Description
- One-line feature description (can be used as a release note): Enable CoreDNS as a DNS plugin for Kubernetes 
- Primary contact (assignee): @johnbelamaric
- Responsible SIGs: sig-network, sig-cluster-lifecycle
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1100
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @bowei @thockin 
- Approver (likely from SIG/area to which feature belongs): @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.9)
  - Beta release target (1.10)
  - Stable release target (1.11)
",closed,False,2017-09-12 16:59:08,2018-10-15 13:50:47
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/428,https://api.github.com/repos/kubernetes/enhancements/issues/428,Add SIG Node themes for 1.8,"Attempts to add SIG Node development themes for 1.8. Is this what you had in mind, @derekwaynecarr and @dchen1107?",closed,True,2017-09-13 19:02:35,2017-09-17 16:40:47
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/429,https://api.github.com/repos/kubernetes/enhancements/issues/429,add working doc for discussing release note revisions,This document began as a discussion between Radhika and Jennifer about possible changes to the release notes and issues that need to be addressed (but not necessarily tracked as GH issues or in GH PRs). Sharing with the larger team.,closed,True,2017-09-13 22:32:22,2017-09-18 15:32:50
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/pull/430,https://api.github.com/repos/kubernetes/enhancements/issues/430,WIP 1.8 sig-node release features,in progress updating of sig-node release features.,closed,True,2017-09-15 17:35:26,2017-09-19 15:15:50
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/431,https://api.github.com/repos/kubernetes/enhancements/issues/431,update list of sigs with release notes,Cleaned up the list to check off sigs that are done with their contributions and also sigs for which release notes are not applicable.,closed,True,2017-09-18 15:49:26,2017-09-18 18:16:16
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/432,https://api.github.com/repos/kubernetes/enhancements/issues/432,Mount namespace propagation,"# Feature Description
- One-line feature description (can be used as a release note): Enable a container to mount a volume `rshared` so that any mounts from inside the container are reflected in the host's mount namespace (this will enable, for example, containerization of volume plugins).
- Primary contact (assignee): @jsafrane 
- Responsible SIGs: /sig-storage
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/659
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  - @saad-ali
  - @childsb 
- Approver (likely from SIG/area to which feature belongs):
  - @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.8
  - Beta release target (x.y): 1.10
  - Stable release target (x.y):  1.12?
",closed,False,2017-09-18 17:36:18,2018-10-15 13:50:47
enhancements,saad-ali,https://github.com/kubernetes/enhancements/pull/433,https://api.github.com/repos/kubernetes/enhancements/issues/433,Update 1.8 release notes for sig-storage,CC /sig-storage for review,closed,True,2017-09-18 18:44:02,2018-01-04 23:49:23
enhancements,DirectXMan12,https://github.com/kubernetes/enhancements/pull/434,https://api.github.com/repos/kubernetes/enhancements/issues/434,1.8 Themes and Updates for SIG Autoscaling and Instrumentation,"This includes the themes for SIG Autoscaling and Instrumentation, as well as a deprecation notice.

cc @piosz @mwielgus @luxas ",closed,True,2017-09-18 18:56:23,2017-09-19 18:39:10
enhancements,caseydavenport,https://github.com/kubernetes/enhancements/pull/435,https://api.github.com/repos/kubernetes/enhancements/issues/435,Add SIG Network themes to v1.8 release notes,First draft of SIG Network major themes for the v1.8. release notes.,closed,True,2017-09-18 22:44:46,2017-09-19 15:18:04
enhancements,bsalamat,https://github.com/kubernetes/enhancements/pull/436,https://api.github.com/repos/kubernetes/enhancements/issues/436,Add links to user docs for pod priority and preemption,,closed,True,2017-09-18 22:59:43,2017-09-19 20:27:09
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/437,https://api.github.com/repos/kubernetes/enhancements/issues/437,touches up SIG Node 1.8 release themes,break up SIG Node charter and SIG Node 1.8 themes with newline,closed,True,2017-09-19 15:51:59,2017-09-19 16:22:19
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/438,https://api.github.com/repos/kubernetes/enhancements/issues/438,release_notes_draft.md: edited the sig-network theme to match the fomat of other SIGs themes,,closed,True,2017-09-19 16:07:48,2017-09-19 16:10:02
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/439,https://api.github.com/repos/kubernetes/enhancements/issues/439,sig-testing release notes for v1.8,"we have no release artifacts for kubernetes/kubernetes v1.8,
so no release notes either; ongoing improvements are taking
place over in kubernetes/test-infra",closed,True,2017-09-20 00:13:27,2017-12-19 15:20:23
enhancements,roberthbailey,https://github.com/kubernetes/enhancements/pull/440,https://api.github.com/repos/kubernetes/enhancements/issues/440,Add SIG Cluster Lifecycle themes for 1.8,,closed,True,2017-09-20 05:01:35,2017-09-20 21:13:19
enhancements,jdumars,https://github.com/kubernetes/enhancements/pull/441,https://api.github.com/repos/kubernetes/enhancements/issues/441,Checked off more SIGs not shipping in 1.8,,closed,True,2017-09-20 15:06:37,2018-01-04 23:49:27
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/442,https://api.github.com/repos/kubernetes/enhancements/issues/442,edit the theme section from SIG Apps to match with other SIGs' themes,,closed,True,2017-09-20 20:35:19,2017-09-21 21:15:58
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/443,https://api.github.com/repos/kubernetes/enhancements/issues/443,release-1.8: tweak release team secondaries,"@dims has been doing a lot of bug triage

and I've been looking over test-infra's shoulder for general queue health",closed,True,2017-09-21 16:53:22,2017-09-21 17:14:39
enhancements,mattfarina,https://github.com/kubernetes/enhancements/pull/444,https://api.github.com/repos/kubernetes/enhancements/issues/444,Updating the 1.8 release notes per SIG Apps changes,"Note, #442 should be merged as well to close out SIG Apps.

/cc @jdumars @spiffxp ",closed,True,2017-09-21 21:09:10,2017-09-22 17:50:04
enhancements,shyamjvs,https://github.com/kubernetes/enhancements/pull/445,https://api.github.com/repos/kubernetes/enhancements/issues/445,Add sig-scalability release notes,"cc @kubernetes/sig-scalability-misc @kubernetes/sig-release-members @wojtek-t @gmarek @countspongebob @spiffxp 

Let me know if I missed something.",closed,True,2017-09-22 13:21:16,2017-09-22 15:24:48
enhancements,mbohlool,https://github.com/kubernetes/enhancements/pull/446,https://api.github.com/repos/kubernetes/enhancements/issues/446,API Machinery release notes,"I generated this release note using github APIs and looking into PRs and Issues with sig-api-machinery label. Thus we may have missed some PRs as we do not mandate sig labels on PRs (yet). The categories are all guesses and needs your comment.

cc @lavalamp @kubernetes/sig-api-machinery-pr-reviews ",closed,True,2017-09-22 17:51:16,2017-09-26 23:30:38
enhancements,luxas,https://github.com/kubernetes/enhancements/pull/447,https://api.github.com/repos/kubernetes/enhancements/issues/447,Add note about the PVL deprecation,cc @dims @radhikapc @andrewsykim @jagosan @wlan0 ,closed,True,2017-09-22 20:26:13,2017-09-25 16:24:19
enhancements,ericchiang,https://github.com/kubernetes/enhancements/pull/448,https://api.github.com/repos/kubernetes/enhancements/issues/448,1.8 release notes: finalize auth items,"cc @kubernetes/sig-auth-pr-reviews 
cc @radhikapc ",closed,True,2017-09-22 20:42:17,2017-09-25 16:23:51
enhancements,calebamiles,https://github.com/kubernetes/enhancements/pull/449,https://api.github.com/repos/kubernetes/enhancements/issues/449,Remove top level major themes in favor of SIG provided themes,the top level information is covered in SIG level themes and in component updates.,closed,True,2017-09-25 05:02:33,2017-09-25 15:40:03
enhancements,zouyee,https://github.com/kubernetes/enhancements/pull/450,https://api.github.com/repos/kubernetes/enhancements/issues/450,fix code error,fix code error,closed,True,2017-09-25 09:32:45,2017-09-25 15:38:45
enhancements,feiskyer,https://github.com/kubernetes/enhancements/pull/451,https://api.github.com/repos/kubernetes/enhancements/issues/451,Add release notes for CRI validation test suite and CRI CLI,/cc @dchen1107 @Random-Liu ,closed,True,2017-09-25 11:35:19,2017-09-26 00:35:23
enhancements,mattfarina,https://github.com/kubernetes/enhancements/pull/452,https://api.github.com/repos/kubernetes/enhancements/issues/452,Restore names changed in the apps api group,"When the major theme bullet was remoted naming the objects from the
apps/v1beta2 it left an information gap. This restores the list
of objects now under a SIG",closed,True,2017-09-25 18:24:41,2017-09-25 18:58:10
enhancements,tallclair,https://github.com/kubernetes/enhancements/pull/453,https://api.github.com/repos/kubernetes/enhancements/issues/453,Tweak audit beta release notes,"- Auditing is still not enabled by default, but if auditing is enabled then advanced auditing is the default behavior
- The policy file is only required if auditing should be enabled.",closed,True,2017-09-25 18:37:08,2017-09-25 22:06:35
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/pull/454,https://api.github.com/repos/kubernetes/enhancements/issues/454,sig-node updates for 1.8,fyi @dchen1107 ,closed,True,2017-09-25 19:00:29,2017-09-25 19:21:58
enhancements,nikhita,https://github.com/kubernetes/enhancements/pull/455,https://api.github.com/repos/kubernetes/enhancements/issues/455,Fix links in 1.8 release notes,The design proposals were organized according to SIGs in kubernetes/community#1010. This led to a couple of broken links.,closed,True,2017-09-25 19:30:48,2017-09-25 19:39:46
enhancements,bsalamat,https://github.com/kubernetes/enhancements/pull/456,https://api.github.com/repos/kubernetes/enhancements/issues/456,Add theme for SIG Scheduling,"
@radhikapc @davidopp @timothysc ",closed,True,2017-09-25 21:52:52,2017-09-25 23:22:10
enhancements,bsalamat,https://github.com/kubernetes/enhancements/pull/457,https://api.github.com/repos/kubernetes/enhancements/issues/457,Fix broken links of scheduling design docs,@calebamiles ,closed,True,2017-09-25 23:44:02,2017-09-26 00:17:46
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/458,https://api.github.com/repos/kubernetes/enhancements/issues/458,Release notes,"@radhikapc PTAL. Fairly heavy copyedits but I'm as certain as I can be that I made no changes to technical meaning. There are still some too-long too-complex sentences, but I fixed what I could in a reasonable amount of time. Also focused on:
- consistent punctuation
- consistent high-level descriptions (not perfect, but better)
- consistent group/version vocabulary
- a few grammar fixes
- clearer explanations
",closed,True,2017-09-26 01:41:08,2017-09-26 17:03:57
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/459,https://api.github.com/repos/kubernetes/enhancements/issues/459,copy / substantial edit of upgrade readiness section,"@Bradamant3  PTAL. Fairly heavy copyedits after discussing with owners of respective sections.  Tried to focused on:

- clearer explanations
- consistent punctuation
- consistent high-level descriptions 
- consistent terminology
",closed,True,2017-09-26 15:24:41,2017-09-26 19:55:29
enhancements,jcbsmpsn,https://github.com/kubernetes/enhancements/issues/460,https://api.github.com/repos/kubernetes/enhancements/issues/460,Encryption at rest KMS integration,"# Feature Description
- One-line feature description (can be used as a release note): Data encryption at rest using Google KMS as an encryption provider.
- Primary contact (assignee): @jcbsmpsn
- Responsible SIGs: sig-auth
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1134
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (1.9)
  - Beta release target (1.12)
  - Stable release target (?.?)
",closed,False,2017-09-26 21:57:38,2019-01-16 16:23:52
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/461,https://api.github.com/repos/kubernetes/enhancements/issues/461,add API machinery themes,also re-ordered the entire theme section to be completely alphabetical by sig name. 🤷‍♀️ ,closed,True,2017-09-26 22:54:20,2017-09-27 03:29:19
enhancements,mbohlool,https://github.com/kubernetes/enhancements/pull/462,https://api.github.com/repos/kubernetes/enhancements/issues/462,Add Major theme for API Machinery,In addition to #446 adding major theme for API Machinery.,closed,True,2017-09-26 23:29:34,2017-09-26 23:45:28
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/463,https://api.github.com/repos/kubernetes/enhancements/issues/463,edit review of the Depreciations section,"
1. Re-ordered the sections alphabetically.
2. Edited for clarity and consistency.
3. Added consistent punctuation.
",closed,True,2017-09-27 03:25:10,2017-09-27 04:26:44
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/464,https://api.github.com/repos/kubernetes/enhancements/issues/464,Edit review of the node components section,"1. Re-ordered the sections alphabetically.
2. Edited for clarity and consistency.
3. Added consistent punctuation.",closed,True,2017-09-27 05:21:43,2017-09-27 06:14:17
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/465,https://api.github.com/repos/kubernetes/enhancements/issues/465,finish edits to Workloads API release notes,"Sub-sections still to do:
- Scheduling
- Storage

At this point edits are minimal for consistency and clarity where possible. Some items could still use clarification from the sig. I'll see what I can do on Wednesday.

Also did not alphabetize sections bc the sig seemed to have something of a rationale for the order of components that they provided.",closed,True,2017-09-27 06:19:21,2017-09-27 21:05:06
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/466,https://api.github.com/repos/kubernetes/enhancements/issues/466,edit storage section,"@Bradamant3 PTAL. Fairly heavy copyedits 

Tried to focused on:

- clearer explanations
- consistent punctuation
- consistent terminology",closed,True,2017-09-27 06:40:15,2017-09-27 15:08:57
enhancements,feiskyer,https://github.com/kubernetes/enhancements/pull/467,https://api.github.com/repos/kubernetes/enhancements/issues/467,Add release notes of frakti runtime,/cc @dchen1107 ,closed,True,2017-09-27 06:41:30,2017-09-27 15:33:24
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/468,https://api.github.com/repos/kubernetes/enhancements/issues/468,"edits on external dependencies, network sections","@Bradamant3 PTAL. Fairly heavy copyedits

Tried to focused on:

clearer explanations
consistent punctuation
consistent terminology",closed,True,2017-09-27 14:53:31,2017-09-27 15:58:16
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/469,https://api.github.com/repos/kubernetes/enhancements/issues/469,add federation content,Source https://docs.google.com/spreadsheets/d/18V_8YvqemC96W17O_3WZ6H_kS7r77NAI9FqUHAM2MS0/edit#gid=0,closed,True,2017-09-27 16:31:31,2017-09-27 16:48:48
enhancements,shyamjvs,https://github.com/kubernetes/enhancements/pull/470,https://api.github.com/repos/kubernetes/enhancements/issues/470,Update release scalability-validation doc with performance regressions,"Ref https://github.com/kubernetes/kubernetes/issues/51899

cc @kubernetes/sig-scalability-misc @liggitt @jdumars @abgworrall ",closed,True,2017-09-27 17:33:55,2017-09-27 20:28:41
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/471,https://api.github.com/repos/kubernetes/enhancements/issues/471,add known issues,,closed,True,2017-09-27 18:42:31,2017-09-27 18:54:44
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/472,https://api.github.com/repos/kubernetes/enhancements/issues/472,Add known issues,,closed,True,2017-09-27 19:59:28,2017-09-27 20:58:49
enhancements,yujuhong,https://github.com/kubernetes/enhancements/pull/473,https://api.github.com/repos/kubernetes/enhancements/issues/473,Edit CRI-related items,/cc @yguo0905 @Random-Liu @mrunalp @feiskyer @dchen1107 ,closed,True,2017-09-27 20:33:28,2017-09-27 21:08:40
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/474,https://api.github.com/repos/kubernetes/enhancements/issues/474,fixed a typo,,closed,True,2017-09-27 21:03:55,2017-09-27 21:04:58
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/475,https://api.github.com/repos/kubernetes/enhancements/issues/475,"final edits to release notes, including final known issues",,closed,True,2017-09-27 21:32:31,2017-09-27 21:33:33
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/476,https://api.github.com/repos/kubernetes/enhancements/issues/476,removing the SIG checklist,,closed,True,2017-09-27 22:26:17,2017-09-27 23:09:10
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/pull/477,https://api.github.com/repos/kubernetes/enhancements/issues/477,clarify cri-o support statement,update release note statement for cri-o,closed,True,2017-09-27 22:57:53,2017-09-27 23:03:58
enhancements,quinton-hoole-zz,https://github.com/kubernetes/enhancements/pull/478,https://api.github.com/repos/kubernetes/enhancements/issues/478,Add theme and Federated HPA to release notes for SIG Multi-cluster.,,closed,True,2017-09-27 23:01:24,2017-09-27 23:19:30
enhancements,radhikapc,https://github.com/kubernetes/enhancements/pull/479,https://api.github.com/repos/kubernetes/enhancements/issues/479,add an intro to the release notes,,closed,True,2017-09-27 23:14:20,2017-09-27 23:17:57
enhancements,xsgordon,https://github.com/kubernetes/enhancements/pull/480,https://api.github.com/repos/kubernetes/enhancements/issues/480,Add deprecation notice for `openstack-heat`,"Add deprecation notice for the `openstack-heat` kube-up provider. This
continues efforts to deprecated and remove the providers under cluster/
- see also https://github.com/kubernetes/kubernetes/issues/49213",closed,True,2017-09-28 14:08:48,2017-09-28 14:21:23
enhancements,xsgordon,https://github.com/kubernetes/enhancements/pull/481,https://api.github.com/repos/kubernetes/enhancements/issues/481,Add deprecation notice for `openstack-heat`,"Add deprecation notice for the openstack-heat kube-up provider. This
continues efforts to deprecated and remove the providers under cluster/

See also https://github.com/kubernetes/kubernetes/issues/49213",closed,True,2017-09-28 14:24:19,2017-10-17 17:17:18
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/482,https://api.github.com/repos/kubernetes/enhancements/issues/482,add pod deletion latency known issue,PTAL @liggitt @jdumars @radhikapc ,closed,True,2017-09-28 20:17:10,2017-09-28 21:11:29
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/483,https://api.github.com/repos/kubernetes/enhancements/issues/483,Proposed schedule for 1.9 release,,closed,True,2017-09-28 21:48:21,2017-10-09 20:25:13
enhancements,kow3ns,https://github.com/kubernetes/enhancements/issues/484,https://api.github.com/repos/kubernetes/enhancements/issues/484,Workloads GA,"# Feature Description
- One-line feature description (can be used as a release note): GA promotion of the core workload API.
- Primary contact (assignee):  @kow3ns 
- Responsible SIGs: @kubernetes/sig-apps-feature-requests 
- Design proposal link (community repo): N/A
- Reviewer(s) - (for LGTM) :  @kargakis @janetkuo @foxish @enisoc @crimsonfaith91 @liyinan926 
- Approver (likely from SIG/area to which feature belongs): @bgrant0607 
- Feature target (which target equals to which milestone): 1.9
- Feature branch : https://github.com/kubernetes/kubernetes/tree/feature-workload-ga

We will promote the core workload controllers (DaemonSet, Deployment, ReplicaSet, and StatefulSet) to GA in the apps/v1 group version. 
The previous implementations of these kinds in the apps/v1beta2 group will be deprecated. No kinds, in any group versions, are removed by this feature.
We intended to promote the apps/v1beta2 group in its entirety. We may make non-breaking changes with respect to selector immutability in the process.
We may deprecate or expand the use of Conditions across the API surface.",closed,False,2017-09-28 21:54:44,2017-10-07 11:14:53
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/485,https://api.github.com/repos/kubernetes/enhancements/issues/485,add before upgrading item about kubelet failing with swap on,PTAL @dchen1107  @jdumars @radhikapc @abgworrall ,closed,True,2017-09-28 21:57:46,2017-09-28 22:02:43
enhancements,ZeroMagic,https://github.com/kubernetes/enhancements/pull/486,https://api.github.com/repos/kubernetes/enhancements/issues/486,Fix grammatical issue,,closed,True,2017-10-16 11:29:29,2017-10-16 23:42:03
enhancements,enisoc,https://github.com/kubernetes/enhancements/pull/487,https://api.github.com/repos/kubernetes/enhancements/issues/487,Add 1.9 release team,"Based on the [nomination sheet](https://docs.google.com/spreadsheets/d/1NGEtufpSfYlJwsB_0D9gF80Y24JQEreut9gT_QIN6Kk/edit?usp=sharing) as of Oct 16.

**Please comment below to confirm acceptance of your role.**

|  **Role** | **Name** (**GitHub/Slack ID**)  | **Shadow Name(s) (GitHub/Slack ID), ...**
|  ------ | ------ | ------ |
|  Lead | Anthony Yeh ([@enisoc](https://github.com/enisoc)) | |
|  Secondary | Jaice Singer DuMars ([@jdumars](https://github.com/jdumars)) | |
|  Features | Ihor Dvoretskyi ([@idvoretskyi](https://github.com/idvoretskyi)) | |
|  Branch Manager | David Ashpole ([@dashpole](https://github.com/dashpole)) | |
|  Test Infra | Benjamin Elder ([@BenTheElder](https://github.com/BenTheElder)) | |
|  Docs | Zach Corleissen ([@zacharysarah](https://github.com/zacharysarah)) | |
|  Release Notes | Jennifer Rondeau ([@Bradamant3](https://github.com/Bradamant3)) | Nick Chase ([@nickchase](https://github.com/nickchase)), Peter Zhao ([@xiangpengzhao](https://github.com/xiangpengzhao)) |
|  Bugs | Josh Berkus ([@jberkus](https://github.com/jberkus)) | |
|  Upgrade Testing / CI Signal | Aaron Crickenberger ([@spiffxp](https://github.com/spiffxp)) | Jason DeTiberus ([@detiber](https://github.com/detiber)/@jdetiber) |
|  Patch Release Manager | Mehdy Bohlool ([@mbohlool](https://github.com/mbohlool)) | |
|  Marketing coordinator | Natasha Woods ([@nwoods3](https://github.com/nwoods3)) | Wendy Cartee ([@wcartee](https://github.com/wcartee)), Paris Pittman ([@parispittman](https://github.com/parispittman)) |

",closed,True,2017-10-16 22:46:59,2017-10-20 18:55:58
enhancements,ihmccreery,https://github.com/kubernetes/enhancements/pull/488,https://api.github.com/repos/kubernetes/enhancements/issues/488,"Versions are vX.Y.Z-rc.W, not vX.Y.Z-beta.rc.W.",,closed,True,2017-10-17 14:38:29,2017-10-17 20:11:37
enhancements,grodrigues3,https://github.com/kubernetes/enhancements/pull/489,https://api.github.com/repos/kubernetes/enhancements/issues/489,add section asking for testing,"During 1.8, some PRs got merged with the idea that tests would be written.  I think we should start asking for tests sooner to help produce more stable releases.",closed,True,2017-10-18 22:24:31,2017-12-19 22:19:07
enhancements,msau42,https://github.com/kubernetes/enhancements/issues/490,https://api.github.com/repos/kubernetes/enhancements/issues/490,Topology Aware Volume Scheduling,"# Feature Description
- One-line feature description (can be used as a release note): Make the scheduler aware of a Pod's volume's topology constraints, such as zone or node.
- Primary contact (assignee): @msau42
- Responsible SIGs: @kubernetes/sig-storage-feature-requests @kubernetes/sig-scheduling-feature-requests 
- Design proposal link (community repo):kubernetes/community#1054, kubernetes/community#1168
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
    * @jsafrane 
    * @bsalamat 
- Approver (likely from SIG/area to which feature belongs):
    * @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.9
  - Beta release target (x.y): 1.10
  - Stable release target (x.y): 1.13

/assign",closed,False,2017-10-20 17:56:30,2019-02-28 17:54:00
enhancements,seans3,https://github.com/kubernetes/enhancements/issues/491,https://api.github.com/repos/kubernetes/enhancements/issues/491,Kubectl Diff,"# Feature Description
- One-line feature description (can be used as a release note): Users can run a
  kubectl command to view the difference between a locally declared object
  configuration and the current state of a live object.
- Primary contact (assignee): @apelisse
- Responsible SIGs: @kubernetes/sig-cli
- Design proposal link (community repo): https://goo.gl/UVsM6A
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from
  code-area OWNERS file) agreed to review. Reviewers from multiple companies
  preferred: @pwittrock, @mengqiy
- Approver (likely from SIG/area to which feature belongs): @pwittrock
- Feature target (which target equals to which milestone):
  - Alpha release target (1.8)
  - Beta release target (1.13)
  - Stable release target (TBD)
",open,False,2017-10-23 22:52:41,2019-01-14 22:09:02
enhancements,caesarxuchao,https://github.com/kubernetes/enhancements/issues/492,https://api.github.com/repos/kubernetes/enhancements/issues/492,Admission webhook,"# Feature Description
- One-line feature description (can be used as a release note):

The admission webhook feature now supports both mutating webhook and validation (non-mutating) webhook. The dynamic registration API of webhook is promoted to v1beta1. The admission API is promoted to v1beta1.

- Primary contact (assignee):
@mbhlool 

- Responsible SIGs:
/sig api-machinery

- Design proposal link (community repo):
  markdown version (latest): https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/00xx-admission-webhooks-to-ga.md

community proposal: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/admission-control-webhooks.md

google doc (outdated, contains many discussion history): https://docs.google.com/document/d/1c4kdkY3ha9rm0OIRbGleCeaHknZ-NR1nNtDp-i8eH8E/edit?ts=59e8c984#

- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:

@cheftako @liggitt @deads2k

- Approver (likely from SIG/area to which feature belongs):

@erictune @lavalamp @deads2k 

- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
1.9
  - Stable release target (x.y)
",open,False,2017-10-23 23:20:24,2019-02-15 07:00:06
enhancements,enisoc,https://github.com/kubernetes/enhancements/pull/493,https://api.github.com/repos/kubernetes/enhancements/issues/493,[1.9] Update schedule.,"This is my attempt to reorganize the release page, while also making the following changes:

* Propose a policy for disabling incomplete features after code freeze.
* Add code slush date prior to code freeze.
* Reduce number of alphas (before code freeze), increase betas (after code freeze).
* Merge all dates into one timeline with key dates emphasized.

All the major anchor dates (feature freeze, code freeze, final cut) remain unchanged.

I plan to bring up these changes at the release team and sig-release meetings today.",closed,True,2017-10-24 06:13:01,2017-10-31 00:22:11
enhancements,m1093782566,https://github.com/kubernetes/enhancements/issues/494,https://api.github.com/repos/kubernetes/enhancements/issues/494,Kube-proxy IPVS mode target to beta,"# Feature Description
- One-line feature description (can be used as a release note):
Kube-proxy IPVS mode target to beta
- Primary contact (assignee):
@m1093782566
- Responsible SIGs:
SIG Network
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@thockin @freehan 

- Approver (likely from SIG/area to which feature belongs):
@thockin 
- Feature target (which target equals to which milestone):
  - Beta release target (1.9)
",closed,False,2017-10-24 10:58:55,2017-10-27 19:41:48
enhancements,verb,https://github.com/kubernetes/enhancements/issues/495,https://api.github.com/repos/kubernetes/enhancements/issues/495,Configurable Pod Process Namespace Sharing,"# Feature Description
- One-line feature description (can be used as a release note): Users can configure containers within a pod to share a common PID namespace by setting an option in the PodSpec.
- Primary contact (assignee): @verb
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/pod-pid-namespace.md
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @yujuhong 
- Approver (likely from SIG/area to which feature belongs): @dchen1107
- Feature target (which target equals to which milestone):
  - Alpha release target (1.10)
  - Beta release target (1.12)
  - Stable release target (1.15)
",open,False,2017-10-24 12:04:43,2019-01-16 15:28:19
enhancements,gnufied,https://github.com/kubernetes/enhancements/issues/496,https://api.github.com/repos/kubernetes/enhancements/issues/496,Detailed storage metrics of internal state,"# Feature Description
- Expose detailed metrics of internal state of various storage components
- Primary contact (assignee): Hemant Kumar (@gnufied)
- Responsible SIGs:  #sig-storage
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1289
- Reviewer(s) - @saad-ali @childsb 
- Approver (likely from SIG/area to which feature belongs): #sig-storage
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)
",closed,False,2017-10-24 16:12:51,2018-09-28 19:36:41
enhancements,vkamra,https://github.com/kubernetes/enhancements/issues/497,https://api.github.com/repos/kubernetes/enhancements/issues/497,Display PVC capacity usage using kubectl,"# Feature Description
- One-line feature description (can be used as a release note): Display PVC capacity usage using kubectl top
- Primary contact (assignee): @vkamra
- Responsible SIGs: @kubernetes/sig-storage-feature-requests @kubernetes/sig-instrumentation-feature-requests 
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@jingxu97 
- Approver (likely from SIG/area to which feature belongs): sig-instrumentation
- Feature target (which target equals to which milestone):
  - Alpha release target: 1.10
  - Beta release target: 1.11
  - Stable release target: 
",closed,False,2017-10-26 15:48:33,2019-03-27 22:10:23
enhancements,pospispa,https://github.com/kubernetes/enhancements/issues/498,https://api.github.com/repos/kubernetes/enhancements/issues/498,StorageObjectInUseProtection (was Persistent Volume Claim Protection),"# Feature Description
- One-line feature description (can be used as a release note): Prevent deletion of Storage Object that is In active Use (was Prevent deletion of Persistent Volume Claims that are used by a pod in 1.9)
- Primary contact (assignee): Pavel Pospisil (@pospispa)
- Responsible SIGs: @kubernetes/sig-storage-feature-requests
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1174
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  - @msau42 
  - @jsafrane 
- Approver (likely from SIG/area to which feature belongs): @jsafrane
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.9
  - Beta release target (x.y): 1.10
  - Stable release target (x.y): 1.11
",closed,False,2017-10-26 17:21:06,2018-07-23 17:18:32
enhancements,pospispa,https://github.com/kubernetes/enhancements/issues/499,https://api.github.com/repos/kubernetes/enhancements/issues/499,StorageObjectInUseProtection (was Persistent Volume Protection),"# Feature Description
- One-line feature description (can be used as a release note): Prevent deletion of Storage Object that is In active Use (was Prevent deletion of Persistent Volume that is bound to a Persistent Volume Claim)
- Primary contact (assignee): Pavel Pospisil (@pospispa)
- Responsible SIGs: @kubernetes/sig-storage-feature-requests
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @jsafrane @msau42 
- Approver (likely from SIG/area to which feature belongs): @jsafrane
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): ~1.10~ skipped
  - Beta release target (x.y): 1.10
  - Stable release target (x.y): 1.11
",closed,False,2017-10-26 17:47:04,2018-07-23 17:20:07
enhancements,jbw976,https://github.com/kubernetes/enhancements/issues/500,https://api.github.com/repos/kubernetes/enhancements/issues/500,Support additional default flexvolume plugin directories,"# Feature Description
- One-line feature description (can be used as a release note): Support additional default flexvolume plugin directories
- Primary contact (assignee): Jared Watts (@jbw976)
- Responsible SIGs: /sig-storage, @kubernetes/sig-storage-feature-requests
- Design proposal link (community repo): TBD
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@chakri-nelluri
@verult 
- Approver (likely from SIG/area to which feature belongs):
@saad-ali 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.10?
  - Beta release target (x.y): 1.11?
  - Stable release target (x.y): 1.12?
",closed,False,2017-10-26 18:54:16,2018-01-23 05:15:31
enhancements,rjog,https://github.com/kubernetes/enhancements/issues/501,https://api.github.com/repos/kubernetes/enhancements/issues/501,Supporting multiple vCenters in vSphere Cloud Provider,"# Feature Description
- Supporting multiple vCenters in vSphere Cloud Provider
- Primary contact (assignee): Sandeep Pissay, Rohit Jog
- Responsible SIGs: sig-storage
- Design proposal link (community repo): https://github.com/vmware/kubernetes/issues/255
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  Sandeep Pissay,
  Abrar Shivani
- Approver (likely from SIG/area to which feature belongs):
  TBD
- Feature target (which target equals to which milestone):
  - Beta release target (1.9)
  - Stable release target (TBD)
",closed,False,2017-10-27 17:11:55,2017-11-13 19:44:21
enhancements,deads2k,https://github.com/kubernetes/enhancements/issues/502,https://api.github.com/repos/kubernetes/enhancements/issues/502,ClusterRole Aggregation,"# Feature Description
- Add a way for API extenders to add permissions to existing roles
- Primary contact (assignee):  @deads2k
- Responsible SIGs: @kubernetes/sig-auth-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1219
- Reviewer(s) - @liggitt @ericchiang 
- Approver (likely from SIG/area to which feature belongs): @liggitt 
- Feature target (which target equals to which milestone):
  - Beta release target (x.y): 1.9
  - Stable release target (x.y): 1.11
",closed,False,2017-10-27 17:40:52,2018-10-15 13:50:48
enhancements,SandeepPissay,https://github.com/kubernetes/enhancements/issues/503,https://api.github.com/repos/kubernetes/enhancements/issues/503,Backup/restore for persistent volumes,"# Feature Description
- Design generic kubernetes APIs to perform backup and restore of persistent volumes
- Primary contact (assignee): @SandeepPissay 
- Responsible SIGs: @kubernetes/sig-storage-feature-requests 
- Proposal link (community repo): https://docs.google.com/document/d/1Xkh7AzYQoVnFowW1pBBC6yLWLXQGmsqWr1L_5bSSh34/edit#heading=h.ro9oagw81y6h
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: Rohit Jog, Balu Dontu
- Approver (likely from SIG/area to which feature belongs): sig-storage
- Feature target (which target equals to which milestone):
  - Alpha release target (TBD)
  - Beta release target (TBD)
  - Stable release target (TBD)
",closed,False,2017-10-27 20:23:37,2018-06-07 22:01:01
enhancements,MrHohn,https://github.com/kubernetes/enhancements/issues/504,https://api.github.com/repos/kubernetes/enhancements/issues/504,Support configurable pod resolv.conf,"# Feature Description
- One-line feature description (can be used as a release note): Support configurable pod resolv.conf.
- Primary contact (assignee): @mrhohn 
- Responsible SIGs: sig-network
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1276
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @bowei 
- Approver (likely from SIG/area to which feature belongs): @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.9)
  - Beta release target (1.10)
  - Stable release target (1.14)
",closed,False,2017-10-27 22:45:50,2019-04-04 18:20:22
enhancements,jberkus,https://github.com/kubernetes/enhancements/issues/505,https://api.github.com/repos/kubernetes/enhancements/issues/505,Milestone Tag is inconsistent with kubernetes/kubernetes,"In this repo, we are using milestone tags formatted as ""1.9"".  However, in kubernetes/kubernetes, milestone tags are formatted ""v1.9"".  This breaks cross-repo searches.  We should fix to match kubernetes/kubernetes.
",closed,False,2017-10-31 17:03:17,2017-10-31 19:13:31
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/506,https://api.github.com/repos/kubernetes/enhancements/issues/506,Rename OWNERS assignees: to approvers:,"They are effectively the same, assignees is deprecated

ref: kubernetes/test-infra#3851",closed,True,2017-10-31 23:25:31,2017-11-06 21:30:15
enhancements,mikedanese,https://github.com/kubernetes/enhancements/issues/507,https://api.github.com/repos/kubernetes/enhancements/issues/507,Support short circuit deny from authorizers,"# Feature Description
- One-line feature description (can be used as a release note): Support short circuit deny from authorizers
- Primary contact (assignee):mikedanese
- Responsible SIGs: auth
- Design proposal link (community repo):
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Stable release target (x.y) 1.9
",closed,False,2017-11-01 15:21:11,2017-12-08 21:47:37
enhancements,danehans,https://github.com/kubernetes/enhancements/issues/508,https://api.github.com/repos/kubernetes/enhancements/issues/508,IPv6 support added,"# Feature Description
- One-line feature description (can be used as a release note): Adds support for IPv6, allowing full Kubernetes capabilities using IPv6 networking instead of IPv4 networking.
- Primary contact (assignee): @danehans
- Responsible SIGs: sig-network
- Design proposal link (community repo): TBD
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @thockin @bowei @luxas
- Approver (likely from SIG/area to which feature belongs): @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target 1.9
",open,False,2017-11-01 20:03:52,2019-01-16 16:13:02
enhancements,zacharysarah,https://github.com/kubernetes/enhancements/pull/509,https://api.github.com/repos/kubernetes/enhancements/issues/509,Updated doc dates and PR requirements,"Updates to doc dates and requirements for docs PRs.

/cc @enisoc @Bradamant3 ",closed,True,2017-11-03 22:12:57,2017-11-03 23:31:39
enhancements,enisoc,https://github.com/kubernetes/enhancements/pull/510,https://api.github.com/repos/kubernetes/enhancements/issues/510,[1.9] Fix formatting in timeline.,,closed,True,2017-11-04 01:17:52,2017-11-04 01:18:25
enhancements,zacharysarah,https://github.com/kubernetes/enhancements/pull/511,https://api.github.com/repos/kubernetes/enhancements/issues/511,Fix doc heading to match others,1 character fix to streamline page format,closed,True,2017-11-10 19:29:06,2017-11-16 21:16:19
enhancements,michmike,https://github.com/kubernetes/enhancements/issues/512,https://api.github.com/repos/kubernetes/enhancements/issues/512,Support for Windows Server Containers ,"# Feature Description
- One-line feature description (can be used as a release note): Support for Windows Server Containers
- Primary contact (assignee): @michmike
- Responsible SIGs: sig-windows
- Design proposal link (community repo): TBD
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @brendandburns, @JiangtianLi, @alinbalutoiu
- Approver (likely from SIG/area to which feature belongs): @michmike
- Feature target (which target equals to which milestone):
  - Beta release target 1.9
",closed,False,2017-11-15 15:17:50,2017-11-16 15:24:01
enhancements,feiskyer,https://github.com/kubernetes/enhancements/issues/513,https://api.github.com/repos/kubernetes/enhancements/issues/513,Add support for Azure Virtual Machine Scale Sets ,"# Feature Description

- One-line feature description (can be used as a release note): Add support for Azure Virtual Machine Scale Sets (VMSS).
- Primary contact (assignee): @feiskyer
- Responsible SIGs: sig-azure
- Design proposal link (community repo): https://github.com/kubernetes/kubernetes/issues/43287
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @brendandburns @colemickens
- Approver (likely from SIG/area to which feature belongs): @brendandburns @colemickens
- Feature target (which target equals to which milestone):
  - Alpha release target v1.10
  - Beta release target v1.11
  - Stable release target v1.12
",closed,False,2017-11-16 07:31:57,2018-10-15 13:50:48
enhancements,feiskyer,https://github.com/kubernetes/enhancements/issues/514,https://api.github.com/repos/kubernetes/enhancements/issues/514,Add Azure support to cluster-autoscaler,"# Feature Description
- One-line feature description (can be used as a release note): Add Azure support to cluster-autoscaler.
- Primary contact (assignee): @feiskyer
- Responsible SIGs: sig-autoscaling
- Design proposal link (community repo): https://github.com/kubernetes/autoscaler/issues/449
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @mwielgus @brendandburns 
- Approver (likely from SIG/area to which feature belongs): @mwielgus @MaciekPytel
- Feature target (which target equals to which milestone):
  - Alpha release target v1.10
  - Beta release target v1.11
  - Stable release target v1.12
",closed,False,2017-11-16 07:32:06,2018-10-15 13:50:48
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/issues/515,https://api.github.com/repos/kubernetes/enhancements/issues/515,kubectl get and describe should work well with extensions,"# Feature Description
- One-line feature description (can be used as a release note): kubectl get should get columns back from the server, not the client, to allow extensions to work cleanly
- Primary contact (assignee): smarterclayton
- Responsible SIGs: sig-cli, sig-api-machinery
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/server-get.md
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: pwittrock soltysh
- Approver (likely from SIG/area to which feature belongs): pwittrock soltysh
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.8 (server API)
  - Beta release target (x.y): 1.10 (client get, server API)
  - Stable release target (x.y): ? (client get, server API)

As part of the split of kubectl from close coupling with the repository, and to allow better extensibility, it should be possible for third party API extensions and CRD to provide custom output for `kubectl get` to avoid `kubectl` having to have code to interpret those resources.  We will move the printing to the server side, and kubectl will retrieve results.  We also wish to move describe in a future release.
",open,False,2017-11-21 19:12:30,2019-01-16 15:33:30
enhancements,filmil,https://github.com/kubernetes/enhancements/issues/516,https://api.github.com/repos/kubernetes/enhancements/issues/516,Support for self-hosting authorizer webhook,"# Feature Description
- One-line feature description (can be used as a release note): Add support self-hosting authorizer webhook (running authorizer webhook as a pod)
- Primary contact (assignee): @filmil
- Responsible SIGs: sig-api-machinery sig-auth
- Design proposal link (community repo): kubernetes/community#1458
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @liggitt @lavalamp @erictune @ericchiang @caesarxuchao @bgrant0607 
- Approver (likely from SIG/area to which feature belongs): @liggitt @lavalamp 
- Feature target (which target equals to which milestone):
  - Alpha release target 1.11
  - Beta release target -
  - Stable release target -
",closed,False,2017-11-30 19:41:55,2018-10-15 13:50:49
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/517,https://api.github.com/repos/kubernetes/enhancements/issues/517,add first draft of markdown for release notes,"DRAFT ONLY. But merge is welcome because there's a group of us waiting to do final cleanup.

Note especially that line spacing needs to be fixed up. I fixed up through the Before Upgrading section, then figured a PR was better sooner than later.",closed,True,2017-12-14 21:13:37,2017-12-14 21:38:59
enhancements,xiangpengzhao,https://github.com/kubernetes/enhancements/pull/518,https://api.github.com/repos/kubernetes/enhancements/issues/518,Minor cleanup of 1.9 release notes draft.,"Make the release notes a bit more readable.

/cc @enisoc @Bradamant3 ",closed,True,2017-12-15 09:25:47,2017-12-16 02:43:41
enhancements,porridge,https://github.com/kubernetes/enhancements/pull/519,https://api.github.com/repos/kubernetes/enhancements/issues/519,Scalability validation report for 1.9.,/cc @spiffxp,closed,True,2017-12-15 12:25:14,2017-12-16 17:04:55
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/520,https://api.github.com/repos/kubernetes/enhancements/issues/520,"add known issues, fix line spacing and heading levels","Will merge Peter's PR after this one, please.",closed,True,2017-12-15 13:25:45,2017-12-15 13:41:19
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/pull/521,https://api.github.com/repos/kubernetes/enhancements/issues/521,manually add in changes from missed PR,,closed,True,2017-12-15 14:56:09,2017-12-15 15:14:43
enhancements,nickchase,https://github.com/kubernetes/enhancements/pull/522,https://api.github.com/repos/kubernetes/enhancements/issues/522,"Added AWS theme, as added to Gdoc.",,closed,True,2017-12-15 15:49:40,2017-12-15 16:35:22
enhancements,nickchase,https://github.com/kubernetes/enhancements/pull/523,https://api.github.com/repos/kubernetes/enhancements/issues/523,"Added Instrumentation, other minor changes from Gdoc",,closed,True,2017-12-15 16:04:11,2017-12-15 16:09:31
enhancements,nickchase,https://github.com/kubernetes/enhancements/pull/524,https://api.github.com/repos/kubernetes/enhancements/issues/524,"Added instrumentation, other misc changes from gdoc.",,closed,True,2017-12-15 16:13:07,2017-12-15 16:14:18
enhancements,nickchase,https://github.com/kubernetes/enhancements/pull/525,https://api.github.com/repos/kubernetes/enhancements/issues/525,Added Container runtime section,,closed,True,2017-12-15 16:30:24,2017-12-15 16:32:46
enhancements,Bradamant3,https://github.com/kubernetes/enhancements/issues/526,https://api.github.com/repos/kubernetes/enhancements/issues/526,Final review of release notes for 1.9,"Unless you are @nickchase or @Bradamant3, please use this issue to provide review of the MVP release notes for 1.9. We're approaching the deadline and don't have time to wrangle tricky merges.
",closed,False,2017-12-15 16:35:20,2017-12-22 12:11:32
enhancements,nickchase,https://github.com/kubernetes/enhancements/pull/527,https://api.github.com/repos/kubernetes/enhancements/issues/527,Copyedit themes,,closed,True,2017-12-15 17:13:35,2017-12-15 17:15:38
enhancements,nickchase,https://github.com/kubernetes/enhancements/pull/528,https://api.github.com/repos/kubernetes/enhancements/issues/528,Final release notes,"Added rktlet, additional known issue",closed,True,2017-12-15 18:59:01,2017-12-15 19:03:59
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/529,https://api.github.com/repos/kubernetes/enhancements/issues/529,Release data moved to the k/sig-release repo,"Ref: https://github.com/kubernetes/sig-release/pull/46

Do not merge before merging https://github.com/kubernetes/sig-release/pull/46.",closed,True,2017-12-18 14:21:05,2018-01-04 22:29:07
enhancements,porridge,https://github.com/kubernetes/enhancements/pull/530,https://api.github.com/repos/kubernetes/enhancements/issues/530,Fix a future 404.,,closed,True,2017-12-20 06:52:50,2018-01-04 22:51:48
enhancements,mlmhl,https://github.com/kubernetes/enhancements/issues/531,https://api.github.com/repos/kubernetes/enhancements/issues/531,Add support for online resizing of PVs,"# Feature Description
- Allow PVs to be resized without having to terminate pods and unmount volume first.
- Primary contact (assignee): @mlmhl
- Responsible SIGs: @kubernetes/sig-storage-feature-requests 
- Design proposal link (community repo): [kubernetes/community#1535](https://github.com/kubernetes/community/pull/1535)
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers: @saad-ali @gnufied
- Approver (likely from SIG/area to which feature belongs): @jsafrane
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.11
  - Beta release target (x.y): 1.12
  - Stable release target (x.y): 1.13?
",open,False,2017-12-20 12:21:23,2019-01-30 14:08:17
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/532,https://api.github.com/repos/kubernetes/enhancements/issues/532,Add code-of-conduct.md,"Refer to kubernetes/community as authoritative source for code of conduct

ref: kubernetes/community#1527",closed,True,2017-12-20 18:32:10,2018-01-04 16:42:39
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/533,https://api.github.com/repos/kubernetes/enhancements/issues/533,Tombstone release files,"These files have been migrated. Leave tombstones pointing to
the new location

ref: kubernetes/sig-release#46

I just noticed #529 as I was opening this PR (oops), but I think this is the kinder gentler way.

/cc @idvoretskyi @enisoc @jdumars @calebamiles",closed,True,2018-01-04 00:45:27,2018-01-04 22:23:00
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/534,https://api.github.com/repos/kubernetes/enhancements/issues/534,Sync k/features owners with k/sig-release,Larger pool of people capable of approving PRs to this repo,closed,True,2018-01-04 22:46:50,2018-01-04 23:57:42
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/535,https://api.github.com/repos/kubernetes/enhancements/issues/535,Follow sig list to kubernetes/community,ref: kubernetes/kubernetes#57689,closed,True,2018-01-05 18:58:03,2018-01-05 19:25:21
enhancements,m1093782566,https://github.com/kubernetes/enhancements/issues/536,https://api.github.com/repos/kubernetes/enhancements/issues/536,Topology aware routing of services,"# Feature Description
- One-line feature description (can be used as a release note):
Implement ""local service"", say ""topology aware routing of service"". Local means ""same topology level"", e.g. same node, same rack, same failure zone, same failure region and whatever users like.

- Primary contact (assignee):
@m1093782566

- Responsible SIGs:
/sig network

- Design proposal link (community repo):
kubernetes/enhancements#640

- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@thockin @quinton-hoole @kevin-wangzefeng 

- Approver (likely from SIG/area to which feature belongs):
@thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.15)
  - Beta release target (x.y)
  - Stable release target (x.y)

PRs
- [ ] https://github.com/kubernetes/kubernetes/pull/72057
- [ ] https://github.com/kubernetes/kubernetes/pull/72046",open,False,2018-01-11 01:41:24,2019-02-21 19:32:45
enhancements,misterikkit,https://github.com/kubernetes/enhancements/issues/537,https://api.github.com/repos/kubernetes/enhancements/issues/537,Move equivalence class based scheduling to beta,"# Feature Description
- One-line feature description (can be used as a release note): Cache scheduling decisions of equivalent pods
- Primary contact (assignee): @resouer, @misterikkit
- Responsible SIGs: @kubernetes/sig-scheduling-feature-requests
- Design proposal link (community repo): [Equivalence class based scheduling in Kubernetes](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/scheduler-equivalence-class.md)
- Link to e2e and/or unit tests: [test/e2e/scheduling/equivalence_cache_predicates.go](https://github.com/kubernetes/kubernetes/blob/30b89d830b7fd0827576853d6a0db44b66a90d3d/test/e2e/scheduling/equivalence_cache_predicates.go)
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:  @davidopp, @bsalamat , @erictune, @k82cn, @timothysc, @wojtek-t
- Approver (likely from SIG/area to which feature belongs): @davidopp, @wojtek-t
- Feature target (which target equals to which milestone):
  - Alpha already released: 1.8
  - Beta release target: 1.11
  - Stable release target: 1.12

This feature was already implemented by @resouer and is currently in alpha. There is some remaining work to get the feature ready for beta & ga.

### Original issue: 
- https://github.com/kubernetes/kubernetes/issues/17390

### Remaining issues (will be periodically updated):
- Full integration test is required: https://github.com/kubernetes/kubernetes/issues/56104
- Amend and enable e2e test: https://github.com/kubernetes/kubernetes/pull/56577#issuecomment-348700335
- Fix potential data race: [TODO](https://github.com/kubernetes/kubernetes/blob/30b89d8/pkg/scheduler/core/generic_scheduler.go#L482)
- Evaluate and fix potential improvements:
    - speed up invalidate operation (or not)[TODO]( https://github.com/kubernetes/kubernetes/blob/30b89d8/pkg/scheduler/core/generic_scheduler.go#L490) 
    - minimize invalidation scope, [TODO-1](https://github.com/kubernetes/kubernetes/blob/30b89d8/pkg/scheduler/factory/factory.go#L514) [TODO-2](https://github.com/kubernetes/kubernetes/blob/30b89d8/pkg/scheduler/factory/factory.go#L642)
- Compute pod equivalence based on pod properties and not OwnerReference.

/sig scheduling",closed,False,2018-01-11 23:28:14,2018-01-12 19:17:12
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/538,https://api.github.com/repos/kubernetes/enhancements/issues/538,Repo ownership is defined.,,closed,True,2018-01-16 13:02:53,2018-01-16 17:01:54
enhancements,m1093782566,https://github.com/kubernetes/enhancements/issues/539,https://api.github.com/repos/kubernetes/enhancements/issues/539,Make NodePort IP address configurable,"# Feature Description
- One-line feature description (can be used as a release note):
Make NodePort IP address configurable
- Primary contact (assignee):
@m1093782566
- Responsible SIGs:
/sig network
- Design proposal link (community repo):
https://github.com/kubernetes/community/pull/1547
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@thockin @brendandburns 
- Approver (likely from SIG/area to which feature belongs):
@thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.10)
  - Beta release target (x.y)
  - Stable release target (x.y)
",closed,False,2018-01-17 01:42:13,2018-10-15 13:50:49
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/540,https://api.github.com/repos/kubernetes/enhancements/issues/540,remove myself from k/features OWNERS,,closed,True,2018-01-17 02:04:16,2019-02-19 19:44:13
enhancements,ericchiang,https://github.com/kubernetes/enhancements/issues/541,https://api.github.com/repos/kubernetes/enhancements/issues/541,External client-go credential providers,"# Feature Description
- One-line feature description (can be used as a release note): external client-go credential providers 
- Primary contact (assignee): @ericchiang
- Responsible SIGs: @kubernetes/sig-auth-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1503
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @mikedanese @nckturner 
- Approver (likely from SIG/area to which feature belongs): @liggitt 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.10)
  - Beta release target (1.11)
  - Stable release target (x.y)
",open,False,2018-01-18 23:14:16,2019-01-16 17:53:26
enhancements,mikedanese,https://github.com/kubernetes/enhancements/issues/542,https://api.github.com/repos/kubernetes/enhancements/issues/542,TokenRequest API and Kubelet integration,"# Feature Description
- One-line feature description (can be used as a release note): Add a TokenRequest API to request bound serviceaccount tokens.
- Primary contact (assignee): @mikedanese
- Responsible SIGs: sig-auth
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1460
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @liggitt @smarterclayton @cjcullen 
- Approver (likely from SIG/area to which feature belongs): @liggitt
- Feature target (which target equals to which milestone):
  - Alpha release target (1.10)
  - Beta release target (1.12)
  - Stable release target (x.y)
",open,False,2018-01-18 23:23:36,2019-01-24 01:15:48
enhancements,xing-yang,https://github.com/kubernetes/enhancements/issues/543,https://api.github.com/repos/kubernetes/enhancements/issues/543,Snapshot Support for Kubernetes (CRD + External Controller),"# Feature Description
- One-line feature description (can be used as a release note): Snapshot/restore functionality for Kubernetes and CSI. This provides standardized APIs design (CRDs) and adds PV snapshot/restore support for CSI volume drivers.
- Primary contact (assignee): @jingxu97 @xing-yang
- Responsible SIGs: @kubernetes/sig-storage-feature-requests
- Design proposal link (community repo): kubernetes/community#2335
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  @saad-ali
  @jsafrane
- Approver (likely from SIG/area to which feature belongs):
  @thockin
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.12
  - Beta release target (x.y): 1.13
  - Stable release target (x.y): 1.14",closed,False,2018-01-19 03:12:25,2018-07-28 09:20:54
enhancements,mbohlool,https://github.com/kubernetes/enhancements/issues/544,https://api.github.com/repos/kubernetes/enhancements/issues/544,Custom Resource Definition Versioning,"# Feature Description
- One-line feature description (can be used as a release note):

Versioning for Custom Resources including a way to plug conversion for different versions

- Primary contact (assignee):
@mbohlool 
- Responsible SIGs:
/sig api-machinery
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/customresources-versioning.md
(will send a PR to community repo for this after a round of review in docs)
(join api machinery mailing list to access)
- Link to e2e and/or unit tests: https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiextensions-apiserver/test/integration/versioning_test.go
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@sttts @nikhita
- Approver (likely from SIG/area to which feature belongs):
@lavalamp @liggitt 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.12: webhooks)
  - Beta release target (1.11: only NoConversion, 1.13+ webhooks)
  - Stable release target (TBD)
",closed,False,2018-01-19 23:20:36,2018-07-30 16:04:13
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/545,https://api.github.com/repos/kubernetes/enhancements/issues/545,Enable kubectl to expose `ephemeral-storage` resource information,"# Feature Description
- One-line feature description (can be used as a release note): Enable kubectl to expose “Capacity Isolation Resource Management (for Local Ephemeral Storage)” information
- Primary contact (assignee): @NickrenREN
- Responsible SIGs: /sig-storage
- Design proposal link (community repo):
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @jingxu97 
- Approver (likely from SIG/area to which feature belongs): @saad-ali
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.10
  - Beta release target (x.y): 1.11?
  - Stable release target (x.y): 1.12?
",open,False,2018-01-23 05:41:14,2019-02-06 07:08:57
enhancements,dims,https://github.com/kubernetes/enhancements/issues/546,https://api.github.com/repos/kubernetes/enhancements/issues/546,Allow end users to tweak maximum number of pids,"# Feature Description
- One-line feature description (can be used as a release note): The alpha feature ""SupportPodPidsLimit"" is set by the cluster administrator. Application deployers should be able to request/tweak the limits for their own applications.
- Primary contact (assignee): @dims
- Responsible SIGs: /sig-node
- Design proposal link (community repo): 
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @derekwaynecarr @thockin @mtaufen @yujuhong 
- Approver (likely from SIG/area to which feature belongs): @thockin @derekwaynecarr 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.11
  - Beta release target (x.y): 1.12
  - Stable release target (x.y): 1.13
",closed,False,2018-01-23 18:55:59,2019-03-07 18:16:57
enhancements,feiskyer,https://github.com/kubernetes/enhancements/issues/547,https://api.github.com/repos/kubernetes/enhancements/issues/547,Add support for Windows Container Configuration in CRI ,"# Feature Description
- One-line feature description (can be used as a release note): Add support for Windows Container Configuration in CRI 
- Primary contact (assignee): @feiskyer @PatrickLang 
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1510
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @yujuhong @dchen1107  @PatrickLang @michmike
- Approver (likely from SIG/area to which feature belongs): sig-node sig-windows
- Feature target (which target equals to which milestone):
  - Alpha release target (1.10)
  - Beta release target (1.11)
  - Stable release target (1.12)
",closed,False,2018-01-24 01:43:33,2019-01-17 17:09:50
enhancements,k82cn,https://github.com/kubernetes/enhancements/issues/548,https://api.github.com/repos/kubernetes/enhancements/issues/548,Schedule DaemonSet Pods by kube-scheduler,"# Feature Description
- One-line feature description (can be used as a release note): 
- Primary contact (assignee): @k82cn 
- Responsible SIGs: sig-scheduling, sig-apps
- Design proposal link (community repo): [Preemption support in DaemonSet controller](https://docs.google.com/document/d/1v7hsusMaeImQrOagktQb40ePbK6Jxp1hzgFB9OZa_ew/edit#) , [Schedule DaemonSet Pods by default scheduler](https://docs.google.com/document/d/10Ch3dhD88mnHYTq9q4jtX3e9e6gpndC78g5Ea6q4JY4/edit#heading=h.omc36fvblmoy)
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @bsalamat , @timothysc , @bgrant0607 @janetkuo
- Approver (likely from SIG/area to which feature belongs): @bsalamat , @timothysc, @janetkuo
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.11
  - Beta release target (x.y): 1.12
  - Stable release target (x.y):",open,False,2018-01-29 08:54:59,2019-01-16 15:37:56
enhancements,tsmetana,https://github.com/kubernetes/enhancements/issues/549,https://api.github.com/repos/kubernetes/enhancements/issues/549,Allow disabling of the recursive automatic file ownership change of pod volume mounts,"# Feature Description
- One-line feature description (can be used as a release note): Allow disabling of the recursive automatic file ownership change of pod volume mounts
- Primary contact (assignee): Tomáš Smetana (@tsmetana)
- Responsible SIGs: @kubernetes/sig-storage-feature-requests
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1717
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @jsafrane
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.11
  - Beta release target (x.y) 1.12
  - Stable release target (x.y) 1.12
",closed,False,2018-01-29 13:26:23,2018-03-29 15:10:39
enhancements,ViniciusDeAndrade,https://github.com/kubernetes/enhancements/issues/550,https://api.github.com/repos/kubernetes/enhancements/issues/550,my own kube-schedule ,"Problem:
I am trying to deploy replicas of the same microservice into differents nodes. I think it is not possible
using the default kubernetes primitives.

Proposed Solution:
I am developing a solution using a java client. I want to create a extension of the kube-scheduler that make possible the deploy of the replicas of a same microservice into different nodes.
How can I do that?",closed,False,2018-02-02 11:36:41,2018-02-02 21:39:36
enhancements,yastij,https://github.com/kubernetes/enhancements/issues/551,https://api.github.com/repos/kubernetes/enhancements/issues/551,Node Failure Recover with ForceEvictione Taint,"# Feature Description
- One-line feature description (can be used as a release note):
- Primary contact (assignee): @yastij 
- Responsible SIGs: sig-node, sig-storage
- Design proposal link (community repo): kubernetes/kubernetes#58635 (design proposal will be added later under kubernetes/community)
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @jingxu97 @saad-ali 
- Approver (likely from SIG/area to which feature belongs): @jingxu97 @yujuhong  
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.14
  - Beta release target (x.y) 1.15
  - Stable release target (x.y)
",open,False,2018-02-03 13:09:50,2019-01-31 06:00:30
enhancements,yujuhong,https://github.com/kubernetes/enhancements/issues/552,https://api.github.com/repos/kubernetes/enhancements/issues/552,"CRI: logging, stats, and more","# Feature Description
- One-line feature description (can be used as a release note): Continue improving CRI in various aspects to better support non-docker runtimes.
- Primary contact (assignee): @yujuhong
- Responsible SIGs: sig-node
- Design proposal link (community repo):
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @Random-Liu, @mrunalp 
- Approver (likely from SIG/area to which feature belongs): @dchen1107 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)
",closed,False,2018-02-05 19:12:06,2019-03-07 18:16:58
enhancements,rphillips,https://github.com/kubernetes/enhancements/issues/553,https://api.github.com/repos/kubernetes/enhancements/issues/553,Deprecate ComponentStatus,"# Feature Description
- One-line feature description (can be used as a release note): Deprecate ComponentStatus APIs and kubectl componentstatus functionality
- Primary contact (assignee): @rphillips
- Responsible SIGs: @kubernetes/sig-cluster-lifecycle-feature-requests 
- Design proposal link (community repo):
- Link to e2e and/or unit tests:
- Issue https://github.com/kubernetes/kubernetes/issues/19570
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:  /cc @justinsb @hongchaodeng 
- Approver (likely from SIG/area to which feature belongs):
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): add code to deprecate kubectl get cs. 1.10 add code to deprecate the APIs
  - Beta release target (x.y): change documentation and commandline deprecation to beta
  - Stable release target (x.y): Remove kubectl componentstatus functionality and APIs

ComponentStatus is functionality to get the health of kubernetes components: etcd, controller manager, and scheduler. The [code](https://github.com/kubernetes/kubernetes/blob/master/pkg/registry/core/rest/storage_core.go#L240-L277) attempts to query controller manager and scheduler at a static (127.0.0.1) address and fixed port. This requires the components to be run alongside the API server, which might not necessarily be the case in all installations (see: https://github.com/kubernetes/kubernetes/issues/19570#issuecomment-354812863). In addition, the code queries etcd servers for their health which could be out of scope of kubernetes, or problematic to query from a networking standpoint as well.

We could add registration of the controller manager and scheduler (ip+port), like we do with the Lease Endpoint Reconciler for API servers directly within the storage-api (etcd), but this was a stop-gap solution.

This proposal is to deprecate the ComponentStatus API and cli, and eventually remove them around the 1.12-1.13 release.",closed,False,2018-02-16 22:32:45,2018-10-22 17:10:03
enhancements,gnufied,https://github.com/kubernetes/enhancements/issues/554,https://api.github.com/repos/kubernetes/enhancements/issues/554,Dynamic Maximum volume count,"# Feature Description
- Add support for dynamic and generic mechanism of maximum volume per node. 
- Primary contact (assignee): gnufied
- Responsible SIGs: sig-storage
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/2051
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) @saad-ali @jsafrane 
- Approver (likely from SIG/area to which feature belongs): @saad-ali @childsb 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.11
  - Beta release target (x.y) 1.12
  - Stable release target (x.y)
",open,False,2018-03-29 15:20:46,2019-01-16 16:17:21
enhancements,apelisse,https://github.com/kubernetes/enhancements/issues/555,https://api.github.com/repos/kubernetes/enhancements/issues/555,Server-side Apply,"# Feature Description
- One-line feature description (can be used as a release note): Move ""apply"" and declarative object management from `kubectl` to the `apiserver` in order to fix many of the existing bugs that we can't fix today. Also use that opportunity to add ""field ownership"".
- Primary contact (assignee): @apelisse @lavalamp 
- Responsible SIGs: sig-api-machinery sig-cli (wg-apply was created for that purpose). 
- Design proposal link (community repo): https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/0006-apply.md
- Link to e2e and/or unit tests: 
  - Unit-tests:
    - https://github.com/kubernetes-sigs/structured-merge-diff/blob/master/typed/merge_test.go
    - https://github.com/kubernetes-sigs/structured-merge-diff/blob/master/typed/deduced_test.go
    - https://github.com/kubernetes-sigs/structured-merge-diff/blob/master/typed/symdiff_test.go
    - https://github.com/kubernetes-sigs/structured-merge-diff/blob/master/typed/toset_test.go
    - https://github.com/kubernetes-sigs/structured-merge-diff/blob/master/typed/validate_test.go
    - https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiserver/pkg/endpoints/handlers/fieldmanager/fieldmanager_test.go
  - Integration tests:
    - https://github.com/kubernetes/kubernetes/blob/master/test/cmd/apply.sh
    - https://github.com/kubernetes/kubernetes/blob/master/test/integration/apiserver/apply/apply_test.go
    - https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiextensions-apiserver/test/integration/apply_test.go
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @lavalamp @pwittrock @erictune 
- Approver (likely from SIG/area to which feature belongs): @bgrant0607 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.14
  - Beta release target (x.y) 1.15
  - Stable release target (x.y) TBD
",open,False,2018-04-06 17:38:47,2019-03-06 21:42:12
enhancements,gnufied,https://github.com/kubernetes/enhancements/issues/556,https://api.github.com/repos/kubernetes/enhancements/issues/556,Add resizing support to CSI volumes,"# Feature Description
- Add resizing support for CSI volumes
- Primary contact (assignee): @gnufied
- Responsible SIGs: sig-storage
- Design proposal link (community repo): #780
- Link to e2e and/or unit tests:
- Reviewer(s) -  @jsafrane @saad-ali 
- Approver (likely from SIG/area to which feature belongs): @jsafrane @saad-ali 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.12
  - Beta release target (x.y) 1.13
  - Stable release target (x.y) 1.14

",open,False,2018-04-12 02:16:57,2019-03-05 03:16:30
enhancements,verult,https://github.com/kubernetes/enhancements/issues/557,https://api.github.com/repos/kubernetes/enhancements/issues/557,Kubernetes CSI topology support,"# Feature Description
- One-line feature description (can be used as a release note): Kubernetes CSI topology support
- Primary contact (assignee): @verult @vladimirvivien 
- Responsible SIGs: sig-storage
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/2034
- Link to e2e and/or unit tests:
- Reviewer(s): @msau42 @saad-ali 
- Approver (likely from SIG/area to which feature belongs): @saad-ali 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.12
  - Beta release target (x.y) 1.14
  - Stable release target (x.y) 1.15
",open,False,2018-04-12 22:42:24,2019-02-28 02:13:07
enhancements,verult,https://github.com/kubernetes/enhancements/issues/558,https://api.github.com/repos/kubernetes/enhancements/issues/558,GCE PD topology support,"# Feature Description
- One-line feature description (can be used as a release note): GCE PD topology support
- Primary contact (assignee): @msau42 
- Responsible SIGs: sig-storage
- Design proposal link (community repo):
- Link to e2e and/or unit tests:
- Reviewer(s): @saad-ali @verult
- Approver (likely from SIG/area to which feature belongs): @saad-ali 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.12
  - Beta release target (x.y) 1.13
  - Stable release target (x.y) 1.14
",closed,False,2018-04-12 23:06:16,2018-10-18 00:12:46
enhancements,kevtaylor,https://github.com/kubernetes/enhancements/issues/559,https://api.github.com/repos/kubernetes/enhancements/issues/559,Provide environment variables expansion in sub path mount,"# Feature Description
- One-line feature description (can be used as a release note): Provide environment variables expansion in sub path mount
- Primary contact (assignee): @kevtaylor
- Responsible SIGs: kubernetes/sig-storage
- Design proposal link (community repo):
 kubernetes/kubernetes#48677 
- Link to e2e and/or unit tests:
https://github.com/kubernetes/kubernetes/pull/49388
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @msau42 @jsafrane
- Approver (likely from SIG/area to which feature belongs): @msau42
- Feature target (which target equals to which milestone):
  - Alpha release target (1.11)
  - Beta release target (1.12)
  - Stable release target (1.13)
",open,False,2018-04-13 21:43:32,2019-03-01 17:16:59
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/560,https://api.github.com/repos/kubernetes/enhancements/issues/560,Remove tombstoned Release folders,"Per the tombstone notice:
> This file is a placeholder to preserve links. Please remove after 3 months or the release of kubernetes 1.10, whichever comes first.

I'm removing these files as k8s 1.10 has been released.

Historical Release information can be found here: https://git.k8s.io/sig-release/releases
",closed,True,2018-04-16 19:39:27,2018-04-18 17:30:01
enhancements,lichuqiang,https://github.com/kubernetes/enhancements/issues/561,https://api.github.com/repos/kubernetes/enhancements/issues/561,Topology aware dynamic provisioning,"# Feature Description
- One-line feature description (can be used as a release note): Topology aware dynamic provisioning
- Primary contact (assignee): @msau42 @lichuqiang
- Responsible SIGs: sig-storage
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1857
- Link to e2e and/or unit tests:
- Reviewer(s): @msau42 @jsafrane 
- Approver (likely from SIG/area to which feature belongs): @jsafrane @saad-ali 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.11
  - Beta release target (x.y) 1.12
  - Stable release target (x.y) 1.13
",closed,False,2018-04-17 01:18:09,2018-10-18 15:08:43
enhancements,lichuqiang,https://github.com/kubernetes/enhancements/issues/562,https://api.github.com/repos/kubernetes/enhancements/issues/562,Local storage dynamic provisioning,"# Feature Description
- One-line feature description (can be used as a release note): Local storage dynamic provisioning
- Primary contact (assignee): @lichuqiang @msau42 
- Responsible SIGs: sig-storage
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1914
- Link to e2e and/or unit tests:
- Reviewer(s): @msau42 @jsafrane 
- Approver (likely from SIG/area to which feature belongs): @msau42 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.12
  - Beta release target (x.y) 1.13
  - Stable release target (x.y) 1.14
",closed,False,2018-04-17 01:21:15,2019-03-08 08:29:23
enhancements,leblancd,https://github.com/kubernetes/enhancements/issues/563,https://api.github.com/repos/kubernetes/enhancements/issues/563,Add IPv4/IPv6 dual-stack support,"# Feature Description
- One-line feature description (can be used as a release note):
IPv4/IPv6 dual-stack support and awareness for Kubernetes pods, nodes, and services
- Primary contact (assignee): @leblancd
- Responsible SIGs: sig-network
- Design proposal link (community repo): [Add IPv4/IPv6 dual stack KEP](https://github.com/kubernetes/community/pull/2254)
- Link to e2e and/or unit tests: TBD
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @thockin @dcbw @luxas
- Approver (likely from SIG/area to which feature belongs): @thockin
- Feature target (which target equals to which milestone):
  - Alpha release target 1.11
  - Beta release target 1.13
  - Stable release target 1.14

Corresponding kubernetes/kubernetes Issue: https://github.com/kubernetes/kubernetes/issues/62822",open,False,2018-04-18 22:33:18,2019-02-28 15:39:08
enhancements,bsalamat,https://github.com/kubernetes/enhancements/issues/564,https://api.github.com/repos/kubernetes/enhancements/issues/564,Add pod priority and preemption,"# Feature Description
- One-line feature description (can be used as a release note): Pod priority and preemption enables Kubernetes scheduler to schedule more important Pods first and when cluster is out of resources, it removes less important pods to create room for more important ones. The importance is specified by priority.
- Primary contact (assignee): @bsalamat
- Responsible SIGs: scheduling
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/scheduling/pod-preemption.md
- Link to e2e and/or unit tests: https://github.com/kubernetes/kubernetes/blob/master/test/integration/scheduler/preemption_test.go
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @k82cn @davidopp 
- Approver (likely from SIG/area to which feature belongs): @k82cn 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.8
  - Beta release target (x.y) 1.11
  - Stable release target (x.y) 1.14

/stage beta
/sig scheduling
/kind feature",closed,False,2018-04-24 00:07:24,2019-03-26 17:19:32
enhancements,vladimirvivien,https://github.com/kubernetes/enhancements/issues/565,https://api.github.com/repos/kubernetes/enhancements/issues/565,CSI Block storage support,"# Feature Description
- One-line feature description (can be used as a release note):
  * Support for raw block storage in CSI
- Primary contact (assignee): @bswartz
- Responsible SIGs: sig-storage
- Reviewer(s): @saad-ali @jsafrane @vladimirvivien
- Approvers (likely from SIG/area to which feature belongs): @saad-ali @jsafrane 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.11
  - Beta release target (x.y) 1.13
  - Stable release target (x.y) 1.14
",open,False,2018-04-27 08:31:03,2019-03-19 05:44:49
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/566,https://api.github.com/repos/kubernetes/enhancements/issues/566,Switch default DNS plugin to CoreDNS,"# Feature Description
- One-line feature description (can be used as a release note): Switch default DNS plugin to CoreDNS 
- Primary contact (assignee): @johnbelamaric
- Responsible SIGs: sig-network, sig-cluster-lifecycle
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1100
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @bowei @thockin 
- Approver (likely from SIG/area to which feature belongs): @thockin 
- Feature target (which target equals to which milestone):
  - Stable release target: 1.12

xref: #427

/kind feature
/sig cluster-lifecycle
/sig network
/assign @johnbelamaric",closed,False,2018-05-07 21:27:10,2018-12-04 13:24:36
enhancements,msau42,https://github.com/kubernetes/enhancements/issues/567,https://api.github.com/repos/kubernetes/enhancements/issues/567,AWS EBS topology support,"One-line feature description (can be used as a release note): AWS EBS topology support
Primary contact (assignee): @ddebroy
Responsible SIGs: sig-storage
Design proposal link (community repo):
Link to e2e and/or unit tests:
Reviewer(s): @gnufied @jsafrane 
Approver (likely from SIG/area to which feature belongs): @gnufied @jsafrane 
Feature target (which target equals to which milestone):
Alpha release target (x.y) 1.11
Beta release target (x.y) 1.12
Stable release target (x.y) 1.13",closed,False,2018-05-08 17:15:30,2018-10-18 00:04:35
enhancements,NickrenREN,https://github.com/kubernetes/enhancements/issues/568,https://api.github.com/repos/kubernetes/enhancements/issues/568,PV health monitor,"# Feature Description
- One-line feature description (can be used as a release note): mark the PVs if the underlying volumes are unhealthy to avoid data loss
- Primary contact (assignee): @NickrenREN
- Responsible SIGs: @kubernetes/sig-storage-feature-requests
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1484
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@msau42 
@gnufied 
- Approver (likely from SIG/area to which feature belongs):
@saad-ali 
@jsafrane 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) TBD
  - Beta release target (x.y) TBD
  - Stable release target (x.y) TBD
",closed,False,2018-05-14 08:54:03,2019-03-07 18:16:56
enhancements,jessfraz,https://github.com/kubernetes/enhancements/issues/569,https://api.github.com/repos/kubernetes/enhancements/issues/569,Create a SECURITY_CONTACTS file.,"As per the email sent to kubernetes-dev[1], please create a SECURITY_CONTACTS
file.

The template for the file can be found in the kubernetes-template repository[2].
A description for the file is in the steering-committee docs[3], you might need
to search that page for ""Security Contacts"".

Please feel free to ping me on the PR when you make it, otherwise I will see when
you close this issue. :)

Thanks so much, let me know if you have any questions.

(This issue was generated from a tool, apologies for any weirdness.)

[1] https://groups.google.com/forum/#!topic/kubernetes-dev/codeiIoQ6QE
[2] https://github.com/kubernetes/kubernetes-template-project/blob/master/SECURITY_CONTACTS
[3] https://github.com/kubernetes/community/blob/master/committee-steering/governance/sig-governance-template-short.md
",closed,False,2018-05-24 14:36:46,2018-06-01 14:40:59
enhancements,idvoretskyi,https://github.com/kubernetes/enhancements/pull/570,https://api.github.com/repos/kubernetes/enhancements/issues/570, SECURITY_CONTACTS added,Fixing https://github.com/kubernetes/features/issues/569,closed,True,2018-06-01 12:34:15,2018-06-01 12:57:58
enhancements,nikhita,https://github.com/kubernetes/enhancements/issues/571,https://api.github.com/repos/kubernetes/enhancements/issues/571,Subresources for Custom Resources,"# Feature Description
- One-line feature description (can be used as a release note): Support for Subresources for Custom Resources.
- Primary contact (assignee): @sttts, @nikhita 
- Responsible SIGs: SIG API Machinery
- Design proposal link (community repo):
    - https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/customresources-subresources.md
- Link to e2e and/or unit tests:
    - https://github.com/kubernetes/kubernetes/blob/master/staging/src/k8s.io/apiextensions-apiserver/test/integration/subresources_test.go
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
    - @sttts 
    - @deads2k 
    - @lavalamp 
    - @liggitt 
- Approver (likely from SIG/area to which feature belongs):
    - @sttts 
    - @deads2k 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.10)
  - Beta release target (1.11)
  - Stable release target (TBD)

---
Originally a part of the main features issue for CRDs: https://github.com/kubernetes/features/issues/95
**Design Proposal PR**: https://github.com/kubernetes/community/pull/913
**Implementation PR (alpha)**: https://github.com/kubernetes/kubernetes/pull/55168
**Docs PR (alpha)**: https://github.com/kubernetes/website/pull/7439
**Implementation PR (beta)**: https://github.com/kubernetes/kubernetes/pull/63598
**Docs PR (beta)**:  https://github.com/kubernetes/website/pull/8519

/kind feature
/sig api-machinery
/stage beta
",open,False,2018-06-01 12:54:10,2019-01-16 15:53:05
enhancements,tpepper,https://github.com/kubernetes/enhancements/pull/572,https://api.github.com/repos/kubernetes/enhancements/issues/572,Clarify features repo issue is required,"A recent exception request linked to a k/k issue covering the feature
and triggered discussion on whether that is sufficient.  This change
clarifies that a feature issue in the feature repo is expected.

Signed-off-by: Tim Pepper <tpepper@vmware.com>",closed,True,2018-06-05 16:32:03,2018-06-05 16:34:56
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/573,https://api.github.com/repos/kubernetes/enhancements/issues/573,Add `features-maintainers` section to OWNERS files,"This adds an additional section to `OWNERS[_ALIASES]` for the Release Team Features Lead.
Mostly for giving me magic powers to approve PRs in `k/features` for the next (1.12) release.

/assign @idvoretskyi @calebamiles  ",closed,True,2018-06-09 21:15:51,2018-06-11 16:01:29
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/574,https://api.github.com/repos/kubernetes/enhancements/issues/574,Fake issue to test bot automation,Active issue for testing bot automations.,closed,False,2018-06-15 04:44:02,2018-10-28 14:22:48
enhancements,nikhita,https://github.com/kubernetes/enhancements/issues/575,https://api.github.com/repos/kubernetes/enhancements/issues/575,Defaulting and Pruning for Custom Resources,"# Feature Description
- One-line feature description (can be used as a release note): Support for defaulting and pruning for Custom Resources.
- Primary contact (assignee): @sttts 
- Responsible SIGs: SIG API Machinery
- KEP: https://github.com/kubernetes/enhancements/pull/709
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
     - @deads2k 
     - @liggitt 
     - @mbohlool 
     - @lavalamp 
- Approver (likely from SIG/area to which feature belongs):
     - @deads2k 
     - @lavalamp 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.15)
  - Beta release target (TBD)
  - Stable release target (TBD)",open,False,2018-06-21 11:09:47,2019-03-01 17:48:21
enhancements,apelisse,https://github.com/kubernetes/enhancements/issues/576,https://api.github.com/repos/kubernetes/enhancements/issues/576,APIServer DryRun,"# Feature Description
- One-line feature description (can be used as a release note):
Add apiserver ""dry-run"" query-parameter so that requests can be validated and ""processed"" without actually being persisted.
- Primary contact (assignee): @apelisse
- Responsible SIGs: @kubernetes/sig-api-machinery-feature-requests 
- Design proposal link (community repo)/KEP: [0015-dry-run.md](https://github.com/kubernetes/community/blob/master/keps/sig-api-machinery/0015-dry-run.md)
- Link to e2e and/or unit tests: None yet
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @deads2k @lavalamp 
- Approver (likely from SIG/area to which feature belongs): @lavalamp 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.12
  - Beta release target (x.y): 1.13
  - Stable release target (x.y): TBD
",open,False,2018-06-21 16:27:23,2019-01-15 23:10:36
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/577,https://api.github.com/repos/kubernetes/enhancements/issues/577,Update OWNERS,"* update links to OWNERS docs
* update OWNERS  …
  * remove release-team-leads
  * add `sig/pm` label
* update OWNERS_ALIASES  …
  * remove `patch-release-managers`
  * remove `release-team-leads`

/cc @idvoretskyi ",closed,True,2018-06-25 04:58:23,2018-06-25 12:37:03
enhancements,juanvallejo,https://github.com/kubernetes/enhancements/issues/578,https://api.github.com/repos/kubernetes/enhancements/issues/578,Server-side printing in kubectl,"# Feature Description
- One-line feature description (can be used as a release note): kubectl get should get columns back from the server, not the client, and be able to handle this type of server response under all use-cases.
- Primary contact (assignee): juanvallejo
- Responsible SIGs: sig-cli
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/api-machinery/server-get.md
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: pwittrock, soltysh
- Approver (likely from SIG/area to which feature belongs): pwittrock, soltysh
- Feature target (which target equals to which milestone): 1.12
  - Stable release target (x.y) 1.12

Continuation of the work proposed in https://github.com/kubernetes/features/issues/515. This feature focuses on updating the client to completely support Table responses (containing human-readable output) from the server. This would involve updating the kubectl sorter, as well as the custom-columns printer.",closed,False,2018-06-26 14:38:54,2018-10-25 15:27:08
enhancements,juanvallejo,https://github.com/kubernetes/enhancements/issues/579,https://api.github.com/repos/kubernetes/enhancements/issues/579,Updated Plugin mechanism for kubectl,"# Feature Description
- One-line feature description (can be used as a release note): kubectl should support extensions adding new commands as well as overriding specific subcommands (at any depth). 
- Primary contact (assignee): juanvallejo, soltysh
- Responsible SIGs: sig-cli
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/2437
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: pwittrock, soltysh
- Approver (likely from SIG/area to which feature belongs): pwittrock, soltysh
- Feature target (which target equals to which milestone): 1.12
  - Alpha release target (x.y) 1.12
  - Beta release target (x.y) 1.13
  - Stable release target (x.y) 1.14
",closed,False,2018-06-26 14:45:26,2019-03-26 09:41:25
enhancements,freehan,https://github.com/kubernetes/enhancements/issues/580,https://api.github.com/repos/kubernetes/enhancements/issues/580,Pod Readiness Gates,"# Feature Description
- One-line feature description (can be used as a release note): Introduce extension point for external feedback on pod readiness.
- Primary contact (assignee): freehan@
- Responsible SIGs: sig-network
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/keps/sig-network/0007-pod-ready%2B%2B.md
- Link to e2e and/or unit tests: 
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @yujuhong @thockin 
- Approver (likely from SIG/area to which feature belongs): @thockin
- Feature target (which target equals to which milestone): 
  - Alpha release target (1.11) 
  - Beta release target (1.12)
  - Stable release target (1.14)
",open,False,2018-06-26 21:06:12,2019-03-28 12:03:05
enhancements,juanvallejo,https://github.com/kubernetes/enhancements/issues/581,https://api.github.com/repos/kubernetes/enhancements/issues/581,Separate repo for generic cli utils,"# Feature Description
- One-line feature description (can be used as a release note): The package `pkg/kubectl/genericclioptions` should be split out from kubectl into a separate repo in order to allow use of it by plugin authors and third-party clients.
- Primary contact (assignee): juanvallejo
- Responsible SIGs: sig-cli
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: pwittrock, soltysh
- Approver (likely from SIG/area to which feature belongs): pwittrock, soltysh
- Feature target (which target equals to which milestone): 1.12
  - Beta release target (x.y): 1.12

As part of ongoing work that focuses on containing all significant kubectl command utilities in a single package (`pkg/kubectl/genericclioptions`), this package should be split out into its own repo in order to allow use by third-party clients as well as plugins. The self-contained `genericclioptions` package currently provides all of the major components (kubeconfig parsing, obtaining a config and a REST client, printing, etc.) needed to build a generic kubectl command. Making this package into a separate repository would allow external plugins to behave and be structured as a typical kubectl command, particularly in terms of communicating with the api server.

cc @soltysh ",open,False,2018-06-26 21:56:40,2019-01-17 10:51:19
enhancements,kacole2,https://github.com/kubernetes/enhancements/pull/582,https://api.github.com/repos/kubernetes/enhancements/issues/582,Fixed Broken Links,"Fixed a broken link pointing to an old version of SIG Product Management to PM SIG. Adjusted the links pointing to the blogs after the new blog cutover so there is no redirection page

/assign @justaugustus

Signed-off-by: Kendrick Coleman <kendrickc@vmware.com>",closed,True,2018-06-29 13:37:05,2018-07-02 14:58:58
enhancements,k82cn,https://github.com/kubernetes/enhancements/issues/583,https://api.github.com/repos/kubernetes/enhancements/issues/583,Coscheduling,"# Feature Description

- One-line feature description (can be used as a release note): Coscheduling makes sure a group of pods are scheduled together: all pod get resources, or none gets resource.
- Primary contact (assignee): @k82cn
- Responsible SIGs: sig-scheduling
- Design proposal link (community repo): kubernetes/enhancements#639
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @vishh , @bsalamat 
- Approver (likely from SIG/area to which feature belongs): @vishh , @bsalamat 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 
  - Beta release target (x.y)
  - Stable release target (x.y)

/stage alpha
/sig scheduling
/kind feature",open,False,2018-07-03 01:51:25,2019-01-17 01:24:51
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/584,https://api.github.com/repos/kubernetes/enhancements/issues/584,Remove references to `kubernetes-pm`,"/sig pm
/assign @idvoretskyi 

Signed-off-by: Stephen Augustus <foo@agst.us>",closed,True,2018-07-09 08:47:38,2018-07-09 16:42:19
enhancements,tallclair,https://github.com/kubernetes/enhancements/issues/585,https://api.github.com/repos/kubernetes/enhancements/issues/585,RuntimeClass,"# Enhancement Description
- One-line feature description (can be used as a release note): `RuntimeClass` is a new cluster-scoped resource that surfaces container runtime properties to the control plane.
- Kubernetes Enhancement Proposal: https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/runtime-class.md
- Primary contact (assignee): @tallclair
- Responsible SIGs: sig-node
- Feature target (which target equals to which milestone):
  - Alpha release target: 1.12
  - Beta release target: 1.14
  - Stable release target: x.y

---
EDIT(spiffxp): I edited this to match the [current enhancement tracking issue template](https://github.com/kubernetes/enhancements/blob/master/ISSUE_TEMPLATE.md), the following entries or content are not part of the template

- Reviewer(s): @dchen1107 @yujuhong @derekwaynecarr 
- Approver(s): @dchen1107 @yujuhong @derekwaynecarr",open,False,2018-07-10 18:55:28,2019-03-27 00:33:20
enhancements,feiskyer,https://github.com/kubernetes/enhancements/issues/586,https://api.github.com/repos/kubernetes/enhancements/issues/586,Azure Availability Zones ,"# Feature Description
- One-line feature description (can be used as a release note): Add support of Azure Availability Zones.
- Primary contact (assignee): @feiskyer
- Responsible SIGs: sig-azure
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/2364
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @khenidak
- Approver (likely from SIG/area to which feature belongs): @brendandburns 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.12)
  - Beta release target (1.13)
  - Stable release target (x.y)
",open,False,2018-07-11 13:43:40,2019-01-23 18:21:06
enhancements,vikaschoudhary16,https://github.com/kubernetes/enhancements/issues/587,https://api.github.com/repos/kubernetes/enhancements/issues/587,Resource Quota API,"# Feature Description
Support for the ability to configure the quota system to identify specific resources that are limited by default. A limited resource means its consumption is denied absent a covering quota. This is in contrast to the current behavior where consumption is unlimited absent a covering quota. Intended use case is to allow operators to restrict consumption of high-cost resources by default.

- Primary contact (assignee): @vikaschoudhary16
- Responsible SIGs: 
/sig api-machinery
/sig node

- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@deads2k @eparis @smarterclayton @derekwaynecarr @sjenning 
- Approver (likely from SIG/area to which feature belongs):
@deads2k @eparis @smarterclayton 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
    1.12
  - Stable release target (x.y)


/milestone 1.12",open,False,2018-07-12 12:21:59,2019-01-18 10:20:46
enhancements,aojea,https://github.com/kubernetes/enhancements/issues/588,https://api.github.com/repos/kubernetes/enhancements/issues/588,Missing CONTRIBUTING.md file,"All K8s subrepositories should have a CONTRIBUTING.md file, which at the minimum should point to https://github.com/kubernetes/community/blob/master/contributors/guide/README.md. Care should be taken that all information is in sync with the contributor guide.

Subrepositories may also have contributing guidelines specific to that repository. They should be explicitly documented and explained in the CONTRIBUTING.md

Ref:  https://github.com/kubernetes/community/issues/1832",closed,False,2018-07-16 09:23:28,2018-07-31 12:39:38
enhancements,mtaufen,https://github.com/kubernetes/enhancements/issues/589,https://api.github.com/repos/kubernetes/enhancements/issues/589,Move frequent Kubelet heartbeats to Lease API,"# Feature Description
- One-line feature description (can be used as a release note): **Kubelet creates and periodically renews a Lease on the node; node lifecycle controller treats this lease as a health signal**
- Primary contact (assignee): @wangzhen127
- Responsible SIGs: **sig-node**
- Design proposal link (community repo): [KEP-0009](https://github.com/kubernetes/community/blob/master/keps/sig-node/0009-node-heartbeat.md)
- Link to e2e and/or unit tests: **(coming soon)**
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @yujuhong @dchen1107 @wojtek-t 
- Approver (likely from SIG/area to which feature belongs): @yujuhong 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.13)
    - [x] coordination API group merged to beta
      - https://github.com/kubernetes/kubernetes/pull/64246
    - [x] Kubelet creates and periodically renews Lease
      - https://github.com/kubernetes/kubernetes/pull/66257
    - [x] Node controller treats Kubelet leases as a health signal
    - [x] Re-tune Kubelet Node status updates as described in [KEP-0009](https://github.com/kubernetes/community/blob/master/keps/sig-node/0009-node-heartbeat.md)
",open,False,2018-07-17 16:02:59,2019-02-25 14:44:25
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/590,https://api.github.com/repos/kubernetes/enhancements/issues/590,Update repo permissions on k/enhancements,"~Feature~ Enhancement maintainers often use GitHub settings like `Milestone` to determine which ~Features~ Enhancements require triage.

It's important that these settings are only touched by ~Feature~ Enhancements Maintainers to ensure better signal during the release process.

As such, I'd like to do the following:
- Remove write access for:
  - `kubernetes-maintainers`
  - `kubernetes-release-managers`
- Give write access on k/enhancements to `kubernetes-milestone-maintainers`
- Expand on the definition of [milestone maintainers](https://github.com/kubernetes/sig-release/tree/master/release-team#milestone-maintainers) 
- Prune `enhancements-maintainers` to only include the SIG PM maintainers (@calebamiles, @idvoretskyi, @jdumars, @justaugustus) - https://github.com/kubernetes/org/pull/498

I suggest `kubernetes-milestone-maintainers` for write access because that team:
- is exactly the list of contributors that would need milestone privileges
- likely also the list of people that would need to edit enhancement issue content
- is actively pruned across release cycles 

Previous idea:
```
- remove the `kubernetes-maintainers` and `kubernetes-release-managers` from having direct write access to k/features~
- update the membership of `features-maintainers` to only include the following:
  - SIG PM leadership
  - Product Management subproject leadership
  - Program Management subproject leadership
  - current Release Team Feature Lead & Shadows
- ensure the following are Maintainers of the `features-maintainers` GitHub group:
  - SIG PM leadership
  - Product Management subproject leadership
  - Program Management subproject leadership

Here's the current list to simplify the updates:
- Maintainers: @apsinha @idvoretskyi @calebamiles @justaugustus @dustinkirkland @jdumars
- Members: @kacole2 @robertsandoval @rajendar38

We'll go with lazy consensus for this on Wednesday, 7/25.
```

Google Group thread: https://groups.google.com/forum/#!topic/kubernetes-pm/JFthLm0q-uA

cc: @kubernetes/kubernetes-maintainers @kubernetes/kubernetes-release-managers @kubernetes/features-maintainers 

/assign
/assign @cblecker
/sig pm",closed,False,2018-07-17 23:58:06,2019-02-23 20:47:02
enhancements,jbartosik,https://github.com/kubernetes/enhancements/issues/591,https://api.github.com/repos/kubernetes/enhancements/issues/591,Horizontal Pod Autoscaler to reach proper size faster,"One-line feature description (can be used as a release note):
```
Improvements allowing Horizontal Pod Autoscaler to reach proper size faster
```
- Primary contact (assignee): @jbartosik
- Responsible SIGs: @kubernetes/sig-autoscaling
- Design proposal link (community repo): 
- Link to e2e and/or unit tests: 
  - Unit tests: https://github.com/kubernetes/kubernetes/tree/master/pkg/controller/podautoscaler, https://github.com/kubernetes/kubernetes/blob/master/test/e2e/autoscaling/custom_metrics_stackdriver_autoscaling.go
- Reviewer(s): @DirectXMan12 @mwielgus @MaciekPytel
- Approver (likely from SIG/area to which feature belongs): @DirectXMan12 @mwielgus
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.12
  - Beta release target (x.y) 1.12
  - Stable release target (x.y)
",closed,False,2018-07-19 15:42:29,2018-10-22 15:06:05
enhancements,janetkuo,https://github.com/kubernetes/enhancements/issues/592,https://api.github.com/repos/kubernetes/enhancements/issues/592,TTL after finish,"# Feature Description
- One-line feature description (can be used as a release note): Introduce a TTL controller to clean up Jobs and Pods after they finish.
- Primary contact (assignee): @janetkuo 
- Responsible SIGs: sig-apps 
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/keps/sig-apps/0026-ttl-after-finish.md (https://goo.gl/YxtxTi, https://github.com/kubernetes/community/pull/2552)
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @kow3ns @enisoc @tnozicka 
- Approver (likely from SIG/area to which feature belongs): @kow3ns 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.12)
  - Beta release target (x.y)
  - Stable release target (x.y)
",closed,False,2018-07-23 21:23:47,2019-03-15 14:55:11
enhancements,bsalamat,https://github.com/kubernetes/enhancements/issues/593,https://api.github.com/repos/kubernetes/enhancements/issues/593,Scheduler checks feasibility and scores a subset of all cluster nodes,"# Feature Description
- One-line feature description (can be used as a release note): Scheduler checks feasibility and scores a subset of all cluster nodes.
- Primary contact (assignee): @bsalamat
- Responsible SIGs: scheduling
- Design proposal link (community repo): kubernetes/kubernetes/issues/66627
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs): @k82cn 
- Feature target (which target equals to which milestone):1.12
  - Alpha release target (x.y)1.12
  - Beta release target (x.y)1.13
  - Stable release target (x.y) 1.14
",open,False,2018-07-25 21:20:29,2019-01-30 09:54:06
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/594,https://api.github.com/repos/kubernetes/enhancements/issues/594,CSI Cluster Registration Mechanism,"# Feature Description
- One-line feature description (can be used as a release note): Introduce the ability for a CSI driver (optionally) to register it self with the Kubernetes API to:
  * Make it easy for end users to discover CSI drivers installed on their cluster.
  * Allow CSI drivers to customize how Kubernetes interacts with them (e.g. skip attach operation, etc.)
- Primary contact (assignee): @saad-ali, @jsafrane 
- Responsible SIGs: /sig storage
- Design proposal link (community repo): New: https://github.com/kubernetes/features/issues/594 Old: [Google doc](https://docs.google.com/document/d/11JP309cLjMgLWCVSGDQeQxAJwlXrC5C7wrcNPLk-xqg/edit#heading=h.7nc2z5ph22rt)
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @thockin 
- Approver (likely from SIG/area to which feature belongs): @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.12
  - Beta release target (x.y): 1.14
  - Stable release target (x.y): 1.15
",closed,False,2018-07-27 23:58:25,2019-02-05 05:56:22
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/595,https://api.github.com/repos/kubernetes/enhancements/issues/595,Kubelet Device Plugin Registration,"# Feature Description
- One-line feature description (can be used as a release note): Kubelet should have a standard way to discover local plugins (CSI, GPU, etc.).
- Primary contact (assignee): @vikaschoudhary16 
- Responsible SIGs: @kubernetes/sig-node-feature-requests @kubernetes/sig-storage-feature-requests
- Design proposal link (community repo): 
  - https://github.com/kubernetes/community/pull/2369
  - [Google Doc](https://docs.google.com/document/d/1dtHpGY-gPe9sY7zzMGnm8Ywo09zJfNH-E1KEALFV39s/edit#heading=h.7fe6spexljh6)
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @RenaudWasTaken @vishh @jiayingz 
- Approver (likely from SIG/area to which feature belongs): @dchen1107 @saad-ali
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.11
  - Beta release target (x.y): 1.12
  - Stable release target (x.y): 1.13
",closed,False,2018-07-28 00:04:47,2019-01-15 17:26:59
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/596,https://api.github.com/repos/kubernetes/enhancements/issues/596,CSI Inline Volume Support,"# Feature Description
- One-line feature description (can be used as a release note): CSI volumes can only be referenced via PV/PVC today. This works well for remote persistent volumes. However, we would like CSI to be used to create local ephemeral volumes (e.g. volumes use to inject identity information in to a pod), and these types of volumes should be able to be referred to directly in pod spec (without PV/PVC).
- Primary contact (assignee): @jsafrane 
- Responsible SIGs: @kubernetes/sig-storage-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/2273
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @childsb 
- Approver (likely from SIG/area to which feature belongs): @saad-ali
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.13
  - Beta release target (x.y): 1.14
  - Stable release target (x.y): 1.15
- PRs
  - [ ] https://github.com/kubernetes/kubernetes/pull/74086",open,False,2018-07-28 00:12:49,2019-03-11 21:16:57
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/597,https://api.github.com/repos/kubernetes/enhancements/issues/597,Max storage capacity per plugin per node,"# Feature Description
- One-line feature description (can be used as a release note): Some storage systems (e.g. GCE PD) limit the maximum aggregate capacity of remote storage that can be attached to a given node. Today the scheduler takes in to account max volumes per node. It should also account for max aggregate storage capacity per node.
- Primary contact (assignee): @gnufied 
- Responsible SIGs: @kubernetes/sig-storage-feature-requests 
- Design proposal link (community repo): TODO
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @childsb 
- Approver (likely from SIG/area to which feature belongs): @saad-ali
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.13?
  - Beta release target (x.y): ?
  - Stable release target (x.y): ?
",open,False,2018-07-28 00:18:59,2019-01-16 16:20:53
enhancements,deads2k,https://github.com/kubernetes/enhancements/issues/598,https://api.github.com/repos/kubernetes/enhancements/issues/598,Webhook Conversion for Custom Resources,"# Feature Description
- One-line feature description (can be used as a release note): Support for webhook conversion for Custom Resources.
- Primary contact (assignee): @mbohlool  
- Responsible SIGs: SIG API Machinery
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/2420
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
     - @nikhita  
     - @sttts  
     - @lavalamp 
- Approver (likely from SIG/area to which feature belongs):
     - @deads2k 
     - @lavalamp 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.13)
  - Beta release target (TBD)
  - Stable release target (TBD)",open,False,2018-07-30 12:17:26,2019-03-19 15:10:00
enhancements,yastij,https://github.com/kubernetes/enhancements/issues/599,https://api.github.com/repos/kubernetes/enhancements/issues/599,Introduce SchedulingPolicy,"
- One-line feature description (can be used as a release note): introduce SchedulingPolicy to enable cluster admin to constrain scheduling-related features.
- Primary contact (assignee): @yastij
- Responsible SIGs: sig-scheduling sig-auth
- Design proposal link (community repo): kubernetes/community#1937
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @bsalamat @tallclair 
- Approver (likely from SIG/area to which feature belongs): @bsalamat @tallclair 
- Feature target (which target equals to which milestone):
  - Alpha release target 1.12
  - Beta release target (x.y)
  - Stable release target (x.y)
",open,False,2018-07-30 18:59:41,2019-01-16 16:21:12
enhancements,pbarker,https://github.com/kubernetes/enhancements/issues/600,https://api.github.com/repos/kubernetes/enhancements/issues/600,Dynamic Audit Configuration,"# Feature Description
- One-line feature description (can be used as a release note):
Dynamic configuration of Audit facilities in the apiserver
- Primary contact (assignee):
@pbarker
- Responsible SIGs:
sig-auth
- Design proposal link (community repo):
https://github.com/kubernetes/community/pull/2188
https://github.com/kubernetes/community/pull/2407
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@tallclair 
@liggitt 
@yliaog
@caesarxuchao
- Approver (likely from SIG/area to which feature belongs):
@tallclair 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
   1.13
  - Beta release target (x.y)
   1.14
  - Stable release target (x.y)
   1.15

API PRs:
- [ ] https://github.com/kubernetes/kubernetes/pull/73981
- [ ] https://github.com/kubernetes/kubernetes/pull/73547",open,False,2018-07-30 19:35:50,2019-03-12 21:57:36
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/601,https://api.github.com/repos/kubernetes/enhancements/issues/601,Add explanations for GitHub labels used in `k/features`,"/assign
/sig pm",closed,False,2018-07-31 01:49:39,2018-08-06 10:55:45
enhancements,RA489,https://github.com/kubernetes/enhancements/pull/602,https://api.github.com/repos/kubernetes/enhancements/issues/602,Create CONTRIBUTING.md,"Adding Contribution Guideline.
fixes #588 ",closed,True,2018-07-31 06:22:40,2018-07-31 12:39:38
enhancements,jsafrane,https://github.com/kubernetes/enhancements/issues/603,https://api.github.com/repos/kubernetes/enhancements/issues/603,Pass Pod information in CSI calls,"# Feature Description
- One-line feature description (can be used as a release note): CSI driver may opt-in to receive information about Pod that requested a volume in NodePublish request.

- Primary contact (assignee): @jsafrane
- Responsible SIGs: @kubernetes/sig-storage-feature-requests @kubernetes/sig-node-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/2439
- Link to e2e and/or unit tests: TBD
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @gnufied @msau42 
- Approver (likely from SIG/area to which feature belongs): @saad-ali 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.12
  - Beta release target (x.y): 1.13
  - Stable release target (x.y): 1.14

API PRs:
- [ ] https://github.com/kubernetes/kubernetes/pull/73883

Tagging sig-node since it will probably need a new gRPC API in kubelet. ~~Proposal will follow soon.~~ Proposal has been created.",open,False,2018-07-31 09:10:51,2019-03-05 22:15:51
enhancements,feiskyer,https://github.com/kubernetes/enhancements/issues/604,https://api.github.com/repos/kubernetes/enhancements/issues/604,[Azure] Cross resource group nodes,"# Feature Description
- One-line feature description (can be used as a release note): Add support of cross resource group nodes.
- Primary contact (assignee): @feiskyer
- Responsible SIGs: sig-azure
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/2479
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @khenidak
- Approver (likely from SIG/area to which feature belongs): @brendandburns
- Feature target (which target equals to which milestone):
  - Alpha release target (1.12)
  - Beta release target (1.13)
  - Stable release target (x.y)
",open,False,2018-07-31 13:04:36,2019-01-29 23:07:42
enhancements,AdamDang,https://github.com/kubernetes/enhancements/pull/605,https://api.github.com/repos/kubernetes/enhancements/issues/605,Typo fix: Spreadhsheets->Spreadsheets,"Fix a typo:
 Spreadhsheets->Spreadsheets",closed,True,2018-07-31 13:38:26,2018-07-31 13:50:39
enhancements,dashpole,https://github.com/kubernetes/enhancements/issues/606,https://api.github.com/repos/kubernetes/enhancements/issues/606,Support 3rd party device monitoring plugins,"# Feature Description

1. As a cluster admin, I want container-level metrics for devices provided by device plugins.
2. As a device vendor, I want to be able to provide device-specific metrics without contributing to core kubernetes.

- One-line feature description (can be used as a release note): Support 3rd party device monitoring plugins
- Primary contact (assignee): @dashpole
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/2454
- Link to e2e and/or unit tests: Coming Soon
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @vikaschoudhary16 @jiayingz   
- Approver (likely from SIG/area to which feature belongs): @derekwaynecarr 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.13)
  - Beta release target (1.14)
  - Stable release target (TBD)

/kind feature 
/sig node
/stage alpha",open,False,2018-07-31 18:43:52,2019-01-24 17:15:54
enhancements,jiayingz,https://github.com/kubernetes/enhancements/issues/607,https://api.github.com/repos/kubernetes/enhancements/issues/607,New Resource API Proposal,"# Feature Description
- One-line feature description (can be used as a release note): A new resource API model to support non-native compute resources with rich set of resource properties.
- Primary contact (assignee): @vikaschoudhary16 @jiayingz
- Responsible SIGs: @kubernetes/sig-node-feature-requests @kubernetes/sig-scheduling-feature-requests 
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/2265
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @derekwaynecarr @dchen1107 @bsalamat @vishh @MaciekPytel
- Approver (likely from SIG/area to which feature belongs): @derekwaynecarr @dchen1107 @bsalamat @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.12)
  - Beta release target (TBD)
  - Stable release target (TBD)
",closed,False,2018-07-31 19:25:24,2019-03-07 18:16:54
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/issues/608,https://api.github.com/repos/kubernetes/enhancements/issues/608,Efficient Node Heartbeats,"# Feature Description
- One-line feature description (can be used as a release note): Efficient Node Heartbeats
- Primary contact (assignee): @mtaufen 
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/keps/sig-node/0009-node-heartbeat.md
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: 
- Approver (likely from SIG/area to which feature belongs): @dchen1107 @derekwaynecarr
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.12
  - Beta release target (x.y)
  - Stable release target (x.y)
",closed,False,2018-07-31 22:31:07,2018-08-03 23:35:18
enhancements,DirectXMan12,https://github.com/kubernetes/enhancements/issues/609,https://api.github.com/repos/kubernetes/enhancements/issues/609,Cluster Autoscaler / Cluster API Integration,"# Feature Description
- One-line feature description (can be used as a release note): Convert the cluster autoscaler to make use of the cluster API for controlling node creation/deletion.
- Primary contact (assignee): @enxebre
- Responsible SIGs: SIG Autoscaling
- Design proposal link (community repo):
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  - @mwielgus 
  - @MaciekPytel 
  - [TBD Cluster API]
- Approver (likely from SIG/area to which feature belongs):
  - @mwielgus 
  - [TBD Cluster API]
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)
",open,False,2018-08-01 01:13:09,2019-04-04 10:57:03
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/610,https://api.github.com/repos/kubernetes/enhancements/issues/610,Add descriptions for Features labels,"Closes: #601 

/sig pm
/assign @idvoretskyi 

Signed-off-by: Stephen Augustus <foo@agst.us>",closed,True,2018-08-04 15:56:26,2018-08-06 10:55:45
enhancements,krmayankk,https://github.com/kubernetes/enhancements/issues/611,https://api.github.com/repos/kubernetes/enhancements/issues/611,Consider IP Address Availability on a given Node when considering a Node for Pod scheduling,"# Feature Description
- One-line feature description (can be used as a release note):  Consider IP Address Availability on a given node when considering a Node for Pod Scheduling.
- Primary contact (assignee): @krmayankk
- Responsible SIGs: @kubernetes/sig-scheduling-misc 
- Design proposal link (community repo):
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs): @bsalamat 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

Lots of enterprises have a limited set of IP's per node for the Pod IP address allocation. Currently kubernetes scheduler schedules a pods on a given node even when there are no more Pod IP's available on that node and gets stuck in ContainerCreating.  This means the Pod cannot run, even when there might be other nodes in the cluster with available IP addresses. IPv4 address is like a core resource(similar to cpu and memory) needed for any Kubernetes Pods  without which a pod cannot be scheduled. 

Currently the only mechanism available to resolve this issue, is to use the concept of Extended Resources. Cluster operators need to do extra work like create extended resource, write admission controller to inject this extended resource request in every pod that is not using hostNetwork, and label each node with the capacity for this extended resource. This seems like a lot of work for a very common 
 and core use case in running k8s clusters. Extended resources make more sense for uncommon use cases like allocating GPU ,etc.

If we can populate the node with the capacity of the ips available on that node(probably the kubelet would do that), then one of the predicates in scheduler could account for that assuming yes the pod being shceduled is not hostNetwork and yes it needs only one ip( are there cases we are aware that a pod needs more than one ip) ?

Including scheduling, network node folks to help comment on the feasibility of this approach and help alleviate a common pain point for cluster operators.",open,False,2018-08-15 07:18:40,2019-01-07 06:17:20
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/612,https://api.github.com/repos/kubernetes/enhancements/issues/612,Quota by Priority,"# Feature Description
- One-line feature description (can be used as a release note):
- Primary contact (assignee): @bsalamat 
- Responsible SIGs: @kubernetes/sig-scheduling-feature-requests, @kubernetes/sig-node-feature-requests 
- Design proposal link (community repo):
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @davidopp, @derekwaynecarr, @erictune, @k82cn, @timothysc, @wojtek-t @dchen1107 
- Approver (likely from SIG/area to which feature belongs): @davidopp  
- Feature target (which target equals to which milestone):
  - Alpha release target: ???
  - Beta release target: 1.12
  - Stable release target: ???

rel: https://github.com/kubernetes/features/issues/268
/sig scheduling node
/kind feature
/stage beta
/milestone v1.12
/assign @bsalamat ",open,False,2018-08-22 02:49:04,2019-01-17 16:04:03
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/613,https://api.github.com/repos/kubernetes/enhancements/issues/613,Migrate KEPs and Design Proposals from k/community,"DO NOT MERGE. 
Trying some git gymnastics to move KEPs and design proposals away from `k/community`...

/sig pm
/sig architecture
/assign
/hold

rel: https://github.com/kubernetes/community/issues/2565",closed,True,2018-09-03 06:24:54,2018-09-29 22:29:41
enhancements,janosi,https://github.com/kubernetes/enhancements/issues/614,https://api.github.com/repos/kubernetes/enhancements/issues/614,"SCTP support for Services, Pod, Endpoint, and NetworkPolicy","# Feature Description
- One-line feature description (can be used as a release note): SCTP is now supported as additional protocol (alpha) alongside TCP and UDP in Pod, Service, Endpoint, and NetworkPolicy.  
- Primary contact (assignee): @janosi 
- Responsible SIGs: sig-network
- Design proposal link (community repo): [SCTP support](https://github.com/kubernetes/community/blob/master/keps/sig-network/0015-20180614-SCTP-support.md), https://github.com/kubernetes/community/pull/2276
- Link to e2e and/or unit tests: 
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which feature belongs): @thockin 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.12
  - Beta release target (x.y)
  - Stable release target (x.y)
",open,False,2018-09-11 20:30:02,2019-01-06 19:40:22
enhancements,saad-ali,https://github.com/kubernetes/enhancements/issues/615,https://api.github.com/repos/kubernetes/enhancements/issues/615,CRD Installation Mechanism,"# Feature Description
- One-line feature description (can be used as a release note):

How should CRDs that Kubernetes depends be deployed?

Kubernetes is moving towards a model where new API objects are not added to the core API but are instead defined and installed as CRDs. When core controllers depend on a CRD, some component in core must install and manage the CRD. Having the controller install it or using addon manager both have drawbacks. This issue tracks coming up with a solution that will address

Feature info:
- Primary contact (assignee): TBD
- Responsible SIGs: /sig api-machinery ? /sig cluster-lifecycle ?
- Design proposal link (community repo): TODO
- Link to e2e and/or unit tests: TODO
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @saad-ali
- Approver (likely from SIG/area to which feature belongs): @lavalamp @liggitt 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.15?
  - Beta release target (x.y): 1.16?
  - Stable release target (x.y): 1.17?
",open,False,2018-09-12 22:44:17,2019-01-31 22:55:38
enhancements,kacole2,https://github.com/kubernetes/enhancements/pull/616,https://api.github.com/repos/kubernetes/enhancements/issues/616,Add kacole2 to Owner Aliases,I will be leading the 1.13 and trying to get ahead of any possible changes I will need to make,closed,True,2018-09-24 16:47:13,2018-09-26 12:42:16
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/617,https://api.github.com/repos/kubernetes/enhancements/issues/617,[Umbrella] KEP Implementation,"# Kubernetes Enhancement Proposal Implementation
- One-line feature description (can be used as a release note): A standardized process for describing / presenting / delivering enhancements to the Kubernetes ecosystem
- Primary contact (assignee): @justaugustus 
- Responsible SIGs:
/sig pm architecture
- KEP link(s): [KEP-1a](https://github.com/kubernetes/enhancements/blob/master/keps/0001a-meta-kep-implementation.md), [KEP-1](https://github.com/kubernetes/enhancements/blob/master/keps/0001-kubernetes-enhancement-proposal-process.md)
- Link to e2e and/or unit tests: N/A
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @jdumars @calebamiles 
- Approver (likely from SIG/area to which feature belongs): @bgrant0607 @jbeda 
- Feature target (which target equals to which milestone): 
  - Beta release target (1.13)
  - Stable release target (1.14 / 1.15 - tentative)

/kind feature
/milestone v1.13

---
## Project tracking board
https://github.com/orgs/kubernetes/projects/5

---
## High-level implementation plan
#### Define

- Refine existing KEP documentation
- Define KEP [DACI]
- Glossary of terms (enhancement, KEP, feature, etc.)
- KEP Workflow
  - KEP states
  - Entry / exit criteria

#### Organize

- Move KEPs from flat-files to a directory structure:
- Move existing KEPs into [k/features]
- Create a `kind/kep` label for [k/community] and [k/features]
  - For `k/community`:
    - Label incoming KEPs as `kind/kep`
    - Enable searches of `org:kubernetes label:kind/kep`, so we can identify active PRs to `k/community` and reroute the PR authors to `k/enhancements` (depending on the state)
  - For `k/enhancements` (fka `k/features`):
    - Label incoming KEPs as `kind/kep`
    - Classify KEP submissions / tracking issues as `kind/kep`, differentiating them from `kind/feature`
- Move existing design proposals into [k/features]
- Move existing architectural documents into [k/features] (process TBD)
- Deprecate design proposals
- Rename [k/features] to [k/enhancements]
- Create tombstones / redirects to [k/enhancements]
- Prevent new KEPs and design proposals from landing in [k/community]
- Remove `kind/kep` from [k/community] once KEP migration is complete
- Correlate existing Feature tracking issues with links to KEPs
- Fix [KEP numbering races] by using the GitHub issue number of the KEP tracking issue
- Coordination of existing KEPs to use new directory structure (with SIG PM guidance per SIG)

#### Visibility and Automation

- Create tooling to:
  - Generate KEP directories and associated metadata
  - Present KEPs, through some easy to use mechanism e.g., https://enhancements.k8s.io. This would be a redesigned version of https://contributor.kubernetes.io/keps/. We envision this site / repo having at least three directories:
    - `keps/` (KEPs)
    - `design-proposals/` (historical design proposals from https://git.k8s.io/community/contributors/design-proposals)
    - `arch[itecture]|design/` (design principles of Kubernetes, derived from reorganizing https://git.k8s.io/community/contributors/devel, mentioned [here](https://github.com/kubernetes/community/issues/2565#issuecomment-419185591))
  - Enable project tracking across SIGs

",open,False,2018-09-28 23:17:55,2019-01-25 06:16:10
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/618,https://api.github.com/repos/kubernetes/enhancements/issues/618,Correlate existing Feature tracking issues with links to KEPs,"Work item for https://github.com/kubernetes/features/issues/617

/kind feature
/sig pm
/milestone v1.13
/assign
/assign @kacole2 ",open,False,2018-09-29 13:44:37,2019-01-20 08:19:51
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/619,https://api.github.com/repos/kubernetes/enhancements/issues/619,Create tooling to generate / manage KEPs,"Create tooling to:
- generate KEP directories and associated metadata
- graduate KEPs through approval phases
- convert existing KEPs from flat-files to directory structure (https://github.com/kubernetes/community/issues/2725)

Work item for https://github.com/kubernetes/features/issues/617

/kind feature
/sig pm
/milestone v1.13
/assign @calebamiles ",open,False,2018-09-29 13:50:31,2019-01-30 04:49:53
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/620,https://api.github.com/repos/kubernetes/enhancements/issues/620,Update features / enhancements repo documentation,"Include:
- glossary
- issue templates
  - enhancements
    - standard
    - API changes
- PR templates
- exceptions process update

Work item for https://github.com/kubernetes/features/issues/617

/kind feature
/sig pm
/milestone v1.13
/assign",open,False,2018-09-29 13:56:25,2019-02-16 00:54:11
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/621,https://api.github.com/repos/kubernetes/enhancements/issues/621,Create a project tracking board for KEP Improvements,"Work item for https://github.com/kubernetes/features/issues/617

/kind feature
/sig pm
/milestone v1.13
/assign",closed,False,2018-09-29 13:57:53,2018-09-29 14:11:30
enhancements,spiffxp,https://github.com/kubernetes/enhancements/issues/622,https://api.github.com/repos/kubernetes/enhancements/issues/622,Drop support for etcd2,"# Feature Description
- One-line feature description (can be used as a release note): Drop support for etcd2
- Primary contact (assignee): @spiffxp
- Responsible SIGs:
  - SIG API Machinery
  - SIG Release
  - SIG Testing
- Design proposal link (community repo): n/a
- Link to e2e and/or unit tests: n/a
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
  - TBD
- Approver (likely from SIG/area to which feature belongs):
  - SIG API Machinery: @lavalamp (or whomever they would like to delegate to)
  - SIG Release: @AishSundar (or whomever they would like to delegate to)
  - SIG Testing: @spiffxp 
- Feature target (which target equals to which milestone):
  - Stable release target (1.13)

Context:
- Deprecation announcement in CHANGELOG-1.10.md: https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.10.md#deprecations
- kubernetes-dev thread: https://groups.google.com/d/msg/kubernetes-dev/DoOl77xjpDA/uZFun65oBwAJ
- https://github.com/kubernetes/features/issues/44 - support for etcd3 was added in 1.5, made stable in 1.6
- https://github.com/kubernetes/kubernetes/issues/44156 - umbrella issue to deprecate/drop etcd2 (note, I feel this is now out of date, and our deprecation has not been nearly as comprehensive, we will just be dropping etcd2 support)
- https://github.com/kubernetes/test-infra/issues/7602 - move all testing jobs to etcd3

I'm filing this as a feature issue to raise visibility, but this is intended to more or less be a turning of the crank that was set in motion last year.

/sig api-machinery
/sig release
/sig testing",closed,False,2018-10-01 18:19:38,2019-01-14 18:55:21
enhancements,bsalamat,https://github.com/kubernetes/enhancements/issues/623,https://api.github.com/repos/kubernetes/enhancements/issues/623,Add inter-pod affinity to more than one pod,"# Feature Description
- One-line feature description (can be used as a release note): Currently, a single pod must satisfy all inter-pod affinity terms of an incoming pod before the incoming pod is considered schedulable. We want to expand this to support multiple pods matching multiple affinity terms of an incoming pod.
- Primary contact (assignee): @bsalamat, @Huang-Wei 
- Responsible SIGs: scheduling
- Design proposal link (community repo): kubernetes/kubernetes/issues/68701
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @bsalamat @k82cn 
- Approver (likely from SIG/area to which feature belongs): @bsalamat
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y) 1.13
  - Stable release target (x.y)
",open,False,2018-10-01 21:02:38,2019-01-30 09:59:07
enhancements,bsalamat,https://github.com/kubernetes/enhancements/issues/624,https://api.github.com/repos/kubernetes/enhancements/issues/624,Scheduling Framework,"# Feature Description
- One-line feature description (can be used as a release note): Implement a scheduling framework where many of the existing and future features of the existing scheduler can be written as plug-ins for the scheduler.
- Primary contact (assignee): @bsalamat
- Responsible SIGs: scheduling
- Design proposal link (KEP): https://github.com/kubernetes/enhancements/blob/master/keps/sig-scheduling/20180409-scheduling-framework.md
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @k82cn @misterikkit 
- Approver (likely from SIG/area to which feature belongs): @k82cn @bsalamat 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

This is a long term project and requires many changes to the existing scheduler. In order to ensure quality and reliability of the scheduler, we plan to build the features gradually and in steps. The first extension points are targeted for 1.13. We will add more extension points in the future releases. We will prioritize the addition of the extension points based on need for them.

/sig scheduling",open,False,2018-10-01 23:02:48,2019-04-02 23:44:39
enhancements,davidz627,https://github.com/kubernetes/enhancements/issues/625,https://api.github.com/repos/kubernetes/enhancements/issues/625,In-tree storage plugin to CSI Driver Migration,"# Feature Description
- One-line feature description (can be used as a release note): Migrate the internals of the in-tree plugins to call out to CSI Plugins while maintaining the original API
- Primary contact (assignee): @davidz627
- Responsible SIGs: sig-storage
- Design proposal link (community repo): https://github.com/kubernetes/community/blob/master/contributors/design-proposals/storage/csi-migration.md
- PRs:
  - [x] https://github.com/kubernetes/kubernetes/pull/69830
- Link to e2e and/or unit tests: None yet
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @saad-ali @jsafrane 
- Approver (likely from SIG/area to which feature belongs): @saad-ali 
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y): 1.13
  - Beta release target (x.y): 1.15
  - Stable release target (x.y): 1.16
",open,False,2018-10-10 22:01:40,2019-03-05 19:18:18
enhancements,fanzhangio,https://github.com/kubernetes/enhancements/issues/626,https://api.github.com/repos/kubernetes/enhancements/issues/626,Implements Raw Block Volume Support for in-tree vSphere plugin,"# Feature Description
- One-line feature description (can be used as a release note):
   - vSphereVolume implements Raw Block Volume Support 
- Primary contact (assignee): @fanzhangio 
- Responsible SIGs: sig-storage
- Reviewer(s): @vladimirvivien @divyenpatel 
- Approver (likely from SIG/area to which feature belongs): @saad-ali @divyenpatel
- Feature target (which target equals to which milestone):
  - Alpha release target (x.y) 1.13
  - Beta release target (x.y) 1.13
  - Stable release target (x.y) 1.13
",open,False,2018-10-12 21:46:24,2019-01-30 09:57:55
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/627,https://api.github.com/repos/kubernetes/enhancements/issues/627,Tag open k/community KEP / KEP-related issues / PRs as kind/kep,"Now that `kind/kep` exists, I'd like to follow through with what was mentioned [here](https://github.com/kubernetes/test-infra/pull/9437#issuecomment-422263046):
> In the interim, prior to everything getting moved over, `kind/kep` would be overloaded...
> 
> For `k/community`:
> 
> * Label incoming KEPs as `kind/kep`
> * Enable `org:kubernetes label:kind/kep`, so we can identify active PRs to `k/community` and reroute the PR authors to `k/keps` (depending on the state)

Work item for https://github.com/kubernetes/features/issues/617

/kind feature
/sig pm
/milestone v1.13
/assign",closed,False,2018-10-13 02:45:20,2018-10-16 04:58:26
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/628,https://api.github.com/repos/kubernetes/enhancements/issues/628,Remove kind/kep label from k/community,"Once KEPs are moved to `k/enhancements`, I'd like to follow through with what was mentioned [here](https://github.com/kubernetes/test-infra/pull/9437#issuecomment-422263046):
> Once everything is migrated to `k/keps`, we'd obviate the need for having the label in `k/community` and it would be removed.

Work item for https://github.com/kubernetes/features/issues/617

/kind feature
/sig pm
/milestone v1.13
/assign",closed,False,2018-10-13 02:48:36,2019-02-21 17:51:10
enhancements,d-nishi,https://github.com/kubernetes/enhancements/issues/629,https://api.github.com/repos/kubernetes/enhancements/issues/629,aws-alb-ingress-controller alpha,"# Feature Description
- One-line feature description (can be used as a release note): The AWS ALB Ingress Controller satisfies Kubernetes ingress resources by provisioning Application Load Balancers.
- Primary contact (assignee): @M00nF1sh 
- Responsible SIGs: SIG-AWS
- Design proposal link (community repo): https://github.com/M00nF1sh/community/blob/master/contributors/design-proposals/aws/alb_ingress_controller.md
- Link to e2e and/or unit tests: unit tests (https://github.com/kubernetes-sigs/aws-alb-ingress-controller/blob/master/.travis.yml#L27) and more to come; e2e to come
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @bigkraig @justinsb 
- Approver (likely from SIG/area to which feature belongs): @d-nishi 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.13)
  - Beta release target (1.14)
  - Stable release target (1.15)
",open,False,2018-10-24 00:02:34,2019-02-23 00:27:22
enhancements,d-nishi,https://github.com/kubernetes/enhancements/issues/630,https://api.github.com/repos/kubernetes/enhancements/issues/630,aws-ebs-csi-driver alpha,"# Feature Description
- One-line feature description (can be used as a release note): The Amazon Elastic Block Store CSI Driver provides a CSI interface used by Container Orchestrators to manage the lifecycle of EBS volumes.
- Primary contact (assignee): @leakingtapan 
- Responsible SIGs: SIG AWS
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/2840
- Link to e2e and/or unit tests: 
https://github.com/kubernetes-sigs/aws-ebs-csi-driver/blob/master/pkg/cloud/cloud_test.go
https://github.com/kubernetes-sigs/aws-ebs-csi-driver/blob/master/pkg/cloud/metadata_test.go
https://github.com/kubernetes-sigs/aws-ebs-csi-driver/blob/master/pkg/cloud/devicemanager/allocator_test.go
https://github.com/kubernetes-sigs/aws-ebs-csi-driver/blob/master/pkg/cloud/devicemanager/manager_test.go
https://github.com/kubernetes-sigs/aws-ebs-csi-driver/blob/master/pkg/driver/controller_test.go
https://github.com/kubernetes-sigs/aws-ebs-csi-driver/blob/master/tests/sanity/sanity_test.go
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @bertinatto @gnufied 
- Approver (likely from SIG/area to which feature belongs): @jsafrane 
- Feature target (which target equals to which milestone):
  - Alpha release target (1.13)
  - Beta release target (1.14)
  - Stable release target (1.15)
",open,False,2018-10-24 00:10:05,2019-02-21 18:09:23
enhancements,d-nishi,https://github.com/kubernetes/enhancements/issues/631,https://api.github.com/repos/kubernetes/enhancements/issues/631,external ccm cloudprovider-aws alpha,"# Feature Description
- One-line feature description (can be used as a release note): The external cloud controller manager aws would be responsible for running controllers whose function is specific to aws cloud provider functionality.
- Primary contact (assignee): @mcrute 
- Responsible SIGs: SIG AWS
- Design proposal link (community repo): KEP - https://github.com/kubernetes/community/blob/master/keps/sig-cloud-provider/0002-cloud-controller-manager.md 
- Link to e2e and/or unit tests: will update later.
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @justinsb @andrewsykim 
- Approver (likely from SIG/area to which feature belongs): @d-nishi  
- Feature target (which target equals to which milestone):
  - Alpha release target (1.13)
  - Beta release target (1.14)
  - Stable release target (1.15)
",open,False,2018-10-24 00:26:45,2019-02-11 19:12:01
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/632,https://api.github.com/repos/kubernetes/enhancements/issues/632,Tombstone EXCEPTIONS.md,"This PR redirects contributors to `k/sig-release` for up-to-date information on the exceptions process.
It should only merge after https://github.com/kubernetes/sig-release/pull/349 does.

/hold 
/assign @idvoretskyi @kacole2 

Signed-off-by: Stephen Augustus <foo@agst.us>",closed,True,2018-10-24 06:40:04,2018-10-26 02:22:39
enhancements,Liujingfang1,https://github.com/kubernetes/enhancements/issues/633,https://api.github.com/repos/kubernetes/enhancements/issues/633,integrate Kustomize into kubectl,"# Feature Description
- One-line feature description (can be used as a release note): add kustomize subcommand into kubectl
- Primary contact (assignee): Liujingfang1, monopole
- Responsible SIGs: sig-cli
- Design proposal link (community repo): [Kustomize subcommand integration](https://github.com/kubernetes/enhancements/blob/master/keps/sig-cli/kustomize-subcommand-integration.md)
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: pwittrock, soltysh
- Approver (likely from SIG/area to which feature belongs): pwittrock, soltysh
- Feature target (which target equals to which milestone): 1.14
  - Stable release target (x.y) 1.14

Kustomize has been developed in its own repo [kubernetes-sigs/kustomize](https://github.com/kubernetes-sigs/kustomize) for the past few months. It has been iterated for several versions and is in good shape now. This feature is to enable kustomize in kubectl.",closed,False,2018-10-24 23:17:30,2019-03-19 05:51:34
enhancements,ameukam,https://github.com/kubernetes/enhancements/pull/634,https://api.github.com/repos/kubernetes/enhancements/issues/634,Rename Features to Enhancements,"Related #620. 

/kind feature
/sig pm
/assign @justaugustus 
",closed,True,2018-10-26 13:19:23,2018-10-31 04:05:31
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/635,https://api.github.com/repos/kubernetes/enhancements/issues/635,Encourage per SIG blockades of design proposal directories,"Related: https://github.com/kubernetes/test-infra/pull/9434

Instead of a wholesale blockade, we'd like to instead have individual SIGs collate their design proposals and convert them to KEPs, as appropriate.",open,False,2018-10-27 10:19:24,2019-01-20 08:19:20
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/636,https://api.github.com/repos/kubernetes/enhancements/issues/636,Update OWNERS,"- Add reviewers
- Update SIG Release Leads

Signed-off-by: Stephen Augustus <foo@agst.us>

/assign @idvoretskyi @calebamiles ",closed,True,2018-11-04 07:14:22,2018-11-04 18:54:09
enhancements,ravisantoshgudimetla,https://github.com/kubernetes/enhancements/issues/637,https://api.github.com/repos/kubernetes/enhancements/issues/637,Promote ResourceLimits to beta,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
- Primary contact (assignee):
- Responsible SIGs: /sig scheduling
- Design proposal link (community repo):
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which enhancement belongs): @bsalamat @Huang-Wei 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_",open,False,2018-11-08 18:55:32,2019-03-08 20:41:22
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/638,https://api.github.com/repos/kubernetes/enhancements/issues/638,The Great KEP Migration of 2018,"**It's happening!**
rel: https://github.com/kubernetes/community/issues/2730
/sig pm architecture",closed,True,2018-12-01 06:59:57,2018-12-01 07:06:42
enhancements,k82cn,https://github.com/kubernetes/enhancements/pull/639,https://api.github.com/repos/kubernetes/enhancements/issues/639,Coscheduilng.,"Signed-off-by: Da K. Ma <klaus1982.cn@gmail.com>

Moved https://github.com/kubernetes/community/pull/2337 to k/enhancements.

/cc @bsalamat, @vishh, @mindprince, @jlewi

/cc @kubernetes/sig-scheduling-feature-requests",closed,True,2018-12-02 14:27:34,2019-01-08 05:30:32
enhancements,m1093782566,https://github.com/kubernetes/enhancements/pull/640,https://api.github.com/repos/kubernetes/enhancements/issues/640,KEP: Topology-aware service routing,"Moved kubernetes/community#2846 to k/enhancements.

/assign @thockin @johnbelamaric 

cc @wojtek-t @chrisohaver @justinsb ",closed,True,2018-12-03 09:13:52,2019-03-22 17:18:36
enhancements,hex108,https://github.com/kubernetes/enhancements/pull/641,https://api.github.com/repos/kubernetes/enhancements/issues/641,Add KEP for Cron Horizontal Pod Autoscaler(CronHPA),"We have implemented a CronHPA which enables us to scale workloads(those support `scale` subresource) periodically using crontab scheme.

Use cases
A lot of game player will play games from Friday evening to Sunday evening. It will be better to provide a better experience for players if game servers(pods) could be scaled to a lager size at Friday evening and scaled to normal size at Sunday evening. And that's what game server admins do every week.

Some other customers also do similar things because their products' usage also have peaks and valleys periodically. CronHPA is for their requirement.

CronHPA example:
```
---
apiVersion: gs.io/v1alpha1
kind: CronHPA
metadata:
  name: example-cron-hpa
spec:
  scaleTargetRef:
    apiVersion: extensions/v1beta1
    kind: Deployment
    name: demo-deployment
  crons:
    - schedule: ""0 23 * * 5""  // Set replicas to 60 every Friday 23:00
      targetReplicas: 60
    - schedule: ""0 23 * * 7""  // Set replicas to 30 every Sunday 23:00
      targetReplicas: 30

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: demo-deployment
  labels:
    app: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
```",closed,True,2018-12-03 14:31:41,2019-01-29 00:52:38
enhancements,j-griffith,https://github.com/kubernetes/enhancements/pull/642,https://api.github.com/repos/kubernetes/enhancements/issues/642,Propose KEP to extend allowed DataSource entries to include PVC,"Propose extending DataSource field in PVCs to allow existing in
namespace PVCs (Clones) and external data population CRDs (Populators).",open,True,2018-12-03 17:44:42,2019-03-24 12:01:45
enhancements,j-griffith,https://github.com/kubernetes/enhancements/pull/643,https://api.github.com/repos/kubernetes/enhancements/issues/643,Propose KEP to transfer PVC between namespaces,"Propose enhancement to enable the transfer a PVC from one namespace to
another within the cluster.",open,True,2018-12-03 17:49:26,2019-02-21 21:09:24
enhancements,leakingtapan,https://github.com/kubernetes/enhancements/pull/644,https://api.github.com/repos/kubernetes/enhancements/issues/644,Update AWS EBS CSI Driver KEP,,closed,True,2018-12-03 19:57:01,2018-12-11 23:50:20
enhancements,easeway,https://github.com/kubernetes/enhancements/pull/645,https://api.github.com/repos/kubernetes/enhancements/issues/645,KEP: Namespace Initializer,"Migrated from https://github.com/kubernetes/community/pull/2543:

I submit this proposal because the generic Initializer is planned to be deprecated, however the mechanism is very useful for container resources like namespace, and I hope we can keep this mechanism, at least specialize it and move it towards beta/GA. If the generic Initializer will move on to beta/GA, I will abandon this proposal.

Note: this proposal requires changes in core Kubernetes, and adding a new field in stable API object.
",closed,True,2018-12-04 00:24:40,2019-02-12 01:02:53
enhancements,RobertKrawitz,https://github.com/kubernetes/enhancements/pull/646,https://api.github.com/repos/kubernetes/enhancements/issues/646,Updates from SIG-Node meeting 20181204,This covers discussion of implementation strategy at the aforementioned meeting.,open,True,2018-12-04 20:30:52,2019-02-06 19:02:34
enhancements,dashpole,https://github.com/kubernetes/enhancements/issues/647,https://api.github.com/repos/kubernetes/enhancements/issues/647,Add Tracing Support for Kubernetes Objects,"# Enhancement Description
- One-line enhancement description: Add the ability for kubernetes controllers to trace progression towards desired state for objects.
- Primary contact: dashpole
- Responsible SIGs: Sig-Instrumentation
- Design proposal link: https://github.com/kubernetes/enhancements/pull/650
- Link to e2e and/or unit tests: Coming soon
- Reviewers - recommend having 2+ reviewers agreed to review. Reviewers from multiple companies preferred: @Random-Liu (for kubelet changes).  @bogdandrutu ([OpenCensus](https://opencensus.io/) maintainer)
- Approver (likely from SIG/area to which enhancement belongs): @brancz 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.14)
  - Beta release target (TBD)
  - Stable release target (TBD)

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_",open,False,2018-12-05 03:05:02,2019-01-30 09:53:16
enhancements,aojea,https://github.com/kubernetes/enhancements/pull/648,https://api.github.com/repos/kubernetes/enhancements/issues/648,Add IPv4/IPv6 dual stack KEP,"Moving https://github.com/kubernetes/community/pull/2254 from k/community to k/enhancements
cc: @leblancd",closed,True,2018-12-05 12:02:07,2019-02-21 23:21:06
enhancements,nikhita,https://github.com/kubernetes/enhancements/pull/649,https://api.github.com/repos/kubernetes/enhancements/issues/649,README: document keps and the stage label,"Just a quick update to the current state of the repo.

/assign @justaugustus ",closed,True,2018-12-07 15:06:13,2018-12-19 11:58:10
enhancements,Monkeyanator,https://github.com/kubernetes/enhancements/pull/650,https://api.github.com/repos/kubernetes/enhancements/issues/650,Propose KEP: Leveraging Distributed Tracing to Understand Kubernetes Object Lifecycles,"[Relevant enhancement feature issue](https://github.com/kubernetes/enhancements/issues/647)

",open,True,2018-12-07 21:44:21,2019-02-21 18:08:36
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/651,https://api.github.com/repos/kubernetes/enhancements/issues/651,Update OWNERS,"This basically came about from me realizing I was getting too many review requests for SIG KEPs.
This tightens up the KEP OWNERS so we don't inherit from the root OWNERS (and some other things).

- Update approvers
- Copy in OWNERS_ALIASES from k/community
- Add `pm-maintainers` alias
- Set `keps/OWNERS` to `no_parent_owners: true`
- Add missing OWNERS to SIG KEP directories

Signed-off-by: Stephen Augustus <foo@agst.us>

/assign @idvoretskyi @calebamiles @jdumars ",closed,True,2018-12-09 14:17:45,2018-12-09 18:19:08
enhancements,maplain,https://github.com/kubernetes/enhancements/pull/652,https://api.github.com/repos/kubernetes/enhancements/issues/652,update outdated link in cloud-provider kep,update cloud-provider interface link from https://github.com/kubernetes/kubernetes/blob/master/pkg/cloudprovider/cloud.go#L31 to  https://github.com/kubernetes/cloud-provider/blob/master/cloud.go#L43,closed,True,2018-12-09 18:58:44,2018-12-10 18:13:45
enhancements,luxas,https://github.com/kubernetes/enhancements/pull/653,https://api.github.com/repos/kubernetes/enhancements/issues/653,Update the k8s.io/component-base KEP,"Follow-up of https://github.com/kubernetes/community/pull/2977
xref: https://github.com/kubernetes/community/pull/2354 https://github.com/kubernetes/community/pull/2515

cc @kubernetes/sig-cluster-lifecycle-pr-reviews @kubernetes/sig-api-machinery-pr-reviews 
/assign @thockin @mtaufen @sttts @jbeda @DirectXMan12 @bgrant0607 ",closed,True,2018-12-10 17:51:19,2018-12-14 23:29:56
enhancements,ehashman,https://github.com/kubernetes/enhancements/pull/654,https://api.github.com/repos/kubernetes/enhancements/issues/654,"keps/sig-instrumentation: Update status of 0031 to ""implementable""","As discussed at the informal SIG meeting today, this KEP's status should be ""implementable"" now that it's been merged. Follow up to https://github.com/kubernetes/community/pull/2909

Also added myself as a coauthor of this KEP for the work I did on the google doc version and removed some non-existent participating SIGs that seemed to have slipped past the first draft :)

/sig instrumentation
/assign @brancz @DirectXMan12 ",closed,True,2018-12-14 05:03:38,2018-12-14 15:53:25
enhancements,brancz,https://github.com/kubernetes/enhancements/pull/655,https://api.github.com/repos/kubernetes/enhancements/issues/655,Add additional metrics guideline violations to metrics overhaul,"While looking into the kubelet API, I noticed the existance of the `/metrics/probes` endpoint, and noticed it violates the instrumentation guidelines in the same way as the cAdvisor labels do. Therefore adding those to the metrics overhaul KEP.

@DirectXMan12 @ehashman @mxinden @piosz @coffeepac @s-urbaniak @metalmatze ",closed,True,2018-12-15 22:38:30,2018-12-20 11:44:52
enhancements,caesarxuchao,https://github.com/kubernetes/enhancements/pull/656,https://api.github.com/repos/kubernetes/enhancements/issues/656,[KEP] Adding ResourceID to the discovery API,"Proposing adding a `resourceID` field to every resource's discovery doc. If two resource endpoints refer the same set of objects, their `resourceID`s are the same. This enables clients to detect if two resource endpoints are referring the same set of objects.

Moved from https://github.com/kubernetes/community/pull/2805.",closed,True,2018-12-17 23:20:09,2019-01-10 19:16:04
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/pull/657,https://api.github.com/repos/kubernetes/enhancements/issues/657,keps/sig-cloud-provider: clean up KEP-0002 and update KEP-0013,Reopening https://github.com/kubernetes/community/pull/2628 with a few updates. Still a work in progress. ,closed,True,2018-12-18 18:52:26,2019-01-28 17:03:01
enhancements,pbarker,https://github.com/kubernetes/enhancements/pull/658,https://api.github.com/repos/kubernetes/enhancements/issues/658,API server authentication to webhooks,Adds proposal for outgoing webhook auth from the apiserver and its aggregates,open,True,2018-12-20 21:23:53,2019-02-21 18:08:30
enhancements,pbarker,https://github.com/kubernetes/enhancements/pull/659,https://api.github.com/repos/kubernetes/enhancements/issues/659,reserves kep number 34 for outgoing webhook auth,reserves kep number 34 for https://github.com/kubernetes/enhancements/pull/658,closed,True,2018-12-20 21:28:39,2018-12-21 00:25:13
enhancements,SidakM,https://github.com/kubernetes/enhancements/pull/660,https://api.github.com/repos/kubernetes/enhancements/issues/660,Add StatefulSet Volume Expansion Kep,"Add Kep for StatefulSet Volume Expansion.
Wrote this up quickly after the discussion here: 
https://github.com/kubernetes/kubernetes/pull/71384

Feature tracking issue: https://github.com/kubernetes/enhancements/issues/661

Let me know if something is missing or if this is the right way to merge this :thinking: ",open,True,2018-12-21 03:21:32,2019-04-03 20:06:45
enhancements,SidakM,https://github.com/kubernetes/enhancements/issues/661,https://api.github.com/repos/kubernetes/enhancements/issues/661,Support Volume Expansion Through StatefulSets,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Allow changes to storage requests in StatefulSets.volumeClaimTemplates to propagate to associated PVCs.
- Primary contact (assignee): @SidakM
- Responsible SIGs: sig-apps
- Design proposal link (community repo): https://github.com/kubernetes/enhancements/pull/660
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @janetkuo @gnufied 
- Approver (likely from SIG/area to which enhancement belongs): 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.14)
  - Beta release target (x.y)
  - Stable release target (x.y)

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_",open,False,2018-12-21 03:29:30,2019-02-05 06:24:28
enhancements,danielqsj,https://github.com/kubernetes/enhancements/pull/662,https://api.github.com/repos/kubernetes/enhancements/issues/662,Add workqueue metrics changes to metrics overhaul,"Already a PR approved to change workqueue metrics to follow the instrumentation guidelines: https://github.com/kubernetes/kubernetes/pull/71300.
So adding those to the metrics overhaul KEP.
@brancz @DirectXMan12 @ehashman @mxinden @piosz @coffeepac @s-urbaniak @metalmatze",closed,True,2018-12-24 08:10:52,2019-01-07 10:37:18
enhancements,wanghanlin,https://github.com/kubernetes/enhancements/pull/663,https://api.github.com/repos/kubernetes/enhancements/issues/663,Rename 0031-datadrivencommands.md to 0032-datadrivencommands.md,,closed,True,2018-12-25 05:44:05,2019-01-15 13:19:23
enhancements,wanghanlin,https://github.com/kubernetes/enhancements/pull/664,https://api.github.com/repos/kubernetes/enhancements/issues/664,Update 0031-kustomize-integration.md,fix markdown,closed,True,2018-12-25 05:50:30,2019-01-15 13:15:42
enhancements,alex-dah,https://github.com/kubernetes/enhancements/pull/665,https://api.github.com/repos/kubernetes/enhancements/issues/665,Fix broken links to sig-architecture,,closed,True,2018-12-27 17:29:07,2018-12-28 09:37:15
enhancements,JeremyWx,https://github.com/kubernetes/enhancements/pull/666,https://api.github.com/repos/kubernetes/enhancements/issues/666,Propse KEP for Group Managed Service Accounts in Windows,0000-20181221-windows-group-managed-service-accounts-for-container-identity,closed,True,2018-12-28 15:03:11,2019-01-18 14:42:00
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/issues/667,https://api.github.com/repos/kubernetes/enhancements/issues/667,Support Out-of-Tree Azure Cloud Provider,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
Support Out-of-Tree Azure Cloud Provider by running the cloud-controller-manager
- Primary contact (assignee):
@lachie83 @justaugustus @khenidak
- Responsible SIGs:
SIG Azure, SIG Cloud Provider
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@justaugustus @khenidak @andrewsykim
- Approver (likely from SIG/area to which enhancement belongs):
@justaugustus @khenidak @andrewsykim
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

Ref https://github.com/kubernetes/enhancements/issues/88 

/sig azure cloud-provider",open,False,2019-01-02 16:00:16,2019-01-30 09:47:42
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/issues/668,https://api.github.com/repos/kubernetes/enhancements/issues/668,Support Out-of-Tree GCE Cloud Provider,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
Support Out-of-Tree GCP Cloud Provider by running the cloud-controller-manager
- Primary contact (assignee):
@cheftako @jagosan 
- Responsible SIGs:
SIG GCP, SIG Cloud Provider
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@cheftako @jagosan @andrewsykim
- Approver (likely from SIG/area to which enhancement belongs):
@cheftako @jagosan @andrewsykim
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

Ref https://github.com/kubernetes/enhancements/issues/88 

/sig gcp cloud-provider",open,False,2019-01-02 16:02:24,2019-01-30 09:36:24
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/issues/669,https://api.github.com/repos/kubernetes/enhancements/issues/669,Support Out-of-Tree OpenStack Cloud Provider,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
Support Out-of-Tree OpenStack Cloud Provider by running the cloud-controller-manager
- Primary contact (assignee):
@dims @hogepodge  
- Responsible SIGs:
SIG OpenStack, SIG Cloud Provider
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@dims @hogepodge @andrewsykim
- Approver (likely from SIG/area to which enhancement belongs):
@dims @hogepodge @andrewsykim
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

Ref https://github.com/kubernetes/enhancements/issues/88 

/sig openstack cloud-provider",open,False,2019-01-02 16:05:26,2019-01-30 09:41:15
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/issues/670,https://api.github.com/repos/kubernetes/enhancements/issues/670,Support Out-of-Tree vSphere Cloud Provider,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
Support Out-of-Tree vSphere Cloud Provider by running the cloud-controller-manager
- Primary contact (assignee):
@frapposelli @cantbewong
- Responsible SIGs:
SIG VMware, SIG Cloud Provider
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@frapposelli @cantbewong @andrewsykim
- Approver (likely from SIG/area to which enhancement belongs):
@frapposelli @cantbewong @andrewsykim
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

Ref https://github.com/kubernetes/enhancements/issues/88 

/sig vmware cloud-provider",open,False,2019-01-02 16:08:03,2019-03-02 01:01:15
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/issues/671,https://api.github.com/repos/kubernetes/enhancements/issues/671,Support Out-of-Tree IBM Cloud Provider,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
Support Out-of-Tree IBM Cloud Provider by running the cloud-controller-manager
- Primary contact (assignee):
@rtheis @spzala
- Responsible SIGs:
SIG IBM, SIG Cloud Provider
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@rtheis @spzala @andrewsykim
- Approver (likely from SIG/area to which enhancement belongs):
@rtheis @spzala @andrewsykim
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

Ref https://github.com/kubernetes/enhancements/issues/88 

/sig ibm-cloud cloud-provider",open,False,2019-01-02 16:10:16,2019-01-30 14:15:49
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/issues/672,https://api.github.com/repos/kubernetes/enhancements/issues/672,Support Out-of-Tree CloudStack Cloud Provider,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
Support Out-of-Tree CloudStack Cloud Provider by running the cloud-controller-manager
- Primary contact (assignee):
@andrewsykim 
- Responsible SIGs:
SIG Cloud Provider
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@andrewsykim 
- Approver (likely from SIG/area to which enhancement belongs):
@andrewsykim 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

Ref https://github.com/kubernetes/enhancements/issues/88 

/sig cloud-provider",open,False,2019-01-02 16:22:34,2019-01-24 21:27:14
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/issues/673,https://api.github.com/repos/kubernetes/enhancements/issues/673,Support Out-of-Tree oVirt Cloud Provider,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
Support Out-of-Tree oVirt Cloud Provider by running the cloud-controller-manager
- Primary contact (assignee):
@andrewsykim 
- Responsible SIGs:
SIG Cloud Provider
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@andrewsykim 
- Approver (likely from SIG/area to which enhancement belongs):
@andrewsykim 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

Ref https://github.com/kubernetes/enhancements/issues/88 

/sig cloud-provider",open,False,2019-01-02 16:23:36,2019-01-30 09:44:41
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/issues/674,https://api.github.com/repos/kubernetes/enhancements/issues/674,Support Out-of-Tree Photon Cloud Provider ,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
Support Out-of-Tree Photon Cloud Provider by running the cloud-controller-manager
- Primary contact (assignee):
@andrewsykim 
- Responsible SIGs:
SIG Cloud Provider
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
@andrewsykim 
- Approver (likely from SIG/area to which enhancement belongs):
@andrewsykim 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

Ref https://github.com/kubernetes/enhancements/issues/88 

/sig cloud-provider",closed,False,2019-01-02 16:24:26,2019-01-16 19:27:11
enhancements,caesarxuchao,https://github.com/kubernetes/enhancements/pull/675,https://api.github.com/repos/kubernetes/enhancements/issues/675,[KEP] Adding StorageVersionHash to the discovery API,"The `StorageVersionHash` helps the [storage version migrator](https://github.com/kubernetes-sigs/kube-storage-version-migrator) to detect when a resource needs migration.

/sig api-machinery
/assign @liggitt @yliaog @deads2k @lavalamp ",closed,True,2019-01-02 21:09:40,2019-01-07 19:01:15
enhancements,benmoss,https://github.com/kubernetes/enhancements/pull/676,https://api.github.com/repos/kubernetes/enhancements/issues/676,Create KEP for Windows Node Support,Adds a KEP covering Windows support and a sig-windows directory for it to live in.,closed,True,2019-01-03 17:29:45,2019-01-23 00:55:45
enhancements,alejandrox1,https://github.com/kubernetes/enhancements/pull/677,https://api.github.com/repos/kubernetes/enhancements/issues/677,Fixed broken links for 0003-cluster-api.md,"/sig cluster-lifecycle

Signed-off-by: Jorge Alarcon Ochoa <alarcj137@gmail.com>",closed,True,2019-01-06 17:36:57,2019-01-08 20:13:44
enhancements,krmayankk,https://github.com/kubernetes/enhancements/pull/678,https://api.github.com/repos/kubernetes/enhancements/issues/678,add initial KEP for maxUnavailable in StatefulSets,/sig apps,closed,True,2019-01-07 07:35:27,2019-03-30 07:49:09
enhancements,danielqsj,https://github.com/kubernetes/enhancements/pull/679,https://api.github.com/repos/kubernetes/enhancements/issues/679,Add more metrics changes to metrics overhaul,"Some PRs are submitted to change apiserver/kubelet/scheduler/proxy metrics to follow the instrumentation guidelines: kubernetes/kubernetes#71300.
So adding those to the metrics overhaul KEP.
@brancz @DirectXMan12 @ehashman @mxinden @piosz @coffeepac @s-urbaniak @metalmatze",closed,True,2019-01-07 13:50:41,2019-01-08 09:32:06
enhancements,Liujingfang1,https://github.com/kubernetes/enhancements/pull/680,https://api.github.com/repos/kubernetes/enhancements/issues/680,update kep/sig-cli/0031-kustomize-integration,"Update the kep to include:
- change status to valid one
- remove TODO item since it's done

To view the KEP, click [here](https://github.com/Liujingfang1/enhancements/blob/kustomize/keps/sig-cli/0031-kustomize-integration.md)",closed,True,2019-01-07 19:16:23,2019-01-10 01:19:34
enhancements,fabriziopandini,https://github.com/kubernetes/enhancements/pull/681,https://api.github.com/repos/kubernetes/enhancements/issues/681,KEP0015 join --control-plane update after v1.13,"This PR updates the ""KEP0015 join --control-plane"" with the latest changes implemented during v1.13 cycle.

/sig cluster-lifecycle
/assign @timothysc

@kubernetes/sig-cluster-lifecycle-pr-reviews
",closed,True,2019-01-08 11:51:32,2019-02-05 08:43:02
enhancements,philoserf,https://github.com/kubernetes/enhancements/pull/682,https://api.github.com/repos/kubernetes/enhancements/issues/682,Update 0031-kustomize-integration.md,"- fix YAML front matter rendering by quoting the embedded markdown of `see-also:` as mentioned in a comment to PR #680 

For reviewers. compare these renderings:

Good: https://github.com/kubernetes/enhancements/blob/1db7af14fadfcb72dbdb51475b116de4eda0ff9d/keps/sig-cli/0031-kustomize-integration.md
Bad: https://github.com/kubernetes/enhancements/blob/e03cd8525b7226359303705c356bf98bdbca2e6d/keps/sig-cli/0031-kustomize-integration.md",closed,True,2019-01-09 02:38:45,2019-01-15 20:39:11
enhancements,yastij,https://github.com/kubernetes/enhancements/pull/683,https://api.github.com/repos/kubernetes/enhancements/issues/683,add schedulingPolicy KEP,"This re-opens kubernetes/community#1937

This still needs to be re-formatted to meet KEP requirements.

I will update the content to reflect enforcement points that we discussed (at admission and scheduling time)

/cc @tallclair @bsalamat 

FYI @arnaudmz",open,True,2019-01-09 23:45:42,2019-01-20 07:56:21
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/684,https://api.github.com/repos/kubernetes/enhancements/issues/684,Update Kustomization integration KEP,"- add more background and context.
- revisit specifics of UX.
- provide justification for not using plugins.
- add more alternatives considered.",closed,True,2019-01-10 18:54:23,2019-01-18 20:26:20
enhancements,PatrickLang,https://github.com/kubernetes/enhancements/pull/685,https://api.github.com/repos/kubernetes/enhancements/issues/685,Starting test plan section of Windows KEP,"I added the test plan into the outline and added the current tests that have been merged and are running in testgrid. This isn't a complete list (see the TODOs), but it's a start.

@astrieanna and @benmoss - any feedback?

Can you take a look @adelina-t and @bclau ? Do you think this format makes sense for the tests?

/sig windows

This is continuing to add content to the draft merged in #676 ",closed,True,2019-01-12 01:47:38,2019-01-28 03:54:48
enhancements,vinaykul,https://github.com/kubernetes/enhancements/pull/686,https://api.github.com/repos/kubernetes/enhancements/issues/686,Migrate Karol Golab's KEP for in-place update of pod resources to k/enhancements,"This PR moves Karol's [initial proposal](https://github.com/kubernetes/community/pull/2908/commits/4ad6fa7c27f4a21c27a6be83c2dc81c43549fa55) for in-place update of pod resources from k/community to k/enhancements as required by the new process.

This KEP intends to build upon the ideas in [proposal for live and in-place vertical scaling](https://github.com/kubernetes/community/pull/1719) and [Vertical Resources Scaling in Kubernetes](https://docs.google.com/document/d/18K-bl1EVsmJ04xeRq9o_vfY2GDgek6B6wmLjXw-kos4/edit?ts=5b96bf40).

This PR also updates the owning-sig to sig-autoscaling, and adds initial set of reviewers @bsalamat , @derekwaynecarr , @dchen1107 from sig-scheduling and sig-node where bulk of the anticipated code changes will happen.

The original pull request by Karol, and associated discussion is [here](https://github.com/kubernetes/community/pull/2908).

CC: @kgolab @bskiba @schylek @bsalamat @dchen1107 @derekwaynecarr @karthickrajamani @YoungjaeLee @resouer 
",open,True,2019-01-12 02:26:36,2019-04-03 22:04:23
enhancements,spiffxp,https://github.com/kubernetes/enhancements/pull/687,https://api.github.com/repos/kubernetes/enhancements/issues/687,s/Design Proposal/KEP,"Drop the link to test plan, that should now be part of KEP",closed,True,2019-01-14 23:10:39,2019-02-11 17:48:00
enhancements,tallclair,https://github.com/kubernetes/enhancements/issues/688,https://api.github.com/repos/kubernetes/enhancements/issues/688,"Pod Overhead: account resources tied to the pod sandbox, but not specific containers","# Enhancement Description
- One-line enhancement description (can be used as a release note):
Account resources consumed by the pod sandbox, both for scheduling and limiting runtime usage.
- Primary contact (assignee):
@tallclair 
- Responsible SIGs:
/sig node
- Design proposal link (community repo):
WIP: https://docs.google.com/document/d/1EJKT4gyl58-kzt2bnwkv08MIUZ6lkDpXcxkHqCvvAp4/edit?usp=sharing
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which enhancement belongs):
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_",open,False,2019-01-14 23:56:57,2019-03-26 02:17:02
enhancements,ddebroy,https://github.com/kubernetes/enhancements/issues/689,https://api.github.com/repos/kubernetes/enhancements/issues/689,Support GMSA for Windows workloads,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Enable support for Group Managed Service Account (gMSA) for Windows workloads on Kubernetes.
- Primary contact (assignee): @ddebroy
- Responsible SIGs: sig-windows, sig-auth, sig-node
- Design proposal link (community repo): https://github.com/kubernetes/enhancements/blob/master/keps/sig-windows/0000-20181221-windows-group-managed-service-accounts-for-container-identity.md
- Link to e2e and/or unit tests: Coming soon
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @PatrickLang [Windows changes overall] @yujuhong [dockershim changes around Windows] @mikedanese, @liggitt [overall pod spec/container spec changes + authorization/security] 
- Approver (likely from SIG/area to which enhancement belongs): @PatrickLang @yujuhong @liggitt @mikedanese 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.14)
  - Beta release target (x.y)
  - Stable release target (x.y)

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_",open,False,2019-01-15 17:45:37,2019-03-21 18:49:56
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/690,https://api.github.com/repos/kubernetes/enhancements/issues/690,Update KEP template,"- Add release checklist
- Expand upon graduation criteria
- Add test plan section
- Add upgrade / downgrade section
- Add version skew section",closed,True,2019-01-15 23:05:18,2019-01-19 05:45:57
enhancements,majgis,https://github.com/kubernetes/enhancements/issues/691,https://api.github.com/repos/kubernetes/enhancements/issues/691,Amend keps/sig-apps/sidecarcontainers.md to reflect kubernetes/kubernetes#52345,"This issue proposes an amendment to the existing sidecarcontainers KEP:
https://github.com/kubernetes/enhancements/blob/master/keps/sig-apps/sidecarcontainers.md

The issue https://github.com/kubernetes/kubernetes/issues/52345 and associated PR were closed in favor of the sidecarcontainers KEP.

Reading through the sidecarcontainers KEP, it is unclear that the concerns outlined in https://github.com/kubernetes/kubernetes/issues/52345 will be addressed, specifically that configuration will allow the initContainer(or pod or sidecar-initContainer) to be restarted when a specific container errors.

I propose that https://github.com/kubernetes/kubernetes/issues/52345 be listed in either the goals or non-goals section of the sidecarcontainers KEP.  In the case it is included in goals, further elaboration could be provided in other appropriate sections.  In the case it is included in non-goals, a new KEP can be proposed.
",closed,False,2019-01-16 05:36:03,2019-03-04 14:12:00
enhancements,roycaihw,https://github.com/kubernetes/enhancements/issues/692,https://api.github.com/repos/kubernetes/enhancements/issues/692,Publish CRD OpenAPI Schema,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Serve validation schema for Custom Resources from kube-apiserver
- Primary contact (assignee): @roycaihw 
- Responsible SIGs: SIG API Machinery
- Design proposal link (community repo):
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: 
  - @liggitt 
  - @mbohlool 
  - @sttts 
- Approver (likely from SIG/area to which enhancement belongs):
  - @smarterclayton 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.14)
  - Beta release target (1.15)
  - Stable release target (1.16)

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_

/sig api-machinery

KEP: https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/00xx-publish-crd-openapi.md
Documentation: https://github.com/kubernetes/website/pull/12910
Implementation: https://github.com/kubernetes/kubernetes/pull/71192
Testing-related: https://github.com/kubernetes/test-infra/pull/11618, https://github.com/kubernetes/kubernetes/pull/74832",open,False,2019-01-16 18:10:07,2019-03-19 06:13:44
enhancements,lmdaly,https://github.com/kubernetes/enhancements/issues/693,https://api.github.com/repos/kubernetes/enhancements/issues/693,Node Topology Manager,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Kubelet component to coordinate fine-grained hardware resource assignments for different components in Kubernetes. 
- Primary contact (assignee): @lmdaly
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/community/pull/1680
- KEP PR: https://github.com/kubernetes/enhancements/pull/781
- Link to e2e and/or unit tests: N/A Yet
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @ConnorDoyle @balajismaniam 
- Approver (likely from SIG/area to which enhancement belongs): @derekwaynecarr @ConnorDoyle 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y): v1.15
  - Beta release target (x.y)
  - Stable release target (x.y)",open,False,2019-01-17 10:16:32,2019-04-05 16:11:52
enhancements,ddebroy,https://github.com/kubernetes/enhancements/pull/694,https://api.github.com/repos/kubernetes/enhancements/issues/694,Incorporate feedback from reviews of GMSA KEP,"1. Introduced a CRD for tracking GMSA credspecs (instead of configmaps). 
2. Clarified goals/non-goals around restricting users within namespaces from using GMSAs.
3. Incorporated feedback around making admission controller look-up and populate cred spec data rather than CRI.
",closed,True,2019-01-17 12:06:26,2019-01-24 06:47:09
enhancements,mattsmithdatera,https://github.com/kubernetes/enhancements/issues/695,https://api.github.com/repos/kubernetes/enhancements/issues/695,Skip Volume Ownership Change,"# Enhancement Description
- New`PermissionChangePolicy` string field in `PersistentVolumeClaimVolumeSource` struct and related conditional volume ownership change behavior
- Primary contact (assignee): @mattsmithdatera @gnufied 
- Responsible SIGs: sig-storage
- Design proposal link (community repo): TBD
- Link to e2e and/or unit tests: TBD
- Reviewer(s): @saad-ali @msau42 
- Approver (likely from SIG/area to which enhancement belongs): @liggitt 
- Enhancement target (which target equals to which milestone): 
  - Alpha release target (x.y) 1.14
  - Beta release target (x.y) 1.15
  - Stable release target (x.y) 1.16

Pull request implementing this change: https://github.com/kubernetes/kubernetes/pull/73232",open,False,2019-01-17 17:35:57,2019-01-25 17:33:24
enhancements,mattsmithdatera,https://github.com/kubernetes/enhancements/pull/696,https://api.github.com/repos/kubernetes/enhancements/issues/696,Skip Volume Ownership Change KEP,"Initial PR for the Skip Volume Ownership Change KEP
This goes with the enhancement issue: kubernetes/enhancements/issues/695

This is continuing discussion from the original google doc.

The pull request which implements this KEP: https://github.com/kubernetes/kubernetes/pull/73232",open,True,2019-01-17 17:44:35,2019-03-13 17:57:07
enhancements,tallclair,https://github.com/kubernetes/enhancements/pull/697,https://api.github.com/repos/kubernetes/enhancements/issues/697,RuntimeClass Beta criteria,"Cleanup RuntimeClass KEP to match the alpha implementation:
- Removed the references to the `legacy` RuntimeClass. This didn't end up getting implemented, and I think it just adds unnecessary complexity.
- Moved enhancement ideas from non-goals to their own section at the end

Enumerated beta criteria, please LMK if you think anything is missing!
- Added monitoring criteria
- Removed default selection. I think this is better handled by a cluster policy mechanism (e.g. PodSecurityPolicy)

/sig node
/kind design
/priority important-soon
/milestone v1.14",closed,True,2019-01-18 02:55:22,2019-01-24 19:35:55
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/698,https://api.github.com/repos/kubernetes/enhancements/issues/698,Update Kustomization integration KEP ,"- Split into 2 parts
  - Add subcommand
  - New kep for integration into file handling",closed,True,2019-01-18 20:25:38,2019-01-25 14:47:40
enhancements,pdeloulay,https://github.com/kubernetes/enhancements/pull/699,https://api.github.com/repos/kubernetes/enhancements/issues/699,Typo,Fixed simple typo for 1.12 Milestone,closed,True,2019-01-18 20:27:09,2019-01-18 21:00:34
enhancements,MrHohn,https://github.com/kubernetes/enhancements/pull/700,https://api.github.com/repos/kubernetes/enhancements/issues/700,Convert design proposal for Pod DNS Config to KEP,"Per https://github.com/kubernetes/enhancements/issues/504#issuecomment-455233815, converting [the old design proposal](https://github.com/kubernetes/community/blob/master/contributors/design-proposals/network/pod-resolv-conf.md) to a new KEP so that we can GA this feature with k8s 1.14.

No actual changes for this conversion.

/assign @bowei @thockin 
cc @claurence ",closed,True,2019-01-18 22:36:41,2019-01-26 00:09:14
enhancements,ixdy,https://github.com/kubernetes/enhancements/pull/701,https://api.github.com/repos/kubernetes/enhancements/issues/701,Breaking apart the test tarball KEP,"This might not be a big enough change to warrant a KEP, but it still seemed like a good way to outline the rationale and some trade-offs.

This kinda seems to be split between sig-testing and sig-release; it's unclear whether sig-architecture should consider this as well.

/assign @spiffxp @BenTheElder 
as he was very enthusiastic on slack
cc @dims as well

x-ref tracking issue #714",closed,True,2019-01-19 01:10:34,2019-02-05 01:48:23
enhancements,PatrickLang,https://github.com/kubernetes/enhancements/pull/702,https://api.github.com/repos/kubernetes/enhancements/issues/702,Copy in .gitignore from kubernetes/kubernetes,"Moving and changing per https://github.com/kubernetes/enhancements/pull/685#discussion_r249200833. I do a lot of editing with Vim which leaves backup *~ and .swp files around that don't need to be version controlled. It looks like kubernetes/kubernetes/.gitignore excludes these files as well as those from a lot of other popular tools.

Merging this will help keep this repo clean from accidental `git add`s",closed,True,2019-01-19 01:33:06,2019-01-22 04:32:03
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/703,https://api.github.com/repos/kubernetes/enhancements/issues/703,Revise KEP template,"Brings @pwittrock's updates in #690 over...

Update KEP template
- Add release checklist
- Expand upon graduation criteria
- Add test plan section
- Add upgrade / downgrade section
- Add version skew section

Additionally:
- Clarify some requirements in Release Team checklist
- Do away with KEP number in template

Phil and I discussed earlier in the week that I'd pick this up, so he doesn't have to be responsible for iterating on any changes suggested.

/assign @calebamiles @spiffxp @pwittrock @bgrant0607 
/sig pm architecture
/hold

Fixes: kubernetes/community#2245",closed,True,2019-01-19 05:44:57,2019-02-11 15:55:42
enhancements,micahhausler,https://github.com/kubernetes/enhancements/pull/704,https://api.github.com/repos/kubernetes/enhancements/issues/704,Added service account external signer KEP,"This is my first KEP, any input on structure or details is appreciated.

Initial implementation PR is kubernetes/kubernetes#73110

/sig auth

/cc @mikedanese @liggitt @tallclair ",open,True,2019-01-20 02:22:15,2019-01-23 19:34:40
enhancements,xing-yang,https://github.com/kubernetes/enhancements/pull/705,https://api.github.com/repos/kubernetes/enhancements/issues/705,Add ExecutionHook in Container struct,This PR adds ExecutionHook in the Container struct.,open,True,2019-01-20 16:26:09,2019-03-01 23:09:55
enhancements,pierreozoux,https://github.com/kubernetes/enhancements/issues/706,https://api.github.com/repos/kubernetes/enhancements/issues/706,Portable Service Definitions,"The KEP [already exists](https://github.com/kubernetes/enhancements/blob/master/keps/sig-apps/0032-portable-service-definitions.md), but there were no issue, so creating this one.
(I'm new here, so please forgive me or give me guidance on how to proceed)

I'm interested in working on that, and I'd like guidance on how to move this forward.

About the secrets, I'd like to mention this project from appscode - [AppsBinding](https://blog.byte.builders/post/the-case-for-appbinding/) which is the ServiceCatalog equivalent of binding.

I think that this KEP asks again the question of Operator vs Service Catalog, and I keep asking this to myself, but I think I found the answer in [this thread](https://github.com/awslabs/aws-service-operator/issues/137).

And then, to move this forward, I think we need the following:
 - standard CRDs
   - MySQL
   - PostegreSQL
   - Redis
   - ObjectStorage
   - Database Snapshot
   - ...
 - kindly ask/PR the current implementation to use them

To list them in a cluster, we can just label them I guess. But at the end of the day, all CRDs are special services to the end user. So I don't see a big difference between a normal CRD and a standard CRD.

For kubernetes project, there is not much code to write/maintain. We'll need to write/maintain this list of CRDs, and then write automation/validation.

Looking forward to see this happen!",open,False,2019-01-20 22:24:42,2019-01-30 15:15:54
enhancements,hoegaarden,https://github.com/kubernetes/enhancements/pull/707,https://api.github.com/repos/kubernetes/enhancements/issues/707,KEP for packaging kubernetes artifacts,"This is my first take after going through all the issues and slack conversations I could find.
There are still many unknowns for me.
Also I am not really that good with words, so any input highly appreciated!",closed,True,2019-01-22 00:00:15,2019-03-04 18:26:20
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/708,https://api.github.com/repos/kubernetes/enhancements/issues/708,Bump OWNERS_ALIASES,"- Dumps `OWNERS_ALIASES` from k/org
- Add comments on `features-maintainers` and `pm-maintainers`
- Add @claurence (1.14 Enhancements) to `features-maintainers`

Signed-off-by: Stephen Augustus <saugustus@vmware.com>

/assign @idvoretskyi @jdumars ",closed,True,2019-01-22 04:49:06,2019-01-23 07:44:30
enhancements,sttts,https://github.com/kubernetes/enhancements/pull/709,https://api.github.com/repos/kubernetes/enhancements/issues/709,"sig-api-machinery: add ""Pruning for CustomResources""",Follow-up of https://github.com/kubernetes/community/pull/2443.,open,True,2019-01-22 15:50:18,2019-01-22 15:50:35
enhancements,ddebroy,https://github.com/kubernetes/enhancements/pull/710,https://api.github.com/repos/kubernetes/enhancements/issues/710,Update status of GMSA KEP to Implementable,"Thanks so much for the detailed review and feedback on the GMSA KEP so far. 

Updating status of GMSA KEP to implementable based on having addressed all outstanding feedback so far from latest review in https://github.com/kubernetes/enhancements/pull/694. Approvers: @PatrickLang , @yujuhong and @liggitt  PTAL so that we can get started on the Alpha implementation of GMSA.

cc @JeremyWx @wk8",closed,True,2019-01-22 18:13:22,2019-01-29 19:21:00
enhancements,pierreozoux,https://github.com/kubernetes/enhancements/pull/711,https://api.github.com/repos/kubernetes/enhancements/issues/711,Adds the helm charts repo issue,,open,True,2019-01-22 18:24:42,2019-01-23 06:57:13
enhancements,fabriziopandini,https://github.com/kubernetes/enhancements/pull/712,https://api.github.com/repos/kubernetes/enhancements/issues/712,phases-v1.14-update,"This PR updates the ""KEP0029 kubeadm-phases-beta"" with the latest changes implemented during v1.13 cycle and with the actions planned for v1.14.

/sig cluster-lifecycle
/assign @timothysc
/assign @neolit123 

@kubernetes/sig-cluster-lifecycle-pr-reviews",closed,True,2019-01-22 20:41:17,2019-02-02 07:47:04
enhancements,fabriziopandini,https://github.com/kubernetes/enhancements/pull/713,https://api.github.com/repos/kubernetes/enhancements/issues/713,Certificates copy for kubeadm join --control-pane,"This PR adds a new KEP proposing a solution for automating the certificate copy for the for kubeadm join --control-pane workflow (rif [KEP0015](https://github.com/kubernetes/enhancements/blob/master/keps/sig-cluster-lifecycle/0015-kubeadm-join-control-plane.md), tracking issue for v1.14 release [issue 357](https://github.com/kubernetes/enhancements/issues/357))

/sig cluster-lifecycle
/assign @timothysc
/assign @luxas 
/cc @detiber 
/cc @mattmoyer 
/cc @chuckha 
/cc @liztio 

@kubernetes/sig-cluster-lifecycle-pr-reviews",closed,True,2019-01-22 20:48:36,2019-01-28 21:34:30
enhancements,ixdy,https://github.com/kubernetes/enhancements/issues/714,https://api.github.com/repos/kubernetes/enhancements/issues/714,Break apart the kubernetes test tarball,"# Enhancement Description
- One-line enhancement description (can be used as a release note): The mondo-tarball `kubernetes-test.tar.gz` which contained test binaries for all platforms is now deprecated. Test binaries are now distributed in platform-specific tarballs (such as `kubernetes-test-linux-amd64.tar.gz`).
- Primary contact (assignee): @ixdy
- Responsible SIGs: sig-testing, sig-release
- Design proposal link (community repo): [KEP sig-testing/20190118-breaking-apart-the-kubernetes-test-tarball](https://github.com/kubernetes/enhancements/blob/master/keps/sig-testing/20190118-breaking-apart-the-kubernetes-test-tarball.md)
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which enhancement belongs): @spiffxp @tpepper 
- Enhancement target (which target equals to which milestone):
  - Split + mondo tarballs: 1.14 https://github.com/kubernetes/kubernetes/pull/74065
  - Split tarballs only: 1.16

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_",open,False,2019-01-23 00:36:10,2019-03-26 23:59:58
enhancements,marpaia,https://github.com/kubernetes/enhancements/pull/715,https://api.github.com/repos/kubernetes/enhancements/issues/715,Add stage graduation to the list of issues that require a KEP,"This PR adds a bullet to the ""an enhancement is anything that"" list in the README which establishes that the act of graduating a thing from A to B requires a KEP (which should contain an articulated graduation criteria and test plan). The reason for tracking this information in KEPs is so that we can minimize our dependence on external tools by centralizing information about the Enhancement into the KEP itself.

/assign @spiffxp @justaugustus ",closed,True,2019-01-23 05:36:35,2019-01-25 18:00:35
enhancements,vladimirvivien,https://github.com/kubernetes/enhancements/pull/716,https://api.github.com/repos/kubernetes/enhancements/issues/716,Inline CSI volumes support KEP,"Currently, volumes that are backed by CSI drivers can only be used with the `PersistentVolume` and `PersistentVolumeClaim` objects. This proposal is to implement support for the ability to nest CSI volume declarations within pod specs:

```yaml
apiVersion: v1
kind: Pod
metadata:
  name: testpod
spec:
  containers:
    ...
  volumes:
      - name: vol
        csi:
          driver: mock.storage.kubernetes.io
          volumeAttributes:
              name: ""Mock Volume 1""
          volumeHandle: ""1""
```

This would put CSI drivers on feature parity with existing in-tree storage plugins which already support this volume deployment mode.

Related feature entry - https://github.com/kubernetes/enhancements/issues/596
This KEP started life as  feature [#2273](https://github.com/kubernetes/community/pull/2273).  

/sig storage",closed,True,2019-01-23 17:59:09,2019-01-31 19:42:04
enhancements,brahmaroutu,https://github.com/kubernetes/enhancements/pull/717,https://api.github.com/repos/kubernetes/enhancements/issues/717,Proposal to add Conformance Document as part of Release Documentation.,We would like to add release specific conformance document to release tar under docs/conformance. This document should be generated for each minor release build.,open,True,2019-01-23 18:28:48,2019-03-06 11:08:22
enhancements,johnbelamaric,https://github.com/kubernetes/enhancements/pull/718,https://api.github.com/repos/kubernetes/enhancements/issues/718,Update KEP template to reference required conformance tests.,,closed,True,2019-01-23 20:07:25,2019-01-25 23:05:37
enhancements,jingxu97,https://github.com/kubernetes/enhancements/pull/719,https://api.github.com/repos/kubernetes/enhancements/issues/719,Add new Taint Effect: ForceEviction,"Current taint-based eviction does not work well to handle node failures.
When a node fails and kubelet cannot responde, Pod will be struck in
terminating and cannot be deleted. This PR propose a new taint effect,
ForceEviction which will delete the Pods forcely without kubelet
involvement.

Feature is tracked https://github.com/kubernetes/enhancements/issues/551",open,True,2019-01-23 21:53:32,2019-02-05 20:09:29
enhancements,dekkagaijin,https://github.com/kubernetes/enhancements/pull/720,https://api.github.com/repos/kubernetes/enhancements/issues/720,create KEP to harden the default RBAC discovery clusterrolebindings,"@liggitt @tallclair PTAL
See also: https://github.com/kubernetes/kubernetes/issues/72115",closed,True,2019-01-23 23:11:20,2019-02-04 20:19:26
enhancements,brendandburns,https://github.com/kubernetes/enhancements/pull/721,https://api.github.com/repos/kubernetes/enhancements/issues/721,Add a KEP for artifact management.,@justinsb @dims ,closed,True,2019-01-24 05:31:36,2019-01-30 23:49:09
enhancements,ddebroy,https://github.com/kubernetes/enhancements/pull/722,https://api.github.com/repos/kubernetes/enhancements/issues/722,Add feedback in KEP for GMSA support in Kubernetes,"Address latest comments from @liggitt at https://github.com/kubernetes/enhancements/pull/694#pullrequestreview-195231647 and https://github.com/kubernetes/enhancements/pull/710#issuecomment-457088396:
1. Change all object, annotation and field names to `credential spec`/`CredentialSpec`
2. Split the single webhook into a mutating and validating webhook
3. OpenAPI validation for all fields of GMSACredentialSpec CRD.
4. Use `windows.k8s.io` API group for CRD.
5. Add SIG Windows specific prefix: `windows.` to existing `kubernetes.io` prefix in annotations
6. Indicate structure and naming of Windows/OS specific pod fields mentioned in the KEP may change.
7. Clarify side-by-side support for Alpha annotations for GMSA names/JSON with field changes in Beta onwards for podspec.",closed,True,2019-01-24 09:19:13,2019-01-27 23:28:10
enhancements,tallclair,https://github.com/kubernetes/enhancements/pull/723,https://api.github.com/repos/kubernetes/enhancements/issues/723,Revisit RuntimeClass upgrade story,"Follow up from the recommendations in this document:
https://docs.google.com/document/d/1hH99thfjpVDG77GgBUT0yXtHb1u8E0zcT_kviwjG1k8/edit

TL;DR is that we won't make any code changes for RuntimeClass upgrades in the beta release, although I am refining the recommended approach to upgrades: only create a new RuntimeClass when there are user-facing changes and applications need to be modified.

/sig node
/priority important-longterm
/milestone v1.14
/assign @dchen1107 ",closed,True,2019-01-24 21:11:44,2019-04-01 23:52:35
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/issues/724,https://api.github.com/repos/kubernetes/enhancements/issues/724,Service Node Exclusion,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
Exclude nodes from load balancers based on an annotation on the node. 
- Primary contact (assignee):
@andrewsykim 
- Responsible SIGs:
SIG Cloud Provider / SIG Network
- Design proposal link (community repo):
TODO
- Link to e2e and/or unit tests:
TODO
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred:
- Approver (likely from SIG/area to which enhancement belongs):
TODO
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.8)
  - Beta release target (x.y)
  - Stable release target (x.y)",open,False,2019-01-24 22:19:40,2019-01-27 23:33:57
enhancements,msau42,https://github.com/kubernetes/enhancements/pull/725,https://api.github.com/repos/kubernetes/enhancements/issues/725,Converting local pv design proposal into a kep,"This mainly copy pastes the content from https://github.com/kubernetes/community/blob/master/contributors/design-proposals/storage/local-storage-pv.md into the kep format.  However, I found that some content in the original design proposal was out of date:

* Removed the phases that we did not implement and moved it to non-goals, ie dynamic provisioning and pv taints
* Removed section about the bootstrapper. We replaced it with a helm chart
* Combined phase 1 and 2 design sections together. Instead, in the implementation history section, talked about which parts were implemented in each release.  The main new thing in phase 2 was raw block support.",closed,True,2019-01-24 23:02:50,2019-01-29 16:58:18
enhancements,dashpole,https://github.com/kubernetes/enhancements/pull/726,https://api.github.com/repos/kubernetes/enhancements/issues/726,[KEP] Kubelet Resource Metrics Endpoint,"As described in https://github.com/kubernetes/kubernetes/issues/68522, a long-term goal is to reduce the set of metrics provided by the kubelet to make monitoring.

**Resource Metrics** == Core Metrics.  The term ""Core"" is overloaded, so I am trying to switch to using this terminology.  This is about metrics for first-class resources, such as cpu, and memory.

Feature Issue: https://github.com/kubernetes/enhancements/issues/727.  This is ideally targeted for 1.14, but obviously pending approval.

cc @kubernetes/sig-node-proposals 
@kubernetes/sig-instrumentation-api-reviews  ",closed,True,2019-01-24 23:35:47,2019-02-23 00:47:56
enhancements,dashpole,https://github.com/kubernetes/enhancements/issues/727,https://api.github.com/repos/kubernetes/enhancements/issues/727,Kubelet Resource Metrics Endpoint,"# Enhancement Description
- One-line enhancement description: Introduce a new kubelet endpoint for serving metrics about first-class resources.
- Primary contact: @dashpole
- Responsible SIGs: Sig-Node, Sig-Instrumentation
- Design proposal link: https://github.com/kubernetes/enhancements/pull/726
- Link to e2e and/or unit tests: Coming soon
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @DirectXMan12 
- Approver: @dchen1107 @brancz 
- Enhancement target (which target equals to which milestone):
  - Alpha release target 1.14
  - Beta release target TBD
  - Stable release target TBD",open,False,2019-01-24 23:52:46,2019-02-22 14:41:04
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/728,https://api.github.com/repos/kubernetes/enhancements/issues/728,Delineate owners of KEP reviews and KEP process ownership,"Now that we've distinguished between:
- Who reviews/approves KEPs (SIG Architecture)
- Who stewards the KEP process (SIG PM)

I'd like the enhancements repo to reflect that in OWNERS.
This should push the needle forward on reducing the cognitive burden on KEP reviewers.

For now, `kep-reviewers` and `kep-approvers` are the same set of people.
Let me know if there are additional people I should include.

Signed-off-by: Stephen Augustus <saugustus@vmware.com>

/assign @calebamiles @idvoretskyi @jdumars @bgrant0607 @jbeda @mattfarina @spiffxp 
/cc @lachie83 
/hold",closed,True,2019-01-25 11:54:20,2019-01-25 21:07:29
enhancements,michmike,https://github.com/kubernetes/enhancements/pull/729,https://api.github.com/repos/kubernetes/enhancements/issues/729,Updating Windows KEP for GA,Updating the windows KEP as we move the KEP towards implementable stage,closed,True,2019-01-25 16:07:37,2019-01-28 05:06:44
enhancements,gnufied,https://github.com/kubernetes/enhancements/pull/730,https://api.github.com/repos/kubernetes/enhancements/issues/730,Move dynamic volume limit to kep format,"Just moving the proposal from old format to KEP.

Existing proposal - https://github.com/kubernetes/community/pull/2051/files
",open,True,2019-01-25 17:53:12,2019-01-25 17:54:30
enhancements,ddebroy,https://github.com/kubernetes/enhancements/pull/731,https://api.github.com/repos/kubernetes/enhancements/issues/731,Fix header formatting for GMSA KEP,The header formatting was a bit off for the GMSA KEP. This PR fixes it. Thanks for catching it @michmike !,closed,True,2019-01-25 18:44:45,2019-01-25 18:49:29
enhancements,PatrickLang,https://github.com/kubernetes/enhancements/pull/732,https://api.github.com/repos/kubernetes/enhancements/issues/732,Adding API section to Windows KEP,"This PR adds the API details that @bgrant0607 requested. I'm currently double checking the pod & container objects to see if any other notes are needed and will remove the hold by EOD

Update history
- 25 Jan 12:13 PST - first draft
- 25 Jan 4:44 PST - draft complete, waiting for review

/sig windows
",closed,True,2019-01-25 20:13:12,2019-01-29 05:55:26
enhancements,ddebroy,https://github.com/kubernetes/enhancements/pull/733,https://api.github.com/repos/kubernetes/enhancements/issues/733,Remove KEP number from GMSA KEP file name,Rename the file name of GMSA KEP to adhere to the new convention of no KEP number in file name.,closed,True,2019-01-27 17:36:24,2019-01-27 18:07:33
enhancements,danielqsj,https://github.com/kubernetes/enhancements/pull/734,https://api.github.com/repos/kubernetes/enhancements/issues/734,Add deprecation plan and new PRs for KEP0031,"This PR aims to add deprecation plan and new related PRs to the metrics overhaul KEP.

@brancz @DirectXMan12 @ehashman @mxinden @piosz @coffeepac @s-urbaniak @metalmatze",closed,True,2019-01-28 07:20:02,2019-01-28 09:27:10
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/pull/735,https://api.github.com/repos/kubernetes/enhancements/issues/735,Draft KEPs for out-of-tree cloud providers,"Drafted up a KEP template we'll be using for tracking out-of-tree cloud provider enhancements for v1.14. Hoping to get this PR merged ASAP and then delegating the TODOs in each KEP to the respective provider SIGs (AWS, Azure, GCE, IBM, OpenStack, VMware). ",closed,True,2019-01-28 16:56:08,2019-01-29 22:46:22
enhancements,mbohlool,https://github.com/kubernetes/enhancements/pull/736,https://api.github.com/repos/kubernetes/enhancements/issues/736,Admission Webhook to GA,"Enhancement proposal to promote Admission Webhooks to GA.

@deads2k @liggitt @sttts @erictune @caesarxuchao @roycaihw @fedebongio @lavalamp ",closed,True,2019-01-28 17:01:22,2019-02-04 15:58:41
enhancements,wongma7,https://github.com/kubernetes/enhancements/pull/737,https://api.github.com/repos/kubernetes/enhancements/issues/737,Online Growing Persistent Volume Size KEP,This is a conversion of https://github.com/kubernetes/community/pull/1535 to KEP format for feature https://github.com/kubernetes/enhancements/issues/531,open,True,2019-01-28 17:20:33,2019-04-02 16:40:14
enhancements,micahhausler,https://github.com/kubernetes/enhancements/pull/738,https://api.github.com/repos/kubernetes/enhancements/issues/738,[sig-aws] Added AWS custom endpoint KEP,"As discussed in [SIG-AWS on 1/25/2019](https://docs.google.com/document/d/1-i0xQidlXnFEP9fXHWkBxqySkXwJnrGJP9OGyP2_P14/edit#heading=h.92yhzwlnihr9)

/sig aws
/sig cloud-provider

/kind feature 
/assign @justinsb

/cc @mcrute",closed,True,2019-01-28 19:26:37,2019-01-29 22:14:47
enhancements,benmoss,https://github.com/kubernetes/enhancements/pull/739,https://api.github.com/repos/kubernetes/enhancements/issues/739,Clarify supported workload controllers,"I don't think the limitation of not supporting privileged containers is especially important to call out specifically for DaemonSets in particular, since it applies to all containers. I also verified that Jobs and CronJobs both work as expected.

/sig windows

/assign @PatrickLang 
/assign @michmike",closed,True,2019-01-28 20:56:52,2019-01-28 21:17:29
enhancements,micahhausler,https://github.com/kubernetes/enhancements/issues/740,https://api.github.com/repos/kubernetes/enhancements/issues/740,API for external signing of Service Account tokens,"# Enhancement Description
- One-line enhancement description (can be used as a release note): API for external signing of Service Account tokens
- Primary contact (assignee): @micahhausler 
- Responsible SIGs:  sig-auth
- Design proposal link (community repo): kubernetes/enhancements#704
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @liggitt @smarterclayton @mikedanese 
- Approver (likely from SIG/area to which enhancement belongs): @liggitt 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.14)
  - Beta release target (1.15)
  - Stable release target (x.y)

/sig auth
/kind feature
/stage alpha",open,False,2019-01-28 21:18:52,2019-01-29 11:22:47
enhancements,leakingtapan,https://github.com/kubernetes/enhancements/pull/741,https://api.github.com/repos/kubernetes/enhancements/issues/741,Update EBS CSI driver KEP for Beta release,xref: #630 ,closed,True,2019-01-28 21:21:00,2019-01-30 04:38:41
enhancements,verult,https://github.com/kubernetes/enhancements/pull/742,https://api.github.com/repos/kubernetes/enhancements/issues/742,KEP for CSI topology design.,"KEP for #557 

The original design doc was written before KEP requirements were in place, so the content is kept in the original doc. Missing information required for feature freeze is added here.

/assign @msau42 @saad-ali ",closed,True,2019-01-28 21:52:36,2019-01-30 00:13:12
enhancements,michmike,https://github.com/kubernetes/enhancements/pull/743,https://api.github.com/repos/kubernetes/enhancements/issues/743,setting Windows Node KEP to implementable,this PR should be the final one to set the Windows Node KEP to implementable for the 1.14 release of K8s. We want to promote the functionality to stable,closed,True,2019-01-28 22:48:18,2019-02-04 15:49:29
enhancements,leakingtapan,https://github.com/kubernetes/enhancements/pull/744,https://api.github.com/repos/kubernetes/enhancements/issues/744,Propose KEP for AWS EFS CSI Driver,xref: #762 ,closed,True,2019-01-28 23:15:23,2019-04-01 03:19:52
enhancements,tallclair,https://github.com/kubernetes/enhancements/issues/745,https://api.github.com/repos/kubernetes/enhancements/issues/745,Add spelling verification to the enhancements repo,"When KEPs were migrated from the community repo, we lost the spelling verification. We should copy [the scripts](https://github.com/kubernetes/community/tree/master/hack) over from the community repo, and enable them in presubmit.",closed,False,2019-01-28 23:23:39,2019-02-19 15:04:26
enhancements,justinsb,https://github.com/kubernetes/enhancements/pull/746,https://api.github.com/repos/kubernetes/enhancements/issues/746,KEP: [sig-cluster-lifecycle] addons via operators,,closed,True,2019-01-28 23:53:35,2019-03-26 17:31:24
enhancements,caesarxuchao,https://github.com/kubernetes/enhancements/pull/747,https://api.github.com/repos/kubernetes/enhancements/issues/747,Adding the storage migration triggering controller,"We will add a new API and a controller to the [storage migrator repo](https://github.com/kubernetes-sigs/kube-storage-version-migrator), to automatically start storage version migration when the storage version changes.

See this [previous KEP](https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/35-storage-version-hash.md) for how storage version is exposed in the discovery doc.

/assign @yliaog @lavalamp @deads2k 
/sig api-machinery",closed,True,2019-01-29 00:23:35,2019-02-11 23:10:50
enhancements,leakingtapan,https://github.com/kubernetes/enhancements/pull/748,https://api.github.com/repos/kubernetes/enhancements/issues/748,Add KEP for FSx CSI Driver,"xref #763 
/cc sig-aws",closed,True,2019-01-29 01:44:09,2019-04-01 03:19:40
enhancements,bowei,https://github.com/kubernetes/enhancements/pull/749,https://api.github.com/repos/kubernetes/enhancements/issues/749,Add KEP for ingress API group move,cc: @thockin @liggitt ,closed,True,2019-01-29 07:39:18,2019-02-01 21:24:54
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/pull/750,https://api.github.com/repos/kubernetes/enhancements/issues/750,HugePages KEP,"Migrates the previous hugepages design from community repository into KEP format.

The goal is to promote hugepages feature to GA as it has been under beta for many releases, and has usage and adoption without issue.  This document captures what was discussed in the Jan 15 SIG-Node call without objection.

See:
https://docs.google.com/document/d/1Ne57gvidMEWXR70OxxnRkYquAoMpt56o75oZtg-OeBg/edit#heading=h.w4ic0si7v0do

/cc @dchen1107 ",closed,True,2019-01-29 16:41:19,2019-02-01 19:55:44
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/issues/751,https://api.github.com/repos/kubernetes/enhancements/issues/751,HugePages,"# Enhancement Description: HugePages to GA
- Primary contact (assignee): @derekwaynecarr 
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/enhancements/pull/750
- Link to e2e and/or unit tests: 
https://github.com/kubernetes/kubernetes/blob/master/test/e2e_node/hugepages_test.go
- Reviewer(s) @dchen1107 @vishh 
- Approver (likely from SIG/area to which enhancement belongs): @dchen1107 
- Enhancement target (which target equals to which milestone):
  - Beta release target 1.10
  - Stable release target 1.14",open,False,2019-01-29 18:00:28,2019-03-06 15:28:57
enhancements,freehan,https://github.com/kubernetes/enhancements/issues/752,https://api.github.com/repos/kubernetes/enhancements/issues/752,New Endpoint API ,"# Enhancement Description
- One-line enhancement description (can be used as a release note): New Endpoint API as eventual replacement of the current core/v1 Endpoints API.
- Primary contact (assignee): @freehan 
- Responsible SIGs: sig-network, sig-scalability
- Design proposal link (community repo): TBD
- Link to e2e and/or unit tests: TBD
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @thockin @wojtek-t 
- Approver (likely from SIG/area to which enhancement belongs): @thockin @wojtek-t 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.15) 
  - Beta release target (1.16)
  - Stable release target (1.17)
",open,False,2019-01-29 18:26:19,2019-01-31 16:50:04
enhancements,Joseph-Irving,https://github.com/kubernetes/enhancements/issues/753,https://api.github.com/repos/kubernetes/enhancements/issues/753,Sidecar Containers ,"# Enhancement Description
- One-line enhancement description: Containers can now be a marked as sidecars so that they startup before normal containers and shutdown after all other containers have terminated.
- Primary contact (assignee): @Joseph-Irving 
- Responsible SIGs: sig-apps, sig-node
- Design proposal link: https://github.com/kubernetes/enhancements/blob/master/keps/sig-apps/sidecarcontainers.md
- Link to e2e and/or unit tests:
- Reviewer(s): @fejta (need more)
- Approver: @enisoc (sig-apps) need sig-node
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.15)
  - Beta release target (tbd)
  - Stable release target (tbd)

/kind feature
/sig apps
/sig node",open,False,2019-01-29 18:33:18,2019-03-28 23:42:34
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/754,https://api.github.com/repos/kubernetes/enhancements/issues/754,Update kustomization integration to make it implementable.,,closed,True,2019-01-29 19:47:01,2019-02-01 11:48:10
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/pull/755,https://api.github.com/repos/kubernetes/enhancements/issues/755,KEP Pid Limiting,"The following captures what was discussed in SIG Node on Dec 18, 2018.

See:
https://github.com/kubernetes/community/blob/master/sig-node/archive/meeting-notes-2018.md#dec-18

The KEP is aligned with latest state of code, what is not yet implemented or merged is the NodeAllocatable enforcement that we would like to tackle time-permitting.",closed,True,2019-01-29 20:05:57,2019-02-01 20:06:28
enhancements,haiyanmeng,https://github.com/kubernetes/enhancements/pull/756,https://api.github.com/repos/kubernetes/enhancements/issues/756,Add `Monitoring` section into RuntimeClass KEP,/cc tallclair,closed,True,2019-01-29 20:07:02,2019-03-06 16:43:54
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/issues/757,https://api.github.com/repos/kubernetes/enhancements/issues/757,Pid Limiting,"# Enhancement Description
- Ability to isolate pid resources pod-to-pod and node-to-pod
- Primary contact (assignee): @derekwaynecarr 
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/enhancements/pull/755
- Link to e2e and/or unit tests: https://github.com/kubernetes/kubernetes/blob/master/test/e2e_node/pids_test.go
- Reviewer(s) - @dashpole @sjenning 
- Approver (likely from SIG/area to which enhancement belongs): @dashpole @dchen1107 
- Enhancement target (which target equals to which milestone):
  - Alpha 1.10
  - Beta 1.14
  - Stable release target TBD",open,False,2019-01-29 20:08:54,2019-03-06 16:08:14
enhancements,bowei,https://github.com/kubernetes/enhancements/issues/758,https://api.github.com/repos/kubernetes/enhancements/issues/758,Move Ingress to the networking.v1beta1 API group,"# Enhancement Description
- One-line enhancement description: Move Ingress to the networking.v1beta1 API group
- Primary contact: bowei
- Responsible SIGs: sig-network
- KEP: https://github.com/kubernetes/enhancements/blob/master/keps/sig-network/20190125-ingress-api-group.md
- Link to e2e and/or unit tests:
- Reviewer(s): @aledbf
- Approver: @caseydavenport, thockin@
- Enhancement target: 1.14, 1.15, 1.16
- PRs
  - [ ] https://github.com/kubernetes/kubernetes/pull/74057",open,False,2019-01-29 20:11:38,2019-02-27 23:25:05
enhancements,dstrebel,https://github.com/kubernetes/enhancements/pull/759,https://api.github.com/repos/kubernetes/enhancements/issues/759,Initial draft of Azure Cloud Provider,This is an update to initial kep for the Azure cloud provider. Doc will be updated by appropriate team members to provide additional details.,open,True,2019-01-29 20:22:05,2019-02-02 03:35:59
enhancements,hogepodge,https://github.com/kubernetes/enhancements/pull/760,https://api.github.com/repos/kubernetes/enhancements/issues/760,Update KEP template for Out of Tree Provider for OpenStack,"This KEP outlines the current state of the out of tree cloud provider for OpenStack. Many of the testing and documentation requirements have been satisfied, and most new features will require new KEPs. The most important work for this KEP is in migrating community users off of the in-tree provider and to the out-of-tree provider.",open,True,2019-01-29 21:16:33,2019-01-29 22:16:08
enhancements,M00nF1sh,https://github.com/kubernetes/enhancements/pull/761,https://api.github.com/repos/kubernetes/enhancements/issues/761,update graduation criteria for alb ingress controller beta,update graduation criteria for alb ingress controller beta in v1.14,closed,True,2019-01-29 21:30:34,2019-01-30 00:16:21
enhancements,leakingtapan,https://github.com/kubernetes/enhancements/issues/762,https://api.github.com/repos/kubernetes/enhancements/issues/762,AWS EFS CSI Driver,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
   AWS EFS CSI Driver provides an CSI implementation to manage EFS filesystem within Kubernetes.
- Primary contact (assignee): @leakingtapan 
- Responsible SIGs: sig-aws
- Design proposal link (community repo): https://github.com/kubernetes/enhancements/pull/744
- Link to e2e and/or unit tests:
   * https://github.com/aws/aws-efs-csi-driver/blob/master/pkg/driver/node_test.go
   * https://github.com/aws/aws-efs-csi-driver/blob/master/pkg/cloud/metadata_test.go
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @gnufied @bertinatto 
- Approver (likely from SIG/area to which enhancement belongs): @jsafrane 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.14)
  - Beta release target (1.15)
  - Stable release target (1.16)

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_",open,False,2019-01-29 21:39:07,2019-01-29 23:46:59
enhancements,leakingtapan,https://github.com/kubernetes/enhancements/issues/763,https://api.github.com/repos/kubernetes/enhancements/issues/763,AWS FSx for Lustre CSI Driver,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
   AWS FSx for Lustre CSI provides a CSI implementation to manager AWS FSx for Lustre filesystem within kubernetes.
- Primary contact (assignee): @leakingtapan 
- Responsible SIGs: 
   * /sig-aws
   * /sig-storage
- Design proposal link (community repo): https://github.com/kubernetes/enhancements/pull/748
- Link to e2e and/or unit tests: 
   * https://github.com/aws/aws-fsx-csi-driver/blob/master/pkg/driver/node_test.go
   * https://github.com/aws/aws-fsx-csi-driver/blob/master/pkg/cloud/metadata_test.go
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @gnufied @bertinatto 
- Approver (likely from SIG/area to which enhancement belongs): @jsafrane 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.14)
  - Beta release target (1.15)
  - Stable release target (1.16)

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_",open,False,2019-01-29 21:43:26,2019-01-29 23:47:23
enhancements,mtaufen,https://github.com/kubernetes/enhancements/pull/764,https://api.github.com/repos/kubernetes/enhancements/issues/764,legacyflag,"Proposes a wrapper library around pflag, that can improve the experience
of defining a command-line interface while implementing componentconfig.

Example implementation of a subset of kflag here: https://github.com/kubernetes/kubernetes/pull/73494",closed,True,2019-01-29 21:57:47,2019-04-04 12:08:51
enhancements,misterikkit,https://github.com/kubernetes/enhancements/pull/765,https://api.github.com/repos/kubernetes/enhancements/issues/765,Add missing item to TOC.,"The last section of the KEP template was not in the sample TOC.

/kind cleanup",closed,True,2019-01-29 22:22:57,2019-02-03 00:59:15
enhancements,jingxu97,https://github.com/kubernetes/enhancements/pull/766,https://api.github.com/repos/kubernetes/enhancements/issues/766,PVC/PV Taint and Toleration,"This proposal is adding a feature to apply taint on volumes (PVC/PV) so
that controller can decide whether to allow pods to start use the
volume.

Track by #773 773",open,True,2019-01-29 22:56:16,2019-03-14 15:11:11
enhancements,frapposelli,https://github.com/kubernetes/enhancements/pull/767,https://api.github.com/repos/kubernetes/enhancements/issues/767,Update KEP for out-of-tree vSphere cloud provider,"Update the KEP from draft doc published with #735, this KEP tracks issue #670",closed,True,2019-01-29 23:32:08,2019-01-30 16:22:30
enhancements,msau42,https://github.com/kubernetes/enhancements/pull/768,https://api.github.com/repos/kubernetes/enhancements/issues/768,Add KEP for csi skip attach,,closed,True,2019-01-29 23:35:33,2019-01-30 00:22:35
enhancements,misterikkit,https://github.com/kubernetes/enhancements/pull/769,https://api.github.com/repos/kubernetes/enhancements/issues/769,Scheduling Framework,"Migrate the existing design proposal for the scheduling framework (authored by @bsalamat) into a KEP.

This PR is in 2 parts.
1. move existing design from community
2. copy changes from https://github.com/kubernetes/community/pull/3082


/sig scheduling",closed,True,2019-01-29 23:45:47,2019-03-01 19:17:16
enhancements,msau42,https://github.com/kubernetes/enhancements/issues/770,https://api.github.com/repos/kubernetes/enhancements/issues/770,Skip attach for non-attachable CSI volumes,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Allow CSI drivers that don't support attach to not require the CSI external-attacher
- Primary contact (assignee): @jsafrane
- Responsible SIGs: sig-storage
- Design proposal link (community repo): https://github.com/kubernetes/enhancements/pull/768
- Link to e2e and/or unit tests: 
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @msau42 @saad-ali 
- Approver (likely from SIG/area to which enhancement belongs): @saad-ali 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y): 1.12
  - Beta release target (x.y): 1.14
  - Stable release target (x.y)

API PRs:
- [ ] https://github.com/kubernetes/kubernetes/pull/73883
- [ ] https://github.com/kubernetes/kubernetes/pull/74283

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_",open,False,2019-01-29 23:47:10,2019-04-04 19:31:55
enhancements,davidz627,https://github.com/kubernetes/enhancements/pull/771,https://api.github.com/repos/kubernetes/enhancements/issues/771,Migration KEP,migration KEP,closed,True,2019-01-29 23:59:55,2019-01-30 00:33:27
enhancements,Random-Liu,https://github.com/kubernetes/enhancements/issues/772,https://api.github.com/repos/kubernetes/enhancements/issues/772,CRI: Include pod name and namespace in the CRI pod log directory,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Change CRI pod log directory to `/var/log/pods/{POD_NAMESPACE}_{POD_NAME}_{POD_UID}`
- Primary contact (assignee): @Random-Liu 
- Responsible SIGs: sig-node
- Design proposal link (community repo): https://github.com/kubernetes/kubernetes/issues/58638#issuecomment-385126031
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @yujuhong @feiskyer 
- Approver (likely from SIG/area to which enhancement belongs): @dchen1107 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y) 1.14

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_",closed,False,2019-01-30 00:03:35,2019-02-07 16:46:30
enhancements,jingxu97,https://github.com/kubernetes/enhancements/issues/773,https://api.github.com/repos/kubernetes/enhancements/issues/773,Taint and Tolerations for Volume and Pod,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Add a new taint effect NoAttachOrMount to allow to taint PVC/PV so that Pods cannot start to use this volume unless they tolerate the taint
- Primary contact (assignee): @jingxu97 
- Responsible SIGs: sig-storage
- Design proposal link (community repo): #766 
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @saad-ali @liggitt 
- Approver (likely from SIG/area to which enhancement belongs): @saad-ali @liggitt 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y) 1.4
  - Beta release target (x.y) 1.5
  - Stable release target (x.y) 1.6

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_",open,False,2019-01-30 00:05:42,2019-02-02 07:54:12
enhancements,saad-ali,https://github.com/kubernetes/enhancements/pull/774,https://api.github.com/repos/kubernetes/enhancements/issues/774,"Add KEP for ""CSI Pod Info on Mount""","For Enhancement Issue: https://github.com/kubernetes/enhancements/issues/603

Was implemented in k8s 1.12 as alpha:
* PR https://github.com/kubernetes/kubernetes/pull/67945
* Tests https://github.com/kubernetes/kubernetes/pull/70439",closed,True,2019-01-30 00:15:39,2019-01-30 00:27:14
enhancements,msau42,https://github.com/kubernetes/enhancements/pull/775,https://api.github.com/repos/kubernetes/enhancements/issues/775,remove kep number and fix links in local pv kep,,closed,True,2019-01-30 00:49:45,2019-01-30 00:52:26
enhancements,mathu97,https://github.com/kubernetes/enhancements/pull/776,https://api.github.com/repos/kubernetes/enhancements/issues/776,Add KEP for Fibre Channel CSI Driver,,closed,True,2019-01-30 00:51:15,2019-01-30 01:11:42
enhancements,msau42,https://github.com/kubernetes/enhancements/pull/777,https://api.github.com/repos/kubernetes/enhancements/issues/777,Remove kep numbers and cleanup feature names,,closed,True,2019-01-30 01:03:56,2019-01-30 01:07:53
enhancements,mathu97,https://github.com/kubernetes/enhancements/pull/778,https://api.github.com/repos/kubernetes/enhancements/issues/778,Add KEP for fibre channel CSI driver,,closed,True,2019-01-30 01:18:27,2019-01-31 17:46:59
enhancements,mathu97,https://github.com/kubernetes/enhancements/issues/779,https://api.github.com/repos/kubernetes/enhancements/issues/779,Fibre Channel CSI Driver,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
Fibre Channel CSI Driver that will be housed in [kubernetes-csi/csi-driver-fibre-channel](https://github.com/kubernetes-csi/csi-driver-fibre-channel)
- Primary contact (assignee): @mathu97
- Responsible SIGs: sig-storage
- Design proposal link (community repo): #778 
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @saad-ali @childsb @rootfs @wongma7 
- Approver (likely from SIG/area to which enhancement belongs): @saad-ali @childsb 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (1.14)
  - Beta release target (1.15)
  - Stable release target (1.16)",closed,False,2019-01-30 01:27:38,2019-01-31 17:49:00
enhancements,gnufied,https://github.com/kubernetes/enhancements/pull/780,https://api.github.com/repos/kubernetes/enhancements/issues/780,Start adding a KEP for csi volume resizing,"xref https://github.com/kubernetes/enhancements/issues/556

",closed,True,2019-01-30 02:36:01,2019-02-13 20:35:24
enhancements,lmdaly,https://github.com/kubernetes/enhancements/pull/781,https://api.github.com/repos/kubernetes/enhancements/issues/781,Topology Manager KEP (Moving to new repo),"KEP merged to community repo: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/topology-manager.md
Moving to enhancements repo as per 1.14 release requirements for each feature to have a KEP in this repo.

Topology Manager component in Kubelet which collects hints from other Kubelet components in order to create a best fit Socket alignment.

",closed,True,2019-01-30 09:52:47,2019-03-11 21:01:23
enhancements,matthyx,https://github.com/kubernetes/enhancements/pull/782,https://api.github.com/repos/kubernetes/enhancements/issues/782,Mark the KEP as implemented,,closed,True,2019-01-30 13:20:12,2019-02-05 05:45:09
enhancements,luxas,https://github.com/kubernetes/enhancements/issues/783,https://api.github.com/repos/kubernetes/enhancements/issues/783,k8s.io/component-base,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Refactor the Kubernetes codebase in a way that aggregates and centralizes the code that's common to all components
- Kubernetes Enhancement Proposal: https://github.com/kubernetes/enhancements/blob/master/keps/sig-cluster-lifecycle/0032-create-a-k8s-io-component-repo.md
- Primary contact (assignee): @luxas 
- Responsible SIGs: @kubernetes/sig-api-machinery-pr-reviews @kubernetes/sig-cluster-lifecycle-pr-reviews @kubernetes/wg-component-standard 
- Enhancement target (which target equals to which milestone):
  - Alpha release target: (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

As per @spiffxp's request, I'm filing this enhancements issue although it's not very user facing.

---
EDIT(spiffxp): I edited this to match the [current enhancement tracking issue template](https://github.com/kubernetes/enhancements/blob/master/ISSUE_TEMPLATE.md), the following entries or content are not part of the template

- Reviewer(s): @mtaufen @sttts 
- Approver(s): @thockin @smarterclayton @liggitt  

EDIT(spiffxp): I removed v1.14 as the alpha release target since this didn't land in v1.14",open,False,2019-01-30 16:23:16,2019-03-26 22:27:15
enhancements,luxas,https://github.com/kubernetes/enhancements/issues/784,https://api.github.com/repos/kubernetes/enhancements/issues/784,Graduate the kube-proxy ComponentConfig to v1beta1,"- One-line enhancement description (can be used as a release note): Usage of the kube-proxy configuration file has graduated from experimental, as the API version now is v1beta1
- Primary contact (assignee): @luxas 
- Responsible SIGs: @kubernetes/sig-network-api-reviews @kubernetes/wg-component-standard 
- Design proposal link (community repo): N/A
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @thockin 
- Approver (likely from SIG/area to which enhancement belongs): @thockin 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y) N/A
  - Beta release target (x.y) 1.14
  - Stable release target (x.y) 1.15

The kube-proxy ComponentConfig is currently in `v1alpha1`. The spec needs to be graduated to `v1beta1` and beyond in order to be usable widely.
/assign @thockin ",open,False,2019-01-30 16:27:54,2019-03-19 10:29:03
enhancements,luxas,https://github.com/kubernetes/enhancements/issues/785,https://api.github.com/repos/kubernetes/enhancements/issues/785,Graduate the kube-scheduler ComponentConfig to v1beta1,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Usage of the kube-scheduler configuration file has graduated from experimental, as the API version now is v1beta1
- Primary contact (assignee): @luxas 
- Responsible SIGs: @kubernetes/sig-scheduling-api-reviews @kubernetes/wg-component-standard 
- Design proposal link (community repo): N/A
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @bsalamat @k82cn 
- Approver (likely from SIG/area to which enhancement belongs): @bsalamat @k82cn 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y) 1.14
  - Stable release target (x.y) 1.15

The kube-scheduler ComponentConfig is currently in v1alpha1. The spec needs to be graduated to v1beta1 and beyond in order to be usable widely.
/assign @bsalamat @k82cn ",open,False,2019-01-30 16:31:14,2019-02-05 06:44:11
enhancements,luxas,https://github.com/kubernetes/enhancements/issues/786,https://api.github.com/repos/kubernetes/enhancements/issues/786,kube-controller-manager ComponentConfig,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Usage of the kube-controller-manager configuration file is experimental, as the API version now is v1alpha1
- Primary contact (assignee): @luxas 
- Responsible SIGs: @kubernetes/sig-api-machinery-api-reviews @kubernetes/wg-component-standard 
- Design proposal link (community repo): N/A
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @liggitt @deads2k 
- Approver (likely from SIG/area to which enhancement belongs): @liggitt @deads2k 
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y) v1.14
  - Beta release target (x.y) v1.15
  - Stable release target (x.y) v1.16

The kube-controller-manager ComponentConfig is currently in v1alpha1 and unserializable. It needs to become serializable, and then the spec needs to be graduated to v1beta1 and beyond in order to be usable widely.
/assign @liggitt @deads2k ",open,False,2019-01-30 16:33:42,2019-02-05 06:37:30
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/pull/787,https://api.github.com/repos/kubernetes/enhancements/issues/787,set vSphere out-of-tree support KEP to implementable,"/assign @frapposelli 

ref https://github.com/kubernetes/enhancements/pull/767 ",closed,True,2019-01-30 17:13:49,2019-01-31 16:03:19
enhancements,rlenferink,https://github.com/kubernetes/enhancements/pull/788,https://api.github.com/repos/kubernetes/enhancements/issues/788,Updated OWNERS file to include link to docs,Updated OWNERS file to include link to docs,closed,True,2019-01-30 18:59:19,2019-01-30 19:41:25
enhancements,dekkagaijin,https://github.com/kubernetes/enhancements/issues/789,https://api.github.com/repos/kubernetes/enhancements/issues/789,harden the default RBAC discovery clusterrolebindings,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Remove discovery from the set of APIs which allow for unauthenticated access by default, improving privacy for CRDs and the default security posture of default clusters in general.
- Primary contact (assignee): @dekkagaijin
- Responsible SIGs: sig-auth, sig-api-machinery
- Design proposal link (community repo): https://github.com/kubernetes/enhancements/blob/master/keps/sig-auth/0034-20190123-harden-default-discovery-bindings.md
- Link to e2e and/or unit tests: https://github.com/kubernetes/kubernetes/pull/73807/files#diff-10a6ed7aab30ba9661f23a9b9b542e38
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @liggitt, @deads2k 
- Approver (likely from SIG/area to which enhancement belongs): @liggitt 
- Enhancement target (which target equals to which milestone): 
  - Alpha, Beta, Stable release target (1.14)
",closed,False,2019-01-30 19:02:56,2019-03-12 00:26:38
enhancements,vladimirvivien,https://github.com/kubernetes/enhancements/pull/790,https://api.github.com/repos/kubernetes/enhancements/issues/790,CSI inline volume support KEP with suggested updates,"This is to add changes suggested by @liggitt after KEP merged.
These are mostly cosmetic with design updates that still keep the KEP status implementable.

Original KEP - https://github.com/kubernetes/enhancements/pull/716


",closed,True,2019-01-30 19:20:42,2019-02-26 23:15:49
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/791,https://api.github.com/repos/kubernetes/enhancements/issues/791,KEP: Artifact management,"This updates the owning SIG to SIG Release, based on the conversations from #721.

Adding the reviewers/approvers:
/assign @justinsb @dims

Commenters:
/cc @calebamiles @cblecker @tpepper @parispittman @Phillels @nikhita ",closed,True,2019-01-30 22:49:46,2019-02-14 17:04:47
enhancements,yujuhong,https://github.com/kubernetes/enhancements/pull/792,https://api.github.com/repos/kubernetes/enhancements/issues/792,Add a KEP for promoting Node OS/Arch labels to GA,,closed,True,2019-01-31 00:20:38,2019-01-31 21:49:32
enhancements,yujuhong,https://github.com/kubernetes/enhancements/issues/793,https://api.github.com/repos/kubernetes/enhancements/issues/793,Promote Node OS/Arch labels to GA,"# Enhancement Description
- One-line enhancement description (can be used as a release note): 
```
kubelet: OS and Arch information is now recorded in `kubernetes.io/os` and `kubernetes.io/arch` labels on Node objects. The previous labels (`beta.kubernetes.io/os` and `beta.kubernetes.io/arch`) are still recorded, but are deprecated and targeted for removal in 1.18.
```
- PRs:
  - [ ] https://github.com/kubernetes/kubernetes/pull/73333
- Primary contact (assignee): @yujuhong 
- Responsible SIGs: Node
- Design proposal link: https://github.com/kubernetes/enhancements/blob/master/keps/sig-node/20190130-node-os-arch-labels.md
- Link to e2e and/or unit tests:
- Reviewer(s) - (for LGTM) recommend having 2+ reviewers (at least one from code-area OWNERS file) agreed to review. Reviewers from multiple companies preferred: @dchen1107 @liggitt 
- Approver (likely from SIG/area to which enhancement belongs): @dchen1107 @smarterclayton 
- Enhancement target (which target equals to which milestone):
  - Beta release target: 1.3
  - Stable release target: 1.14
",open,False,2019-01-31 00:25:05,2019-03-05 04:13:18
enhancements,bswartz,https://github.com/kubernetes/enhancements/pull/794,https://api.github.com/repos/kubernetes/enhancements/issues/794,Add CSI raw block support KEP,,closed,True,2019-01-31 04:48:22,2019-02-02 01:41:53
enhancements,brendandburns,https://github.com/kubernetes/enhancements/pull/795,https://api.github.com/repos/kubernetes/enhancements/issues/795,Add details about the design of the redirector.,@justinsb @thockin ,closed,True,2019-01-31 06:19:19,2019-02-15 05:28:26
enhancements,yastij,https://github.com/kubernetes/enhancements/pull/796,https://api.github.com/repos/kubernetes/enhancements/issues/796,add a kep to wrap already existing event design,"this is wraps kubernetes/community#1141 on a KEP, adds implementation history and graduation criteria.

/assign @wojtek-t @bgrant0607 
/sig instrumentation
/sig scalability",closed,True,2019-01-31 19:44:16,2019-02-02 21:00:53
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/pull/797,https://api.github.com/repos/kubernetes/enhancements/issues/797,update cloud provider dependency list in KEP 20190125-removing-in-tree-providers,"Updating based on current/future work in https://github.com/kubernetes/kubernetes/issues/69585 

/assign @cheftako @dims @mcrute ",closed,True,2019-01-31 21:17:53,2019-02-01 20:12:59
enhancements,bsalamat,https://github.com/kubernetes/enhancements/pull/798,https://api.github.com/repos/kubernetes/enhancements/issues/798,Add a KEP for graduating pod priority and preemption to GA,"ref/ #564
/sig scheduling",closed,True,2019-02-01 00:23:02,2019-02-01 11:55:49
enhancements,PatrickLang,https://github.com/kubernetes/enhancements/pull/799,https://api.github.com/repos/kubernetes/enhancements/issues/799,Adding runAsUsername API proposal to Windows KEP,"As https://github.com/kubernetes/kubernetes/issues/73387 was investigated, @liggitt called out that the existing `runAsUser` field, which is part of a stable API, cannot be changed. Instead, a new field would need to be added and go through API review.

Because the full context of why this is needed is captured in the Windows KEP, I thought it would make sense to capture the investigation and proposed API change into the existing KEP.

Content aside, my first question for the release team and approvers (@bgrant0607 from SIG-Architecture, @dchen1107 from SIG-Node, @spiffxp from release) is if you think this is the right path forward, or should it be captured in it's own KEP? Should adding a new OS-specific field go through alpha/beta/stable process across 3 releases?

I thought having a draft of what it would look like would make the discussion easier, so now we're at this PR :)

SIG-Windows reviewers should be @jsturtevant @feiskyer @craiglpeters @michmike 

/hold
/sig windows
",closed,True,2019-02-01 01:07:24,2019-03-06 22:38:42
enhancements,krmayankk,https://github.com/kubernetes/enhancements/pull/800,https://api.github.com/repos/kubernetes/enhancements/issues/800,RunAsGroup KEP,,closed,True,2019-02-01 08:04:19,2019-02-15 06:21:12
enhancements,liggitt,https://github.com/kubernetes/enhancements/pull/801,https://api.github.com/repos/kubernetes/enhancements/issues/801,Update sig-auth tech leads,Per https://github.com/kubernetes/community/blob/master/sigs.yaml#L292-L311,closed,True,2019-02-01 18:58:48,2019-02-04 14:12:35
enhancements,liggitt,https://github.com/kubernetes/enhancements/pull/802,https://api.github.com/repos/kubernetes/enhancements/issues/802,"update webhook admission proposal with ""convert to webhook-requested version""","follow up to https://github.com/kubernetes/enhancements/pull/736#issuecomment-459623154 with proposed design for ""conversion to requested-version"" capability (https://github.com/kubernetes/enhancements/pull/736#discussion_r252396191)

/sig api-machinery
/assign @lavalamp @deads2k @mbohlool ",open,True,2019-02-01 19:46:51,2019-03-13 20:27:21
enhancements,liggitt,https://github.com/kubernetes/enhancements/pull/803,https://api.github.com/repos/kubernetes/enhancements/issues/803,Added line-breaks for easier commenting,"no content changes, just line breaks",closed,True,2019-02-01 20:05:41,2019-02-04 14:12:35
enhancements,fabriziopandini,https://github.com/kubernetes/enhancements/pull/804,https://api.github.com/repos/kubernetes/enhancements/issues/804,set implemented status to certificates copy for kubeadm join KEP,"@neolit123 @claurence @timothysc 
When I worked on https://github.com/kubernetes/enhancements/pull/713, in the rush for getting this in before the enhancement freeze, I forgot to set the status implemented. This PR fixes this

Hopefully, this will help in getting back https://github.com/kubernetes/enhancements/issues/357 enhancement into tracked status.

Sorry again for this oversight

I hope in future some better tooling around KEP will help people in combining the requirements of a process that is getting more and more formal with a format (markdown) that is just a little bit more that free text

@kubernetes/kep-maintainers",closed,True,2019-02-02 08:09:34,2019-02-13 20:44:11
enhancements,ttousai,https://github.com/kubernetes/enhancements/pull/805,https://api.github.com/repos/kubernetes/enhancements/issues/805,Fix typo in pod priority preemption KEP,Fixes a small typo.,closed,True,2019-02-04 05:14:40,2019-02-04 12:47:52
enhancements,liggitt,https://github.com/kubernetes/enhancements/pull/806,https://api.github.com/repos/kubernetes/enhancements/issues/806,Webhook admission KEP updates,"follow up to https://github.com/kubernetes/enhancements/pull/736#issuecomment-459623154

* include ""convert to requested-version capability"" in planned for GA list, along with motivation (https://github.com/kubernetes/enhancements/pull/736#discussion_r252396191), indicates design is still in progress and will be updated/approved in the KEP prior to implementation
* include ""mutating plugin ordering"" in planned for GA list, along with motivation (https://github.com/kubernetes/enhancements/pull/736#discussion_r252396191), indicates design is still in progress and will be updated/approved in the KEP prior to implementation
* resolve unset vs `*` for scope field (https://github.com/kubernetes/enhancements/pull/736#discussion_r252246860)
* mention the service port capability will be added to APIService and audit webhook structs as well (https://github.com/kubernetes/enhancements/pull/736#discussion_r252080525)

Marks as implementable overall since there is implementation work that can begin on many of the items (the ""convert-to-requested version"" and ""plugin ordering / re-call"" subparts are explicitly noted to require that designs are to be merged to this doc before they will be considered implementable)

/sig api-machinery
/assign @lavalamp @deads2k @mbohlool ",closed,True,2019-02-04 15:51:15,2019-02-04 18:47:02
enhancements,pohly,https://github.com/kubernetes/enhancements/pull/807,https://api.github.com/repos/kubernetes/enhancements/issues/807,kubernetes-csi release process,"This gets added as a KEP because the proposed solution will have to run on CNCF resources (Prow) and publish to the same destination as core Kubernetes (gcr.io). However, this proposal is independent of any particular Kubernetes release and thus does not need to be tracked.

/sig storage
/cc @msau42 
",open,True,2019-02-04 17:05:56,2019-02-28 10:01:09
enhancements,lachie83,https://github.com/kubernetes/enhancements/pull/808,https://api.github.com/repos/kubernetes/enhancements/issues/808,Add revised IPv4/IPv6 dual stack KEP,"Fixes #563 

This PR adds to the great work in #648. Specifically we have expanded the scope of authors in include community members that have expressed interest in helping with the KEP and implementation.

At PR submission the following changes have been made to the KEP in #648:
* Add new authors
* Update last-updated
* Add Implementation Plan section

/cc  @leblancd @rpothier @khenidak @feiskyer @thockin ",open,True,2019-02-04 17:52:24,2019-02-27 05:06:38
enhancements,lavalamp,https://github.com/kubernetes/enhancements/pull/809,https://api.github.com/repos/kubernetes/enhancements/issues/809,Update apply kep for alpha,"This is me making all the obvious changes I can in ~1 hour. It is more accurate than what was there. I (or @apelisse) can make more changes--tell me what it needs. I left TODOs for some obvious things.

Of note the status should have been set to ""implementable"" probably 6 months ago. I did not really understand the KEP process; we had verbal go-aheads from the relevant sigs (CLI, API Machinery, Architecture).",closed,True,2019-02-04 19:15:18,2019-02-10 06:52:38
enhancements,Liujingfang1,https://github.com/kubernetes/enhancements/pull/810,https://api.github.com/repos/kubernetes/enhancements/issues/810,add kep for better pruning in apply,"This KEP proposes a different approach of `kubectl apply --prune`.

fixes https://github.com/kubernetes/kubectl/issues/572
",open,True,2019-02-04 19:18:16,2019-02-26 05:56:25
enhancements,sethpollack,https://github.com/kubernetes/enhancements/pull/811,https://api.github.com/repos/kubernetes/enhancements/issues/811,add kep for kustomize secret generator plugins,,closed,True,2019-02-05 01:19:39,2019-03-05 00:03:58
enhancements,msau42,https://github.com/kubernetes/enhancements/pull/812,https://api.github.com/repos/kubernetes/enhancements/issues/812,Add storage scale testing kep,"Develop a plan on how to test scalability of K8s storage

@kubernetes/sig-storage-feature-requests 
@kubernetes/sig-scalability-feature-requests ",closed,True,2019-02-05 03:14:16,2019-03-11 21:12:38
enhancements,tariq1890,https://github.com/kubernetes/enhancements/pull/813,https://api.github.com/repos/kubernetes/enhancements/issues/813,Update the Azure vendor's service name,,closed,True,2019-02-05 03:42:24,2019-02-06 18:59:52
enhancements,ajatprabha,https://github.com/kubernetes/enhancements/pull/814,https://api.github.com/repos/kubernetes/enhancements/issues/814,create KEP to add plugin support to dashboard,"@floreks @maciaszczykm PTAL
Original issue [here](https://github.com/kubernetes/dashboard/issues/1832).
Right now, I've commented out most of the sections, we can update them after further discussion.",open,True,2019-02-05 13:47:09,2019-02-11 16:39:25
enhancements,liggitt,https://github.com/kubernetes/enhancements/pull/815,https://api.github.com/repos/kubernetes/enhancements/issues/815,Remove NEXT_KEP_NUMBER from template,"The NEXT_KEP_NUMBER process for allocating a number has been abandoned, but still remained in the template, tripping up all new authors.",closed,True,2019-02-05 13:58:26,2019-02-22 16:51:19
enhancements,nikhita,https://github.com/kubernetes/enhancements/pull/816,https://api.github.com/repos/kubernetes/enhancements/issues/816,Add spelling verification script,"Fixes https://github.com/kubernetes/enhancements/issues/745

This PR:

- Adds the `misspell` library to vendor.
- Copies the scripts from the community repo: https://github.com/kubernetes/community/tree/master/hack
- Fixes the existing spelling errors.

PR to add the verify job: https://github.com/kubernetes/test-infra/pull/11126

/assign @cblecker 
/sig contributor-experience

/assign @justaugustus 
/sig pm",closed,True,2019-02-05 15:53:31,2019-02-05 16:32:10
enhancements,rojkov,https://github.com/kubernetes/enhancements/pull/817,https://api.github.com/repos/kubernetes/enhancements/issues/817,Add KEP for resource configuration in device plugins,"Resubmitting https://github.com/kubernetes/community/pull/2773 to `k/enhancements` on behalf of @kad , @bart0sh and @rojkov.

/cc @kubernetes/sig-node-proposals @dashpole @derekwaynecarr @jiayingz @vikaschoudhary16 @vishh @RenaudWasTaken

/sig node",open,True,2019-02-05 15:53:54,2019-02-05 16:36:47
enhancements,PatrickLang,https://github.com/kubernetes/enhancements/pull/818,https://api.github.com/repos/kubernetes/enhancements/issues/818,Adding clarifications on PodSecurityContext,"While reviewing part of the API reference, @liggitt called out a few fields that weren't  ( see https://github.com/kubernetes/enhancements/pull/799#discussion_r254029446 ).

This adds them to the API reference for completeness sake.",closed,True,2019-02-06 01:10:33,2019-02-06 23:41:17
enhancements,wojtek-t,https://github.com/kubernetes/enhancements/pull/819,https://api.github.com/repos/kubernetes/enhancements/issues/819,Add watch bookmark KEP,"Ref https://github.com/kubernetes/kubernetes/issues/73585

@kubernetes/sig-api-machinery-api-reviews @jpbetz @liggitt 
@kubernetes/sig-scalability-misc 

/assign @lavalamp 
/assign @deads2k ",closed,True,2019-02-07 09:25:11,2019-02-25 12:34:28
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/820,https://api.github.com/repos/kubernetes/enhancements/issues/820,Update OWNERS_ALIASES,"Signed-off-by: Stephen Augustus <saugustus@vmware.com>

/assign @idvoretskyi ",closed,True,2019-02-07 11:15:12,2019-02-07 12:43:32
enhancements,roycaihw,https://github.com/kubernetes/enhancements/pull/821,https://api.github.com/repos/kubernetes/enhancements/issues/821,[KEP] Publish CRD OpenAPI ,"Enhancement proposal for publishing CRD OpenAPI

ref: 
tracking issue: https://github.com/kubernetes/enhancements/issues/692
implementation: https://github.com/kubernetes/kubernetes/pull/71192

cc @liggitt @mbohlool @smarterclayton @sttts",closed,True,2019-02-08 00:46:29,2019-02-13 23:07:10
enhancements,justaugustus,https://github.com/kubernetes/enhancements/issues/822,https://api.github.com/repos/kubernetes/enhancements/issues/822,Capture and iterate on KEP template feedback,"AIs from #703:

- [ ] (@jbeda) ""Biggest comment is that this is no longer really a template but rather instructions. Perhaps break out into a new doc and/or update https://github.com/kubernetes/enhancements/blob/master/keps/0001-kubernetes-enhancement-proposal-process.md?

  Or merge this into the first kep?""
- [ ] (@mattfarina) ""How do we deal with differing release processes? For example, when kubectl is broken out into its own repo and has a release process and timing that is different from k8s/k8s?""
- [ ] (@lavalamp) On filing Enhancement Issues, in addition to writing KEPs... ""Honestly from the perspective of people wanting to file KEPs this seems like obscure busywork. Why don't we make a bot to file these issues?""
- [ ] (@pbarker) ""Questions have been raised here over adding iterative features. If a KEP is marked as 'implementable' and then a feature is added, it inherits the implementable status. Would be nice to have some structure around these changes if it makes sense to do in this revision.""
- [ ] (@lavalamp) ""I still don't really understand why the ""approvers"" and ""reviewers"" section of KEPs exist.
  If it's about people who are supposed to approve/review the KEP itself, don't we have owners files for that? KEPs are in separate directories now.

  If it's about people who are going to help approve and/or review the code changes (e.g., demonstrating that you've lined up sufficient bandwidth in the schedules of busy folks to actually get the changes made), it's probably named wrong.

  Actually IMO it's totally ambiguous right now and that section of the KEP could either be renamed or have a comment to make it clear what it means.""

- [ ] (@lavalamp) ""Are KEPs design docs or requirements docs?

  People have said ""both"" but I'm not convinced that's a good answer. There is no reason to suppose that the set of people who know what good goals are has a lot of overlap with the set of people who will be good at charting a path to achieving the goals.

  I personally feel that it's reasonable to hold a vote on goals (i.e. requirements), as long as they're appropriately phrased (e.g., ""is problem X an important problem for the project to solve"" NOT ""is changing the frobber API to interoperate with the thingy a good idea""). It is not a good idea to vote on solutions (designs), that should be handled by the right technical folks. (I think any formal specification of this distinction can be gamed, unfortunately.)""

- [ ] (@mattfarina) ""Could we explicitly state that a single KEP is for all maturity levels through graduation and that the graduation criteria should be described for the transition between each level. The examples below share this but some explicit direction could help clear up what @bgrant0607 noticed and I realized may be implicitly communicated.""

  @justaugustus ""@mattfarina -- I'm wondering if that's a better fit for the front documentation on KEPs (which I'm planning to work on once this lands)?

  A KEP captures details of an enhancement and is meant to be the steel thread to capture all implementation states. There should only be one KEP per enhancement.

  Happy to add something if that thought isn't really captured well.""

/sig pm
/assign
/milestone keps-beta",open,False,2019-02-08 16:36:13,2019-03-14 16:15:46
enhancements,MrHohn,https://github.com/kubernetes/enhancements/pull/823,https://api.github.com/repos/kubernetes/enhancements/issues/823,Update pod DNS config KEP to implementable,"Updating KEP status to implementable for https://github.com/kubernetes/enhancements/issues/504.

Sorry that I missed this in the previous PR: https://github.com/kubernetes/enhancements/pull/700.

cc @claurence",closed,True,2019-02-11 18:27:26,2019-02-12 00:11:58
enhancements,daschott,https://github.com/kubernetes/enhancements/pull/824,https://api.github.com/repos/kubernetes/enhancements/issues/824,Added Windows KEP clarification on ICMP protocol support.,"Some common network utilities (e.g. ping, traceroute) used for troubleshooting and diagnosis are based on ICMP messaging. This commit is adding a clarification on what network flows can be expected to work are on Windows containers using the ICMP protocol.",closed,True,2019-02-12 00:14:14,2019-02-27 15:54:40
enhancements,verb,https://github.com/kubernetes/enhancements/pull/825,https://api.github.com/repos/kubernetes/enhancements/issues/825,Updates for KEP documentation,"* Update KEP-0001 with new location for github repo
* Fix broken links to sig-architecture",closed,True,2019-02-12 10:15:10,2019-02-17 04:06:11
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/pull/826,https://api.github.com/repos/kubernetes/enhancements/issues/826,Improve cloud provider docs KEP,"Doing some KEP cleaning. For the cloud provider docs KEP, I've updated the expected format to be cleaner and easier to implement. This is something that needs **feedback** from folks who are actually going to be writing/consuming these docs. 

Some changes to note:
* Removes the requirement to have docs in both in-tree and out-of-tree repositories. With in-tree providers being removed soon, it seems appropriate to only update docs in the out-of-tree repositories (e.g. k8s.io/cloud-provider-*).
* adds a requirement to include a ""setup guide"" on how to integrate a cloud provider with kubeadm. 
* misc changes so the KEP is more in-line with recent changes to the KEP template. 

/assign @hogepodge @jagosan @d-nishi ",closed,True,2019-02-12 21:15:33,2019-02-12 21:56:58
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/pull/827,https://api.github.com/repos/kubernetes/enhancements/issues/827,Improve cloud provider docs KEP,"Doing some KEP cleaning. For the cloud provider docs KEP, I've updated the expected format to be cleaner and easier to implement. This is something that needs **feedback** from folks who are actually going to be writing/consuming these docs.

Some changes to note:

* Removes the requirement to have docs in both in-tree and out-of-tree repositories. With in-tree providers being removed soon, it seems appropriate to only update docs in the out-of-tree repositories (e.g. k8s.io/cloud-provider-*).
* adds a requirement to include a ""setup guide"" on how to integrate a cloud provider with kubeadm.
* misc changes so the KEP is more in-line with recent changes to the KEP template.

/assign @hogepodge @jagosan @d-nishi",closed,True,2019-02-12 21:33:41,2019-03-12 20:42:40
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/pull/828,https://api.github.com/repos/kubernetes/enhancements/issues/828,"Revert ""Improve cloud provider docs KEP""",This PR https://github.com/kubernetes/enhancements/pull/826 was merged accidentally. Reverting the changes so I can open a new PR with the full diff,closed,True,2019-02-12 21:44:33,2019-02-12 21:50:49
enhancements,thockin,https://github.com/kubernetes/enhancements/pull/829,https://api.github.com/repos/kubernetes/enhancements/issues/829,Add possible things to fix to Ingress GA KEP,As per discussion,open,True,2019-02-12 21:52:23,2019-03-20 20:13:36
enhancements,verb,https://github.com/kubernetes/enhancements/pull/830,https://api.github.com/repos/kubernetes/enhancements/issues/830,Port Troubleshooting Running Pods proposal to KEP,"This is a port of the existing Ephemeral Containers proposal to a KEP candidate. I've refocused the document on the API and kubelet changes, and put changes to kubectl out of scope for this document. I've also updated the API for changes we've made during API review.

This KEP draft is still marked provisional for a quick merge and to get the process started.

Original document: https://github.com/kubernetes/community/blob/master/contributors/design-proposals/node/troubleshoot-running-pods.md",closed,True,2019-02-13 12:41:32,2019-04-04 00:38:50
enhancements,gnufied,https://github.com/kubernetes/enhancements/pull/831,https://api.github.com/repos/kubernetes/enhancements/issues/831,Fix some of the follow up comments for CSI resizing.,cc @saad-ali ,open,True,2019-02-13 20:37:22,2019-02-13 20:37:40
enhancements,roycaihw,https://github.com/kubernetes/enhancements/pull/832,https://api.github.com/repos/kubernetes/enhancements/issues/832,Mark Publish CRD OpenAPI KEP as implementable,"We didn't change the status from `provisional` to `implementable` before merging the KEP. There is no open question left. This PR changes the status.

/assign @deads2k @lavalamp 
for approval",closed,True,2019-02-14 02:32:23,2019-02-14 18:26:50
enhancements,brendandburns,https://github.com/kubernetes/enhancements/pull/833,https://api.github.com/repos/kubernetes/enhancements/issues/833,Add a retrospective KEP for Custom Resource Definitions.,"@bgrant0607 @smarterclayton @jbeda @mattfarina 

As discussed in SIG-Architecture, here's a retrospective KEP for CRDs.

I'm sure it's missing things, please let me know what you'd like me to add.

Perhaps we can discuss at SIG-Arch next time we meet...",open,True,2019-02-14 04:57:18,2019-04-01 08:26:53
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/pull/834,https://api.github.com/repos/kubernetes/enhancements/issues/834,cleaning up KEP-removing-in-tree-providers,"Doing some KEP clean up for cloud provider extraction efforts.

/assign @cheftako @dims @jagosan @hogepodge @d-nishi @mcrute ",closed,True,2019-02-14 22:13:47,2019-03-01 17:33:58
enhancements,krmayankk,https://github.com/kubernetes/enhancements/pull/835,https://api.github.com/repos/kubernetes/enhancements/issues/835,update runasgroup kep by inlining contents,/sig auth,closed,True,2019-02-15 06:27:36,2019-03-25 16:03:12
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/pull/836,https://api.github.com/repos/kubernetes/enhancements/issues/836,Rename KEP template file name to follow KEP template,"Updates KEP template and meta KEP to follow the `YYYYMMDD-kep-name.md` file name format.

Wasn't sure if the filenames were intentionally left like this or just forgotten, figured I'd open a PR anyways :). 

/assign @justaugustus @calebamiles ",closed,True,2019-02-15 17:18:09,2019-02-15 18:05:14
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/issues/837,https://api.github.com/repos/kubernetes/enhancements/issues/837,Promote Cloud Provider Labels to GA,"# Enhancement Description
- One-line enhancement description (can be used as a release note):

Cloud provider labels we apply on nodes have been in ""beta"" for a very long time. Given their usage across the project we should GA them. 

The 3 labels are:
`beta.kubernetes.io/instance-type`
`failure-domain.beta.kubernetes.io/zone`
`failure-domain.beta.kubernetes.io/region`

They should be renamed to:
`topology.kubernetes.io/instance-type`
`topology.kubernetes.io/zone`
`topology.kubernetes.io/region`

While keeping backwards compatibility in mind. Changing the label format may also be an option given we have to rename the label key anyways. 

- Kubernetes Enhancement Proposal: (link to kubernetes/enhancements file, if none yet, link to PR)
I'm working on the KEP right now, will update once the PR is open.

- Primary contact (assignee):
@andrewsykim 

- Responsible SIGs:
SIG Cloud Provider, SIG Node
- Enhancement target (which target equals to which milestone):
  - Stable release target (v1.15)",open,False,2019-02-15 17:27:38,2019-02-28 17:56:08
enhancements,Liujingfang1,https://github.com/kubernetes/enhancements/pull/838,https://api.github.com/repos/kubernetes/enhancements/issues/838,update the status of kustomize subcommand integration kep,The code for this has been merged https://github.com/kubernetes/kubernetes/pull/73033,closed,True,2019-02-15 19:10:11,2019-02-26 17:52:34
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/pull/839,https://api.github.com/repos/kubernetes/enhancements/issues/839,Promoting cloud provider labels to GA,"Enhancement issue: https://github.com/kubernetes/enhancements/issues/837 

This is a KEP proposing we promote the following beta labels to GA:
* `beta.kubernetes.io/instance-type` -> `topology.kubernetes.io/instance-type`
* `failure-domain.beta.kubernetes.io/zone` -> `topology.kubernetes.io/zone`
* `failure-domain.beta.kubernetes.io/region` -> `topology.kubernetes.io/region`

From what I can tell, this has implications for nodes and volumes. 

/assign @dims @liggitt @msau42 @saad-ali @thockin",open,True,2019-02-15 20:39:09,2019-04-04 15:09:48
enhancements,justaugustus,https://github.com/kubernetes/enhancements/pull/840,https://api.github.com/repos/kubernetes/enhancements/issues/840,"Remove sig/{architecture,pm} labels from KEP directory","After scrolling some of the open PRs, seems redundant to tag KEP changes as `kind/kep`, `sig/architecture`, and `sig/pm`.

`kind/kep` should suffice. This removes the SIG labels.

Signed-off-by: Stephen Augustus <saugustus@vmware.com>",closed,True,2019-02-17 05:57:53,2019-02-21 02:39:47
enhancements,Joseph-Irving,https://github.com/kubernetes/enhancements/pull/841,https://api.github.com/repos/kubernetes/enhancements/issues/841,add implementation details to sidecar kep,"This adds some clarification around a few points and adds some initial implementation details. 

I didn't want to go too specific with code example as I'm not sure how valuable that would be at this stage and instead just call out the places where I think we should implement the logic so we can discuss whether this seems like a sensible approach. Once some POCing has been done we can link to the POC branch in the implementation details.

/assign @enisoc @kow3ns ",closed,True,2019-02-18 15:34:25,2019-03-22 18:14:51
enhancements,nikhita,https://github.com/kubernetes/enhancements/pull/842,https://api.github.com/repos/kubernetes/enhancements/issues/842,Fix spelling errors to enable spell-check job,"/cc @justaugustus 

Ref: https://github.com/kubernetes/test-infra/pull/11359",closed,True,2019-02-19 10:59:59,2019-02-19 16:21:26
enhancements,hoegaarden,https://github.com/kubernetes/enhancements/pull/843,https://api.github.com/repos/kubernetes/enhancements/issues/843,Add KEP for publishing packages in `provisional` state,"The purpose here is to get alignment on the Goals/Non-Goals and the rough proposal to get this KEP merged as `provisional` early.
Further (implementation) details and eventually the transition to `implementable` can be done with further PRs.

Supersedes: https://hackmd.io/PbH8KD09SFC0yn7ZhqVTRA?both

/cc @timothysc @sumitranr @Klaven @ixdy @ncdc @spiffxp @tpepper 

/sig release
/area release-eng
/sig cluster-lifecycle

/kind kep",closed,True,2019-02-19 11:44:51,2019-03-22 19:48:34
enhancements,haiyanmeng,https://github.com/kubernetes/enhancements/pull/844,https://api.github.com/repos/kubernetes/enhancements/issues/844,Add a link to the RuntimeClass metrics change PR,"/cc @brancz
/assign @brancz",closed,True,2019-02-19 18:41:39,2019-02-21 14:01:59
enhancements,johnbelamaric,https://github.com/kubernetes/enhancements/pull/845,https://api.github.com/repos/kubernetes/enhancements/issues/845,Mark service topology KEP implementable,,closed,True,2019-02-19 23:27:18,2019-02-21 05:28:07
enhancements,wojtek-t,https://github.com/kubernetes/enhancements/pull/846,https://api.github.com/repos/kubernetes/enhancements/issues/846,Update node-heartbeat KEP,,closed,True,2019-02-20 08:29:17,2019-02-26 06:35:36
enhancements,PatrickLang,https://github.com/kubernetes/enhancements/pull/847,https://api.github.com/repos/kubernetes/enhancements/issues/847,Fixing testgrid links in Windows KEP,"Over the last week we got a few more test runs added (GCE & vSphere), and updated the naming. This PR just fixes the links.

@benmoss or @astrieanna - does the vSphere test pass description look ok to you?
@yujuhong - does the GCE link look ok to you?",closed,True,2019-02-21 21:18:35,2019-02-21 22:00:52
enhancements,PatrickLang,https://github.com/kubernetes/enhancements/pull/848,https://api.github.com/repos/kubernetes/enhancements/issues/848,Notes on Windows memory provisioning,"@jsturtevant finished an in-depth investigation on using memory limits+reserves on Windows, and how the behaviors differ from Linux. This adds his findings to the KEP to resolve the open issue.


/sig windows
/milestone v1.14",closed,True,2019-02-21 21:46:03,2019-03-06 01:02:02
enhancements,dashpole,https://github.com/kubernetes/enhancements/pull/849,https://api.github.com/repos/kubernetes/enhancements/issues/849,Change Kubelet Resource Metrics Endpoint KEP status to implementable,"Someone pointed this out today at the community meeting.  Thanks to @DirectXMan12 for letting me know!

/assign @brancz @dchen1107 ",closed,True,2019-02-21 23:30:06,2019-03-01 23:36:20
enhancements,Huang-Wei,https://github.com/kubernetes/enhancements/pull/850,https://api.github.com/repos/kubernetes/enhancements/issues/850,correct file name and last-updated section,"/sig scheduling
/cc @bsalamat",closed,True,2019-02-22 00:15:32,2019-02-23 21:23:29
enhancements,Huang-Wei,https://github.com/kubernetes/enhancements/pull/851,https://api.github.com/repos/kubernetes/enhancements/issues/851,KEP of even pods spreading,"As a follow-up of discussion https://github.com/kubernetes/kubernetes/issues/72479#issuecomment-455464871

Tracking issue: #895

/sig scheduling
/kind design
/priority important-longterm",open,True,2019-02-22 01:00:46,2019-04-05 06:34:19
enhancements,liggitt,https://github.com/kubernetes/enhancements/pull/852,https://api.github.com/repos/kubernetes/enhancements/issues/852,Update node self-labeling implementation timeline,"There was some in-tree use of node-labels that needed to be [cleaned up in 1.14](https://github.com/kubernetes/kubernetes/pull/74424), which pushed the implementation timeline out",closed,True,2019-02-22 17:26:19,2019-03-20 04:50:25
enhancements,gliush,https://github.com/kubernetes/enhancements/issues/853,https://api.github.com/repos/kubernetes/enhancements/issues/853,Configurable scale velocity for HPA,"# Enhancement Description
- Configurable HPA velocity
- Kubernetes Enhancement Proposal: https://github.com/kubernetes/enhancements/pull/883
- k8s API change PR: https://github.com/kubernetes/kubernetes/pull/74525
- RFC: https://docs.google.com/document/d/1Su2tzHEtjc7_orTVbKZEhSFGWiHk16JqA4Z7zJU2oNs/edit
- Primary contact (assignee): @gliush
- Responsible SIGs: SIG Autoscaling
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

",open,False,2019-02-25 14:21:19,2019-03-07 17:22:12
enhancements,bowei,https://github.com/kubernetes/enhancements/pull/854,https://api.github.com/repos/kubernetes/enhancements/issues/854,Add test plan for 1.14,Adds test plan for 1.14.,open,True,2019-02-25 21:55:43,2019-03-28 18:13:25
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/855,https://api.github.com/repos/kubernetes/enhancements/issues/855,Proposal for adding headers with the command name to kubectl requests,"KEP PR Approvers:
- @deads2k 
- @soltysh ",closed,True,2019-02-26 02:54:12,2019-03-14 20:55:04
enhancements,soltysh,https://github.com/kubernetes/enhancements/pull/856,https://api.github.com/repos/kubernetes/enhancements/issues/856,Change kubectl plugins KEP to implemented,/assign @juanvallejo @pwittrock @seans3 ,closed,True,2019-02-26 09:05:01,2019-02-26 16:21:21
enhancements,ddebroy,https://github.com/kubernetes/enhancements/pull/857,https://api.github.com/repos/kubernetes/enhancements/issues/857,Update GMSA KEP to specify usage of registry entries for passing credspec,"Update the KEP with the changes in dockershim to use temporary registry entries rather than files to pass GMSA credspec to Docker. This prevents confusion like https://github.com/kubernetes/kubernetes/pull/73726/files#r258699166

Also fixes a typo.",closed,True,2019-02-27 01:31:40,2019-02-28 06:17:37
enhancements,Klaven,https://github.com/kubernetes/enhancements/pull/858,https://api.github.com/repos/kubernetes/enhancements/issues/858,Artifact generation KEP,"This KEP is for the work to be done for artifact generation. This was made based off this ticket https://github.com/kubernetes/kubernetes/issues/71677 and sets up the basis for the work needing done to implement it.

/assign @ncdc @timothysc @neolit123 @ixdy @hoegaarden ",closed,True,2019-02-27 05:25:21,2019-03-21 22:02:05
enhancements,pwittrock,https://github.com/kubernetes/enhancements/issues/859,https://api.github.com/repos/kubernetes/enhancements/issues/859,Include kubectl command metadata in http request headers,"kubectl adds http headers with the subcommand name, which flags were specified and a session id.

KEP PR #855",open,False,2019-02-27 22:39:56,2019-02-27 23:48:33
enhancements,matthyx,https://github.com/kubernetes/enhancements/pull/860,https://api.github.com/repos/kubernetes/enhancements/issues/860,KEP for adding initializationFailureThreshold to health probes,/assign @kubernetes/sig-node-proposals ,open,True,2019-02-28 08:22:55,2019-03-21 07:02:56
enhancements,MikeSpreitzer,https://github.com/kubernetes/enhancements/pull/861,https://api.github.com/repos/kubernetes/enhancements/issues/861,Added draft KEP for priority and fairness for apiserver requests,,closed,True,2019-02-28 08:40:33,2019-03-05 03:30:30
enhancements,MikeSpreitzer,https://github.com/kubernetes/enhancements/pull/862,https://api.github.com/repos/kubernetes/enhancements/issues/862,Added draft KEP for priority and fairness for apiserver requests,Just starting this.  Mainly only a goals discussion so far.,closed,True,2019-02-28 21:12:50,2019-03-12 18:16:37
enhancements,roycaihw,https://github.com/kubernetes/enhancements/pull/863,https://api.github.com/repos/kubernetes/enhancements/issues/863,Update Publish CRD OpenAPI feature gate name and rollout target,"Update feature gate name. Target Alpha level in 1.14

/cc @liggitt @sttts ",closed,True,2019-03-01 09:17:38,2019-03-06 03:20:01
enhancements,yue9944882,https://github.com/kubernetes/enhancements/pull/864,https://api.github.com/repos/kubernetes/enhancements/issues/864,Implementation Part of KEP #861: priority and fairness for apiserver requests,"/sig api-machinery

It's one detailed neat implementation for the KEP, original doc at: https://docs.google.com/document/d/1xw5m71SKcP4wzeIigWv3wZ3_N9w9G0xHYBJUpxF034w/edit

A poc implementation at:
https://github.com/yue9944882/inflight-rate-limit

PTAL the linking doc, and markdown content is coming soon...",open,True,2019-03-01 17:40:29,2019-04-03 04:46:05
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/865,https://api.github.com/repos/kubernetes/enhancements/issues/865,Kustomize Resource Ordering Proposal,"Proposal to address

kubernetes-sigs/kustomize#836",closed,True,2019-03-01 19:23:17,2019-03-18 01:40:09
enhancements,resouer,https://github.com/kubernetes/enhancements/pull/866,https://api.github.com/repos/kubernetes/enhancements/issues/866,Init KEP to migrate in-tree dockershim to out-of-tree,"A initial KEP to discuss about criteria and plan to migrate in-tree dockershim to out-of-tree.

Ref:  https://github.com/kubernetes/kubernetes/issues/73933

Please note this KEP is not target on 1.14 or any specific release recently, it's designed to be a join effort spanning on many future releases and requires carefully revise and thinking.

/assign @yujuhong @dchen1107 

/cc @dims @kubernetes/sig-node-pr-reviews ",open,True,2019-03-01 22:48:26,2019-04-01 06:30:53
enhancements,MrHohn,https://github.com/kubernetes/enhancements/pull/867,https://api.github.com/repos/kubernetes/enhancements/issues/867,Add test plan to pod DNS config KEP,"Per https://github.com/kubernetes/enhancements/issues/504#issuecomment-466557563, retrospectively adding test plan to the pod DNS config KEP.

/assign @thockin @bowei 
cc @claurence",closed,True,2019-03-02 00:28:09,2019-03-04 04:30:24
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/868,https://api.github.com/repos/kubernetes/enhancements/issues/868,Kustomize proposal for writing provenance for generated Resources into,annotations.,closed,True,2019-03-02 02:27:44,2019-03-20 23:41:59
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/869,https://api.github.com/repos/kubernetes/enhancements/issues/869,Kustomize proposal for cross-cutting PodSpec patches,,closed,True,2019-03-02 03:35:22,2019-03-14 21:42:24
enhancements,kevtaylor,https://github.com/kubernetes/enhancements/pull/870,https://api.github.com/repos/kubernetes/enhancements/issues/870,VolumeSubpathEnvExpansion KEP - Add graduation criteria,,closed,True,2019-03-04 09:01:11,2019-03-05 20:04:01
enhancements,majgis,https://github.com/kubernetes/enhancements/issues/871,https://api.github.com/repos/kubernetes/enhancements/issues/871,Re-run initContainers in a Deployment when containers exit on error,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
Re-run initContainers in a Deployment when containers exit on error
- Kubernetes Enhancement Proposal: (link to kubernetes/enhancements file, if none yet, link to PR)
TBD
- Primary contact (assignee):
TBD
- Responsible SIGs:
/sig apps
/sig node
- Enhancement target (which target equals to which milestone):
TBD
  - Alpha release target (x.y)
  - Beta release target (x.y)
  - Stable release target (x.y)

_Please to keep this description up to date. This will help the Enhancement Team track efficiently the evolution of the enhancement_
",open,False,2019-03-04 14:11:12,2019-03-04 14:34:37
enhancements,cheftako,https://github.com/kubernetes/enhancements/pull/872,https://api.github.com/repos/kubernetes/enhancements/issues/872,Network Proxy KEP.,"Adding KEP based on https://goo.gl/qiARUK.
Plan to add support for a network proxy between Kubernetes API Server and cluster/nodes.
Supports the removal of the deprecated SSH Tunnel system.
Adds supports for certain security features.",open,True,2019-03-05 02:45:40,2019-04-05 15:26:07
enhancements,hoegaarden,https://github.com/kubernetes/enhancements/pull/873,https://api.github.com/repos/kubernetes/enhancements/issues/873,"Revert ""KEP for packaging kubernetes artifacts""","Reverts kubernetes/enhancements#707

This KEP has been superseded by the [Artifact generation KEP](https://github.com/kubernetes/enhancements/pull/858).

/assign @justaugustus 
/cc @timothysc 
/kind kep
/kind cleanup",closed,True,2019-03-05 09:34:38,2019-03-05 09:54:00
enhancements,justinsb,https://github.com/kubernetes/enhancements/pull/874,https://api.github.com/repos/kubernetes/enhancements/issues/874,Artifact Serving: Proposal for milestone-0,"Adds a proposed plan of action to establish a first storage location
for artifacts, and a first (non-redirecting) GCLB front-end, so that
we can start to gather data.",open,True,2019-03-05 16:05:23,2019-03-06 10:44:11
enhancements,goodluckbot,https://github.com/kubernetes/enhancements/pull/875,https://api.github.com/repos/kubernetes/enhancements/issues/875,KEP for adding ProgressDeadlineSeconds to job,"Related issue: https://github.com/kubernetes/kubernetes/issues/58384
Related PR: https://github.com/kubernetes/kubernetes/pull/71563

cc @soltysh @liggitt 

thanks.",open,True,2019-03-05 16:18:57,2019-03-22 17:10:47
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/pull/876,https://api.github.com/repos/kubernetes/enhancements/issues/876,keps: hugepages implemented with link to tests,"updated status of kep to implemented with links to tests.

/cc @dchen1107 ",closed,True,2019-03-05 18:52:08,2019-03-05 21:40:01
enhancements,derekwaynecarr,https://github.com/kubernetes/enhancements/pull/877,https://api.github.com/repos/kubernetes/enhancements/issues/877,keps: update pid limiting kep status,/cc @dchen1107 ,closed,True,2019-03-05 18:54:40,2019-03-05 21:36:45
enhancements,jennybuckley,https://github.com/kubernetes/enhancements/pull/878,https://api.github.com/repos/kubernetes/enhancements/issues/878,Add testing plan to Apply KEP,"Retroactively summarize the testing plan described in https://github.com/kubernetes/enhancements/issues/555 here in the KEP.

Everything described here is already implemented.",closed,True,2019-03-05 22:59:05,2019-03-06 21:48:48
enhancements,bsalamat,https://github.com/kubernetes/enhancements/pull/879,https://api.github.com/repos/kubernetes/enhancements/issues/879,Add testing plan to priority and preemption KEP,"
/sig scheduling
ref/ #564",closed,True,2019-03-06 18:42:47,2019-03-10 09:19:27
enhancements,ixdy,https://github.com/kubernetes/enhancements/pull/880,https://api.github.com/repos/kubernetes/enhancements/issues/880,update split test tarballs KEP: status -> implemented,"https://github.com/kubernetes/kubernetes/pull/74065 merged a few weeks ago, and everything is looking good. Update the KEP accordingly.

/assign @spiffxp @tpepper 

x-ref kubernetes/enhancements#714",closed,True,2019-03-07 00:28:50,2019-03-19 05:18:21
enhancements,michmike,https://github.com/kubernetes/enhancements/pull/881,https://api.github.com/repos/kubernetes/enhancements/issues/881,updates to windows KEP for 1.14 impending GA,we made some updates to the KEP as part of the finalized tests and validations on windows features for k8s v1.14,closed,True,2019-03-07 00:32:52,2019-03-07 06:22:06
enhancements,michmike,https://github.com/kubernetes/enhancements/pull/882,https://api.github.com/repos/kubernetes/enhancements/issues/882,updates to windows KEP for 1.14 impending GA,we made some updates to the KEP as part of the finalized tests and validations on windows features for k8s v1.14,closed,True,2019-03-07 06:20:36,2019-03-07 06:36:57
enhancements,gliush,https://github.com/kubernetes/enhancements/pull/883,https://api.github.com/repos/kubernetes/enhancements/issues/883,Configurable scale velocity for HPA,,open,True,2019-03-07 17:20:18,2019-04-01 19:43:42
enhancements,monopole,https://github.com/kubernetes/enhancements/pull/884,https://api.github.com/repos/kubernetes/enhancements/issues/884,Expand mitigation section of kv generator plugin kep,Add flag too.,closed,True,2019-03-08 02:11:08,2019-03-11 22:46:37
enhancements,joelsmith,https://github.com/kubernetes/enhancements/pull/885,https://api.github.com/repos/kubernetes/enhancements/issues/885,Update embargo doc link in SECURITY_CONTACTS and change PST to PSC,See https://github.com/kubernetes/security/issues/8 for more information,closed,True,2019-03-08 18:04:37,2019-03-09 00:19:05
enhancements,monopole,https://github.com/kubernetes/enhancements/pull/886,https://api.github.com/repos/kubernetes/enhancements/issues/886,proposal: kustomize apply,,open,True,2019-03-08 22:04:34,2019-03-11 22:56:16
enhancements,egernst,https://github.com/kubernetes/enhancements/pull/887,https://api.github.com/repos/kubernetes/enhancements/issues/887,keps: sig-node: initial  pod overhead proposal,"Initial push for the pod overhead KEP.
",closed,True,2019-03-11 18:11:35,2019-04-04 20:31:01
enhancements,sudeshsh,https://github.com/kubernetes/enhancements/pull/888,https://api.github.com/repos/kubernetes/enhancements/issues/888,Resource Bin Packing Priority Function.,,open,True,2019-03-11 18:11:55,2019-03-14 16:54:57
enhancements,dekkagaijin,https://github.com/kubernetes/enhancements/pull/889,https://api.github.com/repos/kubernetes/enhancements/issues/889,complete implementation history of KEP #789,"closes https://github.com/kubernetes/enhancements/issues/789
@liggitt PTAL",closed,True,2019-03-12 00:22:44,2019-03-12 00:26:55
enhancements,wgliang,https://github.com/kubernetes/enhancements/pull/890,https://api.github.com/repos/kubernetes/enhancements/issues/890,KEP of pod affinity/anti-affinity supports Gt and Lt operators,"As a follow-up of discussion https://github.com/kubernetes/kubernetes/pull/72556#issuecomment-453274688

/sig scheduling
/kind design
/priority important-longterm
cc/ @bsalamat @k82cn @ravisantoshgudimetla @misterikkit @resouer @Huang-Wei @liggitt ",open,True,2019-03-12 01:56:37,2019-04-04 23:28:03
enhancements,MikeSpreitzer,https://github.com/kubernetes/enhancements/pull/891,https://api.github.com/repos/kubernetes/enhancements/issues/891,Added latest proposal and understanding of the design issues,From Mike and Kim.,closed,True,2019-03-12 18:24:49,2019-04-02 19:21:27
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/892,https://api.github.com/repos/kubernetes/enhancements/issues/892,Proposal for re-introducing SecretGenerators using Exec.,Follow up to #811,closed,True,2019-03-12 18:25:32,2019-03-27 20:06:50
enhancements,apelisse,https://github.com/kubernetes/enhancements/pull/893,https://api.github.com/repos/kubernetes/enhancements/issues/893,Add raw proposal for Dry-run authorization,"This is a proposal (very raw, far from implementable) to discuss the idea of creating specific mechanism for authorizing dry-run requests. Thanks.

/cc @lavalamp @liggitt @jennybuckley",open,True,2019-03-13 18:29:39,2019-04-01 20:40:06
enhancements,tallclair,https://github.com/kubernetes/enhancements/issues/894,https://api.github.com/repos/kubernetes/enhancements/issues/894,RuntimeClass Scheduling,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Add scheduling support for using RuntimeClass in heterogeneous clusters.
- Kubernetes Enhancement Proposal: https://github.com/kubernetes/enhancements/pull/896
- Primary contact (assignee): @tallclair 
- Responsible SIGs: sig-node
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y): N/A (roll into RuntimeClass beta)
  - Beta release target (x.y): v1.15
  - Stable release target (x.y)
",open,False,2019-03-14 16:04:27,2019-03-14 23:49:59
enhancements,bsalamat,https://github.com/kubernetes/enhancements/issues/895,https://api.github.com/repos/kubernetes/enhancements/issues/895,Even pod spreading across failure domains,"# Enhancement Description
- One-line enhancement description (can be used as a release note): This feature enables Kubernetes scheduler to spread a group of pods across failure domains. The existing hard inter-pod anti-affinity does not allow more than one pod to exist in a failure domain. The new feature supports more than one pod in a failure domain.
- Kubernetes Enhancement Proposal: (link to kubernetes/enhancements file, if none yet, link to PR)
https://github.com/kubernetes/enhancements/pull/851
- Primary contact (assignee): @Huang-Wei 
- Responsible SIGs: Scheduling
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y) 1.15
  - Beta release target (x.y)
  - Stable release target (x.y)

",open,False,2019-03-14 18:21:14,2019-03-14 18:21:27
enhancements,tallclair,https://github.com/kubernetes/enhancements/pull/896,https://api.github.com/repos/kubernetes/enhancements/issues/896,RuntimeClass scheduling KEP,"For https://github.com/kubernetes/enhancements/issues/894

/sig node scheduling
/assign @bsalamat @dchen1107 @derekwaynecarr 
/cc @yastij 
/milestone v1.15
/priority important-longterm",closed,True,2019-03-14 22:36:33,2019-03-20 22:57:15
enhancements,Liujingfang1,https://github.com/kubernetes/enhancements/pull/897,https://api.github.com/repos/kubernetes/enhancements/issues/897,Add kep for exending kustomize patches to patch multiple targets,,open,True,2019-03-14 23:53:29,2019-03-19 18:21:42
enhancements,lachie83,https://github.com/kubernetes/enhancements/pull/898,https://api.github.com/repos/kubernetes/enhancements/issues/898,Add KEP Stewardship section,"* Remove deprecated kep-number references in response to ref: #703 
* Add Stewardship to KEP process docs

cc: @justaugustus  ",closed,True,2019-03-16 05:12:50,2019-03-16 05:34:58
enhancements,lachie83,https://github.com/kubernetes/enhancements/pull/899,https://api.github.com/repos/kubernetes/enhancements/issues/899,Update KEP usage statement,"Update verbiage stating KEPs have been made mandatory since release 1.14

Signed-off-by: Lachlan Evenson <lachlan.evenson@microsoft.com>",closed,True,2019-03-16 05:34:02,2019-03-16 05:50:58
enhancements,yuwenma,https://github.com/kubernetes/enhancements/pull/900,https://api.github.com/repos/kubernetes/enhancements/issues/900,KEP:  Rebase k8s images to distroless,,closed,True,2019-03-17 01:51:31,2019-04-03 20:28:50
enhancements,vllry,https://github.com/kubernetes/enhancements/pull/901,https://api.github.com/repos/kubernetes/enhancements/issues/901,KEP: add non-preempting option to PriorityClasses,ref/ kubernetes/kubernetes#67671,closed,True,2019-03-18 04:32:34,2019-04-01 20:28:35
enhancements,vllry,https://github.com/kubernetes/enhancements/issues/902,https://api.github.com/repos/kubernetes/enhancements/issues/902,Add non-preempting option to PriorityClasses,"# Enhancement Description
- One-line enhancement description (can be used as a release note):
This feature adds a new option to PriorityClasses, which can enable or disable pod preemption.
- Kubernetes Enhancement Proposal: https://github.com/kubernetes/enhancements/pull/901
- Primary contact (assignee): @denkensk 
- Responsible SIGs:
- Enhancement target (which target equals to which milestone):
  - Alpha release target (x.y): 1.15
  - Beta release target (x.y)
  - Stable release target (x.y)
",open,False,2019-03-18 04:39:12,2019-03-18 04:39:37
enhancements,Liujingfang1,https://github.com/kubernetes/enhancements/pull/903,https://api.github.com/repos/kubernetes/enhancements/issues/903,"update status of kustomize file process integration to ""implemented""",,closed,True,2019-03-18 20:07:57,2019-03-29 16:46:18
enhancements,bsalamat,https://github.com/kubernetes/enhancements/pull/904,https://api.github.com/repos/kubernetes/enhancements/issues/904,Add a KEP for graduating PodDisruptionBudget to stable,"
/sig apps
/assign @kow3ns @liggitt 
",open,True,2019-03-19 02:13:03,2019-03-22 18:35:28
enhancements,zhan849,https://github.com/kubernetes/enhancements/pull/905,https://api.github.com/repos/kubernetes/enhancements/issues/905,Add KEP for application pod graceful update,"This is the initial draft of KEP addressing issue https://github.com/kubernetes/kubernetes/issues/75136

/sig apps
/area controller
/assign @kow3ns 
/cc @janetkuo ",open,True,2019-03-19 18:46:08,2019-03-19 18:56:37
enhancements,pwittrock,https://github.com/kubernetes/enhancements/pull/906,https://api.github.com/repos/kubernetes/enhancements/issues/906,Kustomize: Generator and Transformer Plugins,,closed,True,2019-03-19 19:08:01,2019-04-02 23:35:24
enhancements,caesarxuchao,https://github.com/kubernetes/enhancements/pull/907,https://api.github.com/repos/kubernetes/enhancements/issues/907,Update the storage version migration KEP with beta requirements,"Updating the KEP with latest development and beta requirements.

/assign @yliaog @lavalamp @deads2k ",closed,True,2019-03-19 21:47:56,2019-04-01 18:06:36
enhancements,liggitt,https://github.com/kubernetes/enhancements/pull/908,https://api.github.com/repos/kubernetes/enhancements/issues/908,initial go modules draft,"Initial go modules draft KEP.

/sig architecture testing release api-machinery

/cc @lavalamp @sttts ",closed,True,2019-03-20 17:28:31,2019-03-25 15:48:38
enhancements,tallclair,https://github.com/kubernetes/enhancements/pull/909,https://api.github.com/repos/kubernetes/enhancements/issues/909,"[RuntimeClass scheduling] native scheduler support, ready to implement","Updated the RuntimeClass scheduling KEP to use native scheduler support rather than a mixin approach.

This approach uses a cleaner API (doesn't need to mixin a bunch of rules into the pod's node affinity), it let's us use the more expressive `NodeSelector` API, and provides a nice user experience in the error case.

I am opening this PR to continue the discussion @bsalamat started [here](https://github.com/kubernetes/enhancements/pull/896#discussion_r267141010)

/sig node scheduling
/assign @bsalamat @derekwaynecarr @dchen1107 
/cc @yastij 
/milestone v1.15
/priority important-longterm",closed,True,2019-03-20 22:48:00,2019-04-04 18:45:21
enhancements,danielqsj,https://github.com/kubernetes/enhancements/pull/910,https://api.github.com/repos/kubernetes/enhancements/issues/910,Add recently work for KEP metrics overhaul,"This PR aims to add recently work to the metrics overhaul KEP.

/assign @brancz",closed,True,2019-03-21 02:55:40,2019-03-21 14:51:47
enhancements,MikeSpreitzer,https://github.com/kubernetes/enhancements/pull/911,https://api.github.com/repos/kubernetes/enhancements/issues/911,Added design discussion in 20190228-priority-and-fairness,Added discussion of design issues.,open,True,2019-03-21 03:26:05,2019-04-01 18:16:04
enhancements,CsatariGergely,https://github.com/kubernetes/enhancements/pull/912,https://api.github.com/repos/kubernetes/enhancements/issues/912,KEP for critical container feature,Signed-off-by: Gergely Csatari <gergely.csatari@nokia.com>,open,True,2019-03-22 15:03:18,2019-04-02 17:17:16
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/pull/913,https://api.github.com/repos/kubernetes/enhancements/issues/913,KEP: Promote server-side get APIs to GA,Initial draft of KEP.,closed,True,2019-03-22 21:33:59,2019-04-01 15:04:15
enhancements,yue9944882,https://github.com/kubernetes/enhancements/pull/914,https://api.github.com/repos/kubernetes/enhancements/issues/914,Reflect new goal: Provide guaranteed capacity for requests with lower priorities,"an outcome from the last sync up

/cc @deads2k @lavalamp @MikeSpreitzer @wojtek-t @aaron-prindle",closed,True,2019-03-23 10:32:54,2019-03-25 15:09:12
enhancements,vllry,https://github.com/kubernetes/enhancements/pull/915,https://api.github.com/repos/kubernetes/enhancements/issues/915,micro-KEP: don't automatically clean up rules in kube-proxy,"Initial draft, from https://github.com/kubernetes/kubernetes/issues/75408",closed,True,2019-03-25 05:45:48,2019-03-29 20:42:14
enhancements,liggitt,https://github.com/kubernetes/enhancements/pull/916,https://api.github.com/repos/kubernetes/enhancements/issues/916,Update go.modules KEP,"* update details for vendor-management scripts
* update publishing bot steps
* add rationale for continuing to publish staging repos",closed,True,2019-03-25 15:45:19,2019-03-28 14:32:38
enhancements,liggitt,https://github.com/kubernetes/enhancements/issues/917,https://api.github.com/repos/kubernetes/enhancements/issues/917,Add go module support to k8s.io/kubernetes,"# Enhancement Description
- One-line enhancement description (can be used as a release note): Add go module support to k8s.io/kubernetes
- Kubernetes Enhancement Proposal: https://github.com/kubernetes/enhancements/blob/master/keps/sig-architecture/2019-03-19-go-modules.md
- Primary contact (assignee): @liggitt
- Responsible SIGs: sig-architecture, sig-api-machinery
- Enhancement target (which target equals to which milestone):
  - Stable release target (v1.15)",open,False,2019-03-25 15:54:54,2019-03-25 17:27:55
enhancements,Joseph-Irving,https://github.com/kubernetes/enhancements/pull/918,https://api.github.com/repos/kubernetes/enhancements/issues/918,"add release checklist, grad criteria, upgrade strategy to sidecar kep","I've updated this KEP https://github.com/kubernetes/enhancements/issues/753 to match the new template format such as adding the release signoff checklist.

Added my initial thoughts on Graduation criteria, Upgrade/Downgrade strategy and Version Skew. I'll add the test plan in a separate PR as that could do with its own discussion.

/sig apps
/sig node
/assign @enisoc @kow3ns
",open,True,2019-03-26 09:19:47,2019-04-03 00:24:33
enhancements,Joseph-Irving,https://github.com/kubernetes/enhancements/pull/919,https://api.github.com/repos/kubernetes/enhancements/issues/919,Sidecar KEP API implementation,"This is my suggestion for how we could implement the API for defining the sidecars https://github.com/kubernetes/enhancements/issues/753. 
Having a bool was not very popular, having an enum instead seemed to have more support so I'm suggesting we have `containerLifecycle: Sidecar`.

I'm not sure what the default value should be for `containerLifecycle`, I suggested `Standard` here but some other suggestions could be `Default`, `Main`, `Primary`.

/sig apps
/sig node
/assign @kow3ns @enisoc ",open,True,2019-03-26 14:05:27,2019-04-03 15:49:07
enhancements,caesarxuchao,https://github.com/kubernetes/enhancements/pull/920,https://api.github.com/repos/kubernetes/enhancements/issues/920,[RFC] Adding an HA solution to storage migrator KEP,"/sig api-machinery
/assign @yliaog
/cc @deads2k @lavalamp 
",open,True,2019-03-26 20:12:03,2019-04-02 23:40:34
enhancements,craiglpeters,https://github.com/kubernetes/enhancements/pull/921,https://api.github.com/repos/kubernetes/enhancements/issues/921,Updating status of the KEP to 'implemented',"Kubernetes 1.14 included this KEP, so it is now 'implemented'",closed,True,2019-03-26 22:56:18,2019-03-26 23:00:48
enhancements,wojtek-t,https://github.com/kubernetes/enhancements/pull/922,https://api.github.com/repos/kubernetes/enhancements/issues/922,Update watch bookmark KEP,,closed,True,2019-03-27 08:23:44,2019-03-27 15:30:53
enhancements,kwiesmueller,https://github.com/kubernetes/enhancements/pull/923,https://api.github.com/repos/kubernetes/enhancements/issues/923,[WIP] Add a KEP for introducing declarative fieldManager,"/sig api-machinery
/kind feature",open,True,2019-03-27 13:15:32,2019-04-02 12:29:13
enhancements,wojtek-t,https://github.com/kubernetes/enhancements/pull/924,https://api.github.com/repos/kubernetes/enhancements/issues/924,Add KEP for avoid serializing the same object multiple times,,open,True,2019-03-27 14:38:43,2019-04-01 11:19:32
enhancements,mattfarina,https://github.com/kubernetes/enhancements/pull/925,https://api.github.com/repos/kubernetes/enhancements/issues/925,Updating OWNERS for sig-architecture,"This adds an OWNERS file to the sig arch kep directory and updates the list of sig arch chairs to match what's in community.

/cc @bgrant0607 @jdumars 
/sig architecture",closed,True,2019-03-28 14:25:42,2019-03-28 17:58:50
enhancements,apelisse,https://github.com/kubernetes/enhancements/pull/926,https://api.github.com/repos/kubernetes/enhancements/issues/926,Initial KEP for API union/oneOf,"Not meant to be a feature, mostly to document what we're doing.",open,True,2019-03-28 21:54:48,2019-04-03 18:08:25
enhancements,michmike,https://github.com/kubernetes/enhancements/pull/927,https://api.github.com/repos/kubernetes/enhancements/issues/927,Update 20190103-windows-node-support.md,,closed,True,2019-03-30 10:18:41,2019-04-02 22:19:20
enhancements,jeefy,https://github.com/kubernetes/enhancements/pull/928,https://api.github.com/repos/kubernetes/enhancements/issues/928,KEP for release notes improvements,"Rough draft for a KEP outlining several release notes improvements that have been discussed in various forums. I fully expect this to be iterated on quite a bit. 😄 

/sig release
/cc @calebamiles @tpepper @spiffxp ",open,True,2019-03-31 05:35:33,2019-03-31 05:35:59
enhancements,smarterclayton,https://github.com/kubernetes/enhancements/pull/929,https://api.github.com/repos/kubernetes/enhancements/issues/929,Server-side `kubectl get` to GA - Implementable,"Updated with feedback from sig-api-machinery

Will be used as tracking issue.",open,True,2019-04-01 14:54:36,2019-04-02 00:42:21
enhancements,MikeSpreitzer,https://github.com/kubernetes/enhancements/pull/930,https://api.github.com/repos/kubernetes/enhancements/issues/930,Added proposal with priority but assured concurrency and fairness,,open,True,2019-04-02 04:09:10,2019-04-02 19:20:26
enhancements,monopole,https://github.com/kubernetes/enhancements/pull/931,https://api.github.com/repos/kubernetes/enhancements/issues/931,Simplify kustomize plugin KEP,"Rather than edit the markdown directly in the PR,
i'll first throw out what I propose changing directly in the thread.

It might be easier to read that way (if you have the KEP in mind).
I'll number the items.

If that doesn't work, i edit the MD as usual.
",open,True,2019-04-02 16:46:56,2019-04-02 23:47:28
enhancements,andrewsykim,https://github.com/kubernetes/enhancements/pull/932,https://api.github.com/repos/kubernetes/enhancements/issues/932,sig-network: updates to kube-proxy clean up KEP,"Signed-off-by: Andrew Sy Kim <kiman@vmware.com>

Iterating on the kube-proxy clean up KEP based on https://github.com/kubernetes/kubernetes/issues/75360, https://github.com/kubernetes/kubernetes/pull/75377 & https://github.com/kubernetes/enhancements/pull/915 ",closed,True,2019-04-02 17:30:49,2019-04-03 18:09:53
enhancements,MikeSpreitzer,https://github.com/kubernetes/enhancements/pull/933,https://api.github.com/repos/kubernetes/enhancements/issues/933,Added simplified proposal for priority and fairness in apiservers,"No sharing between priority levels.

No distinction between mutating and read-only requests.

I think this is what we agreed in the meeting today.",open,True,2019-04-02 17:56:40,2019-04-03 18:35:43
enhancements,saschagrunert,https://github.com/kubernetes/enhancements/issues/934,https://api.github.com/repos/kubernetes/enhancements/issues/934,Add pod sandbox image to runtime API,"# Enhancement Description
- One-line enhancement description (can be used as a release note): The flag `--pod-infra-container-image` works now for remote runtimes, too. The CRI sends the configured container image to the runtime, which can use it as infra container. Configured remote runtimes have to support this feature and decide on their own if they use it or not.
- Kubernetes Enhancement Proposal: https://github.com/kubernetes/kubernetes/pull/76144
- Primary contact (assignee): @saschagrunert
- Responsible SIGs: sig-node
- Enhancement target:
  - Stable release target (1.15)",open,False,2019-04-04 15:11:59,2019-04-05 13:31:34
enhancements,vincepri,https://github.com/kubernetes/enhancements/pull/935,https://api.github.com/repos/kubernetes/enhancements/issues/935,"Update cluster-api reviewers, approvers and editors",Signed-off-by: Vince Prignano <vincepri@vmware.com>,closed,True,2019-04-04 18:46:56,2019-04-05 15:37:21
enhancements,olamy,https://github.com/kubernetes/enhancements/issues/936,https://api.github.com/repos/kubernetes/enhancements/issues/936,Pod doesn't have inet6 on interface ,"I'm using kube 1.14.00 with ubuntu 18.04.2
running an image with docker give me inet6 support:
```
docker run -it jenkins/jnlp-slave bash
ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
```
The same image started as a pod doesn;t have the inet6 support
```
kubectl exec --namespace=build  -ti jenkins-slave-4xd2c bash
jenkins@jenkins-slave-4xd2c:~$ ip a
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
```
It used to work before upgrading ubuntu (17.10)
I didn;t upgrade anything regarding docker or kubernetes
Thanks
",open,False,2019-04-05 08:26:20,2019-04-05 08:30:16
enhancements,alok87,https://github.com/kubernetes/enhancements/pull/937,https://api.github.com/repos/kubernetes/enhancements/issues/937,KEP proposing to move streaming library to a new home,"Proposal to move streaming library to a new home

Issue: https://github.com/kubernetes/kubernetes/issues/75828

`Implementation-1`: https://github.com/kubernetes/kubernetes/pull/76090

cc @dims @derekwaynecarr @liggitt ",open,True,2019-04-05 08:49:08,2019-04-05 10:57:31
enhancements,RobertKrawitz,https://github.com/kubernetes/enhancements/pull/938,https://api.github.com/repos/kubernetes/enhancements/issues/938,Graduate SupportNodePidsLimit to beta,KEP changes to graduate SupportNodePidsLimit to beta.,open,True,2019-04-05 15:32:27,2019-04-05 15:32:59
